
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed8c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800f040  0800f040  00010040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f6c4  0800f6c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f6cc  0800f6cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f6d0  0800f6d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f6d4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cb0  240001dc  0800f8b0  000111dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004e8c  0800f8b0  00011e8c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e1b2  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056fe  00000000  00000000  0003f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d58  00000000  00000000  00044ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016bd  00000000  00000000  00046818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037a58  00000000  00000000  00047ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000290e9  00000000  00000000  0007f92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001514ca  00000000  00000000  000a8a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f9ee0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008fac  00000000  00000000  001f9f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  00202ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800f024 	.word	0x0800f024

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800f024 	.word	0x0800f024

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <_Z16MX_FREERTOS_Initv+0x18>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <_Z16MX_FREERTOS_Initv+0x1c>)
 8000aaa:	f006 fcb3 	bl	8007414 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <_Z16MX_FREERTOS_Initv+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800f228 	.word	0x0800f228
 8000abc:	08000ac5 	.word	0x08000ac5
 8000ac0:	240001f8 	.word	0x240001f8

08000ac4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f006 fd33 	bl	8007538 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <_Z16StartDefaultTaskPv+0x8>

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x84>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x88>)
 8000b3c:	f001 f80e 	bl	8001b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2017      	movs	r0, #23
 8000b46:	f000 ffe1 	bl	8001b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f000 fff8 	bl	8001b40 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400

08000b60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <MX_I2C1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <MX_I2C1_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000b9e:	f001 fab1 	bl	8002104 <HAL_I2C_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba8:	f000 fac6 	bl	8001138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bb0:	f001 ffb4 	bl	8002b1c <HAL_I2CEx_ConfigAnalogFilter>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bba:	f000 fabd 	bl	8001138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_I2C1_Init+0x74>)
 8000bc2:	f001 fff6 	bl	8002bb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f000 fab4 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240001fc 	.word	0x240001fc
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	20b0ccff 	.word	0x20b0ccff

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ba      	sub	sp, #232	@ 0xe8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	22c0      	movs	r2, #192	@ 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00b f821 	bl	800bc48 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d146      	bne.n	8000c9e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c10:	f04f 0208 	mov.w	r2, #8
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f84a 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c32:	f000 fa81 	bl	8001138 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <HAL_I2C_MspInit+0xd0>)
 8000c7c:	f000 ff6e 	bl	8001b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	37e8      	adds	r7, #232	@ 0xe8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400

08000cb4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <HAL_I2C_MspDeInit+0x40>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d111      	bne.n	8000cea <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_I2C_MspDeInit+0x44>)
 8000cc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_I2C_MspDeInit+0x44>)
 8000cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cda:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <HAL_I2C_MspDeInit+0x48>)
 8000cdc:	f001 f8ee 	bl	8001ebc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_I2C_MspDeInit+0x48>)
 8000ce6:	f001 f8e9 	bl	8001ebc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020400 	.word	0x58020400

08000d00 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>:
 *      Author: dbank
 */

#include <i2cEngine.h>

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dbc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xbc>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc0>)
 8000d14:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	609a      	str	r2, [r3, #8]
	this->pReceiveQueueObject = NULL;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
	configASSERT(this->pReceiveQueueObject = new i2cReceiveQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
 8000d22:	2004      	movs	r0, #4
 8000d24:	f009 fe10 	bl	800a948 <_Znwj>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	2119      	movs	r1, #25
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f8d4 	bl	8000edc <_ZN27i2cReceiveQueue4DynamicDataC1Em>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	605c      	str	r4, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf0c      	ite	eq
 8000d40:	2301      	moveq	r3, #1
 8000d42:	2300      	movne	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00b      	beq.n	8000d62 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d4e:	f383 8811 	msr	BASEPRI, r3
 8000d52:	f3bf 8f6f 	isb	sy
 8000d56:	f3bf 8f4f 	dsb	sy
 8000d5a:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	e7fd      	b.n	8000d5e <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x5e>

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
 8000d62:	2203      	movs	r2, #3
 8000d64:	2100      	movs	r1, #0
 8000d66:	2001      	movs	r0, #1
 8000d68:	f006 fdd1 	bl	800790e <xQueueGenericCreate>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x86>
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc4>)
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc8>)
 8000d7e:	2111      	movs	r1, #17
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xcc>)
 8000d82:	f009 fe07 	bl	800a994 <__assert_func>
	this->i2cSemaphoreGive();
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f834 	bl	8000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>
	this->i2cSemaphoreTake();
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f821 	bl	8000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>
	HAL_I2C_DeInit(p_hi2c1);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fa50 	bl	800223c <HAL_I2C_DeInit>
	MX_I2C1_Init();
 8000d9c:	f7ff fee0 	bl	8000b60 <MX_I2C1_Init>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	printf("%s bus had been initialized.\r\n",this->TAG);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4619      	mov	r1, r3
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xd0>)
 8000da8:	f00a fde6 	bl	800b978 <iprintf>
	this->i2cSemaphoreGive();
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f821 	bl	8000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>
}
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	0800f254 	.word	0x0800f254
 8000dc0:	0800f04c 	.word	0x0800f04c
 8000dc4:	0800f05c 	.word	0x0800f05c
 8000dc8:	0800f098 	.word	0x0800f098
 8000dcc:	0800f0c4 	.word	0x0800f0c4
 8000dd0:	0800f0e0 	.word	0x0800f0e0

08000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>:
BaseType_t i2cMaster::getEsp32InterruptCounterOverflow(void){
	return this->esp32InterruptCounterOverflow;
}
*/

BaseType_t i2cMaster::i2cSemaphoreTake(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 f937 	bl	8008058 <xQueueSemaphoreTake>
 8000dea:	4603      	mov	r3, r0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>:

BaseType_t i2cMaster::i2cSemaphoreGive(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6918      	ldr	r0, [r3, #16]
 8000e00:	2300      	movs	r3, #0
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	f006 fe15 	bl	8007a34 <xQueueGenericSend>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN9i2cMaster4pingEt>:

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retVal;
	this->i2cSemaphoreTake();
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffd7 	bl	8000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6898      	ldr	r0, [r3, #8]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	b299      	uxth	r1, r3
 8000e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e34:	2264      	movs	r2, #100	@ 0x64
 8000e36:	f001 fb27 	bl	8002488 <HAL_I2C_IsDeviceReady>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
	this->i2cSemaphoreGive();
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffd8 	bl	8000df4 <_ZN9i2cMaster16i2cSemaphoreGiveEv>
	if(retVal==HAL_OK){
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <_ZN9i2cMaster4pingEt+0x44>
			printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <_ZN9i2cMaster4pingEt+0x50>)
 8000e54:	f00a fd90 	bl	800b978 <iprintf>
	}
	return retVal;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	0800f100 	.word	0x0800f100

08000e68 <_ZN9i2cMasterD1Ev>:

i2cMaster::~i2cMaster() {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	4a11      	ldr	r2, [pc, #68]	@ (8000eb8 <_ZN9i2cMasterD1Ev+0x50>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	this->i2cSemaphoreTake();
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffac 	bl	8000dd4 <_ZN9i2cMaster16i2cSemaphoreTakeEv>
	HAL_I2C_DeInit(this->p_hi2c1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 f9db 	bl	800223c <HAL_I2C_DeInit>
	this->p_hi2c1 = NULL;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
	delete this->pReceiveQueueObject;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685c      	ldr	r4, [r3, #4]
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d006      	beq.n	8000ea2 <_ZN9i2cMasterD1Ev+0x3a>
 8000e94:	4620      	mov	r0, r4
 8000e96:	f000 f87f 	bl	8000f98 <_ZN27i2cReceiveQueue4DynamicDataD1Ev>
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f009 fd4f 	bl	800a940 <_ZdlPvj>
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f007 fa05 	bl	80082b6 <vQueueDelete>
}
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800f254 	.word	0x0800f254

08000ebc <_ZN9i2cMasterD0Ev>:
i2cMaster::~i2cMaster() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
}
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffcf 	bl	8000e68 <_ZN9i2cMasterD1Ev>
 8000eca:	2114      	movs	r1, #20
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f009 fd37 	bl	800a940 <_ZdlPvj>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN27i2cReceiveQueue4DynamicDataC1Em>:
	{
		return pdFALSE;
	}	
}

i2cReceiveQueue4DynamicData::i2cReceiveQueue4DynamicData(UBaseType_t uxQueueLength){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	this->handler_receiveQueue = NULL;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	configASSERT(this->handler_receiveQueue = xQueueCreate(uxQueueLength, sizeof(void*)));
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f006 fd0c 	bl	800790e <xQueueGenericCreate>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00b      	beq.n	8000f26 <_ZN27i2cReceiveQueue4DynamicDataC1Em+0x4a>
	__asm volatile
 8000f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	60fb      	str	r3, [r7, #12]
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	e7fd      	b.n	8000f22 <_ZN27i2cReceiveQueue4DynamicDataC1Em+0x46>
}
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN27i2cReceiveQueue4DynamicData9QueueSendEPj>:

BaseType_t i2cReceiveQueue4DynamicData::QueueSend(uintptr_t* pvItemToQueue){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
//#warning prawdzić czy przesyłane są poprawne wartości pvItemToQueue
	uintptr_t receivedDataAdress= (uintptr_t) *pvItemToQueue;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	60fb      	str	r3, [r7, #12]
	if (xQueueSend(this->handler_receiveQueue,(const void * const)&receivedDataAdress, pdMS_TO_TICKS(700)) == pdTRUE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	f107 010c 	add.w	r1, r7, #12
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000f4e:	f006 fd71 	bl	8007a34 <xQueueGenericSend>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <_ZN27i2cReceiveQueue4DynamicData9QueueSendEPj+0x36>
	{
		//uintptr_t receivedDataAddresVAL=0;
		//xQueueReceive(handler_receiveQueue, &receivedDataAddresVAL, 500);
		//char* pdymanicDataPointer = (char*) receivedDataAddresVAL;
		return pdTRUE;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e005      	b.n	8000f72 <_ZN27i2cReceiveQueue4DynamicData9QueueSendEPj+0x42>
	}
	else
	{
		this->QueueDeleteDataFromPointer((void*)receivedDataAdress);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f805 	bl	8000f7a <_ZN27i2cReceiveQueue4DynamicData26QueueDeleteDataFromPointerEPv>
		return pdFALSE;
 8000f70:	2300      	movs	r3, #0
	}
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZN27i2cReceiveQueue4DynamicData26QueueDeleteDataFromPointerEPv>:



void i2cReceiveQueue4DynamicData::QueueDeleteDataFromPointer(void* dataPointer){
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	delete[] static_cast<char*>(dataPointer);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <_ZN27i2cReceiveQueue4DynamicData26QueueDeleteDataFromPointerEPv+0x16>
 8000f8a:	6838      	ldr	r0, [r7, #0]
 8000f8c:	f009 fcda 	bl	800a944 <_ZdaPv>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZN27i2cReceiveQueue4DynamicDataD1Ev>:


i2cReceiveQueue4DynamicData::~i2cReceiveQueue4DynamicData(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uintptr_t tempItemToDestrouQueue=0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]

	//void* tempItemToDestrouQueue;
	BaseType_t tempQueueRetVal;
	do
	{
		tempQueueRetVal = xQueueReceive(this->handler_receiveQueue, &tempItemToDestrouQueue, pdMS_TO_TICKS(1));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f107 0108 	add.w	r1, r7, #8
 8000fac:	2201      	movs	r2, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 ff70 	bl	8007e94 <xQueueReceive>
 8000fb4:	60f8      	str	r0, [r7, #12]
		if (tempQueueRetVal == pdPASS)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d104      	bne.n	8000fc6 <_ZN27i2cReceiveQueue4DynamicDataD1Ev+0x2e>
		{
			this->QueueDeleteDataFromPointer((void*)tempItemToDestrouQueue);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffda 	bl	8000f7a <_ZN27i2cReceiveQueue4DynamicData26QueueDeleteDataFromPointerEPv>
			//this->QueueDeleteDataFromPointer((void*)receivedDataAdress);
		}
	} while (tempQueueRetVal == pdPASS);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d0eb      	beq.n	8000fa4 <_ZN27i2cReceiveQueue4DynamicDataD1Ev+0xc>
	vQueueDelete(this->handler_receiveQueue);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f007 f970 	bl	80082b6 <vQueueDelete>

}
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 fc7e 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f810 	bl	800100c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f7ff fd72 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ff0:	f000 fb98 	bl	8001724 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ff4:	f7ff fdb4 	bl	8000b60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  initTaskFunctions();
 8000ff8:	f000 faf2 	bl	80015e0 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ffc:	f006 f9c0 	bl	8007380 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001000:	f7ff fd4e 	bl	8000aa0 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8001004:	f006 f9e0 	bl	80073c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <main+0x28>

0800100c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09c      	sub	sp, #112	@ 0x70
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001016:	224c      	movs	r2, #76	@ 0x4c
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00a fe14 	bl	800bc48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2220      	movs	r2, #32
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00a fe0e 	bl	800bc48 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800102c:	4b37      	ldr	r3, [pc, #220]	@ (800110c <_Z18SystemClock_Configv+0x100>)
 800102e:	f04f 32ff 	mov.w	r2, #4294967295
 8001032:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001036:	2002      	movs	r0, #2
 8001038:	f001 fe08 	bl	8002c4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b33      	ldr	r3, [pc, #204]	@ (8001110 <_Z18SystemClock_Configv+0x104>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <_Z18SystemClock_Configv+0x104>)
 8001046:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b30      	ldr	r3, [pc, #192]	@ (8001110 <_Z18SystemClock_Configv+0x104>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001058:	bf00      	nop
 800105a:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <_Z18SystemClock_Configv+0x104>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f3      	bne.n	800105a <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001072:	2302      	movs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001076:	2301      	movs	r3, #1
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800107a:	2340      	movs	r3, #64	@ 0x40
 800107c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001082:	2300      	movs	r3, #0
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001086:	2304      	movs	r3, #4
 8001088:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800108a:	2323      	movs	r3, #35	@ 0x23
 800108c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800109a:	230c      	movs	r3, #12
 800109c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800109e:	2300      	movs	r3, #0
 80010a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fe08 	bl	8002cc0 <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf14      	ite	ne
 80010b6:	2301      	movne	r3, #1
 80010b8:	2300      	moveq	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80010c0:	f000 f83a 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	233f      	movs	r3, #63	@ 0x3f
 80010c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2303      	movs	r3, #3
 80010ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010d4:	2340      	movs	r3, #64	@ 0x40
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010d8:	2340      	movs	r3, #64	@ 0x40
 80010da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010e2:	2340      	movs	r3, #64	@ 0x40
 80010e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2106      	movs	r1, #6
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fa1a 	bl	8003524 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8001100:	f000 f81a 	bl	8001138 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3770      	adds	r7, #112	@ 0x70
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58024400 	.word	0x58024400
 8001110:	58024800 	.word	0x58024800

08001114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001126:	f000 fc19 	bl	800195c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010000 	.word	0x40010000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <__io_putchar>:

#include <printfRedirect.h>


//printf to uart redirection
void __io_putchar(uint8_t ch) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 800114e:	1df9      	adds	r1, r7, #7
 8001150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001154:	2201      	movs	r2, #1
 8001156:	4803      	ldr	r0, [pc, #12]	@ (8001164 <__io_putchar+0x20>)
 8001158:	f004 feb0 	bl	8005ebc <HAL_UART_Transmit>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	240002b0 	.word	0x240002b0

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <HAL_MspInit+0x38>)
 8001170:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_MspInit+0x38>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800117e:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_MspInit+0x38>)
 8001180:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	210f      	movs	r1, #15
 8001190:	f06f 0001 	mvn.w	r0, #1
 8001194:	f000 fcba 	bl	8001b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400

080011a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	@ 0x38
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d844      	bhi.n	800123c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80011b2:	2200      	movs	r2, #0
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	2019      	movs	r0, #25
 80011b8:	f000 fca8 	bl	8001b0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011bc:	2019      	movs	r0, #25
 80011be:	f000 fcbf 	bl	8001b40 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011c2:	4a24      	ldr	r2, [pc, #144]	@ (8001254 <HAL_InitTick+0xb0>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_InitTick+0xb4>)
 80011ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80011ce:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <HAL_InitTick+0xb4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_InitTick+0xb4>)
 80011da:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e6:	f107 020c 	add.w	r2, r7, #12
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fd23 	bl	8003c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011f6:	f002 fd0b 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 80011fa:	4603      	mov	r3, r0
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	4a16      	ldr	r2, [pc, #88]	@ (800125c <HAL_InitTick+0xb8>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	3b01      	subs	r3, #1
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_InitTick+0xbc>)
 8001210:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <HAL_InitTick+0xc0>)
 8001212:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_InitTick+0xbc>)
 8001216:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800121a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800121c:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <HAL_InitTick+0xbc>)
 800121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001220:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_InitTick+0xbc>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_InitTick+0xbc>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800122e:	480c      	ldr	r0, [pc, #48]	@ (8001260 <HAL_InitTick+0xbc>)
 8001230:	f004 fb26 	bl	8005880 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_InitTick+0xa6>
 800123a:	e001      	b.n	8001240 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e005      	b.n	800124c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001240:	4807      	ldr	r0, [pc, #28]	@ (8001260 <HAL_InitTick+0xbc>)
 8001242:	f004 fb7f 	bl	8005944 <HAL_TIM_Base_Start_IT>
 8001246:	4603      	mov	r3, r0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3738      	adds	r7, #56	@ 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24000008 	.word	0x24000008
 8001258:	58024400 	.word	0x58024400
 800125c:	431bde83 	.word	0x431bde83
 8001260:	24000250 	.word	0x24000250
 8001264:	40010000 	.word	0x40010000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 80012a2:	2020      	movs	r0, #32
 80012a4:	f000 ff14 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <TIM1_UP_IRQHandler+0x10>)
 80012b2:	f004 fbbf 	bl	8005a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	24000250 	.word	0x24000250

080012c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_kill>:

int _kill(int pid, int sig)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012da:	f00a fdb1 	bl	800be40 <__errno>
 80012de:	4603      	mov	r3, r0
 80012e0:	2216      	movs	r2, #22
 80012e2:	601a      	str	r2, [r3, #0]
  return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_exit>:

void _exit (int status)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffe7 	bl	80012d0 <_kill>
 while (1) {}    /* Make sure we hang here */
 8001302:	bf00      	nop
 8001304:	e7fd      	b.n	8001302 <_exit+0x12>

08001306 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e00a      	b.n	800132e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001318:	f3af 8000 	nop.w
 800131c:	4601      	mov	r1, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	b2ca      	uxtb	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf0      	blt.n	8001318 <_read+0x12>
  }

  return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e009      	b.n	8001366 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	60ba      	str	r2, [r7, #8]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fef2 	bl	8001144 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	dbf1      	blt.n	8001352 <_write+0x12>
  }
  return len;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_close>:

int _close(int file)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a0:	605a      	str	r2, [r3, #4]
  return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_isatty>:

int _isatty(int file)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f00a fd16 	bl	800be40 <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	24100000 	.word	0x24100000
 8001440:	00000400 	.word	0x00000400
 8001444:	2400029c 	.word	0x2400029c
 8001448:	24004e90 	.word	0x24004e90

0800144c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001450:	4b32      	ldr	r3, [pc, #200]	@ (800151c <SystemInit+0xd0>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001456:	4a31      	ldr	r2, [pc, #196]	@ (800151c <SystemInit+0xd0>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <SystemInit+0xd4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	2b02      	cmp	r3, #2
 800146a:	d807      	bhi.n	800147c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <SystemInit+0xd4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 030f 	bic.w	r3, r3, #15
 8001474:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <SystemInit+0xd4>)
 8001476:	f043 0303 	orr.w	r3, r3, #3
 800147a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800147c:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <SystemInit+0xd8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <SystemInit+0xd8>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <SystemInit+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <SystemInit+0xd8>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4924      	ldr	r1, [pc, #144]	@ (8001524 <SystemInit+0xd8>)
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <SystemInit+0xdc>)
 8001496:	4013      	ands	r3, r2
 8001498:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <SystemInit+0xd4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <SystemInit+0xd4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 030f 	bic.w	r3, r3, #15
 80014ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <SystemInit+0xd4>)
 80014b0:	f043 0303 	orr.w	r3, r3, #3
 80014b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <SystemInit+0xd8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <SystemInit+0xd8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <SystemInit+0xd8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <SystemInit+0xd8>)
 80014ca:	4a18      	ldr	r2, [pc, #96]	@ (800152c <SystemInit+0xe0>)
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <SystemInit+0xd8>)
 80014d0:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <SystemInit+0xe4>)
 80014d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <SystemInit+0xd8>)
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <SystemInit+0xe8>)
 80014d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <SystemInit+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014e0:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <SystemInit+0xd8>)
 80014e2:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <SystemInit+0xe8>)
 80014e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <SystemInit+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <SystemInit+0xd8>)
 80014ee:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <SystemInit+0xe8>)
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <SystemInit+0xd8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <SystemInit+0xd8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <SystemInit+0xd8>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001502:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <SystemInit+0xd8>)
 8001506:	2200      	movs	r2, #0
 8001508:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <SystemInit+0xec>)
 800150c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001510:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	52002000 	.word	0x52002000
 8001524:	58024400 	.word	0x58024400
 8001528:	eaf6ed7f 	.word	0xeaf6ed7f
 800152c:	02020200 	.word	0x02020200
 8001530:	01ff0000 	.word	0x01ff0000
 8001534:	01010280 	.word	0x01010280
 8001538:	52004000 	.word	0x52004000

0800153c <_ZL29esp32IntrrruptRequestCallbackPv>:
static BaseType_t esp32InrerruptRequest_CountingSemaphoreOverflow=pdFALSE;	//zmienna informująca o tym, że nastąpiło przepełnienie "esp32IntrrruptRequest_CountingSemaphore", aka. zbyt wiele oczekujących komunikatów, co może wskazywać na błąd.

static i2cMaster* pi2cMaster;  //wsyaźnik do obiektu służącego do komunikacji stm32 po i2c jako master


static void esp32IntrrruptRequestCallback(void *pNothing){
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	6078      	str	r0, [r7, #4]
	while(1){
		if( uxSemaphoreGetCount(esp32IntrrruptRequest_CountingSemaphore)==ESP32_INTERRUPT_REQUEST_COUNTING_SEMAPHORE_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
 8001544:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <_ZL29esp32IntrrruptRequestCallbackPv+0x8c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fe95 	bl	8008278 <uxQueueMessagesWaiting>
 800154e:	4603      	mov	r3, r0
 8001550:	2b15      	cmp	r3, #21
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <_ZL29esp32IntrrruptRequestCallbackPv+0x2e>
			esp32InrerruptRequest_CountingSemaphoreOverflow = pdTRUE;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <_ZL29esp32IntrrruptRequestCallbackPv+0x90>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
			printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
 8001564:	481a      	ldr	r0, [pc, #104]	@ (80015d0 <_ZL29esp32IntrrruptRequestCallbackPv+0x94>)
 8001566:	f00a fa6f 	bl	800ba48 <puts>
		}
		if (xSemaphoreTake(esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE){		//czeka dopuki nie pojawi się esp32 interrupt request
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <_ZL29esp32IntrrruptRequestCallbackPv+0x8c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f04f 31ff 	mov.w	r1, #4294967295
 8001572:	4618      	mov	r0, r3
 8001574:	f006 fd70 	bl	8008058 <xQueueSemaphoreTake>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	bf0c      	ite	eq
 800157e:	2301      	moveq	r3, #1
 8001580:	2300      	movne	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0dd      	beq.n	8001544 <_ZL29esp32IntrrruptRequestCallbackPv+0x8>
			printf("High prior task \r\n");
 8001588:	4812      	ldr	r0, [pc, #72]	@ (80015d4 <_ZL29esp32IntrrruptRequestCallbackPv+0x98>)
 800158a:	f00a fa5d 	bl	800ba48 <puts>
			size_t dataSizse;
			HAL_I2C_Master_Receive(&hi2c1, I2C_SLAVE_ADDRESS<<1, (uint8_t*)&dataSizse, sizeof(size_t), 500);
 800158e:	f107 0210 	add.w	r2, r7, #16
 8001592:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2304      	movs	r3, #4
 800159a:	2178      	movs	r1, #120	@ 0x78
 800159c:	480e      	ldr	r0, [pc, #56]	@ (80015d8 <_ZL29esp32IntrrruptRequestCallbackPv+0x9c>)
 800159e:	f000 fe7d 	bl	800229c <HAL_I2C_Master_Receive>
			char* pdymanicDataPointer = new char[dataSizse];
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f009 f9e0 	bl	800a96a <_Znaj>
 80015aa:	4603      	mov	r3, r0
 80015ac:	617b      	str	r3, [r7, #20]
			uintptr_t pdymanicDataPointer_byValue = (uintptr_t) pdymanicDataPointer;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	60fb      	str	r3, [r7, #12]
			pi2cMaster->pReceiveQueueObject->QueueSend(&pdymanicDataPointer_byValue);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <_ZL29esp32IntrrruptRequestCallbackPv+0xa0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f107 020c 	add.w	r2, r7, #12
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fcb6 	bl	8000f30 <_ZN27i2cReceiveQueue4DynamicData9QueueSendEPj>
			//#error Pociągnąć to dalej
		}
	};
 80015c4:	e7be      	b.n	8001544 <_ZL29esp32IntrrruptRequestCallbackPv+0x8>
 80015c6:	bf00      	nop
 80015c8:	240002a4 	.word	0x240002a4
 80015cc:	240002a8 	.word	0x240002a8
 80015d0:	0800f134 	.word	0x0800f134
 80015d4:	0800f16c 	.word	0x0800f16c
 80015d8:	240001fc 	.word	0x240001fc
 80015dc:	240002ac 	.word	0x240002ac

080015e0 <_Z17initTaskFunctionsv>:
}


void initTaskFunctions(void){
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af02      	add	r7, sp, #8
	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 80015e6:	a33c      	add	r3, pc, #240	@ (adr r3, 80016d8 <_Z17initTaskFunctionsv+0xf8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	4830      	ldr	r0, [pc, #192]	@ (80016b0 <_Z17initTaskFunctionsv+0xd0>)
 80015ee:	f00a f9c3 	bl	800b978 <iprintf>
	configASSERT(esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(ESP32_INTERRUPT_REQUEST_COUNTING_SEMAPHORE_MAX, 0));
 80015f2:	2100      	movs	r1, #0
 80015f4:	2015      	movs	r0, #21
 80015f6:	f006 f9e8 	bl	80079ca <xQueueCreateCountingSemaphore>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a2d      	ldr	r2, [pc, #180]	@ (80016b4 <_Z17initTaskFunctionsv+0xd4>)
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <_Z17initTaskFunctionsv+0xd4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <_Z17initTaskFunctionsv+0x4a>
	__asm volatile
 8001612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	607b      	str	r3, [r7, #4]
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <_Z17initTaskFunctionsv+0x46>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY+1, &taskHandle_esp32IntrrruptRequest));
 800162a:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <_Z17initTaskFunctionsv+0xd8>)
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2301      	movs	r3, #1
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001638:	4920      	ldr	r1, [pc, #128]	@ (80016bc <_Z17initTaskFunctionsv+0xdc>)
 800163a:	4821      	ldr	r0, [pc, #132]	@ (80016c0 <_Z17initTaskFunctionsv+0xe0>)
 800163c:	f007 f870 	bl	8008720 <xTaskCreate>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00b      	beq.n	8001668 <_Z17initTaskFunctionsv+0x88>
	__asm volatile
 8001650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001654:	f383 8811 	msr	BASEPRI, r3
 8001658:	f3bf 8f6f 	isb	sy
 800165c:	f3bf 8f4f 	dsb	sy
 8001660:	603b      	str	r3, [r7, #0]
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <_Z17initTaskFunctionsv+0x84>

	pi2cMaster = NULL;
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <_Z17initTaskFunctionsv+0xe4>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	assert(pi2cMaster = new i2cMaster(&hi2c1));
 800166e:	2014      	movs	r0, #20
 8001670:	f009 f96a 	bl	800a948 <_Znwj>
 8001674:	4603      	mov	r3, r0
 8001676:	461c      	mov	r4, r3
 8001678:	4913      	ldr	r1, [pc, #76]	@ (80016c8 <_Z17initTaskFunctionsv+0xe8>)
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fb40 	bl	8000d00 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_Z17initTaskFunctionsv+0xe4>)
 8001682:	601c      	str	r4, [r3, #0]
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <_Z17initTaskFunctionsv+0xe4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <_Z17initTaskFunctionsv+0xb8>
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <_Z17initTaskFunctionsv+0xec>)
 800168e:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <_Z17initTaskFunctionsv+0xf0>)
 8001690:	2137      	movs	r1, #55	@ 0x37
 8001692:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <_Z17initTaskFunctionsv+0xf4>)
 8001694:	f009 f97e 	bl	800a994 <__assert_func>
	pi2cMaster->ping(I2C_SLAVE_ADDRESS);
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <_Z17initTaskFunctionsv+0xe4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	213c      	movs	r1, #60	@ 0x3c
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fbb8 	bl	8000e14 <_ZN9i2cMaster4pingEt>
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	0800f180 	.word	0x0800f180
 80016b4:	240002a4 	.word	0x240002a4
 80016b8:	240002a0 	.word	0x240002a0
 80016bc:	0800f1a4 	.word	0x0800f1a4
 80016c0:	0800153d 	.word	0x0800153d
 80016c4:	240002ac 	.word	0x240002ac
 80016c8:	240001fc 	.word	0x240001fc
 80016cc:	0800f1b0 	.word	0x0800f1b0
 80016d0:	0800f1d4 	.word	0x0800f1d4
 80016d4:	0800f1f0 	.word	0x0800f1f0
 80016d8:	9999999a 	.word	0x9999999a
 80016dc:	3fb99999 	.word	0x3fb99999

080016e0 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_GPIO_EXTI_Callback+0x3c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f107 020c 	add.w	r2, r7, #12
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 fb3b 	bl	8007d74 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_EXTI_Callback+0x34>
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_GPIO_EXTI_Callback+0x40>)
 8001706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	f3bf 8f6f 	isb	sy
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	240002a4 	.word	0x240002a4
 8001720:	e000ed04 	.word	0xe000ed04

08001724 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 800172a:	4a23      	ldr	r2, [pc, #140]	@ (80017b8 <MX_USART1_UART_Init+0x94>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800176c:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 800176e:	f004 fb55 	bl	8005e1c <HAL_UART_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001778:	f7ff fcde 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001780:	f005 fcef 	bl	8007162 <HAL_UARTEx_SetTxFifoThreshold>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800178a:	f7ff fcd5 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 8001792:	f005 fd24 	bl	80071de <HAL_UARTEx_SetRxFifoThreshold>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800179c:	f7ff fccc 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MX_USART1_UART_Init+0x90>)
 80017a2:	f005 fca5 	bl	80070f0 <HAL_UARTEx_DisableFifoMode>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017ac:	f7ff fcc4 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	240002b0 	.word	0x240002b0
 80017b8:	40011000 	.word	0x40011000

080017bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0ba      	sub	sp, #232	@ 0xe8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	22c0      	movs	r2, #192	@ 0xc0
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a fa33 	bl	800bc48 <memset>
  if(uartHandle->Instance==USART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <HAL_UART_MspInit+0xc8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d146      	bne.n	800187a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017ec:	f04f 0201 	mov.w	r2, #1
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fa5c 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800180e:	f7ff fc93 	bl	8001138 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <HAL_UART_MspInit+0xcc>)
 8001814:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001818:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <HAL_UART_MspInit+0xcc>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_UART_MspInit+0xcc>)
 8001824:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_UART_MspInit+0xcc>)
 8001832:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <HAL_UART_MspInit+0xcc>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_UART_MspInit+0xcc>)
 8001842:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800184e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001868:	2304      	movs	r3, #4
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_UART_MspInit+0xd0>)
 8001876:	f000 f971 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	37e8      	adds	r7, #232	@ 0xe8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40011000 	.word	0x40011000
 8001888:	58024400 	.word	0x58024400
 800188c:	58020400 	.word	0x58020400

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001894:	f7ff fdda 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	@ (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018be:	f00a fac5 	bl	800be4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff fb8d 	bl	8000fe0 <main>
  bx  lr
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018d0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80018d4:	0800f6d4 	.word	0x0800f6d4
  ldr r2, =_sbss
 80018d8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80018dc:	24004e8c 	.word	0x24004e8c

080018e0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ea:	2003      	movs	r0, #3
 80018ec:	f000 f903 	bl	8001af6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018f0:	f001 ffce 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_Init+0x68>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	4913      	ldr	r1, [pc, #76]	@ (8001950 <HAL_Init+0x6c>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_Init+0x68>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <HAL_Init+0x6c>)
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <HAL_Init+0x70>)
 8001926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001928:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_Init+0x74>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192e:	200f      	movs	r0, #15
 8001930:	f7ff fc38 	bl	80011a4 <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e002      	b.n	8001944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800193e:	f7ff fc13 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	58024400 	.word	0x58024400
 8001950:	0800f25c 	.word	0x0800f25c
 8001954:	24000004 	.word	0x24000004
 8001958:	24000000 	.word	0x24000000

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2400000c 	.word	0x2400000c
 8001980:	24000344 	.word	0x24000344

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	@ (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	24000344 	.word	0x24000344

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <__NVIC_SetPriorityGrouping+0x40>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x40>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	05fa0000 	.word	0x05fa0000

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	@ (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	@ (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	@ (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	@ 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff4c 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1a:	f7ff ff63 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	6978      	ldr	r0, [r7, #20]
 8001b26:	f7ff ffb3 	bl	8001a90 <NVIC_EncodePriority>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff82 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff56 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b6a:	4b89      	ldr	r3, [pc, #548]	@ (8001d90 <HAL_GPIO_Init+0x234>)
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b6e:	e194      	b.n	8001e9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8186 	beq.w	8001e94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x44>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80e0 	beq.w	8001e94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_GPIO_Init+0x238>)
 8001cd6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cda:	4a2e      	ldr	r2, [pc, #184]	@ (8001d94 <HAL_GPIO_Init+0x238>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <HAL_GPIO_Init+0x238>)
 8001ce6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf2:	4a29      	ldr	r2, [pc, #164]	@ (8001d98 <HAL_GPIO_Init+0x23c>)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a20      	ldr	r2, [pc, #128]	@ (8001d9c <HAL_GPIO_Init+0x240>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d052      	beq.n	8001dc4 <HAL_GPIO_Init+0x268>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	@ (8001da0 <HAL_GPIO_Init+0x244>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d031      	beq.n	8001d8a <HAL_GPIO_Init+0x22e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_GPIO_Init+0x248>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x22a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <HAL_GPIO_Init+0x24c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x226>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_GPIO_Init+0x250>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_GPIO_Init+0x254>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x21e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <HAL_GPIO_Init+0x258>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x21a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a19      	ldr	r2, [pc, #100]	@ (8001db8 <HAL_GPIO_Init+0x25c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x216>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <HAL_GPIO_Init+0x260>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x212>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <HAL_GPIO_Init+0x264>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x20e>
 8001d66:	2309      	movs	r3, #9
 8001d68:	e02d      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	e02b      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e029      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d72:	2307      	movs	r3, #7
 8001d74:	e027      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e025      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e023      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e021      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e01f      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e01d      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01b      	b.n	8001dc6 <HAL_GPIO_Init+0x26a>
 8001d8e:	bf00      	nop
 8001d90:	58000080 	.word	0x58000080
 8001d94:	58024400 	.word	0x58024400
 8001d98:	58000400 	.word	0x58000400
 8001d9c:	58020000 	.word	0x58020000
 8001da0:	58020400 	.word	0x58020400
 8001da4:	58020800 	.word	0x58020800
 8001da8:	58020c00 	.word	0x58020c00
 8001dac:	58021000 	.word	0x58021000
 8001db0:	58021400 	.word	0x58021400
 8001db4:	58021800 	.word	0x58021800
 8001db8:	58021c00 	.word	0x58021c00
 8001dbc:	58022000 	.word	0x58022000
 8001dc0:	58022400 	.word	0x58022400
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	f002 0203 	and.w	r2, r2, #3
 8001dcc:	0092      	lsls	r2, r2, #2
 8001dce:	4093      	lsls	r3, r2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd6:	4938      	ldr	r1, [pc, #224]	@ (8001eb8 <HAL_GPIO_Init+0x35c>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	3301      	adds	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f ae63 	bne.w	8001b70 <HAL_GPIO_Init+0x14>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3724      	adds	r7, #36	@ 0x24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	58000400 	.word	0x58000400

08001ebc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eca:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <HAL_GPIO_DeInit+0x1e4>)
 8001ecc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001ece:	e0d9      	b.n	8002084 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4013      	ands	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80cc 	beq.w	800207e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a6f      	ldr	r2, [pc, #444]	@ (80020a4 <HAL_GPIO_DeInit+0x1e8>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a67      	ldr	r2, [pc, #412]	@ (80020a8 <HAL_GPIO_DeInit+0x1ec>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d037      	beq.n	8001f80 <HAL_GPIO_DeInit+0xc4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a66      	ldr	r2, [pc, #408]	@ (80020ac <HAL_GPIO_DeInit+0x1f0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d031      	beq.n	8001f7c <HAL_GPIO_DeInit+0xc0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a65      	ldr	r2, [pc, #404]	@ (80020b0 <HAL_GPIO_DeInit+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d02b      	beq.n	8001f78 <HAL_GPIO_DeInit+0xbc>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a64      	ldr	r2, [pc, #400]	@ (80020b4 <HAL_GPIO_DeInit+0x1f8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d025      	beq.n	8001f74 <HAL_GPIO_DeInit+0xb8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a63      	ldr	r2, [pc, #396]	@ (80020b8 <HAL_GPIO_DeInit+0x1fc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01f      	beq.n	8001f70 <HAL_GPIO_DeInit+0xb4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a62      	ldr	r2, [pc, #392]	@ (80020bc <HAL_GPIO_DeInit+0x200>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d019      	beq.n	8001f6c <HAL_GPIO_DeInit+0xb0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a61      	ldr	r2, [pc, #388]	@ (80020c0 <HAL_GPIO_DeInit+0x204>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_DeInit+0xac>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a60      	ldr	r2, [pc, #384]	@ (80020c4 <HAL_GPIO_DeInit+0x208>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_DeInit+0xa8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80020c8 <HAL_GPIO_DeInit+0x20c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_DeInit+0xa4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a5e      	ldr	r2, [pc, #376]	@ (80020cc <HAL_GPIO_DeInit+0x210>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_DeInit+0xa0>
 8001f58:	2309      	movs	r3, #9
 8001f5a:	e012      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	e010      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f60:	2308      	movs	r3, #8
 8001f62:	e00e      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f64:	2307      	movs	r3, #7
 8001f66:	e00c      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f68:	2306      	movs	r3, #6
 8001f6a:	e00a      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f6c:	2305      	movs	r3, #5
 8001f6e:	e008      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f70:	2304      	movs	r3, #4
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f74:	2303      	movs	r3, #3
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_DeInit+0xc6>
 8001f80:	2300      	movs	r3, #0
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d136      	bne.n	8002000 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	401a      	ands	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fce:	4013      	ands	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fe2:	4a30      	ldr	r2, [pc, #192]	@ (80020a4 <HAL_GPIO_DeInit+0x1e8>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	482c      	ldr	r0, [pc, #176]	@ (80020a4 <HAL_GPIO_DeInit+0x1e8>)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2103      	movs	r1, #3
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	08d2      	lsrs	r2, r2, #3
 8002034:	4019      	ands	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2103      	movs	r1, #3
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	2101      	movs	r1, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2103      	movs	r1, #3
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f af1f 	bne.w	8001ed0 <HAL_GPIO_DeInit+0x14>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	58000080 	.word	0x58000080
 80020a4:	58000400 	.word	0x58000400
 80020a8:	58020000 	.word	0x58020000
 80020ac:	58020400 	.word	0x58020400
 80020b0:	58020800 	.word	0x58020800
 80020b4:	58020c00 	.word	0x58020c00
 80020b8:	58021000 	.word	0x58021000
 80020bc:	58021400 	.word	0x58021400
 80020c0:	58021800 	.word	0x58021800
 80020c4:	58021c00 	.word	0x58021c00
 80020c8:	58022000 	.word	0x58022000
 80020cc:	58022400 	.word	0x58022400

080020d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff faf2 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e08b      	b.n	800222e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fd58 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002154:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002164:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	e006      	b.n	800218c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800218a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d108      	bne.n	80021a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	e007      	b.n	80021b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <HAL_I2C_Init+0x134>)
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69d9      	ldr	r1, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	02008000 	.word	0x02008000

0800223c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e021      	b.n	8002292 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2224      	movs	r2, #36	@ 0x24
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fd24 	bl	8000cb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	461a      	mov	r2, r3
 80022a8:	460b      	mov	r3, r1
 80022aa:	817b      	strh	r3, [r7, #10]
 80022ac:	4613      	mov	r3, r2
 80022ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	f040 80db 	bne.w	8002474 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_I2C_Master_Receive+0x30>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0d4      	b.n	8002476 <HAL_I2C_Master_Receive+0x1da>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022d4:	f7ff fb56 	bl	8001984 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2319      	movs	r3, #25
 80022e0:	2201      	movs	r2, #1
 80022e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f9de 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0bf      	b.n	8002476 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2222      	movs	r2, #34	@ 0x22
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2210      	movs	r2, #16
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	893a      	ldrh	r2, [r7, #8]
 8002316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	2bff      	cmp	r3, #255	@ 0xff
 8002326:	d90e      	bls.n	8002346 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	22ff      	movs	r2, #255	@ 0xff
 800232c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002332:	b2da      	uxtb	r2, r3
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	4b52      	ldr	r3, [pc, #328]	@ (8002480 <HAL_I2C_Master_Receive+0x1e4>)
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fbba 	bl	8002ab8 <I2C_TransferConfig>
 8002344:	e06d      	b.n	8002422 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002354:	b2da      	uxtb	r2, r3
 8002356:	8979      	ldrh	r1, [r7, #10]
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <HAL_I2C_Master_Receive+0x1e4>)
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fba9 	bl	8002ab8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002366:	e05c      	b.n	8002422 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fa37 	bl	80027e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e07c      	b.n	8002476 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d034      	beq.n	8002422 <HAL_I2C_Master_Receive+0x186>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d130      	bne.n	8002422 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2200      	movs	r2, #0
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f96c 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e04d      	b.n	8002476 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2bff      	cmp	r3, #255	@ 0xff
 80023e2:	d90e      	bls.n	8002402 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	8979      	ldrh	r1, [r7, #10]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fb5c 	bl	8002ab8 <I2C_TransferConfig>
 8002400:	e00f      	b.n	8002422 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb4b 	bl	8002ab8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d19d      	bne.n	8002368 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6a39      	ldr	r1, [r7, #32]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f992 	bl	800275a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e01a      	b.n	8002476 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2220      	movs	r2, #32
 8002446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_I2C_Master_Receive+0x1e8>)
 8002454:	400b      	ands	r3, r1
 8002456:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	80002400 	.word	0x80002400
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	460b      	mov	r3, r1
 8002496:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	f040 80d2 	bne.w	800264e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b8:	d101      	bne.n	80024be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0c8      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_I2C_IsDeviceReady+0x44>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0c1      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2224      	movs	r2, #36	@ 0x24
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_I2C_IsDeviceReady+0x6e>
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f0:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_I2C_IsDeviceReady+0x1d0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	e004      	b.n	8002500 <HAL_I2C_IsDeviceReady+0x78>
 80024f6:	897b      	ldrh	r3, [r7, #10]
 80024f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024fc:	4b57      	ldr	r3, [pc, #348]	@ (800265c <HAL_I2C_IsDeviceReady+0x1d4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002506:	f7ff fa3d 	bl	8001984 <HAL_GetTick>
 800250a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b20      	cmp	r3, #32
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b10      	cmp	r3, #16
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002538:	e034      	b.n	80025a4 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d01a      	beq.n	8002578 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002542:	f7ff fa1f 	bl	8001984 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <HAL_I2C_IsDeviceReady+0xd0>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10f      	bne.n	8002578 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e06b      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b10      	cmp	r3, #16
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <HAL_I2C_IsDeviceReady+0x128>
 80025aa:	7fbb      	ldrb	r3, [r7, #30]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0c4      	beq.n	800253a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d01a      	beq.n	80025f4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2120      	movs	r1, #32
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f86d 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e03b      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2220      	movs	r2, #32
 80025de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e02d      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2120      	movs	r1, #32
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f852 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e020      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2210      	movs	r2, #16
 8002614:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	f63f af5a 	bhi.w	80024e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
  }
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	02002000 	.word	0x02002000
 800265c:	02002800 	.word	0x02002800

08002660 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d103      	bne.n	800267e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d007      	beq.n	800269c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	619a      	str	r2, [r3, #24]
  }
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b8:	e03b      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f91a 	bl	80028f8 <I2C_IsErrorOccurred>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e041      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d02d      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7ff f955 	bl	8001984 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d122      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4013      	ands	r3, r2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	429a      	cmp	r2, r3
 8002708:	d113      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	429a      	cmp	r2, r3
 800274e:	d0b4      	beq.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002766:	e02f      	b.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f8c3 	bl	80028f8 <I2C_IsErrorOccurred>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e02d      	b.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7ff f902 	bl	8001984 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11a      	bne.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d013      	beq.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e007      	b.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d1c8      	bne.n	8002768 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027f0:	e071      	b.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f87e 	bl	80028f8 <I2C_IsErrorOccurred>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d13b      	bne.n	800288c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d138      	bne.n	800288c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d105      	bne.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d121      	bne.n	8002886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2210      	movs	r2, #16
 8002848:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2204      	movs	r2, #4
 800284e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2220      	movs	r2, #32
 8002856:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002864:	400b      	ands	r3, r1
 8002866:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
 8002884:	e002      	b.n	800288c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800288c:	f7ff f87a 	bl	8001984 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00f      	beq.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d002      	beq.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d083      	beq.n	80027f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	fe00e800 	.word	0xfe00e800

080028f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d068      	beq.n	80029f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2210      	movs	r2, #16
 800292a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800292c:	e049      	b.n	80029c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d045      	beq.n	80029c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7ff f825 	bl	8001984 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_IsErrorOccurred+0x54>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d13a      	bne.n	80029c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002956:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800295e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800296a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800296e:	d121      	bne.n	80029b4 <I2C_IsErrorOccurred+0xbc>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002976:	d01d      	beq.n	80029b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b20      	cmp	r3, #32
 800297c:	d01a      	beq.n	80029b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800298c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800298e:	f7fe fff9 	bl	8001984 <HAL_GetTick>
 8002992:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002994:	e00e      	b.n	80029b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002996:	f7fe fff5 	bl	8001984 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b19      	cmp	r3, #25
 80029a2:	d907      	bls.n	80029b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f043 0320 	orr.w	r3, r3, #32
 80029aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029b2:	e006      	b.n	80029c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d1e9      	bne.n	8002996 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d003      	beq.n	80029d8 <I2C_IsErrorOccurred+0xe0>
 80029d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0aa      	beq.n	800292e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2220      	movs	r2, #32
 80029e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01c      	beq.n	8002aa6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fdf7 	bl	8002660 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <I2C_IsErrorOccurred+0x1bc>)
 8002a7e:	400b      	ands	r3, r1
 8002a80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3728      	adds	r7, #40	@ 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	fe00e800 	.word	0xfe00e800

08002ab8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad0:	7a7b      	ldrb	r3, [r7, #9]
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	0d5b      	lsrs	r3, r3, #21
 8002af2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <I2C_TransferConfig+0x60>)
 8002af8:	430b      	orrs	r3, r1
 8002afa:	43db      	mvns	r3, r3
 8002afc:	ea02 0103 	and.w	r1, r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	03ff63ff 	.word	0x03ff63ff

08002b1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d138      	bne.n	8002ba4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e032      	b.n	8002ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	@ 0x24
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d139      	bne.n	8002c3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e033      	b.n	8002c3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2224      	movs	r2, #36	@ 0x24
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e000      	b.n	8002c3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <HAL_PWREx_ConfigSupply+0x70>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d00a      	beq.n	8002c76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <HAL_PWREx_ConfigSupply+0x70>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e01f      	b.n	8002cb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e01d      	b.n	8002cb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_PWREx_ConfigSupply+0x70>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	490f      	ldr	r1, [pc, #60]	@ (8002cbc <HAL_PWREx_ConfigSupply+0x70>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c86:	f7fe fe7d 	bl	8001984 <HAL_GetTick>
 8002c8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c8c:	e009      	b.n	8002ca2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c8e:	f7fe fe79 	bl	8001984 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c9c:	d901      	bls.n	8002ca2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_PWREx_ConfigSupply+0x70>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cae:	d1ee      	bne.n	8002c8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	58024800 	.word	0x58024800

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	@ 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f000 bc1f 	b.w	8003512 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80b3 	beq.w	8002e48 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce2:	4b95      	ldr	r3, [pc, #596]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cec:	4b92      	ldr	r3, [pc, #584]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x48>
 8002cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	d112      	bne.n	8002d24 <HAL_RCC_OscConfig+0x64>
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b8b      	ldr	r3, [pc, #556]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8098 	beq.w	8002e46 <HAL_RCC_OscConfig+0x186>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 8093 	bne.w	8002e46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e3f6      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x7c>
 8002d2e:	4b82      	ldr	r3, [pc, #520]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a81      	ldr	r2, [pc, #516]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e058      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_OscConfig+0xaa>
 8002d44:	4b7c      	ldr	r3, [pc, #496]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7b      	ldr	r2, [pc, #492]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b79      	ldr	r3, [pc, #484]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a78      	ldr	r2, [pc, #480]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d56:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b76      	ldr	r3, [pc, #472]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a75      	ldr	r2, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e041      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_OscConfig+0xda>
 8002d74:	4b70      	ldr	r3, [pc, #448]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6f      	ldr	r2, [pc, #444]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b6d      	ldr	r3, [pc, #436]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6c      	ldr	r2, [pc, #432]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d86:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a69      	ldr	r2, [pc, #420]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e029      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002da2:	d112      	bne.n	8002dca <HAL_RCC_OscConfig+0x10a>
 8002da4:	4b64      	ldr	r3, [pc, #400]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a63      	ldr	r2, [pc, #396]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002daa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b61      	ldr	r3, [pc, #388]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a60      	ldr	r2, [pc, #384]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e011      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
 8002dca:	4b5b      	ldr	r3, [pc, #364]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5a      	ldr	r2, [pc, #360]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b58      	ldr	r3, [pc, #352]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a57      	ldr	r2, [pc, #348]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b55      	ldr	r3, [pc, #340]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a54      	ldr	r2, [pc, #336]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002de8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002dec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fdc5 	bl	8001984 <HAL_GetTick>
 8002dfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fdc1 	bl	8001984 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	@ 0x64
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e380      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e10:	4b49      	ldr	r3, [pc, #292]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x13e>
 8002e1c:	e014      	b.n	8002e48 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fdb1 	bl	8001984 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e26:	f7fe fdad 	bl	8001984 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	@ 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e36c      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e38:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x166>
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 808c 	beq.w	8002f6e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e60:	4b35      	ldr	r3, [pc, #212]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_RCC_OscConfig+0x1bc>
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	d137      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x222>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d132      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1d4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e33e      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e94:	4b28      	ldr	r3, [pc, #160]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0219 	bic.w	r2, r3, #25
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4925      	ldr	r1, [pc, #148]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fd6d 	bl	8001984 <HAL_GetTick>
 8002eaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fd69 	bl	8001984 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e328      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	4917      	ldr	r1, [pc, #92]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee0:	e045      	b.n	8002f6e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d028      	beq.n	8002f3c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eea:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0219 	bic.w	r2, r3, #25
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4910      	ldr	r1, [pc, #64]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fd42 	bl	8001984 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7fe fd3e 	bl	8001984 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e2fd      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	4901      	ldr	r1, [pc, #4]	@ (8002f38 <HAL_RCC_OscConfig+0x278>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
 8002f36:	e01a      	b.n	8002f6e <HAL_RCC_OscConfig+0x2ae>
 8002f38:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3c:	4b97      	ldr	r3, [pc, #604]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a96      	ldr	r2, [pc, #600]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fd1c 	bl	8001984 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fd18 	bl	8001984 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e2d7      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f62:	4b8e      	ldr	r3, [pc, #568]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d06a      	beq.n	8003050 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b88      	ldr	r3, [pc, #544]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f84:	4b85      	ldr	r3, [pc, #532]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d007      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2e0>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b18      	cmp	r3, #24
 8002f94:	d11b      	bne.n	8002fce <HAL_RCC_OscConfig+0x30e>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d116      	bne.n	8002fce <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x2f8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b80      	cmp	r3, #128	@ 0x80
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e2ac      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fb8:	4b78      	ldr	r3, [pc, #480]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	4975      	ldr	r1, [pc, #468]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fcc:	e040      	b.n	8003050 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fd6:	4b71      	ldr	r3, [pc, #452]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a70      	ldr	r2, [pc, #448]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fccf 	bl	8001984 <HAL_GetTick>
 8002fe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fea:	f7fe fccb 	bl	8001984 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e28a      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ffc:	4b67      	ldr	r3, [pc, #412]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003008:	4b64      	ldr	r3, [pc, #400]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	4961      	ldr	r1, [pc, #388]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
 800301c:	e018      	b.n	8003050 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800301e:	4b5f      	ldr	r3, [pc, #380]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003024:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fcab 	bl	8001984 <HAL_GetTick>
 800302e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003032:	f7fe fca7 	bl	8001984 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e266      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003044:	4b55      	ldr	r3, [pc, #340]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d036      	beq.n	80030ca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d019      	beq.n	8003098 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003064:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003068:	4a4c      	ldr	r2, [pc, #304]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fc88 	bl	8001984 <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003078:	f7fe fc84 	bl	8001984 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e243      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800308a:	4b44      	ldr	r3, [pc, #272]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x3b8>
 8003096:	e018      	b.n	80030ca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003098:	4b40      	ldr	r3, [pc, #256]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800309a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309c:	4a3f      	ldr	r2, [pc, #252]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fc6e 	bl	8001984 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe fc6a 	bl	8001984 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e229      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030be:	4b37      	ldr	r3, [pc, #220]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d036      	beq.n	8003144 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030de:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 80030e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fc4b 	bl	8001984 <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f2:	f7fe fc47 	bl	8001984 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e206      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003104:	4b25      	ldr	r3, [pc, #148]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x432>
 8003110:	e018      	b.n	8003144 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003112:	4b22      	ldr	r3, [pc, #136]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a21      	ldr	r2, [pc, #132]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800311c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800311e:	f7fe fc31 	bl	8001984 <HAL_GetTick>
 8003122:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003126:	f7fe fc2d 	bl	8001984 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e1ec      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003138:	4b18      	ldr	r3, [pc, #96]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80af 	beq.w	80032b0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <HAL_RCC_OscConfig+0x4e0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a12      	ldr	r2, [pc, #72]	@ (80031a0 <HAL_RCC_OscConfig+0x4e0>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800315e:	f7fe fc11 	bl	8001984 <HAL_GetTick>
 8003162:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fc0d 	bl	8001984 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	@ 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1cc      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_RCC_OscConfig+0x4e0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4e4>
 800318c:	4b03      	ldr	r3, [pc, #12]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a02      	ldr	r2, [pc, #8]	@ (800319c <HAL_RCC_OscConfig+0x4dc>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	e05b      	b.n	8003252 <HAL_RCC_OscConfig+0x592>
 800319a:	bf00      	nop
 800319c:	58024400 	.word	0x58024400
 80031a0:	58024800 	.word	0x58024800
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d112      	bne.n	80031d2 <HAL_RCC_OscConfig+0x512>
 80031ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4a9c      	ldr	r2, [pc, #624]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a99      	ldr	r2, [pc, #612]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	4b97      	ldr	r3, [pc, #604]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a96      	ldr	r2, [pc, #600]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d0:	e03f      	b.n	8003252 <HAL_RCC_OscConfig+0x592>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d112      	bne.n	8003200 <HAL_RCC_OscConfig+0x540>
 80031da:	4b92      	ldr	r3, [pc, #584]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	4a91      	ldr	r2, [pc, #580]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	4a8e      	ldr	r2, [pc, #568]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	4a8b      	ldr	r2, [pc, #556]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fe:	e028      	b.n	8003252 <HAL_RCC_OscConfig+0x592>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b85      	cmp	r3, #133	@ 0x85
 8003206:	d112      	bne.n	800322e <HAL_RCC_OscConfig+0x56e>
 8003208:	4b86      	ldr	r3, [pc, #536]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4a85      	ldr	r2, [pc, #532]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	@ 0x70
 8003214:	4b83      	ldr	r3, [pc, #524]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	4a82      	ldr	r2, [pc, #520]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800321a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800321e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003220:	4b80      	ldr	r3, [pc, #512]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003224:	4a7f      	ldr	r2, [pc, #508]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	@ 0x70
 800322c:	e011      	b.n	8003252 <HAL_RCC_OscConfig+0x592>
 800322e:	4b7d      	ldr	r3, [pc, #500]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	4a7c      	ldr	r2, [pc, #496]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6713      	str	r3, [r2, #112]	@ 0x70
 800323a:	4b7a      	ldr	r3, [pc, #488]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	4a79      	ldr	r2, [pc, #484]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6713      	str	r3, [r2, #112]	@ 0x70
 8003246:	4b77      	ldr	r3, [pc, #476]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	4a76      	ldr	r2, [pc, #472]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800324c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003250:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d015      	beq.n	8003286 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7fe fb93 	bl	8001984 <HAL_GetTick>
 800325e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fb8f 	bl	8001984 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e14c      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003278:	4b6a      	ldr	r3, [pc, #424]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ee      	beq.n	8003262 <HAL_RCC_OscConfig+0x5a2>
 8003284:	e014      	b.n	80032b0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003286:	f7fe fb7d 	bl	8001984 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe fb79 	bl	8001984 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e136      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 812b 	beq.w	8003510 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032c2:	2b18      	cmp	r3, #24
 80032c4:	f000 80bb 	beq.w	800343e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f040 8095 	bne.w	80033fc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d2:	4b54      	ldr	r3, [pc, #336]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a53      	ldr	r2, [pc, #332]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80032d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fb51 	bl	8001984 <HAL_GetTick>
 80032e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe fb4d 	bl	8001984 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e10c      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003304:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003308:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCC_OscConfig+0x768>)
 800330a:	4013      	ands	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	430a      	orrs	r2, r1
 8003318:	4942      	ldr	r1, [pc, #264]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800331a:	4313      	orrs	r3, r2
 800331c:	628b      	str	r3, [r1, #40]	@ 0x28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	3b01      	subs	r3, #1
 8003324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332c:	3b01      	subs	r3, #1
 800332e:	025b      	lsls	r3, r3, #9
 8003330:	b29b      	uxth	r3, r3
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	3b01      	subs	r3, #1
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	3b01      	subs	r3, #1
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800334e:	4935      	ldr	r1, [pc, #212]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003350:	4313      	orrs	r3, r2
 8003352:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003354:	4b33      	ldr	r3, [pc, #204]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	4a32      	ldr	r2, [pc, #200]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003360:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003364:	4b31      	ldr	r3, [pc, #196]	@ (800342c <HAL_RCC_OscConfig+0x76c>)
 8003366:	4013      	ands	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800336c:	00d2      	lsls	r2, r2, #3
 800336e:	492d      	ldr	r1, [pc, #180]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003370:	4313      	orrs	r3, r2
 8003372:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	f023 020c 	bic.w	r2, r3, #12
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	4928      	ldr	r1, [pc, #160]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003382:	4313      	orrs	r3, r2
 8003384:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	f023 0202 	bic.w	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4924      	ldr	r1, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003394:	4313      	orrs	r3, r2
 8003396:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003398:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80033bc:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	4a18      	ldr	r2, [pc, #96]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b16      	ldr	r3, [pc, #88]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe fad6 	bl	8001984 <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe fad2 	bl	8001984 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e091      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x71c>
 80033fa:	e089      	b.n	8003510 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a08      	ldr	r2, [pc, #32]	@ (8003424 <HAL_RCC_OscConfig+0x764>)
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fabc 	bl	8001984 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340e:	e00f      	b.n	8003430 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fab8 	bl	8001984 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d908      	bls.n	8003430 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e077      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
 8003422:	bf00      	nop
 8003424:	58024400 	.word	0x58024400
 8003428:	fffffc0c 	.word	0xfffffc0c
 800342c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003430:	4b3a      	ldr	r3, [pc, #232]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e9      	bne.n	8003410 <HAL_RCC_OscConfig+0x750>
 800343c:	e068      	b.n	8003510 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800343e:	4b37      	ldr	r3, [pc, #220]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003444:	4b35      	ldr	r3, [pc, #212]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	2b01      	cmp	r3, #1
 8003450:	d031      	beq.n	80034b6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d12a      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d122      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d11a      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d111      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d108      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	0e1b      	lsrs	r3, r3, #24
 80034a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e02b      	b.n	8003512 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80034ba:	4b18      	ldr	r3, [pc, #96]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d01f      	beq.n	8003510 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	4a11      	ldr	r2, [pc, #68]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034dc:	f7fe fa52 	bl	8001984 <HAL_GetTick>
 80034e0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034e2:	bf00      	nop
 80034e4:	f7fe fa4e 	bl	8001984 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d0f9      	beq.n	80034e4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034f0:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 80034f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <HAL_RCC_OscConfig+0x860>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034fc:	00d2      	lsls	r2, r2, #3
 80034fe:	4907      	ldr	r1, [pc, #28]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	4a04      	ldr	r2, [pc, #16]	@ (800351c <HAL_RCC_OscConfig+0x85c>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3730      	adds	r7, #48	@ 0x30
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	58024400 	.word	0x58024400
 8003520:	ffff0007 	.word	0xffff0007

08003524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e19c      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b8a      	ldr	r3, [pc, #552]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d910      	bls.n	8003568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b87      	ldr	r3, [pc, #540]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 020f 	bic.w	r2, r3, #15
 800354e:	4985      	ldr	r1, [pc, #532]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b83      	ldr	r3, [pc, #524]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e184      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	4b7b      	ldr	r3, [pc, #492]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003580:	429a      	cmp	r2, r3
 8003582:	d908      	bls.n	8003596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003584:	4b78      	ldr	r3, [pc, #480]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	4975      	ldr	r1, [pc, #468]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003592:	4313      	orrs	r3, r2
 8003594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	4b70      	ldr	r3, [pc, #448]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d908      	bls.n	80035c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	496a      	ldr	r1, [pc, #424]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	4b64      	ldr	r3, [pc, #400]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035dc:	429a      	cmp	r2, r3
 80035de:	d908      	bls.n	80035f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035e0:	4b61      	ldr	r3, [pc, #388]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	495e      	ldr	r1, [pc, #376]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	4b59      	ldr	r3, [pc, #356]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800360a:	429a      	cmp	r2, r3
 800360c:	d908      	bls.n	8003620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800360e:	4b56      	ldr	r3, [pc, #344]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4953      	ldr	r1, [pc, #332]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 800361c:	4313      	orrs	r3, r2
 800361e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d010      	beq.n	800364e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4b4d      	ldr	r3, [pc, #308]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	429a      	cmp	r2, r3
 800363a:	d908      	bls.n	800364e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b4a      	ldr	r3, [pc, #296]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f023 020f 	bic.w	r2, r3, #15
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4947      	ldr	r1, [pc, #284]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 800364a:	4313      	orrs	r3, r2
 800364c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d055      	beq.n	8003706 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800365a:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4940      	ldr	r1, [pc, #256]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003668:	4313      	orrs	r3, r2
 800366a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003674:	4b3c      	ldr	r3, [pc, #240]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d121      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0f6      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d107      	bne.n	800369c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800368c:	4b36      	ldr	r3, [pc, #216]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d115      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0ea      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036a4:	4b30      	ldr	r3, [pc, #192]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0de      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0d6      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036c4:	4b28      	ldr	r3, [pc, #160]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f023 0207 	bic.w	r2, r3, #7
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4925      	ldr	r1, [pc, #148]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fe f955 	bl	8001984 <HAL_GetTick>
 80036da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036de:	f7fe f951 	bl	8001984 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0be      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	429a      	cmp	r2, r3
 8003704:	d1eb      	bne.n	80036de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d010      	beq.n	8003734 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	429a      	cmp	r2, r3
 8003720:	d208      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003722:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f023 020f 	bic.w	r2, r3, #15
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	490e      	ldr	r1, [pc, #56]	@ (8003768 <HAL_RCC_ClockConfig+0x244>)
 8003730:	4313      	orrs	r3, r2
 8003732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d214      	bcs.n	800376c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 020f 	bic.w	r2, r3, #15
 800374a:	4906      	ldr	r1, [pc, #24]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <HAL_RCC_ClockConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e086      	b.n	8003872 <HAL_RCC_ClockConfig+0x34e>
 8003764:	52002000 	.word	0x52002000
 8003768:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	4b3f      	ldr	r3, [pc, #252]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003784:	429a      	cmp	r2, r3
 8003786:	d208      	bcs.n	800379a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003788:	4b3c      	ldr	r3, [pc, #240]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	4939      	ldr	r1, [pc, #228]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 8003796:	4313      	orrs	r3, r2
 8003798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d208      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037b6:	4b31      	ldr	r3, [pc, #196]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	492e      	ldr	r1, [pc, #184]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	4b28      	ldr	r3, [pc, #160]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d208      	bcs.n	80037f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037e4:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	4922      	ldr	r1, [pc, #136]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800380e:	429a      	cmp	r2, r3
 8003810:	d208      	bcs.n	8003824 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003812:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4917      	ldr	r1, [pc, #92]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 8003820:	4313      	orrs	r3, r2
 8003822:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003824:	f000 f834 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b14      	ldr	r3, [pc, #80]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	4912      	ldr	r1, [pc, #72]	@ (8003880 <HAL_RCC_ClockConfig+0x35c>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003842:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <HAL_RCC_ClockConfig+0x358>)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	4a0d      	ldr	r2, [pc, #52]	@ (8003880 <HAL_RCC_ClockConfig+0x35c>)
 800384c:	5cd3      	ldrb	r3, [r2, r3]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <HAL_RCC_ClockConfig+0x360>)
 800385a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800385c:	4a0a      	ldr	r2, [pc, #40]	@ (8003888 <HAL_RCC_ClockConfig+0x364>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003862:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <HAL_RCC_ClockConfig+0x368>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fc9c 	bl	80011a4 <HAL_InitTick>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	58024400 	.word	0x58024400
 8003880:	0800f25c 	.word	0x0800f25c
 8003884:	24000004 	.word	0x24000004
 8003888:	24000000 	.word	0x24000000
 800388c:	24000008 	.word	0x24000008

08003890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	@ 0x24
 8003894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003896:	4bb3      	ldr	r3, [pc, #716]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800389e:	2b18      	cmp	r3, #24
 80038a0:	f200 8155 	bhi.w	8003b4e <HAL_RCC_GetSysClockFreq+0x2be>
 80038a4:	a201      	add	r2, pc, #4	@ (adr r2, 80038ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	08003911 	.word	0x08003911
 80038b0:	08003b4f 	.word	0x08003b4f
 80038b4:	08003b4f 	.word	0x08003b4f
 80038b8:	08003b4f 	.word	0x08003b4f
 80038bc:	08003b4f 	.word	0x08003b4f
 80038c0:	08003b4f 	.word	0x08003b4f
 80038c4:	08003b4f 	.word	0x08003b4f
 80038c8:	08003b4f 	.word	0x08003b4f
 80038cc:	08003937 	.word	0x08003937
 80038d0:	08003b4f 	.word	0x08003b4f
 80038d4:	08003b4f 	.word	0x08003b4f
 80038d8:	08003b4f 	.word	0x08003b4f
 80038dc:	08003b4f 	.word	0x08003b4f
 80038e0:	08003b4f 	.word	0x08003b4f
 80038e4:	08003b4f 	.word	0x08003b4f
 80038e8:	08003b4f 	.word	0x08003b4f
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	08003b4f 	.word	0x08003b4f
 80038f4:	08003b4f 	.word	0x08003b4f
 80038f8:	08003b4f 	.word	0x08003b4f
 80038fc:	08003b4f 	.word	0x08003b4f
 8003900:	08003b4f 	.word	0x08003b4f
 8003904:	08003b4f 	.word	0x08003b4f
 8003908:	08003b4f 	.word	0x08003b4f
 800390c:	08003943 	.word	0x08003943
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003910:	4b94      	ldr	r3, [pc, #592]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800391c:	4b91      	ldr	r3, [pc, #580]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	4a90      	ldr	r2, [pc, #576]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800392e:	e111      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003930:	4b8d      	ldr	r3, [pc, #564]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003932:	61bb      	str	r3, [r7, #24]
      break;
 8003934:	e10e      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003936:	4b8d      	ldr	r3, [pc, #564]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003938:	61bb      	str	r3, [r7, #24]
      break;
 800393a:	e10b      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800393c:	4b8c      	ldr	r3, [pc, #560]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800393e:	61bb      	str	r3, [r7, #24]
      break;
 8003940:	e108      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003942:	4b88      	ldr	r3, [pc, #544]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800394c:	4b85      	ldr	r3, [pc, #532]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003956:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003958:	4b82      	ldr	r3, [pc, #520]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003962:	4b80      	ldr	r3, [pc, #512]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	08db      	lsrs	r3, r3, #3
 8003968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80e1 	beq.w	8003b48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b02      	cmp	r3, #2
 800398a:	f000 8083 	beq.w	8003a94 <HAL_RCC_GetSysClockFreq+0x204>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b02      	cmp	r3, #2
 8003992:	f200 80a1 	bhi.w	8003ad8 <HAL_RCC_GetSysClockFreq+0x248>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x114>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d056      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1c0>
 80039a2:	e099      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02d      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	08db      	lsrs	r3, r3, #3
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039da:	4b62      	ldr	r3, [pc, #392]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a0a:	e087      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1e:	4b51      	ldr	r3, [pc, #324]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a4e:	e065      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a62:	4b40      	ldr	r3, [pc, #256]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a92:	e043      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ad6:	e021      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aea:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003afe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	0a5b      	lsrs	r3, r3, #9
 8003b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b26:	3301      	adds	r3, #1
 8003b28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b40:	ee17 3a90 	vmov	r3, s15
 8003b44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b46:	e005      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
      break;
 8003b4c:	e002      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b50:	61bb      	str	r3, [r7, #24]
      break;
 8003b52:	bf00      	nop
  }

  return sysclockfreq;
 8003b54:	69bb      	ldr	r3, [r7, #24]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3724      	adds	r7, #36	@ 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	58024400 	.word	0x58024400
 8003b68:	03d09000 	.word	0x03d09000
 8003b6c:	003d0900 	.word	0x003d0900
 8003b70:	016e3600 	.word	0x016e3600
 8003b74:	46000000 	.word	0x46000000
 8003b78:	4c742400 	.word	0x4c742400
 8003b7c:	4a742400 	.word	0x4a742400
 8003b80:	4bb71b00 	.word	0x4bb71b00

08003b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b8a:	f7ff fe81 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	490f      	ldr	r1, [pc, #60]	@ (8003bd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b9c:	5ccb      	ldrb	r3, [r1, r3]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bb2:	5cd3      	ldrb	r3, [r2, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <HAL_RCC_GetHCLKFreq+0x58>)
 8003bc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bc2:	4a07      	ldr	r2, [pc, #28]	@ (8003be0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bc8:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <HAL_RCC_GetHCLKFreq+0x58>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	0800f25c 	.word	0x0800f25c
 8003bdc:	24000004 	.word	0x24000004
 8003be0:	24000000 	.word	0x24000000

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003be8:	f7ff ffcc 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4904      	ldr	r1, [pc, #16]	@ (8003c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	0800f25c 	.word	0x0800f25c

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003c14:	f7ff ffb6 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4904      	ldr	r1, [pc, #16]	@ (8003c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	58024400 	.word	0x58024400
 8003c38:	0800f25c 	.word	0x0800f25c

08003c3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	223f      	movs	r2, #63	@ 0x3f
 8003c4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0207 	and.w	r2, r3, #7
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003c58:	4b17      	ldr	r3, [pc, #92]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003c64:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003c88:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003c94:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <HAL_RCC_GetClockConfig+0x7c>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_RCC_GetClockConfig+0x80>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	52002000 	.word	0x52002000

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b0c8      	sub	sp, #288	@ 0x120
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003ce4:	2500      	movs	r5, #0
 8003ce6:	ea54 0305 	orrs.w	r3, r4, r5
 8003cea:	d049      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cf6:	d02f      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003cf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cfc:	d828      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d02:	d01a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d08:	d822      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d12:	d007      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d14:	e01c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d16:	4ba7      	ldr	r3, [pc, #668]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	4aa6      	ldr	r2, [pc, #664]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d22:	e01a      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fc43 	bl	80055b8 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d38:	e00f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3e:	3328      	adds	r3, #40	@ 0x28
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fcea 	bl	800571c <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d4e:	e004      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d62:	4b94      	ldr	r3, [pc, #592]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d70:	4a90      	ldr	r2, [pc, #576]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d76:	e003      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003d8c:	f04f 0900 	mov.w	r9, #0
 8003d90:	ea58 0309 	orrs.w	r3, r8, r9
 8003d94:	d047      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d82a      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003da0:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dbd 	.word	0x08003dbd
 8003dac:	08003dcb 	.word	0x08003dcb
 8003db0:	08003de1 	.word	0x08003de1
 8003db4:	08003dff 	.word	0x08003dff
 8003db8:	08003dff 	.word	0x08003dff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbc:	4b7d      	ldr	r3, [pc, #500]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dc8:	e01a      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dce:	3308      	adds	r3, #8
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fbf0 	bl	80055b8 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dde:	e00f      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de4:	3328      	adds	r3, #40	@ 0x28
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fc97 	bl	800571c <RCCEx_PLL3_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df4:	e004      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e08:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0c:	f023 0107 	bic.w	r1, r3, #7
 8003e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	4a67      	ldr	r2, [pc, #412]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e1c:	e003      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003e32:	f04f 0b00 	mov.w	fp, #0
 8003e36:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e3a:	d054      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003e46:	d036      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003e48:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003e4c:	d82f      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e52:	d032      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e58:	d829      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e5c:	d02f      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e60:	d825      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e62:	2b80      	cmp	r3, #128	@ 0x80
 8003e64:	d018      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003e66:	2b80      	cmp	r3, #128	@ 0x80
 8003e68:	d821      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d007      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003e72:	e01c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e80:	e01e      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e86:	3308      	adds	r3, #8
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 fb94 	bl	80055b8 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e96:	e013      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e9c:	3328      	adds	r3, #40	@ 0x28
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fc3b 	bl	800571c <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003eac:	e008      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	4a37      	ldr	r2, [pc, #220]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ee2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ef2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003efc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003f00:	460b      	mov	r3, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d05c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003f10:	d03b      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003f12:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003f16:	d834      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f1c:	d037      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f22:	d82e      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f28:	d033      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f2e:	d828      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f34:	d01a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3a:	d822      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f44:	d007      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003f46:	e01c      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a19      	ldr	r2, [pc, #100]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f54:	e01e      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 fb2a 	bl	80055b8 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f6a:	e013      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	3328      	adds	r3, #40	@ 0x28
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 fbd1 	bl	800571c <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f88:	e004      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10d      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003faa:	4a02      	ldr	r2, [pc, #8]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fb0:	e006      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d03a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	2b30      	cmp	r3, #48	@ 0x30
 8003fe8:	d01f      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003fea:	2b30      	cmp	r3, #48	@ 0x30
 8003fec:	d819      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d00c      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d815      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d019      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d111      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffe:	4bae      	ldr	r3, [pc, #696]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4aad      	ldr	r2, [pc, #692]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800400a:	e011      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800400c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004010:	3308      	adds	r3, #8
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f001 facf 	bl	80055b8 <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004028:	e002      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800402e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004030:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004038:	4b9f      	ldr	r3, [pc, #636]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800403a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	4a9c      	ldr	r2, [pc, #624]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004048:	430b      	orrs	r3, r1
 800404a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004052:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004062:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800406c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004070:	460b      	mov	r3, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	d051      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d035      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004086:	d82e      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004088:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800408c:	d031      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800408e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004092:	d828      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004098:	d01a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409e:	d822      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a8:	d007      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80040aa:	e01c      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b82      	ldr	r3, [pc, #520]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	4a81      	ldr	r2, [pc, #516]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040b8:	e01c      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040be:	3308      	adds	r3, #8
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 fa78 	bl	80055b8 <RCCEx_PLL2_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040ce:	e011      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d4:	3328      	adds	r3, #40	@ 0x28
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fb1f 	bl	800571c <RCCEx_PLL3_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040ec:	e002      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80040f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040fc:	4b6e      	ldr	r3, [pc, #440]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004100:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800410a:	4a6b      	ldr	r2, [pc, #428]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004116:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800411a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004126:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004130:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d053      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800413e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004144:	d033      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004146:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800414a:	d82c      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800414c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004150:	d02f      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004156:	d826      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004158:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800415c:	d02b      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800415e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004162:	d820      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004168:	d012      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800416a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800416e:	d81a      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d022      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004178:	d115      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800417e:	3308      	adds	r3, #8
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f001 fa18 	bl	80055b8 <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800418e:	e015      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004194:	3328      	adds	r3, #40	@ 0x28
 8004196:	2101      	movs	r1, #1
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fabf 	bl	800571c <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041a4:	e00a      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80041ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041c4:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80041cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d2:	4a39      	ldr	r2, [pc, #228]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041d8:	e003      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4313      	orrs	r3, r2
 8004200:	d060      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800420a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800420e:	d039      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004210:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004214:	d832      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800421a:	d035      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800421c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004220:	d82c      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004226:	d031      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422c:	d826      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800422e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004232:	d02d      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004234:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004238:	d820      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800423e:	d012      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004244:	d81a      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d024      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800424a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424e:	d115      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004254:	3308      	adds	r3, #8
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f9ad 	bl	80055b8 <RCCEx_PLL2_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004264:	e017      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800426a:	3328      	adds	r3, #40	@ 0x28
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fa54 	bl	800571c <RCCEx_PLL3_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800427a:	e00c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004282:	e008      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004284:	bf00      	nop
 8004286:	e006      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004288:	bf00      	nop
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10e      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80042a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042ae:	4a02      	ldr	r2, [pc, #8]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80042d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d037      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80042e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ee:	d00e      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f4:	d816      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d018      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042fe:	d111      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4bc4      	ldr	r3, [pc, #784]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	4ac3      	ldr	r2, [pc, #780]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800430c:	e00f      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004312:	3308      	adds	r3, #8
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f001 f94e 	bl	80055b8 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004322:	e004      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800432c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004336:	4bb7      	ldr	r3, [pc, #732]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004344:	4ab3      	ldr	r2, [pc, #716]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6513      	str	r3, [r2, #80]	@ 0x50
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800436a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d039      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	2b03      	cmp	r3, #3
 800437c:	d81c      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800437e:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043c1 	.word	0x080043c1
 8004388:	08004395 	.word	0x08004395
 800438c:	080043a3 	.word	0x080043a3
 8004390:	080043c1 	.word	0x080043c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004394:	4b9f      	ldr	r3, [pc, #636]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	4a9e      	ldr	r2, [pc, #632]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800439a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800439e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043a0:	e00f      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a6:	3308      	adds	r3, #8
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f904 	bl	80055b8 <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043ca:	4b92      	ldr	r3, [pc, #584]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	f023 0103 	bic.w	r1, r3, #3
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d8:	4a8e      	ldr	r2, [pc, #568]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043da:	430b      	orrs	r3, r1
 80043dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043de:	e003      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	f000 8099 	beq.w	800453c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800440a:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a82      	ldr	r2, [pc, #520]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004416:	f7fd fab5 	bl	8001984 <HAL_GetTick>
 800441a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800441e:	e00b      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004420:	f7fd fab0 	bl	8001984 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b64      	cmp	r3, #100	@ 0x64
 800442e:	d903      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004436:	e005      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004438:	4b77      	ldr	r3, [pc, #476]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ed      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004444:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004448:	2b00      	cmp	r3, #0
 800444a:	d173      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800444c:	4b71      	ldr	r3, [pc, #452]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004458:	4053      	eors	r3, r2
 800445a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004462:	4b6c      	ldr	r3, [pc, #432]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800446e:	4b69      	ldr	r3, [pc, #420]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004472:	4a68      	ldr	r2, [pc, #416]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004478:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800447a:	4b66      	ldr	r3, [pc, #408]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447e:	4a65      	ldr	r2, [pc, #404]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004484:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004486:	4a63      	ldr	r2, [pc, #396]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449a:	d118      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd fa72 	bl	8001984 <HAL_GetTick>
 80044a0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044a4:	e00d      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fd fa6d 	bl	8001984 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80044b0:	1ad2      	subs	r2, r2, r3
 80044b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d903      	bls.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80044c0:	e005      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c2:	4b54      	ldr	r3, [pc, #336]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0eb      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80044ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d129      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e6:	d10e      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80044e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80044f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044f8:	091a      	lsrs	r2, r3, #4
 80044fa:	4b48      	ldr	r3, [pc, #288]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	4a45      	ldr	r2, [pc, #276]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004500:	430b      	orrs	r3, r1
 8004502:	6113      	str	r3, [r2, #16]
 8004504:	e005      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004506:	4b43      	ldr	r3, [pc, #268]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4a42      	ldr	r2, [pc, #264]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800450c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004510:	6113      	str	r3, [r2, #16]
 8004512:	4b40      	ldr	r3, [pc, #256]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004514:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800451a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800451e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004522:	4a3c      	ldr	r2, [pc, #240]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004524:	430b      	orrs	r3, r1
 8004526:	6713      	str	r3, [r2, #112]	@ 0x70
 8004528:	e008      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800452a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800452e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004538:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800453c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f002 0301 	and.w	r3, r2, #1
 8004548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004552:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	f000 8090 	beq.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004566:	2b28      	cmp	r3, #40	@ 0x28
 8004568:	d870      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004655 	.word	0x08004655
 8004574:	0800464d 	.word	0x0800464d
 8004578:	0800464d 	.word	0x0800464d
 800457c:	0800464d 	.word	0x0800464d
 8004580:	0800464d 	.word	0x0800464d
 8004584:	0800464d 	.word	0x0800464d
 8004588:	0800464d 	.word	0x0800464d
 800458c:	0800464d 	.word	0x0800464d
 8004590:	08004621 	.word	0x08004621
 8004594:	0800464d 	.word	0x0800464d
 8004598:	0800464d 	.word	0x0800464d
 800459c:	0800464d 	.word	0x0800464d
 80045a0:	0800464d 	.word	0x0800464d
 80045a4:	0800464d 	.word	0x0800464d
 80045a8:	0800464d 	.word	0x0800464d
 80045ac:	0800464d 	.word	0x0800464d
 80045b0:	08004637 	.word	0x08004637
 80045b4:	0800464d 	.word	0x0800464d
 80045b8:	0800464d 	.word	0x0800464d
 80045bc:	0800464d 	.word	0x0800464d
 80045c0:	0800464d 	.word	0x0800464d
 80045c4:	0800464d 	.word	0x0800464d
 80045c8:	0800464d 	.word	0x0800464d
 80045cc:	0800464d 	.word	0x0800464d
 80045d0:	08004655 	.word	0x08004655
 80045d4:	0800464d 	.word	0x0800464d
 80045d8:	0800464d 	.word	0x0800464d
 80045dc:	0800464d 	.word	0x0800464d
 80045e0:	0800464d 	.word	0x0800464d
 80045e4:	0800464d 	.word	0x0800464d
 80045e8:	0800464d 	.word	0x0800464d
 80045ec:	0800464d 	.word	0x0800464d
 80045f0:	08004655 	.word	0x08004655
 80045f4:	0800464d 	.word	0x0800464d
 80045f8:	0800464d 	.word	0x0800464d
 80045fc:	0800464d 	.word	0x0800464d
 8004600:	0800464d 	.word	0x0800464d
 8004604:	0800464d 	.word	0x0800464d
 8004608:	0800464d 	.word	0x0800464d
 800460c:	0800464d 	.word	0x0800464d
 8004610:	08004655 	.word	0x08004655
 8004614:	58024400 	.word	0x58024400
 8004618:	58024800 	.word	0x58024800
 800461c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004624:	3308      	adds	r3, #8
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f000 ffc5 	bl	80055b8 <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004634:	e00f      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800463a:	3328      	adds	r3, #40	@ 0x28
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f001 f86c 	bl	800571c <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800465e:	4bc0      	ldr	r3, [pc, #768]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466e:	4abc      	ldr	r2, [pc, #752]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6553      	str	r3, [r2, #84]	@ 0x54
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800467a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f002 0302 	and.w	r3, r2, #2
 800468a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004694:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d043      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800469e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d824      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80046aa:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046fd 	.word	0x080046fd
 80046b4:	080046c9 	.word	0x080046c9
 80046b8:	080046df 	.word	0x080046df
 80046bc:	080046fd 	.word	0x080046fd
 80046c0:	080046fd 	.word	0x080046fd
 80046c4:	080046fd 	.word	0x080046fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046cc:	3308      	adds	r3, #8
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 ff71 	bl	80055b8 <RCCEx_PLL2_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046dc:	e00f      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e2:	3328      	adds	r3, #40	@ 0x28
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 f818 	bl	800571c <RCCEx_PLL3_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046f2:	e004      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046fa:	e000      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80046fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004706:	4b96      	ldr	r3, [pc, #600]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	f023 0107 	bic.w	r1, r3, #7
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004716:	4a92      	ldr	r2, [pc, #584]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004718:	430b      	orrs	r3, r1
 800471a:	6553      	str	r3, [r2, #84]	@ 0x54
 800471c:	e003      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004722:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f002 0304 	and.w	r3, r2, #4
 8004732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004736:	2300      	movs	r3, #0
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800473c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d043      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800474a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800474e:	2b05      	cmp	r3, #5
 8004750:	d824      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004752:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	080047a5 	.word	0x080047a5
 800475c:	08004771 	.word	0x08004771
 8004760:	08004787 	.word	0x08004787
 8004764:	080047a5 	.word	0x080047a5
 8004768:	080047a5 	.word	0x080047a5
 800476c:	080047a5 	.word	0x080047a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004774:	3308      	adds	r3, #8
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f000 ff1d 	bl	80055b8 <RCCEx_PLL2_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004784:	e00f      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800478a:	3328      	adds	r3, #40	@ 0x28
 800478c:	2101      	movs	r1, #1
 800478e:	4618      	mov	r0, r3
 8004790:	f000 ffc4 	bl	800571c <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800479a:	e004      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80047a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	f023 0107 	bic.w	r1, r3, #7
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047be:	4a68      	ldr	r2, [pc, #416]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c4:	e003      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f002 0320 	and.w	r3, r2, #32
 80047da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047de:	2300      	movs	r3, #0
 80047e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d055      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047fa:	d033      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80047fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004800:	d82c      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004806:	d02f      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480c:	d826      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800480e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004812:	d02b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004814:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004818:	d820      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800481a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800481e:	d012      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004824:	d81a      	bhi.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d022      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800482a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800482e:	d115      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004834:	3308      	adds	r3, #8
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f000 febd 	bl	80055b8 <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004844:	e015      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800484a:	3328      	adds	r3, #40	@ 0x28
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 ff64 	bl	800571c <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800485a:	e00a      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004862:	e006      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004864:	bf00      	nop
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004868:	bf00      	nop
 800486a:	e002      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004872:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487a:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800487c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800488a:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800488c:	430b      	orrs	r3, r1
 800488e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004896:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80048a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	d058      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80048c6:	d033      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80048c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80048cc:	d82c      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	d02f      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80048d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d8:	d826      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048de:	d02b      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80048e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e4:	d820      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ea:	d012      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f0:	d81a      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d022      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fa:	d115      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004900:	3308      	adds	r3, #8
 8004902:	2100      	movs	r1, #0
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fe57 	bl	80055b8 <RCCEx_PLL2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004910:	e015      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004916:	3328      	adds	r3, #40	@ 0x28
 8004918:	2102      	movs	r1, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fefe 	bl	800571c <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004926:	e00a      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800492e:	e006      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004930:	bf00      	nop
 8004932:	e004      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800493c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800494e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004952:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004956:	4a02      	ldr	r2, [pc, #8]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004958:	430b      	orrs	r3, r1
 800495a:	6593      	str	r3, [r2, #88]	@ 0x58
 800495c:	e006      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800495e:	bf00      	nop
 8004960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004968:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004982:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004986:	460b      	mov	r3, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	d055      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800498c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004990:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004994:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004998:	d033      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800499a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800499e:	d82c      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a4:	d02f      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049aa:	d826      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80049ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80049b0:	d02b      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80049b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80049b6:	d820      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80049b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049bc:	d012      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80049be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049c2:	d81a      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d022      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049cc:	d115      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d2:	3308      	adds	r3, #8
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fdee 	bl	80055b8 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049e2:	e015      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e8:	3328      	adds	r3, #40	@ 0x28
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fe95 	bl	800571c <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049f8:	e00a      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a00:	e006      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a02:	bf00      	nop
 8004a04:	e004      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a06:	bf00      	nop
 8004a08:	e002      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a18:	4ba1      	ldr	r3, [pc, #644]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a28:	4a9d      	ldr	r2, [pc, #628]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a2e:	e003      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f002 0308 	and.w	r3, r2, #8
 8004a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a52:	460b      	mov	r3, r1
 8004a54:	4313      	orrs	r3, r2
 8004a56:	d01e      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6a:	3328      	adds	r3, #40	@ 0x28
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fe54 	bl	800571c <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a80:	4b87      	ldr	r3, [pc, #540]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a90:	4a83      	ldr	r2, [pc, #524]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f002 0310 	and.w	r3, r2, #16
 8004aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004aac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	d01e      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac2:	d10c      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac8:	3328      	adds	r3, #40	@ 0x28
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fe25 	bl	800571c <RCCEx_PLL3_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ade:	4b70      	ldr	r3, [pc, #448]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004aee:	4a6c      	ldr	r2, [pc, #432]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	d03e      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b20:	d022      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b26:	d81b      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d00b      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004b32:	e015      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b38:	3308      	adds	r3, #8
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fd3b 	bl	80055b8 <RCCEx_PLL2_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b48:	e00f      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4e:	3328      	adds	r3, #40	@ 0x28
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fde2 	bl	800571c <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b5e:	e004      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b72:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b82:	4a47      	ldr	r2, [pc, #284]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b88:	e003      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ba4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d03b      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bba:	d01f      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bc0:	d818      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc6:	d003      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bcc:	d007      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004bce:	e011      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd0:	4b33      	ldr	r3, [pc, #204]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	4a32      	ldr	r2, [pc, #200]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bdc:	e00f      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be2:	3328      	adds	r3, #40	@ 0x28
 8004be4:	2101      	movs	r1, #1
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fd98 	bl	800571c <RCCEx_PLL3_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bf2:	e004      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c06:	4b26      	ldr	r3, [pc, #152]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	4a22      	ldr	r2, [pc, #136]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c34:	2300      	movs	r3, #0
 8004c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d034      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c50:	d007      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004c52:	e011      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b12      	ldr	r3, [pc, #72]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a11      	ldr	r2, [pc, #68]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c60:	e00e      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c66:	3308      	adds	r3, #8
 8004c68:	2102      	movs	r1, #2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fca4 	bl	80055b8 <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c76:	e003      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c96:	4a02      	ldr	r2, [pc, #8]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c9c:	e006      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cba:	2300      	movs	r3, #0
 8004cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ccc:	3328      	adds	r3, #40	@ 0x28
 8004cce:	2102      	movs	r1, #2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fd23 	bl	800571c <RCCEx_PLL3_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cf4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	d038      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d0a:	d018      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d10:	d811      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d16:	d014      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1c:	d80b      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d011      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d26:	d106      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4bc3      	ldr	r3, [pc, #780]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4ac2      	ldr	r2, [pc, #776]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d50:	4bb9      	ldr	r3, [pc, #740]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d60:	4ab5      	ldr	r2, [pc, #724]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d7e:	2300      	movs	r3, #0
 8004d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d86:	460b      	mov	r3, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d8c:	4baa      	ldr	r3, [pc, #680]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9a:	4aa7      	ldr	r2, [pc, #668]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dae:	2300      	movs	r3, #0
 8004db0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	4a9b      	ldr	r2, [pc, #620]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dde:	2300      	movs	r3, #0
 8004de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004dec:	4b92      	ldr	r3, [pc, #584]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfa:	4a8f      	ldr	r2, [pc, #572]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e0e:	2300      	movs	r3, #0
 8004e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1c:	4b86      	ldr	r3, [pc, #536]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a85      	ldr	r2, [pc, #532]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e26:	6113      	str	r3, [r2, #16]
 8004e28:	4b83      	ldr	r3, [pc, #524]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e2a:	6919      	ldr	r1, [r3, #16]
 8004e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e34:	4a80      	ldr	r2, [pc, #512]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e48:	2300      	movs	r3, #0
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e50:	460b      	mov	r3, r1
 8004e52:	4313      	orrs	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e56:	4b78      	ldr	r3, [pc, #480]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e64:	4a74      	ldr	r2, [pc, #464]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e66:	430b      	orrs	r3, r1
 8004e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e78:	2300      	movs	r3, #0
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e86:	4b6c      	ldr	r3, [pc, #432]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e96:	4a68      	ldr	r2, [pc, #416]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	d011      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fb79 	bl	80055b8 <RCCEx_PLL2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ed8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	6239      	str	r1, [r7, #32]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	d011      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efc:	3308      	adds	r3, #8
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fb59 	bl	80055b8 <RCCEx_PLL2_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	2100      	movs	r1, #0
 8004f26:	61b9      	str	r1, [r7, #24]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d011      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fb39 	bl	80055b8 <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	2100      	movs	r1, #0
 8004f66:	6139      	str	r1, [r7, #16]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	d011      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f7c:	3328      	adds	r3, #40	@ 0x28
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fbcb 	bl	800571c <RCCEx_PLL3_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d011      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fbc:	3328      	adds	r3, #40	@ 0x28
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fbab 	bl	800571c <RCCEx_PLL3_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	6039      	str	r1, [r7, #0]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d011      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ffc:	3328      	adds	r3, #40	@ 0x28
 8004ffe:	2102      	movs	r1, #2
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fb8b 	bl	800571c <RCCEx_PLL3_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800500c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800501c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	e000      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
}
 800502a:	4618      	mov	r0, r3
 800502c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400

0800503c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005040:	f7fe fda0 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4904      	ldr	r1, [pc, #16]	@ (8005064 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	58024400 	.word	0x58024400
 8005064:	0800f25c 	.word	0x0800f25c

08005068 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	@ 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005070:	4ba1      	ldr	r3, [pc, #644]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800507a:	4b9f      	ldr	r3, [pc, #636]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	0b1b      	lsrs	r3, r3, #12
 8005080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005084:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005086:	4b9c      	ldr	r3, [pc, #624]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	091b      	lsrs	r3, r3, #4
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005092:	4b99      	ldr	r3, [pc, #612]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	08db      	lsrs	r3, r3, #3
 8005098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8111 	beq.w	80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	f000 8083 	beq.w	80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f200 80a1 	bhi.w	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d056      	beq.n	8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050d2:	e099      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d4:	4b88      	ldr	r3, [pc, #544]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02d      	beq.n	800513c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e0:	4b85      	ldr	r3, [pc, #532]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	4a84      	ldr	r2, [pc, #528]	@ (80052fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b7b      	ldr	r3, [pc, #492]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800510c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a03 	vldr	s12, [r7, #12]
 800511e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800513a:	e087      	b.n	800524c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b6a      	ldr	r3, [pc, #424]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005162:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517e:	e065      	b.n	800524c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b59      	ldr	r3, [pc, #356]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c2:	e043      	b.n	800524c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b48      	ldr	r3, [pc, #288]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005206:	e021      	b.n	800524c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521a:	4b37      	ldr	r3, [pc, #220]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522a:	ed97 6a03 	vldr	s12, [r7, #12]
 800522e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	0a5b      	lsrs	r3, r3, #9
 8005252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005266:	edd7 6a07 	vldr	s13, [r7, #28]
 800526a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005272:	ee17 2a90 	vmov	r2, s15
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800527a:	4b1f      	ldr	r3, [pc, #124]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005294:	edd7 6a07 	vldr	s13, [r7, #28]
 8005298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a0:	ee17 2a90 	vmov	r2, s15
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	0e1b      	lsrs	r3, r3, #24
 80052ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ce:	ee17 2a90 	vmov	r2, s15
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052d6:	e008      	b.n	80052ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
}
 80052ea:	bf00      	nop
 80052ec:	3724      	adds	r7, #36	@ 0x24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
 80052fc:	03d09000 	.word	0x03d09000
 8005300:	46000000 	.word	0x46000000
 8005304:	4c742400 	.word	0x4c742400
 8005308:	4a742400 	.word	0x4a742400
 800530c:	4bb71b00 	.word	0x4bb71b00

08005310 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	@ 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005318:	4ba1      	ldr	r3, [pc, #644]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005322:	4b9f      	ldr	r3, [pc, #636]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	0d1b      	lsrs	r3, r3, #20
 8005328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800532c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800532e:	4b9c      	ldr	r3, [pc, #624]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800533a:	4b99      	ldr	r3, [pc, #612]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8111 	beq.w	8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b02      	cmp	r3, #2
 8005362:	f000 8083 	beq.w	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b02      	cmp	r3, #2
 800536a:	f200 80a1 	bhi.w	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d056      	beq.n	8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800537a:	e099      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800537c:	4b88      	ldr	r3, [pc, #544]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02d      	beq.n	80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005388:	4b85      	ldr	r3, [pc, #532]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	4a84      	ldr	r2, [pc, #528]	@ (80055a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b7b      	ldr	r3, [pc, #492]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053e2:	e087      	b.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b6a      	ldr	r3, [pc, #424]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005406:	ed97 6a03 	vldr	s12, [r7, #12]
 800540a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005426:	e065      	b.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543a:	4b59      	ldr	r3, [pc, #356]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544a:	ed97 6a03 	vldr	s12, [r7, #12]
 800544e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800546a:	e043      	b.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800547a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547e:	4b48      	ldr	r3, [pc, #288]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005492:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ae:	e021      	b.n	80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c2:	4b37      	ldr	r3, [pc, #220]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054f4:	4b2a      	ldr	r3, [pc, #168]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	0a5b      	lsrs	r3, r3, #9
 80054fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800550a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551a:	ee17 2a90 	vmov	r2, s15
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005522:	4b1f      	ldr	r3, [pc, #124]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005548:	ee17 2a90 	vmov	r2, s15
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005550:	4b13      	ldr	r3, [pc, #76]	@ (80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	0e1b      	lsrs	r3, r3, #24
 8005556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800556a:	edd7 6a07 	vldr	s13, [r7, #28]
 800556e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005576:	ee17 2a90 	vmov	r2, s15
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800557e:	e008      	b.n	8005592 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]
}
 8005592:	bf00      	nop
 8005594:	3724      	adds	r7, #36	@ 0x24
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	46000000 	.word	0x46000000
 80055ac:	4c742400 	.word	0x4c742400
 80055b0:	4a742400 	.word	0x4a742400
 80055b4:	4bb71b00 	.word	0x4bb71b00

080055b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055c6:	4b53      	ldr	r3, [pc, #332]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d101      	bne.n	80055d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e099      	b.n	800570a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a4e      	ldr	r2, [pc, #312]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80055dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e2:	f7fc f9cf 	bl	8001984 <HAL_GetTick>
 80055e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055e8:	e008      	b.n	80055fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055ea:	f7fc f9cb 	bl	8001984 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e086      	b.n	800570a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055fc:	4b45      	ldr	r3, [pc, #276]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005608:	4b42      	ldr	r3, [pc, #264]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	031b      	lsls	r3, r3, #12
 8005616:	493f      	ldr	r1, [pc, #252]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005618:	4313      	orrs	r3, r2
 800561a:	628b      	str	r3, [r1, #40]	@ 0x28
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	3b01      	subs	r3, #1
 8005622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	3b01      	subs	r3, #1
 800562c:	025b      	lsls	r3, r3, #9
 800562e:	b29b      	uxth	r3, r3
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	3b01      	subs	r3, #1
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	3b01      	subs	r3, #1
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800564c:	4931      	ldr	r1, [pc, #196]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 800564e:	4313      	orrs	r3, r2
 8005650:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	492d      	ldr	r1, [pc, #180]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005664:	4b2b      	ldr	r3, [pc, #172]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	f023 0220 	bic.w	r2, r3, #32
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4928      	ldr	r1, [pc, #160]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005676:	4b27      	ldr	r3, [pc, #156]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	4a26      	ldr	r2, [pc, #152]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 800567c:	f023 0310 	bic.w	r3, r3, #16
 8005680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005682:	4b24      	ldr	r3, [pc, #144]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005686:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <RCCEx_PLL2_Config+0x160>)
 8005688:	4013      	ands	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	69d2      	ldr	r2, [r2, #28]
 800568e:	00d2      	lsls	r2, r2, #3
 8005690:	4920      	ldr	r1, [pc, #128]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005692:	4313      	orrs	r3, r2
 8005694:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005696:	4b1f      	ldr	r3, [pc, #124]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 800569c:	f043 0310 	orr.w	r3, r3, #16
 80056a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a19      	ldr	r2, [pc, #100]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056b4:	e00f      	b.n	80056d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056bc:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	4a14      	ldr	r2, [pc, #80]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056c8:	e005      	b.n	80056d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056ca:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	4a11      	ldr	r2, [pc, #68]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fc f94f 	bl	8001984 <HAL_GetTick>
 80056e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056e8:	e008      	b.n	80056fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056ea:	f7fc f94b 	bl	8001984 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e006      	b.n	800570a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <RCCEx_PLL2_Config+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
 8005718:	ffff0007 	.word	0xffff0007

0800571c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800572a:	4b53      	ldr	r3, [pc, #332]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d101      	bne.n	800573a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e099      	b.n	800586e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800573a:	4b4f      	ldr	r3, [pc, #316]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a4e      	ldr	r2, [pc, #312]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005746:	f7fc f91d 	bl	8001984 <HAL_GetTick>
 800574a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800574c:	e008      	b.n	8005760 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800574e:	f7fc f919 	bl	8001984 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e086      	b.n	800586e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005760:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f0      	bne.n	800574e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800576c:	4b42      	ldr	r3, [pc, #264]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	051b      	lsls	r3, r3, #20
 800577a:	493f      	ldr	r1, [pc, #252]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	3b01      	subs	r3, #1
 8005786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	3b01      	subs	r3, #1
 8005790:	025b      	lsls	r3, r3, #9
 8005792:	b29b      	uxth	r3, r3
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	3b01      	subs	r3, #1
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	061b      	lsls	r3, r3, #24
 80057ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057b0:	4931      	ldr	r1, [pc, #196]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057b6:	4b30      	ldr	r3, [pc, #192]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	492d      	ldr	r1, [pc, #180]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	4928      	ldr	r1, [pc, #160]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057da:	4b27      	ldr	r3, [pc, #156]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	4a26      	ldr	r2, [pc, #152]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057e6:	4b24      	ldr	r3, [pc, #144]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ea:	4b24      	ldr	r3, [pc, #144]	@ (800587c <RCCEx_PLL3_Config+0x160>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	69d2      	ldr	r2, [r2, #28]
 80057f2:	00d2      	lsls	r2, r2, #3
 80057f4:	4920      	ldr	r1, [pc, #128]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800580c:	4b1a      	ldr	r3, [pc, #104]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4a19      	ldr	r2, [pc, #100]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005812:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005818:	e00f      	b.n	800583a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d106      	bne.n	800582e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005820:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	4a14      	ldr	r2, [pc, #80]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005826:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800582a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800582c:	e005      	b.n	800583a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800582e:	4b12      	ldr	r3, [pc, #72]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005838:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800583a:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a0e      	ldr	r2, [pc, #56]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005846:	f7fc f89d 	bl	8001984 <HAL_GetTick>
 800584a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800584c:	e008      	b.n	8005860 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800584e:	f7fc f899 	bl	8001984 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e006      	b.n	800586e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <RCCEx_PLL3_Config+0x15c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	58024400 	.word	0x58024400
 800587c:	ffff0007 	.word	0xffff0007

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e049      	b.n	8005926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f841 	bl	800592e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 f9e8 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e054      	b.n	8005a06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <HAL_TIM_Base_Start_IT+0xd0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d022      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d01d      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a22      	ldr	r2, [pc, #136]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xd4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d018      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a21      	ldr	r2, [pc, #132]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a20 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005a24 <HAL_TIM_Base_Start_IT+0xe0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <HAL_TIM_Base_Start_IT+0xe4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x80>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xe8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d115      	bne.n	80059f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	4b19      	ldr	r3, [pc, #100]	@ (8005a30 <HAL_TIM_Base_Start_IT+0xec>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b06      	cmp	r3, #6
 80059d4:	d015      	beq.n	8005a02 <HAL_TIM_Base_Start_IT+0xbe>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059dc:	d011      	beq.n	8005a02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	e008      	b.n	8005a02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	e000      	b.n	8005a04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40001800 	.word	0x40001800
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	00010007 	.word	0x00010007

08005a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d020      	beq.n	8005a98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01b      	beq.n	8005a98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0202 	mvn.w	r2, #2
 8005a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8e9 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8db 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8ec 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d020      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0204 	mvn.w	r2, #4
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8c3 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8b5 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f8c6 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d020      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0208 	mvn.w	r2, #8
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2204      	movs	r2, #4
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f89d 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f88f 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8a0 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d020      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0210 	mvn.w	r2, #16
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2208      	movs	r2, #8
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f877 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f869 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f87a 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0201 	mvn.w	r2, #1
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fb faba 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f913 	bl	8005df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00c      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f90b 	bl	8005e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00c      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f834 	bl	8005c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00c      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f06f 0220 	mvn.w	r2, #32
 8005c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8d3 	bl	8005de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a46      	ldr	r2, [pc, #280]	@ (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a43      	ldr	r2, [pc, #268]	@ (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a42      	ldr	r2, [pc, #264]	@ (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a41      	ldr	r2, [pc, #260]	@ (8005dcc <TIM_Base_SetConfig+0x138>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a40      	ldr	r2, [pc, #256]	@ (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d108      	bne.n	8005ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a35      	ldr	r2, [pc, #212]	@ (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01f      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf4:	d01b      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a32      	ldr	r2, [pc, #200]	@ (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d017      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a31      	ldr	r2, [pc, #196]	@ (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <TIM_Base_SetConfig+0x138>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00f      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd4 <TIM_Base_SetConfig+0x140>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <TIM_Base_SetConfig+0x144>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2c      	ldr	r2, [pc, #176]	@ (8005ddc <TIM_Base_SetConfig+0x148>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d108      	bne.n	8005d40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a16      	ldr	r2, [pc, #88]	@ (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <TIM_Base_SetConfig+0x140>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a16      	ldr	r2, [pc, #88]	@ (8005dd8 <TIM_Base_SetConfig+0x144>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a15      	ldr	r2, [pc, #84]	@ (8005ddc <TIM_Base_SetConfig+0x148>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	611a      	str	r2, [r3, #16]
  }
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e042      	b.n	8005eb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d106      	bne.n	8005e46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fb fcbb 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2224      	movs	r2, #36	@ 0x24
 8005e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 ff22 	bl	8006cb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8b3 	bl	8005fd8 <UART_SetConfig>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e01b      	b.n	8005eb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 ffa1 	bl	8006df4 <UART_CheckIdleState>
 8005eb2:	4603      	mov	r3, r0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	@ 0x28
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d17b      	bne.n	8005fce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_UART_Transmit+0x26>
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e074      	b.n	8005fd0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2221      	movs	r2, #33	@ 0x21
 8005ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ef6:	f7fb fd45 	bl	8001984 <HAL_GetTick>
 8005efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f14:	d108      	bne.n	8005f28 <HAL_UART_Transmit+0x6c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e003      	b.n	8005f30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f30:	e030      	b.n	8005f94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2180      	movs	r1, #128	@ 0x80
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f001 f803 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e03d      	b.n	8005fd0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	e007      	b.n	8005f82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1c8      	bne.n	8005f32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2140      	movs	r1, #64	@ 0x40
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 ffcc 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e006      	b.n	8005fd0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fdc:	b092      	sub	sp, #72	@ 0x48
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4bbe      	ldr	r3, [pc, #760]	@ (8006300 <UART_SetConfig+0x328>)
 8006008:	4013      	ands	r3, r2
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006010:	430b      	orrs	r3, r1
 8006012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4ab3      	ldr	r2, [pc, #716]	@ (8006304 <UART_SetConfig+0x32c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006040:	4313      	orrs	r3, r2
 8006042:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	4baf      	ldr	r3, [pc, #700]	@ (8006308 <UART_SetConfig+0x330>)
 800604c:	4013      	ands	r3, r2
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006054:	430b      	orrs	r3, r1
 8006056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	f023 010f 	bic.w	r1, r3, #15
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4aa6      	ldr	r2, [pc, #664]	@ (800630c <UART_SetConfig+0x334>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d177      	bne.n	8006168 <UART_SetConfig+0x190>
 8006078:	4ba5      	ldr	r3, [pc, #660]	@ (8006310 <UART_SetConfig+0x338>)
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006080:	2b28      	cmp	r3, #40	@ 0x28
 8006082:	d86d      	bhi.n	8006160 <UART_SetConfig+0x188>
 8006084:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <UART_SetConfig+0xb4>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	08006131 	.word	0x08006131
 8006090:	08006161 	.word	0x08006161
 8006094:	08006161 	.word	0x08006161
 8006098:	08006161 	.word	0x08006161
 800609c:	08006161 	.word	0x08006161
 80060a0:	08006161 	.word	0x08006161
 80060a4:	08006161 	.word	0x08006161
 80060a8:	08006161 	.word	0x08006161
 80060ac:	08006139 	.word	0x08006139
 80060b0:	08006161 	.word	0x08006161
 80060b4:	08006161 	.word	0x08006161
 80060b8:	08006161 	.word	0x08006161
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006161 	.word	0x08006161
 80060c4:	08006161 	.word	0x08006161
 80060c8:	08006161 	.word	0x08006161
 80060cc:	08006141 	.word	0x08006141
 80060d0:	08006161 	.word	0x08006161
 80060d4:	08006161 	.word	0x08006161
 80060d8:	08006161 	.word	0x08006161
 80060dc:	08006161 	.word	0x08006161
 80060e0:	08006161 	.word	0x08006161
 80060e4:	08006161 	.word	0x08006161
 80060e8:	08006161 	.word	0x08006161
 80060ec:	08006149 	.word	0x08006149
 80060f0:	08006161 	.word	0x08006161
 80060f4:	08006161 	.word	0x08006161
 80060f8:	08006161 	.word	0x08006161
 80060fc:	08006161 	.word	0x08006161
 8006100:	08006161 	.word	0x08006161
 8006104:	08006161 	.word	0x08006161
 8006108:	08006161 	.word	0x08006161
 800610c:	08006151 	.word	0x08006151
 8006110:	08006161 	.word	0x08006161
 8006114:	08006161 	.word	0x08006161
 8006118:	08006161 	.word	0x08006161
 800611c:	08006161 	.word	0x08006161
 8006120:	08006161 	.word	0x08006161
 8006124:	08006161 	.word	0x08006161
 8006128:	08006161 	.word	0x08006161
 800612c:	08006159 	.word	0x08006159
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e326      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e322      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e31e      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e31a      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006150:	2320      	movs	r3, #32
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e316      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006158:	2340      	movs	r3, #64	@ 0x40
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e312      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e30e      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a69      	ldr	r2, [pc, #420]	@ (8006314 <UART_SetConfig+0x33c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d130      	bne.n	80061d4 <UART_SetConfig+0x1fc>
 8006172:	4b67      	ldr	r3, [pc, #412]	@ (8006310 <UART_SetConfig+0x338>)
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b05      	cmp	r3, #5
 800617c:	d826      	bhi.n	80061cc <UART_SetConfig+0x1f4>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x1ac>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	0800619d 	.word	0x0800619d
 8006188:	080061a5 	.word	0x080061a5
 800618c:	080061ad 	.word	0x080061ad
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061c5 	.word	0x080061c5
 800619c:	2300      	movs	r3, #0
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e2f0      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061a4:	2304      	movs	r3, #4
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e2ec      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061ac:	2308      	movs	r3, #8
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e2e8      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061b4:	2310      	movs	r3, #16
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e2e4      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061bc:	2320      	movs	r3, #32
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e2e0      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061c4:	2340      	movs	r3, #64	@ 0x40
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e2dc      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061cc:	2380      	movs	r3, #128	@ 0x80
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e2d8      	b.n	8006786 <UART_SetConfig+0x7ae>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a4f      	ldr	r2, [pc, #316]	@ (8006318 <UART_SetConfig+0x340>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d130      	bne.n	8006240 <UART_SetConfig+0x268>
 80061de:	4b4c      	ldr	r3, [pc, #304]	@ (8006310 <UART_SetConfig+0x338>)
 80061e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d826      	bhi.n	8006238 <UART_SetConfig+0x260>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <UART_SetConfig+0x218>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006209 	.word	0x08006209
 80061f4:	08006211 	.word	0x08006211
 80061f8:	08006219 	.word	0x08006219
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006229 	.word	0x08006229
 8006204:	08006231 	.word	0x08006231
 8006208:	2300      	movs	r3, #0
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e2ba      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e2b6      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e2b2      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e2ae      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006228:	2320      	movs	r3, #32
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e2aa      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006230:	2340      	movs	r3, #64	@ 0x40
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e2a6      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e2a2      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a35      	ldr	r2, [pc, #212]	@ (800631c <UART_SetConfig+0x344>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d130      	bne.n	80062ac <UART_SetConfig+0x2d4>
 800624a:	4b31      	ldr	r3, [pc, #196]	@ (8006310 <UART_SetConfig+0x338>)
 800624c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	2b05      	cmp	r3, #5
 8006254:	d826      	bhi.n	80062a4 <UART_SetConfig+0x2cc>
 8006256:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <UART_SetConfig+0x284>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006275 	.word	0x08006275
 8006260:	0800627d 	.word	0x0800627d
 8006264:	08006285 	.word	0x08006285
 8006268:	0800628d 	.word	0x0800628d
 800626c:	08006295 	.word	0x08006295
 8006270:	0800629d 	.word	0x0800629d
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e284      	b.n	8006786 <UART_SetConfig+0x7ae>
 800627c:	2304      	movs	r3, #4
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e280      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006284:	2308      	movs	r3, #8
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e27c      	b.n	8006786 <UART_SetConfig+0x7ae>
 800628c:	2310      	movs	r3, #16
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e278      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006294:	2320      	movs	r3, #32
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e274      	b.n	8006786 <UART_SetConfig+0x7ae>
 800629c:	2340      	movs	r3, #64	@ 0x40
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e270      	b.n	8006786 <UART_SetConfig+0x7ae>
 80062a4:	2380      	movs	r3, #128	@ 0x80
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e26c      	b.n	8006786 <UART_SetConfig+0x7ae>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <UART_SetConfig+0x348>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d142      	bne.n	800633c <UART_SetConfig+0x364>
 80062b6:	4b16      	ldr	r3, [pc, #88]	@ (8006310 <UART_SetConfig+0x338>)
 80062b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d838      	bhi.n	8006334 <UART_SetConfig+0x35c>
 80062c2:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <UART_SetConfig+0x2f0>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062e1 	.word	0x080062e1
 80062cc:	080062e9 	.word	0x080062e9
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	08006325 	.word	0x08006325
 80062dc:	0800632d 	.word	0x0800632d
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e24e      	b.n	8006786 <UART_SetConfig+0x7ae>
 80062e8:	2304      	movs	r3, #4
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e24a      	b.n	8006786 <UART_SetConfig+0x7ae>
 80062f0:	2308      	movs	r3, #8
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e246      	b.n	8006786 <UART_SetConfig+0x7ae>
 80062f8:	2310      	movs	r3, #16
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e242      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006300:	cfff69f3 	.word	0xcfff69f3
 8006304:	58000c00 	.word	0x58000c00
 8006308:	11fff4ff 	.word	0x11fff4ff
 800630c:	40011000 	.word	0x40011000
 8006310:	58024400 	.word	0x58024400
 8006314:	40004400 	.word	0x40004400
 8006318:	40004800 	.word	0x40004800
 800631c:	40004c00 	.word	0x40004c00
 8006320:	40005000 	.word	0x40005000
 8006324:	2320      	movs	r3, #32
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e22c      	b.n	8006786 <UART_SetConfig+0x7ae>
 800632c:	2340      	movs	r3, #64	@ 0x40
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e228      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006334:	2380      	movs	r3, #128	@ 0x80
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e224      	b.n	8006786 <UART_SetConfig+0x7ae>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4ab1      	ldr	r2, [pc, #708]	@ (8006608 <UART_SetConfig+0x630>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d176      	bne.n	8006434 <UART_SetConfig+0x45c>
 8006346:	4bb1      	ldr	r3, [pc, #708]	@ (800660c <UART_SetConfig+0x634>)
 8006348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800634e:	2b28      	cmp	r3, #40	@ 0x28
 8006350:	d86c      	bhi.n	800642c <UART_SetConfig+0x454>
 8006352:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <UART_SetConfig+0x380>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	080063fd 	.word	0x080063fd
 800635c:	0800642d 	.word	0x0800642d
 8006360:	0800642d 	.word	0x0800642d
 8006364:	0800642d 	.word	0x0800642d
 8006368:	0800642d 	.word	0x0800642d
 800636c:	0800642d 	.word	0x0800642d
 8006370:	0800642d 	.word	0x0800642d
 8006374:	0800642d 	.word	0x0800642d
 8006378:	08006405 	.word	0x08006405
 800637c:	0800642d 	.word	0x0800642d
 8006380:	0800642d 	.word	0x0800642d
 8006384:	0800642d 	.word	0x0800642d
 8006388:	0800642d 	.word	0x0800642d
 800638c:	0800642d 	.word	0x0800642d
 8006390:	0800642d 	.word	0x0800642d
 8006394:	0800642d 	.word	0x0800642d
 8006398:	0800640d 	.word	0x0800640d
 800639c:	0800642d 	.word	0x0800642d
 80063a0:	0800642d 	.word	0x0800642d
 80063a4:	0800642d 	.word	0x0800642d
 80063a8:	0800642d 	.word	0x0800642d
 80063ac:	0800642d 	.word	0x0800642d
 80063b0:	0800642d 	.word	0x0800642d
 80063b4:	0800642d 	.word	0x0800642d
 80063b8:	08006415 	.word	0x08006415
 80063bc:	0800642d 	.word	0x0800642d
 80063c0:	0800642d 	.word	0x0800642d
 80063c4:	0800642d 	.word	0x0800642d
 80063c8:	0800642d 	.word	0x0800642d
 80063cc:	0800642d 	.word	0x0800642d
 80063d0:	0800642d 	.word	0x0800642d
 80063d4:	0800642d 	.word	0x0800642d
 80063d8:	0800641d 	.word	0x0800641d
 80063dc:	0800642d 	.word	0x0800642d
 80063e0:	0800642d 	.word	0x0800642d
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	0800642d 	.word	0x0800642d
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e1c0      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e1bc      	b.n	8006786 <UART_SetConfig+0x7ae>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e1b8      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e1b4      	b.n	8006786 <UART_SetConfig+0x7ae>
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e1b0      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006424:	2340      	movs	r3, #64	@ 0x40
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e1ac      	b.n	8006786 <UART_SetConfig+0x7ae>
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e1a8      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a75      	ldr	r2, [pc, #468]	@ (8006610 <UART_SetConfig+0x638>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d130      	bne.n	80064a0 <UART_SetConfig+0x4c8>
 800643e:	4b73      	ldr	r3, [pc, #460]	@ (800660c <UART_SetConfig+0x634>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b05      	cmp	r3, #5
 8006448:	d826      	bhi.n	8006498 <UART_SetConfig+0x4c0>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <UART_SetConfig+0x478>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006469 	.word	0x08006469
 8006454:	08006471 	.word	0x08006471
 8006458:	08006479 	.word	0x08006479
 800645c:	08006481 	.word	0x08006481
 8006460:	08006489 	.word	0x08006489
 8006464:	08006491 	.word	0x08006491
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646e:	e18a      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006476:	e186      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e182      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e17e      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006488:	2320      	movs	r3, #32
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e17a      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006490:	2340      	movs	r3, #64	@ 0x40
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e176      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006498:	2380      	movs	r3, #128	@ 0x80
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e172      	b.n	8006786 <UART_SetConfig+0x7ae>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5b      	ldr	r2, [pc, #364]	@ (8006614 <UART_SetConfig+0x63c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d130      	bne.n	800650c <UART_SetConfig+0x534>
 80064aa:	4b58      	ldr	r3, [pc, #352]	@ (800660c <UART_SetConfig+0x634>)
 80064ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d826      	bhi.n	8006504 <UART_SetConfig+0x52c>
 80064b6:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <UART_SetConfig+0x4e4>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064d5 	.word	0x080064d5
 80064c0:	080064dd 	.word	0x080064dd
 80064c4:	080064e5 	.word	0x080064e5
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e154      	b.n	8006786 <UART_SetConfig+0x7ae>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e150      	b.n	8006786 <UART_SetConfig+0x7ae>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e14c      	b.n	8006786 <UART_SetConfig+0x7ae>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e148      	b.n	8006786 <UART_SetConfig+0x7ae>
 80064f4:	2320      	movs	r3, #32
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e144      	b.n	8006786 <UART_SetConfig+0x7ae>
 80064fc:	2340      	movs	r3, #64	@ 0x40
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e140      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006504:	2380      	movs	r3, #128	@ 0x80
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e13c      	b.n	8006786 <UART_SetConfig+0x7ae>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a41      	ldr	r2, [pc, #260]	@ (8006618 <UART_SetConfig+0x640>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f040 8082 	bne.w	800661c <UART_SetConfig+0x644>
 8006518:	4b3c      	ldr	r3, [pc, #240]	@ (800660c <UART_SetConfig+0x634>)
 800651a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006520:	2b28      	cmp	r3, #40	@ 0x28
 8006522:	d86d      	bhi.n	8006600 <UART_SetConfig+0x628>
 8006524:	a201      	add	r2, pc, #4	@ (adr r2, 800652c <UART_SetConfig+0x554>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	080065d1 	.word	0x080065d1
 8006530:	08006601 	.word	0x08006601
 8006534:	08006601 	.word	0x08006601
 8006538:	08006601 	.word	0x08006601
 800653c:	08006601 	.word	0x08006601
 8006540:	08006601 	.word	0x08006601
 8006544:	08006601 	.word	0x08006601
 8006548:	08006601 	.word	0x08006601
 800654c:	080065d9 	.word	0x080065d9
 8006550:	08006601 	.word	0x08006601
 8006554:	08006601 	.word	0x08006601
 8006558:	08006601 	.word	0x08006601
 800655c:	08006601 	.word	0x08006601
 8006560:	08006601 	.word	0x08006601
 8006564:	08006601 	.word	0x08006601
 8006568:	08006601 	.word	0x08006601
 800656c:	080065e1 	.word	0x080065e1
 8006570:	08006601 	.word	0x08006601
 8006574:	08006601 	.word	0x08006601
 8006578:	08006601 	.word	0x08006601
 800657c:	08006601 	.word	0x08006601
 8006580:	08006601 	.word	0x08006601
 8006584:	08006601 	.word	0x08006601
 8006588:	08006601 	.word	0x08006601
 800658c:	080065e9 	.word	0x080065e9
 8006590:	08006601 	.word	0x08006601
 8006594:	08006601 	.word	0x08006601
 8006598:	08006601 	.word	0x08006601
 800659c:	08006601 	.word	0x08006601
 80065a0:	08006601 	.word	0x08006601
 80065a4:	08006601 	.word	0x08006601
 80065a8:	08006601 	.word	0x08006601
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	08006601 	.word	0x08006601
 80065b4:	08006601 	.word	0x08006601
 80065b8:	08006601 	.word	0x08006601
 80065bc:	08006601 	.word	0x08006601
 80065c0:	08006601 	.word	0x08006601
 80065c4:	08006601 	.word	0x08006601
 80065c8:	08006601 	.word	0x08006601
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d6:	e0d6      	b.n	8006786 <UART_SetConfig+0x7ae>
 80065d8:	2304      	movs	r3, #4
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065de:	e0d2      	b.n	8006786 <UART_SetConfig+0x7ae>
 80065e0:	2308      	movs	r3, #8
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e6:	e0ce      	b.n	8006786 <UART_SetConfig+0x7ae>
 80065e8:	2310      	movs	r3, #16
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e0ca      	b.n	8006786 <UART_SetConfig+0x7ae>
 80065f0:	2320      	movs	r3, #32
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e0c6      	b.n	8006786 <UART_SetConfig+0x7ae>
 80065f8:	2340      	movs	r3, #64	@ 0x40
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e0c2      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e0be      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006608:	40011400 	.word	0x40011400
 800660c:	58024400 	.word	0x58024400
 8006610:	40007800 	.word	0x40007800
 8006614:	40007c00 	.word	0x40007c00
 8006618:	40011800 	.word	0x40011800
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4aad      	ldr	r2, [pc, #692]	@ (80068d8 <UART_SetConfig+0x900>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d176      	bne.n	8006714 <UART_SetConfig+0x73c>
 8006626:	4bad      	ldr	r3, [pc, #692]	@ (80068dc <UART_SetConfig+0x904>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800662e:	2b28      	cmp	r3, #40	@ 0x28
 8006630:	d86c      	bhi.n	800670c <UART_SetConfig+0x734>
 8006632:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <UART_SetConfig+0x660>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	080066dd 	.word	0x080066dd
 800663c:	0800670d 	.word	0x0800670d
 8006640:	0800670d 	.word	0x0800670d
 8006644:	0800670d 	.word	0x0800670d
 8006648:	0800670d 	.word	0x0800670d
 800664c:	0800670d 	.word	0x0800670d
 8006650:	0800670d 	.word	0x0800670d
 8006654:	0800670d 	.word	0x0800670d
 8006658:	080066e5 	.word	0x080066e5
 800665c:	0800670d 	.word	0x0800670d
 8006660:	0800670d 	.word	0x0800670d
 8006664:	0800670d 	.word	0x0800670d
 8006668:	0800670d 	.word	0x0800670d
 800666c:	0800670d 	.word	0x0800670d
 8006670:	0800670d 	.word	0x0800670d
 8006674:	0800670d 	.word	0x0800670d
 8006678:	080066ed 	.word	0x080066ed
 800667c:	0800670d 	.word	0x0800670d
 8006680:	0800670d 	.word	0x0800670d
 8006684:	0800670d 	.word	0x0800670d
 8006688:	0800670d 	.word	0x0800670d
 800668c:	0800670d 	.word	0x0800670d
 8006690:	0800670d 	.word	0x0800670d
 8006694:	0800670d 	.word	0x0800670d
 8006698:	080066f5 	.word	0x080066f5
 800669c:	0800670d 	.word	0x0800670d
 80066a0:	0800670d 	.word	0x0800670d
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	0800670d 	.word	0x0800670d
 80066ac:	0800670d 	.word	0x0800670d
 80066b0:	0800670d 	.word	0x0800670d
 80066b4:	0800670d 	.word	0x0800670d
 80066b8:	080066fd 	.word	0x080066fd
 80066bc:	0800670d 	.word	0x0800670d
 80066c0:	0800670d 	.word	0x0800670d
 80066c4:	0800670d 	.word	0x0800670d
 80066c8:	0800670d 	.word	0x0800670d
 80066cc:	0800670d 	.word	0x0800670d
 80066d0:	0800670d 	.word	0x0800670d
 80066d4:	0800670d 	.word	0x0800670d
 80066d8:	08006705 	.word	0x08006705
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e050      	b.n	8006786 <UART_SetConfig+0x7ae>
 80066e4:	2304      	movs	r3, #4
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e04c      	b.n	8006786 <UART_SetConfig+0x7ae>
 80066ec:	2308      	movs	r3, #8
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e048      	b.n	8006786 <UART_SetConfig+0x7ae>
 80066f4:	2310      	movs	r3, #16
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e044      	b.n	8006786 <UART_SetConfig+0x7ae>
 80066fc:	2320      	movs	r3, #32
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e040      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006704:	2340      	movs	r3, #64	@ 0x40
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e03c      	b.n	8006786 <UART_SetConfig+0x7ae>
 800670c:	2380      	movs	r3, #128	@ 0x80
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006712:	e038      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a71      	ldr	r2, [pc, #452]	@ (80068e0 <UART_SetConfig+0x908>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d130      	bne.n	8006780 <UART_SetConfig+0x7a8>
 800671e:	4b6f      	ldr	r3, [pc, #444]	@ (80068dc <UART_SetConfig+0x904>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b05      	cmp	r3, #5
 8006728:	d826      	bhi.n	8006778 <UART_SetConfig+0x7a0>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <UART_SetConfig+0x758>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006749 	.word	0x08006749
 8006734:	08006751 	.word	0x08006751
 8006738:	08006759 	.word	0x08006759
 800673c:	08006761 	.word	0x08006761
 8006740:	08006769 	.word	0x08006769
 8006744:	08006771 	.word	0x08006771
 8006748:	2302      	movs	r3, #2
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e01a      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e016      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e012      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e00e      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006768:	2320      	movs	r3, #32
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676e:	e00a      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006770:	2340      	movs	r3, #64	@ 0x40
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e006      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006778:	2380      	movs	r3, #128	@ 0x80
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e002      	b.n	8006786 <UART_SetConfig+0x7ae>
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a55      	ldr	r2, [pc, #340]	@ (80068e0 <UART_SetConfig+0x908>)
 800678c:	4293      	cmp	r3, r2
 800678e:	f040 80f8 	bne.w	8006982 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006792:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006796:	2b20      	cmp	r3, #32
 8006798:	dc46      	bgt.n	8006828 <UART_SetConfig+0x850>
 800679a:	2b02      	cmp	r3, #2
 800679c:	db75      	blt.n	800688a <UART_SetConfig+0x8b2>
 800679e:	3b02      	subs	r3, #2
 80067a0:	2b1e      	cmp	r3, #30
 80067a2:	d872      	bhi.n	800688a <UART_SetConfig+0x8b2>
 80067a4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <UART_SetConfig+0x7d4>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	0800682f 	.word	0x0800682f
 80067b0:	0800688b 	.word	0x0800688b
 80067b4:	08006837 	.word	0x08006837
 80067b8:	0800688b 	.word	0x0800688b
 80067bc:	0800688b 	.word	0x0800688b
 80067c0:	0800688b 	.word	0x0800688b
 80067c4:	08006847 	.word	0x08006847
 80067c8:	0800688b 	.word	0x0800688b
 80067cc:	0800688b 	.word	0x0800688b
 80067d0:	0800688b 	.word	0x0800688b
 80067d4:	0800688b 	.word	0x0800688b
 80067d8:	0800688b 	.word	0x0800688b
 80067dc:	0800688b 	.word	0x0800688b
 80067e0:	0800688b 	.word	0x0800688b
 80067e4:	08006857 	.word	0x08006857
 80067e8:	0800688b 	.word	0x0800688b
 80067ec:	0800688b 	.word	0x0800688b
 80067f0:	0800688b 	.word	0x0800688b
 80067f4:	0800688b 	.word	0x0800688b
 80067f8:	0800688b 	.word	0x0800688b
 80067fc:	0800688b 	.word	0x0800688b
 8006800:	0800688b 	.word	0x0800688b
 8006804:	0800688b 	.word	0x0800688b
 8006808:	0800688b 	.word	0x0800688b
 800680c:	0800688b 	.word	0x0800688b
 8006810:	0800688b 	.word	0x0800688b
 8006814:	0800688b 	.word	0x0800688b
 8006818:	0800688b 	.word	0x0800688b
 800681c:	0800688b 	.word	0x0800688b
 8006820:	0800688b 	.word	0x0800688b
 8006824:	0800687d 	.word	0x0800687d
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d02a      	beq.n	8006882 <UART_SetConfig+0x8aa>
 800682c:	e02d      	b.n	800688a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800682e:	f7fe fc05 	bl	800503c <HAL_RCCEx_GetD3PCLK1Freq>
 8006832:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006834:	e02f      	b.n	8006896 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fc14 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006844:	e027      	b.n	8006896 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006846:	f107 0318 	add.w	r3, r7, #24
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd60 	bl	8005310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e01f      	b.n	8006896 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006856:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <UART_SetConfig+0x904>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006862:	4b1e      	ldr	r3, [pc, #120]	@ (80068dc <UART_SetConfig+0x904>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <UART_SetConfig+0x90c>)
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006874:	e00f      	b.n	8006896 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006876:	4b1b      	ldr	r3, [pc, #108]	@ (80068e4 <UART_SetConfig+0x90c>)
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800687a:	e00c      	b.n	8006896 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800687c:	4b1a      	ldr	r3, [pc, #104]	@ (80068e8 <UART_SetConfig+0x910>)
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006880:	e009      	b.n	8006896 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006888:	e005      	b.n	8006896 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 81ee 	beq.w	8006c7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	4a12      	ldr	r2, [pc, #72]	@ (80068ec <UART_SetConfig+0x914>)
 80068a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4413      	add	r3, r2
 80068bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068be:	429a      	cmp	r2, r3
 80068c0:	d305      	bcc.n	80068ce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d910      	bls.n	80068f0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068d4:	e1d1      	b.n	8006c7a <UART_SetConfig+0xca2>
 80068d6:	bf00      	nop
 80068d8:	40011c00 	.word	0x40011c00
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58000c00 	.word	0x58000c00
 80068e4:	03d09000 	.word	0x03d09000
 80068e8:	003d0900 	.word	0x003d0900
 80068ec:	0800f26c 	.word	0x0800f26c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f2:	2200      	movs	r2, #0
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	60fa      	str	r2, [r7, #12]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	4ac0      	ldr	r2, [pc, #768]	@ (8006c00 <UART_SetConfig+0xc28>)
 80068fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006902:	b29b      	uxth	r3, r3
 8006904:	2200      	movs	r2, #0
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800690e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006912:	f7f9 ff01 	bl	8000718 <__aeabi_uldivmod>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	020b      	lsls	r3, r1, #8
 8006928:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800692c:	0202      	lsls	r2, r0, #8
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	6849      	ldr	r1, [r1, #4]
 8006932:	0849      	lsrs	r1, r1, #1
 8006934:	2000      	movs	r0, #0
 8006936:	460c      	mov	r4, r1
 8006938:	4605      	mov	r5, r0
 800693a:	eb12 0804 	adds.w	r8, r2, r4
 800693e:	eb43 0905 	adc.w	r9, r3, r5
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	469a      	mov	sl, r3
 800694a:	4693      	mov	fp, r2
 800694c:	4652      	mov	r2, sl
 800694e:	465b      	mov	r3, fp
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7f9 fee0 	bl	8000718 <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4613      	mov	r3, r2
 800695e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006966:	d308      	bcc.n	800697a <UART_SetConfig+0x9a2>
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800696e:	d204      	bcs.n	800697a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006976:	60da      	str	r2, [r3, #12]
 8006978:	e17f      	b.n	8006c7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006980:	e17b      	b.n	8006c7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800698a:	f040 80bd 	bne.w	8006b08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800698e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006992:	2b20      	cmp	r3, #32
 8006994:	dc48      	bgt.n	8006a28 <UART_SetConfig+0xa50>
 8006996:	2b00      	cmp	r3, #0
 8006998:	db7b      	blt.n	8006a92 <UART_SetConfig+0xaba>
 800699a:	2b20      	cmp	r3, #32
 800699c:	d879      	bhi.n	8006a92 <UART_SetConfig+0xaba>
 800699e:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <UART_SetConfig+0x9cc>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	08006a2f 	.word	0x08006a2f
 80069a8:	08006a37 	.word	0x08006a37
 80069ac:	08006a93 	.word	0x08006a93
 80069b0:	08006a93 	.word	0x08006a93
 80069b4:	08006a3f 	.word	0x08006a3f
 80069b8:	08006a93 	.word	0x08006a93
 80069bc:	08006a93 	.word	0x08006a93
 80069c0:	08006a93 	.word	0x08006a93
 80069c4:	08006a4f 	.word	0x08006a4f
 80069c8:	08006a93 	.word	0x08006a93
 80069cc:	08006a93 	.word	0x08006a93
 80069d0:	08006a93 	.word	0x08006a93
 80069d4:	08006a93 	.word	0x08006a93
 80069d8:	08006a93 	.word	0x08006a93
 80069dc:	08006a93 	.word	0x08006a93
 80069e0:	08006a93 	.word	0x08006a93
 80069e4:	08006a5f 	.word	0x08006a5f
 80069e8:	08006a93 	.word	0x08006a93
 80069ec:	08006a93 	.word	0x08006a93
 80069f0:	08006a93 	.word	0x08006a93
 80069f4:	08006a93 	.word	0x08006a93
 80069f8:	08006a93 	.word	0x08006a93
 80069fc:	08006a93 	.word	0x08006a93
 8006a00:	08006a93 	.word	0x08006a93
 8006a04:	08006a93 	.word	0x08006a93
 8006a08:	08006a93 	.word	0x08006a93
 8006a0c:	08006a93 	.word	0x08006a93
 8006a10:	08006a93 	.word	0x08006a93
 8006a14:	08006a93 	.word	0x08006a93
 8006a18:	08006a93 	.word	0x08006a93
 8006a1c:	08006a93 	.word	0x08006a93
 8006a20:	08006a93 	.word	0x08006a93
 8006a24:	08006a85 	.word	0x08006a85
 8006a28:	2b40      	cmp	r3, #64	@ 0x40
 8006a2a:	d02e      	beq.n	8006a8a <UART_SetConfig+0xab2>
 8006a2c:	e031      	b.n	8006a92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a2e:	f7fd f8d9 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8006a32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a34:	e033      	b.n	8006a9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a36:	f7fd f8eb 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8006a3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a3c:	e02f      	b.n	8006a9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fb10 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4c:	e027      	b.n	8006a9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a4e:	f107 0318 	add.w	r3, r7, #24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fc5c 	bl	8005310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5c:	e01f      	b.n	8006a9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a5e:	4b69      	ldr	r3, [pc, #420]	@ (8006c04 <UART_SetConfig+0xc2c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a6a:	4b66      	ldr	r3, [pc, #408]	@ (8006c04 <UART_SetConfig+0xc2c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	4a64      	ldr	r2, [pc, #400]	@ (8006c08 <UART_SetConfig+0xc30>)
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a7c:	e00f      	b.n	8006a9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006a7e:	4b62      	ldr	r3, [pc, #392]	@ (8006c08 <UART_SetConfig+0xc30>)
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a82:	e00c      	b.n	8006a9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a84:	4b61      	ldr	r3, [pc, #388]	@ (8006c0c <UART_SetConfig+0xc34>)
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a88:	e009      	b.n	8006a9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a90:	e005      	b.n	8006a9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80ea 	beq.w	8006c7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	4a55      	ldr	r2, [pc, #340]	@ (8006c00 <UART_SetConfig+0xc28>)
 8006aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab8:	005a      	lsls	r2, r3, #1
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	441a      	add	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d916      	bls.n	8006b00 <UART_SetConfig+0xb28>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad8:	d212      	bcs.n	8006b00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f023 030f 	bic.w	r3, r3, #15
 8006ae2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006af2:	4313      	orrs	r3, r2
 8006af4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e0bc      	b.n	8006c7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b06:	e0b8      	b.n	8006c7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	dc4b      	bgt.n	8006ba8 <UART_SetConfig+0xbd0>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f2c0 8087 	blt.w	8006c24 <UART_SetConfig+0xc4c>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	f200 8084 	bhi.w	8006c24 <UART_SetConfig+0xc4c>
 8006b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b24 <UART_SetConfig+0xb4c>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006baf 	.word	0x08006baf
 8006b28:	08006bb7 	.word	0x08006bb7
 8006b2c:	08006c25 	.word	0x08006c25
 8006b30:	08006c25 	.word	0x08006c25
 8006b34:	08006bbf 	.word	0x08006bbf
 8006b38:	08006c25 	.word	0x08006c25
 8006b3c:	08006c25 	.word	0x08006c25
 8006b40:	08006c25 	.word	0x08006c25
 8006b44:	08006bcf 	.word	0x08006bcf
 8006b48:	08006c25 	.word	0x08006c25
 8006b4c:	08006c25 	.word	0x08006c25
 8006b50:	08006c25 	.word	0x08006c25
 8006b54:	08006c25 	.word	0x08006c25
 8006b58:	08006c25 	.word	0x08006c25
 8006b5c:	08006c25 	.word	0x08006c25
 8006b60:	08006c25 	.word	0x08006c25
 8006b64:	08006bdf 	.word	0x08006bdf
 8006b68:	08006c25 	.word	0x08006c25
 8006b6c:	08006c25 	.word	0x08006c25
 8006b70:	08006c25 	.word	0x08006c25
 8006b74:	08006c25 	.word	0x08006c25
 8006b78:	08006c25 	.word	0x08006c25
 8006b7c:	08006c25 	.word	0x08006c25
 8006b80:	08006c25 	.word	0x08006c25
 8006b84:	08006c25 	.word	0x08006c25
 8006b88:	08006c25 	.word	0x08006c25
 8006b8c:	08006c25 	.word	0x08006c25
 8006b90:	08006c25 	.word	0x08006c25
 8006b94:	08006c25 	.word	0x08006c25
 8006b98:	08006c25 	.word	0x08006c25
 8006b9c:	08006c25 	.word	0x08006c25
 8006ba0:	08006c25 	.word	0x08006c25
 8006ba4:	08006c17 	.word	0x08006c17
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d037      	beq.n	8006c1c <UART_SetConfig+0xc44>
 8006bac:	e03a      	b.n	8006c24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bae:	f7fd f819 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8006bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bb4:	e03c      	b.n	8006c30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bb6:	f7fd f82b 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8006bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bbc:	e038      	b.n	8006c30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fa50 	bl	8005068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bcc:	e030      	b.n	8006c30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bce:	f107 0318 	add.w	r3, r7, #24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fb9c 	bl	8005310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bdc:	e028      	b.n	8006c30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bde:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <UART_SetConfig+0xc2c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d012      	beq.n	8006c10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bea:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <UART_SetConfig+0xc2c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	08db      	lsrs	r3, r3, #3
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <UART_SetConfig+0xc30>)
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bfc:	e018      	b.n	8006c30 <UART_SetConfig+0xc58>
 8006bfe:	bf00      	nop
 8006c00:	0800f26c 	.word	0x0800f26c
 8006c04:	58024400 	.word	0x58024400
 8006c08:	03d09000 	.word	0x03d09000
 8006c0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b24      	ldr	r3, [pc, #144]	@ (8006ca4 <UART_SetConfig+0xccc>)
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c14:	e00c      	b.n	8006c30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c16:	4b24      	ldr	r3, [pc, #144]	@ (8006ca8 <UART_SetConfig+0xcd0>)
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1a:	e009      	b.n	8006c30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c22:	e005      	b.n	8006c30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c2e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d021      	beq.n	8006c7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cac <UART_SetConfig+0xcd4>)
 8006c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c44:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	441a      	add	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d909      	bls.n	8006c74 <UART_SetConfig+0xc9c>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c66:	d205      	bcs.n	8006c74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	e002      	b.n	8006c7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2200      	movs	r2, #0
 8006c94:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c96:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3748      	adds	r7, #72	@ 0x48
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca4:	03d09000 	.word	0x03d09000
 8006ca8:	003d0900 	.word	0x003d0900
 8006cac:	0800f26c 	.word	0x0800f26c

08006cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dae:	d10a      	bne.n	8006dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b098      	sub	sp, #96	@ 0x60
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e04:	f7fa fdbe 	bl	8001984 <HAL_GetTick>
 8006e08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d12f      	bne.n	8006e78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e20:	2200      	movs	r2, #0
 8006e22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f88e 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d022      	beq.n	8006e78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e6      	bne.n	8006e32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e063      	b.n	8006f40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d149      	bne.n	8006f1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f857 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d03c      	beq.n	8006f1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	623b      	str	r3, [r7, #32]
   return(result);
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e6      	bne.n	8006ea0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	69b9      	ldr	r1, [r7, #24]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	617b      	str	r3, [r7, #20]
   return(result);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e012      	b.n	8006f40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3758      	adds	r7, #88	@ 0x58
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f58:	e04f      	b.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d04b      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f62:	f7fa fd0f 	bl	8001984 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d302      	bcc.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e04e      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d037      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b80      	cmp	r3, #128	@ 0x80
 8006f8e:	d034      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d031      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d110      	bne.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2208      	movs	r2, #8
 8006faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f839 	bl	8007024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e029      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fd4:	d111      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f81f 	bl	8007024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e00f      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d0a0      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b095      	sub	sp, #84	@ 0x54
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800704a:	643b      	str	r3, [r7, #64]	@ 0x40
 800704c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007050:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e6      	bne.n	800702c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	61fb      	str	r3, [r7, #28]
   return(result);
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	4b1e      	ldr	r3, [pc, #120]	@ (80070ec <UART_EndRxTransfer+0xc8>)
 8007072:	4013      	ands	r3, r2
 8007074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800707e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007080:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d118      	bne.n	80070cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f023 0310 	bic.w	r3, r3, #16
 80070ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6979      	ldr	r1, [r7, #20]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80070e0:	bf00      	nop
 80070e2:	3754      	adds	r7, #84	@ 0x54
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	effffffe 	.word	0xeffffffe

080070f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_UARTEx_DisableFifoMode+0x16>
 8007102:	2302      	movs	r3, #2
 8007104:	e027      	b.n	8007156 <HAL_UARTEx_DisableFifoMode+0x66>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2224      	movs	r2, #36	@ 0x24
 8007112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007134:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007176:	2302      	movs	r3, #2
 8007178:	e02d      	b.n	80071d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2224      	movs	r2, #36	@ 0x24
 8007186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f850 	bl	800725c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e02d      	b.n	8007252 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2224      	movs	r2, #36	@ 0x24
 8007202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f812 	bl	800725c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007268:	2b00      	cmp	r3, #0
 800726a:	d108      	bne.n	800727e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800727c:	e031      	b.n	80072e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800727e:	2310      	movs	r3, #16
 8007280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007282:	2310      	movs	r3, #16
 8007284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	0e5b      	lsrs	r3, r3, #25
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	0f5b      	lsrs	r3, r3, #29
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	7b3a      	ldrb	r2, [r7, #12]
 80072aa:	4911      	ldr	r1, [pc, #68]	@ (80072f0 <UARTEx_SetNbDataToProcess+0x94>)
 80072ac:	5c8a      	ldrb	r2, [r1, r2]
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072b2:	7b3a      	ldrb	r2, [r7, #12]
 80072b4:	490f      	ldr	r1, [pc, #60]	@ (80072f4 <UARTEx_SetNbDataToProcess+0x98>)
 80072b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	7b7a      	ldrb	r2, [r7, #13]
 80072c8:	4909      	ldr	r1, [pc, #36]	@ (80072f0 <UARTEx_SetNbDataToProcess+0x94>)
 80072ca:	5c8a      	ldrb	r2, [r1, r2]
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072d0:	7b7a      	ldrb	r2, [r7, #13]
 80072d2:	4908      	ldr	r1, [pc, #32]	@ (80072f4 <UARTEx_SetNbDataToProcess+0x98>)
 80072d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	0800f284 	.word	0x0800f284
 80072f4:	0800f28c 	.word	0x0800f28c

080072f8 <__NVIC_SetPriority>:
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db0a      	blt.n	8007322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	490c      	ldr	r1, [pc, #48]	@ (8007344 <__NVIC_SetPriority+0x4c>)
 8007312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007316:	0112      	lsls	r2, r2, #4
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	440b      	add	r3, r1
 800731c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007320:	e00a      	b.n	8007338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	4908      	ldr	r1, [pc, #32]	@ (8007348 <__NVIC_SetPriority+0x50>)
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	3b04      	subs	r3, #4
 8007330:	0112      	lsls	r2, r2, #4
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	440b      	add	r3, r1
 8007336:	761a      	strb	r2, [r3, #24]
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	e000e100 	.word	0xe000e100
 8007348:	e000ed00 	.word	0xe000ed00

0800734c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <SysTick_Handler+0x1c>)
 8007352:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007354:	f002 f894 	bl	8009480 <xTaskGetSchedulerState>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d001      	beq.n	8007362 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800735e:	f002 ff8b 	bl	800a278 <xPortSysTickHandler>
  }
}
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000e010 	.word	0xe000e010

0800736c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007370:	2100      	movs	r1, #0
 8007372:	f06f 0004 	mvn.w	r0, #4
 8007376:	f7ff ffbf 	bl	80072f8 <__NVIC_SetPriority>
#endif
}
 800737a:	bf00      	nop
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	603b      	str	r3, [r7, #0]
  return(result);
 800738c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e00c      	b.n	80073b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <osKernelInitialize+0x44>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073a2:	4b08      	ldr	r3, [pc, #32]	@ (80073c4 <osKernelInitialize+0x44>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e002      	b.n	80073b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073b4:	687b      	ldr	r3, [r7, #4]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	24000348 	.word	0x24000348

080073c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	603b      	str	r3, [r7, #0]
  return(result);
 80073d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80073da:	f06f 0305 	mvn.w	r3, #5
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e010      	b.n	8007404 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <osKernelStart+0x48>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d109      	bne.n	80073fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073ea:	f7ff ffbf 	bl	800736c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073ee:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <osKernelStart+0x48>)
 80073f0:	2202      	movs	r2, #2
 80073f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073f4:	f001 fb28 	bl	8008a48 <vTaskStartScheduler>
      stat = osOK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	e002      	b.n	8007404 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007404:	687b      	ldr	r3, [r7, #4]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	24000348 	.word	0x24000348

08007414 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	@ 0x38
 8007418:	af04      	add	r7, sp, #16
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007424:	f3ef 8305 	mrs	r3, IPSR
 8007428:	617b      	str	r3, [r7, #20]
  return(result);
 800742a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800742c:	2b00      	cmp	r3, #0
 800742e:	d17e      	bne.n	800752e <osThreadNew+0x11a>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d07b      	beq.n	800752e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800743a:	2318      	movs	r3, #24
 800743c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d045      	beq.n	80074da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <osThreadNew+0x48>
        name = attr->name;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <osThreadNew+0x6e>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b38      	cmp	r3, #56	@ 0x38
 8007474:	d805      	bhi.n	8007482 <osThreadNew+0x6e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <osThreadNew+0x72>
        return (NULL);
 8007482:	2300      	movs	r3, #0
 8007484:	e054      	b.n	8007530 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00e      	beq.n	80074bc <osThreadNew+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80074a4:	d90a      	bls.n	80074bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <osThreadNew+0xa8>
        mem = 1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e010      	b.n	80074de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10c      	bne.n	80074de <osThreadNew+0xca>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <osThreadNew+0xca>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <osThreadNew+0xca>
          mem = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	e001      	b.n	80074de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d110      	bne.n	8007506 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f001 f8b0 	bl	8008660 <xTaskCreateStatic>
 8007500:	4603      	mov	r3, r0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e013      	b.n	800752e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f001 f8fe 	bl	8008720 <xTaskCreate>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d001      	beq.n	800752e <osThreadNew+0x11a>
            hTask = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800752e:	693b      	ldr	r3, [r7, #16]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	@ 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007540:	f3ef 8305 	mrs	r3, IPSR
 8007544:	60bb      	str	r3, [r7, #8]
  return(result);
 8007546:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <osDelay+0x1c>
    stat = osErrorISR;
 800754c:	f06f 0305 	mvn.w	r3, #5
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	e007      	b.n	8007564 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osDelay+0x2c>
      vTaskDelay(ticks);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fa3c 	bl	80089dc <vTaskDelay>
    }
  }

  return (stat);
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a07      	ldr	r2, [pc, #28]	@ (800759c <vApplicationGetIdleTaskMemory+0x2c>)
 8007580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a06      	ldr	r2, [pc, #24]	@ (80075a0 <vApplicationGetIdleTaskMemory+0x30>)
 8007586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	@ 0x80
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	2400034c 	.word	0x2400034c
 80075a0:	240003f4 	.word	0x240003f4

080075a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a07      	ldr	r2, [pc, #28]	@ (80075d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80075b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4a06      	ldr	r2, [pc, #24]	@ (80075d4 <vApplicationGetTimerTaskMemory+0x30>)
 80075ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	240005f4 	.word	0x240005f4
 80075d4:	2400069c 	.word	0x2400069c

080075d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f103 0208 	add.w	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f103 0208 	add.w	r2, r3, #8
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f103 0208 	add.w	r2, r3, #8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d103      	bne.n	800769a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e00c      	b.n	80076b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3308      	adds	r3, #8
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e002      	b.n	80076a8 <vListInsert+0x2e>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d2f6      	bcs.n	80076a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6892      	ldr	r2, [r2, #8]
 8007702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6852      	ldr	r2, [r2, #4]
 800770c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d103      	bne.n	8007720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <xQueueGenericReset+0x2c>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60bb      	str	r3, [r7, #8]
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	e7fd      	b.n	8007768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800776c:	f002 fcf4 	bl	800a158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007778:	68f9      	ldr	r1, [r7, #12]
 800777a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800777c:	fb01 f303 	mul.w	r3, r1, r3
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779c:	3b01      	subs	r3, #1
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	441a      	add	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	22ff      	movs	r2, #255	@ 0xff
 80077b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	22ff      	movs	r2, #255	@ 0xff
 80077b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d114      	bne.n	80077ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01a      	beq.n	8007800 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3310      	adds	r3, #16
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fc38 	bl	8009044 <xTaskRemoveFromEventList>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d012      	beq.n	8007800 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077da:	4b0d      	ldr	r3, [pc, #52]	@ (8007810 <xQueueGenericReset+0xd0>)
 80077dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	e009      	b.n	8007800 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3310      	adds	r3, #16
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fef1 	bl	80075d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3324      	adds	r3, #36	@ 0x24
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff feec 	bl	80075d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007800:	f002 fcdc 	bl	800a1bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007804:	2301      	movs	r3, #1
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08e      	sub	sp, #56	@ 0x38
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <xQueueGenericCreateStatic+0x56>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <xQueueGenericCreateStatic+0x5a>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <xQueueGenericCreateStatic+0x5c>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	623b      	str	r3, [r7, #32]
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <xQueueGenericCreateStatic+0x84>
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <xQueueGenericCreateStatic+0x88>
 8007898:	2301      	movs	r3, #1
 800789a:	e000      	b.n	800789e <xQueueGenericCreateStatic+0x8a>
 800789c:	2300      	movs	r3, #0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61fb      	str	r3, [r7, #28]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078ba:	2350      	movs	r3, #80	@ 0x50
 80078bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b50      	cmp	r3, #80	@ 0x50
 80078c2:	d00b      	beq.n	80078dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	61bb      	str	r3, [r7, #24]
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	e7fd      	b.n	80078d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80078e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80078f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f840 	bl	8007984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007906:	4618      	mov	r0, r3
 8007908:	3730      	adds	r7, #48	@ 0x30
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800790e:	b580      	push	{r7, lr}
 8007910:	b08a      	sub	sp, #40	@ 0x28
 8007912:	af02      	add	r7, sp, #8
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	4613      	mov	r3, r2
 800791a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	613b      	str	r3, [r7, #16]
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	3350      	adds	r3, #80	@ 0x50
 8007948:	4618      	mov	r0, r3
 800794a:	f002 fe0b 	bl	800a564 <pvPortMalloc>
 800794e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	3350      	adds	r3, #80	@ 0x50
 800795e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007968:	79fa      	ldrb	r2, [r7, #7]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	4613      	mov	r3, r2
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f805 	bl	8007984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800797a:	69bb      	ldr	r3, [r7, #24]
	}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d103      	bne.n	80079a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e002      	b.n	80079a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079b2:	2101      	movs	r1, #1
 80079b4:	69b8      	ldr	r0, [r7, #24]
 80079b6:	f7ff fec3 	bl	8007740 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b086      	sub	sp, #24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	613b      	str	r3, [r7, #16]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d90b      	bls.n	8007a12 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60fb      	str	r3, [r7, #12]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a12:	2202      	movs	r2, #2
 8007a14:	2100      	movs	r1, #0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff ff79 	bl	800790e <xQueueGenericCreate>
 8007a1c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a2a:	697b      	ldr	r3, [r7, #20]
	}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08e      	sub	sp, #56	@ 0x38
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a42:	2300      	movs	r3, #0
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <xQueueGenericSend+0x34>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSend+0x42>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <xQueueGenericSend+0x46>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericSend+0x48>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <xQueueGenericSend+0x64>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d103      	bne.n	8007aa6 <xQueueGenericSend+0x72>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <xQueueGenericSend+0x76>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGenericSend+0x78>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <xQueueGenericSend+0x94>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	623b      	str	r3, [r7, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ac8:	f001 fcda 	bl	8009480 <xTaskGetSchedulerState>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <xQueueGenericSend+0xa4>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <xQueueGenericSend+0xa8>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <xQueueGenericSend+0xaa>
 8007adc:	2300      	movs	r3, #0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <xQueueGenericSend+0xc6>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	61fb      	str	r3, [r7, #28]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007afa:	f002 fb2d 	bl	800a158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <xQueueGenericSend+0xdc>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d129      	bne.n	8007b64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b16:	f000 fc0a 	bl	800832e <prvCopyDataToQueue>
 8007b1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b26:	3324      	adds	r3, #36	@ 0x24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 fa8b 	bl	8009044 <xTaskRemoveFromEventList>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d013      	beq.n	8007b5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b34:	4b3f      	ldr	r3, [pc, #252]	@ (8007c34 <xQueueGenericSend+0x200>)
 8007b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	e00a      	b.n	8007b5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b4c:	4b39      	ldr	r3, [pc, #228]	@ (8007c34 <xQueueGenericSend+0x200>)
 8007b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b5c:	f002 fb2e 	bl	800a1bc <vPortExitCritical>
				return pdPASS;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e063      	b.n	8007c2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b6a:	f002 fb27 	bl	800a1bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e05c      	b.n	8007c2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b78:	f107 0314 	add.w	r3, r7, #20
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 fac7 	bl	8009110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b82:	2301      	movs	r3, #1
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b86:	f002 fb19 	bl	800a1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b8a:	f000 ffcd 	bl	8008b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b8e:	f002 fae3 	bl	800a158 <vPortEnterCritical>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d103      	bne.n	8007ba8 <xQueueGenericSend+0x174>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bae:	b25b      	sxtb	r3, r3
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d103      	bne.n	8007bbe <xQueueGenericSend+0x18a>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bbe:	f002 fafd 	bl	800a1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bc2:	1d3a      	adds	r2, r7, #4
 8007bc4:	f107 0314 	add.w	r3, r7, #20
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 fab6 	bl	800913c <xTaskCheckForTimeOut>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d124      	bne.n	8007c20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bd8:	f000 fca1 	bl	800851e <prvIsQueueFull>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d018      	beq.n	8007c14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	3310      	adds	r3, #16
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 f9d8 	bl	8008fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bf2:	f000 fc2c 	bl	800844e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bf6:	f000 ffdd 	bl	8008bb4 <xTaskResumeAll>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f47f af7c 	bne.w	8007afa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <xQueueGenericSend+0x200>)
 8007c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	e772      	b.n	8007afa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c16:	f000 fc1a 	bl	800844e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c1a:	f000 ffcb 	bl	8008bb4 <xTaskResumeAll>
 8007c1e:	e76c      	b.n	8007afa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c22:	f000 fc14 	bl	800844e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c26:	f000 ffc5 	bl	8008bb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3738      	adds	r7, #56	@ 0x38
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b090      	sub	sp, #64	@ 0x40
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSendFromISR+0x3e>
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSendFromISR+0x42>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSendFromISR+0x44>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d103      	bne.n	8007ca6 <xQueueGenericSendFromISR+0x6e>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <xQueueGenericSendFromISR+0x72>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueGenericSendFromISR+0x74>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	623b      	str	r3, [r7, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cc8:	f002 fc0a 	bl	800a4e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	61fa      	str	r2, [r7, #28]
 8007ce2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d302      	bcc.n	8007cfa <xQueueGenericSendFromISR+0xc2>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d12f      	bne.n	8007d5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d10:	f000 fb0d 	bl	800832e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d112      	bne.n	8007d44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d016      	beq.n	8007d54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d28:	3324      	adds	r3, #36	@ 0x24
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 f98a 	bl	8009044 <xTaskRemoveFromEventList>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00e      	beq.n	8007d54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e007      	b.n	8007d54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d48:	3301      	adds	r3, #1
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	b25a      	sxtb	r2, r3
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d54:	2301      	movs	r3, #1
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d58:	e001      	b.n	8007d5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3740      	adds	r7, #64	@ 0x40
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08e      	sub	sp, #56	@ 0x38
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10b      	bne.n	8007da0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	623b      	str	r3, [r7, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	bf00      	nop
 8007d9e:	e7fd      	b.n	8007d9c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	61fb      	str	r3, [r7, #28]
}
 8007dba:	bf00      	nop
 8007dbc:	bf00      	nop
 8007dbe:	e7fd      	b.n	8007dbc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <xQueueGiveFromISR+0x5c>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <xQueueGiveFromISR+0x60>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <xQueueGiveFromISR+0x62>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	61bb      	str	r3, [r7, #24]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007df2:	f002 fb75 	bl	800a4e0 <vPortValidateInterruptPriority>
	__asm volatile
 8007df6:	f3ef 8211 	mrs	r2, BASEPRI
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	617a      	str	r2, [r7, #20]
 8007e0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d22b      	bcs.n	8007e7a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3c:	d112      	bne.n	8007e64 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d016      	beq.n	8007e74 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	3324      	adds	r3, #36	@ 0x24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 f8fa 	bl	8009044 <xTaskRemoveFromEventList>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00e      	beq.n	8007e74 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	e007      	b.n	8007e74 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e68:	3301      	adds	r3, #1
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	b25a      	sxtb	r2, r3
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e74:	2301      	movs	r3, #1
 8007e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e78:	e001      	b.n	8007e7e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f383 8811 	msr	BASEPRI, r3
}
 8007e88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3738      	adds	r7, #56	@ 0x38
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08c      	sub	sp, #48	@ 0x30
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <xQueueReceive+0x32>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	623b      	str	r3, [r7, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	e7fd      	b.n	8007ec2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <xQueueReceive+0x40>
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <xQueueReceive+0x44>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <xQueueReceive+0x46>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <xQueueReceive+0x62>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	61fb      	str	r3, [r7, #28]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef6:	f001 fac3 	bl	8009480 <xTaskGetSchedulerState>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <xQueueReceive+0x72>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <xQueueReceive+0x76>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueReceive+0x78>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <xQueueReceive+0x94>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61bb      	str	r3, [r7, #24]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f28:	f002 f916 	bl	800a158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01f      	beq.n	8007f78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f3c:	f000 fa61 	bl	8008402 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	1e5a      	subs	r2, r3, #1
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00f      	beq.n	8007f70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f52:	3310      	adds	r3, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 f875 	bl	8009044 <xTaskRemoveFromEventList>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f60:	4b3c      	ldr	r3, [pc, #240]	@ (8008054 <xQueueReceive+0x1c0>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f70:	f002 f924 	bl	800a1bc <vPortExitCritical>
				return pdPASS;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e069      	b.n	800804c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7e:	f002 f91d 	bl	800a1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e062      	b.n	800804c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f8c:	f107 0310 	add.w	r3, r7, #16
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 f8bd 	bl	8009110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f9a:	f002 f90f 	bl	800a1bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9e:	f000 fdc3 	bl	8008b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fa2:	f002 f8d9 	bl	800a158 <vPortEnterCritical>
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d103      	bne.n	8007fbc <xQueueReceive+0x128>
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d103      	bne.n	8007fd2 <xQueueReceive+0x13e>
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fd2:	f002 f8f3 	bl	800a1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd6:	1d3a      	adds	r2, r7, #4
 8007fd8:	f107 0310 	add.w	r3, r7, #16
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f8ac 	bl	800913c <xTaskCheckForTimeOut>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d123      	bne.n	8008032 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fec:	f000 fa81 	bl	80084f2 <prvIsQueueEmpty>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	3324      	adds	r3, #36	@ 0x24
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ffce 	bl	8008fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008006:	f000 fa22 	bl	800844e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800800a:	f000 fdd3 	bl	8008bb4 <xTaskResumeAll>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d189      	bne.n	8007f28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008014:	4b0f      	ldr	r3, [pc, #60]	@ (8008054 <xQueueReceive+0x1c0>)
 8008016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	e780      	b.n	8007f28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008028:	f000 fa11 	bl	800844e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800802c:	f000 fdc2 	bl	8008bb4 <xTaskResumeAll>
 8008030:	e77a      	b.n	8007f28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008034:	f000 fa0b 	bl	800844e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008038:	f000 fdbc 	bl	8008bb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800803c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803e:	f000 fa58 	bl	80084f2 <prvIsQueueEmpty>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	f43f af6f 	beq.w	8007f28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800804a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800804c:	4618      	mov	r0, r3
 800804e:	3730      	adds	r7, #48	@ 0x30
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08e      	sub	sp, #56	@ 0x38
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008062:	2300      	movs	r3, #0
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800806a:	2300      	movs	r3, #0
 800806c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10b      	bne.n	800808c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	623b      	str	r3, [r7, #32]
}
 8008086:	bf00      	nop
 8008088:	bf00      	nop
 800808a:	e7fd      	b.n	8008088 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	61fb      	str	r3, [r7, #28]
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ac:	f001 f9e8 	bl	8009480 <xTaskGetSchedulerState>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <xQueueSemaphoreTake+0x64>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <xQueueSemaphoreTake+0x68>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <xQueueSemaphoreTake+0x6a>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	61bb      	str	r3, [r7, #24]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080de:	f002 f83b 	bl	800a158 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d024      	beq.n	8008138 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	1e5a      	subs	r2, r3, #1
 80080f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d104      	bne.n	8008108 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080fe:	f001 fb39 	bl	8009774 <pvTaskIncrementMutexHeldCount>
 8008102:	4602      	mov	r2, r0
 8008104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008106:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	3310      	adds	r3, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f000 ff95 	bl	8009044 <xTaskRemoveFromEventList>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008120:	4b54      	ldr	r3, [pc, #336]	@ (8008274 <xQueueSemaphoreTake+0x21c>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008130:	f002 f844 	bl	800a1bc <vPortExitCritical>
				return pdPASS;
 8008134:	2301      	movs	r3, #1
 8008136:	e098      	b.n	800826a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d112      	bne.n	8008164 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	617b      	str	r3, [r7, #20]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800815c:	f002 f82e 	bl	800a1bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008160:	2300      	movs	r3, #0
 8008162:	e082      	b.n	800826a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800816a:	f107 030c 	add.w	r3, r7, #12
 800816e:	4618      	mov	r0, r3
 8008170:	f000 ffce 	bl	8009110 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008178:	f002 f820 	bl	800a1bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800817c:	f000 fcd4 	bl	8008b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008180:	f001 ffea 	bl	800a158 <vPortEnterCritical>
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800818a:	b25b      	sxtb	r3, r3
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d103      	bne.n	800819a <xQueueSemaphoreTake+0x142>
 8008192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	d103      	bne.n	80081b0 <xQueueSemaphoreTake+0x158>
 80081a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081b0:	f002 f804 	bl	800a1bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081b4:	463a      	mov	r2, r7
 80081b6:	f107 030c 	add.w	r3, r7, #12
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 ffbd 	bl	800913c <xTaskCheckForTimeOut>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d132      	bne.n	800822e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081ca:	f000 f992 	bl	80084f2 <prvIsQueueEmpty>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d026      	beq.n	8008222 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80081dc:	f001 ffbc 	bl	800a158 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 f969 	bl	80094bc <xTaskPriorityInherit>
 80081ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80081ec:	f001 ffe6 	bl	800a1bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	3324      	adds	r3, #36	@ 0x24
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fed1 	bl	8008fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008200:	f000 f925 	bl	800844e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008204:	f000 fcd6 	bl	8008bb4 <xTaskResumeAll>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	f47f af67 	bne.w	80080de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008210:	4b18      	ldr	r3, [pc, #96]	@ (8008274 <xQueueSemaphoreTake+0x21c>)
 8008212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	e75d      	b.n	80080de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008222:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008224:	f000 f913 	bl	800844e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008228:	f000 fcc4 	bl	8008bb4 <xTaskResumeAll>
 800822c:	e757      	b.n	80080de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800822e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008230:	f000 f90d 	bl	800844e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008234:	f000 fcbe 	bl	8008bb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008238:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800823a:	f000 f95a 	bl	80084f2 <prvIsQueueEmpty>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	f43f af4c 	beq.w	80080de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00d      	beq.n	8008268 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800824c:	f001 ff84 	bl	800a158 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008250:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008252:	f000 f854 	bl	80082fe <prvGetDisinheritPriorityAfterTimeout>
 8008256:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fa04 	bl	800966c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008264:	f001 ffaa 	bl	800a1bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008268:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800826a:	4618      	mov	r0, r3
 800826c:	3738      	adds	r7, #56	@ 0x38
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	e7fd      	b.n	800829a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800829e:	f001 ff5b 	bl	800a158 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80082a8:	f001 ff88 	bl	800a1bc <vPortExitCritical>

	return uxReturn;
 80082ac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <vQueueDelete+0x2a>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60bb      	str	r3, [r7, #8]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f95f 	bl	80085a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f002 fa05 	bl	800a700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	2b00      	cmp	r3, #0
 800830c:	d006      	beq.n	800831c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	e001      	b.n	8008320 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008320:	68fb      	ldr	r3, [r7, #12]
	}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b086      	sub	sp, #24
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10d      	bne.n	8008368 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d14d      	bne.n	80083f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f917 	bl	800958c <xTaskPriorityDisinherit>
 800835e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
 8008366:	e043      	b.n	80083f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d119      	bne.n	80083a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6858      	ldr	r0, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008376:	461a      	mov	r2, r3
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	f003 fd8e 	bl	800be9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008386:	441a      	add	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	429a      	cmp	r2, r3
 8008396:	d32b      	bcc.n	80083f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	605a      	str	r2, [r3, #4]
 80083a0:	e026      	b.n	80083f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68d8      	ldr	r0, [r3, #12]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	461a      	mov	r2, r3
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	f003 fd74 	bl	800be9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	425b      	negs	r3, r3
 80083bc:	441a      	add	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d207      	bcs.n	80083de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	425b      	negs	r3, r3
 80083d8:	441a      	add	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d105      	bne.n	80083f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80083f8:	697b      	ldr	r3, [r7, #20]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d018      	beq.n	8008446 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841c:	441a      	add	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	429a      	cmp	r2, r3
 800842c:	d303      	bcc.n	8008436 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68d9      	ldr	r1, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843e:	461a      	mov	r2, r3
 8008440:	6838      	ldr	r0, [r7, #0]
 8008442:	f003 fd2a 	bl	800be9a <memcpy>
	}
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008456:	f001 fe7f 	bl	800a158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008460:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008462:	e011      	b.n	8008488 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d012      	beq.n	8008492 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3324      	adds	r3, #36	@ 0x24
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fde7 	bl	8009044 <xTaskRemoveFromEventList>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800847c:	f000 fec2 	bl	8009204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	3b01      	subs	r3, #1
 8008484:	b2db      	uxtb	r3, r3
 8008486:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800848c:	2b00      	cmp	r3, #0
 800848e:	dce9      	bgt.n	8008464 <prvUnlockQueue+0x16>
 8008490:	e000      	b.n	8008494 <prvUnlockQueue+0x46>
					break;
 8008492:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	22ff      	movs	r2, #255	@ 0xff
 8008498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800849c:	f001 fe8e 	bl	800a1bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084a0:	f001 fe5a 	bl	800a158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ac:	e011      	b.n	80084d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d012      	beq.n	80084dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3310      	adds	r3, #16
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fdc2 	bl	8009044 <xTaskRemoveFromEventList>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084c6:	f000 fe9d 	bl	8009204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	dce9      	bgt.n	80084ae <prvUnlockQueue+0x60>
 80084da:	e000      	b.n	80084de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	22ff      	movs	r2, #255	@ 0xff
 80084e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80084e6:	f001 fe69 	bl	800a1bc <vPortExitCritical>
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084fa:	f001 fe2d 	bl	800a158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	e001      	b.n	8008510 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008510:	f001 fe54 	bl	800a1bc <vPortExitCritical>

	return xReturn;
 8008514:	68fb      	ldr	r3, [r7, #12]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008526:	f001 fe17 	bl	800a158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008532:	429a      	cmp	r2, r3
 8008534:	d102      	bne.n	800853c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008536:	2301      	movs	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	e001      	b.n	8008540 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008540:	f001 fe3c 	bl	800a1bc <vPortExitCritical>

	return xReturn;
 8008544:	68fb      	ldr	r3, [r7, #12]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e014      	b.n	800858a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008560:	4a0f      	ldr	r2, [pc, #60]	@ (80085a0 <vQueueAddToRegistry+0x50>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10b      	bne.n	8008584 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800856c:	490c      	ldr	r1, [pc, #48]	@ (80085a0 <vQueueAddToRegistry+0x50>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008576:	4a0a      	ldr	r2, [pc, #40]	@ (80085a0 <vQueueAddToRegistry+0x50>)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	4413      	add	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008582:	e006      	b.n	8008592 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3301      	adds	r3, #1
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b07      	cmp	r3, #7
 800858e:	d9e7      	bls.n	8008560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	24000a9c 	.word	0x24000a9c

080085a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e016      	b.n	80085e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80085b2:	4a10      	ldr	r2, [pc, #64]	@ (80085f4 <vQueueUnregisterQueue+0x50>)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	4413      	add	r3, r2
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d10b      	bne.n	80085da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80085c2:	4a0c      	ldr	r2, [pc, #48]	@ (80085f4 <vQueueUnregisterQueue+0x50>)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2100      	movs	r1, #0
 80085c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80085cc:	4a09      	ldr	r2, [pc, #36]	@ (80085f4 <vQueueUnregisterQueue+0x50>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
				break;
 80085d8:	e006      	b.n	80085e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b07      	cmp	r3, #7
 80085e4:	d9e5      	bls.n	80085b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	24000a9c 	.word	0x24000a9c

080085f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008608:	f001 fda6 	bl	800a158 <vPortEnterCritical>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008612:	b25b      	sxtb	r3, r3
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d103      	bne.n	8008622 <vQueueWaitForMessageRestricted+0x2a>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008628:	b25b      	sxtb	r3, r3
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d103      	bne.n	8008638 <vQueueWaitForMessageRestricted+0x40>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008638:	f001 fdc0 	bl	800a1bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	3324      	adds	r3, #36	@ 0x24
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fccd 	bl	8008fec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008652:	6978      	ldr	r0, [r7, #20]
 8008654:	f7ff fefb 	bl	800844e <prvUnlockQueue>
	}
 8008658:	bf00      	nop
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08e      	sub	sp, #56	@ 0x38
 8008664:	af04      	add	r7, sp, #16
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800866e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	623b      	str	r3, [r7, #32]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	61fb      	str	r3, [r7, #28]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086aa:	23a8      	movs	r3, #168	@ 0xa8
 80086ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80086b2:	d00b      	beq.n	80086cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	61bb      	str	r3, [r7, #24]
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	e7fd      	b.n	80086c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01e      	beq.n	8008712 <xTaskCreateStatic+0xb2>
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01b      	beq.n	8008712 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ec:	2300      	movs	r3, #0
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	9302      	str	r3, [sp, #8]
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 f851 	bl	80087ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800870a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800870c:	f000 f8f6 	bl	80088fc <prvAddNewTaskToReadyList>
 8008710:	e001      	b.n	8008716 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008716:	697b      	ldr	r3, [r7, #20]
	}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	@ 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08c      	sub	sp, #48	@ 0x30
 8008724:	af04      	add	r7, sp, #16
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4618      	mov	r0, r3
 8008736:	f001 ff15 	bl	800a564 <pvPortMalloc>
 800873a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008742:	20a8      	movs	r0, #168	@ 0xa8
 8008744:	f001 ff0e 	bl	800a564 <pvPortMalloc>
 8008748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	631a      	str	r2, [r3, #48]	@ 0x30
 8008756:	e005      	b.n	8008764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008758:	6978      	ldr	r0, [r7, #20]
 800875a:	f001 ffd1 	bl	800a700 <vPortFree>
 800875e:	e001      	b.n	8008764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d017      	beq.n	800879a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008772:	88fa      	ldrh	r2, [r7, #6]
 8008774:	2300      	movs	r3, #0
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	9302      	str	r3, [sp, #8]
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f80f 	bl	80087ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800878e:	69f8      	ldr	r0, [r7, #28]
 8008790:	f000 f8b4 	bl	80088fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e002      	b.n	80087a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087a0:	69bb      	ldr	r3, [r7, #24]
	}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	461a      	mov	r2, r3
 80087c4:	21a5      	movs	r1, #165	@ 0xa5
 80087c6:	f003 fa3f 	bl	800bc48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80087d4:	440b      	add	r3, r1
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	f023 0307 	bic.w	r3, r3, #7
 80087e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617b      	str	r3, [r7, #20]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01f      	beq.n	800884c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800880c:	2300      	movs	r3, #0
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	e012      	b.n	8008838 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	7819      	ldrb	r1, [r3, #0]
 800881a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	4413      	add	r3, r2
 8008820:	3334      	adds	r3, #52	@ 0x34
 8008822:	460a      	mov	r2, r1
 8008824:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	3301      	adds	r3, #1
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d9e9      	bls.n	8008812 <prvInitialiseNewTask+0x66>
 800883e:	e000      	b.n	8008842 <prvInitialiseNewTask+0x96>
			{
				break;
 8008840:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800884a:	e003      	b.n	8008854 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	2b37      	cmp	r3, #55	@ 0x37
 8008858:	d901      	bls.n	800885e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800885a:	2337      	movs	r3, #55	@ 0x37
 800885c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008862:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008868:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2200      	movs	r2, #0
 800886e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fecf 	bl	8007618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	3318      	adds	r3, #24
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe feca 	bl	8007618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008898:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	3354      	adds	r3, #84	@ 0x54
 80088ae:	224c      	movs	r2, #76	@ 0x4c
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f003 f9c8 	bl	800bc48 <memset>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	4a0d      	ldr	r2, [pc, #52]	@ (80088f0 <prvInitialiseNewTask+0x144>)
 80088bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	4a0c      	ldr	r2, [pc, #48]	@ (80088f4 <prvInitialiseNewTask+0x148>)
 80088c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <prvInitialiseNewTask+0x14c>)
 80088c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	69b8      	ldr	r0, [r7, #24]
 80088d0:	f001 fb12 	bl	8009ef8 <pxPortInitialiseStack>
 80088d4:	4602      	mov	r2, r0
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088e6:	bf00      	nop
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	24004d48 	.word	0x24004d48
 80088f4:	24004db0 	.word	0x24004db0
 80088f8:	24004e18 	.word	0x24004e18

080088fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008904:	f001 fc28 	bl	800a158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008908:	4b2d      	ldr	r3, [pc, #180]	@ (80089c0 <prvAddNewTaskToReadyList+0xc4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <prvAddNewTaskToReadyList+0xc4>)
 8008910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008912:	4b2c      	ldr	r3, [pc, #176]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800891a:	4a2a      	ldr	r2, [pc, #168]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008920:	4b27      	ldr	r3, [pc, #156]	@ (80089c0 <prvAddNewTaskToReadyList+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d110      	bne.n	800894a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008928:	f000 fce6 	bl	80092f8 <prvInitialiseTaskLists>
 800892c:	e00d      	b.n	800894a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800892e:	4b26      	ldr	r3, [pc, #152]	@ (80089c8 <prvAddNewTaskToReadyList+0xcc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008936:	4b23      	ldr	r3, [pc, #140]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	429a      	cmp	r2, r3
 8008942:	d802      	bhi.n	800894a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008944:	4a1f      	ldr	r2, [pc, #124]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800894a:	4b20      	ldr	r3, [pc, #128]	@ (80089cc <prvAddNewTaskToReadyList+0xd0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	4a1e      	ldr	r2, [pc, #120]	@ (80089cc <prvAddNewTaskToReadyList+0xd0>)
 8008952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008954:	4b1d      	ldr	r3, [pc, #116]	@ (80089cc <prvAddNewTaskToReadyList+0xd0>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008960:	4b1b      	ldr	r3, [pc, #108]	@ (80089d0 <prvAddNewTaskToReadyList+0xd4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d903      	bls.n	8008970 <prvAddNewTaskToReadyList+0x74>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <prvAddNewTaskToReadyList+0xd4>)
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4a15      	ldr	r2, [pc, #84]	@ (80089d4 <prvAddNewTaskToReadyList+0xd8>)
 800897e:	441a      	add	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fe fe53 	bl	8007632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800898c:	f001 fc16 	bl	800a1bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008990:	4b0d      	ldr	r3, [pc, #52]	@ (80089c8 <prvAddNewTaskToReadyList+0xcc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00e      	beq.n	80089b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <prvAddNewTaskToReadyList+0xc8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d207      	bcs.n	80089b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089a6:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <prvAddNewTaskToReadyList+0xdc>)
 80089a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	24000fb0 	.word	0x24000fb0
 80089c4:	24000adc 	.word	0x24000adc
 80089c8:	24000fbc 	.word	0x24000fbc
 80089cc:	24000fcc 	.word	0x24000fcc
 80089d0:	24000fb8 	.word	0x24000fb8
 80089d4:	24000ae0 	.word	0x24000ae0
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d018      	beq.n	8008a20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089ee:	4b14      	ldr	r3, [pc, #80]	@ (8008a40 <vTaskDelay+0x64>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <vTaskDelay+0x32>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	bf00      	nop
 8008a0c:	e7fd      	b.n	8008a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a0e:	f000 f88b 	bl	8008b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fec1 	bl	800979c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a1a:	f000 f8cb 	bl	8008bb4 <xTaskResumeAll>
 8008a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a26:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <vTaskDelay+0x68>)
 8008a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	24000fd8 	.word	0x24000fd8
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	@ 0x28
 8008a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a56:	463a      	mov	r2, r7
 8008a58:	1d39      	adds	r1, r7, #4
 8008a5a:	f107 0308 	add.w	r3, r7, #8
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fd86 	bl	8007570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	9202      	str	r2, [sp, #8]
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	2300      	movs	r3, #0
 8008a74:	460a      	mov	r2, r1
 8008a76:	4924      	ldr	r1, [pc, #144]	@ (8008b08 <vTaskStartScheduler+0xc0>)
 8008a78:	4824      	ldr	r0, [pc, #144]	@ (8008b0c <vTaskStartScheduler+0xc4>)
 8008a7a:	f7ff fdf1 	bl	8008660 <xTaskCreateStatic>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4a23      	ldr	r2, [pc, #140]	@ (8008b10 <vTaskStartScheduler+0xc8>)
 8008a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <vTaskStartScheduler+0xc8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e001      	b.n	8008a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d102      	bne.n	8008aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a9c:	f000 fed2 	bl	8009844 <xTimerCreateTimerTask>
 8008aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d11b      	bne.n	8008ae0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	613b      	str	r3, [r7, #16]
}
 8008aba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008abc:	4b15      	ldr	r3, [pc, #84]	@ (8008b14 <vTaskStartScheduler+0xcc>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3354      	adds	r3, #84	@ 0x54
 8008ac2:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <vTaskStartScheduler+0xd0>)
 8008ac4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac6:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <vTaskStartScheduler+0xd4>)
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8008acc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ace:	4b14      	ldr	r3, [pc, #80]	@ (8008b20 <vTaskStartScheduler+0xd8>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ad4:	4b13      	ldr	r3, [pc, #76]	@ (8008b24 <vTaskStartScheduler+0xdc>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ada:	f001 fa99 	bl	800a010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ade:	e00f      	b.n	8008b00 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d10b      	bne.n	8008b00 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	60fb      	str	r3, [r7, #12]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <vTaskStartScheduler+0xb4>
}
 8008b00:	bf00      	nop
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	0800f210 	.word	0x0800f210
 8008b0c:	0800921d 	.word	0x0800921d
 8008b10:	24000fd4 	.word	0x24000fd4
 8008b14:	24000adc 	.word	0x24000adc
 8008b18:	24000020 	.word	0x24000020
 8008b1c:	24000fd0 	.word	0x24000fd0
 8008b20:	24000fbc 	.word	0x24000fbc
 8008b24:	24000fb4 	.word	0x24000fb4

08008b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b2c:	4b04      	ldr	r3, [pc, #16]	@ (8008b40 <vTaskSuspendAll+0x18>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a03      	ldr	r2, [pc, #12]	@ (8008b40 <vTaskSuspendAll+0x18>)
 8008b34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b36:	bf00      	nop
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	24000fd8 	.word	0x24000fd8

08008b44 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008b4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ba0 <prvGetExpectedIdleTime+0x5c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008b56:	2301      	movs	r3, #1
 8008b58:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008b5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <prvGetExpectedIdleTime+0x60>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	607b      	str	r3, [r7, #4]
 8008b68:	e012      	b.n	8008b90 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba8 <prvGetExpectedIdleTime+0x64>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d902      	bls.n	8008b78 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	607b      	str	r3, [r7, #4]
 8008b76:	e00b      	b.n	8008b90 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	607b      	str	r3, [r7, #4]
 8008b82:	e005      	b.n	8008b90 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008b84:	4b09      	ldr	r3, [pc, #36]	@ (8008bac <prvGetExpectedIdleTime+0x68>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <prvGetExpectedIdleTime+0x6c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008b90:	687b      	ldr	r3, [r7, #4]
	}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	24000fb8 	.word	0x24000fb8
 8008ba4:	24000adc 	.word	0x24000adc
 8008ba8:	24000ae0 	.word	0x24000ae0
 8008bac:	24000fd0 	.word	0x24000fd0
 8008bb0:	24000fb4 	.word	0x24000fb4

08008bb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bc2:	4b42      	ldr	r3, [pc, #264]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	603b      	str	r3, [r7, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008be2:	f001 fab9 	bl	800a158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008be6:	4b39      	ldr	r3, [pc, #228]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	4a37      	ldr	r2, [pc, #220]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008bee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf0:	4b36      	ldr	r3, [pc, #216]	@ (8008ccc <xTaskResumeAll+0x118>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d162      	bne.n	8008cbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bf8:	4b35      	ldr	r3, [pc, #212]	@ (8008cd0 <xTaskResumeAll+0x11c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d05e      	beq.n	8008cbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c00:	e02f      	b.n	8008c62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c02:	4b34      	ldr	r3, [pc, #208]	@ (8008cd4 <xTaskResumeAll+0x120>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3318      	adds	r3, #24
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fd6c 	bl	80076ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fd67 	bl	80076ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd8 <xTaskResumeAll+0x124>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d903      	bls.n	8008c32 <xTaskResumeAll+0x7e>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd8 <xTaskResumeAll+0x124>)
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a27      	ldr	r2, [pc, #156]	@ (8008cdc <xTaskResumeAll+0x128>)
 8008c40:	441a      	add	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fe fcf2 	bl	8007632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c52:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <xTaskResumeAll+0x12c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d302      	bcc.n	8008c62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c5c:	4b21      	ldr	r3, [pc, #132]	@ (8008ce4 <xTaskResumeAll+0x130>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c62:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <xTaskResumeAll+0x120>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1cb      	bne.n	8008c02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c70:	f000 fbe6 	bl	8009440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c74:	4b1c      	ldr	r3, [pc, #112]	@ (8008ce8 <xTaskResumeAll+0x134>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c80:	f000 f86e 	bl	8008d60 <xTaskIncrementTick>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c8a:	4b16      	ldr	r3, [pc, #88]	@ (8008ce4 <xTaskResumeAll+0x130>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f1      	bne.n	8008c80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c9c:	4b12      	ldr	r3, [pc, #72]	@ (8008ce8 <xTaskResumeAll+0x134>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ca2:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <xTaskResumeAll+0x130>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008caa:	2301      	movs	r3, #1
 8008cac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cae:	4b0f      	ldr	r3, [pc, #60]	@ (8008cec <xTaskResumeAll+0x138>)
 8008cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cbe:	f001 fa7d 	bl	800a1bc <vPortExitCritical>

	return xAlreadyYielded;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	24000fd8 	.word	0x24000fd8
 8008cd0:	24000fb0 	.word	0x24000fb0
 8008cd4:	24000f70 	.word	0x24000f70
 8008cd8:	24000fb8 	.word	0x24000fb8
 8008cdc:	24000ae0 	.word	0x24000ae0
 8008ce0:	24000adc 	.word	0x24000adc
 8008ce4:	24000fc4 	.word	0x24000fc4
 8008ce8:	24000fc0 	.word	0x24000fc0
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cf6:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <xTaskGetTickCount+0x1c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cfc:	687b      	ldr	r3, [r7, #4]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	24000fb4 	.word	0x24000fb4

08008d10 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8008d18:	4b0f      	ldr	r3, [pc, #60]	@ (8008d58 <vTaskStepTick+0x48>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	441a      	add	r2, r3
 8008d20:	4b0e      	ldr	r3, [pc, #56]	@ (8008d5c <vTaskStepTick+0x4c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d90b      	bls.n	8008d40 <vTaskStepTick+0x30>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60fb      	str	r3, [r7, #12]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008d40:	4b05      	ldr	r3, [pc, #20]	@ (8008d58 <vTaskStepTick+0x48>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	4a03      	ldr	r2, [pc, #12]	@ (8008d58 <vTaskStepTick+0x48>)
 8008d4a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008d4c:	bf00      	nop
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	24000fb4 	.word	0x24000fb4
 8008d5c:	24000fd0 	.word	0x24000fd0

08008d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8008ea8 <xTaskIncrementTick+0x148>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f040 8090 	bne.w	8008e94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d74:	4b4d      	ldr	r3, [pc, #308]	@ (8008eac <xTaskIncrementTick+0x14c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8008eac <xTaskIncrementTick+0x14c>)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d121      	bne.n	8008dcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d88:	4b49      	ldr	r3, [pc, #292]	@ (8008eb0 <xTaskIncrementTick+0x150>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	603b      	str	r3, [r7, #0]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <xTaskIncrementTick+0x46>
 8008daa:	4b41      	ldr	r3, [pc, #260]	@ (8008eb0 <xTaskIncrementTick+0x150>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	4b40      	ldr	r3, [pc, #256]	@ (8008eb4 <xTaskIncrementTick+0x154>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a3e      	ldr	r2, [pc, #248]	@ (8008eb0 <xTaskIncrementTick+0x150>)
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	4a3e      	ldr	r2, [pc, #248]	@ (8008eb4 <xTaskIncrementTick+0x154>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8008eb8 <xTaskIncrementTick+0x158>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8008eb8 <xTaskIncrementTick+0x158>)
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	f000 fb3a 	bl	8009440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8008ebc <xTaskIncrementTick+0x15c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d349      	bcc.n	8008e6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dd6:	4b36      	ldr	r3, [pc, #216]	@ (8008eb0 <xTaskIncrementTick+0x150>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d104      	bne.n	8008dea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de0:	4b36      	ldr	r3, [pc, #216]	@ (8008ebc <xTaskIncrementTick+0x15c>)
 8008de2:	f04f 32ff 	mov.w	r2, #4294967295
 8008de6:	601a      	str	r2, [r3, #0]
					break;
 8008de8:	e03f      	b.n	8008e6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dea:	4b31      	ldr	r3, [pc, #196]	@ (8008eb0 <xTaskIncrementTick+0x150>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d203      	bcs.n	8008e0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e02:	4a2e      	ldr	r2, [pc, #184]	@ (8008ebc <xTaskIncrementTick+0x15c>)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e08:	e02f      	b.n	8008e6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fc6c 	bl	80076ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	3318      	adds	r3, #24
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fc63 	bl	80076ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2a:	4b25      	ldr	r3, [pc, #148]	@ (8008ec0 <xTaskIncrementTick+0x160>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d903      	bls.n	8008e3a <xTaskIncrementTick+0xda>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e36:	4a22      	ldr	r2, [pc, #136]	@ (8008ec0 <xTaskIncrementTick+0x160>)
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec4 <xTaskIncrementTick+0x164>)
 8008e48:	441a      	add	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f7fe fbee 	bl	8007632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec8 <xTaskIncrementTick+0x168>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d3b8      	bcc.n	8008dd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e68:	e7b5      	b.n	8008dd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e6a:	4b17      	ldr	r3, [pc, #92]	@ (8008ec8 <xTaskIncrementTick+0x168>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e70:	4914      	ldr	r1, [pc, #80]	@ (8008ec4 <xTaskIncrementTick+0x164>)
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d901      	bls.n	8008e86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e82:	2301      	movs	r3, #1
 8008e84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e86:	4b11      	ldr	r3, [pc, #68]	@ (8008ecc <xTaskIncrementTick+0x16c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d007      	beq.n	8008e9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	e004      	b.n	8008e9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e94:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed0 <xTaskIncrementTick+0x170>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8008ed0 <xTaskIncrementTick+0x170>)
 8008e9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e9e:	697b      	ldr	r3, [r7, #20]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	24000fd8 	.word	0x24000fd8
 8008eac:	24000fb4 	.word	0x24000fb4
 8008eb0:	24000f68 	.word	0x24000f68
 8008eb4:	24000f6c 	.word	0x24000f6c
 8008eb8:	24000fc8 	.word	0x24000fc8
 8008ebc:	24000fd0 	.word	0x24000fd0
 8008ec0:	24000fb8 	.word	0x24000fb8
 8008ec4:	24000ae0 	.word	0x24000ae0
 8008ec8:	24000adc 	.word	0x24000adc
 8008ecc:	24000fc4 	.word	0x24000fc4
 8008ed0:	24000fc0 	.word	0x24000fc0

08008ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008eda:	4b2b      	ldr	r3, [pc, #172]	@ (8008f88 <vTaskSwitchContext+0xb4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8008f8c <vTaskSwitchContext+0xb8>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ee8:	e047      	b.n	8008f7a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008eea:	4b28      	ldr	r3, [pc, #160]	@ (8008f8c <vTaskSwitchContext+0xb8>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef0:	4b27      	ldr	r3, [pc, #156]	@ (8008f90 <vTaskSwitchContext+0xbc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e011      	b.n	8008f1c <vTaskSwitchContext+0x48>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10b      	bne.n	8008f16 <vTaskSwitchContext+0x42>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <vTaskSwitchContext+0x3e>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	491d      	ldr	r1, [pc, #116]	@ (8008f94 <vTaskSwitchContext+0xc0>)
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0e3      	beq.n	8008ef8 <vTaskSwitchContext+0x24>
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4a16      	ldr	r2, [pc, #88]	@ (8008f94 <vTaskSwitchContext+0xc0>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	605a      	str	r2, [r3, #4]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	3308      	adds	r3, #8
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d104      	bne.n	8008f60 <vTaskSwitchContext+0x8c>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	605a      	str	r2, [r3, #4]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	4a0c      	ldr	r2, [pc, #48]	@ (8008f98 <vTaskSwitchContext+0xc4>)
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	4a09      	ldr	r2, [pc, #36]	@ (8008f90 <vTaskSwitchContext+0xbc>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f70:	4b09      	ldr	r3, [pc, #36]	@ (8008f98 <vTaskSwitchContext+0xc4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3354      	adds	r3, #84	@ 0x54
 8008f76:	4a09      	ldr	r2, [pc, #36]	@ (8008f9c <vTaskSwitchContext+0xc8>)
 8008f78:	6013      	str	r3, [r2, #0]
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	24000fd8 	.word	0x24000fd8
 8008f8c:	24000fc4 	.word	0x24000fc4
 8008f90:	24000fb8 	.word	0x24000fb8
 8008f94:	24000ae0 	.word	0x24000ae0
 8008f98:	24000adc 	.word	0x24000adc
 8008f9c:	24000020 	.word	0x24000020

08008fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10b      	bne.n	8008fc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	60fb      	str	r3, [r7, #12]
}
 8008fc2:	bf00      	nop
 8008fc4:	bf00      	nop
 8008fc6:	e7fd      	b.n	8008fc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fc8:	4b07      	ldr	r3, [pc, #28]	@ (8008fe8 <vTaskPlaceOnEventList+0x48>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3318      	adds	r3, #24
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7fe fb52 	bl	800767a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	6838      	ldr	r0, [r7, #0]
 8008fda:	f000 fbdf 	bl	800979c <prvAddCurrentTaskToDelayedList>
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	24000adc 	.word	0x24000adc

08008fec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10b      	bne.n	8009016 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	bf00      	nop
 8009014:	e7fd      	b.n	8009012 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009016:	4b0a      	ldr	r3, [pc, #40]	@ (8009040 <vTaskPlaceOnEventListRestricted+0x54>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3318      	adds	r3, #24
 800901c:	4619      	mov	r1, r3
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7fe fb07 	bl	8007632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800902a:	f04f 33ff 	mov.w	r3, #4294967295
 800902e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	68b8      	ldr	r0, [r7, #8]
 8009034:	f000 fbb2 	bl	800979c <prvAddCurrentTaskToDelayedList>
	}
 8009038:	bf00      	nop
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	24000adc 	.word	0x24000adc

08009044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	60fb      	str	r3, [r7, #12]
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	e7fd      	b.n	800906e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	3318      	adds	r3, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fb38 	bl	80076ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907c:	4b1e      	ldr	r3, [pc, #120]	@ (80090f8 <xTaskRemoveFromEventList+0xb4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d11f      	bne.n	80090c4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3304      	adds	r3, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fb2f 	bl	80076ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009092:	4b1a      	ldr	r3, [pc, #104]	@ (80090fc <xTaskRemoveFromEventList+0xb8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d903      	bls.n	80090a2 <xTaskRemoveFromEventList+0x5e>
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909e:	4a17      	ldr	r2, [pc, #92]	@ (80090fc <xTaskRemoveFromEventList+0xb8>)
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4a14      	ldr	r2, [pc, #80]	@ (8009100 <xTaskRemoveFromEventList+0xbc>)
 80090b0:	441a      	add	r2, r3
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fe faba 	bl	8007632 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80090be:	f000 f9bf 	bl	8009440 <prvResetNextTaskUnblockTime>
 80090c2:	e005      	b.n	80090d0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	3318      	adds	r3, #24
 80090c8:	4619      	mov	r1, r3
 80090ca:	480e      	ldr	r0, [pc, #56]	@ (8009104 <xTaskRemoveFromEventList+0xc0>)
 80090cc:	f7fe fab1 	bl	8007632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <xTaskRemoveFromEventList+0xc4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	429a      	cmp	r2, r3
 80090dc:	d905      	bls.n	80090ea <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090de:	2301      	movs	r3, #1
 80090e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090e2:	4b0a      	ldr	r3, [pc, #40]	@ (800910c <xTaskRemoveFromEventList+0xc8>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	e001      	b.n	80090ee <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090ee:	697b      	ldr	r3, [r7, #20]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	24000fd8 	.word	0x24000fd8
 80090fc:	24000fb8 	.word	0x24000fb8
 8009100:	24000ae0 	.word	0x24000ae0
 8009104:	24000f70 	.word	0x24000f70
 8009108:	24000adc 	.word	0x24000adc
 800910c:	24000fc4 	.word	0x24000fc4

08009110 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009118:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <vTaskInternalSetTimeOutState+0x24>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009120:	4b05      	ldr	r3, [pc, #20]	@ (8009138 <vTaskInternalSetTimeOutState+0x28>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	605a      	str	r2, [r3, #4]
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	24000fc8 	.word	0x24000fc8
 8009138:	24000fb4 	.word	0x24000fb4

0800913c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	613b      	str	r3, [r7, #16]
}
 800915e:	bf00      	nop
 8009160:	bf00      	nop
 8009162:	e7fd      	b.n	8009160 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10b      	bne.n	8009182 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	60fb      	str	r3, [r7, #12]
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	e7fd      	b.n	800917e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009182:	f000 ffe9 	bl	800a158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009186:	4b1d      	ldr	r3, [pc, #116]	@ (80091fc <xTaskCheckForTimeOut+0xc0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919e:	d102      	bne.n	80091a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	e023      	b.n	80091ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b15      	ldr	r3, [pc, #84]	@ (8009200 <xTaskCheckForTimeOut+0xc4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d007      	beq.n	80091c2 <xTaskCheckForTimeOut+0x86>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d302      	bcc.n	80091c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091bc:	2301      	movs	r3, #1
 80091be:	61fb      	str	r3, [r7, #28]
 80091c0:	e015      	b.n	80091ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d20b      	bcs.n	80091e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	1ad2      	subs	r2, r2, r3
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff ff99 	bl	8009110 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	e004      	b.n	80091ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091ea:	2301      	movs	r3, #1
 80091ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091ee:	f000 ffe5 	bl	800a1bc <vPortExitCritical>

	return xReturn;
 80091f2:	69fb      	ldr	r3, [r7, #28]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	24000fb4 	.word	0x24000fb4
 8009200:	24000fc8 	.word	0x24000fc8

08009204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009208:	4b03      	ldr	r3, [pc, #12]	@ (8009218 <vTaskMissedYield+0x14>)
 800920a:	2201      	movs	r2, #1
 800920c:	601a      	str	r2, [r3, #0]
}
 800920e:	bf00      	nop
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	24000fc4 	.word	0x24000fc4

0800921c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009224:	f000 f8a8 	bl	8009378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009228:	4b18      	ldr	r3, [pc, #96]	@ (800928c <prvIdleTask+0x70>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d907      	bls.n	8009240 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009230:	4b17      	ldr	r3, [pc, #92]	@ (8009290 <prvIdleTask+0x74>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009240:	f7ff fc80 	bl	8008b44 <prvGetExpectedIdleTime>
 8009244:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d9eb      	bls.n	8009224 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800924c:	f7ff fc6c 	bl	8008b28 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009250:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <prvIdleTask+0x78>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	4b10      	ldr	r3, [pc, #64]	@ (8009298 <prvIdleTask+0x7c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d20b      	bcs.n	8009274 <prvIdleTask+0x58>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60bb      	str	r3, [r7, #8]
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009274:	f7ff fc66 	bl	8008b44 <prvGetExpectedIdleTime>
 8009278:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d902      	bls.n	8009286 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 f81b 	bl	800a2bc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8009286:	f7ff fc95 	bl	8008bb4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800928a:	e7cb      	b.n	8009224 <prvIdleTask+0x8>
 800928c:	24000ae0 	.word	0x24000ae0
 8009290:	e000ed04 	.word	0xe000ed04
 8009294:	24000fd0 	.word	0x24000fd0
 8009298:	24000fb4 	.word	0x24000fb4

0800929c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80092a2:	2301      	movs	r3, #1
 80092a4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80092a6:	2301      	movs	r3, #1
 80092a8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80092aa:	4b0f      	ldr	r3, [pc, #60]	@ (80092e8 <eTaskConfirmSleepModeStatus+0x4c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80092b2:	2300      	movs	r3, #0
 80092b4:	71fb      	strb	r3, [r7, #7]
 80092b6:	e010      	b.n	80092da <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80092b8:	4b0c      	ldr	r3, [pc, #48]	@ (80092ec <eTaskConfirmSleepModeStatus+0x50>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80092c0:	2300      	movs	r3, #0
 80092c2:	71fb      	strb	r3, [r7, #7]
 80092c4:	e009      	b.n	80092da <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80092c6:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <eTaskConfirmSleepModeStatus+0x54>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4b0a      	ldr	r3, [pc, #40]	@ (80092f4 <eTaskConfirmSleepModeStatus+0x58>)
 80092cc:	6819      	ldr	r1, [r3, #0]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	1acb      	subs	r3, r1, r3
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d101      	bne.n	80092da <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80092d6:	2302      	movs	r3, #2
 80092d8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80092da:	79fb      	ldrb	r3, [r7, #7]
	}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	24000f70 	.word	0x24000f70
 80092ec:	24000fc4 	.word	0x24000fc4
 80092f0:	24000f9c 	.word	0x24000f9c
 80092f4:	24000fb0 	.word	0x24000fb0

080092f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092fe:	2300      	movs	r3, #0
 8009300:	607b      	str	r3, [r7, #4]
 8009302:	e00c      	b.n	800931e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4a12      	ldr	r2, [pc, #72]	@ (8009358 <prvInitialiseTaskLists+0x60>)
 8009310:	4413      	add	r3, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe f960 	bl	80075d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3301      	adds	r3, #1
 800931c:	607b      	str	r3, [r7, #4]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b37      	cmp	r3, #55	@ 0x37
 8009322:	d9ef      	bls.n	8009304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009324:	480d      	ldr	r0, [pc, #52]	@ (800935c <prvInitialiseTaskLists+0x64>)
 8009326:	f7fe f957 	bl	80075d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800932a:	480d      	ldr	r0, [pc, #52]	@ (8009360 <prvInitialiseTaskLists+0x68>)
 800932c:	f7fe f954 	bl	80075d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009330:	480c      	ldr	r0, [pc, #48]	@ (8009364 <prvInitialiseTaskLists+0x6c>)
 8009332:	f7fe f951 	bl	80075d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009336:	480c      	ldr	r0, [pc, #48]	@ (8009368 <prvInitialiseTaskLists+0x70>)
 8009338:	f7fe f94e 	bl	80075d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800933c:	480b      	ldr	r0, [pc, #44]	@ (800936c <prvInitialiseTaskLists+0x74>)
 800933e:	f7fe f94b 	bl	80075d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <prvInitialiseTaskLists+0x78>)
 8009344:	4a05      	ldr	r2, [pc, #20]	@ (800935c <prvInitialiseTaskLists+0x64>)
 8009346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009348:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <prvInitialiseTaskLists+0x7c>)
 800934a:	4a05      	ldr	r2, [pc, #20]	@ (8009360 <prvInitialiseTaskLists+0x68>)
 800934c:	601a      	str	r2, [r3, #0]
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	24000ae0 	.word	0x24000ae0
 800935c:	24000f40 	.word	0x24000f40
 8009360:	24000f54 	.word	0x24000f54
 8009364:	24000f70 	.word	0x24000f70
 8009368:	24000f84 	.word	0x24000f84
 800936c:	24000f9c 	.word	0x24000f9c
 8009370:	24000f68 	.word	0x24000f68
 8009374:	24000f6c 	.word	0x24000f6c

08009378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800937e:	e019      	b.n	80093b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009380:	f000 feea 	bl	800a158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009384:	4b10      	ldr	r3, [pc, #64]	@ (80093c8 <prvCheckTasksWaitingTermination+0x50>)
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3304      	adds	r3, #4
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe f9ab 	bl	80076ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009396:	4b0d      	ldr	r3, [pc, #52]	@ (80093cc <prvCheckTasksWaitingTermination+0x54>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3b01      	subs	r3, #1
 800939c:	4a0b      	ldr	r2, [pc, #44]	@ (80093cc <prvCheckTasksWaitingTermination+0x54>)
 800939e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093a0:	4b0b      	ldr	r3, [pc, #44]	@ (80093d0 <prvCheckTasksWaitingTermination+0x58>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	4a0a      	ldr	r2, [pc, #40]	@ (80093d0 <prvCheckTasksWaitingTermination+0x58>)
 80093a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093aa:	f000 ff07 	bl	800a1bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f810 	bl	80093d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093b4:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <prvCheckTasksWaitingTermination+0x58>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e1      	bne.n	8009380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	24000f84 	.word	0x24000f84
 80093cc:	24000fb0 	.word	0x24000fb0
 80093d0:	24000f98 	.word	0x24000f98

080093d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3354      	adds	r3, #84	@ 0x54
 80093e0:	4618      	mov	r0, r3
 80093e2:	f002 fc7d 	bl	800bce0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f983 	bl	800a700 <vPortFree>
				vPortFree( pxTCB );
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 f980 	bl	800a700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009400:	e019      	b.n	8009436 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009408:	2b01      	cmp	r3, #1
 800940a:	d103      	bne.n	8009414 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f977 	bl	800a700 <vPortFree>
	}
 8009412:	e010      	b.n	8009436 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800941a:	2b02      	cmp	r3, #2
 800941c:	d00b      	beq.n	8009436 <prvDeleteTCB+0x62>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	60fb      	str	r3, [r7, #12]
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	e7fd      	b.n	8009432 <prvDeleteTCB+0x5e>
	}
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009446:	4b0c      	ldr	r3, [pc, #48]	@ (8009478 <prvResetNextTaskUnblockTime+0x38>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009450:	4b0a      	ldr	r3, [pc, #40]	@ (800947c <prvResetNextTaskUnblockTime+0x3c>)
 8009452:	f04f 32ff 	mov.w	r2, #4294967295
 8009456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009458:	e008      	b.n	800946c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945a:	4b07      	ldr	r3, [pc, #28]	@ (8009478 <prvResetNextTaskUnblockTime+0x38>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4a04      	ldr	r2, [pc, #16]	@ (800947c <prvResetNextTaskUnblockTime+0x3c>)
 800946a:	6013      	str	r3, [r2, #0]
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	24000f68 	.word	0x24000f68
 800947c:	24000fd0 	.word	0x24000fd0

08009480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009486:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <xTaskGetSchedulerState+0x34>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800948e:	2301      	movs	r3, #1
 8009490:	607b      	str	r3, [r7, #4]
 8009492:	e008      	b.n	80094a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009494:	4b08      	ldr	r3, [pc, #32]	@ (80094b8 <xTaskGetSchedulerState+0x38>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d102      	bne.n	80094a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800949c:	2302      	movs	r3, #2
 800949e:	607b      	str	r3, [r7, #4]
 80094a0:	e001      	b.n	80094a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094a2:	2300      	movs	r3, #0
 80094a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094a6:	687b      	ldr	r3, [r7, #4]
	}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	24000fbc 	.word	0x24000fbc
 80094b8:	24000fd8 	.word	0x24000fd8

080094bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d051      	beq.n	8009576 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009580 <xTaskPriorityInherit+0xc4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	429a      	cmp	r2, r3
 80094de:	d241      	bcs.n	8009564 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	db06      	blt.n	80094f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e8:	4b25      	ldr	r3, [pc, #148]	@ (8009580 <xTaskPriorityInherit+0xc4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6959      	ldr	r1, [r3, #20]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4a1f      	ldr	r2, [pc, #124]	@ (8009584 <xTaskPriorityInherit+0xc8>)
 8009508:	4413      	add	r3, r2
 800950a:	4299      	cmp	r1, r3
 800950c:	d122      	bne.n	8009554 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3304      	adds	r3, #4
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe f8ea 	bl	80076ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009518:	4b19      	ldr	r3, [pc, #100]	@ (8009580 <xTaskPriorityInherit+0xc4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009526:	4b18      	ldr	r3, [pc, #96]	@ (8009588 <xTaskPriorityInherit+0xcc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d903      	bls.n	8009536 <xTaskPriorityInherit+0x7a>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	4a15      	ldr	r2, [pc, #84]	@ (8009588 <xTaskPriorityInherit+0xcc>)
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4a10      	ldr	r2, [pc, #64]	@ (8009584 <xTaskPriorityInherit+0xc8>)
 8009544:	441a      	add	r2, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe f870 	bl	8007632 <vListInsertEnd>
 8009552:	e004      	b.n	800955e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009554:	4b0a      	ldr	r3, [pc, #40]	@ (8009580 <xTaskPriorityInherit+0xc4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800955e:	2301      	movs	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e008      	b.n	8009576 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009568:	4b05      	ldr	r3, [pc, #20]	@ (8009580 <xTaskPriorityInherit+0xc4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956e:	429a      	cmp	r2, r3
 8009570:	d201      	bcs.n	8009576 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009572:	2301      	movs	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009576:	68fb      	ldr	r3, [r7, #12]
	}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	24000adc 	.word	0x24000adc
 8009584:	24000ae0 	.word	0x24000ae0
 8009588:	24000fb8 	.word	0x24000fb8

0800958c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d058      	beq.n	8009654 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009660 <xTaskPriorityDisinherit+0xd4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d00b      	beq.n	80095c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	60fb      	str	r3, [r7, #12]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	60bb      	str	r3, [r7, #8]
}
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
 80095e2:	e7fd      	b.n	80095e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e8:	1e5a      	subs	r2, r3, #1
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d02c      	beq.n	8009654 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d128      	bne.n	8009654 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	3304      	adds	r3, #4
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe f870 	bl	80076ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009624:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <xTaskPriorityDisinherit+0xd8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d903      	bls.n	8009634 <xTaskPriorityDisinherit+0xa8>
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	4a0c      	ldr	r2, [pc, #48]	@ (8009664 <xTaskPriorityDisinherit+0xd8>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4a09      	ldr	r2, [pc, #36]	@ (8009668 <xTaskPriorityDisinherit+0xdc>)
 8009642:	441a      	add	r2, r3
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	3304      	adds	r3, #4
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f7fd fff1 	bl	8007632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009654:	697b      	ldr	r3, [r7, #20]
	}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	24000adc 	.word	0x24000adc
 8009664:	24000fb8 	.word	0x24000fb8
 8009668:	24000ae0 	.word	0x24000ae0

0800966c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800967a:	2301      	movs	r3, #1
 800967c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d06c      	beq.n	800975e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10b      	bne.n	80096a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60fb      	str	r3, [r7, #12]
}
 800969e:	bf00      	nop
 80096a0:	bf00      	nop
 80096a2:	e7fd      	b.n	80096a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d902      	bls.n	80096b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	e002      	b.n	80096ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d04c      	beq.n	800975e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d147      	bne.n	800975e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096ce:	4b26      	ldr	r3, [pc, #152]	@ (8009768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d10b      	bne.n	80096f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	60bb      	str	r3, [r7, #8]
}
 80096ea:	bf00      	nop
 80096ec:	bf00      	nop
 80096ee:	e7fd      	b.n	80096ec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	db04      	blt.n	800970e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	6959      	ldr	r1, [r3, #20]
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4a13      	ldr	r2, [pc, #76]	@ (800976c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800971e:	4413      	add	r3, r2
 8009720:	4299      	cmp	r1, r3
 8009722:	d11c      	bne.n	800975e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd ffdf 	bl	80076ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009732:	4b0f      	ldr	r3, [pc, #60]	@ (8009770 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d903      	bls.n	8009742 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	4a0c      	ldr	r2, [pc, #48]	@ (8009770 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a07      	ldr	r2, [pc, #28]	@ (800976c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009750:	441a      	add	r2, r3
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	3304      	adds	r3, #4
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f7fd ff6a 	bl	8007632 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800975e:	bf00      	nop
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	24000adc 	.word	0x24000adc
 800976c:	24000ae0 	.word	0x24000ae0
 8009770:	24000fb8 	.word	0x24000fb8

08009774 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009778:	4b07      	ldr	r3, [pc, #28]	@ (8009798 <pvTaskIncrementMutexHeldCount+0x24>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <pvTaskIncrementMutexHeldCount+0x24>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009786:	3201      	adds	r2, #1
 8009788:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800978a:	4b03      	ldr	r3, [pc, #12]	@ (8009798 <pvTaskIncrementMutexHeldCount+0x24>)
 800978c:	681b      	ldr	r3, [r3, #0]
	}
 800978e:	4618      	mov	r0, r3
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	24000adc 	.word	0x24000adc

0800979c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097a6:	4b21      	ldr	r3, [pc, #132]	@ (800982c <prvAddCurrentTaskToDelayedList+0x90>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097ac:	4b20      	ldr	r3, [pc, #128]	@ (8009830 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fd ff9a 	bl	80076ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d10a      	bne.n	80097d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009830 <prvAddCurrentTaskToDelayedList+0x94>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4819      	ldr	r0, [pc, #100]	@ (8009834 <prvAddCurrentTaskToDelayedList+0x98>)
 80097d0:	f7fd ff2f 	bl	8007632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097d4:	e026      	b.n	8009824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4413      	add	r3, r2
 80097dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097de:	4b14      	ldr	r3, [pc, #80]	@ (8009830 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d209      	bcs.n	8009802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ee:	4b12      	ldr	r3, [pc, #72]	@ (8009838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009830 <prvAddCurrentTaskToDelayedList+0x94>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fd ff3d 	bl	800767a <vListInsert>
}
 8009800:	e010      	b.n	8009824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009802:	4b0e      	ldr	r3, [pc, #56]	@ (800983c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4b0a      	ldr	r3, [pc, #40]	@ (8009830 <prvAddCurrentTaskToDelayedList+0x94>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3304      	adds	r3, #4
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f7fd ff33 	bl	800767a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009814:	4b0a      	ldr	r3, [pc, #40]	@ (8009840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	429a      	cmp	r2, r3
 800981c:	d202      	bcs.n	8009824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800981e:	4a08      	ldr	r2, [pc, #32]	@ (8009840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	6013      	str	r3, [r2, #0]
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	24000fb4 	.word	0x24000fb4
 8009830:	24000adc 	.word	0x24000adc
 8009834:	24000f9c 	.word	0x24000f9c
 8009838:	24000f6c 	.word	0x24000f6c
 800983c:	24000f68 	.word	0x24000f68
 8009840:	24000fd0 	.word	0x24000fd0

08009844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08a      	sub	sp, #40	@ 0x28
 8009848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800984e:	f000 fb13 	bl	8009e78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009852:	4b1d      	ldr	r3, [pc, #116]	@ (80098c8 <xTimerCreateTimerTask+0x84>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d021      	beq.n	800989e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800985e:	2300      	movs	r3, #0
 8009860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009862:	1d3a      	adds	r2, r7, #4
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	f107 030c 	add.w	r3, r7, #12
 800986c:	4618      	mov	r0, r3
 800986e:	f7fd fe99 	bl	80075a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	9202      	str	r2, [sp, #8]
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	2302      	movs	r3, #2
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2300      	movs	r3, #0
 8009882:	460a      	mov	r2, r1
 8009884:	4911      	ldr	r1, [pc, #68]	@ (80098cc <xTimerCreateTimerTask+0x88>)
 8009886:	4812      	ldr	r0, [pc, #72]	@ (80098d0 <xTimerCreateTimerTask+0x8c>)
 8009888:	f7fe feea 	bl	8008660 <xTaskCreateStatic>
 800988c:	4603      	mov	r3, r0
 800988e:	4a11      	ldr	r2, [pc, #68]	@ (80098d4 <xTimerCreateTimerTask+0x90>)
 8009890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009892:	4b10      	ldr	r3, [pc, #64]	@ (80098d4 <xTimerCreateTimerTask+0x90>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800989a:	2301      	movs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	613b      	str	r3, [r7, #16]
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098bc:	697b      	ldr	r3, [r7, #20]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	2400100c 	.word	0x2400100c
 80098cc:	0800f218 	.word	0x0800f218
 80098d0:	08009a11 	.word	0x08009a11
 80098d4:	24001010 	.word	0x24001010

080098d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08a      	sub	sp, #40	@ 0x28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10b      	bne.n	8009908 <xTimerGenericCommand+0x30>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	623b      	str	r3, [r7, #32]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009908:	4b19      	ldr	r3, [pc, #100]	@ (8009970 <xTimerGenericCommand+0x98>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d02a      	beq.n	8009966 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b05      	cmp	r3, #5
 8009920:	dc18      	bgt.n	8009954 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009922:	f7ff fdad 	bl	8009480 <xTaskGetSchedulerState>
 8009926:	4603      	mov	r3, r0
 8009928:	2b02      	cmp	r3, #2
 800992a:	d109      	bne.n	8009940 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800992c:	4b10      	ldr	r3, [pc, #64]	@ (8009970 <xTimerGenericCommand+0x98>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	f107 0110 	add.w	r1, r7, #16
 8009934:	2300      	movs	r3, #0
 8009936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009938:	f7fe f87c 	bl	8007a34 <xQueueGenericSend>
 800993c:	6278      	str	r0, [r7, #36]	@ 0x24
 800993e:	e012      	b.n	8009966 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009940:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <xTimerGenericCommand+0x98>)
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	f107 0110 	add.w	r1, r7, #16
 8009948:	2300      	movs	r3, #0
 800994a:	2200      	movs	r2, #0
 800994c:	f7fe f872 	bl	8007a34 <xQueueGenericSend>
 8009950:	6278      	str	r0, [r7, #36]	@ 0x24
 8009952:	e008      	b.n	8009966 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009954:	4b06      	ldr	r3, [pc, #24]	@ (8009970 <xTimerGenericCommand+0x98>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	f107 0110 	add.w	r1, r7, #16
 800995c:	2300      	movs	r3, #0
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	f7fe f96a 	bl	8007c38 <xQueueGenericSendFromISR>
 8009964:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009968:	4618      	mov	r0, r3
 800996a:	3728      	adds	r7, #40	@ 0x28
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	2400100c 	.word	0x2400100c

08009974 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af02      	add	r7, sp, #8
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800997e:	4b23      	ldr	r3, [pc, #140]	@ (8009a0c <prvProcessExpiredTimer+0x98>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	3304      	adds	r3, #4
 800998c:	4618      	mov	r0, r3
 800998e:	f7fd fead 	bl	80076ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d023      	beq.n	80099e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	699a      	ldr	r2, [r3, #24]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	18d1      	adds	r1, r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	6978      	ldr	r0, [r7, #20]
 80099ae:	f000 f8d5 	bl	8009b5c <prvInsertTimerInActiveList>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d020      	beq.n	80099fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099b8:	2300      	movs	r3, #0
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	2300      	movs	r3, #0
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	2100      	movs	r1, #0
 80099c2:	6978      	ldr	r0, [r7, #20]
 80099c4:	f7ff ff88 	bl	80098d8 <xTimerGenericCommand>
 80099c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d114      	bne.n	80099fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	e7fd      	b.n	80099e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	6978      	ldr	r0, [r7, #20]
 8009a00:	4798      	blx	r3
}
 8009a02:	bf00      	nop
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	24001004 	.word	0x24001004

08009a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f859 	bl	8009ad4 <prvGetNextExpireTime>
 8009a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4619      	mov	r1, r3
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f805 	bl	8009a38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a2e:	f000 f8d7 	bl	8009be0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a32:	bf00      	nop
 8009a34:	e7f0      	b.n	8009a18 <prvTimerTask+0x8>
	...

08009a38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a42:	f7ff f871 	bl	8008b28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a46:	f107 0308 	add.w	r3, r7, #8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f866 	bl	8009b1c <prvSampleTimeNow>
 8009a50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d130      	bne.n	8009aba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <prvProcessTimerOrBlockTask+0x3c>
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d806      	bhi.n	8009a74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a66:	f7ff f8a5 	bl	8008bb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff ff81 	bl	8009974 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a72:	e024      	b.n	8009abe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d008      	beq.n	8009a8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a7a:	4b13      	ldr	r3, [pc, #76]	@ (8009ac8 <prvProcessTimerOrBlockTask+0x90>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <prvProcessTimerOrBlockTask+0x50>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <prvProcessTimerOrBlockTask+0x52>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009acc <prvProcessTimerOrBlockTask+0x94>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f7fe fdad 	bl	80085f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a9e:	f7ff f889 	bl	8008bb4 <xTaskResumeAll>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009aa8:	4b09      	ldr	r3, [pc, #36]	@ (8009ad0 <prvProcessTimerOrBlockTask+0x98>)
 8009aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	f3bf 8f6f 	isb	sy
}
 8009ab8:	e001      	b.n	8009abe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aba:	f7ff f87b 	bl	8008bb4 <xTaskResumeAll>
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	24001008 	.word	0x24001008
 8009acc:	2400100c 	.word	0x2400100c
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009adc:	4b0e      	ldr	r3, [pc, #56]	@ (8009b18 <prvGetNextExpireTime+0x44>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <prvGetNextExpireTime+0x16>
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	e000      	b.n	8009aec <prvGetNextExpireTime+0x18>
 8009aea:	2200      	movs	r2, #0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d105      	bne.n	8009b04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009af8:	4b07      	ldr	r3, [pc, #28]	@ (8009b18 <prvGetNextExpireTime+0x44>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	e001      	b.n	8009b08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b08:	68fb      	ldr	r3, [r7, #12]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	24001004 	.word	0x24001004

08009b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b24:	f7ff f8e4 	bl	8008cf0 <xTaskGetTickCount>
 8009b28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b58 <prvSampleTimeNow+0x3c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d205      	bcs.n	8009b40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b34:	f000 f93a 	bl	8009dac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e002      	b.n	8009b46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b46:	4a04      	ldr	r2, [pc, #16]	@ (8009b58 <prvSampleTimeNow+0x3c>)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	24001014 	.word	0x24001014

08009b5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d812      	bhi.n	8009ba8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	1ad2      	subs	r2, r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d302      	bcc.n	8009b96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e01b      	b.n	8009bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b96:	4b10      	ldr	r3, [pc, #64]	@ (8009bd8 <prvInsertTimerInActiveList+0x7c>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7fd fd6a 	bl	800767a <vListInsert>
 8009ba6:	e012      	b.n	8009bce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d206      	bcs.n	8009bbe <prvInsertTimerInActiveList+0x62>
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d302      	bcc.n	8009bbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	e007      	b.n	8009bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bbe:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <prvInsertTimerInActiveList+0x80>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7fd fd56 	bl	800767a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bce:	697b      	ldr	r3, [r7, #20]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	24001008 	.word	0x24001008
 8009bdc:	24001004 	.word	0x24001004

08009be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08e      	sub	sp, #56	@ 0x38
 8009be4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009be6:	e0ce      	b.n	8009d86 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da19      	bge.n	8009c22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bee:	1d3b      	adds	r3, r7, #4
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10b      	bne.n	8009c12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	61fb      	str	r3, [r7, #28]
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	e7fd      	b.n	8009c0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c18:	6850      	ldr	r0, [r2, #4]
 8009c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c1c:	6892      	ldr	r2, [r2, #8]
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f2c0 80ae 	blt.w	8009d86 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d004      	beq.n	8009c40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	3304      	adds	r3, #4
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd fd56 	bl	80076ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c40:	463b      	mov	r3, r7
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff ff6a 	bl	8009b1c <prvSampleTimeNow>
 8009c48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b09      	cmp	r3, #9
 8009c4e:	f200 8097 	bhi.w	8009d80 <prvProcessReceivedCommands+0x1a0>
 8009c52:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <prvProcessReceivedCommands+0x78>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009cf7 	.word	0x08009cf7
 8009c68:	08009d0b 	.word	0x08009d0b
 8009c6c:	08009d57 	.word	0x08009d57
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009c81 	.word	0x08009c81
 8009c78:	08009cf7 	.word	0x08009cf7
 8009c7c:	08009d0b 	.word	0x08009d0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	18d1      	adds	r1, r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca0:	f7ff ff5c 	bl	8009b5c <prvInsertTimerInActiveList>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d06c      	beq.n	8009d84 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d061      	beq.n	8009d84 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	441a      	add	r2, r3
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cd2:	f7ff fe01 	bl	80098d8 <xTimerGenericCommand>
 8009cd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d152      	bne.n	8009d84 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	61bb      	str	r3, [r7, #24]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d08:	e03d      	b.n	8009d86 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d10:	f043 0301 	orr.w	r3, r3, #1
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10b      	bne.n	8009d42 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	617b      	str	r3, [r7, #20]
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	e7fd      	b.n	8009d3e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	18d1      	adds	r1, r2, r3
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d50:	f7ff ff04 	bl	8009b5c <prvInsertTimerInActiveList>
					break;
 8009d54:	e017      	b.n	8009d86 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d5c:	f003 0302 	and.w	r3, r3, #2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d103      	bne.n	8009d6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d66:	f000 fccb 	bl	800a700 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d6a:	e00c      	b.n	8009d86 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d72:	f023 0301 	bic.w	r3, r3, #1
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d7e:	e002      	b.n	8009d86 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <prvProcessReceivedCommands+0x1a6>
					break;
 8009d84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d86:	4b08      	ldr	r3, [pc, #32]	@ (8009da8 <prvProcessReceivedCommands+0x1c8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	1d39      	adds	r1, r7, #4
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fe f880 	bl	8007e94 <xQueueReceive>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f47f af26 	bne.w	8009be8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	3730      	adds	r7, #48	@ 0x30
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	2400100c 	.word	0x2400100c

08009dac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009db2:	e049      	b.n	8009e48 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009db4:	4b2e      	ldr	r3, [pc, #184]	@ (8009e70 <prvSwitchTimerLists+0xc4>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8009e70 <prvSwitchTimerLists+0xc4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fd fc8d 	bl	80076ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d02f      	beq.n	8009e48 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	4413      	add	r3, r2
 8009df0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d90e      	bls.n	8009e18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e06:	4b1a      	ldr	r3, [pc, #104]	@ (8009e70 <prvSwitchTimerLists+0xc4>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fd fc32 	bl	800767a <vListInsert>
 8009e16:	e017      	b.n	8009e48 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	2100      	movs	r1, #0
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff fd58 	bl	80098d8 <xTimerGenericCommand>
 8009e28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	603b      	str	r3, [r7, #0]
}
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
 8009e46:	e7fd      	b.n	8009e44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e48:	4b09      	ldr	r3, [pc, #36]	@ (8009e70 <prvSwitchTimerLists+0xc4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1b0      	bne.n	8009db4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e52:	4b07      	ldr	r3, [pc, #28]	@ (8009e70 <prvSwitchTimerLists+0xc4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e58:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <prvSwitchTimerLists+0xc8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a04      	ldr	r2, [pc, #16]	@ (8009e70 <prvSwitchTimerLists+0xc4>)
 8009e5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e60:	4a04      	ldr	r2, [pc, #16]	@ (8009e74 <prvSwitchTimerLists+0xc8>)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	6013      	str	r3, [r2, #0]
}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	24001004 	.word	0x24001004
 8009e74:	24001008 	.word	0x24001008

08009e78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e7e:	f000 f96b 	bl	800a158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e82:	4b15      	ldr	r3, [pc, #84]	@ (8009ed8 <prvCheckForValidListAndQueue+0x60>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d120      	bne.n	8009ecc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e8a:	4814      	ldr	r0, [pc, #80]	@ (8009edc <prvCheckForValidListAndQueue+0x64>)
 8009e8c:	f7fd fba4 	bl	80075d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e90:	4813      	ldr	r0, [pc, #76]	@ (8009ee0 <prvCheckForValidListAndQueue+0x68>)
 8009e92:	f7fd fba1 	bl	80075d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e96:	4b13      	ldr	r3, [pc, #76]	@ (8009ee4 <prvCheckForValidListAndQueue+0x6c>)
 8009e98:	4a10      	ldr	r2, [pc, #64]	@ (8009edc <prvCheckForValidListAndQueue+0x64>)
 8009e9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ee8 <prvCheckForValidListAndQueue+0x70>)
 8009e9e:	4a10      	ldr	r2, [pc, #64]	@ (8009ee0 <prvCheckForValidListAndQueue+0x68>)
 8009ea0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	4b11      	ldr	r3, [pc, #68]	@ (8009eec <prvCheckForValidListAndQueue+0x74>)
 8009ea8:	4a11      	ldr	r2, [pc, #68]	@ (8009ef0 <prvCheckForValidListAndQueue+0x78>)
 8009eaa:	2110      	movs	r1, #16
 8009eac:	200a      	movs	r0, #10
 8009eae:	f7fd fcb1 	bl	8007814 <xQueueGenericCreateStatic>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4a08      	ldr	r2, [pc, #32]	@ (8009ed8 <prvCheckForValidListAndQueue+0x60>)
 8009eb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009eb8:	4b07      	ldr	r3, [pc, #28]	@ (8009ed8 <prvCheckForValidListAndQueue+0x60>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ec0:	4b05      	ldr	r3, [pc, #20]	@ (8009ed8 <prvCheckForValidListAndQueue+0x60>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	490b      	ldr	r1, [pc, #44]	@ (8009ef4 <prvCheckForValidListAndQueue+0x7c>)
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fb42 	bl	8008550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ecc:	f000 f976 	bl	800a1bc <vPortExitCritical>
}
 8009ed0:	bf00      	nop
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	2400100c 	.word	0x2400100c
 8009edc:	24000fdc 	.word	0x24000fdc
 8009ee0:	24000ff0 	.word	0x24000ff0
 8009ee4:	24001004 	.word	0x24001004
 8009ee8:	24001008 	.word	0x24001008
 8009eec:	240010b8 	.word	0x240010b8
 8009ef0:	24001018 	.word	0x24001018
 8009ef4:	0800f220 	.word	0x0800f220

08009ef8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3b04      	subs	r3, #4
 8009f08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f023 0201 	bic.w	r2, r3, #1
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3b04      	subs	r3, #4
 8009f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f28:	4a0c      	ldr	r2, [pc, #48]	@ (8009f5c <pxPortInitialiseStack+0x64>)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3b14      	subs	r3, #20
 8009f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f06f 0202 	mvn.w	r2, #2
 8009f46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3b20      	subs	r3, #32
 8009f4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	08009f61 	.word	0x08009f61

08009f60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f6a:	4b13      	ldr	r3, [pc, #76]	@ (8009fb8 <prvTaskExitError+0x58>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d00b      	beq.n	8009f8c <prvTaskExitError+0x2c>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	60fb      	str	r3, [r7, #12]
}
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	e7fd      	b.n	8009f88 <prvTaskExitError+0x28>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	60bb      	str	r3, [r7, #8]
}
 8009f9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fa0:	bf00      	nop
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d0fc      	beq.n	8009fa2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	24000010 	.word	0x24000010
 8009fbc:	00000000 	.word	0x00000000

08009fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fc0:	4b07      	ldr	r3, [pc, #28]	@ (8009fe0 <pxCurrentTCBConst2>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f380 8809 	msr	PSP, r0
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8811 	msr	BASEPRI, r0
 8009fda:	4770      	bx	lr
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst2>:
 8009fe0:	24000adc 	.word	0x24000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fe8:	4808      	ldr	r0, [pc, #32]	@ (800a00c <prvPortStartFirstTask+0x24>)
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f380 8808 	msr	MSP, r0
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8814 	msr	CONTROL, r0
 8009ffa:	b662      	cpsie	i
 8009ffc:	b661      	cpsie	f
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	df00      	svc	0
 800a008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a00a:	bf00      	nop
 800a00c:	e000ed08 	.word	0xe000ed08

0800a010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a016:	4b47      	ldr	r3, [pc, #284]	@ (800a134 <xPortStartScheduler+0x124>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a47      	ldr	r2, [pc, #284]	@ (800a138 <xPortStartScheduler+0x128>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10b      	bne.n	800a038 <xPortStartScheduler+0x28>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	613b      	str	r3, [r7, #16]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a038:	4b3e      	ldr	r3, [pc, #248]	@ (800a134 <xPortStartScheduler+0x124>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a3f      	ldr	r2, [pc, #252]	@ (800a13c <xPortStartScheduler+0x12c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d10b      	bne.n	800a05a <xPortStartScheduler+0x4a>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60fb      	str	r3, [r7, #12]
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	e7fd      	b.n	800a056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a05a:	4b39      	ldr	r3, [pc, #228]	@ (800a140 <xPortStartScheduler+0x130>)
 800a05c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	22ff      	movs	r2, #255	@ 0xff
 800a06a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	4b31      	ldr	r3, [pc, #196]	@ (800a144 <xPortStartScheduler+0x134>)
 800a080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a082:	4b31      	ldr	r3, [pc, #196]	@ (800a148 <xPortStartScheduler+0x138>)
 800a084:	2207      	movs	r2, #7
 800a086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a088:	e009      	b.n	800a09e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a08a:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <xPortStartScheduler+0x138>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	3b01      	subs	r3, #1
 800a090:	4a2d      	ldr	r2, [pc, #180]	@ (800a148 <xPortStartScheduler+0x138>)
 800a092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	005b      	lsls	r3, r3, #1
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a6:	2b80      	cmp	r3, #128	@ 0x80
 800a0a8:	d0ef      	beq.n	800a08a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0aa:	4b27      	ldr	r3, [pc, #156]	@ (800a148 <xPortStartScheduler+0x138>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f1c3 0307 	rsb	r3, r3, #7
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	d00b      	beq.n	800a0ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60bb      	str	r3, [r7, #8]
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	e7fd      	b.n	800a0ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a148 <xPortStartScheduler+0x138>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a148 <xPortStartScheduler+0x138>)
 800a0d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a148 <xPortStartScheduler+0x138>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0e0:	4a19      	ldr	r2, [pc, #100]	@ (800a148 <xPortStartScheduler+0x138>)
 800a0e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0ec:	4b17      	ldr	r3, [pc, #92]	@ (800a14c <xPortStartScheduler+0x13c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a16      	ldr	r2, [pc, #88]	@ (800a14c <xPortStartScheduler+0x13c>)
 800a0f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0f8:	4b14      	ldr	r3, [pc, #80]	@ (800a14c <xPortStartScheduler+0x13c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a13      	ldr	r2, [pc, #76]	@ (800a14c <xPortStartScheduler+0x13c>)
 800a0fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a104:	f000 f9a6 	bl	800a454 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a108:	4b11      	ldr	r3, [pc, #68]	@ (800a150 <xPortStartScheduler+0x140>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a10e:	f000 f9dd 	bl	800a4cc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a112:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <xPortStartScheduler+0x144>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a0f      	ldr	r2, [pc, #60]	@ (800a154 <xPortStartScheduler+0x144>)
 800a118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a11c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a11e:	f7ff ff63 	bl	8009fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a122:	f7fe fed7 	bl	8008ed4 <vTaskSwitchContext>
	prvTaskExitError();
 800a126:	f7ff ff1b 	bl	8009f60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	e000ed00 	.word	0xe000ed00
 800a138:	410fc271 	.word	0x410fc271
 800a13c:	410fc270 	.word	0x410fc270
 800a140:	e000e400 	.word	0xe000e400
 800a144:	24001114 	.word	0x24001114
 800a148:	24001118 	.word	0x24001118
 800a14c:	e000ed20 	.word	0xe000ed20
 800a150:	24000010 	.word	0x24000010
 800a154:	e000ef34 	.word	0xe000ef34

0800a158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	607b      	str	r3, [r7, #4]
}
 800a170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a172:	4b10      	ldr	r3, [pc, #64]	@ (800a1b4 <vPortEnterCritical+0x5c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3301      	adds	r3, #1
 800a178:	4a0e      	ldr	r2, [pc, #56]	@ (800a1b4 <vPortEnterCritical+0x5c>)
 800a17a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a17c:	4b0d      	ldr	r3, [pc, #52]	@ (800a1b4 <vPortEnterCritical+0x5c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d110      	bne.n	800a1a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a184:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b8 <vPortEnterCritical+0x60>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	603b      	str	r3, [r7, #0]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <vPortEnterCritical+0x4a>
	}
}
 800a1a6:	bf00      	nop
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	24000010 	.word	0x24000010
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1c2:	4b12      	ldr	r3, [pc, #72]	@ (800a20c <vPortExitCritical+0x50>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10b      	bne.n	800a1e2 <vPortExitCritical+0x26>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	607b      	str	r3, [r7, #4]
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	e7fd      	b.n	800a1de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a20c <vPortExitCritical+0x50>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	4a08      	ldr	r2, [pc, #32]	@ (800a20c <vPortExitCritical+0x50>)
 800a1ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1ec:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <vPortExitCritical+0x50>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d105      	bne.n	800a200 <vPortExitCritical+0x44>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f383 8811 	msr	BASEPRI, r3
}
 800a1fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	24000010 	.word	0x24000010

0800a210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a210:	f3ef 8009 	mrs	r0, PSP
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	4b15      	ldr	r3, [pc, #84]	@ (800a270 <pxCurrentTCBConst>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	f01e 0f10 	tst.w	lr, #16
 800a220:	bf08      	it	eq
 800a222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22a:	6010      	str	r0, [r2, #0]
 800a22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a234:	f380 8811 	msr	BASEPRI, r0
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f7fe fe48 	bl	8008ed4 <vTaskSwitchContext>
 800a244:	f04f 0000 	mov.w	r0, #0
 800a248:	f380 8811 	msr	BASEPRI, r0
 800a24c:	bc09      	pop	{r0, r3}
 800a24e:	6819      	ldr	r1, [r3, #0]
 800a250:	6808      	ldr	r0, [r1, #0]
 800a252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a256:	f01e 0f10 	tst.w	lr, #16
 800a25a:	bf08      	it	eq
 800a25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a260:	f380 8809 	msr	PSP, r0
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	f3af 8000 	nop.w

0800a270 <pxCurrentTCBConst>:
 800a270:	24000adc 	.word	0x24000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop

0800a278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	607b      	str	r3, [r7, #4]
}
 800a290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a292:	f7fe fd65 	bl	8008d60 <xTaskIncrementTick>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a29c:	4b06      	ldr	r3, [pc, #24]	@ (800a2b8 <xPortSysTickHandler+0x40>)
 800a29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	e000ed04 	.word	0xe000ed04

0800a2bc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800a2c4:	4b5d      	ldr	r3, [pc, #372]	@ (800a43c <vPortSuppressTicksAndSleep+0x180>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d902      	bls.n	800a2d4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800a2ce:	4b5b      	ldr	r3, [pc, #364]	@ (800a43c <vPortSuppressTicksAndSleep+0x180>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800a2d4:	4b5a      	ldr	r3, [pc, #360]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a59      	ldr	r2, [pc, #356]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800a2e0:	4b58      	ldr	r3, [pc, #352]	@ (800a444 <vPortSuppressTicksAndSleep+0x188>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	4957      	ldr	r1, [pc, #348]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a2ea:	6809      	ldr	r1, [r1, #0]
 800a2ec:	fb01 f303 	mul.w	r3, r1, r3
 800a2f0:	4413      	add	r3, r2
 800a2f2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800a2f4:	4b55      	ldr	r3, [pc, #340]	@ (800a44c <vPortSuppressTicksAndSleep+0x190>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	69fa      	ldr	r2, [r7, #28]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d904      	bls.n	800a308 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800a2fe:	4b53      	ldr	r3, [pc, #332]	@ (800a44c <vPortSuppressTicksAndSleep+0x190>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800a308:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800a30a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800a30e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800a312:	f7fe ffc3 	bl	800929c <eTaskConfirmSleepModeStatus>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d110      	bne.n	800a33e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a31c:	4b49      	ldr	r3, [pc, #292]	@ (800a444 <vPortSuppressTicksAndSleep+0x188>)
 800a31e:	4a4c      	ldr	r2, [pc, #304]	@ (800a450 <vPortSuppressTicksAndSleep+0x194>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a324:	4b46      	ldr	r3, [pc, #280]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a45      	ldr	r2, [pc, #276]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a330:	4b45      	ldr	r3, [pc, #276]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a46      	ldr	r2, [pc, #280]	@ (800a450 <vPortSuppressTicksAndSleep+0x194>)
 800a336:	3b01      	subs	r3, #1
 800a338:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800a33a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800a33c:	e079      	b.n	800a432 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800a33e:	4a44      	ldr	r2, [pc, #272]	@ (800a450 <vPortSuppressTicksAndSleep+0x194>)
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a344:	4b3f      	ldr	r3, [pc, #252]	@ (800a444 <vPortSuppressTicksAndSleep+0x188>)
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a34a:	4b3d      	ldr	r3, [pc, #244]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a3c      	ldr	r2, [pc, #240]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a350:	f043 0301 	orr.w	r3, r3, #1
 800a354:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800a35a:	2300      	movs	r3, #0
 800a35c:	613b      	str	r3, [r7, #16]
 800a35e:	6938      	ldr	r0, [r7, #16]
 800a360:	f7f6 fb8a 	bl	8000a78 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d004      	beq.n	800a374 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800a36a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800a36e:	bf30      	wfi
				__asm volatile( "isb" );
 800a370:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7f6 fb89 	bl	8000a8c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800a37a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800a37c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a380:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800a384:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800a386:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a38a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800a38e:	4b2c      	ldr	r3, [pc, #176]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a390:	2206      	movs	r2, #6
 800a392:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800a394:	4b2a      	ldr	r3, [pc, #168]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d01d      	beq.n	800a3dc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800a3a0:	4b29      	ldr	r3, [pc, #164]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	4b27      	ldr	r3, [pc, #156]	@ (800a444 <vPortSuppressTicksAndSleep+0x188>)
 800a3a6:	6819      	ldr	r1, [r3, #0]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	1acb      	subs	r3, r1, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800a3b2:	4b26      	ldr	r3, [pc, #152]	@ (800a44c <vPortSuppressTicksAndSleep+0x190>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d304      	bcc.n	800a3c6 <vPortSuppressTicksAndSleep+0x10a>
 800a3bc:	4b22      	ldr	r3, [pc, #136]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d903      	bls.n	800a3ce <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800a3c6:	4b20      	ldr	r3, [pc, #128]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800a3ce:	4a20      	ldr	r2, [pc, #128]	@ (800a450 <vPortSuppressTicksAndSleep+0x194>)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	61bb      	str	r3, [r7, #24]
 800a3da:	e018      	b.n	800a40e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a3dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	fb03 f202 	mul.w	r2, r3, r2
 800a3e6:	4b17      	ldr	r3, [pc, #92]	@ (800a444 <vPortSuppressTicksAndSleep+0x188>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800a3ee:	4b16      	ldr	r3, [pc, #88]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	4a12      	ldr	r2, [pc, #72]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a400:	6812      	ldr	r2, [r2, #0]
 800a402:	fb03 f202 	mul.w	r2, r3, r2
 800a406:	4912      	ldr	r1, [pc, #72]	@ (800a450 <vPortSuppressTicksAndSleep+0x194>)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a40e:	4b0d      	ldr	r3, [pc, #52]	@ (800a444 <vPortSuppressTicksAndSleep+0x188>)
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a414:	4b0a      	ldr	r3, [pc, #40]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a09      	ldr	r2, [pc, #36]	@ (800a440 <vPortSuppressTicksAndSleep+0x184>)
 800a41a:	f043 0301 	orr.w	r3, r3, #1
 800a41e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800a420:	69b8      	ldr	r0, [r7, #24]
 800a422:	f7fe fc75 	bl	8008d10 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a426:	4b08      	ldr	r3, [pc, #32]	@ (800a448 <vPortSuppressTicksAndSleep+0x18c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a09      	ldr	r2, [pc, #36]	@ (800a450 <vPortSuppressTicksAndSleep+0x194>)
 800a42c:	3b01      	subs	r3, #1
 800a42e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800a430:	b662      	cpsie	i
	}
 800a432:	bf00      	nop
 800a434:	3720      	adds	r7, #32
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	2400110c 	.word	0x2400110c
 800a440:	e000e010 	.word	0xe000e010
 800a444:	e000e018 	.word	0xe000e018
 800a448:	24001108 	.word	0x24001108
 800a44c:	24001110 	.word	0x24001110
 800a450:	e000e014 	.word	0xe000e014

0800a454 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a454:	b480      	push	{r7}
 800a456:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800a458:	4b14      	ldr	r3, [pc, #80]	@ (800a4ac <vPortSetupTimerInterrupt+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a14      	ldr	r2, [pc, #80]	@ (800a4b0 <vPortSetupTimerInterrupt+0x5c>)
 800a45e:	fba2 2303 	umull	r2, r3, r2, r3
 800a462:	099b      	lsrs	r3, r3, #6
 800a464:	4a13      	ldr	r2, [pc, #76]	@ (800a4b4 <vPortSetupTimerInterrupt+0x60>)
 800a466:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800a468:	4b12      	ldr	r3, [pc, #72]	@ (800a4b4 <vPortSetupTimerInterrupt+0x60>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800a470:	fbb2 f3f3 	udiv	r3, r2, r3
 800a474:	4a10      	ldr	r2, [pc, #64]	@ (800a4b8 <vPortSetupTimerInterrupt+0x64>)
 800a476:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800a478:	4b10      	ldr	r3, [pc, #64]	@ (800a4bc <vPortSetupTimerInterrupt+0x68>)
 800a47a:	222d      	movs	r2, #45	@ 0x2d
 800a47c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a47e:	4b10      	ldr	r3, [pc, #64]	@ (800a4c0 <vPortSetupTimerInterrupt+0x6c>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a484:	4b0f      	ldr	r3, [pc, #60]	@ (800a4c4 <vPortSetupTimerInterrupt+0x70>)
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a48a:	4b08      	ldr	r3, [pc, #32]	@ (800a4ac <vPortSetupTimerInterrupt+0x58>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a08      	ldr	r2, [pc, #32]	@ (800a4b0 <vPortSetupTimerInterrupt+0x5c>)
 800a490:	fba2 2303 	umull	r2, r3, r2, r3
 800a494:	099b      	lsrs	r3, r3, #6
 800a496:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c8 <vPortSetupTimerInterrupt+0x74>)
 800a498:	3b01      	subs	r3, #1
 800a49a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a49c:	4b08      	ldr	r3, [pc, #32]	@ (800a4c0 <vPortSetupTimerInterrupt+0x6c>)
 800a49e:	2207      	movs	r2, #7
 800a4a0:	601a      	str	r2, [r3, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	24000000 	.word	0x24000000
 800a4b0:	10624dd3 	.word	0x10624dd3
 800a4b4:	24001108 	.word	0x24001108
 800a4b8:	2400110c 	.word	0x2400110c
 800a4bc:	24001110 	.word	0x24001110
 800a4c0:	e000e010 	.word	0xe000e010
 800a4c4:	e000e018 	.word	0xe000e018
 800a4c8:	e000e014 	.word	0xe000e014

0800a4cc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4cc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4dc <vPortEnableVFP+0x10>
 800a4d0:	6801      	ldr	r1, [r0, #0]
 800a4d2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4d6:	6001      	str	r1, [r0, #0]
 800a4d8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4da:	bf00      	nop
 800a4dc:	e000ed88 	.word	0xe000ed88

0800a4e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4e6:	f3ef 8305 	mrs	r3, IPSR
 800a4ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b0f      	cmp	r3, #15
 800a4f0:	d915      	bls.n	800a51e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4f2:	4a18      	ldr	r2, [pc, #96]	@ (800a554 <vPortValidateInterruptPriority+0x74>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4fc:	4b16      	ldr	r3, [pc, #88]	@ (800a558 <vPortValidateInterruptPriority+0x78>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	7afa      	ldrb	r2, [r7, #11]
 800a502:	429a      	cmp	r2, r3
 800a504:	d20b      	bcs.n	800a51e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	607b      	str	r3, [r7, #4]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a51e:	4b0f      	ldr	r3, [pc, #60]	@ (800a55c <vPortValidateInterruptPriority+0x7c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a526:	4b0e      	ldr	r3, [pc, #56]	@ (800a560 <vPortValidateInterruptPriority+0x80>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d90b      	bls.n	800a546 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	603b      	str	r3, [r7, #0]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <vPortValidateInterruptPriority+0x62>
	}
 800a546:	bf00      	nop
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	e000e3f0 	.word	0xe000e3f0
 800a558:	24001114 	.word	0x24001114
 800a55c:	e000ed0c 	.word	0xe000ed0c
 800a560:	24001118 	.word	0x24001118

0800a564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	@ 0x28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a570:	f7fe fada 	bl	8008b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a574:	4b5c      	ldr	r3, [pc, #368]	@ (800a6e8 <pvPortMalloc+0x184>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a57c:	f000 f924 	bl	800a7c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a580:	4b5a      	ldr	r3, [pc, #360]	@ (800a6ec <pvPortMalloc+0x188>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4013      	ands	r3, r2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f040 8095 	bne.w	800a6b8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01e      	beq.n	800a5d2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a594:	2208      	movs	r2, #8
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4413      	add	r3, r2
 800a59a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d015      	beq.n	800a5d2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f023 0307 	bic.w	r3, r3, #7
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00b      	beq.n	800a5d2 <pvPortMalloc+0x6e>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	617b      	str	r3, [r7, #20]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d06f      	beq.n	800a6b8 <pvPortMalloc+0x154>
 800a5d8:	4b45      	ldr	r3, [pc, #276]	@ (800a6f0 <pvPortMalloc+0x18c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d86a      	bhi.n	800a6b8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5e2:	4b44      	ldr	r3, [pc, #272]	@ (800a6f4 <pvPortMalloc+0x190>)
 800a5e4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5e6:	4b43      	ldr	r3, [pc, #268]	@ (800a6f4 <pvPortMalloc+0x190>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ec:	e004      	b.n	800a5f8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d903      	bls.n	800a60a <pvPortMalloc+0xa6>
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1f1      	bne.n	800a5ee <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a60a:	4b37      	ldr	r3, [pc, #220]	@ (800a6e8 <pvPortMalloc+0x184>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a610:	429a      	cmp	r2, r3
 800a612:	d051      	beq.n	800a6b8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2208      	movs	r2, #8
 800a61a:	4413      	add	r3, r2
 800a61c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	2308      	movs	r3, #8
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	429a      	cmp	r2, r3
 800a634:	d920      	bls.n	800a678 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	f003 0307 	and.w	r3, r3, #7
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <pvPortMalloc+0xfc>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	613b      	str	r3, [r7, #16]
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	1ad2      	subs	r2, r2, r3
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a672:	69b8      	ldr	r0, [r7, #24]
 800a674:	f000 f90a 	bl	800a88c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a678:	4b1d      	ldr	r3, [pc, #116]	@ (800a6f0 <pvPortMalloc+0x18c>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f0 <pvPortMalloc+0x18c>)
 800a684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a686:	4b1a      	ldr	r3, [pc, #104]	@ (800a6f0 <pvPortMalloc+0x18c>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f8 <pvPortMalloc+0x194>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d203      	bcs.n	800a69a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a692:	4b17      	ldr	r3, [pc, #92]	@ (800a6f0 <pvPortMalloc+0x18c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a18      	ldr	r2, [pc, #96]	@ (800a6f8 <pvPortMalloc+0x194>)
 800a698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	4b13      	ldr	r3, [pc, #76]	@ (800a6ec <pvPortMalloc+0x188>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6ae:	4b13      	ldr	r3, [pc, #76]	@ (800a6fc <pvPortMalloc+0x198>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	4a11      	ldr	r2, [pc, #68]	@ (800a6fc <pvPortMalloc+0x198>)
 800a6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6b8:	f7fe fa7c 	bl	8008bb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	f003 0307 	and.w	r3, r3, #7
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00b      	beq.n	800a6de <pvPortMalloc+0x17a>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60fb      	str	r3, [r7, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	e7fd      	b.n	800a6da <pvPortMalloc+0x176>
	return pvReturn;
 800a6de:	69fb      	ldr	r3, [r7, #28]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3728      	adds	r7, #40	@ 0x28
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	24004d24 	.word	0x24004d24
 800a6ec:	24004d38 	.word	0x24004d38
 800a6f0:	24004d28 	.word	0x24004d28
 800a6f4:	24004d1c 	.word	0x24004d1c
 800a6f8:	24004d2c 	.word	0x24004d2c
 800a6fc:	24004d30 	.word	0x24004d30

0800a700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d04f      	beq.n	800a7b2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a712:	2308      	movs	r3, #8
 800a714:	425b      	negs	r3, r3
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4413      	add	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	4b25      	ldr	r3, [pc, #148]	@ (800a7bc <vPortFree+0xbc>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4013      	ands	r3, r2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10b      	bne.n	800a746 <vPortFree+0x46>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	60fb      	str	r3, [r7, #12]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <vPortFree+0x66>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	60bb      	str	r3, [r7, #8]
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	e7fd      	b.n	800a762 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	4b14      	ldr	r3, [pc, #80]	@ (800a7bc <vPortFree+0xbc>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4013      	ands	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01e      	beq.n	800a7b2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d11a      	bne.n	800a7b2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	4b0e      	ldr	r3, [pc, #56]	@ (800a7bc <vPortFree+0xbc>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	43db      	mvns	r3, r3
 800a786:	401a      	ands	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a78c:	f7fe f9cc 	bl	8008b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c0 <vPortFree+0xc0>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4413      	add	r3, r2
 800a79a:	4a09      	ldr	r2, [pc, #36]	@ (800a7c0 <vPortFree+0xc0>)
 800a79c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a79e:	6938      	ldr	r0, [r7, #16]
 800a7a0:	f000 f874 	bl	800a88c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7a4:	4b07      	ldr	r3, [pc, #28]	@ (800a7c4 <vPortFree+0xc4>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	4a06      	ldr	r2, [pc, #24]	@ (800a7c4 <vPortFree+0xc4>)
 800a7ac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ae:	f7fe fa01 	bl	8008bb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7b2:	bf00      	nop
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	24004d38 	.word	0x24004d38
 800a7c0:	24004d28 	.word	0x24004d28
 800a7c4:	24004d34 	.word	0x24004d34

0800a7c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7ce:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7d4:	4b27      	ldr	r3, [pc, #156]	@ (800a874 <prvHeapInit+0xac>)
 800a7d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00c      	beq.n	800a7fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3307      	adds	r3, #7
 800a7e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0307 	bic.w	r3, r3, #7
 800a7ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	4a1f      	ldr	r2, [pc, #124]	@ (800a874 <prvHeapInit+0xac>)
 800a7f8:	4413      	add	r3, r2
 800a7fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a800:	4a1d      	ldr	r2, [pc, #116]	@ (800a878 <prvHeapInit+0xb0>)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a806:	4b1c      	ldr	r3, [pc, #112]	@ (800a878 <prvHeapInit+0xb0>)
 800a808:	2200      	movs	r2, #0
 800a80a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4413      	add	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a814:	2208      	movs	r2, #8
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0307 	bic.w	r3, r3, #7
 800a822:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4a15      	ldr	r2, [pc, #84]	@ (800a87c <prvHeapInit+0xb4>)
 800a828:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a82a:	4b14      	ldr	r3, [pc, #80]	@ (800a87c <prvHeapInit+0xb4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a832:	4b12      	ldr	r3, [pc, #72]	@ (800a87c <prvHeapInit+0xb4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	1ad2      	subs	r2, r2, r3
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a848:	4b0c      	ldr	r3, [pc, #48]	@ (800a87c <prvHeapInit+0xb4>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4a0a      	ldr	r2, [pc, #40]	@ (800a880 <prvHeapInit+0xb8>)
 800a856:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4a09      	ldr	r2, [pc, #36]	@ (800a884 <prvHeapInit+0xbc>)
 800a85e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a860:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <prvHeapInit+0xc0>)
 800a862:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a866:	601a      	str	r2, [r3, #0]
}
 800a868:	bf00      	nop
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	2400111c 	.word	0x2400111c
 800a878:	24004d1c 	.word	0x24004d1c
 800a87c:	24004d24 	.word	0x24004d24
 800a880:	24004d2c 	.word	0x24004d2c
 800a884:	24004d28 	.word	0x24004d28
 800a888:	24004d38 	.word	0x24004d38

0800a88c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a894:	4b28      	ldr	r3, [pc, #160]	@ (800a938 <prvInsertBlockIntoFreeList+0xac>)
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e002      	b.n	800a8a0 <prvInsertBlockIntoFreeList+0x14>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d8f7      	bhi.n	800a89a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d108      	bne.n	800a8ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	441a      	add	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	441a      	add	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d118      	bne.n	800a914 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	4b15      	ldr	r3, [pc, #84]	@ (800a93c <prvInsertBlockIntoFreeList+0xb0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d00d      	beq.n	800a90a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	441a      	add	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e008      	b.n	800a91c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a90a:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <prvInsertBlockIntoFreeList+0xb0>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	e003      	b.n	800a91c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d002      	beq.n	800a92a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a92a:	bf00      	nop
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	24004d1c 	.word	0x24004d1c
 800a93c:	24004d24 	.word	0x24004d24

0800a940 <_ZdlPvj>:
 800a940:	f000 b815 	b.w	800a96e <_ZdlPv>

0800a944 <_ZdaPv>:
 800a944:	f000 b813 	b.w	800a96e <_ZdlPv>

0800a948 <_Znwj>:
 800a948:	2801      	cmp	r0, #1
 800a94a:	bf38      	it	cc
 800a94c:	2001      	movcc	r0, #1
 800a94e:	b510      	push	{r4, lr}
 800a950:	4604      	mov	r4, r0
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f83c 	bl	800a9d0 <malloc>
 800a958:	b100      	cbz	r0, 800a95c <_Znwj+0x14>
 800a95a:	bd10      	pop	{r4, pc}
 800a95c:	f000 f80a 	bl	800a974 <_ZSt15get_new_handlerv>
 800a960:	b908      	cbnz	r0, 800a966 <_Znwj+0x1e>
 800a962:	f000 f80f 	bl	800a984 <abort>
 800a966:	4780      	blx	r0
 800a968:	e7f3      	b.n	800a952 <_Znwj+0xa>

0800a96a <_Znaj>:
 800a96a:	f7ff bfed 	b.w	800a948 <_Znwj>

0800a96e <_ZdlPv>:
 800a96e:	f000 b837 	b.w	800a9e0 <free>
	...

0800a974 <_ZSt15get_new_handlerv>:
 800a974:	4b02      	ldr	r3, [pc, #8]	@ (800a980 <_ZSt15get_new_handlerv+0xc>)
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	f3bf 8f5b 	dmb	ish
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	24004d3c 	.word	0x24004d3c

0800a984 <abort>:
 800a984:	b508      	push	{r3, lr}
 800a986:	2006      	movs	r0, #6
 800a988:	f001 f98e 	bl	800bca8 <raise>
 800a98c:	2001      	movs	r0, #1
 800a98e:	f7f6 fcaf 	bl	80012f0 <_exit>
	...

0800a994 <__assert_func>:
 800a994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a996:	4614      	mov	r4, r2
 800a998:	461a      	mov	r2, r3
 800a99a:	4b09      	ldr	r3, [pc, #36]	@ (800a9c0 <__assert_func+0x2c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4605      	mov	r5, r0
 800a9a0:	68d8      	ldr	r0, [r3, #12]
 800a9a2:	b954      	cbnz	r4, 800a9ba <__assert_func+0x26>
 800a9a4:	4b07      	ldr	r3, [pc, #28]	@ (800a9c4 <__assert_func+0x30>)
 800a9a6:	461c      	mov	r4, r3
 800a9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9ac:	9100      	str	r1, [sp, #0]
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	4905      	ldr	r1, [pc, #20]	@ (800a9c8 <__assert_func+0x34>)
 800a9b2:	f000 ffb1 	bl	800b918 <fiprintf>
 800a9b6:	f7ff ffe5 	bl	800a984 <abort>
 800a9ba:	4b04      	ldr	r3, [pc, #16]	@ (800a9cc <__assert_func+0x38>)
 800a9bc:	e7f4      	b.n	800a9a8 <__assert_func+0x14>
 800a9be:	bf00      	nop
 800a9c0:	24000020 	.word	0x24000020
 800a9c4:	0800f2cf 	.word	0x0800f2cf
 800a9c8:	0800f2a1 	.word	0x0800f2a1
 800a9cc:	0800f294 	.word	0x0800f294

0800a9d0 <malloc>:
 800a9d0:	4b02      	ldr	r3, [pc, #8]	@ (800a9dc <malloc+0xc>)
 800a9d2:	4601      	mov	r1, r0
 800a9d4:	6818      	ldr	r0, [r3, #0]
 800a9d6:	f000 b82d 	b.w	800aa34 <_malloc_r>
 800a9da:	bf00      	nop
 800a9dc:	24000020 	.word	0x24000020

0800a9e0 <free>:
 800a9e0:	4b02      	ldr	r3, [pc, #8]	@ (800a9ec <free+0xc>)
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	f002 b84d 	b.w	800ca84 <_free_r>
 800a9ea:	bf00      	nop
 800a9ec:	24000020 	.word	0x24000020

0800a9f0 <sbrk_aligned>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	4e0f      	ldr	r6, [pc, #60]	@ (800aa30 <sbrk_aligned+0x40>)
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	6831      	ldr	r1, [r6, #0]
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	b911      	cbnz	r1, 800aa02 <sbrk_aligned+0x12>
 800a9fc:	f001 f9fe 	bl	800bdfc <_sbrk_r>
 800aa00:	6030      	str	r0, [r6, #0]
 800aa02:	4621      	mov	r1, r4
 800aa04:	4628      	mov	r0, r5
 800aa06:	f001 f9f9 	bl	800bdfc <_sbrk_r>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	d103      	bne.n	800aa16 <sbrk_aligned+0x26>
 800aa0e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa12:	4620      	mov	r0, r4
 800aa14:	bd70      	pop	{r4, r5, r6, pc}
 800aa16:	1cc4      	adds	r4, r0, #3
 800aa18:	f024 0403 	bic.w	r4, r4, #3
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	d0f8      	beq.n	800aa12 <sbrk_aligned+0x22>
 800aa20:	1a21      	subs	r1, r4, r0
 800aa22:	4628      	mov	r0, r5
 800aa24:	f001 f9ea 	bl	800bdfc <_sbrk_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d1f2      	bne.n	800aa12 <sbrk_aligned+0x22>
 800aa2c:	e7ef      	b.n	800aa0e <sbrk_aligned+0x1e>
 800aa2e:	bf00      	nop
 800aa30:	24004d40 	.word	0x24004d40

0800aa34 <_malloc_r>:
 800aa34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa38:	1ccd      	adds	r5, r1, #3
 800aa3a:	f025 0503 	bic.w	r5, r5, #3
 800aa3e:	3508      	adds	r5, #8
 800aa40:	2d0c      	cmp	r5, #12
 800aa42:	bf38      	it	cc
 800aa44:	250c      	movcc	r5, #12
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	4606      	mov	r6, r0
 800aa4a:	db01      	blt.n	800aa50 <_malloc_r+0x1c>
 800aa4c:	42a9      	cmp	r1, r5
 800aa4e:	d904      	bls.n	800aa5a <_malloc_r+0x26>
 800aa50:	230c      	movs	r3, #12
 800aa52:	6033      	str	r3, [r6, #0]
 800aa54:	2000      	movs	r0, #0
 800aa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab30 <_malloc_r+0xfc>
 800aa5e:	f000 f869 	bl	800ab34 <__malloc_lock>
 800aa62:	f8d8 3000 	ldr.w	r3, [r8]
 800aa66:	461c      	mov	r4, r3
 800aa68:	bb44      	cbnz	r4, 800aabc <_malloc_r+0x88>
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7ff ffbf 	bl	800a9f0 <sbrk_aligned>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	4604      	mov	r4, r0
 800aa76:	d158      	bne.n	800ab2a <_malloc_r+0xf6>
 800aa78:	f8d8 4000 	ldr.w	r4, [r8]
 800aa7c:	4627      	mov	r7, r4
 800aa7e:	2f00      	cmp	r7, #0
 800aa80:	d143      	bne.n	800ab0a <_malloc_r+0xd6>
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	d04b      	beq.n	800ab1e <_malloc_r+0xea>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	4639      	mov	r1, r7
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	eb04 0903 	add.w	r9, r4, r3
 800aa90:	f001 f9b4 	bl	800bdfc <_sbrk_r>
 800aa94:	4581      	cmp	r9, r0
 800aa96:	d142      	bne.n	800ab1e <_malloc_r+0xea>
 800aa98:	6821      	ldr	r1, [r4, #0]
 800aa9a:	1a6d      	subs	r5, r5, r1
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f7ff ffa6 	bl	800a9f0 <sbrk_aligned>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d03a      	beq.n	800ab1e <_malloc_r+0xea>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	442b      	add	r3, r5
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	f8d8 3000 	ldr.w	r3, [r8]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	bb62      	cbnz	r2, 800ab10 <_malloc_r+0xdc>
 800aab6:	f8c8 7000 	str.w	r7, [r8]
 800aaba:	e00f      	b.n	800aadc <_malloc_r+0xa8>
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	1b52      	subs	r2, r2, r5
 800aac0:	d420      	bmi.n	800ab04 <_malloc_r+0xd0>
 800aac2:	2a0b      	cmp	r2, #11
 800aac4:	d917      	bls.n	800aaf6 <_malloc_r+0xc2>
 800aac6:	1961      	adds	r1, r4, r5
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	6025      	str	r5, [r4, #0]
 800aacc:	bf18      	it	ne
 800aace:	6059      	strne	r1, [r3, #4]
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	bf08      	it	eq
 800aad4:	f8c8 1000 	streq.w	r1, [r8]
 800aad8:	5162      	str	r2, [r4, r5]
 800aada:	604b      	str	r3, [r1, #4]
 800aadc:	4630      	mov	r0, r6
 800aade:	f000 f82f 	bl	800ab40 <__malloc_unlock>
 800aae2:	f104 000b 	add.w	r0, r4, #11
 800aae6:	1d23      	adds	r3, r4, #4
 800aae8:	f020 0007 	bic.w	r0, r0, #7
 800aaec:	1ac2      	subs	r2, r0, r3
 800aaee:	bf1c      	itt	ne
 800aaf0:	1a1b      	subne	r3, r3, r0
 800aaf2:	50a3      	strne	r3, [r4, r2]
 800aaf4:	e7af      	b.n	800aa56 <_malloc_r+0x22>
 800aaf6:	6862      	ldr	r2, [r4, #4]
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	bf0c      	ite	eq
 800aafc:	f8c8 2000 	streq.w	r2, [r8]
 800ab00:	605a      	strne	r2, [r3, #4]
 800ab02:	e7eb      	b.n	800aadc <_malloc_r+0xa8>
 800ab04:	4623      	mov	r3, r4
 800ab06:	6864      	ldr	r4, [r4, #4]
 800ab08:	e7ae      	b.n	800aa68 <_malloc_r+0x34>
 800ab0a:	463c      	mov	r4, r7
 800ab0c:	687f      	ldr	r7, [r7, #4]
 800ab0e:	e7b6      	b.n	800aa7e <_malloc_r+0x4a>
 800ab10:	461a      	mov	r2, r3
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d1fb      	bne.n	800ab10 <_malloc_r+0xdc>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6053      	str	r3, [r2, #4]
 800ab1c:	e7de      	b.n	800aadc <_malloc_r+0xa8>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	6033      	str	r3, [r6, #0]
 800ab22:	4630      	mov	r0, r6
 800ab24:	f000 f80c 	bl	800ab40 <__malloc_unlock>
 800ab28:	e794      	b.n	800aa54 <_malloc_r+0x20>
 800ab2a:	6005      	str	r5, [r0, #0]
 800ab2c:	e7d6      	b.n	800aadc <_malloc_r+0xa8>
 800ab2e:	bf00      	nop
 800ab30:	24004d44 	.word	0x24004d44

0800ab34 <__malloc_lock>:
 800ab34:	4801      	ldr	r0, [pc, #4]	@ (800ab3c <__malloc_lock+0x8>)
 800ab36:	f001 b9ae 	b.w	800be96 <__retarget_lock_acquire_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	24004e88 	.word	0x24004e88

0800ab40 <__malloc_unlock>:
 800ab40:	4801      	ldr	r0, [pc, #4]	@ (800ab48 <__malloc_unlock+0x8>)
 800ab42:	f001 b9a9 	b.w	800be98 <__retarget_lock_release_recursive>
 800ab46:	bf00      	nop
 800ab48:	24004e88 	.word	0x24004e88

0800ab4c <__cvt>:
 800ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4e:	ed2d 8b02 	vpush	{d8}
 800ab52:	eeb0 8b40 	vmov.f64	d8, d0
 800ab56:	b085      	sub	sp, #20
 800ab58:	4617      	mov	r7, r2
 800ab5a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ab5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab5e:	ee18 2a90 	vmov	r2, s17
 800ab62:	f025 0520 	bic.w	r5, r5, #32
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	bfb6      	itet	lt
 800ab6a:	222d      	movlt	r2, #45	@ 0x2d
 800ab6c:	2200      	movge	r2, #0
 800ab6e:	eeb1 8b40 	vneglt.f64	d8, d0
 800ab72:	2d46      	cmp	r5, #70	@ 0x46
 800ab74:	460c      	mov	r4, r1
 800ab76:	701a      	strb	r2, [r3, #0]
 800ab78:	d004      	beq.n	800ab84 <__cvt+0x38>
 800ab7a:	2d45      	cmp	r5, #69	@ 0x45
 800ab7c:	d100      	bne.n	800ab80 <__cvt+0x34>
 800ab7e:	3401      	adds	r4, #1
 800ab80:	2102      	movs	r1, #2
 800ab82:	e000      	b.n	800ab86 <__cvt+0x3a>
 800ab84:	2103      	movs	r1, #3
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9301      	str	r3, [sp, #4]
 800ab8a:	ab02      	add	r3, sp, #8
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4633      	mov	r3, r6
 800ab92:	eeb0 0b48 	vmov.f64	d0, d8
 800ab96:	f001 fa1f 	bl	800bfd8 <_dtoa_r>
 800ab9a:	2d47      	cmp	r5, #71	@ 0x47
 800ab9c:	d114      	bne.n	800abc8 <__cvt+0x7c>
 800ab9e:	07fb      	lsls	r3, r7, #31
 800aba0:	d50a      	bpl.n	800abb8 <__cvt+0x6c>
 800aba2:	1902      	adds	r2, r0, r4
 800aba4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abac:	bf08      	it	eq
 800abae:	9203      	streq	r2, [sp, #12]
 800abb0:	2130      	movs	r1, #48	@ 0x30
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d319      	bcc.n	800abec <__cvt+0xa0>
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abbc:	1a1b      	subs	r3, r3, r0
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	b005      	add	sp, #20
 800abc2:	ecbd 8b02 	vpop	{d8}
 800abc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc8:	2d46      	cmp	r5, #70	@ 0x46
 800abca:	eb00 0204 	add.w	r2, r0, r4
 800abce:	d1e9      	bne.n	800aba4 <__cvt+0x58>
 800abd0:	7803      	ldrb	r3, [r0, #0]
 800abd2:	2b30      	cmp	r3, #48	@ 0x30
 800abd4:	d107      	bne.n	800abe6 <__cvt+0x9a>
 800abd6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abde:	bf1c      	itt	ne
 800abe0:	f1c4 0401 	rsbne	r4, r4, #1
 800abe4:	6034      	strne	r4, [r6, #0]
 800abe6:	6833      	ldr	r3, [r6, #0]
 800abe8:	441a      	add	r2, r3
 800abea:	e7db      	b.n	800aba4 <__cvt+0x58>
 800abec:	1c5c      	adds	r4, r3, #1
 800abee:	9403      	str	r4, [sp, #12]
 800abf0:	7019      	strb	r1, [r3, #0]
 800abf2:	e7de      	b.n	800abb2 <__cvt+0x66>

0800abf4 <__exponent>:
 800abf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf6:	2900      	cmp	r1, #0
 800abf8:	bfba      	itte	lt
 800abfa:	4249      	neglt	r1, r1
 800abfc:	232d      	movlt	r3, #45	@ 0x2d
 800abfe:	232b      	movge	r3, #43	@ 0x2b
 800ac00:	2909      	cmp	r1, #9
 800ac02:	7002      	strb	r2, [r0, #0]
 800ac04:	7043      	strb	r3, [r0, #1]
 800ac06:	dd29      	ble.n	800ac5c <__exponent+0x68>
 800ac08:	f10d 0307 	add.w	r3, sp, #7
 800ac0c:	461d      	mov	r5, r3
 800ac0e:	270a      	movs	r7, #10
 800ac10:	461a      	mov	r2, r3
 800ac12:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac16:	fb07 1416 	mls	r4, r7, r6, r1
 800ac1a:	3430      	adds	r4, #48	@ 0x30
 800ac1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac20:	460c      	mov	r4, r1
 800ac22:	2c63      	cmp	r4, #99	@ 0x63
 800ac24:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac28:	4631      	mov	r1, r6
 800ac2a:	dcf1      	bgt.n	800ac10 <__exponent+0x1c>
 800ac2c:	3130      	adds	r1, #48	@ 0x30
 800ac2e:	1e94      	subs	r4, r2, #2
 800ac30:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac34:	1c41      	adds	r1, r0, #1
 800ac36:	4623      	mov	r3, r4
 800ac38:	42ab      	cmp	r3, r5
 800ac3a:	d30a      	bcc.n	800ac52 <__exponent+0x5e>
 800ac3c:	f10d 0309 	add.w	r3, sp, #9
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	42ac      	cmp	r4, r5
 800ac44:	bf88      	it	hi
 800ac46:	2300      	movhi	r3, #0
 800ac48:	3302      	adds	r3, #2
 800ac4a:	4403      	add	r3, r0
 800ac4c:	1a18      	subs	r0, r3, r0
 800ac4e:	b003      	add	sp, #12
 800ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac52:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac56:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac5a:	e7ed      	b.n	800ac38 <__exponent+0x44>
 800ac5c:	2330      	movs	r3, #48	@ 0x30
 800ac5e:	3130      	adds	r1, #48	@ 0x30
 800ac60:	7083      	strb	r3, [r0, #2]
 800ac62:	70c1      	strb	r1, [r0, #3]
 800ac64:	1d03      	adds	r3, r0, #4
 800ac66:	e7f1      	b.n	800ac4c <__exponent+0x58>

0800ac68 <_printf_float>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	b08d      	sub	sp, #52	@ 0x34
 800ac6e:	460c      	mov	r4, r1
 800ac70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac74:	4616      	mov	r6, r2
 800ac76:	461f      	mov	r7, r3
 800ac78:	4605      	mov	r5, r0
 800ac7a:	f001 f81d 	bl	800bcb8 <_localeconv_r>
 800ac7e:	f8d0 b000 	ldr.w	fp, [r0]
 800ac82:	4658      	mov	r0, fp
 800ac84:	f7f5 fb84 	bl	8000390 <strlen>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ac94:	6822      	ldr	r2, [r4, #0]
 800ac96:	9005      	str	r0, [sp, #20]
 800ac98:	3307      	adds	r3, #7
 800ac9a:	f023 0307 	bic.w	r3, r3, #7
 800ac9e:	f103 0108 	add.w	r1, r3, #8
 800aca2:	f8c8 1000 	str.w	r1, [r8]
 800aca6:	ed93 0b00 	vldr	d0, [r3]
 800acaa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800af08 <_printf_float+0x2a0>
 800acae:	eeb0 7bc0 	vabs.f64	d7, d0
 800acb2:	eeb4 7b46 	vcmp.f64	d7, d6
 800acb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800acbe:	dd24      	ble.n	800ad0a <_printf_float+0xa2>
 800acc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800acc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc8:	d502      	bpl.n	800acd0 <_printf_float+0x68>
 800acca:	232d      	movs	r3, #45	@ 0x2d
 800accc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd0:	498f      	ldr	r1, [pc, #572]	@ (800af10 <_printf_float+0x2a8>)
 800acd2:	4b90      	ldr	r3, [pc, #576]	@ (800af14 <_printf_float+0x2ac>)
 800acd4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800acd8:	bf94      	ite	ls
 800acda:	4688      	movls	r8, r1
 800acdc:	4698      	movhi	r8, r3
 800acde:	f022 0204 	bic.w	r2, r2, #4
 800ace2:	2303      	movs	r3, #3
 800ace4:	6123      	str	r3, [r4, #16]
 800ace6:	6022      	str	r2, [r4, #0]
 800ace8:	f04f 0a00 	mov.w	sl, #0
 800acec:	9700      	str	r7, [sp, #0]
 800acee:	4633      	mov	r3, r6
 800acf0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800acf2:	4621      	mov	r1, r4
 800acf4:	4628      	mov	r0, r5
 800acf6:	f000 f9d1 	bl	800b09c <_printf_common>
 800acfa:	3001      	adds	r0, #1
 800acfc:	f040 8089 	bne.w	800ae12 <_printf_float+0x1aa>
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	b00d      	add	sp, #52	@ 0x34
 800ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ad0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad12:	d709      	bvc.n	800ad28 <_printf_float+0xc0>
 800ad14:	ee10 3a90 	vmov	r3, s1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfbc      	itt	lt
 800ad1c:	232d      	movlt	r3, #45	@ 0x2d
 800ad1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad22:	497d      	ldr	r1, [pc, #500]	@ (800af18 <_printf_float+0x2b0>)
 800ad24:	4b7d      	ldr	r3, [pc, #500]	@ (800af1c <_printf_float+0x2b4>)
 800ad26:	e7d5      	b.n	800acd4 <_printf_float+0x6c>
 800ad28:	6863      	ldr	r3, [r4, #4]
 800ad2a:	1c59      	adds	r1, r3, #1
 800ad2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ad30:	d139      	bne.n	800ada6 <_printf_float+0x13e>
 800ad32:	2306      	movs	r3, #6
 800ad34:	6063      	str	r3, [r4, #4]
 800ad36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6022      	str	r2, [r4, #0]
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ad46:	ab09      	add	r3, sp, #36	@ 0x24
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	6861      	ldr	r1, [r4, #4]
 800ad4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad50:	4628      	mov	r0, r5
 800ad52:	f7ff fefb 	bl	800ab4c <__cvt>
 800ad56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	d129      	bne.n	800adb4 <_printf_float+0x14c>
 800ad60:	1cc8      	adds	r0, r1, #3
 800ad62:	db02      	blt.n	800ad6a <_printf_float+0x102>
 800ad64:	6863      	ldr	r3, [r4, #4]
 800ad66:	4299      	cmp	r1, r3
 800ad68:	dd41      	ble.n	800adee <_printf_float+0x186>
 800ad6a:	f1a9 0902 	sub.w	r9, r9, #2
 800ad6e:	fa5f f989 	uxtb.w	r9, r9
 800ad72:	3901      	subs	r1, #1
 800ad74:	464a      	mov	r2, r9
 800ad76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad7c:	f7ff ff3a 	bl	800abf4 <__exponent>
 800ad80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad82:	1813      	adds	r3, r2, r0
 800ad84:	2a01      	cmp	r2, #1
 800ad86:	4682      	mov	sl, r0
 800ad88:	6123      	str	r3, [r4, #16]
 800ad8a:	dc02      	bgt.n	800ad92 <_printf_float+0x12a>
 800ad8c:	6822      	ldr	r2, [r4, #0]
 800ad8e:	07d2      	lsls	r2, r2, #31
 800ad90:	d501      	bpl.n	800ad96 <_printf_float+0x12e>
 800ad92:	3301      	adds	r3, #1
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0a6      	beq.n	800acec <_printf_float+0x84>
 800ad9e:	232d      	movs	r3, #45	@ 0x2d
 800ada0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ada4:	e7a2      	b.n	800acec <_printf_float+0x84>
 800ada6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adaa:	d1c4      	bne.n	800ad36 <_printf_float+0xce>
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1c2      	bne.n	800ad36 <_printf_float+0xce>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7bf      	b.n	800ad34 <_printf_float+0xcc>
 800adb4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800adb8:	d9db      	bls.n	800ad72 <_printf_float+0x10a>
 800adba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800adbe:	d118      	bne.n	800adf2 <_printf_float+0x18a>
 800adc0:	2900      	cmp	r1, #0
 800adc2:	6863      	ldr	r3, [r4, #4]
 800adc4:	dd0b      	ble.n	800adde <_printf_float+0x176>
 800adc6:	6121      	str	r1, [r4, #16]
 800adc8:	b913      	cbnz	r3, 800add0 <_printf_float+0x168>
 800adca:	6822      	ldr	r2, [r4, #0]
 800adcc:	07d0      	lsls	r0, r2, #31
 800adce:	d502      	bpl.n	800add6 <_printf_float+0x16e>
 800add0:	3301      	adds	r3, #1
 800add2:	440b      	add	r3, r1
 800add4:	6123      	str	r3, [r4, #16]
 800add6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800add8:	f04f 0a00 	mov.w	sl, #0
 800addc:	e7db      	b.n	800ad96 <_printf_float+0x12e>
 800adde:	b913      	cbnz	r3, 800ade6 <_printf_float+0x17e>
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	07d2      	lsls	r2, r2, #31
 800ade4:	d501      	bpl.n	800adea <_printf_float+0x182>
 800ade6:	3302      	adds	r3, #2
 800ade8:	e7f4      	b.n	800add4 <_printf_float+0x16c>
 800adea:	2301      	movs	r3, #1
 800adec:	e7f2      	b.n	800add4 <_printf_float+0x16c>
 800adee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800adf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf4:	4299      	cmp	r1, r3
 800adf6:	db05      	blt.n	800ae04 <_printf_float+0x19c>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	6121      	str	r1, [r4, #16]
 800adfc:	07d8      	lsls	r0, r3, #31
 800adfe:	d5ea      	bpl.n	800add6 <_printf_float+0x16e>
 800ae00:	1c4b      	adds	r3, r1, #1
 800ae02:	e7e7      	b.n	800add4 <_printf_float+0x16c>
 800ae04:	2900      	cmp	r1, #0
 800ae06:	bfd4      	ite	le
 800ae08:	f1c1 0202 	rsble	r2, r1, #2
 800ae0c:	2201      	movgt	r2, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	e7e0      	b.n	800add4 <_printf_float+0x16c>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	055a      	lsls	r2, r3, #21
 800ae16:	d407      	bmi.n	800ae28 <_printf_float+0x1c0>
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4628      	mov	r0, r5
 800ae20:	47b8      	blx	r7
 800ae22:	3001      	adds	r0, #1
 800ae24:	d12a      	bne.n	800ae7c <_printf_float+0x214>
 800ae26:	e76b      	b.n	800ad00 <_printf_float+0x98>
 800ae28:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ae2c:	f240 80e0 	bls.w	800aff0 <_printf_float+0x388>
 800ae30:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ae34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3c:	d133      	bne.n	800aea6 <_printf_float+0x23e>
 800ae3e:	4a38      	ldr	r2, [pc, #224]	@ (800af20 <_printf_float+0x2b8>)
 800ae40:	2301      	movs	r3, #1
 800ae42:	4631      	mov	r1, r6
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b8      	blx	r7
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f43f af59 	beq.w	800ad00 <_printf_float+0x98>
 800ae4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae52:	4543      	cmp	r3, r8
 800ae54:	db02      	blt.n	800ae5c <_printf_float+0x1f4>
 800ae56:	6823      	ldr	r3, [r4, #0]
 800ae58:	07d8      	lsls	r0, r3, #31
 800ae5a:	d50f      	bpl.n	800ae7c <_printf_float+0x214>
 800ae5c:	9b05      	ldr	r3, [sp, #20]
 800ae5e:	465a      	mov	r2, fp
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	3001      	adds	r0, #1
 800ae68:	f43f af4a 	beq.w	800ad00 <_printf_float+0x98>
 800ae6c:	f04f 0900 	mov.w	r9, #0
 800ae70:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae74:	f104 0a1a 	add.w	sl, r4, #26
 800ae78:	45c8      	cmp	r8, r9
 800ae7a:	dc09      	bgt.n	800ae90 <_printf_float+0x228>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	079b      	lsls	r3, r3, #30
 800ae80:	f100 8107 	bmi.w	800b092 <_printf_float+0x42a>
 800ae84:	68e0      	ldr	r0, [r4, #12]
 800ae86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae88:	4298      	cmp	r0, r3
 800ae8a:	bfb8      	it	lt
 800ae8c:	4618      	movlt	r0, r3
 800ae8e:	e739      	b.n	800ad04 <_printf_float+0x9c>
 800ae90:	2301      	movs	r3, #1
 800ae92:	4652      	mov	r2, sl
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f43f af30 	beq.w	800ad00 <_printf_float+0x98>
 800aea0:	f109 0901 	add.w	r9, r9, #1
 800aea4:	e7e8      	b.n	800ae78 <_printf_float+0x210>
 800aea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc3b      	bgt.n	800af24 <_printf_float+0x2bc>
 800aeac:	4a1c      	ldr	r2, [pc, #112]	@ (800af20 <_printf_float+0x2b8>)
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f43f af22 	beq.w	800ad00 <_printf_float+0x98>
 800aebc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aec0:	ea59 0303 	orrs.w	r3, r9, r3
 800aec4:	d102      	bne.n	800aecc <_printf_float+0x264>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	07d9      	lsls	r1, r3, #31
 800aeca:	d5d7      	bpl.n	800ae7c <_printf_float+0x214>
 800aecc:	9b05      	ldr	r3, [sp, #20]
 800aece:	465a      	mov	r2, fp
 800aed0:	4631      	mov	r1, r6
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b8      	blx	r7
 800aed6:	3001      	adds	r0, #1
 800aed8:	f43f af12 	beq.w	800ad00 <_printf_float+0x98>
 800aedc:	f04f 0a00 	mov.w	sl, #0
 800aee0:	f104 0b1a 	add.w	fp, r4, #26
 800aee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee6:	425b      	negs	r3, r3
 800aee8:	4553      	cmp	r3, sl
 800aeea:	dc01      	bgt.n	800aef0 <_printf_float+0x288>
 800aeec:	464b      	mov	r3, r9
 800aeee:	e794      	b.n	800ae1a <_printf_float+0x1b2>
 800aef0:	2301      	movs	r3, #1
 800aef2:	465a      	mov	r2, fp
 800aef4:	4631      	mov	r1, r6
 800aef6:	4628      	mov	r0, r5
 800aef8:	47b8      	blx	r7
 800aefa:	3001      	adds	r0, #1
 800aefc:	f43f af00 	beq.w	800ad00 <_printf_float+0x98>
 800af00:	f10a 0a01 	add.w	sl, sl, #1
 800af04:	e7ee      	b.n	800aee4 <_printf_float+0x27c>
 800af06:	bf00      	nop
 800af08:	ffffffff 	.word	0xffffffff
 800af0c:	7fefffff 	.word	0x7fefffff
 800af10:	0800f2d0 	.word	0x0800f2d0
 800af14:	0800f2d4 	.word	0x0800f2d4
 800af18:	0800f2d8 	.word	0x0800f2d8
 800af1c:	0800f2dc 	.word	0x0800f2dc
 800af20:	0800f2e0 	.word	0x0800f2e0
 800af24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af2a:	4553      	cmp	r3, sl
 800af2c:	bfa8      	it	ge
 800af2e:	4653      	movge	r3, sl
 800af30:	2b00      	cmp	r3, #0
 800af32:	4699      	mov	r9, r3
 800af34:	dc37      	bgt.n	800afa6 <_printf_float+0x33e>
 800af36:	2300      	movs	r3, #0
 800af38:	9307      	str	r3, [sp, #28]
 800af3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af3e:	f104 021a 	add.w	r2, r4, #26
 800af42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af44:	9907      	ldr	r1, [sp, #28]
 800af46:	9306      	str	r3, [sp, #24]
 800af48:	eba3 0309 	sub.w	r3, r3, r9
 800af4c:	428b      	cmp	r3, r1
 800af4e:	dc31      	bgt.n	800afb4 <_printf_float+0x34c>
 800af50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af52:	459a      	cmp	sl, r3
 800af54:	dc3b      	bgt.n	800afce <_printf_float+0x366>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	07da      	lsls	r2, r3, #31
 800af5a:	d438      	bmi.n	800afce <_printf_float+0x366>
 800af5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af5e:	ebaa 0903 	sub.w	r9, sl, r3
 800af62:	9b06      	ldr	r3, [sp, #24]
 800af64:	ebaa 0303 	sub.w	r3, sl, r3
 800af68:	4599      	cmp	r9, r3
 800af6a:	bfa8      	it	ge
 800af6c:	4699      	movge	r9, r3
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	dc34      	bgt.n	800afde <_printf_float+0x376>
 800af74:	f04f 0800 	mov.w	r8, #0
 800af78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af7c:	f104 0b1a 	add.w	fp, r4, #26
 800af80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af82:	ebaa 0303 	sub.w	r3, sl, r3
 800af86:	eba3 0309 	sub.w	r3, r3, r9
 800af8a:	4543      	cmp	r3, r8
 800af8c:	f77f af76 	ble.w	800ae7c <_printf_float+0x214>
 800af90:	2301      	movs	r3, #1
 800af92:	465a      	mov	r2, fp
 800af94:	4631      	mov	r1, r6
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	f43f aeb0 	beq.w	800ad00 <_printf_float+0x98>
 800afa0:	f108 0801 	add.w	r8, r8, #1
 800afa4:	e7ec      	b.n	800af80 <_printf_float+0x318>
 800afa6:	4642      	mov	r2, r8
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	47b8      	blx	r7
 800afae:	3001      	adds	r0, #1
 800afb0:	d1c1      	bne.n	800af36 <_printf_float+0x2ce>
 800afb2:	e6a5      	b.n	800ad00 <_printf_float+0x98>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4631      	mov	r1, r6
 800afb8:	4628      	mov	r0, r5
 800afba:	9206      	str	r2, [sp, #24]
 800afbc:	47b8      	blx	r7
 800afbe:	3001      	adds	r0, #1
 800afc0:	f43f ae9e 	beq.w	800ad00 <_printf_float+0x98>
 800afc4:	9b07      	ldr	r3, [sp, #28]
 800afc6:	9a06      	ldr	r2, [sp, #24]
 800afc8:	3301      	adds	r3, #1
 800afca:	9307      	str	r3, [sp, #28]
 800afcc:	e7b9      	b.n	800af42 <_printf_float+0x2da>
 800afce:	9b05      	ldr	r3, [sp, #20]
 800afd0:	465a      	mov	r2, fp
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	d1bf      	bne.n	800af5c <_printf_float+0x2f4>
 800afdc:	e690      	b.n	800ad00 <_printf_float+0x98>
 800afde:	9a06      	ldr	r2, [sp, #24]
 800afe0:	464b      	mov	r3, r9
 800afe2:	4442      	add	r2, r8
 800afe4:	4631      	mov	r1, r6
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b8      	blx	r7
 800afea:	3001      	adds	r0, #1
 800afec:	d1c2      	bne.n	800af74 <_printf_float+0x30c>
 800afee:	e687      	b.n	800ad00 <_printf_float+0x98>
 800aff0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aff4:	f1b9 0f01 	cmp.w	r9, #1
 800aff8:	dc01      	bgt.n	800affe <_printf_float+0x396>
 800affa:	07db      	lsls	r3, r3, #31
 800affc:	d536      	bpl.n	800b06c <_printf_float+0x404>
 800affe:	2301      	movs	r3, #1
 800b000:	4642      	mov	r2, r8
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae79 	beq.w	800ad00 <_printf_float+0x98>
 800b00e:	9b05      	ldr	r3, [sp, #20]
 800b010:	465a      	mov	r2, fp
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	f43f ae71 	beq.w	800ad00 <_printf_float+0x98>
 800b01e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b022:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b02e:	d018      	beq.n	800b062 <_printf_float+0x3fa>
 800b030:	464b      	mov	r3, r9
 800b032:	f108 0201 	add.w	r2, r8, #1
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	d10c      	bne.n	800b05a <_printf_float+0x3f2>
 800b040:	e65e      	b.n	800ad00 <_printf_float+0x98>
 800b042:	2301      	movs	r3, #1
 800b044:	465a      	mov	r2, fp
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f ae57 	beq.w	800ad00 <_printf_float+0x98>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	45c8      	cmp	r8, r9
 800b058:	dbf3      	blt.n	800b042 <_printf_float+0x3da>
 800b05a:	4653      	mov	r3, sl
 800b05c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b060:	e6dc      	b.n	800ae1c <_printf_float+0x1b4>
 800b062:	f04f 0800 	mov.w	r8, #0
 800b066:	f104 0b1a 	add.w	fp, r4, #26
 800b06a:	e7f4      	b.n	800b056 <_printf_float+0x3ee>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4642      	mov	r2, r8
 800b070:	e7e1      	b.n	800b036 <_printf_float+0x3ce>
 800b072:	2301      	movs	r3, #1
 800b074:	464a      	mov	r2, r9
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	f43f ae3f 	beq.w	800ad00 <_printf_float+0x98>
 800b082:	f108 0801 	add.w	r8, r8, #1
 800b086:	68e3      	ldr	r3, [r4, #12]
 800b088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b08a:	1a5b      	subs	r3, r3, r1
 800b08c:	4543      	cmp	r3, r8
 800b08e:	dcf0      	bgt.n	800b072 <_printf_float+0x40a>
 800b090:	e6f8      	b.n	800ae84 <_printf_float+0x21c>
 800b092:	f04f 0800 	mov.w	r8, #0
 800b096:	f104 0919 	add.w	r9, r4, #25
 800b09a:	e7f4      	b.n	800b086 <_printf_float+0x41e>

0800b09c <_printf_common>:
 800b09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	4698      	mov	r8, r3
 800b0a4:	688a      	ldr	r2, [r1, #8]
 800b0a6:	690b      	ldr	r3, [r1, #16]
 800b0a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	bfb8      	it	lt
 800b0b0:	4613      	movlt	r3, r2
 800b0b2:	6033      	str	r3, [r6, #0]
 800b0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	b10a      	cbz	r2, 800b0c2 <_printf_common+0x26>
 800b0be:	3301      	adds	r3, #1
 800b0c0:	6033      	str	r3, [r6, #0]
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	0699      	lsls	r1, r3, #26
 800b0c6:	bf42      	ittt	mi
 800b0c8:	6833      	ldrmi	r3, [r6, #0]
 800b0ca:	3302      	addmi	r3, #2
 800b0cc:	6033      	strmi	r3, [r6, #0]
 800b0ce:	6825      	ldr	r5, [r4, #0]
 800b0d0:	f015 0506 	ands.w	r5, r5, #6
 800b0d4:	d106      	bne.n	800b0e4 <_printf_common+0x48>
 800b0d6:	f104 0a19 	add.w	sl, r4, #25
 800b0da:	68e3      	ldr	r3, [r4, #12]
 800b0dc:	6832      	ldr	r2, [r6, #0]
 800b0de:	1a9b      	subs	r3, r3, r2
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	dc26      	bgt.n	800b132 <_printf_common+0x96>
 800b0e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0e8:	6822      	ldr	r2, [r4, #0]
 800b0ea:	3b00      	subs	r3, #0
 800b0ec:	bf18      	it	ne
 800b0ee:	2301      	movne	r3, #1
 800b0f0:	0692      	lsls	r2, r2, #26
 800b0f2:	d42b      	bmi.n	800b14c <_printf_common+0xb0>
 800b0f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c8      	blx	r9
 800b0fe:	3001      	adds	r0, #1
 800b100:	d01e      	beq.n	800b140 <_printf_common+0xa4>
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	6922      	ldr	r2, [r4, #16]
 800b106:	f003 0306 	and.w	r3, r3, #6
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	bf02      	ittt	eq
 800b10e:	68e5      	ldreq	r5, [r4, #12]
 800b110:	6833      	ldreq	r3, [r6, #0]
 800b112:	1aed      	subeq	r5, r5, r3
 800b114:	68a3      	ldr	r3, [r4, #8]
 800b116:	bf0c      	ite	eq
 800b118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b11c:	2500      	movne	r5, #0
 800b11e:	4293      	cmp	r3, r2
 800b120:	bfc4      	itt	gt
 800b122:	1a9b      	subgt	r3, r3, r2
 800b124:	18ed      	addgt	r5, r5, r3
 800b126:	2600      	movs	r6, #0
 800b128:	341a      	adds	r4, #26
 800b12a:	42b5      	cmp	r5, r6
 800b12c:	d11a      	bne.n	800b164 <_printf_common+0xc8>
 800b12e:	2000      	movs	r0, #0
 800b130:	e008      	b.n	800b144 <_printf_common+0xa8>
 800b132:	2301      	movs	r3, #1
 800b134:	4652      	mov	r2, sl
 800b136:	4641      	mov	r1, r8
 800b138:	4638      	mov	r0, r7
 800b13a:	47c8      	blx	r9
 800b13c:	3001      	adds	r0, #1
 800b13e:	d103      	bne.n	800b148 <_printf_common+0xac>
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b148:	3501      	adds	r5, #1
 800b14a:	e7c6      	b.n	800b0da <_printf_common+0x3e>
 800b14c:	18e1      	adds	r1, r4, r3
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	2030      	movs	r0, #48	@ 0x30
 800b152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b156:	4422      	add	r2, r4
 800b158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b15c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b160:	3302      	adds	r3, #2
 800b162:	e7c7      	b.n	800b0f4 <_printf_common+0x58>
 800b164:	2301      	movs	r3, #1
 800b166:	4622      	mov	r2, r4
 800b168:	4641      	mov	r1, r8
 800b16a:	4638      	mov	r0, r7
 800b16c:	47c8      	blx	r9
 800b16e:	3001      	adds	r0, #1
 800b170:	d0e6      	beq.n	800b140 <_printf_common+0xa4>
 800b172:	3601      	adds	r6, #1
 800b174:	e7d9      	b.n	800b12a <_printf_common+0x8e>
	...

0800b178 <_printf_i>:
 800b178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	7e0f      	ldrb	r7, [r1, #24]
 800b17e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b180:	2f78      	cmp	r7, #120	@ 0x78
 800b182:	4691      	mov	r9, r2
 800b184:	4680      	mov	r8, r0
 800b186:	460c      	mov	r4, r1
 800b188:	469a      	mov	sl, r3
 800b18a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b18e:	d807      	bhi.n	800b1a0 <_printf_i+0x28>
 800b190:	2f62      	cmp	r7, #98	@ 0x62
 800b192:	d80a      	bhi.n	800b1aa <_printf_i+0x32>
 800b194:	2f00      	cmp	r7, #0
 800b196:	f000 80d2 	beq.w	800b33e <_printf_i+0x1c6>
 800b19a:	2f58      	cmp	r7, #88	@ 0x58
 800b19c:	f000 80b9 	beq.w	800b312 <_printf_i+0x19a>
 800b1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1a8:	e03a      	b.n	800b220 <_printf_i+0xa8>
 800b1aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1ae:	2b15      	cmp	r3, #21
 800b1b0:	d8f6      	bhi.n	800b1a0 <_printf_i+0x28>
 800b1b2:	a101      	add	r1, pc, #4	@ (adr r1, 800b1b8 <_printf_i+0x40>)
 800b1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1b8:	0800b211 	.word	0x0800b211
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b1a1 	.word	0x0800b1a1
 800b1c4:	0800b1a1 	.word	0x0800b1a1
 800b1c8:	0800b1a1 	.word	0x0800b1a1
 800b1cc:	0800b1a1 	.word	0x0800b1a1
 800b1d0:	0800b225 	.word	0x0800b225
 800b1d4:	0800b1a1 	.word	0x0800b1a1
 800b1d8:	0800b1a1 	.word	0x0800b1a1
 800b1dc:	0800b1a1 	.word	0x0800b1a1
 800b1e0:	0800b1a1 	.word	0x0800b1a1
 800b1e4:	0800b325 	.word	0x0800b325
 800b1e8:	0800b24f 	.word	0x0800b24f
 800b1ec:	0800b2df 	.word	0x0800b2df
 800b1f0:	0800b1a1 	.word	0x0800b1a1
 800b1f4:	0800b1a1 	.word	0x0800b1a1
 800b1f8:	0800b347 	.word	0x0800b347
 800b1fc:	0800b1a1 	.word	0x0800b1a1
 800b200:	0800b24f 	.word	0x0800b24f
 800b204:	0800b1a1 	.word	0x0800b1a1
 800b208:	0800b1a1 	.word	0x0800b1a1
 800b20c:	0800b2e7 	.word	0x0800b2e7
 800b210:	6833      	ldr	r3, [r6, #0]
 800b212:	1d1a      	adds	r2, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6032      	str	r2, [r6, #0]
 800b218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b21c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b220:	2301      	movs	r3, #1
 800b222:	e09d      	b.n	800b360 <_printf_i+0x1e8>
 800b224:	6833      	ldr	r3, [r6, #0]
 800b226:	6820      	ldr	r0, [r4, #0]
 800b228:	1d19      	adds	r1, r3, #4
 800b22a:	6031      	str	r1, [r6, #0]
 800b22c:	0606      	lsls	r6, r0, #24
 800b22e:	d501      	bpl.n	800b234 <_printf_i+0xbc>
 800b230:	681d      	ldr	r5, [r3, #0]
 800b232:	e003      	b.n	800b23c <_printf_i+0xc4>
 800b234:	0645      	lsls	r5, r0, #25
 800b236:	d5fb      	bpl.n	800b230 <_printf_i+0xb8>
 800b238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b23c:	2d00      	cmp	r5, #0
 800b23e:	da03      	bge.n	800b248 <_printf_i+0xd0>
 800b240:	232d      	movs	r3, #45	@ 0x2d
 800b242:	426d      	negs	r5, r5
 800b244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b248:	4859      	ldr	r0, [pc, #356]	@ (800b3b0 <_printf_i+0x238>)
 800b24a:	230a      	movs	r3, #10
 800b24c:	e011      	b.n	800b272 <_printf_i+0xfa>
 800b24e:	6821      	ldr	r1, [r4, #0]
 800b250:	6833      	ldr	r3, [r6, #0]
 800b252:	0608      	lsls	r0, r1, #24
 800b254:	f853 5b04 	ldr.w	r5, [r3], #4
 800b258:	d402      	bmi.n	800b260 <_printf_i+0xe8>
 800b25a:	0649      	lsls	r1, r1, #25
 800b25c:	bf48      	it	mi
 800b25e:	b2ad      	uxthmi	r5, r5
 800b260:	2f6f      	cmp	r7, #111	@ 0x6f
 800b262:	4853      	ldr	r0, [pc, #332]	@ (800b3b0 <_printf_i+0x238>)
 800b264:	6033      	str	r3, [r6, #0]
 800b266:	bf14      	ite	ne
 800b268:	230a      	movne	r3, #10
 800b26a:	2308      	moveq	r3, #8
 800b26c:	2100      	movs	r1, #0
 800b26e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b272:	6866      	ldr	r6, [r4, #4]
 800b274:	60a6      	str	r6, [r4, #8]
 800b276:	2e00      	cmp	r6, #0
 800b278:	bfa2      	ittt	ge
 800b27a:	6821      	ldrge	r1, [r4, #0]
 800b27c:	f021 0104 	bicge.w	r1, r1, #4
 800b280:	6021      	strge	r1, [r4, #0]
 800b282:	b90d      	cbnz	r5, 800b288 <_printf_i+0x110>
 800b284:	2e00      	cmp	r6, #0
 800b286:	d04b      	beq.n	800b320 <_printf_i+0x1a8>
 800b288:	4616      	mov	r6, r2
 800b28a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b28e:	fb03 5711 	mls	r7, r3, r1, r5
 800b292:	5dc7      	ldrb	r7, [r0, r7]
 800b294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b298:	462f      	mov	r7, r5
 800b29a:	42bb      	cmp	r3, r7
 800b29c:	460d      	mov	r5, r1
 800b29e:	d9f4      	bls.n	800b28a <_printf_i+0x112>
 800b2a0:	2b08      	cmp	r3, #8
 800b2a2:	d10b      	bne.n	800b2bc <_printf_i+0x144>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	07df      	lsls	r7, r3, #31
 800b2a8:	d508      	bpl.n	800b2bc <_printf_i+0x144>
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	6861      	ldr	r1, [r4, #4]
 800b2ae:	4299      	cmp	r1, r3
 800b2b0:	bfde      	ittt	le
 800b2b2:	2330      	movle	r3, #48	@ 0x30
 800b2b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b2b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b2bc:	1b92      	subs	r2, r2, r6
 800b2be:	6122      	str	r2, [r4, #16]
 800b2c0:	f8cd a000 	str.w	sl, [sp]
 800b2c4:	464b      	mov	r3, r9
 800b2c6:	aa03      	add	r2, sp, #12
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	f7ff fee6 	bl	800b09c <_printf_common>
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d14a      	bne.n	800b36a <_printf_i+0x1f2>
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	b004      	add	sp, #16
 800b2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	f043 0320 	orr.w	r3, r3, #32
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	4833      	ldr	r0, [pc, #204]	@ (800b3b4 <_printf_i+0x23c>)
 800b2e8:	2778      	movs	r7, #120	@ 0x78
 800b2ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	6831      	ldr	r1, [r6, #0]
 800b2f2:	061f      	lsls	r7, r3, #24
 800b2f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2f8:	d402      	bmi.n	800b300 <_printf_i+0x188>
 800b2fa:	065f      	lsls	r7, r3, #25
 800b2fc:	bf48      	it	mi
 800b2fe:	b2ad      	uxthmi	r5, r5
 800b300:	6031      	str	r1, [r6, #0]
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	bf44      	itt	mi
 800b306:	f043 0320 	orrmi.w	r3, r3, #32
 800b30a:	6023      	strmi	r3, [r4, #0]
 800b30c:	b11d      	cbz	r5, 800b316 <_printf_i+0x19e>
 800b30e:	2310      	movs	r3, #16
 800b310:	e7ac      	b.n	800b26c <_printf_i+0xf4>
 800b312:	4827      	ldr	r0, [pc, #156]	@ (800b3b0 <_printf_i+0x238>)
 800b314:	e7e9      	b.n	800b2ea <_printf_i+0x172>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	f023 0320 	bic.w	r3, r3, #32
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	e7f6      	b.n	800b30e <_printf_i+0x196>
 800b320:	4616      	mov	r6, r2
 800b322:	e7bd      	b.n	800b2a0 <_printf_i+0x128>
 800b324:	6833      	ldr	r3, [r6, #0]
 800b326:	6825      	ldr	r5, [r4, #0]
 800b328:	6961      	ldr	r1, [r4, #20]
 800b32a:	1d18      	adds	r0, r3, #4
 800b32c:	6030      	str	r0, [r6, #0]
 800b32e:	062e      	lsls	r6, r5, #24
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	d501      	bpl.n	800b338 <_printf_i+0x1c0>
 800b334:	6019      	str	r1, [r3, #0]
 800b336:	e002      	b.n	800b33e <_printf_i+0x1c6>
 800b338:	0668      	lsls	r0, r5, #25
 800b33a:	d5fb      	bpl.n	800b334 <_printf_i+0x1bc>
 800b33c:	8019      	strh	r1, [r3, #0]
 800b33e:	2300      	movs	r3, #0
 800b340:	6123      	str	r3, [r4, #16]
 800b342:	4616      	mov	r6, r2
 800b344:	e7bc      	b.n	800b2c0 <_printf_i+0x148>
 800b346:	6833      	ldr	r3, [r6, #0]
 800b348:	1d1a      	adds	r2, r3, #4
 800b34a:	6032      	str	r2, [r6, #0]
 800b34c:	681e      	ldr	r6, [r3, #0]
 800b34e:	6862      	ldr	r2, [r4, #4]
 800b350:	2100      	movs	r1, #0
 800b352:	4630      	mov	r0, r6
 800b354:	f7f4 ffcc 	bl	80002f0 <memchr>
 800b358:	b108      	cbz	r0, 800b35e <_printf_i+0x1e6>
 800b35a:	1b80      	subs	r0, r0, r6
 800b35c:	6060      	str	r0, [r4, #4]
 800b35e:	6863      	ldr	r3, [r4, #4]
 800b360:	6123      	str	r3, [r4, #16]
 800b362:	2300      	movs	r3, #0
 800b364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b368:	e7aa      	b.n	800b2c0 <_printf_i+0x148>
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	4632      	mov	r2, r6
 800b36e:	4649      	mov	r1, r9
 800b370:	4640      	mov	r0, r8
 800b372:	47d0      	blx	sl
 800b374:	3001      	adds	r0, #1
 800b376:	d0ad      	beq.n	800b2d4 <_printf_i+0x15c>
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	079b      	lsls	r3, r3, #30
 800b37c:	d413      	bmi.n	800b3a6 <_printf_i+0x22e>
 800b37e:	68e0      	ldr	r0, [r4, #12]
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	4298      	cmp	r0, r3
 800b384:	bfb8      	it	lt
 800b386:	4618      	movlt	r0, r3
 800b388:	e7a6      	b.n	800b2d8 <_printf_i+0x160>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4632      	mov	r2, r6
 800b38e:	4649      	mov	r1, r9
 800b390:	4640      	mov	r0, r8
 800b392:	47d0      	blx	sl
 800b394:	3001      	adds	r0, #1
 800b396:	d09d      	beq.n	800b2d4 <_printf_i+0x15c>
 800b398:	3501      	adds	r5, #1
 800b39a:	68e3      	ldr	r3, [r4, #12]
 800b39c:	9903      	ldr	r1, [sp, #12]
 800b39e:	1a5b      	subs	r3, r3, r1
 800b3a0:	42ab      	cmp	r3, r5
 800b3a2:	dcf2      	bgt.n	800b38a <_printf_i+0x212>
 800b3a4:	e7eb      	b.n	800b37e <_printf_i+0x206>
 800b3a6:	2500      	movs	r5, #0
 800b3a8:	f104 0619 	add.w	r6, r4, #25
 800b3ac:	e7f5      	b.n	800b39a <_printf_i+0x222>
 800b3ae:	bf00      	nop
 800b3b0:	0800f2e2 	.word	0x0800f2e2
 800b3b4:	0800f2f3 	.word	0x0800f2f3

0800b3b8 <_scanf_float>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	b087      	sub	sp, #28
 800b3be:	4617      	mov	r7, r2
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	688b      	ldr	r3, [r1, #8]
 800b3c4:	1e5a      	subs	r2, r3, #1
 800b3c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b3ca:	bf81      	itttt	hi
 800b3cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b3d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b3d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b3d8:	608b      	strhi	r3, [r1, #8]
 800b3da:	680b      	ldr	r3, [r1, #0]
 800b3dc:	460a      	mov	r2, r1
 800b3de:	f04f 0500 	mov.w	r5, #0
 800b3e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b3e6:	f842 3b1c 	str.w	r3, [r2], #28
 800b3ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	bf98      	it	ls
 800b3f4:	f04f 0b00 	movls.w	fp, #0
 800b3f8:	9201      	str	r2, [sp, #4]
 800b3fa:	4616      	mov	r6, r2
 800b3fc:	46aa      	mov	sl, r5
 800b3fe:	46a9      	mov	r9, r5
 800b400:	9502      	str	r5, [sp, #8]
 800b402:	68a2      	ldr	r2, [r4, #8]
 800b404:	b152      	cbz	r2, 800b41c <_scanf_float+0x64>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b40c:	d864      	bhi.n	800b4d8 <_scanf_float+0x120>
 800b40e:	2b40      	cmp	r3, #64	@ 0x40
 800b410:	d83c      	bhi.n	800b48c <_scanf_float+0xd4>
 800b412:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b416:	b2c8      	uxtb	r0, r1
 800b418:	280e      	cmp	r0, #14
 800b41a:	d93a      	bls.n	800b492 <_scanf_float+0xda>
 800b41c:	f1b9 0f00 	cmp.w	r9, #0
 800b420:	d003      	beq.n	800b42a <_scanf_float+0x72>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b42e:	f1ba 0f01 	cmp.w	sl, #1
 800b432:	f200 8117 	bhi.w	800b664 <_scanf_float+0x2ac>
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	429e      	cmp	r6, r3
 800b43a:	f200 8108 	bhi.w	800b64e <_scanf_float+0x296>
 800b43e:	2001      	movs	r0, #1
 800b440:	b007      	add	sp, #28
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b44a:	2a0d      	cmp	r2, #13
 800b44c:	d8e6      	bhi.n	800b41c <_scanf_float+0x64>
 800b44e:	a101      	add	r1, pc, #4	@ (adr r1, 800b454 <_scanf_float+0x9c>)
 800b450:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b454:	0800b59b 	.word	0x0800b59b
 800b458:	0800b41d 	.word	0x0800b41d
 800b45c:	0800b41d 	.word	0x0800b41d
 800b460:	0800b41d 	.word	0x0800b41d
 800b464:	0800b5fb 	.word	0x0800b5fb
 800b468:	0800b5d3 	.word	0x0800b5d3
 800b46c:	0800b41d 	.word	0x0800b41d
 800b470:	0800b41d 	.word	0x0800b41d
 800b474:	0800b5a9 	.word	0x0800b5a9
 800b478:	0800b41d 	.word	0x0800b41d
 800b47c:	0800b41d 	.word	0x0800b41d
 800b480:	0800b41d 	.word	0x0800b41d
 800b484:	0800b41d 	.word	0x0800b41d
 800b488:	0800b561 	.word	0x0800b561
 800b48c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b490:	e7db      	b.n	800b44a <_scanf_float+0x92>
 800b492:	290e      	cmp	r1, #14
 800b494:	d8c2      	bhi.n	800b41c <_scanf_float+0x64>
 800b496:	a001      	add	r0, pc, #4	@ (adr r0, 800b49c <_scanf_float+0xe4>)
 800b498:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b49c:	0800b551 	.word	0x0800b551
 800b4a0:	0800b41d 	.word	0x0800b41d
 800b4a4:	0800b551 	.word	0x0800b551
 800b4a8:	0800b5e7 	.word	0x0800b5e7
 800b4ac:	0800b41d 	.word	0x0800b41d
 800b4b0:	0800b4f9 	.word	0x0800b4f9
 800b4b4:	0800b537 	.word	0x0800b537
 800b4b8:	0800b537 	.word	0x0800b537
 800b4bc:	0800b537 	.word	0x0800b537
 800b4c0:	0800b537 	.word	0x0800b537
 800b4c4:	0800b537 	.word	0x0800b537
 800b4c8:	0800b537 	.word	0x0800b537
 800b4cc:	0800b537 	.word	0x0800b537
 800b4d0:	0800b537 	.word	0x0800b537
 800b4d4:	0800b537 	.word	0x0800b537
 800b4d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b4da:	d809      	bhi.n	800b4f0 <_scanf_float+0x138>
 800b4dc:	2b60      	cmp	r3, #96	@ 0x60
 800b4de:	d8b2      	bhi.n	800b446 <_scanf_float+0x8e>
 800b4e0:	2b54      	cmp	r3, #84	@ 0x54
 800b4e2:	d07b      	beq.n	800b5dc <_scanf_float+0x224>
 800b4e4:	2b59      	cmp	r3, #89	@ 0x59
 800b4e6:	d199      	bne.n	800b41c <_scanf_float+0x64>
 800b4e8:	2d07      	cmp	r5, #7
 800b4ea:	d197      	bne.n	800b41c <_scanf_float+0x64>
 800b4ec:	2508      	movs	r5, #8
 800b4ee:	e02c      	b.n	800b54a <_scanf_float+0x192>
 800b4f0:	2b74      	cmp	r3, #116	@ 0x74
 800b4f2:	d073      	beq.n	800b5dc <_scanf_float+0x224>
 800b4f4:	2b79      	cmp	r3, #121	@ 0x79
 800b4f6:	e7f6      	b.n	800b4e6 <_scanf_float+0x12e>
 800b4f8:	6821      	ldr	r1, [r4, #0]
 800b4fa:	05c8      	lsls	r0, r1, #23
 800b4fc:	d51b      	bpl.n	800b536 <_scanf_float+0x17e>
 800b4fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b502:	6021      	str	r1, [r4, #0]
 800b504:	f109 0901 	add.w	r9, r9, #1
 800b508:	f1bb 0f00 	cmp.w	fp, #0
 800b50c:	d003      	beq.n	800b516 <_scanf_float+0x15e>
 800b50e:	3201      	adds	r2, #1
 800b510:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b514:	60a2      	str	r2, [r4, #8]
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	3b01      	subs	r3, #1
 800b51a:	60a3      	str	r3, [r4, #8]
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	3301      	adds	r3, #1
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3b01      	subs	r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	607b      	str	r3, [r7, #4]
 800b52a:	f340 8087 	ble.w	800b63c <_scanf_float+0x284>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	e765      	b.n	800b402 <_scanf_float+0x4a>
 800b536:	eb1a 0105 	adds.w	r1, sl, r5
 800b53a:	f47f af6f 	bne.w	800b41c <_scanf_float+0x64>
 800b53e:	6822      	ldr	r2, [r4, #0]
 800b540:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	460d      	mov	r5, r1
 800b548:	468a      	mov	sl, r1
 800b54a:	f806 3b01 	strb.w	r3, [r6], #1
 800b54e:	e7e2      	b.n	800b516 <_scanf_float+0x15e>
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	0610      	lsls	r0, r2, #24
 800b554:	f57f af62 	bpl.w	800b41c <_scanf_float+0x64>
 800b558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b55c:	6022      	str	r2, [r4, #0]
 800b55e:	e7f4      	b.n	800b54a <_scanf_float+0x192>
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	d10e      	bne.n	800b584 <_scanf_float+0x1cc>
 800b566:	f1b9 0f00 	cmp.w	r9, #0
 800b56a:	d10e      	bne.n	800b58a <_scanf_float+0x1d2>
 800b56c:	6822      	ldr	r2, [r4, #0]
 800b56e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b572:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b576:	d108      	bne.n	800b58a <_scanf_float+0x1d2>
 800b578:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b57c:	6022      	str	r2, [r4, #0]
 800b57e:	f04f 0a01 	mov.w	sl, #1
 800b582:	e7e2      	b.n	800b54a <_scanf_float+0x192>
 800b584:	f1ba 0f02 	cmp.w	sl, #2
 800b588:	d055      	beq.n	800b636 <_scanf_float+0x27e>
 800b58a:	2d01      	cmp	r5, #1
 800b58c:	d002      	beq.n	800b594 <_scanf_float+0x1dc>
 800b58e:	2d04      	cmp	r5, #4
 800b590:	f47f af44 	bne.w	800b41c <_scanf_float+0x64>
 800b594:	3501      	adds	r5, #1
 800b596:	b2ed      	uxtb	r5, r5
 800b598:	e7d7      	b.n	800b54a <_scanf_float+0x192>
 800b59a:	f1ba 0f01 	cmp.w	sl, #1
 800b59e:	f47f af3d 	bne.w	800b41c <_scanf_float+0x64>
 800b5a2:	f04f 0a02 	mov.w	sl, #2
 800b5a6:	e7d0      	b.n	800b54a <_scanf_float+0x192>
 800b5a8:	b97d      	cbnz	r5, 800b5ca <_scanf_float+0x212>
 800b5aa:	f1b9 0f00 	cmp.w	r9, #0
 800b5ae:	f47f af38 	bne.w	800b422 <_scanf_float+0x6a>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5bc:	f040 8101 	bne.w	800b7c2 <_scanf_float+0x40a>
 800b5c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	2501      	movs	r5, #1
 800b5c8:	e7bf      	b.n	800b54a <_scanf_float+0x192>
 800b5ca:	2d03      	cmp	r5, #3
 800b5cc:	d0e2      	beq.n	800b594 <_scanf_float+0x1dc>
 800b5ce:	2d05      	cmp	r5, #5
 800b5d0:	e7de      	b.n	800b590 <_scanf_float+0x1d8>
 800b5d2:	2d02      	cmp	r5, #2
 800b5d4:	f47f af22 	bne.w	800b41c <_scanf_float+0x64>
 800b5d8:	2503      	movs	r5, #3
 800b5da:	e7b6      	b.n	800b54a <_scanf_float+0x192>
 800b5dc:	2d06      	cmp	r5, #6
 800b5de:	f47f af1d 	bne.w	800b41c <_scanf_float+0x64>
 800b5e2:	2507      	movs	r5, #7
 800b5e4:	e7b1      	b.n	800b54a <_scanf_float+0x192>
 800b5e6:	6822      	ldr	r2, [r4, #0]
 800b5e8:	0591      	lsls	r1, r2, #22
 800b5ea:	f57f af17 	bpl.w	800b41c <_scanf_float+0x64>
 800b5ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b5f2:	6022      	str	r2, [r4, #0]
 800b5f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5f8:	e7a7      	b.n	800b54a <_scanf_float+0x192>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b600:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b604:	d006      	beq.n	800b614 <_scanf_float+0x25c>
 800b606:	0550      	lsls	r0, r2, #21
 800b608:	f57f af08 	bpl.w	800b41c <_scanf_float+0x64>
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	f000 80d7 	beq.w	800b7c2 <_scanf_float+0x40a>
 800b614:	0591      	lsls	r1, r2, #22
 800b616:	bf58      	it	pl
 800b618:	9902      	ldrpl	r1, [sp, #8]
 800b61a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b61e:	bf58      	it	pl
 800b620:	eba9 0101 	subpl.w	r1, r9, r1
 800b624:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b628:	bf58      	it	pl
 800b62a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	e789      	b.n	800b54a <_scanf_float+0x192>
 800b636:	f04f 0a03 	mov.w	sl, #3
 800b63a:	e786      	b.n	800b54a <_scanf_float+0x192>
 800b63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b640:	4639      	mov	r1, r7
 800b642:	4640      	mov	r0, r8
 800b644:	4798      	blx	r3
 800b646:	2800      	cmp	r0, #0
 800b648:	f43f aedb 	beq.w	800b402 <_scanf_float+0x4a>
 800b64c:	e6e6      	b.n	800b41c <_scanf_float+0x64>
 800b64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b656:	463a      	mov	r2, r7
 800b658:	4640      	mov	r0, r8
 800b65a:	4798      	blx	r3
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	3b01      	subs	r3, #1
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	e6e8      	b.n	800b436 <_scanf_float+0x7e>
 800b664:	1e6b      	subs	r3, r5, #1
 800b666:	2b06      	cmp	r3, #6
 800b668:	d824      	bhi.n	800b6b4 <_scanf_float+0x2fc>
 800b66a:	2d02      	cmp	r5, #2
 800b66c:	d836      	bhi.n	800b6dc <_scanf_float+0x324>
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	429e      	cmp	r6, r3
 800b672:	f67f aee4 	bls.w	800b43e <_scanf_float+0x86>
 800b676:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b67a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b67e:	463a      	mov	r2, r7
 800b680:	4640      	mov	r0, r8
 800b682:	4798      	blx	r3
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	3b01      	subs	r3, #1
 800b688:	6123      	str	r3, [r4, #16]
 800b68a:	e7f0      	b.n	800b66e <_scanf_float+0x2b6>
 800b68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b690:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b694:	463a      	mov	r2, r7
 800b696:	4640      	mov	r0, r8
 800b698:	4798      	blx	r3
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	6123      	str	r3, [r4, #16]
 800b6a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b6a8:	f1ba 0f02 	cmp.w	sl, #2
 800b6ac:	d1ee      	bne.n	800b68c <_scanf_float+0x2d4>
 800b6ae:	3d03      	subs	r5, #3
 800b6b0:	b2ed      	uxtb	r5, r5
 800b6b2:	1b76      	subs	r6, r6, r5
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	05da      	lsls	r2, r3, #23
 800b6b8:	d530      	bpl.n	800b71c <_scanf_float+0x364>
 800b6ba:	055b      	lsls	r3, r3, #21
 800b6bc:	d511      	bpl.n	800b6e2 <_scanf_float+0x32a>
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	429e      	cmp	r6, r3
 800b6c2:	f67f aebc 	bls.w	800b43e <_scanf_float+0x86>
 800b6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4798      	blx	r3
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	e7f0      	b.n	800b6be <_scanf_float+0x306>
 800b6dc:	46aa      	mov	sl, r5
 800b6de:	46b3      	mov	fp, r6
 800b6e0:	e7de      	b.n	800b6a0 <_scanf_float+0x2e8>
 800b6e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	2965      	cmp	r1, #101	@ 0x65
 800b6ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	d00c      	beq.n	800b710 <_scanf_float+0x358>
 800b6f6:	2945      	cmp	r1, #69	@ 0x45
 800b6f8:	d00a      	beq.n	800b710 <_scanf_float+0x358>
 800b6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6fe:	463a      	mov	r2, r7
 800b700:	4640      	mov	r0, r8
 800b702:	4798      	blx	r3
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	1eb5      	subs	r5, r6, #2
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b714:	463a      	mov	r2, r7
 800b716:	4640      	mov	r0, r8
 800b718:	4798      	blx	r3
 800b71a:	462e      	mov	r6, r5
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	f012 0210 	ands.w	r2, r2, #16
 800b722:	d001      	beq.n	800b728 <_scanf_float+0x370>
 800b724:	2000      	movs	r0, #0
 800b726:	e68b      	b.n	800b440 <_scanf_float+0x88>
 800b728:	7032      	strb	r2, [r6, #0]
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b734:	d11a      	bne.n	800b76c <_scanf_float+0x3b4>
 800b736:	9b02      	ldr	r3, [sp, #8]
 800b738:	454b      	cmp	r3, r9
 800b73a:	eba3 0209 	sub.w	r2, r3, r9
 800b73e:	d121      	bne.n	800b784 <_scanf_float+0x3cc>
 800b740:	9901      	ldr	r1, [sp, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	4640      	mov	r0, r8
 800b746:	f002 fc49 	bl	800dfdc <_strtod_r>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	6821      	ldr	r1, [r4, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f011 0f02 	tst.w	r1, #2
 800b754:	f103 0204 	add.w	r2, r3, #4
 800b758:	d01f      	beq.n	800b79a <_scanf_float+0x3e2>
 800b75a:	9903      	ldr	r1, [sp, #12]
 800b75c:	600a      	str	r2, [r1, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	ed83 0b00 	vstr	d0, [r3]
 800b764:	68e3      	ldr	r3, [r4, #12]
 800b766:	3301      	adds	r3, #1
 800b768:	60e3      	str	r3, [r4, #12]
 800b76a:	e7db      	b.n	800b724 <_scanf_float+0x36c>
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0e6      	beq.n	800b740 <_scanf_float+0x388>
 800b772:	9905      	ldr	r1, [sp, #20]
 800b774:	230a      	movs	r3, #10
 800b776:	3101      	adds	r1, #1
 800b778:	4640      	mov	r0, r8
 800b77a:	f002 fcaf 	bl	800e0dc <_strtol_r>
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	9e05      	ldr	r6, [sp, #20]
 800b782:	1ac2      	subs	r2, r0, r3
 800b784:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b788:	429e      	cmp	r6, r3
 800b78a:	bf28      	it	cs
 800b78c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b790:	490d      	ldr	r1, [pc, #52]	@ (800b7c8 <_scanf_float+0x410>)
 800b792:	4630      	mov	r0, r6
 800b794:	f000 f960 	bl	800ba58 <siprintf>
 800b798:	e7d2      	b.n	800b740 <_scanf_float+0x388>
 800b79a:	f011 0f04 	tst.w	r1, #4
 800b79e:	9903      	ldr	r1, [sp, #12]
 800b7a0:	600a      	str	r2, [r1, #0]
 800b7a2:	d1dc      	bne.n	800b75e <_scanf_float+0x3a6>
 800b7a4:	eeb4 0b40 	vcmp.f64	d0, d0
 800b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ac:	681d      	ldr	r5, [r3, #0]
 800b7ae:	d705      	bvc.n	800b7bc <_scanf_float+0x404>
 800b7b0:	4806      	ldr	r0, [pc, #24]	@ (800b7cc <_scanf_float+0x414>)
 800b7b2:	f000 fb81 	bl	800beb8 <nanf>
 800b7b6:	ed85 0a00 	vstr	s0, [r5]
 800b7ba:	e7d3      	b.n	800b764 <_scanf_float+0x3ac>
 800b7bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b7c0:	e7f9      	b.n	800b7b6 <_scanf_float+0x3fe>
 800b7c2:	f04f 0900 	mov.w	r9, #0
 800b7c6:	e630      	b.n	800b42a <_scanf_float+0x72>
 800b7c8:	0800f304 	.word	0x0800f304
 800b7cc:	0800f2cf 	.word	0x0800f2cf

0800b7d0 <std>:
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7de:	6083      	str	r3, [r0, #8]
 800b7e0:	8181      	strh	r1, [r0, #12]
 800b7e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7e4:	81c2      	strh	r2, [r0, #14]
 800b7e6:	6183      	str	r3, [r0, #24]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	305c      	adds	r0, #92	@ 0x5c
 800b7ee:	f000 fa2b 	bl	800bc48 <memset>
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <std+0x58>)
 800b7f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b82c <std+0x5c>)
 800b7f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b830 <std+0x60>)
 800b7fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b834 <std+0x64>)
 800b800:	6323      	str	r3, [r4, #48]	@ 0x30
 800b802:	4b0d      	ldr	r3, [pc, #52]	@ (800b838 <std+0x68>)
 800b804:	6224      	str	r4, [r4, #32]
 800b806:	429c      	cmp	r4, r3
 800b808:	d006      	beq.n	800b818 <std+0x48>
 800b80a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b80e:	4294      	cmp	r4, r2
 800b810:	d002      	beq.n	800b818 <std+0x48>
 800b812:	33d0      	adds	r3, #208	@ 0xd0
 800b814:	429c      	cmp	r4, r3
 800b816:	d105      	bne.n	800b824 <std+0x54>
 800b818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b820:	f000 bb38 	b.w	800be94 <__retarget_lock_init_recursive>
 800b824:	bd10      	pop	{r4, pc}
 800b826:	bf00      	nop
 800b828:	0800ba99 	.word	0x0800ba99
 800b82c:	0800babb 	.word	0x0800babb
 800b830:	0800baf3 	.word	0x0800baf3
 800b834:	0800bb17 	.word	0x0800bb17
 800b838:	24004d48 	.word	0x24004d48

0800b83c <stdio_exit_handler>:
 800b83c:	4a02      	ldr	r2, [pc, #8]	@ (800b848 <stdio_exit_handler+0xc>)
 800b83e:	4903      	ldr	r1, [pc, #12]	@ (800b84c <stdio_exit_handler+0x10>)
 800b840:	4803      	ldr	r0, [pc, #12]	@ (800b850 <stdio_exit_handler+0x14>)
 800b842:	f000 b87b 	b.w	800b93c <_fwalk_sglue>
 800b846:	bf00      	nop
 800b848:	24000014 	.word	0x24000014
 800b84c:	0800e71d 	.word	0x0800e71d
 800b850:	24000024 	.word	0x24000024

0800b854 <cleanup_stdio>:
 800b854:	6841      	ldr	r1, [r0, #4]
 800b856:	4b0c      	ldr	r3, [pc, #48]	@ (800b888 <cleanup_stdio+0x34>)
 800b858:	4299      	cmp	r1, r3
 800b85a:	b510      	push	{r4, lr}
 800b85c:	4604      	mov	r4, r0
 800b85e:	d001      	beq.n	800b864 <cleanup_stdio+0x10>
 800b860:	f002 ff5c 	bl	800e71c <_fflush_r>
 800b864:	68a1      	ldr	r1, [r4, #8]
 800b866:	4b09      	ldr	r3, [pc, #36]	@ (800b88c <cleanup_stdio+0x38>)
 800b868:	4299      	cmp	r1, r3
 800b86a:	d002      	beq.n	800b872 <cleanup_stdio+0x1e>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f002 ff55 	bl	800e71c <_fflush_r>
 800b872:	68e1      	ldr	r1, [r4, #12]
 800b874:	4b06      	ldr	r3, [pc, #24]	@ (800b890 <cleanup_stdio+0x3c>)
 800b876:	4299      	cmp	r1, r3
 800b878:	d004      	beq.n	800b884 <cleanup_stdio+0x30>
 800b87a:	4620      	mov	r0, r4
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f002 bf4c 	b.w	800e71c <_fflush_r>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	24004d48 	.word	0x24004d48
 800b88c:	24004db0 	.word	0x24004db0
 800b890:	24004e18 	.word	0x24004e18

0800b894 <global_stdio_init.part.0>:
 800b894:	b510      	push	{r4, lr}
 800b896:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c4 <global_stdio_init.part.0+0x30>)
 800b898:	4c0b      	ldr	r4, [pc, #44]	@ (800b8c8 <global_stdio_init.part.0+0x34>)
 800b89a:	4a0c      	ldr	r2, [pc, #48]	@ (800b8cc <global_stdio_init.part.0+0x38>)
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2104      	movs	r1, #4
 800b8a4:	f7ff ff94 	bl	800b7d0 <std>
 800b8a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	2109      	movs	r1, #9
 800b8b0:	f7ff ff8e 	bl	800b7d0 <std>
 800b8b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8be:	2112      	movs	r1, #18
 800b8c0:	f7ff bf86 	b.w	800b7d0 <std>
 800b8c4:	24004e80 	.word	0x24004e80
 800b8c8:	24004d48 	.word	0x24004d48
 800b8cc:	0800b83d 	.word	0x0800b83d

0800b8d0 <__sfp_lock_acquire>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	@ (800b8d8 <__sfp_lock_acquire+0x8>)
 800b8d2:	f000 bae0 	b.w	800be96 <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	24004e89 	.word	0x24004e89

0800b8dc <__sfp_lock_release>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	@ (800b8e4 <__sfp_lock_release+0x8>)
 800b8de:	f000 badb 	b.w	800be98 <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	24004e89 	.word	0x24004e89

0800b8e8 <__sinit>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	f7ff fff0 	bl	800b8d0 <__sfp_lock_acquire>
 800b8f0:	6a23      	ldr	r3, [r4, #32]
 800b8f2:	b11b      	cbz	r3, 800b8fc <__sinit+0x14>
 800b8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f8:	f7ff bff0 	b.w	800b8dc <__sfp_lock_release>
 800b8fc:	4b04      	ldr	r3, [pc, #16]	@ (800b910 <__sinit+0x28>)
 800b8fe:	6223      	str	r3, [r4, #32]
 800b900:	4b04      	ldr	r3, [pc, #16]	@ (800b914 <__sinit+0x2c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f5      	bne.n	800b8f4 <__sinit+0xc>
 800b908:	f7ff ffc4 	bl	800b894 <global_stdio_init.part.0>
 800b90c:	e7f2      	b.n	800b8f4 <__sinit+0xc>
 800b90e:	bf00      	nop
 800b910:	0800b855 	.word	0x0800b855
 800b914:	24004e80 	.word	0x24004e80

0800b918 <fiprintf>:
 800b918:	b40e      	push	{r1, r2, r3}
 800b91a:	b503      	push	{r0, r1, lr}
 800b91c:	4601      	mov	r1, r0
 800b91e:	ab03      	add	r3, sp, #12
 800b920:	4805      	ldr	r0, [pc, #20]	@ (800b938 <fiprintf+0x20>)
 800b922:	f853 2b04 	ldr.w	r2, [r3], #4
 800b926:	6800      	ldr	r0, [r0, #0]
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	f002 fd5b 	bl	800e3e4 <_vfiprintf_r>
 800b92e:	b002      	add	sp, #8
 800b930:	f85d eb04 	ldr.w	lr, [sp], #4
 800b934:	b003      	add	sp, #12
 800b936:	4770      	bx	lr
 800b938:	24000020 	.word	0x24000020

0800b93c <_fwalk_sglue>:
 800b93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b940:	4607      	mov	r7, r0
 800b942:	4688      	mov	r8, r1
 800b944:	4614      	mov	r4, r2
 800b946:	2600      	movs	r6, #0
 800b948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b94c:	f1b9 0901 	subs.w	r9, r9, #1
 800b950:	d505      	bpl.n	800b95e <_fwalk_sglue+0x22>
 800b952:	6824      	ldr	r4, [r4, #0]
 800b954:	2c00      	cmp	r4, #0
 800b956:	d1f7      	bne.n	800b948 <_fwalk_sglue+0xc>
 800b958:	4630      	mov	r0, r6
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d907      	bls.n	800b974 <_fwalk_sglue+0x38>
 800b964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b968:	3301      	adds	r3, #1
 800b96a:	d003      	beq.n	800b974 <_fwalk_sglue+0x38>
 800b96c:	4629      	mov	r1, r5
 800b96e:	4638      	mov	r0, r7
 800b970:	47c0      	blx	r8
 800b972:	4306      	orrs	r6, r0
 800b974:	3568      	adds	r5, #104	@ 0x68
 800b976:	e7e9      	b.n	800b94c <_fwalk_sglue+0x10>

0800b978 <iprintf>:
 800b978:	b40f      	push	{r0, r1, r2, r3}
 800b97a:	b507      	push	{r0, r1, r2, lr}
 800b97c:	4906      	ldr	r1, [pc, #24]	@ (800b998 <iprintf+0x20>)
 800b97e:	ab04      	add	r3, sp, #16
 800b980:	6808      	ldr	r0, [r1, #0]
 800b982:	f853 2b04 	ldr.w	r2, [r3], #4
 800b986:	6881      	ldr	r1, [r0, #8]
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	f002 fd2b 	bl	800e3e4 <_vfiprintf_r>
 800b98e:	b003      	add	sp, #12
 800b990:	f85d eb04 	ldr.w	lr, [sp], #4
 800b994:	b004      	add	sp, #16
 800b996:	4770      	bx	lr
 800b998:	24000020 	.word	0x24000020

0800b99c <_puts_r>:
 800b99c:	6a03      	ldr	r3, [r0, #32]
 800b99e:	b570      	push	{r4, r5, r6, lr}
 800b9a0:	6884      	ldr	r4, [r0, #8]
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	460e      	mov	r6, r1
 800b9a6:	b90b      	cbnz	r3, 800b9ac <_puts_r+0x10>
 800b9a8:	f7ff ff9e 	bl	800b8e8 <__sinit>
 800b9ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9ae:	07db      	lsls	r3, r3, #31
 800b9b0:	d405      	bmi.n	800b9be <_puts_r+0x22>
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	0598      	lsls	r0, r3, #22
 800b9b6:	d402      	bmi.n	800b9be <_puts_r+0x22>
 800b9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ba:	f000 fa6c 	bl	800be96 <__retarget_lock_acquire_recursive>
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	0719      	lsls	r1, r3, #28
 800b9c2:	d502      	bpl.n	800b9ca <_puts_r+0x2e>
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d135      	bne.n	800ba36 <_puts_r+0x9a>
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	f000 f8e5 	bl	800bb9c <__swsetup_r>
 800b9d2:	b380      	cbz	r0, 800ba36 <_puts_r+0x9a>
 800b9d4:	f04f 35ff 	mov.w	r5, #4294967295
 800b9d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9da:	07da      	lsls	r2, r3, #31
 800b9dc:	d405      	bmi.n	800b9ea <_puts_r+0x4e>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	059b      	lsls	r3, r3, #22
 800b9e2:	d402      	bmi.n	800b9ea <_puts_r+0x4e>
 800b9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9e6:	f000 fa57 	bl	800be98 <__retarget_lock_release_recursive>
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	bd70      	pop	{r4, r5, r6, pc}
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da04      	bge.n	800b9fc <_puts_r+0x60>
 800b9f2:	69a2      	ldr	r2, [r4, #24]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	dc17      	bgt.n	800ba28 <_puts_r+0x8c>
 800b9f8:	290a      	cmp	r1, #10
 800b9fa:	d015      	beq.n	800ba28 <_puts_r+0x8c>
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	6022      	str	r2, [r4, #0]
 800ba02:	7019      	strb	r1, [r3, #0]
 800ba04:	68a3      	ldr	r3, [r4, #8]
 800ba06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	60a3      	str	r3, [r4, #8]
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	d1ed      	bne.n	800b9ee <_puts_r+0x52>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	da11      	bge.n	800ba3a <_puts_r+0x9e>
 800ba16:	4622      	mov	r2, r4
 800ba18:	210a      	movs	r1, #10
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f000 f87f 	bl	800bb1e <__swbuf_r>
 800ba20:	3001      	adds	r0, #1
 800ba22:	d0d7      	beq.n	800b9d4 <_puts_r+0x38>
 800ba24:	250a      	movs	r5, #10
 800ba26:	e7d7      	b.n	800b9d8 <_puts_r+0x3c>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 f877 	bl	800bb1e <__swbuf_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d1e7      	bne.n	800ba04 <_puts_r+0x68>
 800ba34:	e7ce      	b.n	800b9d4 <_puts_r+0x38>
 800ba36:	3e01      	subs	r6, #1
 800ba38:	e7e4      	b.n	800ba04 <_puts_r+0x68>
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	1c5a      	adds	r2, r3, #1
 800ba3e:	6022      	str	r2, [r4, #0]
 800ba40:	220a      	movs	r2, #10
 800ba42:	701a      	strb	r2, [r3, #0]
 800ba44:	e7ee      	b.n	800ba24 <_puts_r+0x88>
	...

0800ba48 <puts>:
 800ba48:	4b02      	ldr	r3, [pc, #8]	@ (800ba54 <puts+0xc>)
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	f7ff bfa5 	b.w	800b99c <_puts_r>
 800ba52:	bf00      	nop
 800ba54:	24000020 	.word	0x24000020

0800ba58 <siprintf>:
 800ba58:	b40e      	push	{r1, r2, r3}
 800ba5a:	b500      	push	{lr}
 800ba5c:	b09c      	sub	sp, #112	@ 0x70
 800ba5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba60:	9002      	str	r0, [sp, #8]
 800ba62:	9006      	str	r0, [sp, #24]
 800ba64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba68:	4809      	ldr	r0, [pc, #36]	@ (800ba90 <siprintf+0x38>)
 800ba6a:	9107      	str	r1, [sp, #28]
 800ba6c:	9104      	str	r1, [sp, #16]
 800ba6e:	4909      	ldr	r1, [pc, #36]	@ (800ba94 <siprintf+0x3c>)
 800ba70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba74:	9105      	str	r1, [sp, #20]
 800ba76:	6800      	ldr	r0, [r0, #0]
 800ba78:	9301      	str	r3, [sp, #4]
 800ba7a:	a902      	add	r1, sp, #8
 800ba7c:	f002 fb8c 	bl	800e198 <_svfiprintf_r>
 800ba80:	9b02      	ldr	r3, [sp, #8]
 800ba82:	2200      	movs	r2, #0
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	b01c      	add	sp, #112	@ 0x70
 800ba88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba8c:	b003      	add	sp, #12
 800ba8e:	4770      	bx	lr
 800ba90:	24000020 	.word	0x24000020
 800ba94:	ffff0208 	.word	0xffff0208

0800ba98 <__sread>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa0:	f000 f986 	bl	800bdb0 <_read_r>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	bfab      	itete	ge
 800baa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800baaa:	89a3      	ldrhlt	r3, [r4, #12]
 800baac:	181b      	addge	r3, r3, r0
 800baae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bab2:	bfac      	ite	ge
 800bab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bab6:	81a3      	strhlt	r3, [r4, #12]
 800bab8:	bd10      	pop	{r4, pc}

0800baba <__swrite>:
 800baba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800babe:	461f      	mov	r7, r3
 800bac0:	898b      	ldrh	r3, [r1, #12]
 800bac2:	05db      	lsls	r3, r3, #23
 800bac4:	4605      	mov	r5, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	4616      	mov	r6, r2
 800baca:	d505      	bpl.n	800bad8 <__swrite+0x1e>
 800bacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad0:	2302      	movs	r3, #2
 800bad2:	2200      	movs	r2, #0
 800bad4:	f000 f95a 	bl	800bd8c <_lseek_r>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	4632      	mov	r2, r6
 800bae6:	463b      	mov	r3, r7
 800bae8:	4628      	mov	r0, r5
 800baea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baee:	f000 b995 	b.w	800be1c <_write_r>

0800baf2 <__sseek>:
 800baf2:	b510      	push	{r4, lr}
 800baf4:	460c      	mov	r4, r1
 800baf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafa:	f000 f947 	bl	800bd8c <_lseek_r>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	bf15      	itete	ne
 800bb04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb0e:	81a3      	strheq	r3, [r4, #12]
 800bb10:	bf18      	it	ne
 800bb12:	81a3      	strhne	r3, [r4, #12]
 800bb14:	bd10      	pop	{r4, pc}

0800bb16 <__sclose>:
 800bb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb1a:	f000 b8d1 	b.w	800bcc0 <_close_r>

0800bb1e <__swbuf_r>:
 800bb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb20:	460e      	mov	r6, r1
 800bb22:	4614      	mov	r4, r2
 800bb24:	4605      	mov	r5, r0
 800bb26:	b118      	cbz	r0, 800bb30 <__swbuf_r+0x12>
 800bb28:	6a03      	ldr	r3, [r0, #32]
 800bb2a:	b90b      	cbnz	r3, 800bb30 <__swbuf_r+0x12>
 800bb2c:	f7ff fedc 	bl	800b8e8 <__sinit>
 800bb30:	69a3      	ldr	r3, [r4, #24]
 800bb32:	60a3      	str	r3, [r4, #8]
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	071a      	lsls	r2, r3, #28
 800bb38:	d501      	bpl.n	800bb3e <__swbuf_r+0x20>
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	b943      	cbnz	r3, 800bb50 <__swbuf_r+0x32>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4628      	mov	r0, r5
 800bb42:	f000 f82b 	bl	800bb9c <__swsetup_r>
 800bb46:	b118      	cbz	r0, 800bb50 <__swbuf_r+0x32>
 800bb48:	f04f 37ff 	mov.w	r7, #4294967295
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	6922      	ldr	r2, [r4, #16]
 800bb54:	1a98      	subs	r0, r3, r2
 800bb56:	6963      	ldr	r3, [r4, #20]
 800bb58:	b2f6      	uxtb	r6, r6
 800bb5a:	4283      	cmp	r3, r0
 800bb5c:	4637      	mov	r7, r6
 800bb5e:	dc05      	bgt.n	800bb6c <__swbuf_r+0x4e>
 800bb60:	4621      	mov	r1, r4
 800bb62:	4628      	mov	r0, r5
 800bb64:	f002 fdda 	bl	800e71c <_fflush_r>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d1ed      	bne.n	800bb48 <__swbuf_r+0x2a>
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	60a3      	str	r3, [r4, #8]
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	6022      	str	r2, [r4, #0]
 800bb78:	701e      	strb	r6, [r3, #0]
 800bb7a:	6962      	ldr	r2, [r4, #20]
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d004      	beq.n	800bb8c <__swbuf_r+0x6e>
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	07db      	lsls	r3, r3, #31
 800bb86:	d5e1      	bpl.n	800bb4c <__swbuf_r+0x2e>
 800bb88:	2e0a      	cmp	r6, #10
 800bb8a:	d1df      	bne.n	800bb4c <__swbuf_r+0x2e>
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f002 fdc4 	bl	800e71c <_fflush_r>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d0d9      	beq.n	800bb4c <__swbuf_r+0x2e>
 800bb98:	e7d6      	b.n	800bb48 <__swbuf_r+0x2a>
	...

0800bb9c <__swsetup_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4b29      	ldr	r3, [pc, #164]	@ (800bc44 <__swsetup_r+0xa8>)
 800bba0:	4605      	mov	r5, r0
 800bba2:	6818      	ldr	r0, [r3, #0]
 800bba4:	460c      	mov	r4, r1
 800bba6:	b118      	cbz	r0, 800bbb0 <__swsetup_r+0x14>
 800bba8:	6a03      	ldr	r3, [r0, #32]
 800bbaa:	b90b      	cbnz	r3, 800bbb0 <__swsetup_r+0x14>
 800bbac:	f7ff fe9c 	bl	800b8e8 <__sinit>
 800bbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb4:	0719      	lsls	r1, r3, #28
 800bbb6:	d422      	bmi.n	800bbfe <__swsetup_r+0x62>
 800bbb8:	06da      	lsls	r2, r3, #27
 800bbba:	d407      	bmi.n	800bbcc <__swsetup_r+0x30>
 800bbbc:	2209      	movs	r2, #9
 800bbbe:	602a      	str	r2, [r5, #0]
 800bbc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbca:	e033      	b.n	800bc34 <__swsetup_r+0x98>
 800bbcc:	0758      	lsls	r0, r3, #29
 800bbce:	d512      	bpl.n	800bbf6 <__swsetup_r+0x5a>
 800bbd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbd2:	b141      	cbz	r1, 800bbe6 <__swsetup_r+0x4a>
 800bbd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbd8:	4299      	cmp	r1, r3
 800bbda:	d002      	beq.n	800bbe2 <__swsetup_r+0x46>
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f000 ff51 	bl	800ca84 <_free_r>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbec:	81a3      	strh	r3, [r4, #12]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	6063      	str	r3, [r4, #4]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f043 0308 	orr.w	r3, r3, #8
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	b94b      	cbnz	r3, 800bc16 <__swsetup_r+0x7a>
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc0c:	d003      	beq.n	800bc16 <__swsetup_r+0x7a>
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4628      	mov	r0, r5
 800bc12:	f002 fdd1 	bl	800e7b8 <__smakebuf_r>
 800bc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc1a:	f013 0201 	ands.w	r2, r3, #1
 800bc1e:	d00a      	beq.n	800bc36 <__swsetup_r+0x9a>
 800bc20:	2200      	movs	r2, #0
 800bc22:	60a2      	str	r2, [r4, #8]
 800bc24:	6962      	ldr	r2, [r4, #20]
 800bc26:	4252      	negs	r2, r2
 800bc28:	61a2      	str	r2, [r4, #24]
 800bc2a:	6922      	ldr	r2, [r4, #16]
 800bc2c:	b942      	cbnz	r2, 800bc40 <__swsetup_r+0xa4>
 800bc2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc32:	d1c5      	bne.n	800bbc0 <__swsetup_r+0x24>
 800bc34:	bd38      	pop	{r3, r4, r5, pc}
 800bc36:	0799      	lsls	r1, r3, #30
 800bc38:	bf58      	it	pl
 800bc3a:	6962      	ldrpl	r2, [r4, #20]
 800bc3c:	60a2      	str	r2, [r4, #8]
 800bc3e:	e7f4      	b.n	800bc2a <__swsetup_r+0x8e>
 800bc40:	2000      	movs	r0, #0
 800bc42:	e7f7      	b.n	800bc34 <__swsetup_r+0x98>
 800bc44:	24000020 	.word	0x24000020

0800bc48 <memset>:
 800bc48:	4402      	add	r2, r0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d100      	bne.n	800bc52 <memset+0xa>
 800bc50:	4770      	bx	lr
 800bc52:	f803 1b01 	strb.w	r1, [r3], #1
 800bc56:	e7f9      	b.n	800bc4c <memset+0x4>

0800bc58 <_raise_r>:
 800bc58:	291f      	cmp	r1, #31
 800bc5a:	b538      	push	{r3, r4, r5, lr}
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	d904      	bls.n	800bc6c <_raise_r+0x14>
 800bc62:	2316      	movs	r3, #22
 800bc64:	6003      	str	r3, [r0, #0]
 800bc66:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc6e:	b112      	cbz	r2, 800bc76 <_raise_r+0x1e>
 800bc70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc74:	b94b      	cbnz	r3, 800bc8a <_raise_r+0x32>
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f8be 	bl	800bdf8 <_getpid_r>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4601      	mov	r1, r0
 800bc80:	4628      	mov	r0, r5
 800bc82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc86:	f000 b8a5 	b.w	800bdd4 <_kill_r>
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d00a      	beq.n	800bca4 <_raise_r+0x4c>
 800bc8e:	1c59      	adds	r1, r3, #1
 800bc90:	d103      	bne.n	800bc9a <_raise_r+0x42>
 800bc92:	2316      	movs	r3, #22
 800bc94:	6003      	str	r3, [r0, #0]
 800bc96:	2001      	movs	r0, #1
 800bc98:	e7e7      	b.n	800bc6a <_raise_r+0x12>
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bca0:	4620      	mov	r0, r4
 800bca2:	4798      	blx	r3
 800bca4:	2000      	movs	r0, #0
 800bca6:	e7e0      	b.n	800bc6a <_raise_r+0x12>

0800bca8 <raise>:
 800bca8:	4b02      	ldr	r3, [pc, #8]	@ (800bcb4 <raise+0xc>)
 800bcaa:	4601      	mov	r1, r0
 800bcac:	6818      	ldr	r0, [r3, #0]
 800bcae:	f7ff bfd3 	b.w	800bc58 <_raise_r>
 800bcb2:	bf00      	nop
 800bcb4:	24000020 	.word	0x24000020

0800bcb8 <_localeconv_r>:
 800bcb8:	4800      	ldr	r0, [pc, #0]	@ (800bcbc <_localeconv_r+0x4>)
 800bcba:	4770      	bx	lr
 800bcbc:	24000160 	.word	0x24000160

0800bcc0 <_close_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d06      	ldr	r5, [pc, #24]	@ (800bcdc <_close_r+0x1c>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	f7f5 fb54 	bl	8001378 <_close>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_close_r+0x1a>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_close_r+0x1a>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	24004e84 	.word	0x24004e84

0800bce0 <_reclaim_reent>:
 800bce0:	4b29      	ldr	r3, [pc, #164]	@ (800bd88 <_reclaim_reent+0xa8>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4283      	cmp	r3, r0
 800bce6:	b570      	push	{r4, r5, r6, lr}
 800bce8:	4604      	mov	r4, r0
 800bcea:	d04b      	beq.n	800bd84 <_reclaim_reent+0xa4>
 800bcec:	69c3      	ldr	r3, [r0, #28]
 800bcee:	b1ab      	cbz	r3, 800bd1c <_reclaim_reent+0x3c>
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	b16b      	cbz	r3, 800bd10 <_reclaim_reent+0x30>
 800bcf4:	2500      	movs	r5, #0
 800bcf6:	69e3      	ldr	r3, [r4, #28]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	5959      	ldr	r1, [r3, r5]
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	d13b      	bne.n	800bd78 <_reclaim_reent+0x98>
 800bd00:	3504      	adds	r5, #4
 800bd02:	2d80      	cmp	r5, #128	@ 0x80
 800bd04:	d1f7      	bne.n	800bcf6 <_reclaim_reent+0x16>
 800bd06:	69e3      	ldr	r3, [r4, #28]
 800bd08:	4620      	mov	r0, r4
 800bd0a:	68d9      	ldr	r1, [r3, #12]
 800bd0c:	f000 feba 	bl	800ca84 <_free_r>
 800bd10:	69e3      	ldr	r3, [r4, #28]
 800bd12:	6819      	ldr	r1, [r3, #0]
 800bd14:	b111      	cbz	r1, 800bd1c <_reclaim_reent+0x3c>
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 feb4 	bl	800ca84 <_free_r>
 800bd1c:	6961      	ldr	r1, [r4, #20]
 800bd1e:	b111      	cbz	r1, 800bd26 <_reclaim_reent+0x46>
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 feaf 	bl	800ca84 <_free_r>
 800bd26:	69e1      	ldr	r1, [r4, #28]
 800bd28:	b111      	cbz	r1, 800bd30 <_reclaim_reent+0x50>
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 feaa 	bl	800ca84 <_free_r>
 800bd30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd32:	b111      	cbz	r1, 800bd3a <_reclaim_reent+0x5a>
 800bd34:	4620      	mov	r0, r4
 800bd36:	f000 fea5 	bl	800ca84 <_free_r>
 800bd3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd3c:	b111      	cbz	r1, 800bd44 <_reclaim_reent+0x64>
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 fea0 	bl	800ca84 <_free_r>
 800bd44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd46:	b111      	cbz	r1, 800bd4e <_reclaim_reent+0x6e>
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 fe9b 	bl	800ca84 <_free_r>
 800bd4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd50:	b111      	cbz	r1, 800bd58 <_reclaim_reent+0x78>
 800bd52:	4620      	mov	r0, r4
 800bd54:	f000 fe96 	bl	800ca84 <_free_r>
 800bd58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd5a:	b111      	cbz	r1, 800bd62 <_reclaim_reent+0x82>
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fe91 	bl	800ca84 <_free_r>
 800bd62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd64:	b111      	cbz	r1, 800bd6c <_reclaim_reent+0x8c>
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 fe8c 	bl	800ca84 <_free_r>
 800bd6c:	6a23      	ldr	r3, [r4, #32]
 800bd6e:	b14b      	cbz	r3, 800bd84 <_reclaim_reent+0xa4>
 800bd70:	4620      	mov	r0, r4
 800bd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd76:	4718      	bx	r3
 800bd78:	680e      	ldr	r6, [r1, #0]
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 fe82 	bl	800ca84 <_free_r>
 800bd80:	4631      	mov	r1, r6
 800bd82:	e7bb      	b.n	800bcfc <_reclaim_reent+0x1c>
 800bd84:	bd70      	pop	{r4, r5, r6, pc}
 800bd86:	bf00      	nop
 800bd88:	24000020 	.word	0x24000020

0800bd8c <_lseek_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	@ (800bdac <_lseek_r+0x20>)
 800bd90:	4604      	mov	r4, r0
 800bd92:	4608      	mov	r0, r1
 800bd94:	4611      	mov	r1, r2
 800bd96:	2200      	movs	r2, #0
 800bd98:	602a      	str	r2, [r5, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f7f5 fb13 	bl	80013c6 <_lseek>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_lseek_r+0x1e>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_lseek_r+0x1e>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	24004e84 	.word	0x24004e84

0800bdb0 <_read_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d07      	ldr	r5, [pc, #28]	@ (800bdd0 <_read_r+0x20>)
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	4611      	mov	r1, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	602a      	str	r2, [r5, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f7f5 faa1 	bl	8001306 <_read>
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	d102      	bne.n	800bdce <_read_r+0x1e>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	b103      	cbz	r3, 800bdce <_read_r+0x1e>
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	24004e84 	.word	0x24004e84

0800bdd4 <_kill_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4d07      	ldr	r5, [pc, #28]	@ (800bdf4 <_kill_r+0x20>)
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4604      	mov	r4, r0
 800bddc:	4608      	mov	r0, r1
 800bdde:	4611      	mov	r1, r2
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	f7f5 fa75 	bl	80012d0 <_kill>
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	d102      	bne.n	800bdf0 <_kill_r+0x1c>
 800bdea:	682b      	ldr	r3, [r5, #0]
 800bdec:	b103      	cbz	r3, 800bdf0 <_kill_r+0x1c>
 800bdee:	6023      	str	r3, [r4, #0]
 800bdf0:	bd38      	pop	{r3, r4, r5, pc}
 800bdf2:	bf00      	nop
 800bdf4:	24004e84 	.word	0x24004e84

0800bdf8 <_getpid_r>:
 800bdf8:	f7f5 ba62 	b.w	80012c0 <_getpid>

0800bdfc <_sbrk_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d06      	ldr	r5, [pc, #24]	@ (800be18 <_sbrk_r+0x1c>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	f7f5 faea 	bl	80013e0 <_sbrk>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d102      	bne.n	800be16 <_sbrk_r+0x1a>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	b103      	cbz	r3, 800be16 <_sbrk_r+0x1a>
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	24004e84 	.word	0x24004e84

0800be1c <_write_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	@ (800be3c <_write_r+0x20>)
 800be20:	4604      	mov	r4, r0
 800be22:	4608      	mov	r0, r1
 800be24:	4611      	mov	r1, r2
 800be26:	2200      	movs	r2, #0
 800be28:	602a      	str	r2, [r5, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f7f5 fa88 	bl	8001340 <_write>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_write_r+0x1e>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_write_r+0x1e>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	24004e84 	.word	0x24004e84

0800be40 <__errno>:
 800be40:	4b01      	ldr	r3, [pc, #4]	@ (800be48 <__errno+0x8>)
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	24000020 	.word	0x24000020

0800be4c <__libc_init_array>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	4d0d      	ldr	r5, [pc, #52]	@ (800be84 <__libc_init_array+0x38>)
 800be50:	4c0d      	ldr	r4, [pc, #52]	@ (800be88 <__libc_init_array+0x3c>)
 800be52:	1b64      	subs	r4, r4, r5
 800be54:	10a4      	asrs	r4, r4, #2
 800be56:	2600      	movs	r6, #0
 800be58:	42a6      	cmp	r6, r4
 800be5a:	d109      	bne.n	800be70 <__libc_init_array+0x24>
 800be5c:	4d0b      	ldr	r5, [pc, #44]	@ (800be8c <__libc_init_array+0x40>)
 800be5e:	4c0c      	ldr	r4, [pc, #48]	@ (800be90 <__libc_init_array+0x44>)
 800be60:	f003 f8e0 	bl	800f024 <_init>
 800be64:	1b64      	subs	r4, r4, r5
 800be66:	10a4      	asrs	r4, r4, #2
 800be68:	2600      	movs	r6, #0
 800be6a:	42a6      	cmp	r6, r4
 800be6c:	d105      	bne.n	800be7a <__libc_init_array+0x2e>
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
 800be70:	f855 3b04 	ldr.w	r3, [r5], #4
 800be74:	4798      	blx	r3
 800be76:	3601      	adds	r6, #1
 800be78:	e7ee      	b.n	800be58 <__libc_init_array+0xc>
 800be7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7e:	4798      	blx	r3
 800be80:	3601      	adds	r6, #1
 800be82:	e7f2      	b.n	800be6a <__libc_init_array+0x1e>
 800be84:	0800f6cc 	.word	0x0800f6cc
 800be88:	0800f6cc 	.word	0x0800f6cc
 800be8c:	0800f6cc 	.word	0x0800f6cc
 800be90:	0800f6d0 	.word	0x0800f6d0

0800be94 <__retarget_lock_init_recursive>:
 800be94:	4770      	bx	lr

0800be96 <__retarget_lock_acquire_recursive>:
 800be96:	4770      	bx	lr

0800be98 <__retarget_lock_release_recursive>:
 800be98:	4770      	bx	lr

0800be9a <memcpy>:
 800be9a:	440a      	add	r2, r1
 800be9c:	4291      	cmp	r1, r2
 800be9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bea2:	d100      	bne.n	800bea6 <memcpy+0xc>
 800bea4:	4770      	bx	lr
 800bea6:	b510      	push	{r4, lr}
 800bea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beb0:	4291      	cmp	r1, r2
 800beb2:	d1f9      	bne.n	800bea8 <memcpy+0xe>
 800beb4:	bd10      	pop	{r4, pc}
	...

0800beb8 <nanf>:
 800beb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bec0 <nanf+0x8>
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	7fc00000 	.word	0x7fc00000

0800bec4 <quorem>:
 800bec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	6903      	ldr	r3, [r0, #16]
 800beca:	690c      	ldr	r4, [r1, #16]
 800becc:	42a3      	cmp	r3, r4
 800bece:	4607      	mov	r7, r0
 800bed0:	db7e      	blt.n	800bfd0 <quorem+0x10c>
 800bed2:	3c01      	subs	r4, #1
 800bed4:	f101 0814 	add.w	r8, r1, #20
 800bed8:	00a3      	lsls	r3, r4, #2
 800beda:	f100 0514 	add.w	r5, r0, #20
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800beea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beee:	3301      	adds	r3, #1
 800bef0:	429a      	cmp	r2, r3
 800bef2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bef6:	fbb2 f6f3 	udiv	r6, r2, r3
 800befa:	d32e      	bcc.n	800bf5a <quorem+0x96>
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	46c4      	mov	ip, r8
 800bf02:	46ae      	mov	lr, r5
 800bf04:	46d3      	mov	fp, sl
 800bf06:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf0a:	b298      	uxth	r0, r3
 800bf0c:	fb06 a000 	mla	r0, r6, r0, sl
 800bf10:	0c02      	lsrs	r2, r0, #16
 800bf12:	0c1b      	lsrs	r3, r3, #16
 800bf14:	fb06 2303 	mla	r3, r6, r3, r2
 800bf18:	f8de 2000 	ldr.w	r2, [lr]
 800bf1c:	b280      	uxth	r0, r0
 800bf1e:	b292      	uxth	r2, r2
 800bf20:	1a12      	subs	r2, r2, r0
 800bf22:	445a      	add	r2, fp
 800bf24:	f8de 0000 	ldr.w	r0, [lr]
 800bf28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf36:	b292      	uxth	r2, r2
 800bf38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf3c:	45e1      	cmp	r9, ip
 800bf3e:	f84e 2b04 	str.w	r2, [lr], #4
 800bf42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf46:	d2de      	bcs.n	800bf06 <quorem+0x42>
 800bf48:	9b00      	ldr	r3, [sp, #0]
 800bf4a:	58eb      	ldr	r3, [r5, r3]
 800bf4c:	b92b      	cbnz	r3, 800bf5a <quorem+0x96>
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	3b04      	subs	r3, #4
 800bf52:	429d      	cmp	r5, r3
 800bf54:	461a      	mov	r2, r3
 800bf56:	d32f      	bcc.n	800bfb8 <quorem+0xf4>
 800bf58:	613c      	str	r4, [r7, #16]
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f001 f8a0 	bl	800d0a0 <__mcmp>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	db25      	blt.n	800bfb0 <quorem+0xec>
 800bf64:	4629      	mov	r1, r5
 800bf66:	2000      	movs	r0, #0
 800bf68:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf6c:	f8d1 c000 	ldr.w	ip, [r1]
 800bf70:	fa1f fe82 	uxth.w	lr, r2
 800bf74:	fa1f f38c 	uxth.w	r3, ip
 800bf78:	eba3 030e 	sub.w	r3, r3, lr
 800bf7c:	4403      	add	r3, r0
 800bf7e:	0c12      	lsrs	r2, r2, #16
 800bf80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf8e:	45c1      	cmp	r9, r8
 800bf90:	f841 3b04 	str.w	r3, [r1], #4
 800bf94:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf98:	d2e6      	bcs.n	800bf68 <quorem+0xa4>
 800bf9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfa2:	b922      	cbnz	r2, 800bfae <quorem+0xea>
 800bfa4:	3b04      	subs	r3, #4
 800bfa6:	429d      	cmp	r5, r3
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	d30b      	bcc.n	800bfc4 <quorem+0x100>
 800bfac:	613c      	str	r4, [r7, #16]
 800bfae:	3601      	adds	r6, #1
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	b003      	add	sp, #12
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	6812      	ldr	r2, [r2, #0]
 800bfba:	3b04      	subs	r3, #4
 800bfbc:	2a00      	cmp	r2, #0
 800bfbe:	d1cb      	bne.n	800bf58 <quorem+0x94>
 800bfc0:	3c01      	subs	r4, #1
 800bfc2:	e7c6      	b.n	800bf52 <quorem+0x8e>
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	3b04      	subs	r3, #4
 800bfc8:	2a00      	cmp	r2, #0
 800bfca:	d1ef      	bne.n	800bfac <quorem+0xe8>
 800bfcc:	3c01      	subs	r4, #1
 800bfce:	e7ea      	b.n	800bfa6 <quorem+0xe2>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	e7ee      	b.n	800bfb2 <quorem+0xee>
 800bfd4:	0000      	movs	r0, r0
	...

0800bfd8 <_dtoa_r>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	ed2d 8b02 	vpush	{d8}
 800bfe0:	69c7      	ldr	r7, [r0, #28]
 800bfe2:	b091      	sub	sp, #68	@ 0x44
 800bfe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bfe8:	ec55 4b10 	vmov	r4, r5, d0
 800bfec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bfee:	9107      	str	r1, [sp, #28]
 800bff0:	4681      	mov	r9, r0
 800bff2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bff4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bff6:	b97f      	cbnz	r7, 800c018 <_dtoa_r+0x40>
 800bff8:	2010      	movs	r0, #16
 800bffa:	f7fe fce9 	bl	800a9d0 <malloc>
 800bffe:	4602      	mov	r2, r0
 800c000:	f8c9 001c 	str.w	r0, [r9, #28]
 800c004:	b920      	cbnz	r0, 800c010 <_dtoa_r+0x38>
 800c006:	4ba0      	ldr	r3, [pc, #640]	@ (800c288 <_dtoa_r+0x2b0>)
 800c008:	21ef      	movs	r1, #239	@ 0xef
 800c00a:	48a0      	ldr	r0, [pc, #640]	@ (800c28c <_dtoa_r+0x2b4>)
 800c00c:	f7fe fcc2 	bl	800a994 <__assert_func>
 800c010:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c014:	6007      	str	r7, [r0, #0]
 800c016:	60c7      	str	r7, [r0, #12]
 800c018:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c01c:	6819      	ldr	r1, [r3, #0]
 800c01e:	b159      	cbz	r1, 800c038 <_dtoa_r+0x60>
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	604a      	str	r2, [r1, #4]
 800c024:	2301      	movs	r3, #1
 800c026:	4093      	lsls	r3, r2
 800c028:	608b      	str	r3, [r1, #8]
 800c02a:	4648      	mov	r0, r9
 800c02c:	f000 fdb4 	bl	800cb98 <_Bfree>
 800c030:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	1e2b      	subs	r3, r5, #0
 800c03a:	bfbb      	ittet	lt
 800c03c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c040:	9303      	strlt	r3, [sp, #12]
 800c042:	2300      	movge	r3, #0
 800c044:	2201      	movlt	r2, #1
 800c046:	bfac      	ite	ge
 800c048:	6033      	strge	r3, [r6, #0]
 800c04a:	6032      	strlt	r2, [r6, #0]
 800c04c:	4b90      	ldr	r3, [pc, #576]	@ (800c290 <_dtoa_r+0x2b8>)
 800c04e:	9e03      	ldr	r6, [sp, #12]
 800c050:	43b3      	bics	r3, r6
 800c052:	d110      	bne.n	800c076 <_dtoa_r+0x9e>
 800c054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c056:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c05a:	6013      	str	r3, [r2, #0]
 800c05c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c060:	4323      	orrs	r3, r4
 800c062:	f000 84de 	beq.w	800ca22 <_dtoa_r+0xa4a>
 800c066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c068:	4f8a      	ldr	r7, [pc, #552]	@ (800c294 <_dtoa_r+0x2bc>)
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 84e0 	beq.w	800ca30 <_dtoa_r+0xa58>
 800c070:	1cfb      	adds	r3, r7, #3
 800c072:	f000 bcdb 	b.w	800ca2c <_dtoa_r+0xa54>
 800c076:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c07a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c082:	d10a      	bne.n	800c09a <_dtoa_r+0xc2>
 800c084:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c086:	2301      	movs	r3, #1
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c08c:	b113      	cbz	r3, 800c094 <_dtoa_r+0xbc>
 800c08e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c090:	4b81      	ldr	r3, [pc, #516]	@ (800c298 <_dtoa_r+0x2c0>)
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	4f81      	ldr	r7, [pc, #516]	@ (800c29c <_dtoa_r+0x2c4>)
 800c096:	f000 bccb 	b.w	800ca30 <_dtoa_r+0xa58>
 800c09a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c09c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c09e:	4648      	mov	r0, r9
 800c0a0:	eeb0 0b48 	vmov.f64	d0, d8
 800c0a4:	f001 f91c 	bl	800d2e0 <__d2b>
 800c0a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c0ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0ae:	9001      	str	r0, [sp, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d045      	beq.n	800c140 <_dtoa_r+0x168>
 800c0b4:	eeb0 7b48 	vmov.f64	d7, d8
 800c0b8:	ee18 1a90 	vmov	r1, s17
 800c0bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c0c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c0c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c0c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c0cc:	2500      	movs	r5, #0
 800c0ce:	ee07 1a90 	vmov	s15, r1
 800c0d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c0d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c270 <_dtoa_r+0x298>
 800c0da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c278 <_dtoa_r+0x2a0>
 800c0e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c0e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c280 <_dtoa_r+0x2a8>
 800c0ea:	ee07 3a90 	vmov	s15, r3
 800c0ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c0f2:	eeb0 7b46 	vmov.f64	d7, d6
 800c0f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c0fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c0fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c106:	ee16 8a90 	vmov	r8, s13
 800c10a:	d508      	bpl.n	800c11e <_dtoa_r+0x146>
 800c10c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c110:	eeb4 6b47 	vcmp.f64	d6, d7
 800c114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c118:	bf18      	it	ne
 800c11a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c11e:	f1b8 0f16 	cmp.w	r8, #22
 800c122:	d82b      	bhi.n	800c17c <_dtoa_r+0x1a4>
 800c124:	495e      	ldr	r1, [pc, #376]	@ (800c2a0 <_dtoa_r+0x2c8>)
 800c126:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c12a:	ed91 7b00 	vldr	d7, [r1]
 800c12e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c136:	d501      	bpl.n	800c13c <_dtoa_r+0x164>
 800c138:	f108 38ff 	add.w	r8, r8, #4294967295
 800c13c:	2100      	movs	r1, #0
 800c13e:	e01e      	b.n	800c17e <_dtoa_r+0x1a6>
 800c140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c142:	4413      	add	r3, r2
 800c144:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c148:	2920      	cmp	r1, #32
 800c14a:	bfc1      	itttt	gt
 800c14c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c150:	408e      	lslgt	r6, r1
 800c152:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c156:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c15a:	bfd6      	itet	le
 800c15c:	f1c1 0120 	rsble	r1, r1, #32
 800c160:	4331      	orrgt	r1, r6
 800c162:	fa04 f101 	lslle.w	r1, r4, r1
 800c166:	ee07 1a90 	vmov	s15, r1
 800c16a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c16e:	3b01      	subs	r3, #1
 800c170:	ee17 1a90 	vmov	r1, s15
 800c174:	2501      	movs	r5, #1
 800c176:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c17a:	e7a8      	b.n	800c0ce <_dtoa_r+0xf6>
 800c17c:	2101      	movs	r1, #1
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	1e53      	subs	r3, r2, #1
 800c182:	9306      	str	r3, [sp, #24]
 800c184:	bf45      	ittet	mi
 800c186:	f1c2 0301 	rsbmi	r3, r2, #1
 800c18a:	9305      	strmi	r3, [sp, #20]
 800c18c:	2300      	movpl	r3, #0
 800c18e:	2300      	movmi	r3, #0
 800c190:	bf4c      	ite	mi
 800c192:	9306      	strmi	r3, [sp, #24]
 800c194:	9305      	strpl	r3, [sp, #20]
 800c196:	f1b8 0f00 	cmp.w	r8, #0
 800c19a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c19c:	db18      	blt.n	800c1d0 <_dtoa_r+0x1f8>
 800c19e:	9b06      	ldr	r3, [sp, #24]
 800c1a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c1a4:	4443      	add	r3, r8
 800c1a6:	9306      	str	r3, [sp, #24]
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9a07      	ldr	r2, [sp, #28]
 800c1ac:	2a09      	cmp	r2, #9
 800c1ae:	d849      	bhi.n	800c244 <_dtoa_r+0x26c>
 800c1b0:	2a05      	cmp	r2, #5
 800c1b2:	bfc4      	itt	gt
 800c1b4:	3a04      	subgt	r2, #4
 800c1b6:	9207      	strgt	r2, [sp, #28]
 800c1b8:	9a07      	ldr	r2, [sp, #28]
 800c1ba:	f1a2 0202 	sub.w	r2, r2, #2
 800c1be:	bfcc      	ite	gt
 800c1c0:	2400      	movgt	r4, #0
 800c1c2:	2401      	movle	r4, #1
 800c1c4:	2a03      	cmp	r2, #3
 800c1c6:	d848      	bhi.n	800c25a <_dtoa_r+0x282>
 800c1c8:	e8df f002 	tbb	[pc, r2]
 800c1cc:	3a2c2e0b 	.word	0x3a2c2e0b
 800c1d0:	9b05      	ldr	r3, [sp, #20]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	eba3 0308 	sub.w	r3, r3, r8
 800c1d8:	9305      	str	r3, [sp, #20]
 800c1da:	920a      	str	r2, [sp, #40]	@ 0x28
 800c1dc:	f1c8 0300 	rsb	r3, r8, #0
 800c1e0:	e7e3      	b.n	800c1aa <_dtoa_r+0x1d2>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	9208      	str	r2, [sp, #32]
 800c1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	dc39      	bgt.n	800c260 <_dtoa_r+0x288>
 800c1ec:	f04f 0b01 	mov.w	fp, #1
 800c1f0:	46da      	mov	sl, fp
 800c1f2:	465a      	mov	r2, fp
 800c1f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c1f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	2004      	movs	r0, #4
 800c200:	f100 0614 	add.w	r6, r0, #20
 800c204:	4296      	cmp	r6, r2
 800c206:	d930      	bls.n	800c26a <_dtoa_r+0x292>
 800c208:	6079      	str	r1, [r7, #4]
 800c20a:	4648      	mov	r0, r9
 800c20c:	9304      	str	r3, [sp, #16]
 800c20e:	f000 fc83 	bl	800cb18 <_Balloc>
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	4607      	mov	r7, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	d146      	bne.n	800c2a8 <_dtoa_r+0x2d0>
 800c21a:	4b22      	ldr	r3, [pc, #136]	@ (800c2a4 <_dtoa_r+0x2cc>)
 800c21c:	4602      	mov	r2, r0
 800c21e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c222:	e6f2      	b.n	800c00a <_dtoa_r+0x32>
 800c224:	2201      	movs	r2, #1
 800c226:	e7dd      	b.n	800c1e4 <_dtoa_r+0x20c>
 800c228:	2200      	movs	r2, #0
 800c22a:	9208      	str	r2, [sp, #32]
 800c22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c22e:	eb08 0b02 	add.w	fp, r8, r2
 800c232:	f10b 0a01 	add.w	sl, fp, #1
 800c236:	4652      	mov	r2, sl
 800c238:	2a01      	cmp	r2, #1
 800c23a:	bfb8      	it	lt
 800c23c:	2201      	movlt	r2, #1
 800c23e:	e7db      	b.n	800c1f8 <_dtoa_r+0x220>
 800c240:	2201      	movs	r2, #1
 800c242:	e7f2      	b.n	800c22a <_dtoa_r+0x252>
 800c244:	2401      	movs	r4, #1
 800c246:	2200      	movs	r2, #0
 800c248:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c24c:	f04f 3bff 	mov.w	fp, #4294967295
 800c250:	2100      	movs	r1, #0
 800c252:	46da      	mov	sl, fp
 800c254:	2212      	movs	r2, #18
 800c256:	9109      	str	r1, [sp, #36]	@ 0x24
 800c258:	e7ce      	b.n	800c1f8 <_dtoa_r+0x220>
 800c25a:	2201      	movs	r2, #1
 800c25c:	9208      	str	r2, [sp, #32]
 800c25e:	e7f5      	b.n	800c24c <_dtoa_r+0x274>
 800c260:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c264:	46da      	mov	sl, fp
 800c266:	465a      	mov	r2, fp
 800c268:	e7c6      	b.n	800c1f8 <_dtoa_r+0x220>
 800c26a:	3101      	adds	r1, #1
 800c26c:	0040      	lsls	r0, r0, #1
 800c26e:	e7c7      	b.n	800c200 <_dtoa_r+0x228>
 800c270:	636f4361 	.word	0x636f4361
 800c274:	3fd287a7 	.word	0x3fd287a7
 800c278:	8b60c8b3 	.word	0x8b60c8b3
 800c27c:	3fc68a28 	.word	0x3fc68a28
 800c280:	509f79fb 	.word	0x509f79fb
 800c284:	3fd34413 	.word	0x3fd34413
 800c288:	0800f316 	.word	0x0800f316
 800c28c:	0800f32d 	.word	0x0800f32d
 800c290:	7ff00000 	.word	0x7ff00000
 800c294:	0800f312 	.word	0x0800f312
 800c298:	0800f2e1 	.word	0x0800f2e1
 800c29c:	0800f2e0 	.word	0x0800f2e0
 800c2a0:	0800f428 	.word	0x0800f428
 800c2a4:	0800f385 	.word	0x0800f385
 800c2a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c2ac:	f1ba 0f0e 	cmp.w	sl, #14
 800c2b0:	6010      	str	r0, [r2, #0]
 800c2b2:	d86f      	bhi.n	800c394 <_dtoa_r+0x3bc>
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	d06d      	beq.n	800c394 <_dtoa_r+0x3bc>
 800c2b8:	f1b8 0f00 	cmp.w	r8, #0
 800c2bc:	f340 80c2 	ble.w	800c444 <_dtoa_r+0x46c>
 800c2c0:	4aca      	ldr	r2, [pc, #808]	@ (800c5ec <_dtoa_r+0x614>)
 800c2c2:	f008 010f 	and.w	r1, r8, #15
 800c2c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c2ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c2ce:	ed92 7b00 	vldr	d7, [r2]
 800c2d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c2d6:	f000 80a9 	beq.w	800c42c <_dtoa_r+0x454>
 800c2da:	4ac5      	ldr	r2, [pc, #788]	@ (800c5f0 <_dtoa_r+0x618>)
 800c2dc:	ed92 6b08 	vldr	d6, [r2, #32]
 800c2e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c2e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c2e8:	f001 010f 	and.w	r1, r1, #15
 800c2ec:	2203      	movs	r2, #3
 800c2ee:	48c0      	ldr	r0, [pc, #768]	@ (800c5f0 <_dtoa_r+0x618>)
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	f040 809d 	bne.w	800c430 <_dtoa_r+0x458>
 800c2f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c2fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c2fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c302:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c304:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c308:	2900      	cmp	r1, #0
 800c30a:	f000 80c1 	beq.w	800c490 <_dtoa_r+0x4b8>
 800c30e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c312:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31a:	f140 80b9 	bpl.w	800c490 <_dtoa_r+0x4b8>
 800c31e:	f1ba 0f00 	cmp.w	sl, #0
 800c322:	f000 80b5 	beq.w	800c490 <_dtoa_r+0x4b8>
 800c326:	f1bb 0f00 	cmp.w	fp, #0
 800c32a:	dd31      	ble.n	800c390 <_dtoa_r+0x3b8>
 800c32c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c330:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c334:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c338:	f108 31ff 	add.w	r1, r8, #4294967295
 800c33c:	9104      	str	r1, [sp, #16]
 800c33e:	3201      	adds	r2, #1
 800c340:	465c      	mov	r4, fp
 800c342:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c346:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c34a:	ee07 2a90 	vmov	s15, r2
 800c34e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c352:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c356:	ee15 2a90 	vmov	r2, s11
 800c35a:	ec51 0b15 	vmov	r0, r1, d5
 800c35e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c362:	2c00      	cmp	r4, #0
 800c364:	f040 8098 	bne.w	800c498 <_dtoa_r+0x4c0>
 800c368:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c36c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c370:	ec41 0b17 	vmov	d7, r0, r1
 800c374:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37c:	f300 8261 	bgt.w	800c842 <_dtoa_r+0x86a>
 800c380:	eeb1 7b47 	vneg.f64	d7, d7
 800c384:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38c:	f100 80f5 	bmi.w	800c57a <_dtoa_r+0x5a2>
 800c390:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c394:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c396:	2a00      	cmp	r2, #0
 800c398:	f2c0 812c 	blt.w	800c5f4 <_dtoa_r+0x61c>
 800c39c:	f1b8 0f0e 	cmp.w	r8, #14
 800c3a0:	f300 8128 	bgt.w	800c5f4 <_dtoa_r+0x61c>
 800c3a4:	4b91      	ldr	r3, [pc, #580]	@ (800c5ec <_dtoa_r+0x614>)
 800c3a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c3aa:	ed93 6b00 	vldr	d6, [r3]
 800c3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	da03      	bge.n	800c3bc <_dtoa_r+0x3e4>
 800c3b4:	f1ba 0f00 	cmp.w	sl, #0
 800c3b8:	f340 80d2 	ble.w	800c560 <_dtoa_r+0x588>
 800c3bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c3c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3c4:	463e      	mov	r6, r7
 800c3c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c3ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c3ce:	ee15 3a10 	vmov	r3, s10
 800c3d2:	3330      	adds	r3, #48	@ 0x30
 800c3d4:	f806 3b01 	strb.w	r3, [r6], #1
 800c3d8:	1bf3      	subs	r3, r6, r7
 800c3da:	459a      	cmp	sl, r3
 800c3dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c3e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c3e4:	f040 80f8 	bne.w	800c5d8 <_dtoa_r+0x600>
 800c3e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c3ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f4:	f300 80dd 	bgt.w	800c5b2 <_dtoa_r+0x5da>
 800c3f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c400:	d104      	bne.n	800c40c <_dtoa_r+0x434>
 800c402:	ee15 3a10 	vmov	r3, s10
 800c406:	07db      	lsls	r3, r3, #31
 800c408:	f100 80d3 	bmi.w	800c5b2 <_dtoa_r+0x5da>
 800c40c:	9901      	ldr	r1, [sp, #4]
 800c40e:	4648      	mov	r0, r9
 800c410:	f000 fbc2 	bl	800cb98 <_Bfree>
 800c414:	2300      	movs	r3, #0
 800c416:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c418:	7033      	strb	r3, [r6, #0]
 800c41a:	f108 0301 	add.w	r3, r8, #1
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 8304 	beq.w	800ca30 <_dtoa_r+0xa58>
 800c428:	601e      	str	r6, [r3, #0]
 800c42a:	e301      	b.n	800ca30 <_dtoa_r+0xa58>
 800c42c:	2202      	movs	r2, #2
 800c42e:	e75e      	b.n	800c2ee <_dtoa_r+0x316>
 800c430:	07cc      	lsls	r4, r1, #31
 800c432:	d504      	bpl.n	800c43e <_dtoa_r+0x466>
 800c434:	ed90 6b00 	vldr	d6, [r0]
 800c438:	3201      	adds	r2, #1
 800c43a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c43e:	1049      	asrs	r1, r1, #1
 800c440:	3008      	adds	r0, #8
 800c442:	e755      	b.n	800c2f0 <_dtoa_r+0x318>
 800c444:	d022      	beq.n	800c48c <_dtoa_r+0x4b4>
 800c446:	f1c8 0100 	rsb	r1, r8, #0
 800c44a:	4a68      	ldr	r2, [pc, #416]	@ (800c5ec <_dtoa_r+0x614>)
 800c44c:	f001 000f 	and.w	r0, r1, #15
 800c450:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c454:	ed92 7b00 	vldr	d7, [r2]
 800c458:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c45c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c460:	4863      	ldr	r0, [pc, #396]	@ (800c5f0 <_dtoa_r+0x618>)
 800c462:	1109      	asrs	r1, r1, #4
 800c464:	2400      	movs	r4, #0
 800c466:	2202      	movs	r2, #2
 800c468:	b929      	cbnz	r1, 800c476 <_dtoa_r+0x49e>
 800c46a:	2c00      	cmp	r4, #0
 800c46c:	f43f af49 	beq.w	800c302 <_dtoa_r+0x32a>
 800c470:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c474:	e745      	b.n	800c302 <_dtoa_r+0x32a>
 800c476:	07ce      	lsls	r6, r1, #31
 800c478:	d505      	bpl.n	800c486 <_dtoa_r+0x4ae>
 800c47a:	ed90 6b00 	vldr	d6, [r0]
 800c47e:	3201      	adds	r2, #1
 800c480:	2401      	movs	r4, #1
 800c482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c486:	1049      	asrs	r1, r1, #1
 800c488:	3008      	adds	r0, #8
 800c48a:	e7ed      	b.n	800c468 <_dtoa_r+0x490>
 800c48c:	2202      	movs	r2, #2
 800c48e:	e738      	b.n	800c302 <_dtoa_r+0x32a>
 800c490:	f8cd 8010 	str.w	r8, [sp, #16]
 800c494:	4654      	mov	r4, sl
 800c496:	e754      	b.n	800c342 <_dtoa_r+0x36a>
 800c498:	4a54      	ldr	r2, [pc, #336]	@ (800c5ec <_dtoa_r+0x614>)
 800c49a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c49e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c4a2:	9a08      	ldr	r2, [sp, #32]
 800c4a4:	ec41 0b17 	vmov	d7, r0, r1
 800c4a8:	443c      	add	r4, r7
 800c4aa:	b34a      	cbz	r2, 800c500 <_dtoa_r+0x528>
 800c4ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c4b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c4b4:	463e      	mov	r6, r7
 800c4b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c4ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c4be:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c4c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c4c6:	ee14 2a90 	vmov	r2, s9
 800c4ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c4ce:	3230      	adds	r2, #48	@ 0x30
 800c4d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4dc:	f806 2b01 	strb.w	r2, [r6], #1
 800c4e0:	d438      	bmi.n	800c554 <_dtoa_r+0x57c>
 800c4e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c4e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ee:	d462      	bmi.n	800c5b6 <_dtoa_r+0x5de>
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	f43f af4d 	beq.w	800c390 <_dtoa_r+0x3b8>
 800c4f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c4fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c4fe:	e7e0      	b.n	800c4c2 <_dtoa_r+0x4ea>
 800c500:	4621      	mov	r1, r4
 800c502:	463e      	mov	r6, r7
 800c504:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c508:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c50c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c510:	ee14 2a90 	vmov	r2, s9
 800c514:	3230      	adds	r2, #48	@ 0x30
 800c516:	f806 2b01 	strb.w	r2, [r6], #1
 800c51a:	42a6      	cmp	r6, r4
 800c51c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c520:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c524:	d119      	bne.n	800c55a <_dtoa_r+0x582>
 800c526:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c52a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c52e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	dc3e      	bgt.n	800c5b6 <_dtoa_r+0x5de>
 800c538:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c53c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	f57f af24 	bpl.w	800c390 <_dtoa_r+0x3b8>
 800c548:	460e      	mov	r6, r1
 800c54a:	3901      	subs	r1, #1
 800c54c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c550:	2b30      	cmp	r3, #48	@ 0x30
 800c552:	d0f9      	beq.n	800c548 <_dtoa_r+0x570>
 800c554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c558:	e758      	b.n	800c40c <_dtoa_r+0x434>
 800c55a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c55e:	e7d5      	b.n	800c50c <_dtoa_r+0x534>
 800c560:	d10b      	bne.n	800c57a <_dtoa_r+0x5a2>
 800c562:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c566:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c56a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c56e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c576:	f2c0 8161 	blt.w	800c83c <_dtoa_r+0x864>
 800c57a:	2400      	movs	r4, #0
 800c57c:	4625      	mov	r5, r4
 800c57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c580:	43db      	mvns	r3, r3
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	463e      	mov	r6, r7
 800c586:	f04f 0800 	mov.w	r8, #0
 800c58a:	4621      	mov	r1, r4
 800c58c:	4648      	mov	r0, r9
 800c58e:	f000 fb03 	bl	800cb98 <_Bfree>
 800c592:	2d00      	cmp	r5, #0
 800c594:	d0de      	beq.n	800c554 <_dtoa_r+0x57c>
 800c596:	f1b8 0f00 	cmp.w	r8, #0
 800c59a:	d005      	beq.n	800c5a8 <_dtoa_r+0x5d0>
 800c59c:	45a8      	cmp	r8, r5
 800c59e:	d003      	beq.n	800c5a8 <_dtoa_r+0x5d0>
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	f000 faf8 	bl	800cb98 <_Bfree>
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	4648      	mov	r0, r9
 800c5ac:	f000 faf4 	bl	800cb98 <_Bfree>
 800c5b0:	e7d0      	b.n	800c554 <_dtoa_r+0x57c>
 800c5b2:	f8cd 8010 	str.w	r8, [sp, #16]
 800c5b6:	4633      	mov	r3, r6
 800c5b8:	461e      	mov	r6, r3
 800c5ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5be:	2a39      	cmp	r2, #57	@ 0x39
 800c5c0:	d106      	bne.n	800c5d0 <_dtoa_r+0x5f8>
 800c5c2:	429f      	cmp	r7, r3
 800c5c4:	d1f8      	bne.n	800c5b8 <_dtoa_r+0x5e0>
 800c5c6:	9a04      	ldr	r2, [sp, #16]
 800c5c8:	3201      	adds	r2, #1
 800c5ca:	9204      	str	r2, [sp, #16]
 800c5cc:	2230      	movs	r2, #48	@ 0x30
 800c5ce:	703a      	strb	r2, [r7, #0]
 800c5d0:	781a      	ldrb	r2, [r3, #0]
 800c5d2:	3201      	adds	r2, #1
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	e7bd      	b.n	800c554 <_dtoa_r+0x57c>
 800c5d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e4:	f47f aeef 	bne.w	800c3c6 <_dtoa_r+0x3ee>
 800c5e8:	e710      	b.n	800c40c <_dtoa_r+0x434>
 800c5ea:	bf00      	nop
 800c5ec:	0800f428 	.word	0x0800f428
 800c5f0:	0800f400 	.word	0x0800f400
 800c5f4:	9908      	ldr	r1, [sp, #32]
 800c5f6:	2900      	cmp	r1, #0
 800c5f8:	f000 80e3 	beq.w	800c7c2 <_dtoa_r+0x7ea>
 800c5fc:	9907      	ldr	r1, [sp, #28]
 800c5fe:	2901      	cmp	r1, #1
 800c600:	f300 80c8 	bgt.w	800c794 <_dtoa_r+0x7bc>
 800c604:	2d00      	cmp	r5, #0
 800c606:	f000 80c1 	beq.w	800c78c <_dtoa_r+0x7b4>
 800c60a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c60e:	9e05      	ldr	r6, [sp, #20]
 800c610:	461c      	mov	r4, r3
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	9b05      	ldr	r3, [sp, #20]
 800c616:	4413      	add	r3, r2
 800c618:	9305      	str	r3, [sp, #20]
 800c61a:	9b06      	ldr	r3, [sp, #24]
 800c61c:	2101      	movs	r1, #1
 800c61e:	4413      	add	r3, r2
 800c620:	4648      	mov	r0, r9
 800c622:	9306      	str	r3, [sp, #24]
 800c624:	f000 fbb6 	bl	800cd94 <__i2b>
 800c628:	9b04      	ldr	r3, [sp, #16]
 800c62a:	4605      	mov	r5, r0
 800c62c:	b166      	cbz	r6, 800c648 <_dtoa_r+0x670>
 800c62e:	9a06      	ldr	r2, [sp, #24]
 800c630:	2a00      	cmp	r2, #0
 800c632:	dd09      	ble.n	800c648 <_dtoa_r+0x670>
 800c634:	42b2      	cmp	r2, r6
 800c636:	9905      	ldr	r1, [sp, #20]
 800c638:	bfa8      	it	ge
 800c63a:	4632      	movge	r2, r6
 800c63c:	1a89      	subs	r1, r1, r2
 800c63e:	9105      	str	r1, [sp, #20]
 800c640:	9906      	ldr	r1, [sp, #24]
 800c642:	1ab6      	subs	r6, r6, r2
 800c644:	1a8a      	subs	r2, r1, r2
 800c646:	9206      	str	r2, [sp, #24]
 800c648:	b1fb      	cbz	r3, 800c68a <_dtoa_r+0x6b2>
 800c64a:	9a08      	ldr	r2, [sp, #32]
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	f000 80bc 	beq.w	800c7ca <_dtoa_r+0x7f2>
 800c652:	b19c      	cbz	r4, 800c67c <_dtoa_r+0x6a4>
 800c654:	4629      	mov	r1, r5
 800c656:	4622      	mov	r2, r4
 800c658:	4648      	mov	r0, r9
 800c65a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c65c:	f000 fc5a 	bl	800cf14 <__pow5mult>
 800c660:	9a01      	ldr	r2, [sp, #4]
 800c662:	4601      	mov	r1, r0
 800c664:	4605      	mov	r5, r0
 800c666:	4648      	mov	r0, r9
 800c668:	f000 fbaa 	bl	800cdc0 <__multiply>
 800c66c:	9901      	ldr	r1, [sp, #4]
 800c66e:	9004      	str	r0, [sp, #16]
 800c670:	4648      	mov	r0, r9
 800c672:	f000 fa91 	bl	800cb98 <_Bfree>
 800c676:	9a04      	ldr	r2, [sp, #16]
 800c678:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c67a:	9201      	str	r2, [sp, #4]
 800c67c:	1b1a      	subs	r2, r3, r4
 800c67e:	d004      	beq.n	800c68a <_dtoa_r+0x6b2>
 800c680:	9901      	ldr	r1, [sp, #4]
 800c682:	4648      	mov	r0, r9
 800c684:	f000 fc46 	bl	800cf14 <__pow5mult>
 800c688:	9001      	str	r0, [sp, #4]
 800c68a:	2101      	movs	r1, #1
 800c68c:	4648      	mov	r0, r9
 800c68e:	f000 fb81 	bl	800cd94 <__i2b>
 800c692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c694:	4604      	mov	r4, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 81d0 	beq.w	800ca3c <_dtoa_r+0xa64>
 800c69c:	461a      	mov	r2, r3
 800c69e:	4601      	mov	r1, r0
 800c6a0:	4648      	mov	r0, r9
 800c6a2:	f000 fc37 	bl	800cf14 <__pow5mult>
 800c6a6:	9b07      	ldr	r3, [sp, #28]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	f300 8095 	bgt.w	800c7da <_dtoa_r+0x802>
 800c6b0:	9b02      	ldr	r3, [sp, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f040 808b 	bne.w	800c7ce <_dtoa_r+0x7f6>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	f040 8087 	bne.w	800c7d2 <_dtoa_r+0x7fa>
 800c6c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c6c8:	0d12      	lsrs	r2, r2, #20
 800c6ca:	0512      	lsls	r2, r2, #20
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	f000 8082 	beq.w	800c7d6 <_dtoa_r+0x7fe>
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	9306      	str	r3, [sp, #24]
 800c6de:	2301      	movs	r3, #1
 800c6e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 81af 	beq.w	800ca48 <_dtoa_r+0xa70>
 800c6ea:	6922      	ldr	r2, [r4, #16]
 800c6ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c6f0:	6910      	ldr	r0, [r2, #16]
 800c6f2:	f000 fb03 	bl	800ccfc <__hi0bits>
 800c6f6:	f1c0 0020 	rsb	r0, r0, #32
 800c6fa:	9b06      	ldr	r3, [sp, #24]
 800c6fc:	4418      	add	r0, r3
 800c6fe:	f010 001f 	ands.w	r0, r0, #31
 800c702:	d076      	beq.n	800c7f2 <_dtoa_r+0x81a>
 800c704:	f1c0 0220 	rsb	r2, r0, #32
 800c708:	2a04      	cmp	r2, #4
 800c70a:	dd69      	ble.n	800c7e0 <_dtoa_r+0x808>
 800c70c:	9b05      	ldr	r3, [sp, #20]
 800c70e:	f1c0 001c 	rsb	r0, r0, #28
 800c712:	4403      	add	r3, r0
 800c714:	9305      	str	r3, [sp, #20]
 800c716:	9b06      	ldr	r3, [sp, #24]
 800c718:	4406      	add	r6, r0
 800c71a:	4403      	add	r3, r0
 800c71c:	9306      	str	r3, [sp, #24]
 800c71e:	9b05      	ldr	r3, [sp, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	dd05      	ble.n	800c730 <_dtoa_r+0x758>
 800c724:	9901      	ldr	r1, [sp, #4]
 800c726:	461a      	mov	r2, r3
 800c728:	4648      	mov	r0, r9
 800c72a:	f000 fc4d 	bl	800cfc8 <__lshift>
 800c72e:	9001      	str	r0, [sp, #4]
 800c730:	9b06      	ldr	r3, [sp, #24]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dd05      	ble.n	800c742 <_dtoa_r+0x76a>
 800c736:	4621      	mov	r1, r4
 800c738:	461a      	mov	r2, r3
 800c73a:	4648      	mov	r0, r9
 800c73c:	f000 fc44 	bl	800cfc8 <__lshift>
 800c740:	4604      	mov	r4, r0
 800c742:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c744:	2b00      	cmp	r3, #0
 800c746:	d056      	beq.n	800c7f6 <_dtoa_r+0x81e>
 800c748:	9801      	ldr	r0, [sp, #4]
 800c74a:	4621      	mov	r1, r4
 800c74c:	f000 fca8 	bl	800d0a0 <__mcmp>
 800c750:	2800      	cmp	r0, #0
 800c752:	da50      	bge.n	800c7f6 <_dtoa_r+0x81e>
 800c754:	f108 33ff 	add.w	r3, r8, #4294967295
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	9901      	ldr	r1, [sp, #4]
 800c75c:	2300      	movs	r3, #0
 800c75e:	220a      	movs	r2, #10
 800c760:	4648      	mov	r0, r9
 800c762:	f000 fa3b 	bl	800cbdc <__multadd>
 800c766:	9b08      	ldr	r3, [sp, #32]
 800c768:	9001      	str	r0, [sp, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 816e 	beq.w	800ca4c <_dtoa_r+0xa74>
 800c770:	4629      	mov	r1, r5
 800c772:	2300      	movs	r3, #0
 800c774:	220a      	movs	r2, #10
 800c776:	4648      	mov	r0, r9
 800c778:	f000 fa30 	bl	800cbdc <__multadd>
 800c77c:	f1bb 0f00 	cmp.w	fp, #0
 800c780:	4605      	mov	r5, r0
 800c782:	dc64      	bgt.n	800c84e <_dtoa_r+0x876>
 800c784:	9b07      	ldr	r3, [sp, #28]
 800c786:	2b02      	cmp	r3, #2
 800c788:	dc3e      	bgt.n	800c808 <_dtoa_r+0x830>
 800c78a:	e060      	b.n	800c84e <_dtoa_r+0x876>
 800c78c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c78e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c792:	e73c      	b.n	800c60e <_dtoa_r+0x636>
 800c794:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c798:	42a3      	cmp	r3, r4
 800c79a:	bfbf      	itttt	lt
 800c79c:	1ae2      	sublt	r2, r4, r3
 800c79e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c7a0:	189b      	addlt	r3, r3, r2
 800c7a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c7a4:	bfae      	itee	ge
 800c7a6:	1b1c      	subge	r4, r3, r4
 800c7a8:	4623      	movlt	r3, r4
 800c7aa:	2400      	movlt	r4, #0
 800c7ac:	f1ba 0f00 	cmp.w	sl, #0
 800c7b0:	bfb5      	itete	lt
 800c7b2:	9a05      	ldrlt	r2, [sp, #20]
 800c7b4:	9e05      	ldrge	r6, [sp, #20]
 800c7b6:	eba2 060a 	sublt.w	r6, r2, sl
 800c7ba:	4652      	movge	r2, sl
 800c7bc:	bfb8      	it	lt
 800c7be:	2200      	movlt	r2, #0
 800c7c0:	e727      	b.n	800c612 <_dtoa_r+0x63a>
 800c7c2:	9e05      	ldr	r6, [sp, #20]
 800c7c4:	9d08      	ldr	r5, [sp, #32]
 800c7c6:	461c      	mov	r4, r3
 800c7c8:	e730      	b.n	800c62c <_dtoa_r+0x654>
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	e758      	b.n	800c680 <_dtoa_r+0x6a8>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e786      	b.n	800c6e0 <_dtoa_r+0x708>
 800c7d2:	9b02      	ldr	r3, [sp, #8]
 800c7d4:	e784      	b.n	800c6e0 <_dtoa_r+0x708>
 800c7d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c7d8:	e783      	b.n	800c6e2 <_dtoa_r+0x70a>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7de:	e784      	b.n	800c6ea <_dtoa_r+0x712>
 800c7e0:	d09d      	beq.n	800c71e <_dtoa_r+0x746>
 800c7e2:	9b05      	ldr	r3, [sp, #20]
 800c7e4:	321c      	adds	r2, #28
 800c7e6:	4413      	add	r3, r2
 800c7e8:	9305      	str	r3, [sp, #20]
 800c7ea:	9b06      	ldr	r3, [sp, #24]
 800c7ec:	4416      	add	r6, r2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	e794      	b.n	800c71c <_dtoa_r+0x744>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	e7f5      	b.n	800c7e2 <_dtoa_r+0x80a>
 800c7f6:	f1ba 0f00 	cmp.w	sl, #0
 800c7fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800c7fe:	46d3      	mov	fp, sl
 800c800:	dc21      	bgt.n	800c846 <_dtoa_r+0x86e>
 800c802:	9b07      	ldr	r3, [sp, #28]
 800c804:	2b02      	cmp	r3, #2
 800c806:	dd1e      	ble.n	800c846 <_dtoa_r+0x86e>
 800c808:	f1bb 0f00 	cmp.w	fp, #0
 800c80c:	f47f aeb7 	bne.w	800c57e <_dtoa_r+0x5a6>
 800c810:	4621      	mov	r1, r4
 800c812:	465b      	mov	r3, fp
 800c814:	2205      	movs	r2, #5
 800c816:	4648      	mov	r0, r9
 800c818:	f000 f9e0 	bl	800cbdc <__multadd>
 800c81c:	4601      	mov	r1, r0
 800c81e:	4604      	mov	r4, r0
 800c820:	9801      	ldr	r0, [sp, #4]
 800c822:	f000 fc3d 	bl	800d0a0 <__mcmp>
 800c826:	2800      	cmp	r0, #0
 800c828:	f77f aea9 	ble.w	800c57e <_dtoa_r+0x5a6>
 800c82c:	463e      	mov	r6, r7
 800c82e:	2331      	movs	r3, #49	@ 0x31
 800c830:	f806 3b01 	strb.w	r3, [r6], #1
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	3301      	adds	r3, #1
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	e6a4      	b.n	800c586 <_dtoa_r+0x5ae>
 800c83c:	f8cd 8010 	str.w	r8, [sp, #16]
 800c840:	4654      	mov	r4, sl
 800c842:	4625      	mov	r5, r4
 800c844:	e7f2      	b.n	800c82c <_dtoa_r+0x854>
 800c846:	9b08      	ldr	r3, [sp, #32]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 8103 	beq.w	800ca54 <_dtoa_r+0xa7c>
 800c84e:	2e00      	cmp	r6, #0
 800c850:	dd05      	ble.n	800c85e <_dtoa_r+0x886>
 800c852:	4629      	mov	r1, r5
 800c854:	4632      	mov	r2, r6
 800c856:	4648      	mov	r0, r9
 800c858:	f000 fbb6 	bl	800cfc8 <__lshift>
 800c85c:	4605      	mov	r5, r0
 800c85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d058      	beq.n	800c916 <_dtoa_r+0x93e>
 800c864:	6869      	ldr	r1, [r5, #4]
 800c866:	4648      	mov	r0, r9
 800c868:	f000 f956 	bl	800cb18 <_Balloc>
 800c86c:	4606      	mov	r6, r0
 800c86e:	b928      	cbnz	r0, 800c87c <_dtoa_r+0x8a4>
 800c870:	4b82      	ldr	r3, [pc, #520]	@ (800ca7c <_dtoa_r+0xaa4>)
 800c872:	4602      	mov	r2, r0
 800c874:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c878:	f7ff bbc7 	b.w	800c00a <_dtoa_r+0x32>
 800c87c:	692a      	ldr	r2, [r5, #16]
 800c87e:	3202      	adds	r2, #2
 800c880:	0092      	lsls	r2, r2, #2
 800c882:	f105 010c 	add.w	r1, r5, #12
 800c886:	300c      	adds	r0, #12
 800c888:	f7ff fb07 	bl	800be9a <memcpy>
 800c88c:	2201      	movs	r2, #1
 800c88e:	4631      	mov	r1, r6
 800c890:	4648      	mov	r0, r9
 800c892:	f000 fb99 	bl	800cfc8 <__lshift>
 800c896:	1c7b      	adds	r3, r7, #1
 800c898:	9305      	str	r3, [sp, #20]
 800c89a:	eb07 030b 	add.w	r3, r7, fp
 800c89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a0:	9b02      	ldr	r3, [sp, #8]
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	46a8      	mov	r8, r5
 800c8a8:	9308      	str	r3, [sp, #32]
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	9b05      	ldr	r3, [sp, #20]
 800c8ae:	9801      	ldr	r0, [sp, #4]
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c8b6:	f7ff fb05 	bl	800bec4 <quorem>
 800c8ba:	4641      	mov	r1, r8
 800c8bc:	9002      	str	r0, [sp, #8]
 800c8be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c8c2:	9801      	ldr	r0, [sp, #4]
 800c8c4:	f000 fbec 	bl	800d0a0 <__mcmp>
 800c8c8:	462a      	mov	r2, r5
 800c8ca:	9006      	str	r0, [sp, #24]
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	f000 fc02 	bl	800d0d8 <__mdiff>
 800c8d4:	68c2      	ldr	r2, [r0, #12]
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	b9fa      	cbnz	r2, 800c91a <_dtoa_r+0x942>
 800c8da:	4601      	mov	r1, r0
 800c8dc:	9801      	ldr	r0, [sp, #4]
 800c8de:	f000 fbdf 	bl	800d0a0 <__mcmp>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4648      	mov	r0, r9
 800c8e8:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8ea:	f000 f955 	bl	800cb98 <_Bfree>
 800c8ee:	9b07      	ldr	r3, [sp, #28]
 800c8f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8f2:	9e05      	ldr	r6, [sp, #20]
 800c8f4:	ea43 0102 	orr.w	r1, r3, r2
 800c8f8:	9b08      	ldr	r3, [sp, #32]
 800c8fa:	4319      	orrs	r1, r3
 800c8fc:	d10f      	bne.n	800c91e <_dtoa_r+0x946>
 800c8fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c902:	d028      	beq.n	800c956 <_dtoa_r+0x97e>
 800c904:	9b06      	ldr	r3, [sp, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	dd02      	ble.n	800c910 <_dtoa_r+0x938>
 800c90a:	9b02      	ldr	r3, [sp, #8]
 800c90c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c910:	f88b a000 	strb.w	sl, [fp]
 800c914:	e639      	b.n	800c58a <_dtoa_r+0x5b2>
 800c916:	4628      	mov	r0, r5
 800c918:	e7bd      	b.n	800c896 <_dtoa_r+0x8be>
 800c91a:	2201      	movs	r2, #1
 800c91c:	e7e2      	b.n	800c8e4 <_dtoa_r+0x90c>
 800c91e:	9b06      	ldr	r3, [sp, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	db04      	blt.n	800c92e <_dtoa_r+0x956>
 800c924:	9907      	ldr	r1, [sp, #28]
 800c926:	430b      	orrs	r3, r1
 800c928:	9908      	ldr	r1, [sp, #32]
 800c92a:	430b      	orrs	r3, r1
 800c92c:	d120      	bne.n	800c970 <_dtoa_r+0x998>
 800c92e:	2a00      	cmp	r2, #0
 800c930:	ddee      	ble.n	800c910 <_dtoa_r+0x938>
 800c932:	9901      	ldr	r1, [sp, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	4648      	mov	r0, r9
 800c938:	f000 fb46 	bl	800cfc8 <__lshift>
 800c93c:	4621      	mov	r1, r4
 800c93e:	9001      	str	r0, [sp, #4]
 800c940:	f000 fbae 	bl	800d0a0 <__mcmp>
 800c944:	2800      	cmp	r0, #0
 800c946:	dc03      	bgt.n	800c950 <_dtoa_r+0x978>
 800c948:	d1e2      	bne.n	800c910 <_dtoa_r+0x938>
 800c94a:	f01a 0f01 	tst.w	sl, #1
 800c94e:	d0df      	beq.n	800c910 <_dtoa_r+0x938>
 800c950:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c954:	d1d9      	bne.n	800c90a <_dtoa_r+0x932>
 800c956:	2339      	movs	r3, #57	@ 0x39
 800c958:	f88b 3000 	strb.w	r3, [fp]
 800c95c:	4633      	mov	r3, r6
 800c95e:	461e      	mov	r6, r3
 800c960:	3b01      	subs	r3, #1
 800c962:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c966:	2a39      	cmp	r2, #57	@ 0x39
 800c968:	d053      	beq.n	800ca12 <_dtoa_r+0xa3a>
 800c96a:	3201      	adds	r2, #1
 800c96c:	701a      	strb	r2, [r3, #0]
 800c96e:	e60c      	b.n	800c58a <_dtoa_r+0x5b2>
 800c970:	2a00      	cmp	r2, #0
 800c972:	dd07      	ble.n	800c984 <_dtoa_r+0x9ac>
 800c974:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c978:	d0ed      	beq.n	800c956 <_dtoa_r+0x97e>
 800c97a:	f10a 0301 	add.w	r3, sl, #1
 800c97e:	f88b 3000 	strb.w	r3, [fp]
 800c982:	e602      	b.n	800c58a <_dtoa_r+0x5b2>
 800c984:	9b05      	ldr	r3, [sp, #20]
 800c986:	9a05      	ldr	r2, [sp, #20]
 800c988:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c98e:	4293      	cmp	r3, r2
 800c990:	d029      	beq.n	800c9e6 <_dtoa_r+0xa0e>
 800c992:	9901      	ldr	r1, [sp, #4]
 800c994:	2300      	movs	r3, #0
 800c996:	220a      	movs	r2, #10
 800c998:	4648      	mov	r0, r9
 800c99a:	f000 f91f 	bl	800cbdc <__multadd>
 800c99e:	45a8      	cmp	r8, r5
 800c9a0:	9001      	str	r0, [sp, #4]
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	f04f 020a 	mov.w	r2, #10
 800c9aa:	4641      	mov	r1, r8
 800c9ac:	4648      	mov	r0, r9
 800c9ae:	d107      	bne.n	800c9c0 <_dtoa_r+0x9e8>
 800c9b0:	f000 f914 	bl	800cbdc <__multadd>
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	9b05      	ldr	r3, [sp, #20]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	9305      	str	r3, [sp, #20]
 800c9be:	e775      	b.n	800c8ac <_dtoa_r+0x8d4>
 800c9c0:	f000 f90c 	bl	800cbdc <__multadd>
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	220a      	movs	r2, #10
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	f000 f905 	bl	800cbdc <__multadd>
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	e7f0      	b.n	800c9b8 <_dtoa_r+0x9e0>
 800c9d6:	f1bb 0f00 	cmp.w	fp, #0
 800c9da:	bfcc      	ite	gt
 800c9dc:	465e      	movgt	r6, fp
 800c9de:	2601      	movle	r6, #1
 800c9e0:	443e      	add	r6, r7
 800c9e2:	f04f 0800 	mov.w	r8, #0
 800c9e6:	9901      	ldr	r1, [sp, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	4648      	mov	r0, r9
 800c9ec:	f000 faec 	bl	800cfc8 <__lshift>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	9001      	str	r0, [sp, #4]
 800c9f4:	f000 fb54 	bl	800d0a0 <__mcmp>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	dcaf      	bgt.n	800c95c <_dtoa_r+0x984>
 800c9fc:	d102      	bne.n	800ca04 <_dtoa_r+0xa2c>
 800c9fe:	f01a 0f01 	tst.w	sl, #1
 800ca02:	d1ab      	bne.n	800c95c <_dtoa_r+0x984>
 800ca04:	4633      	mov	r3, r6
 800ca06:	461e      	mov	r6, r3
 800ca08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca0c:	2a30      	cmp	r2, #48	@ 0x30
 800ca0e:	d0fa      	beq.n	800ca06 <_dtoa_r+0xa2e>
 800ca10:	e5bb      	b.n	800c58a <_dtoa_r+0x5b2>
 800ca12:	429f      	cmp	r7, r3
 800ca14:	d1a3      	bne.n	800c95e <_dtoa_r+0x986>
 800ca16:	9b04      	ldr	r3, [sp, #16]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	2331      	movs	r3, #49	@ 0x31
 800ca1e:	703b      	strb	r3, [r7, #0]
 800ca20:	e5b3      	b.n	800c58a <_dtoa_r+0x5b2>
 800ca22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca24:	4f16      	ldr	r7, [pc, #88]	@ (800ca80 <_dtoa_r+0xaa8>)
 800ca26:	b11b      	cbz	r3, 800ca30 <_dtoa_r+0xa58>
 800ca28:	f107 0308 	add.w	r3, r7, #8
 800ca2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ca2e:	6013      	str	r3, [r2, #0]
 800ca30:	4638      	mov	r0, r7
 800ca32:	b011      	add	sp, #68	@ 0x44
 800ca34:	ecbd 8b02 	vpop	{d8}
 800ca38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	f77f ae36 	ble.w	800c6b0 <_dtoa_r+0x6d8>
 800ca44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca48:	2001      	movs	r0, #1
 800ca4a:	e656      	b.n	800c6fa <_dtoa_r+0x722>
 800ca4c:	f1bb 0f00 	cmp.w	fp, #0
 800ca50:	f77f aed7 	ble.w	800c802 <_dtoa_r+0x82a>
 800ca54:	463e      	mov	r6, r7
 800ca56:	9801      	ldr	r0, [sp, #4]
 800ca58:	4621      	mov	r1, r4
 800ca5a:	f7ff fa33 	bl	800bec4 <quorem>
 800ca5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ca62:	f806 ab01 	strb.w	sl, [r6], #1
 800ca66:	1bf2      	subs	r2, r6, r7
 800ca68:	4593      	cmp	fp, r2
 800ca6a:	ddb4      	ble.n	800c9d6 <_dtoa_r+0x9fe>
 800ca6c:	9901      	ldr	r1, [sp, #4]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	220a      	movs	r2, #10
 800ca72:	4648      	mov	r0, r9
 800ca74:	f000 f8b2 	bl	800cbdc <__multadd>
 800ca78:	9001      	str	r0, [sp, #4]
 800ca7a:	e7ec      	b.n	800ca56 <_dtoa_r+0xa7e>
 800ca7c:	0800f385 	.word	0x0800f385
 800ca80:	0800f309 	.word	0x0800f309

0800ca84 <_free_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4605      	mov	r5, r0
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	d041      	beq.n	800cb10 <_free_r+0x8c>
 800ca8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca90:	1f0c      	subs	r4, r1, #4
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	bfb8      	it	lt
 800ca96:	18e4      	addlt	r4, r4, r3
 800ca98:	f7fe f84c 	bl	800ab34 <__malloc_lock>
 800ca9c:	4a1d      	ldr	r2, [pc, #116]	@ (800cb14 <_free_r+0x90>)
 800ca9e:	6813      	ldr	r3, [r2, #0]
 800caa0:	b933      	cbnz	r3, 800cab0 <_free_r+0x2c>
 800caa2:	6063      	str	r3, [r4, #4]
 800caa4:	6014      	str	r4, [r2, #0]
 800caa6:	4628      	mov	r0, r5
 800caa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caac:	f7fe b848 	b.w	800ab40 <__malloc_unlock>
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d908      	bls.n	800cac6 <_free_r+0x42>
 800cab4:	6820      	ldr	r0, [r4, #0]
 800cab6:	1821      	adds	r1, r4, r0
 800cab8:	428b      	cmp	r3, r1
 800caba:	bf01      	itttt	eq
 800cabc:	6819      	ldreq	r1, [r3, #0]
 800cabe:	685b      	ldreq	r3, [r3, #4]
 800cac0:	1809      	addeq	r1, r1, r0
 800cac2:	6021      	streq	r1, [r4, #0]
 800cac4:	e7ed      	b.n	800caa2 <_free_r+0x1e>
 800cac6:	461a      	mov	r2, r3
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	b10b      	cbz	r3, 800cad0 <_free_r+0x4c>
 800cacc:	42a3      	cmp	r3, r4
 800cace:	d9fa      	bls.n	800cac6 <_free_r+0x42>
 800cad0:	6811      	ldr	r1, [r2, #0]
 800cad2:	1850      	adds	r0, r2, r1
 800cad4:	42a0      	cmp	r0, r4
 800cad6:	d10b      	bne.n	800caf0 <_free_r+0x6c>
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	4401      	add	r1, r0
 800cadc:	1850      	adds	r0, r2, r1
 800cade:	4283      	cmp	r3, r0
 800cae0:	6011      	str	r1, [r2, #0]
 800cae2:	d1e0      	bne.n	800caa6 <_free_r+0x22>
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	6053      	str	r3, [r2, #4]
 800caea:	4408      	add	r0, r1
 800caec:	6010      	str	r0, [r2, #0]
 800caee:	e7da      	b.n	800caa6 <_free_r+0x22>
 800caf0:	d902      	bls.n	800caf8 <_free_r+0x74>
 800caf2:	230c      	movs	r3, #12
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	e7d6      	b.n	800caa6 <_free_r+0x22>
 800caf8:	6820      	ldr	r0, [r4, #0]
 800cafa:	1821      	adds	r1, r4, r0
 800cafc:	428b      	cmp	r3, r1
 800cafe:	bf04      	itt	eq
 800cb00:	6819      	ldreq	r1, [r3, #0]
 800cb02:	685b      	ldreq	r3, [r3, #4]
 800cb04:	6063      	str	r3, [r4, #4]
 800cb06:	bf04      	itt	eq
 800cb08:	1809      	addeq	r1, r1, r0
 800cb0a:	6021      	streq	r1, [r4, #0]
 800cb0c:	6054      	str	r4, [r2, #4]
 800cb0e:	e7ca      	b.n	800caa6 <_free_r+0x22>
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	24004d44 	.word	0x24004d44

0800cb18 <_Balloc>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	69c6      	ldr	r6, [r0, #28]
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	460d      	mov	r5, r1
 800cb20:	b976      	cbnz	r6, 800cb40 <_Balloc+0x28>
 800cb22:	2010      	movs	r0, #16
 800cb24:	f7fd ff54 	bl	800a9d0 <malloc>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	61e0      	str	r0, [r4, #28]
 800cb2c:	b920      	cbnz	r0, 800cb38 <_Balloc+0x20>
 800cb2e:	4b18      	ldr	r3, [pc, #96]	@ (800cb90 <_Balloc+0x78>)
 800cb30:	4818      	ldr	r0, [pc, #96]	@ (800cb94 <_Balloc+0x7c>)
 800cb32:	216b      	movs	r1, #107	@ 0x6b
 800cb34:	f7fd ff2e 	bl	800a994 <__assert_func>
 800cb38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb3c:	6006      	str	r6, [r0, #0]
 800cb3e:	60c6      	str	r6, [r0, #12]
 800cb40:	69e6      	ldr	r6, [r4, #28]
 800cb42:	68f3      	ldr	r3, [r6, #12]
 800cb44:	b183      	cbz	r3, 800cb68 <_Balloc+0x50>
 800cb46:	69e3      	ldr	r3, [r4, #28]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb4e:	b9b8      	cbnz	r0, 800cb80 <_Balloc+0x68>
 800cb50:	2101      	movs	r1, #1
 800cb52:	fa01 f605 	lsl.w	r6, r1, r5
 800cb56:	1d72      	adds	r2, r6, #5
 800cb58:	0092      	lsls	r2, r2, #2
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f001 fec0 	bl	800e8e0 <_calloc_r>
 800cb60:	b160      	cbz	r0, 800cb7c <_Balloc+0x64>
 800cb62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb66:	e00e      	b.n	800cb86 <_Balloc+0x6e>
 800cb68:	2221      	movs	r2, #33	@ 0x21
 800cb6a:	2104      	movs	r1, #4
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f001 feb7 	bl	800e8e0 <_calloc_r>
 800cb72:	69e3      	ldr	r3, [r4, #28]
 800cb74:	60f0      	str	r0, [r6, #12]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e4      	bne.n	800cb46 <_Balloc+0x2e>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	6802      	ldr	r2, [r0, #0]
 800cb82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb86:	2300      	movs	r3, #0
 800cb88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb8c:	e7f7      	b.n	800cb7e <_Balloc+0x66>
 800cb8e:	bf00      	nop
 800cb90:	0800f316 	.word	0x0800f316
 800cb94:	0800f396 	.word	0x0800f396

0800cb98 <_Bfree>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	69c6      	ldr	r6, [r0, #28]
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	460c      	mov	r4, r1
 800cba0:	b976      	cbnz	r6, 800cbc0 <_Bfree+0x28>
 800cba2:	2010      	movs	r0, #16
 800cba4:	f7fd ff14 	bl	800a9d0 <malloc>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	61e8      	str	r0, [r5, #28]
 800cbac:	b920      	cbnz	r0, 800cbb8 <_Bfree+0x20>
 800cbae:	4b09      	ldr	r3, [pc, #36]	@ (800cbd4 <_Bfree+0x3c>)
 800cbb0:	4809      	ldr	r0, [pc, #36]	@ (800cbd8 <_Bfree+0x40>)
 800cbb2:	218f      	movs	r1, #143	@ 0x8f
 800cbb4:	f7fd feee 	bl	800a994 <__assert_func>
 800cbb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbbc:	6006      	str	r6, [r0, #0]
 800cbbe:	60c6      	str	r6, [r0, #12]
 800cbc0:	b13c      	cbz	r4, 800cbd2 <_Bfree+0x3a>
 800cbc2:	69eb      	ldr	r3, [r5, #28]
 800cbc4:	6862      	ldr	r2, [r4, #4]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbcc:	6021      	str	r1, [r4, #0]
 800cbce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	0800f316 	.word	0x0800f316
 800cbd8:	0800f396 	.word	0x0800f396

0800cbdc <__multadd>:
 800cbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe0:	690d      	ldr	r5, [r1, #16]
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	461e      	mov	r6, r3
 800cbe8:	f101 0c14 	add.w	ip, r1, #20
 800cbec:	2000      	movs	r0, #0
 800cbee:	f8dc 3000 	ldr.w	r3, [ip]
 800cbf2:	b299      	uxth	r1, r3
 800cbf4:	fb02 6101 	mla	r1, r2, r1, r6
 800cbf8:	0c1e      	lsrs	r6, r3, #16
 800cbfa:	0c0b      	lsrs	r3, r1, #16
 800cbfc:	fb02 3306 	mla	r3, r2, r6, r3
 800cc00:	b289      	uxth	r1, r1
 800cc02:	3001      	adds	r0, #1
 800cc04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc08:	4285      	cmp	r5, r0
 800cc0a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc12:	dcec      	bgt.n	800cbee <__multadd+0x12>
 800cc14:	b30e      	cbz	r6, 800cc5a <__multadd+0x7e>
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	42ab      	cmp	r3, r5
 800cc1a:	dc19      	bgt.n	800cc50 <__multadd+0x74>
 800cc1c:	6861      	ldr	r1, [r4, #4]
 800cc1e:	4638      	mov	r0, r7
 800cc20:	3101      	adds	r1, #1
 800cc22:	f7ff ff79 	bl	800cb18 <_Balloc>
 800cc26:	4680      	mov	r8, r0
 800cc28:	b928      	cbnz	r0, 800cc36 <__multadd+0x5a>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	4b0c      	ldr	r3, [pc, #48]	@ (800cc60 <__multadd+0x84>)
 800cc2e:	480d      	ldr	r0, [pc, #52]	@ (800cc64 <__multadd+0x88>)
 800cc30:	21ba      	movs	r1, #186	@ 0xba
 800cc32:	f7fd feaf 	bl	800a994 <__assert_func>
 800cc36:	6922      	ldr	r2, [r4, #16]
 800cc38:	3202      	adds	r2, #2
 800cc3a:	f104 010c 	add.w	r1, r4, #12
 800cc3e:	0092      	lsls	r2, r2, #2
 800cc40:	300c      	adds	r0, #12
 800cc42:	f7ff f92a 	bl	800be9a <memcpy>
 800cc46:	4621      	mov	r1, r4
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ffa5 	bl	800cb98 <_Bfree>
 800cc4e:	4644      	mov	r4, r8
 800cc50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc54:	3501      	adds	r5, #1
 800cc56:	615e      	str	r6, [r3, #20]
 800cc58:	6125      	str	r5, [r4, #16]
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc60:	0800f385 	.word	0x0800f385
 800cc64:	0800f396 	.word	0x0800f396

0800cc68 <__s2b>:
 800cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	4615      	mov	r5, r2
 800cc70:	461f      	mov	r7, r3
 800cc72:	2209      	movs	r2, #9
 800cc74:	3308      	adds	r3, #8
 800cc76:	4606      	mov	r6, r0
 800cc78:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	2201      	movs	r2, #1
 800cc80:	429a      	cmp	r2, r3
 800cc82:	db09      	blt.n	800cc98 <__s2b+0x30>
 800cc84:	4630      	mov	r0, r6
 800cc86:	f7ff ff47 	bl	800cb18 <_Balloc>
 800cc8a:	b940      	cbnz	r0, 800cc9e <__s2b+0x36>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	4b19      	ldr	r3, [pc, #100]	@ (800ccf4 <__s2b+0x8c>)
 800cc90:	4819      	ldr	r0, [pc, #100]	@ (800ccf8 <__s2b+0x90>)
 800cc92:	21d3      	movs	r1, #211	@ 0xd3
 800cc94:	f7fd fe7e 	bl	800a994 <__assert_func>
 800cc98:	0052      	lsls	r2, r2, #1
 800cc9a:	3101      	adds	r1, #1
 800cc9c:	e7f0      	b.n	800cc80 <__s2b+0x18>
 800cc9e:	9b08      	ldr	r3, [sp, #32]
 800cca0:	6143      	str	r3, [r0, #20]
 800cca2:	2d09      	cmp	r5, #9
 800cca4:	f04f 0301 	mov.w	r3, #1
 800cca8:	6103      	str	r3, [r0, #16]
 800ccaa:	dd16      	ble.n	800ccda <__s2b+0x72>
 800ccac:	f104 0909 	add.w	r9, r4, #9
 800ccb0:	46c8      	mov	r8, r9
 800ccb2:	442c      	add	r4, r5
 800ccb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccb8:	4601      	mov	r1, r0
 800ccba:	3b30      	subs	r3, #48	@ 0x30
 800ccbc:	220a      	movs	r2, #10
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7ff ff8c 	bl	800cbdc <__multadd>
 800ccc4:	45a0      	cmp	r8, r4
 800ccc6:	d1f5      	bne.n	800ccb4 <__s2b+0x4c>
 800ccc8:	f1a5 0408 	sub.w	r4, r5, #8
 800cccc:	444c      	add	r4, r9
 800ccce:	1b2d      	subs	r5, r5, r4
 800ccd0:	1963      	adds	r3, r4, r5
 800ccd2:	42bb      	cmp	r3, r7
 800ccd4:	db04      	blt.n	800cce0 <__s2b+0x78>
 800ccd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccda:	340a      	adds	r4, #10
 800ccdc:	2509      	movs	r5, #9
 800ccde:	e7f6      	b.n	800ccce <__s2b+0x66>
 800cce0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cce4:	4601      	mov	r1, r0
 800cce6:	3b30      	subs	r3, #48	@ 0x30
 800cce8:	220a      	movs	r2, #10
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ff76 	bl	800cbdc <__multadd>
 800ccf0:	e7ee      	b.n	800ccd0 <__s2b+0x68>
 800ccf2:	bf00      	nop
 800ccf4:	0800f385 	.word	0x0800f385
 800ccf8:	0800f396 	.word	0x0800f396

0800ccfc <__hi0bits>:
 800ccfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd00:	4603      	mov	r3, r0
 800cd02:	bf36      	itet	cc
 800cd04:	0403      	lslcc	r3, r0, #16
 800cd06:	2000      	movcs	r0, #0
 800cd08:	2010      	movcc	r0, #16
 800cd0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd0e:	bf3c      	itt	cc
 800cd10:	021b      	lslcc	r3, r3, #8
 800cd12:	3008      	addcc	r0, #8
 800cd14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd18:	bf3c      	itt	cc
 800cd1a:	011b      	lslcc	r3, r3, #4
 800cd1c:	3004      	addcc	r0, #4
 800cd1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd22:	bf3c      	itt	cc
 800cd24:	009b      	lslcc	r3, r3, #2
 800cd26:	3002      	addcc	r0, #2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	db05      	blt.n	800cd38 <__hi0bits+0x3c>
 800cd2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd30:	f100 0001 	add.w	r0, r0, #1
 800cd34:	bf08      	it	eq
 800cd36:	2020      	moveq	r0, #32
 800cd38:	4770      	bx	lr

0800cd3a <__lo0bits>:
 800cd3a:	6803      	ldr	r3, [r0, #0]
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	f013 0007 	ands.w	r0, r3, #7
 800cd42:	d00b      	beq.n	800cd5c <__lo0bits+0x22>
 800cd44:	07d9      	lsls	r1, r3, #31
 800cd46:	d421      	bmi.n	800cd8c <__lo0bits+0x52>
 800cd48:	0798      	lsls	r0, r3, #30
 800cd4a:	bf49      	itett	mi
 800cd4c:	085b      	lsrmi	r3, r3, #1
 800cd4e:	089b      	lsrpl	r3, r3, #2
 800cd50:	2001      	movmi	r0, #1
 800cd52:	6013      	strmi	r3, [r2, #0]
 800cd54:	bf5c      	itt	pl
 800cd56:	6013      	strpl	r3, [r2, #0]
 800cd58:	2002      	movpl	r0, #2
 800cd5a:	4770      	bx	lr
 800cd5c:	b299      	uxth	r1, r3
 800cd5e:	b909      	cbnz	r1, 800cd64 <__lo0bits+0x2a>
 800cd60:	0c1b      	lsrs	r3, r3, #16
 800cd62:	2010      	movs	r0, #16
 800cd64:	b2d9      	uxtb	r1, r3
 800cd66:	b909      	cbnz	r1, 800cd6c <__lo0bits+0x32>
 800cd68:	3008      	adds	r0, #8
 800cd6a:	0a1b      	lsrs	r3, r3, #8
 800cd6c:	0719      	lsls	r1, r3, #28
 800cd6e:	bf04      	itt	eq
 800cd70:	091b      	lsreq	r3, r3, #4
 800cd72:	3004      	addeq	r0, #4
 800cd74:	0799      	lsls	r1, r3, #30
 800cd76:	bf04      	itt	eq
 800cd78:	089b      	lsreq	r3, r3, #2
 800cd7a:	3002      	addeq	r0, #2
 800cd7c:	07d9      	lsls	r1, r3, #31
 800cd7e:	d403      	bmi.n	800cd88 <__lo0bits+0x4e>
 800cd80:	085b      	lsrs	r3, r3, #1
 800cd82:	f100 0001 	add.w	r0, r0, #1
 800cd86:	d003      	beq.n	800cd90 <__lo0bits+0x56>
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	4770      	bx	lr
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	4770      	bx	lr
 800cd90:	2020      	movs	r0, #32
 800cd92:	4770      	bx	lr

0800cd94 <__i2b>:
 800cd94:	b510      	push	{r4, lr}
 800cd96:	460c      	mov	r4, r1
 800cd98:	2101      	movs	r1, #1
 800cd9a:	f7ff febd 	bl	800cb18 <_Balloc>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	b928      	cbnz	r0, 800cdae <__i2b+0x1a>
 800cda2:	4b05      	ldr	r3, [pc, #20]	@ (800cdb8 <__i2b+0x24>)
 800cda4:	4805      	ldr	r0, [pc, #20]	@ (800cdbc <__i2b+0x28>)
 800cda6:	f240 1145 	movw	r1, #325	@ 0x145
 800cdaa:	f7fd fdf3 	bl	800a994 <__assert_func>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	6144      	str	r4, [r0, #20]
 800cdb2:	6103      	str	r3, [r0, #16]
 800cdb4:	bd10      	pop	{r4, pc}
 800cdb6:	bf00      	nop
 800cdb8:	0800f385 	.word	0x0800f385
 800cdbc:	0800f396 	.word	0x0800f396

0800cdc0 <__multiply>:
 800cdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	690a      	ldr	r2, [r1, #16]
 800cdc8:	6923      	ldr	r3, [r4, #16]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	bfa8      	it	ge
 800cdce:	4623      	movge	r3, r4
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	bfa4      	itt	ge
 800cdd4:	460c      	movge	r4, r1
 800cdd6:	461f      	movge	r7, r3
 800cdd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cddc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cde0:	68a3      	ldr	r3, [r4, #8]
 800cde2:	6861      	ldr	r1, [r4, #4]
 800cde4:	eb0a 0609 	add.w	r6, sl, r9
 800cde8:	42b3      	cmp	r3, r6
 800cdea:	b085      	sub	sp, #20
 800cdec:	bfb8      	it	lt
 800cdee:	3101      	addlt	r1, #1
 800cdf0:	f7ff fe92 	bl	800cb18 <_Balloc>
 800cdf4:	b930      	cbnz	r0, 800ce04 <__multiply+0x44>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	4b44      	ldr	r3, [pc, #272]	@ (800cf0c <__multiply+0x14c>)
 800cdfa:	4845      	ldr	r0, [pc, #276]	@ (800cf10 <__multiply+0x150>)
 800cdfc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce00:	f7fd fdc8 	bl	800a994 <__assert_func>
 800ce04:	f100 0514 	add.w	r5, r0, #20
 800ce08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce0c:	462b      	mov	r3, r5
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4543      	cmp	r3, r8
 800ce12:	d321      	bcc.n	800ce58 <__multiply+0x98>
 800ce14:	f107 0114 	add.w	r1, r7, #20
 800ce18:	f104 0214 	add.w	r2, r4, #20
 800ce1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce24:	9302      	str	r3, [sp, #8]
 800ce26:	1b13      	subs	r3, r2, r4
 800ce28:	3b15      	subs	r3, #21
 800ce2a:	f023 0303 	bic.w	r3, r3, #3
 800ce2e:	3304      	adds	r3, #4
 800ce30:	f104 0715 	add.w	r7, r4, #21
 800ce34:	42ba      	cmp	r2, r7
 800ce36:	bf38      	it	cc
 800ce38:	2304      	movcc	r3, #4
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	9b02      	ldr	r3, [sp, #8]
 800ce3e:	9103      	str	r1, [sp, #12]
 800ce40:	428b      	cmp	r3, r1
 800ce42:	d80c      	bhi.n	800ce5e <__multiply+0x9e>
 800ce44:	2e00      	cmp	r6, #0
 800ce46:	dd03      	ble.n	800ce50 <__multiply+0x90>
 800ce48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d05b      	beq.n	800cf08 <__multiply+0x148>
 800ce50:	6106      	str	r6, [r0, #16]
 800ce52:	b005      	add	sp, #20
 800ce54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce58:	f843 2b04 	str.w	r2, [r3], #4
 800ce5c:	e7d8      	b.n	800ce10 <__multiply+0x50>
 800ce5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce62:	f1ba 0f00 	cmp.w	sl, #0
 800ce66:	d024      	beq.n	800ceb2 <__multiply+0xf2>
 800ce68:	f104 0e14 	add.w	lr, r4, #20
 800ce6c:	46a9      	mov	r9, r5
 800ce6e:	f04f 0c00 	mov.w	ip, #0
 800ce72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce76:	f8d9 3000 	ldr.w	r3, [r9]
 800ce7a:	fa1f fb87 	uxth.w	fp, r7
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce88:	f8d9 7000 	ldr.w	r7, [r9]
 800ce8c:	4463      	add	r3, ip
 800ce8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce92:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cea0:	4572      	cmp	r2, lr
 800cea2:	f849 3b04 	str.w	r3, [r9], #4
 800cea6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ceaa:	d8e2      	bhi.n	800ce72 <__multiply+0xb2>
 800ceac:	9b01      	ldr	r3, [sp, #4]
 800ceae:	f845 c003 	str.w	ip, [r5, r3]
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ceb8:	3104      	adds	r1, #4
 800ceba:	f1b9 0f00 	cmp.w	r9, #0
 800cebe:	d021      	beq.n	800cf04 <__multiply+0x144>
 800cec0:	682b      	ldr	r3, [r5, #0]
 800cec2:	f104 0c14 	add.w	ip, r4, #20
 800cec6:	46ae      	mov	lr, r5
 800cec8:	f04f 0a00 	mov.w	sl, #0
 800cecc:	f8bc b000 	ldrh.w	fp, [ip]
 800ced0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ced4:	fb09 770b 	mla	r7, r9, fp, r7
 800ced8:	4457      	add	r7, sl
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cee0:	f84e 3b04 	str.w	r3, [lr], #4
 800cee4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceec:	f8be 3000 	ldrh.w	r3, [lr]
 800cef0:	fb09 330a 	mla	r3, r9, sl, r3
 800cef4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cef8:	4562      	cmp	r2, ip
 800cefa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cefe:	d8e5      	bhi.n	800cecc <__multiply+0x10c>
 800cf00:	9f01      	ldr	r7, [sp, #4]
 800cf02:	51eb      	str	r3, [r5, r7]
 800cf04:	3504      	adds	r5, #4
 800cf06:	e799      	b.n	800ce3c <__multiply+0x7c>
 800cf08:	3e01      	subs	r6, #1
 800cf0a:	e79b      	b.n	800ce44 <__multiply+0x84>
 800cf0c:	0800f385 	.word	0x0800f385
 800cf10:	0800f396 	.word	0x0800f396

0800cf14 <__pow5mult>:
 800cf14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf18:	4615      	mov	r5, r2
 800cf1a:	f012 0203 	ands.w	r2, r2, #3
 800cf1e:	4607      	mov	r7, r0
 800cf20:	460e      	mov	r6, r1
 800cf22:	d007      	beq.n	800cf34 <__pow5mult+0x20>
 800cf24:	4c25      	ldr	r4, [pc, #148]	@ (800cfbc <__pow5mult+0xa8>)
 800cf26:	3a01      	subs	r2, #1
 800cf28:	2300      	movs	r3, #0
 800cf2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf2e:	f7ff fe55 	bl	800cbdc <__multadd>
 800cf32:	4606      	mov	r6, r0
 800cf34:	10ad      	asrs	r5, r5, #2
 800cf36:	d03d      	beq.n	800cfb4 <__pow5mult+0xa0>
 800cf38:	69fc      	ldr	r4, [r7, #28]
 800cf3a:	b97c      	cbnz	r4, 800cf5c <__pow5mult+0x48>
 800cf3c:	2010      	movs	r0, #16
 800cf3e:	f7fd fd47 	bl	800a9d0 <malloc>
 800cf42:	4602      	mov	r2, r0
 800cf44:	61f8      	str	r0, [r7, #28]
 800cf46:	b928      	cbnz	r0, 800cf54 <__pow5mult+0x40>
 800cf48:	4b1d      	ldr	r3, [pc, #116]	@ (800cfc0 <__pow5mult+0xac>)
 800cf4a:	481e      	ldr	r0, [pc, #120]	@ (800cfc4 <__pow5mult+0xb0>)
 800cf4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf50:	f7fd fd20 	bl	800a994 <__assert_func>
 800cf54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf58:	6004      	str	r4, [r0, #0]
 800cf5a:	60c4      	str	r4, [r0, #12]
 800cf5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf64:	b94c      	cbnz	r4, 800cf7a <__pow5mult+0x66>
 800cf66:	f240 2171 	movw	r1, #625	@ 0x271
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	f7ff ff12 	bl	800cd94 <__i2b>
 800cf70:	2300      	movs	r3, #0
 800cf72:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf76:	4604      	mov	r4, r0
 800cf78:	6003      	str	r3, [r0, #0]
 800cf7a:	f04f 0900 	mov.w	r9, #0
 800cf7e:	07eb      	lsls	r3, r5, #31
 800cf80:	d50a      	bpl.n	800cf98 <__pow5mult+0x84>
 800cf82:	4631      	mov	r1, r6
 800cf84:	4622      	mov	r2, r4
 800cf86:	4638      	mov	r0, r7
 800cf88:	f7ff ff1a 	bl	800cdc0 <__multiply>
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	4680      	mov	r8, r0
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7ff fe01 	bl	800cb98 <_Bfree>
 800cf96:	4646      	mov	r6, r8
 800cf98:	106d      	asrs	r5, r5, #1
 800cf9a:	d00b      	beq.n	800cfb4 <__pow5mult+0xa0>
 800cf9c:	6820      	ldr	r0, [r4, #0]
 800cf9e:	b938      	cbnz	r0, 800cfb0 <__pow5mult+0x9c>
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f7ff ff0b 	bl	800cdc0 <__multiply>
 800cfaa:	6020      	str	r0, [r4, #0]
 800cfac:	f8c0 9000 	str.w	r9, [r0]
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	e7e4      	b.n	800cf7e <__pow5mult+0x6a>
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfba:	bf00      	nop
 800cfbc:	0800f3f0 	.word	0x0800f3f0
 800cfc0:	0800f316 	.word	0x0800f316
 800cfc4:	0800f396 	.word	0x0800f396

0800cfc8 <__lshift>:
 800cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	460c      	mov	r4, r1
 800cfce:	6849      	ldr	r1, [r1, #4]
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	4607      	mov	r7, r0
 800cfda:	4691      	mov	r9, r2
 800cfdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfe0:	f108 0601 	add.w	r6, r8, #1
 800cfe4:	42b3      	cmp	r3, r6
 800cfe6:	db0b      	blt.n	800d000 <__lshift+0x38>
 800cfe8:	4638      	mov	r0, r7
 800cfea:	f7ff fd95 	bl	800cb18 <_Balloc>
 800cfee:	4605      	mov	r5, r0
 800cff0:	b948      	cbnz	r0, 800d006 <__lshift+0x3e>
 800cff2:	4602      	mov	r2, r0
 800cff4:	4b28      	ldr	r3, [pc, #160]	@ (800d098 <__lshift+0xd0>)
 800cff6:	4829      	ldr	r0, [pc, #164]	@ (800d09c <__lshift+0xd4>)
 800cff8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cffc:	f7fd fcca 	bl	800a994 <__assert_func>
 800d000:	3101      	adds	r1, #1
 800d002:	005b      	lsls	r3, r3, #1
 800d004:	e7ee      	b.n	800cfe4 <__lshift+0x1c>
 800d006:	2300      	movs	r3, #0
 800d008:	f100 0114 	add.w	r1, r0, #20
 800d00c:	f100 0210 	add.w	r2, r0, #16
 800d010:	4618      	mov	r0, r3
 800d012:	4553      	cmp	r3, sl
 800d014:	db33      	blt.n	800d07e <__lshift+0xb6>
 800d016:	6920      	ldr	r0, [r4, #16]
 800d018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d01c:	f104 0314 	add.w	r3, r4, #20
 800d020:	f019 091f 	ands.w	r9, r9, #31
 800d024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d028:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d02c:	d02b      	beq.n	800d086 <__lshift+0xbe>
 800d02e:	f1c9 0e20 	rsb	lr, r9, #32
 800d032:	468a      	mov	sl, r1
 800d034:	2200      	movs	r2, #0
 800d036:	6818      	ldr	r0, [r3, #0]
 800d038:	fa00 f009 	lsl.w	r0, r0, r9
 800d03c:	4310      	orrs	r0, r2
 800d03e:	f84a 0b04 	str.w	r0, [sl], #4
 800d042:	f853 2b04 	ldr.w	r2, [r3], #4
 800d046:	459c      	cmp	ip, r3
 800d048:	fa22 f20e 	lsr.w	r2, r2, lr
 800d04c:	d8f3      	bhi.n	800d036 <__lshift+0x6e>
 800d04e:	ebac 0304 	sub.w	r3, ip, r4
 800d052:	3b15      	subs	r3, #21
 800d054:	f023 0303 	bic.w	r3, r3, #3
 800d058:	3304      	adds	r3, #4
 800d05a:	f104 0015 	add.w	r0, r4, #21
 800d05e:	4584      	cmp	ip, r0
 800d060:	bf38      	it	cc
 800d062:	2304      	movcc	r3, #4
 800d064:	50ca      	str	r2, [r1, r3]
 800d066:	b10a      	cbz	r2, 800d06c <__lshift+0xa4>
 800d068:	f108 0602 	add.w	r6, r8, #2
 800d06c:	3e01      	subs	r6, #1
 800d06e:	4638      	mov	r0, r7
 800d070:	612e      	str	r6, [r5, #16]
 800d072:	4621      	mov	r1, r4
 800d074:	f7ff fd90 	bl	800cb98 <_Bfree>
 800d078:	4628      	mov	r0, r5
 800d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d082:	3301      	adds	r3, #1
 800d084:	e7c5      	b.n	800d012 <__lshift+0x4a>
 800d086:	3904      	subs	r1, #4
 800d088:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d090:	459c      	cmp	ip, r3
 800d092:	d8f9      	bhi.n	800d088 <__lshift+0xc0>
 800d094:	e7ea      	b.n	800d06c <__lshift+0xa4>
 800d096:	bf00      	nop
 800d098:	0800f385 	.word	0x0800f385
 800d09c:	0800f396 	.word	0x0800f396

0800d0a0 <__mcmp>:
 800d0a0:	690a      	ldr	r2, [r1, #16]
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	6900      	ldr	r0, [r0, #16]
 800d0a6:	1a80      	subs	r0, r0, r2
 800d0a8:	b530      	push	{r4, r5, lr}
 800d0aa:	d10e      	bne.n	800d0ca <__mcmp+0x2a>
 800d0ac:	3314      	adds	r3, #20
 800d0ae:	3114      	adds	r1, #20
 800d0b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0c0:	4295      	cmp	r5, r2
 800d0c2:	d003      	beq.n	800d0cc <__mcmp+0x2c>
 800d0c4:	d205      	bcs.n	800d0d2 <__mcmp+0x32>
 800d0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ca:	bd30      	pop	{r4, r5, pc}
 800d0cc:	42a3      	cmp	r3, r4
 800d0ce:	d3f3      	bcc.n	800d0b8 <__mcmp+0x18>
 800d0d0:	e7fb      	b.n	800d0ca <__mcmp+0x2a>
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e7f9      	b.n	800d0ca <__mcmp+0x2a>
	...

0800d0d8 <__mdiff>:
 800d0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	4689      	mov	r9, r1
 800d0de:	4606      	mov	r6, r0
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4648      	mov	r0, r9
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	f7ff ffdb 	bl	800d0a0 <__mcmp>
 800d0ea:	1e05      	subs	r5, r0, #0
 800d0ec:	d112      	bne.n	800d114 <__mdiff+0x3c>
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f7ff fd11 	bl	800cb18 <_Balloc>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	b928      	cbnz	r0, 800d106 <__mdiff+0x2e>
 800d0fa:	4b3f      	ldr	r3, [pc, #252]	@ (800d1f8 <__mdiff+0x120>)
 800d0fc:	f240 2137 	movw	r1, #567	@ 0x237
 800d100:	483e      	ldr	r0, [pc, #248]	@ (800d1fc <__mdiff+0x124>)
 800d102:	f7fd fc47 	bl	800a994 <__assert_func>
 800d106:	2301      	movs	r3, #1
 800d108:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d10c:	4610      	mov	r0, r2
 800d10e:	b003      	add	sp, #12
 800d110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d114:	bfbc      	itt	lt
 800d116:	464b      	movlt	r3, r9
 800d118:	46a1      	movlt	r9, r4
 800d11a:	4630      	mov	r0, r6
 800d11c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d120:	bfba      	itte	lt
 800d122:	461c      	movlt	r4, r3
 800d124:	2501      	movlt	r5, #1
 800d126:	2500      	movge	r5, #0
 800d128:	f7ff fcf6 	bl	800cb18 <_Balloc>
 800d12c:	4602      	mov	r2, r0
 800d12e:	b918      	cbnz	r0, 800d138 <__mdiff+0x60>
 800d130:	4b31      	ldr	r3, [pc, #196]	@ (800d1f8 <__mdiff+0x120>)
 800d132:	f240 2145 	movw	r1, #581	@ 0x245
 800d136:	e7e3      	b.n	800d100 <__mdiff+0x28>
 800d138:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d13c:	6926      	ldr	r6, [r4, #16]
 800d13e:	60c5      	str	r5, [r0, #12]
 800d140:	f109 0310 	add.w	r3, r9, #16
 800d144:	f109 0514 	add.w	r5, r9, #20
 800d148:	f104 0e14 	add.w	lr, r4, #20
 800d14c:	f100 0b14 	add.w	fp, r0, #20
 800d150:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d154:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d158:	9301      	str	r3, [sp, #4]
 800d15a:	46d9      	mov	r9, fp
 800d15c:	f04f 0c00 	mov.w	ip, #0
 800d160:	9b01      	ldr	r3, [sp, #4]
 800d162:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d166:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	fa1f f38a 	uxth.w	r3, sl
 800d170:	4619      	mov	r1, r3
 800d172:	b283      	uxth	r3, r0
 800d174:	1acb      	subs	r3, r1, r3
 800d176:	0c00      	lsrs	r0, r0, #16
 800d178:	4463      	add	r3, ip
 800d17a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d17e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d182:	b29b      	uxth	r3, r3
 800d184:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d188:	4576      	cmp	r6, lr
 800d18a:	f849 3b04 	str.w	r3, [r9], #4
 800d18e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d192:	d8e5      	bhi.n	800d160 <__mdiff+0x88>
 800d194:	1b33      	subs	r3, r6, r4
 800d196:	3b15      	subs	r3, #21
 800d198:	f023 0303 	bic.w	r3, r3, #3
 800d19c:	3415      	adds	r4, #21
 800d19e:	3304      	adds	r3, #4
 800d1a0:	42a6      	cmp	r6, r4
 800d1a2:	bf38      	it	cc
 800d1a4:	2304      	movcc	r3, #4
 800d1a6:	441d      	add	r5, r3
 800d1a8:	445b      	add	r3, fp
 800d1aa:	461e      	mov	r6, r3
 800d1ac:	462c      	mov	r4, r5
 800d1ae:	4544      	cmp	r4, r8
 800d1b0:	d30e      	bcc.n	800d1d0 <__mdiff+0xf8>
 800d1b2:	f108 0103 	add.w	r1, r8, #3
 800d1b6:	1b49      	subs	r1, r1, r5
 800d1b8:	f021 0103 	bic.w	r1, r1, #3
 800d1bc:	3d03      	subs	r5, #3
 800d1be:	45a8      	cmp	r8, r5
 800d1c0:	bf38      	it	cc
 800d1c2:	2100      	movcc	r1, #0
 800d1c4:	440b      	add	r3, r1
 800d1c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1ca:	b191      	cbz	r1, 800d1f2 <__mdiff+0x11a>
 800d1cc:	6117      	str	r7, [r2, #16]
 800d1ce:	e79d      	b.n	800d10c <__mdiff+0x34>
 800d1d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1d4:	46e6      	mov	lr, ip
 800d1d6:	0c08      	lsrs	r0, r1, #16
 800d1d8:	fa1c fc81 	uxtah	ip, ip, r1
 800d1dc:	4471      	add	r1, lr
 800d1de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1e2:	b289      	uxth	r1, r1
 800d1e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1e8:	f846 1b04 	str.w	r1, [r6], #4
 800d1ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1f0:	e7dd      	b.n	800d1ae <__mdiff+0xd6>
 800d1f2:	3f01      	subs	r7, #1
 800d1f4:	e7e7      	b.n	800d1c6 <__mdiff+0xee>
 800d1f6:	bf00      	nop
 800d1f8:	0800f385 	.word	0x0800f385
 800d1fc:	0800f396 	.word	0x0800f396

0800d200 <__ulp>:
 800d200:	b082      	sub	sp, #8
 800d202:	ed8d 0b00 	vstr	d0, [sp]
 800d206:	9a01      	ldr	r2, [sp, #4]
 800d208:	4b0f      	ldr	r3, [pc, #60]	@ (800d248 <__ulp+0x48>)
 800d20a:	4013      	ands	r3, r2
 800d20c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d210:	2b00      	cmp	r3, #0
 800d212:	dc08      	bgt.n	800d226 <__ulp+0x26>
 800d214:	425b      	negs	r3, r3
 800d216:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d21a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d21e:	da04      	bge.n	800d22a <__ulp+0x2a>
 800d220:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d224:	4113      	asrs	r3, r2
 800d226:	2200      	movs	r2, #0
 800d228:	e008      	b.n	800d23c <__ulp+0x3c>
 800d22a:	f1a2 0314 	sub.w	r3, r2, #20
 800d22e:	2b1e      	cmp	r3, #30
 800d230:	bfda      	itte	le
 800d232:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d236:	40da      	lsrle	r2, r3
 800d238:	2201      	movgt	r2, #1
 800d23a:	2300      	movs	r3, #0
 800d23c:	4619      	mov	r1, r3
 800d23e:	4610      	mov	r0, r2
 800d240:	ec41 0b10 	vmov	d0, r0, r1
 800d244:	b002      	add	sp, #8
 800d246:	4770      	bx	lr
 800d248:	7ff00000 	.word	0x7ff00000

0800d24c <__b2d>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	6906      	ldr	r6, [r0, #16]
 800d252:	f100 0814 	add.w	r8, r0, #20
 800d256:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d25a:	1f37      	subs	r7, r6, #4
 800d25c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d260:	4610      	mov	r0, r2
 800d262:	f7ff fd4b 	bl	800ccfc <__hi0bits>
 800d266:	f1c0 0320 	rsb	r3, r0, #32
 800d26a:	280a      	cmp	r0, #10
 800d26c:	600b      	str	r3, [r1, #0]
 800d26e:	491b      	ldr	r1, [pc, #108]	@ (800d2dc <__b2d+0x90>)
 800d270:	dc15      	bgt.n	800d29e <__b2d+0x52>
 800d272:	f1c0 0c0b 	rsb	ip, r0, #11
 800d276:	fa22 f30c 	lsr.w	r3, r2, ip
 800d27a:	45b8      	cmp	r8, r7
 800d27c:	ea43 0501 	orr.w	r5, r3, r1
 800d280:	bf34      	ite	cc
 800d282:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d286:	2300      	movcs	r3, #0
 800d288:	3015      	adds	r0, #21
 800d28a:	fa02 f000 	lsl.w	r0, r2, r0
 800d28e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d292:	4303      	orrs	r3, r0
 800d294:	461c      	mov	r4, r3
 800d296:	ec45 4b10 	vmov	d0, r4, r5
 800d29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29e:	45b8      	cmp	r8, r7
 800d2a0:	bf3a      	itte	cc
 800d2a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d2aa:	2300      	movcs	r3, #0
 800d2ac:	380b      	subs	r0, #11
 800d2ae:	d012      	beq.n	800d2d6 <__b2d+0x8a>
 800d2b0:	f1c0 0120 	rsb	r1, r0, #32
 800d2b4:	fa23 f401 	lsr.w	r4, r3, r1
 800d2b8:	4082      	lsls	r2, r0
 800d2ba:	4322      	orrs	r2, r4
 800d2bc:	4547      	cmp	r7, r8
 800d2be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d2c2:	bf8c      	ite	hi
 800d2c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2c8:	2200      	movls	r2, #0
 800d2ca:	4083      	lsls	r3, r0
 800d2cc:	40ca      	lsrs	r2, r1
 800d2ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	e7de      	b.n	800d294 <__b2d+0x48>
 800d2d6:	ea42 0501 	orr.w	r5, r2, r1
 800d2da:	e7db      	b.n	800d294 <__b2d+0x48>
 800d2dc:	3ff00000 	.word	0x3ff00000

0800d2e0 <__d2b>:
 800d2e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2e4:	460f      	mov	r7, r1
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	ec59 8b10 	vmov	r8, r9, d0
 800d2ec:	4616      	mov	r6, r2
 800d2ee:	f7ff fc13 	bl	800cb18 <_Balloc>
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	b930      	cbnz	r0, 800d304 <__d2b+0x24>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	4b23      	ldr	r3, [pc, #140]	@ (800d388 <__d2b+0xa8>)
 800d2fa:	4824      	ldr	r0, [pc, #144]	@ (800d38c <__d2b+0xac>)
 800d2fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800d300:	f7fd fb48 	bl	800a994 <__assert_func>
 800d304:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d30c:	b10d      	cbz	r5, 800d312 <__d2b+0x32>
 800d30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	f1b8 0300 	subs.w	r3, r8, #0
 800d318:	d023      	beq.n	800d362 <__d2b+0x82>
 800d31a:	4668      	mov	r0, sp
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	f7ff fd0c 	bl	800cd3a <__lo0bits>
 800d322:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d326:	b1d0      	cbz	r0, 800d35e <__d2b+0x7e>
 800d328:	f1c0 0320 	rsb	r3, r0, #32
 800d32c:	fa02 f303 	lsl.w	r3, r2, r3
 800d330:	430b      	orrs	r3, r1
 800d332:	40c2      	lsrs	r2, r0
 800d334:	6163      	str	r3, [r4, #20]
 800d336:	9201      	str	r2, [sp, #4]
 800d338:	9b01      	ldr	r3, [sp, #4]
 800d33a:	61a3      	str	r3, [r4, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bf0c      	ite	eq
 800d340:	2201      	moveq	r2, #1
 800d342:	2202      	movne	r2, #2
 800d344:	6122      	str	r2, [r4, #16]
 800d346:	b1a5      	cbz	r5, 800d372 <__d2b+0x92>
 800d348:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d34c:	4405      	add	r5, r0
 800d34e:	603d      	str	r5, [r7, #0]
 800d350:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d354:	6030      	str	r0, [r6, #0]
 800d356:	4620      	mov	r0, r4
 800d358:	b003      	add	sp, #12
 800d35a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d35e:	6161      	str	r1, [r4, #20]
 800d360:	e7ea      	b.n	800d338 <__d2b+0x58>
 800d362:	a801      	add	r0, sp, #4
 800d364:	f7ff fce9 	bl	800cd3a <__lo0bits>
 800d368:	9b01      	ldr	r3, [sp, #4]
 800d36a:	6163      	str	r3, [r4, #20]
 800d36c:	3020      	adds	r0, #32
 800d36e:	2201      	movs	r2, #1
 800d370:	e7e8      	b.n	800d344 <__d2b+0x64>
 800d372:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d376:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d37a:	6038      	str	r0, [r7, #0]
 800d37c:	6918      	ldr	r0, [r3, #16]
 800d37e:	f7ff fcbd 	bl	800ccfc <__hi0bits>
 800d382:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d386:	e7e5      	b.n	800d354 <__d2b+0x74>
 800d388:	0800f385 	.word	0x0800f385
 800d38c:	0800f396 	.word	0x0800f396

0800d390 <__ratio>:
 800d390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	4688      	mov	r8, r1
 800d396:	4669      	mov	r1, sp
 800d398:	4681      	mov	r9, r0
 800d39a:	f7ff ff57 	bl	800d24c <__b2d>
 800d39e:	a901      	add	r1, sp, #4
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	ec55 4b10 	vmov	r4, r5, d0
 800d3a6:	f7ff ff51 	bl	800d24c <__b2d>
 800d3aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d3ae:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d3b2:	1ad2      	subs	r2, r2, r3
 800d3b4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d3b8:	1a5b      	subs	r3, r3, r1
 800d3ba:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d3be:	ec57 6b10 	vmov	r6, r7, d0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	bfd6      	itet	le
 800d3c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3ca:	462a      	movgt	r2, r5
 800d3cc:	463a      	movle	r2, r7
 800d3ce:	46ab      	mov	fp, r5
 800d3d0:	46a2      	mov	sl, r4
 800d3d2:	bfce      	itee	gt
 800d3d4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d3d8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d3dc:	ee00 3a90 	vmovle	s1, r3
 800d3e0:	ec4b ab17 	vmov	d7, sl, fp
 800d3e4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d3e8:	b003      	add	sp, #12
 800d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3ee <__copybits>:
 800d3ee:	3901      	subs	r1, #1
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	1149      	asrs	r1, r1, #5
 800d3f4:	6914      	ldr	r4, [r2, #16]
 800d3f6:	3101      	adds	r1, #1
 800d3f8:	f102 0314 	add.w	r3, r2, #20
 800d3fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d400:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d404:	1f05      	subs	r5, r0, #4
 800d406:	42a3      	cmp	r3, r4
 800d408:	d30c      	bcc.n	800d424 <__copybits+0x36>
 800d40a:	1aa3      	subs	r3, r4, r2
 800d40c:	3b11      	subs	r3, #17
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	3211      	adds	r2, #17
 800d414:	42a2      	cmp	r2, r4
 800d416:	bf88      	it	hi
 800d418:	2300      	movhi	r3, #0
 800d41a:	4418      	add	r0, r3
 800d41c:	2300      	movs	r3, #0
 800d41e:	4288      	cmp	r0, r1
 800d420:	d305      	bcc.n	800d42e <__copybits+0x40>
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	f853 6b04 	ldr.w	r6, [r3], #4
 800d428:	f845 6f04 	str.w	r6, [r5, #4]!
 800d42c:	e7eb      	b.n	800d406 <__copybits+0x18>
 800d42e:	f840 3b04 	str.w	r3, [r0], #4
 800d432:	e7f4      	b.n	800d41e <__copybits+0x30>

0800d434 <__any_on>:
 800d434:	f100 0214 	add.w	r2, r0, #20
 800d438:	6900      	ldr	r0, [r0, #16]
 800d43a:	114b      	asrs	r3, r1, #5
 800d43c:	4298      	cmp	r0, r3
 800d43e:	b510      	push	{r4, lr}
 800d440:	db11      	blt.n	800d466 <__any_on+0x32>
 800d442:	dd0a      	ble.n	800d45a <__any_on+0x26>
 800d444:	f011 011f 	ands.w	r1, r1, #31
 800d448:	d007      	beq.n	800d45a <__any_on+0x26>
 800d44a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d44e:	fa24 f001 	lsr.w	r0, r4, r1
 800d452:	fa00 f101 	lsl.w	r1, r0, r1
 800d456:	428c      	cmp	r4, r1
 800d458:	d10b      	bne.n	800d472 <__any_on+0x3e>
 800d45a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d45e:	4293      	cmp	r3, r2
 800d460:	d803      	bhi.n	800d46a <__any_on+0x36>
 800d462:	2000      	movs	r0, #0
 800d464:	bd10      	pop	{r4, pc}
 800d466:	4603      	mov	r3, r0
 800d468:	e7f7      	b.n	800d45a <__any_on+0x26>
 800d46a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d46e:	2900      	cmp	r1, #0
 800d470:	d0f5      	beq.n	800d45e <__any_on+0x2a>
 800d472:	2001      	movs	r0, #1
 800d474:	e7f6      	b.n	800d464 <__any_on+0x30>

0800d476 <sulp>:
 800d476:	b570      	push	{r4, r5, r6, lr}
 800d478:	4604      	mov	r4, r0
 800d47a:	460d      	mov	r5, r1
 800d47c:	4616      	mov	r6, r2
 800d47e:	ec45 4b10 	vmov	d0, r4, r5
 800d482:	f7ff febd 	bl	800d200 <__ulp>
 800d486:	b17e      	cbz	r6, 800d4a8 <sulp+0x32>
 800d488:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d48c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d490:	2b00      	cmp	r3, #0
 800d492:	dd09      	ble.n	800d4a8 <sulp+0x32>
 800d494:	051b      	lsls	r3, r3, #20
 800d496:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d49a:	2000      	movs	r0, #0
 800d49c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d4a0:	ec41 0b17 	vmov	d7, r0, r1
 800d4a4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
 800d4aa:	0000      	movs	r0, r0
 800d4ac:	0000      	movs	r0, r0
	...

0800d4b0 <_strtod_l>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	ed2d 8b0a 	vpush	{d8-d12}
 800d4b8:	b097      	sub	sp, #92	@ 0x5c
 800d4ba:	4688      	mov	r8, r1
 800d4bc:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4be:	2200      	movs	r2, #0
 800d4c0:	9212      	str	r2, [sp, #72]	@ 0x48
 800d4c2:	9005      	str	r0, [sp, #20]
 800d4c4:	f04f 0a00 	mov.w	sl, #0
 800d4c8:	f04f 0b00 	mov.w	fp, #0
 800d4cc:	460a      	mov	r2, r1
 800d4ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4d0:	7811      	ldrb	r1, [r2, #0]
 800d4d2:	292b      	cmp	r1, #43	@ 0x2b
 800d4d4:	d04c      	beq.n	800d570 <_strtod_l+0xc0>
 800d4d6:	d839      	bhi.n	800d54c <_strtod_l+0x9c>
 800d4d8:	290d      	cmp	r1, #13
 800d4da:	d833      	bhi.n	800d544 <_strtod_l+0x94>
 800d4dc:	2908      	cmp	r1, #8
 800d4de:	d833      	bhi.n	800d548 <_strtod_l+0x98>
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	d03c      	beq.n	800d55e <_strtod_l+0xae>
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	9208      	str	r2, [sp, #32]
 800d4e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d4ea:	782a      	ldrb	r2, [r5, #0]
 800d4ec:	2a30      	cmp	r2, #48	@ 0x30
 800d4ee:	f040 80b5 	bne.w	800d65c <_strtod_l+0x1ac>
 800d4f2:	786a      	ldrb	r2, [r5, #1]
 800d4f4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4f8:	2a58      	cmp	r2, #88	@ 0x58
 800d4fa:	d170      	bne.n	800d5de <_strtod_l+0x12e>
 800d4fc:	9302      	str	r3, [sp, #8]
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	ab12      	add	r3, sp, #72	@ 0x48
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	4a8b      	ldr	r2, [pc, #556]	@ (800d734 <_strtod_l+0x284>)
 800d508:	9805      	ldr	r0, [sp, #20]
 800d50a:	ab13      	add	r3, sp, #76	@ 0x4c
 800d50c:	a911      	add	r1, sp, #68	@ 0x44
 800d50e:	f001 fa63 	bl	800e9d8 <__gethex>
 800d512:	f010 060f 	ands.w	r6, r0, #15
 800d516:	4604      	mov	r4, r0
 800d518:	d005      	beq.n	800d526 <_strtod_l+0x76>
 800d51a:	2e06      	cmp	r6, #6
 800d51c:	d12a      	bne.n	800d574 <_strtod_l+0xc4>
 800d51e:	3501      	adds	r5, #1
 800d520:	2300      	movs	r3, #0
 800d522:	9511      	str	r5, [sp, #68]	@ 0x44
 800d524:	9308      	str	r3, [sp, #32]
 800d526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f040 852f 	bne.w	800df8c <_strtod_l+0xadc>
 800d52e:	9b08      	ldr	r3, [sp, #32]
 800d530:	ec4b ab10 	vmov	d0, sl, fp
 800d534:	b1cb      	cbz	r3, 800d56a <_strtod_l+0xba>
 800d536:	eeb1 0b40 	vneg.f64	d0, d0
 800d53a:	b017      	add	sp, #92	@ 0x5c
 800d53c:	ecbd 8b0a 	vpop	{d8-d12}
 800d540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d544:	2920      	cmp	r1, #32
 800d546:	d1cd      	bne.n	800d4e4 <_strtod_l+0x34>
 800d548:	3201      	adds	r2, #1
 800d54a:	e7c0      	b.n	800d4ce <_strtod_l+0x1e>
 800d54c:	292d      	cmp	r1, #45	@ 0x2d
 800d54e:	d1c9      	bne.n	800d4e4 <_strtod_l+0x34>
 800d550:	2101      	movs	r1, #1
 800d552:	9108      	str	r1, [sp, #32]
 800d554:	1c51      	adds	r1, r2, #1
 800d556:	9111      	str	r1, [sp, #68]	@ 0x44
 800d558:	7852      	ldrb	r2, [r2, #1]
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	d1c4      	bne.n	800d4e8 <_strtod_l+0x38>
 800d55e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d560:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d564:	2b00      	cmp	r3, #0
 800d566:	f040 850f 	bne.w	800df88 <_strtod_l+0xad8>
 800d56a:	ec4b ab10 	vmov	d0, sl, fp
 800d56e:	e7e4      	b.n	800d53a <_strtod_l+0x8a>
 800d570:	2100      	movs	r1, #0
 800d572:	e7ee      	b.n	800d552 <_strtod_l+0xa2>
 800d574:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d576:	b13a      	cbz	r2, 800d588 <_strtod_l+0xd8>
 800d578:	2135      	movs	r1, #53	@ 0x35
 800d57a:	a814      	add	r0, sp, #80	@ 0x50
 800d57c:	f7ff ff37 	bl	800d3ee <__copybits>
 800d580:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d582:	9805      	ldr	r0, [sp, #20]
 800d584:	f7ff fb08 	bl	800cb98 <_Bfree>
 800d588:	1e73      	subs	r3, r6, #1
 800d58a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d806      	bhi.n	800d59e <_strtod_l+0xee>
 800d590:	e8df f003 	tbb	[pc, r3]
 800d594:	201d0314 	.word	0x201d0314
 800d598:	14          	.byte	0x14
 800d599:	00          	.byte	0x00
 800d59a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d59e:	05e3      	lsls	r3, r4, #23
 800d5a0:	bf48      	it	mi
 800d5a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d5a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5aa:	0d1b      	lsrs	r3, r3, #20
 800d5ac:	051b      	lsls	r3, r3, #20
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1b9      	bne.n	800d526 <_strtod_l+0x76>
 800d5b2:	f7fe fc45 	bl	800be40 <__errno>
 800d5b6:	2322      	movs	r3, #34	@ 0x22
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	e7b4      	b.n	800d526 <_strtod_l+0x76>
 800d5bc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d5c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d5c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d5cc:	e7e7      	b.n	800d59e <_strtod_l+0xee>
 800d5ce:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d73c <_strtod_l+0x28c>
 800d5d2:	e7e4      	b.n	800d59e <_strtod_l+0xee>
 800d5d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5d8:	f04f 3aff 	mov.w	sl, #4294967295
 800d5dc:	e7df      	b.n	800d59e <_strtod_l+0xee>
 800d5de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5e0:	1c5a      	adds	r2, r3, #1
 800d5e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d5e4:	785b      	ldrb	r3, [r3, #1]
 800d5e6:	2b30      	cmp	r3, #48	@ 0x30
 800d5e8:	d0f9      	beq.n	800d5de <_strtod_l+0x12e>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d09b      	beq.n	800d526 <_strtod_l+0x76>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	2600      	movs	r6, #0
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f8:	46b1      	mov	r9, r6
 800d5fa:	4635      	mov	r5, r6
 800d5fc:	220a      	movs	r2, #10
 800d5fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d600:	7804      	ldrb	r4, [r0, #0]
 800d602:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d606:	b2d9      	uxtb	r1, r3
 800d608:	2909      	cmp	r1, #9
 800d60a:	d929      	bls.n	800d660 <_strtod_l+0x1b0>
 800d60c:	494a      	ldr	r1, [pc, #296]	@ (800d738 <_strtod_l+0x288>)
 800d60e:	2201      	movs	r2, #1
 800d610:	f001 f928 	bl	800e864 <strncmp>
 800d614:	b378      	cbz	r0, 800d676 <_strtod_l+0x1c6>
 800d616:	2000      	movs	r0, #0
 800d618:	4622      	mov	r2, r4
 800d61a:	462b      	mov	r3, r5
 800d61c:	4607      	mov	r7, r0
 800d61e:	9006      	str	r0, [sp, #24]
 800d620:	2a65      	cmp	r2, #101	@ 0x65
 800d622:	d001      	beq.n	800d628 <_strtod_l+0x178>
 800d624:	2a45      	cmp	r2, #69	@ 0x45
 800d626:	d117      	bne.n	800d658 <_strtod_l+0x1a8>
 800d628:	b91b      	cbnz	r3, 800d632 <_strtod_l+0x182>
 800d62a:	9b07      	ldr	r3, [sp, #28]
 800d62c:	4303      	orrs	r3, r0
 800d62e:	d096      	beq.n	800d55e <_strtod_l+0xae>
 800d630:	2300      	movs	r3, #0
 800d632:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d636:	f108 0201 	add.w	r2, r8, #1
 800d63a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d63c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d640:	2a2b      	cmp	r2, #43	@ 0x2b
 800d642:	d06b      	beq.n	800d71c <_strtod_l+0x26c>
 800d644:	2a2d      	cmp	r2, #45	@ 0x2d
 800d646:	d071      	beq.n	800d72c <_strtod_l+0x27c>
 800d648:	f04f 0e00 	mov.w	lr, #0
 800d64c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d650:	2c09      	cmp	r4, #9
 800d652:	d979      	bls.n	800d748 <_strtod_l+0x298>
 800d654:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d658:	2400      	movs	r4, #0
 800d65a:	e094      	b.n	800d786 <_strtod_l+0x2d6>
 800d65c:	2300      	movs	r3, #0
 800d65e:	e7c7      	b.n	800d5f0 <_strtod_l+0x140>
 800d660:	2d08      	cmp	r5, #8
 800d662:	f100 0001 	add.w	r0, r0, #1
 800d666:	bfd4      	ite	le
 800d668:	fb02 3909 	mlale	r9, r2, r9, r3
 800d66c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d670:	3501      	adds	r5, #1
 800d672:	9011      	str	r0, [sp, #68]	@ 0x44
 800d674:	e7c3      	b.n	800d5fe <_strtod_l+0x14e>
 800d676:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d678:	1c5a      	adds	r2, r3, #1
 800d67a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d67c:	785a      	ldrb	r2, [r3, #1]
 800d67e:	b375      	cbz	r5, 800d6de <_strtod_l+0x22e>
 800d680:	4607      	mov	r7, r0
 800d682:	462b      	mov	r3, r5
 800d684:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d688:	2909      	cmp	r1, #9
 800d68a:	d913      	bls.n	800d6b4 <_strtod_l+0x204>
 800d68c:	2101      	movs	r1, #1
 800d68e:	9106      	str	r1, [sp, #24]
 800d690:	e7c6      	b.n	800d620 <_strtod_l+0x170>
 800d692:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	9211      	str	r2, [sp, #68]	@ 0x44
 800d698:	785a      	ldrb	r2, [r3, #1]
 800d69a:	3001      	adds	r0, #1
 800d69c:	2a30      	cmp	r2, #48	@ 0x30
 800d69e:	d0f8      	beq.n	800d692 <_strtod_l+0x1e2>
 800d6a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d6a4:	2b08      	cmp	r3, #8
 800d6a6:	f200 8476 	bhi.w	800df96 <_strtod_l+0xae6>
 800d6aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6ae:	4607      	mov	r7, r0
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	3a30      	subs	r2, #48	@ 0x30
 800d6b6:	f100 0101 	add.w	r1, r0, #1
 800d6ba:	d023      	beq.n	800d704 <_strtod_l+0x254>
 800d6bc:	440f      	add	r7, r1
 800d6be:	eb00 0c03 	add.w	ip, r0, r3
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	240a      	movs	r4, #10
 800d6c6:	4561      	cmp	r1, ip
 800d6c8:	d10b      	bne.n	800d6e2 <_strtod_l+0x232>
 800d6ca:	1c5c      	adds	r4, r3, #1
 800d6cc:	4403      	add	r3, r0
 800d6ce:	2b08      	cmp	r3, #8
 800d6d0:	4404      	add	r4, r0
 800d6d2:	dc11      	bgt.n	800d6f8 <_strtod_l+0x248>
 800d6d4:	230a      	movs	r3, #10
 800d6d6:	fb03 2909 	mla	r9, r3, r9, r2
 800d6da:	2100      	movs	r1, #0
 800d6dc:	e013      	b.n	800d706 <_strtod_l+0x256>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	e7dc      	b.n	800d69c <_strtod_l+0x1ec>
 800d6e2:	2908      	cmp	r1, #8
 800d6e4:	f101 0101 	add.w	r1, r1, #1
 800d6e8:	dc02      	bgt.n	800d6f0 <_strtod_l+0x240>
 800d6ea:	fb04 f909 	mul.w	r9, r4, r9
 800d6ee:	e7ea      	b.n	800d6c6 <_strtod_l+0x216>
 800d6f0:	2910      	cmp	r1, #16
 800d6f2:	bfd8      	it	le
 800d6f4:	4366      	mulle	r6, r4
 800d6f6:	e7e6      	b.n	800d6c6 <_strtod_l+0x216>
 800d6f8:	2b0f      	cmp	r3, #15
 800d6fa:	dcee      	bgt.n	800d6da <_strtod_l+0x22a>
 800d6fc:	230a      	movs	r3, #10
 800d6fe:	fb03 2606 	mla	r6, r3, r6, r2
 800d702:	e7ea      	b.n	800d6da <_strtod_l+0x22a>
 800d704:	461c      	mov	r4, r3
 800d706:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d708:	1c5a      	adds	r2, r3, #1
 800d70a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d70c:	785a      	ldrb	r2, [r3, #1]
 800d70e:	4608      	mov	r0, r1
 800d710:	4623      	mov	r3, r4
 800d712:	e7b7      	b.n	800d684 <_strtod_l+0x1d4>
 800d714:	2301      	movs	r3, #1
 800d716:	2700      	movs	r7, #0
 800d718:	9306      	str	r3, [sp, #24]
 800d71a:	e786      	b.n	800d62a <_strtod_l+0x17a>
 800d71c:	f04f 0e00 	mov.w	lr, #0
 800d720:	f108 0202 	add.w	r2, r8, #2
 800d724:	9211      	str	r2, [sp, #68]	@ 0x44
 800d726:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d72a:	e78f      	b.n	800d64c <_strtod_l+0x19c>
 800d72c:	f04f 0e01 	mov.w	lr, #1
 800d730:	e7f6      	b.n	800d720 <_strtod_l+0x270>
 800d732:	bf00      	nop
 800d734:	0800f508 	.word	0x0800f508
 800d738:	0800f4f0 	.word	0x0800f4f0
 800d73c:	7ff00000 	.word	0x7ff00000
 800d740:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d742:	1c54      	adds	r4, r2, #1
 800d744:	9411      	str	r4, [sp, #68]	@ 0x44
 800d746:	7852      	ldrb	r2, [r2, #1]
 800d748:	2a30      	cmp	r2, #48	@ 0x30
 800d74a:	d0f9      	beq.n	800d740 <_strtod_l+0x290>
 800d74c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d750:	2c08      	cmp	r4, #8
 800d752:	d881      	bhi.n	800d658 <_strtod_l+0x1a8>
 800d754:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d758:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d75a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d75c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d75e:	1c51      	adds	r1, r2, #1
 800d760:	9111      	str	r1, [sp, #68]	@ 0x44
 800d762:	7852      	ldrb	r2, [r2, #1]
 800d764:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d768:	2c09      	cmp	r4, #9
 800d76a:	d938      	bls.n	800d7de <_strtod_l+0x32e>
 800d76c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d76e:	1b0c      	subs	r4, r1, r4
 800d770:	2c08      	cmp	r4, #8
 800d772:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d776:	dc02      	bgt.n	800d77e <_strtod_l+0x2ce>
 800d778:	4564      	cmp	r4, ip
 800d77a:	bfa8      	it	ge
 800d77c:	4664      	movge	r4, ip
 800d77e:	f1be 0f00 	cmp.w	lr, #0
 800d782:	d000      	beq.n	800d786 <_strtod_l+0x2d6>
 800d784:	4264      	negs	r4, r4
 800d786:	2b00      	cmp	r3, #0
 800d788:	d14e      	bne.n	800d828 <_strtod_l+0x378>
 800d78a:	9b07      	ldr	r3, [sp, #28]
 800d78c:	4318      	orrs	r0, r3
 800d78e:	f47f aeca 	bne.w	800d526 <_strtod_l+0x76>
 800d792:	9b06      	ldr	r3, [sp, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f47f aee2 	bne.w	800d55e <_strtod_l+0xae>
 800d79a:	2a69      	cmp	r2, #105	@ 0x69
 800d79c:	d027      	beq.n	800d7ee <_strtod_l+0x33e>
 800d79e:	dc24      	bgt.n	800d7ea <_strtod_l+0x33a>
 800d7a0:	2a49      	cmp	r2, #73	@ 0x49
 800d7a2:	d024      	beq.n	800d7ee <_strtod_l+0x33e>
 800d7a4:	2a4e      	cmp	r2, #78	@ 0x4e
 800d7a6:	f47f aeda 	bne.w	800d55e <_strtod_l+0xae>
 800d7aa:	4997      	ldr	r1, [pc, #604]	@ (800da08 <_strtod_l+0x558>)
 800d7ac:	a811      	add	r0, sp, #68	@ 0x44
 800d7ae:	f001 fb35 	bl	800ee1c <__match>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	f43f aed3 	beq.w	800d55e <_strtod_l+0xae>
 800d7b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b28      	cmp	r3, #40	@ 0x28
 800d7be:	d12d      	bne.n	800d81c <_strtod_l+0x36c>
 800d7c0:	4992      	ldr	r1, [pc, #584]	@ (800da0c <_strtod_l+0x55c>)
 800d7c2:	aa14      	add	r2, sp, #80	@ 0x50
 800d7c4:	a811      	add	r0, sp, #68	@ 0x44
 800d7c6:	f001 fb3d 	bl	800ee44 <__hexnan>
 800d7ca:	2805      	cmp	r0, #5
 800d7cc:	d126      	bne.n	800d81c <_strtod_l+0x36c>
 800d7ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d7d0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d7d4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7d8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7dc:	e6a3      	b.n	800d526 <_strtod_l+0x76>
 800d7de:	240a      	movs	r4, #10
 800d7e0:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d7e4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d7e8:	e7b8      	b.n	800d75c <_strtod_l+0x2ac>
 800d7ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7ec:	e7db      	b.n	800d7a6 <_strtod_l+0x2f6>
 800d7ee:	4988      	ldr	r1, [pc, #544]	@ (800da10 <_strtod_l+0x560>)
 800d7f0:	a811      	add	r0, sp, #68	@ 0x44
 800d7f2:	f001 fb13 	bl	800ee1c <__match>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f aeb1 	beq.w	800d55e <_strtod_l+0xae>
 800d7fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7fe:	4985      	ldr	r1, [pc, #532]	@ (800da14 <_strtod_l+0x564>)
 800d800:	3b01      	subs	r3, #1
 800d802:	a811      	add	r0, sp, #68	@ 0x44
 800d804:	9311      	str	r3, [sp, #68]	@ 0x44
 800d806:	f001 fb09 	bl	800ee1c <__match>
 800d80a:	b910      	cbnz	r0, 800d812 <_strtod_l+0x362>
 800d80c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d80e:	3301      	adds	r3, #1
 800d810:	9311      	str	r3, [sp, #68]	@ 0x44
 800d812:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800da28 <_strtod_l+0x578>
 800d816:	f04f 0a00 	mov.w	sl, #0
 800d81a:	e684      	b.n	800d526 <_strtod_l+0x76>
 800d81c:	487e      	ldr	r0, [pc, #504]	@ (800da18 <_strtod_l+0x568>)
 800d81e:	f001 f857 	bl	800e8d0 <nan>
 800d822:	ec5b ab10 	vmov	sl, fp, d0
 800d826:	e67e      	b.n	800d526 <_strtod_l+0x76>
 800d828:	ee07 9a90 	vmov	s15, r9
 800d82c:	1be2      	subs	r2, r4, r7
 800d82e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d832:	2d00      	cmp	r5, #0
 800d834:	bf08      	it	eq
 800d836:	461d      	moveq	r5, r3
 800d838:	2b10      	cmp	r3, #16
 800d83a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d83c:	461a      	mov	r2, r3
 800d83e:	bfa8      	it	ge
 800d840:	2210      	movge	r2, #16
 800d842:	2b09      	cmp	r3, #9
 800d844:	ec5b ab17 	vmov	sl, fp, d7
 800d848:	dc15      	bgt.n	800d876 <_strtod_l+0x3c6>
 800d84a:	1be1      	subs	r1, r4, r7
 800d84c:	2900      	cmp	r1, #0
 800d84e:	f43f ae6a 	beq.w	800d526 <_strtod_l+0x76>
 800d852:	eba4 0107 	sub.w	r1, r4, r7
 800d856:	dd72      	ble.n	800d93e <_strtod_l+0x48e>
 800d858:	2916      	cmp	r1, #22
 800d85a:	dc59      	bgt.n	800d910 <_strtod_l+0x460>
 800d85c:	4b6f      	ldr	r3, [pc, #444]	@ (800da1c <_strtod_l+0x56c>)
 800d85e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d864:	ed93 7b00 	vldr	d7, [r3]
 800d868:	ec4b ab16 	vmov	d6, sl, fp
 800d86c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d870:	ec5b ab17 	vmov	sl, fp, d7
 800d874:	e657      	b.n	800d526 <_strtod_l+0x76>
 800d876:	4969      	ldr	r1, [pc, #420]	@ (800da1c <_strtod_l+0x56c>)
 800d878:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d87c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d880:	ee06 6a90 	vmov	s13, r6
 800d884:	2b0f      	cmp	r3, #15
 800d886:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d88a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d88e:	ec5b ab16 	vmov	sl, fp, d6
 800d892:	ddda      	ble.n	800d84a <_strtod_l+0x39a>
 800d894:	1a9a      	subs	r2, r3, r2
 800d896:	1be1      	subs	r1, r4, r7
 800d898:	440a      	add	r2, r1
 800d89a:	2a00      	cmp	r2, #0
 800d89c:	f340 8094 	ble.w	800d9c8 <_strtod_l+0x518>
 800d8a0:	f012 000f 	ands.w	r0, r2, #15
 800d8a4:	d00a      	beq.n	800d8bc <_strtod_l+0x40c>
 800d8a6:	495d      	ldr	r1, [pc, #372]	@ (800da1c <_strtod_l+0x56c>)
 800d8a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d8ac:	ed91 7b00 	vldr	d7, [r1]
 800d8b0:	ec4b ab16 	vmov	d6, sl, fp
 800d8b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8b8:	ec5b ab17 	vmov	sl, fp, d7
 800d8bc:	f032 020f 	bics.w	r2, r2, #15
 800d8c0:	d073      	beq.n	800d9aa <_strtod_l+0x4fa>
 800d8c2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d8c6:	dd47      	ble.n	800d958 <_strtod_l+0x4a8>
 800d8c8:	2400      	movs	r4, #0
 800d8ca:	4625      	mov	r5, r4
 800d8cc:	9407      	str	r4, [sp, #28]
 800d8ce:	4626      	mov	r6, r4
 800d8d0:	9a05      	ldr	r2, [sp, #20]
 800d8d2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800da28 <_strtod_l+0x578>
 800d8d6:	2322      	movs	r3, #34	@ 0x22
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	f04f 0a00 	mov.w	sl, #0
 800d8de:	9b07      	ldr	r3, [sp, #28]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f43f ae20 	beq.w	800d526 <_strtod_l+0x76>
 800d8e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8e8:	9805      	ldr	r0, [sp, #20]
 800d8ea:	f7ff f955 	bl	800cb98 <_Bfree>
 800d8ee:	9805      	ldr	r0, [sp, #20]
 800d8f0:	4631      	mov	r1, r6
 800d8f2:	f7ff f951 	bl	800cb98 <_Bfree>
 800d8f6:	9805      	ldr	r0, [sp, #20]
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7ff f94d 	bl	800cb98 <_Bfree>
 800d8fe:	9907      	ldr	r1, [sp, #28]
 800d900:	9805      	ldr	r0, [sp, #20]
 800d902:	f7ff f949 	bl	800cb98 <_Bfree>
 800d906:	9805      	ldr	r0, [sp, #20]
 800d908:	4621      	mov	r1, r4
 800d90a:	f7ff f945 	bl	800cb98 <_Bfree>
 800d90e:	e60a      	b.n	800d526 <_strtod_l+0x76>
 800d910:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d914:	1be0      	subs	r0, r4, r7
 800d916:	4281      	cmp	r1, r0
 800d918:	dbbc      	blt.n	800d894 <_strtod_l+0x3e4>
 800d91a:	4a40      	ldr	r2, [pc, #256]	@ (800da1c <_strtod_l+0x56c>)
 800d91c:	f1c3 030f 	rsb	r3, r3, #15
 800d920:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d924:	ed91 7b00 	vldr	d7, [r1]
 800d928:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d92a:	ec4b ab16 	vmov	d6, sl, fp
 800d92e:	1acb      	subs	r3, r1, r3
 800d930:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d934:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d938:	ed92 6b00 	vldr	d6, [r2]
 800d93c:	e796      	b.n	800d86c <_strtod_l+0x3bc>
 800d93e:	3116      	adds	r1, #22
 800d940:	dba8      	blt.n	800d894 <_strtod_l+0x3e4>
 800d942:	4b36      	ldr	r3, [pc, #216]	@ (800da1c <_strtod_l+0x56c>)
 800d944:	1b3c      	subs	r4, r7, r4
 800d946:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d94a:	ed94 7b00 	vldr	d7, [r4]
 800d94e:	ec4b ab16 	vmov	d6, sl, fp
 800d952:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d956:	e78b      	b.n	800d870 <_strtod_l+0x3c0>
 800d958:	2000      	movs	r0, #0
 800d95a:	ec4b ab17 	vmov	d7, sl, fp
 800d95e:	4e30      	ldr	r6, [pc, #192]	@ (800da20 <_strtod_l+0x570>)
 800d960:	1112      	asrs	r2, r2, #4
 800d962:	4601      	mov	r1, r0
 800d964:	2a01      	cmp	r2, #1
 800d966:	dc23      	bgt.n	800d9b0 <_strtod_l+0x500>
 800d968:	b108      	cbz	r0, 800d96e <_strtod_l+0x4be>
 800d96a:	ec5b ab17 	vmov	sl, fp, d7
 800d96e:	4a2c      	ldr	r2, [pc, #176]	@ (800da20 <_strtod_l+0x570>)
 800d970:	482c      	ldr	r0, [pc, #176]	@ (800da24 <_strtod_l+0x574>)
 800d972:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d976:	ed92 7b00 	vldr	d7, [r2]
 800d97a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d97e:	ec4b ab16 	vmov	d6, sl, fp
 800d982:	4a29      	ldr	r2, [pc, #164]	@ (800da28 <_strtod_l+0x578>)
 800d984:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d988:	ee17 1a90 	vmov	r1, s15
 800d98c:	400a      	ands	r2, r1
 800d98e:	4282      	cmp	r2, r0
 800d990:	ec5b ab17 	vmov	sl, fp, d7
 800d994:	d898      	bhi.n	800d8c8 <_strtod_l+0x418>
 800d996:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d99a:	4282      	cmp	r2, r0
 800d99c:	bf86      	itte	hi
 800d99e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800da2c <_strtod_l+0x57c>
 800d9a2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d9a6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	9206      	str	r2, [sp, #24]
 800d9ae:	e076      	b.n	800da9e <_strtod_l+0x5ee>
 800d9b0:	f012 0f01 	tst.w	r2, #1
 800d9b4:	d004      	beq.n	800d9c0 <_strtod_l+0x510>
 800d9b6:	ed96 6b00 	vldr	d6, [r6]
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9c0:	3101      	adds	r1, #1
 800d9c2:	1052      	asrs	r2, r2, #1
 800d9c4:	3608      	adds	r6, #8
 800d9c6:	e7cd      	b.n	800d964 <_strtod_l+0x4b4>
 800d9c8:	d0ef      	beq.n	800d9aa <_strtod_l+0x4fa>
 800d9ca:	4252      	negs	r2, r2
 800d9cc:	f012 000f 	ands.w	r0, r2, #15
 800d9d0:	d00a      	beq.n	800d9e8 <_strtod_l+0x538>
 800d9d2:	4912      	ldr	r1, [pc, #72]	@ (800da1c <_strtod_l+0x56c>)
 800d9d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d9d8:	ed91 7b00 	vldr	d7, [r1]
 800d9dc:	ec4b ab16 	vmov	d6, sl, fp
 800d9e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d9e4:	ec5b ab17 	vmov	sl, fp, d7
 800d9e8:	1112      	asrs	r2, r2, #4
 800d9ea:	d0de      	beq.n	800d9aa <_strtod_l+0x4fa>
 800d9ec:	2a1f      	cmp	r2, #31
 800d9ee:	dd1f      	ble.n	800da30 <_strtod_l+0x580>
 800d9f0:	2400      	movs	r4, #0
 800d9f2:	4625      	mov	r5, r4
 800d9f4:	9407      	str	r4, [sp, #28]
 800d9f6:	4626      	mov	r6, r4
 800d9f8:	9a05      	ldr	r2, [sp, #20]
 800d9fa:	2322      	movs	r3, #34	@ 0x22
 800d9fc:	f04f 0a00 	mov.w	sl, #0
 800da00:	f04f 0b00 	mov.w	fp, #0
 800da04:	6013      	str	r3, [r2, #0]
 800da06:	e76a      	b.n	800d8de <_strtod_l+0x42e>
 800da08:	0800f2dd 	.word	0x0800f2dd
 800da0c:	0800f4f4 	.word	0x0800f4f4
 800da10:	0800f2d5 	.word	0x0800f2d5
 800da14:	0800f30c 	.word	0x0800f30c
 800da18:	0800f2cf 	.word	0x0800f2cf
 800da1c:	0800f428 	.word	0x0800f428
 800da20:	0800f400 	.word	0x0800f400
 800da24:	7ca00000 	.word	0x7ca00000
 800da28:	7ff00000 	.word	0x7ff00000
 800da2c:	7fefffff 	.word	0x7fefffff
 800da30:	f012 0110 	ands.w	r1, r2, #16
 800da34:	bf18      	it	ne
 800da36:	216a      	movne	r1, #106	@ 0x6a
 800da38:	9106      	str	r1, [sp, #24]
 800da3a:	ec4b ab17 	vmov	d7, sl, fp
 800da3e:	49b0      	ldr	r1, [pc, #704]	@ (800dd00 <_strtod_l+0x850>)
 800da40:	2000      	movs	r0, #0
 800da42:	07d6      	lsls	r6, r2, #31
 800da44:	d504      	bpl.n	800da50 <_strtod_l+0x5a0>
 800da46:	ed91 6b00 	vldr	d6, [r1]
 800da4a:	2001      	movs	r0, #1
 800da4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da50:	1052      	asrs	r2, r2, #1
 800da52:	f101 0108 	add.w	r1, r1, #8
 800da56:	d1f4      	bne.n	800da42 <_strtod_l+0x592>
 800da58:	b108      	cbz	r0, 800da5e <_strtod_l+0x5ae>
 800da5a:	ec5b ab17 	vmov	sl, fp, d7
 800da5e:	9a06      	ldr	r2, [sp, #24]
 800da60:	b1b2      	cbz	r2, 800da90 <_strtod_l+0x5e0>
 800da62:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800da66:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800da6a:	2a00      	cmp	r2, #0
 800da6c:	4658      	mov	r0, fp
 800da6e:	dd0f      	ble.n	800da90 <_strtod_l+0x5e0>
 800da70:	2a1f      	cmp	r2, #31
 800da72:	dd55      	ble.n	800db20 <_strtod_l+0x670>
 800da74:	2a34      	cmp	r2, #52	@ 0x34
 800da76:	bfde      	ittt	le
 800da78:	f04f 32ff 	movle.w	r2, #4294967295
 800da7c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800da80:	408a      	lslle	r2, r1
 800da82:	f04f 0a00 	mov.w	sl, #0
 800da86:	bfcc      	ite	gt
 800da88:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da8c:	ea02 0b00 	andle.w	fp, r2, r0
 800da90:	ec4b ab17 	vmov	d7, sl, fp
 800da94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da9c:	d0a8      	beq.n	800d9f0 <_strtod_l+0x540>
 800da9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800daa0:	9805      	ldr	r0, [sp, #20]
 800daa2:	f8cd 9000 	str.w	r9, [sp]
 800daa6:	462a      	mov	r2, r5
 800daa8:	f7ff f8de 	bl	800cc68 <__s2b>
 800daac:	9007      	str	r0, [sp, #28]
 800daae:	2800      	cmp	r0, #0
 800dab0:	f43f af0a 	beq.w	800d8c8 <_strtod_l+0x418>
 800dab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab6:	1b3f      	subs	r7, r7, r4
 800dab8:	2b00      	cmp	r3, #0
 800daba:	bfb4      	ite	lt
 800dabc:	463b      	movlt	r3, r7
 800dabe:	2300      	movge	r3, #0
 800dac0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800dcf0 <_strtod_l+0x840>
 800dac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dacc:	2400      	movs	r4, #0
 800dace:	930d      	str	r3, [sp, #52]	@ 0x34
 800dad0:	4625      	mov	r5, r4
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	9805      	ldr	r0, [sp, #20]
 800dad6:	6859      	ldr	r1, [r3, #4]
 800dad8:	f7ff f81e 	bl	800cb18 <_Balloc>
 800dadc:	4606      	mov	r6, r0
 800dade:	2800      	cmp	r0, #0
 800dae0:	f43f aef6 	beq.w	800d8d0 <_strtod_l+0x420>
 800dae4:	9b07      	ldr	r3, [sp, #28]
 800dae6:	691a      	ldr	r2, [r3, #16]
 800dae8:	ec4b ab19 	vmov	d9, sl, fp
 800daec:	3202      	adds	r2, #2
 800daee:	f103 010c 	add.w	r1, r3, #12
 800daf2:	0092      	lsls	r2, r2, #2
 800daf4:	300c      	adds	r0, #12
 800daf6:	f7fe f9d0 	bl	800be9a <memcpy>
 800dafa:	eeb0 0b49 	vmov.f64	d0, d9
 800dafe:	9805      	ldr	r0, [sp, #20]
 800db00:	aa14      	add	r2, sp, #80	@ 0x50
 800db02:	a913      	add	r1, sp, #76	@ 0x4c
 800db04:	f7ff fbec 	bl	800d2e0 <__d2b>
 800db08:	9012      	str	r0, [sp, #72]	@ 0x48
 800db0a:	2800      	cmp	r0, #0
 800db0c:	f43f aee0 	beq.w	800d8d0 <_strtod_l+0x420>
 800db10:	9805      	ldr	r0, [sp, #20]
 800db12:	2101      	movs	r1, #1
 800db14:	f7ff f93e 	bl	800cd94 <__i2b>
 800db18:	4605      	mov	r5, r0
 800db1a:	b940      	cbnz	r0, 800db2e <_strtod_l+0x67e>
 800db1c:	2500      	movs	r5, #0
 800db1e:	e6d7      	b.n	800d8d0 <_strtod_l+0x420>
 800db20:	f04f 31ff 	mov.w	r1, #4294967295
 800db24:	fa01 f202 	lsl.w	r2, r1, r2
 800db28:	ea02 0a0a 	and.w	sl, r2, sl
 800db2c:	e7b0      	b.n	800da90 <_strtod_l+0x5e0>
 800db2e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800db30:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db32:	2f00      	cmp	r7, #0
 800db34:	bfab      	itete	ge
 800db36:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800db38:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800db3a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800db3e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800db42:	bfac      	ite	ge
 800db44:	eb07 0903 	addge.w	r9, r7, r3
 800db48:	eba3 0807 	sublt.w	r8, r3, r7
 800db4c:	9b06      	ldr	r3, [sp, #24]
 800db4e:	1aff      	subs	r7, r7, r3
 800db50:	4417      	add	r7, r2
 800db52:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800db56:	4a6b      	ldr	r2, [pc, #428]	@ (800dd04 <_strtod_l+0x854>)
 800db58:	3f01      	subs	r7, #1
 800db5a:	4297      	cmp	r7, r2
 800db5c:	da51      	bge.n	800dc02 <_strtod_l+0x752>
 800db5e:	1bd1      	subs	r1, r2, r7
 800db60:	291f      	cmp	r1, #31
 800db62:	eba3 0301 	sub.w	r3, r3, r1
 800db66:	f04f 0201 	mov.w	r2, #1
 800db6a:	dc3e      	bgt.n	800dbea <_strtod_l+0x73a>
 800db6c:	408a      	lsls	r2, r1
 800db6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800db70:	2200      	movs	r2, #0
 800db72:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db74:	eb09 0703 	add.w	r7, r9, r3
 800db78:	4498      	add	r8, r3
 800db7a:	9b06      	ldr	r3, [sp, #24]
 800db7c:	45b9      	cmp	r9, r7
 800db7e:	4498      	add	r8, r3
 800db80:	464b      	mov	r3, r9
 800db82:	bfa8      	it	ge
 800db84:	463b      	movge	r3, r7
 800db86:	4543      	cmp	r3, r8
 800db88:	bfa8      	it	ge
 800db8a:	4643      	movge	r3, r8
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	bfc2      	ittt	gt
 800db90:	1aff      	subgt	r7, r7, r3
 800db92:	eba8 0803 	subgt.w	r8, r8, r3
 800db96:	eba9 0903 	subgt.w	r9, r9, r3
 800db9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	dd16      	ble.n	800dbce <_strtod_l+0x71e>
 800dba0:	4629      	mov	r1, r5
 800dba2:	9805      	ldr	r0, [sp, #20]
 800dba4:	461a      	mov	r2, r3
 800dba6:	f7ff f9b5 	bl	800cf14 <__pow5mult>
 800dbaa:	4605      	mov	r5, r0
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d0b5      	beq.n	800db1c <_strtod_l+0x66c>
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dbb4:	9805      	ldr	r0, [sp, #20]
 800dbb6:	f7ff f903 	bl	800cdc0 <__multiply>
 800dbba:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	f43f ae87 	beq.w	800d8d0 <_strtod_l+0x420>
 800dbc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dbc4:	9805      	ldr	r0, [sp, #20]
 800dbc6:	f7fe ffe7 	bl	800cb98 <_Bfree>
 800dbca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbcc:	9312      	str	r3, [sp, #72]	@ 0x48
 800dbce:	2f00      	cmp	r7, #0
 800dbd0:	dc1b      	bgt.n	800dc0a <_strtod_l+0x75a>
 800dbd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd21      	ble.n	800dc1c <_strtod_l+0x76c>
 800dbd8:	4631      	mov	r1, r6
 800dbda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbdc:	9805      	ldr	r0, [sp, #20]
 800dbde:	f7ff f999 	bl	800cf14 <__pow5mult>
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	b9d0      	cbnz	r0, 800dc1c <_strtod_l+0x76c>
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	e672      	b.n	800d8d0 <_strtod_l+0x420>
 800dbea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800dbee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800dbf2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800dbf6:	37e2      	adds	r7, #226	@ 0xe2
 800dbf8:	fa02 f107 	lsl.w	r1, r2, r7
 800dbfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dbfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc00:	e7b8      	b.n	800db74 <_strtod_l+0x6c4>
 800dc02:	2200      	movs	r2, #0
 800dc04:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dc06:	2201      	movs	r2, #1
 800dc08:	e7f9      	b.n	800dbfe <_strtod_l+0x74e>
 800dc0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc0c:	9805      	ldr	r0, [sp, #20]
 800dc0e:	463a      	mov	r2, r7
 800dc10:	f7ff f9da 	bl	800cfc8 <__lshift>
 800dc14:	9012      	str	r0, [sp, #72]	@ 0x48
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d1db      	bne.n	800dbd2 <_strtod_l+0x722>
 800dc1a:	e659      	b.n	800d8d0 <_strtod_l+0x420>
 800dc1c:	f1b8 0f00 	cmp.w	r8, #0
 800dc20:	dd07      	ble.n	800dc32 <_strtod_l+0x782>
 800dc22:	4631      	mov	r1, r6
 800dc24:	9805      	ldr	r0, [sp, #20]
 800dc26:	4642      	mov	r2, r8
 800dc28:	f7ff f9ce 	bl	800cfc8 <__lshift>
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d0d9      	beq.n	800dbe6 <_strtod_l+0x736>
 800dc32:	f1b9 0f00 	cmp.w	r9, #0
 800dc36:	dd08      	ble.n	800dc4a <_strtod_l+0x79a>
 800dc38:	4629      	mov	r1, r5
 800dc3a:	9805      	ldr	r0, [sp, #20]
 800dc3c:	464a      	mov	r2, r9
 800dc3e:	f7ff f9c3 	bl	800cfc8 <__lshift>
 800dc42:	4605      	mov	r5, r0
 800dc44:	2800      	cmp	r0, #0
 800dc46:	f43f ae43 	beq.w	800d8d0 <_strtod_l+0x420>
 800dc4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc4c:	9805      	ldr	r0, [sp, #20]
 800dc4e:	4632      	mov	r2, r6
 800dc50:	f7ff fa42 	bl	800d0d8 <__mdiff>
 800dc54:	4604      	mov	r4, r0
 800dc56:	2800      	cmp	r0, #0
 800dc58:	f43f ae3a 	beq.w	800d8d0 <_strtod_l+0x420>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800dc62:	60c3      	str	r3, [r0, #12]
 800dc64:	4629      	mov	r1, r5
 800dc66:	f7ff fa1b 	bl	800d0a0 <__mcmp>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	da4e      	bge.n	800dd0c <_strtod_l+0x85c>
 800dc6e:	ea58 080a 	orrs.w	r8, r8, sl
 800dc72:	d174      	bne.n	800dd5e <_strtod_l+0x8ae>
 800dc74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d170      	bne.n	800dd5e <_strtod_l+0x8ae>
 800dc7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc80:	0d1b      	lsrs	r3, r3, #20
 800dc82:	051b      	lsls	r3, r3, #20
 800dc84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc88:	d969      	bls.n	800dd5e <_strtod_l+0x8ae>
 800dc8a:	6963      	ldr	r3, [r4, #20]
 800dc8c:	b913      	cbnz	r3, 800dc94 <_strtod_l+0x7e4>
 800dc8e:	6923      	ldr	r3, [r4, #16]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	dd64      	ble.n	800dd5e <_strtod_l+0x8ae>
 800dc94:	4621      	mov	r1, r4
 800dc96:	2201      	movs	r2, #1
 800dc98:	9805      	ldr	r0, [sp, #20]
 800dc9a:	f7ff f995 	bl	800cfc8 <__lshift>
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4604      	mov	r4, r0
 800dca2:	f7ff f9fd 	bl	800d0a0 <__mcmp>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	dd59      	ble.n	800dd5e <_strtod_l+0x8ae>
 800dcaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcae:	9a06      	ldr	r2, [sp, #24]
 800dcb0:	0d1b      	lsrs	r3, r3, #20
 800dcb2:	051b      	lsls	r3, r3, #20
 800dcb4:	2a00      	cmp	r2, #0
 800dcb6:	d070      	beq.n	800dd9a <_strtod_l+0x8ea>
 800dcb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcbc:	d86d      	bhi.n	800dd9a <_strtod_l+0x8ea>
 800dcbe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dcc2:	f67f ae99 	bls.w	800d9f8 <_strtod_l+0x548>
 800dcc6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800dcf8 <_strtod_l+0x848>
 800dcca:	ec4b ab16 	vmov	d6, sl, fp
 800dcce:	4b0e      	ldr	r3, [pc, #56]	@ (800dd08 <_strtod_l+0x858>)
 800dcd0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcd4:	ee17 2a90 	vmov	r2, s15
 800dcd8:	4013      	ands	r3, r2
 800dcda:	ec5b ab17 	vmov	sl, fp, d7
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f47f ae01 	bne.w	800d8e6 <_strtod_l+0x436>
 800dce4:	9a05      	ldr	r2, [sp, #20]
 800dce6:	2322      	movs	r3, #34	@ 0x22
 800dce8:	6013      	str	r3, [r2, #0]
 800dcea:	e5fc      	b.n	800d8e6 <_strtod_l+0x436>
 800dcec:	f3af 8000 	nop.w
 800dcf0:	ffc00000 	.word	0xffc00000
 800dcf4:	41dfffff 	.word	0x41dfffff
 800dcf8:	00000000 	.word	0x00000000
 800dcfc:	39500000 	.word	0x39500000
 800dd00:	0800f520 	.word	0x0800f520
 800dd04:	fffffc02 	.word	0xfffffc02
 800dd08:	7ff00000 	.word	0x7ff00000
 800dd0c:	46d9      	mov	r9, fp
 800dd0e:	d15d      	bne.n	800ddcc <_strtod_l+0x91c>
 800dd10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd14:	f1b8 0f00 	cmp.w	r8, #0
 800dd18:	d02a      	beq.n	800dd70 <_strtod_l+0x8c0>
 800dd1a:	4aab      	ldr	r2, [pc, #684]	@ (800dfc8 <_strtod_l+0xb18>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d12a      	bne.n	800dd76 <_strtod_l+0x8c6>
 800dd20:	9b06      	ldr	r3, [sp, #24]
 800dd22:	4652      	mov	r2, sl
 800dd24:	b1fb      	cbz	r3, 800dd66 <_strtod_l+0x8b6>
 800dd26:	4ba9      	ldr	r3, [pc, #676]	@ (800dfcc <_strtod_l+0xb1c>)
 800dd28:	ea0b 0303 	and.w	r3, fp, r3
 800dd2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd30:	f04f 31ff 	mov.w	r1, #4294967295
 800dd34:	d81a      	bhi.n	800dd6c <_strtod_l+0x8bc>
 800dd36:	0d1b      	lsrs	r3, r3, #20
 800dd38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd3c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d118      	bne.n	800dd76 <_strtod_l+0x8c6>
 800dd44:	4ba2      	ldr	r3, [pc, #648]	@ (800dfd0 <_strtod_l+0xb20>)
 800dd46:	4599      	cmp	r9, r3
 800dd48:	d102      	bne.n	800dd50 <_strtod_l+0x8a0>
 800dd4a:	3201      	adds	r2, #1
 800dd4c:	f43f adc0 	beq.w	800d8d0 <_strtod_l+0x420>
 800dd50:	4b9e      	ldr	r3, [pc, #632]	@ (800dfcc <_strtod_l+0xb1c>)
 800dd52:	ea09 0303 	and.w	r3, r9, r3
 800dd56:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800dd5a:	f04f 0a00 	mov.w	sl, #0
 800dd5e:	9b06      	ldr	r3, [sp, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1b0      	bne.n	800dcc6 <_strtod_l+0x816>
 800dd64:	e5bf      	b.n	800d8e6 <_strtod_l+0x436>
 800dd66:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6a:	e7e9      	b.n	800dd40 <_strtod_l+0x890>
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	e7e7      	b.n	800dd40 <_strtod_l+0x890>
 800dd70:	ea53 030a 	orrs.w	r3, r3, sl
 800dd74:	d099      	beq.n	800dcaa <_strtod_l+0x7fa>
 800dd76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd78:	b1c3      	cbz	r3, 800ddac <_strtod_l+0x8fc>
 800dd7a:	ea13 0f09 	tst.w	r3, r9
 800dd7e:	d0ee      	beq.n	800dd5e <_strtod_l+0x8ae>
 800dd80:	9a06      	ldr	r2, [sp, #24]
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	f1b8 0f00 	cmp.w	r8, #0
 800dd8a:	d013      	beq.n	800ddb4 <_strtod_l+0x904>
 800dd8c:	f7ff fb73 	bl	800d476 <sulp>
 800dd90:	ee39 7b00 	vadd.f64	d7, d9, d0
 800dd94:	ec5b ab17 	vmov	sl, fp, d7
 800dd98:	e7e1      	b.n	800dd5e <_strtod_l+0x8ae>
 800dd9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dda2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dda6:	f04f 3aff 	mov.w	sl, #4294967295
 800ddaa:	e7d8      	b.n	800dd5e <_strtod_l+0x8ae>
 800ddac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddae:	ea13 0f0a 	tst.w	r3, sl
 800ddb2:	e7e4      	b.n	800dd7e <_strtod_l+0x8ce>
 800ddb4:	f7ff fb5f 	bl	800d476 <sulp>
 800ddb8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ddbc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ddc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc4:	ec5b ab10 	vmov	sl, fp, d0
 800ddc8:	d1c9      	bne.n	800dd5e <_strtod_l+0x8ae>
 800ddca:	e615      	b.n	800d9f8 <_strtod_l+0x548>
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f7ff fade 	bl	800d390 <__ratio>
 800ddd4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ddd8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800dddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde0:	d85d      	bhi.n	800de9e <_strtod_l+0x9ee>
 800dde2:	f1b8 0f00 	cmp.w	r8, #0
 800dde6:	d164      	bne.n	800deb2 <_strtod_l+0xa02>
 800dde8:	f1ba 0f00 	cmp.w	sl, #0
 800ddec:	d14b      	bne.n	800de86 <_strtod_l+0x9d6>
 800ddee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddf2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d160      	bne.n	800debc <_strtod_l+0xa0c>
 800ddfa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ddfe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800de02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de06:	d401      	bmi.n	800de0c <_strtod_l+0x95c>
 800de08:	ee20 8b08 	vmul.f64	d8, d0, d8
 800de0c:	eeb1 ab48 	vneg.f64	d10, d8
 800de10:	486e      	ldr	r0, [pc, #440]	@ (800dfcc <_strtod_l+0xb1c>)
 800de12:	4970      	ldr	r1, [pc, #448]	@ (800dfd4 <_strtod_l+0xb24>)
 800de14:	ea09 0700 	and.w	r7, r9, r0
 800de18:	428f      	cmp	r7, r1
 800de1a:	ec53 2b1a 	vmov	r2, r3, d10
 800de1e:	d17d      	bne.n	800df1c <_strtod_l+0xa6c>
 800de20:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800de24:	ec4b ab1c 	vmov	d12, sl, fp
 800de28:	eeb0 0b4c 	vmov.f64	d0, d12
 800de2c:	f7ff f9e8 	bl	800d200 <__ulp>
 800de30:	4866      	ldr	r0, [pc, #408]	@ (800dfcc <_strtod_l+0xb1c>)
 800de32:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800de36:	ee1c 3a90 	vmov	r3, s25
 800de3a:	4a67      	ldr	r2, [pc, #412]	@ (800dfd8 <_strtod_l+0xb28>)
 800de3c:	ea03 0100 	and.w	r1, r3, r0
 800de40:	4291      	cmp	r1, r2
 800de42:	ec5b ab1c 	vmov	sl, fp, d12
 800de46:	d93c      	bls.n	800dec2 <_strtod_l+0xa12>
 800de48:	ee19 2a90 	vmov	r2, s19
 800de4c:	4b60      	ldr	r3, [pc, #384]	@ (800dfd0 <_strtod_l+0xb20>)
 800de4e:	429a      	cmp	r2, r3
 800de50:	d104      	bne.n	800de5c <_strtod_l+0x9ac>
 800de52:	ee19 3a10 	vmov	r3, s18
 800de56:	3301      	adds	r3, #1
 800de58:	f43f ad3a 	beq.w	800d8d0 <_strtod_l+0x420>
 800de5c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800dfd0 <_strtod_l+0xb20>
 800de60:	f04f 3aff 	mov.w	sl, #4294967295
 800de64:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de66:	9805      	ldr	r0, [sp, #20]
 800de68:	f7fe fe96 	bl	800cb98 <_Bfree>
 800de6c:	9805      	ldr	r0, [sp, #20]
 800de6e:	4631      	mov	r1, r6
 800de70:	f7fe fe92 	bl	800cb98 <_Bfree>
 800de74:	9805      	ldr	r0, [sp, #20]
 800de76:	4629      	mov	r1, r5
 800de78:	f7fe fe8e 	bl	800cb98 <_Bfree>
 800de7c:	9805      	ldr	r0, [sp, #20]
 800de7e:	4621      	mov	r1, r4
 800de80:	f7fe fe8a 	bl	800cb98 <_Bfree>
 800de84:	e625      	b.n	800dad2 <_strtod_l+0x622>
 800de86:	f1ba 0f01 	cmp.w	sl, #1
 800de8a:	d103      	bne.n	800de94 <_strtod_l+0x9e4>
 800de8c:	f1bb 0f00 	cmp.w	fp, #0
 800de90:	f43f adb2 	beq.w	800d9f8 <_strtod_l+0x548>
 800de94:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800de98:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800de9c:	e7b8      	b.n	800de10 <_strtod_l+0x960>
 800de9e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800dea2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dea6:	f1b8 0f00 	cmp.w	r8, #0
 800deaa:	d0af      	beq.n	800de0c <_strtod_l+0x95c>
 800deac:	eeb0 ab48 	vmov.f64	d10, d8
 800deb0:	e7ae      	b.n	800de10 <_strtod_l+0x960>
 800deb2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800deb6:	eeb0 8b4a 	vmov.f64	d8, d10
 800deba:	e7a9      	b.n	800de10 <_strtod_l+0x960>
 800debc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dec0:	e7a6      	b.n	800de10 <_strtod_l+0x960>
 800dec2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dec6:	9b06      	ldr	r3, [sp, #24]
 800dec8:	46d9      	mov	r9, fp
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1ca      	bne.n	800de64 <_strtod_l+0x9b4>
 800dece:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ded2:	0d1b      	lsrs	r3, r3, #20
 800ded4:	051b      	lsls	r3, r3, #20
 800ded6:	429f      	cmp	r7, r3
 800ded8:	d1c4      	bne.n	800de64 <_strtod_l+0x9b4>
 800deda:	ec51 0b18 	vmov	r0, r1, d8
 800dede:	f7f2 fc33 	bl	8000748 <__aeabi_d2lz>
 800dee2:	f7f2 fbeb 	bl	80006bc <__aeabi_l2d>
 800dee6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800deea:	ec41 0b17 	vmov	d7, r0, r1
 800deee:	ea49 090a 	orr.w	r9, r9, sl
 800def2:	ea59 0908 	orrs.w	r9, r9, r8
 800def6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800defa:	d03c      	beq.n	800df76 <_strtod_l+0xac6>
 800defc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800dfb0 <_strtod_l+0xb00>
 800df00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df08:	f53f aced 	bmi.w	800d8e6 <_strtod_l+0x436>
 800df0c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800dfb8 <_strtod_l+0xb08>
 800df10:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df18:	dda4      	ble.n	800de64 <_strtod_l+0x9b4>
 800df1a:	e4e4      	b.n	800d8e6 <_strtod_l+0x436>
 800df1c:	9906      	ldr	r1, [sp, #24]
 800df1e:	b1e1      	cbz	r1, 800df5a <_strtod_l+0xaaa>
 800df20:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800df24:	d819      	bhi.n	800df5a <_strtod_l+0xaaa>
 800df26:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800df2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2e:	d811      	bhi.n	800df54 <_strtod_l+0xaa4>
 800df30:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800df34:	ee18 3a10 	vmov	r3, s16
 800df38:	2b01      	cmp	r3, #1
 800df3a:	bf38      	it	cc
 800df3c:	2301      	movcc	r3, #1
 800df3e:	ee08 3a10 	vmov	s16, r3
 800df42:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800df46:	f1b8 0f00 	cmp.w	r8, #0
 800df4a:	d111      	bne.n	800df70 <_strtod_l+0xac0>
 800df4c:	eeb1 7b48 	vneg.f64	d7, d8
 800df50:	ec53 2b17 	vmov	r2, r3, d7
 800df54:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800df58:	1bcb      	subs	r3, r1, r7
 800df5a:	eeb0 0b49 	vmov.f64	d0, d9
 800df5e:	ec43 2b1a 	vmov	d10, r2, r3
 800df62:	f7ff f94d 	bl	800d200 <__ulp>
 800df66:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800df6a:	ec5b ab19 	vmov	sl, fp, d9
 800df6e:	e7aa      	b.n	800dec6 <_strtod_l+0xa16>
 800df70:	eeb0 7b48 	vmov.f64	d7, d8
 800df74:	e7ec      	b.n	800df50 <_strtod_l+0xaa0>
 800df76:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800dfc0 <_strtod_l+0xb10>
 800df7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df82:	f57f af6f 	bpl.w	800de64 <_strtod_l+0x9b4>
 800df86:	e4ae      	b.n	800d8e6 <_strtod_l+0x436>
 800df88:	2300      	movs	r3, #0
 800df8a:	9308      	str	r3, [sp, #32]
 800df8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df90:	6013      	str	r3, [r2, #0]
 800df92:	f7ff bacc 	b.w	800d52e <_strtod_l+0x7e>
 800df96:	2a65      	cmp	r2, #101	@ 0x65
 800df98:	f43f abbc 	beq.w	800d714 <_strtod_l+0x264>
 800df9c:	2a45      	cmp	r2, #69	@ 0x45
 800df9e:	f43f abb9 	beq.w	800d714 <_strtod_l+0x264>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	9306      	str	r3, [sp, #24]
 800dfa6:	f7ff bbf0 	b.w	800d78a <_strtod_l+0x2da>
 800dfaa:	bf00      	nop
 800dfac:	f3af 8000 	nop.w
 800dfb0:	94a03595 	.word	0x94a03595
 800dfb4:	3fdfffff 	.word	0x3fdfffff
 800dfb8:	35afe535 	.word	0x35afe535
 800dfbc:	3fe00000 	.word	0x3fe00000
 800dfc0:	94a03595 	.word	0x94a03595
 800dfc4:	3fcfffff 	.word	0x3fcfffff
 800dfc8:	000fffff 	.word	0x000fffff
 800dfcc:	7ff00000 	.word	0x7ff00000
 800dfd0:	7fefffff 	.word	0x7fefffff
 800dfd4:	7fe00000 	.word	0x7fe00000
 800dfd8:	7c9fffff 	.word	0x7c9fffff

0800dfdc <_strtod_r>:
 800dfdc:	4b01      	ldr	r3, [pc, #4]	@ (800dfe4 <_strtod_r+0x8>)
 800dfde:	f7ff ba67 	b.w	800d4b0 <_strtod_l>
 800dfe2:	bf00      	nop
 800dfe4:	24000070 	.word	0x24000070

0800dfe8 <_strtol_l.constprop.0>:
 800dfe8:	2b24      	cmp	r3, #36	@ 0x24
 800dfea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfee:	4686      	mov	lr, r0
 800dff0:	4690      	mov	r8, r2
 800dff2:	d801      	bhi.n	800dff8 <_strtol_l.constprop.0+0x10>
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d106      	bne.n	800e006 <_strtol_l.constprop.0+0x1e>
 800dff8:	f7fd ff22 	bl	800be40 <__errno>
 800dffc:	2316      	movs	r3, #22
 800dffe:	6003      	str	r3, [r0, #0]
 800e000:	2000      	movs	r0, #0
 800e002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e006:	4834      	ldr	r0, [pc, #208]	@ (800e0d8 <_strtol_l.constprop.0+0xf0>)
 800e008:	460d      	mov	r5, r1
 800e00a:	462a      	mov	r2, r5
 800e00c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e010:	5d06      	ldrb	r6, [r0, r4]
 800e012:	f016 0608 	ands.w	r6, r6, #8
 800e016:	d1f8      	bne.n	800e00a <_strtol_l.constprop.0+0x22>
 800e018:	2c2d      	cmp	r4, #45	@ 0x2d
 800e01a:	d12d      	bne.n	800e078 <_strtol_l.constprop.0+0x90>
 800e01c:	782c      	ldrb	r4, [r5, #0]
 800e01e:	2601      	movs	r6, #1
 800e020:	1c95      	adds	r5, r2, #2
 800e022:	f033 0210 	bics.w	r2, r3, #16
 800e026:	d109      	bne.n	800e03c <_strtol_l.constprop.0+0x54>
 800e028:	2c30      	cmp	r4, #48	@ 0x30
 800e02a:	d12a      	bne.n	800e082 <_strtol_l.constprop.0+0x9a>
 800e02c:	782a      	ldrb	r2, [r5, #0]
 800e02e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e032:	2a58      	cmp	r2, #88	@ 0x58
 800e034:	d125      	bne.n	800e082 <_strtol_l.constprop.0+0x9a>
 800e036:	786c      	ldrb	r4, [r5, #1]
 800e038:	2310      	movs	r3, #16
 800e03a:	3502      	adds	r5, #2
 800e03c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e040:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e044:	2200      	movs	r2, #0
 800e046:	fbbc f9f3 	udiv	r9, ip, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e050:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e054:	2f09      	cmp	r7, #9
 800e056:	d81b      	bhi.n	800e090 <_strtol_l.constprop.0+0xa8>
 800e058:	463c      	mov	r4, r7
 800e05a:	42a3      	cmp	r3, r4
 800e05c:	dd27      	ble.n	800e0ae <_strtol_l.constprop.0+0xc6>
 800e05e:	1c57      	adds	r7, r2, #1
 800e060:	d007      	beq.n	800e072 <_strtol_l.constprop.0+0x8a>
 800e062:	4581      	cmp	r9, r0
 800e064:	d320      	bcc.n	800e0a8 <_strtol_l.constprop.0+0xc0>
 800e066:	d101      	bne.n	800e06c <_strtol_l.constprop.0+0x84>
 800e068:	45a2      	cmp	sl, r4
 800e06a:	db1d      	blt.n	800e0a8 <_strtol_l.constprop.0+0xc0>
 800e06c:	fb00 4003 	mla	r0, r0, r3, r4
 800e070:	2201      	movs	r2, #1
 800e072:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e076:	e7eb      	b.n	800e050 <_strtol_l.constprop.0+0x68>
 800e078:	2c2b      	cmp	r4, #43	@ 0x2b
 800e07a:	bf04      	itt	eq
 800e07c:	782c      	ldrbeq	r4, [r5, #0]
 800e07e:	1c95      	addeq	r5, r2, #2
 800e080:	e7cf      	b.n	800e022 <_strtol_l.constprop.0+0x3a>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1da      	bne.n	800e03c <_strtol_l.constprop.0+0x54>
 800e086:	2c30      	cmp	r4, #48	@ 0x30
 800e088:	bf0c      	ite	eq
 800e08a:	2308      	moveq	r3, #8
 800e08c:	230a      	movne	r3, #10
 800e08e:	e7d5      	b.n	800e03c <_strtol_l.constprop.0+0x54>
 800e090:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e094:	2f19      	cmp	r7, #25
 800e096:	d801      	bhi.n	800e09c <_strtol_l.constprop.0+0xb4>
 800e098:	3c37      	subs	r4, #55	@ 0x37
 800e09a:	e7de      	b.n	800e05a <_strtol_l.constprop.0+0x72>
 800e09c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e0a0:	2f19      	cmp	r7, #25
 800e0a2:	d804      	bhi.n	800e0ae <_strtol_l.constprop.0+0xc6>
 800e0a4:	3c57      	subs	r4, #87	@ 0x57
 800e0a6:	e7d8      	b.n	800e05a <_strtol_l.constprop.0+0x72>
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ac:	e7e1      	b.n	800e072 <_strtol_l.constprop.0+0x8a>
 800e0ae:	1c53      	adds	r3, r2, #1
 800e0b0:	d108      	bne.n	800e0c4 <_strtol_l.constprop.0+0xdc>
 800e0b2:	2322      	movs	r3, #34	@ 0x22
 800e0b4:	f8ce 3000 	str.w	r3, [lr]
 800e0b8:	4660      	mov	r0, ip
 800e0ba:	f1b8 0f00 	cmp.w	r8, #0
 800e0be:	d0a0      	beq.n	800e002 <_strtol_l.constprop.0+0x1a>
 800e0c0:	1e69      	subs	r1, r5, #1
 800e0c2:	e006      	b.n	800e0d2 <_strtol_l.constprop.0+0xea>
 800e0c4:	b106      	cbz	r6, 800e0c8 <_strtol_l.constprop.0+0xe0>
 800e0c6:	4240      	negs	r0, r0
 800e0c8:	f1b8 0f00 	cmp.w	r8, #0
 800e0cc:	d099      	beq.n	800e002 <_strtol_l.constprop.0+0x1a>
 800e0ce:	2a00      	cmp	r2, #0
 800e0d0:	d1f6      	bne.n	800e0c0 <_strtol_l.constprop.0+0xd8>
 800e0d2:	f8c8 1000 	str.w	r1, [r8]
 800e0d6:	e794      	b.n	800e002 <_strtol_l.constprop.0+0x1a>
 800e0d8:	0800f549 	.word	0x0800f549

0800e0dc <_strtol_r>:
 800e0dc:	f7ff bf84 	b.w	800dfe8 <_strtol_l.constprop.0>

0800e0e0 <__ssputs_r>:
 800e0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e4:	688e      	ldr	r6, [r1, #8]
 800e0e6:	461f      	mov	r7, r3
 800e0e8:	42be      	cmp	r6, r7
 800e0ea:	680b      	ldr	r3, [r1, #0]
 800e0ec:	4682      	mov	sl, r0
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	4690      	mov	r8, r2
 800e0f2:	d82d      	bhi.n	800e150 <__ssputs_r+0x70>
 800e0f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0fc:	d026      	beq.n	800e14c <__ssputs_r+0x6c>
 800e0fe:	6965      	ldr	r5, [r4, #20]
 800e100:	6909      	ldr	r1, [r1, #16]
 800e102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e106:	eba3 0901 	sub.w	r9, r3, r1
 800e10a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e10e:	1c7b      	adds	r3, r7, #1
 800e110:	444b      	add	r3, r9
 800e112:	106d      	asrs	r5, r5, #1
 800e114:	429d      	cmp	r5, r3
 800e116:	bf38      	it	cc
 800e118:	461d      	movcc	r5, r3
 800e11a:	0553      	lsls	r3, r2, #21
 800e11c:	d527      	bpl.n	800e16e <__ssputs_r+0x8e>
 800e11e:	4629      	mov	r1, r5
 800e120:	f7fc fc88 	bl	800aa34 <_malloc_r>
 800e124:	4606      	mov	r6, r0
 800e126:	b360      	cbz	r0, 800e182 <__ssputs_r+0xa2>
 800e128:	6921      	ldr	r1, [r4, #16]
 800e12a:	464a      	mov	r2, r9
 800e12c:	f7fd feb5 	bl	800be9a <memcpy>
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	6126      	str	r6, [r4, #16]
 800e13e:	6165      	str	r5, [r4, #20]
 800e140:	444e      	add	r6, r9
 800e142:	eba5 0509 	sub.w	r5, r5, r9
 800e146:	6026      	str	r6, [r4, #0]
 800e148:	60a5      	str	r5, [r4, #8]
 800e14a:	463e      	mov	r6, r7
 800e14c:	42be      	cmp	r6, r7
 800e14e:	d900      	bls.n	800e152 <__ssputs_r+0x72>
 800e150:	463e      	mov	r6, r7
 800e152:	6820      	ldr	r0, [r4, #0]
 800e154:	4632      	mov	r2, r6
 800e156:	4641      	mov	r1, r8
 800e158:	f000 fb6a 	bl	800e830 <memmove>
 800e15c:	68a3      	ldr	r3, [r4, #8]
 800e15e:	1b9b      	subs	r3, r3, r6
 800e160:	60a3      	str	r3, [r4, #8]
 800e162:	6823      	ldr	r3, [r4, #0]
 800e164:	4433      	add	r3, r6
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	2000      	movs	r0, #0
 800e16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e16e:	462a      	mov	r2, r5
 800e170:	f000 ff15 	bl	800ef9e <_realloc_r>
 800e174:	4606      	mov	r6, r0
 800e176:	2800      	cmp	r0, #0
 800e178:	d1e0      	bne.n	800e13c <__ssputs_r+0x5c>
 800e17a:	6921      	ldr	r1, [r4, #16]
 800e17c:	4650      	mov	r0, sl
 800e17e:	f7fe fc81 	bl	800ca84 <_free_r>
 800e182:	230c      	movs	r3, #12
 800e184:	f8ca 3000 	str.w	r3, [sl]
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e18e:	81a3      	strh	r3, [r4, #12]
 800e190:	f04f 30ff 	mov.w	r0, #4294967295
 800e194:	e7e9      	b.n	800e16a <__ssputs_r+0x8a>
	...

0800e198 <_svfiprintf_r>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	4698      	mov	r8, r3
 800e19e:	898b      	ldrh	r3, [r1, #12]
 800e1a0:	061b      	lsls	r3, r3, #24
 800e1a2:	b09d      	sub	sp, #116	@ 0x74
 800e1a4:	4607      	mov	r7, r0
 800e1a6:	460d      	mov	r5, r1
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	d510      	bpl.n	800e1ce <_svfiprintf_r+0x36>
 800e1ac:	690b      	ldr	r3, [r1, #16]
 800e1ae:	b973      	cbnz	r3, 800e1ce <_svfiprintf_r+0x36>
 800e1b0:	2140      	movs	r1, #64	@ 0x40
 800e1b2:	f7fc fc3f 	bl	800aa34 <_malloc_r>
 800e1b6:	6028      	str	r0, [r5, #0]
 800e1b8:	6128      	str	r0, [r5, #16]
 800e1ba:	b930      	cbnz	r0, 800e1ca <_svfiprintf_r+0x32>
 800e1bc:	230c      	movs	r3, #12
 800e1be:	603b      	str	r3, [r7, #0]
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c4:	b01d      	add	sp, #116	@ 0x74
 800e1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ca:	2340      	movs	r3, #64	@ 0x40
 800e1cc:	616b      	str	r3, [r5, #20]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1d2:	2320      	movs	r3, #32
 800e1d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1dc:	2330      	movs	r3, #48	@ 0x30
 800e1de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e37c <_svfiprintf_r+0x1e4>
 800e1e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1e6:	f04f 0901 	mov.w	r9, #1
 800e1ea:	4623      	mov	r3, r4
 800e1ec:	469a      	mov	sl, r3
 800e1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1f2:	b10a      	cbz	r2, 800e1f8 <_svfiprintf_r+0x60>
 800e1f4:	2a25      	cmp	r2, #37	@ 0x25
 800e1f6:	d1f9      	bne.n	800e1ec <_svfiprintf_r+0x54>
 800e1f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e1fc:	d00b      	beq.n	800e216 <_svfiprintf_r+0x7e>
 800e1fe:	465b      	mov	r3, fp
 800e200:	4622      	mov	r2, r4
 800e202:	4629      	mov	r1, r5
 800e204:	4638      	mov	r0, r7
 800e206:	f7ff ff6b 	bl	800e0e0 <__ssputs_r>
 800e20a:	3001      	adds	r0, #1
 800e20c:	f000 80a7 	beq.w	800e35e <_svfiprintf_r+0x1c6>
 800e210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e212:	445a      	add	r2, fp
 800e214:	9209      	str	r2, [sp, #36]	@ 0x24
 800e216:	f89a 3000 	ldrb.w	r3, [sl]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 809f 	beq.w	800e35e <_svfiprintf_r+0x1c6>
 800e220:	2300      	movs	r3, #0
 800e222:	f04f 32ff 	mov.w	r2, #4294967295
 800e226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e22a:	f10a 0a01 	add.w	sl, sl, #1
 800e22e:	9304      	str	r3, [sp, #16]
 800e230:	9307      	str	r3, [sp, #28]
 800e232:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e236:	931a      	str	r3, [sp, #104]	@ 0x68
 800e238:	4654      	mov	r4, sl
 800e23a:	2205      	movs	r2, #5
 800e23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e240:	484e      	ldr	r0, [pc, #312]	@ (800e37c <_svfiprintf_r+0x1e4>)
 800e242:	f7f2 f855 	bl	80002f0 <memchr>
 800e246:	9a04      	ldr	r2, [sp, #16]
 800e248:	b9d8      	cbnz	r0, 800e282 <_svfiprintf_r+0xea>
 800e24a:	06d0      	lsls	r0, r2, #27
 800e24c:	bf44      	itt	mi
 800e24e:	2320      	movmi	r3, #32
 800e250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e254:	0711      	lsls	r1, r2, #28
 800e256:	bf44      	itt	mi
 800e258:	232b      	movmi	r3, #43	@ 0x2b
 800e25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e25e:	f89a 3000 	ldrb.w	r3, [sl]
 800e262:	2b2a      	cmp	r3, #42	@ 0x2a
 800e264:	d015      	beq.n	800e292 <_svfiprintf_r+0xfa>
 800e266:	9a07      	ldr	r2, [sp, #28]
 800e268:	4654      	mov	r4, sl
 800e26a:	2000      	movs	r0, #0
 800e26c:	f04f 0c0a 	mov.w	ip, #10
 800e270:	4621      	mov	r1, r4
 800e272:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e276:	3b30      	subs	r3, #48	@ 0x30
 800e278:	2b09      	cmp	r3, #9
 800e27a:	d94b      	bls.n	800e314 <_svfiprintf_r+0x17c>
 800e27c:	b1b0      	cbz	r0, 800e2ac <_svfiprintf_r+0x114>
 800e27e:	9207      	str	r2, [sp, #28]
 800e280:	e014      	b.n	800e2ac <_svfiprintf_r+0x114>
 800e282:	eba0 0308 	sub.w	r3, r0, r8
 800e286:	fa09 f303 	lsl.w	r3, r9, r3
 800e28a:	4313      	orrs	r3, r2
 800e28c:	9304      	str	r3, [sp, #16]
 800e28e:	46a2      	mov	sl, r4
 800e290:	e7d2      	b.n	800e238 <_svfiprintf_r+0xa0>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	1d19      	adds	r1, r3, #4
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	9103      	str	r1, [sp, #12]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	bfbb      	ittet	lt
 800e29e:	425b      	neglt	r3, r3
 800e2a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e2a4:	9307      	strge	r3, [sp, #28]
 800e2a6:	9307      	strlt	r3, [sp, #28]
 800e2a8:	bfb8      	it	lt
 800e2aa:	9204      	strlt	r2, [sp, #16]
 800e2ac:	7823      	ldrb	r3, [r4, #0]
 800e2ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2b0:	d10a      	bne.n	800e2c8 <_svfiprintf_r+0x130>
 800e2b2:	7863      	ldrb	r3, [r4, #1]
 800e2b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2b6:	d132      	bne.n	800e31e <_svfiprintf_r+0x186>
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	1d1a      	adds	r2, r3, #4
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	9203      	str	r2, [sp, #12]
 800e2c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2c4:	3402      	adds	r4, #2
 800e2c6:	9305      	str	r3, [sp, #20]
 800e2c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e38c <_svfiprintf_r+0x1f4>
 800e2cc:	7821      	ldrb	r1, [r4, #0]
 800e2ce:	2203      	movs	r2, #3
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	f7f2 f80d 	bl	80002f0 <memchr>
 800e2d6:	b138      	cbz	r0, 800e2e8 <_svfiprintf_r+0x150>
 800e2d8:	9b04      	ldr	r3, [sp, #16]
 800e2da:	eba0 000a 	sub.w	r0, r0, sl
 800e2de:	2240      	movs	r2, #64	@ 0x40
 800e2e0:	4082      	lsls	r2, r0
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	3401      	adds	r4, #1
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ec:	4824      	ldr	r0, [pc, #144]	@ (800e380 <_svfiprintf_r+0x1e8>)
 800e2ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2f2:	2206      	movs	r2, #6
 800e2f4:	f7f1 fffc 	bl	80002f0 <memchr>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d036      	beq.n	800e36a <_svfiprintf_r+0x1d2>
 800e2fc:	4b21      	ldr	r3, [pc, #132]	@ (800e384 <_svfiprintf_r+0x1ec>)
 800e2fe:	bb1b      	cbnz	r3, 800e348 <_svfiprintf_r+0x1b0>
 800e300:	9b03      	ldr	r3, [sp, #12]
 800e302:	3307      	adds	r3, #7
 800e304:	f023 0307 	bic.w	r3, r3, #7
 800e308:	3308      	adds	r3, #8
 800e30a:	9303      	str	r3, [sp, #12]
 800e30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30e:	4433      	add	r3, r6
 800e310:	9309      	str	r3, [sp, #36]	@ 0x24
 800e312:	e76a      	b.n	800e1ea <_svfiprintf_r+0x52>
 800e314:	fb0c 3202 	mla	r2, ip, r2, r3
 800e318:	460c      	mov	r4, r1
 800e31a:	2001      	movs	r0, #1
 800e31c:	e7a8      	b.n	800e270 <_svfiprintf_r+0xd8>
 800e31e:	2300      	movs	r3, #0
 800e320:	3401      	adds	r4, #1
 800e322:	9305      	str	r3, [sp, #20]
 800e324:	4619      	mov	r1, r3
 800e326:	f04f 0c0a 	mov.w	ip, #10
 800e32a:	4620      	mov	r0, r4
 800e32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e330:	3a30      	subs	r2, #48	@ 0x30
 800e332:	2a09      	cmp	r2, #9
 800e334:	d903      	bls.n	800e33e <_svfiprintf_r+0x1a6>
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0c6      	beq.n	800e2c8 <_svfiprintf_r+0x130>
 800e33a:	9105      	str	r1, [sp, #20]
 800e33c:	e7c4      	b.n	800e2c8 <_svfiprintf_r+0x130>
 800e33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e342:	4604      	mov	r4, r0
 800e344:	2301      	movs	r3, #1
 800e346:	e7f0      	b.n	800e32a <_svfiprintf_r+0x192>
 800e348:	ab03      	add	r3, sp, #12
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	462a      	mov	r2, r5
 800e34e:	4b0e      	ldr	r3, [pc, #56]	@ (800e388 <_svfiprintf_r+0x1f0>)
 800e350:	a904      	add	r1, sp, #16
 800e352:	4638      	mov	r0, r7
 800e354:	f7fc fc88 	bl	800ac68 <_printf_float>
 800e358:	1c42      	adds	r2, r0, #1
 800e35a:	4606      	mov	r6, r0
 800e35c:	d1d6      	bne.n	800e30c <_svfiprintf_r+0x174>
 800e35e:	89ab      	ldrh	r3, [r5, #12]
 800e360:	065b      	lsls	r3, r3, #25
 800e362:	f53f af2d 	bmi.w	800e1c0 <_svfiprintf_r+0x28>
 800e366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e368:	e72c      	b.n	800e1c4 <_svfiprintf_r+0x2c>
 800e36a:	ab03      	add	r3, sp, #12
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	462a      	mov	r2, r5
 800e370:	4b05      	ldr	r3, [pc, #20]	@ (800e388 <_svfiprintf_r+0x1f0>)
 800e372:	a904      	add	r1, sp, #16
 800e374:	4638      	mov	r0, r7
 800e376:	f7fc feff 	bl	800b178 <_printf_i>
 800e37a:	e7ed      	b.n	800e358 <_svfiprintf_r+0x1c0>
 800e37c:	0800f649 	.word	0x0800f649
 800e380:	0800f653 	.word	0x0800f653
 800e384:	0800ac69 	.word	0x0800ac69
 800e388:	0800e0e1 	.word	0x0800e0e1
 800e38c:	0800f64f 	.word	0x0800f64f

0800e390 <__sfputc_r>:
 800e390:	6893      	ldr	r3, [r2, #8]
 800e392:	3b01      	subs	r3, #1
 800e394:	2b00      	cmp	r3, #0
 800e396:	b410      	push	{r4}
 800e398:	6093      	str	r3, [r2, #8]
 800e39a:	da08      	bge.n	800e3ae <__sfputc_r+0x1e>
 800e39c:	6994      	ldr	r4, [r2, #24]
 800e39e:	42a3      	cmp	r3, r4
 800e3a0:	db01      	blt.n	800e3a6 <__sfputc_r+0x16>
 800e3a2:	290a      	cmp	r1, #10
 800e3a4:	d103      	bne.n	800e3ae <__sfputc_r+0x1e>
 800e3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3aa:	f7fd bbb8 	b.w	800bb1e <__swbuf_r>
 800e3ae:	6813      	ldr	r3, [r2, #0]
 800e3b0:	1c58      	adds	r0, r3, #1
 800e3b2:	6010      	str	r0, [r2, #0]
 800e3b4:	7019      	strb	r1, [r3, #0]
 800e3b6:	4608      	mov	r0, r1
 800e3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <__sfputs_r>:
 800e3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	460f      	mov	r7, r1
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	18d5      	adds	r5, r2, r3
 800e3c8:	42ac      	cmp	r4, r5
 800e3ca:	d101      	bne.n	800e3d0 <__sfputs_r+0x12>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	e007      	b.n	800e3e0 <__sfputs_r+0x22>
 800e3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d4:	463a      	mov	r2, r7
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	f7ff ffda 	bl	800e390 <__sfputc_r>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d1f3      	bne.n	800e3c8 <__sfputs_r+0xa>
 800e3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3e4 <_vfiprintf_r>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	b09d      	sub	sp, #116	@ 0x74
 800e3ec:	4614      	mov	r4, r2
 800e3ee:	4698      	mov	r8, r3
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	b118      	cbz	r0, 800e3fc <_vfiprintf_r+0x18>
 800e3f4:	6a03      	ldr	r3, [r0, #32]
 800e3f6:	b90b      	cbnz	r3, 800e3fc <_vfiprintf_r+0x18>
 800e3f8:	f7fd fa76 	bl	800b8e8 <__sinit>
 800e3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3fe:	07d9      	lsls	r1, r3, #31
 800e400:	d405      	bmi.n	800e40e <_vfiprintf_r+0x2a>
 800e402:	89ab      	ldrh	r3, [r5, #12]
 800e404:	059a      	lsls	r2, r3, #22
 800e406:	d402      	bmi.n	800e40e <_vfiprintf_r+0x2a>
 800e408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e40a:	f7fd fd44 	bl	800be96 <__retarget_lock_acquire_recursive>
 800e40e:	89ab      	ldrh	r3, [r5, #12]
 800e410:	071b      	lsls	r3, r3, #28
 800e412:	d501      	bpl.n	800e418 <_vfiprintf_r+0x34>
 800e414:	692b      	ldr	r3, [r5, #16]
 800e416:	b99b      	cbnz	r3, 800e440 <_vfiprintf_r+0x5c>
 800e418:	4629      	mov	r1, r5
 800e41a:	4630      	mov	r0, r6
 800e41c:	f7fd fbbe 	bl	800bb9c <__swsetup_r>
 800e420:	b170      	cbz	r0, 800e440 <_vfiprintf_r+0x5c>
 800e422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e424:	07dc      	lsls	r4, r3, #31
 800e426:	d504      	bpl.n	800e432 <_vfiprintf_r+0x4e>
 800e428:	f04f 30ff 	mov.w	r0, #4294967295
 800e42c:	b01d      	add	sp, #116	@ 0x74
 800e42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e432:	89ab      	ldrh	r3, [r5, #12]
 800e434:	0598      	lsls	r0, r3, #22
 800e436:	d4f7      	bmi.n	800e428 <_vfiprintf_r+0x44>
 800e438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e43a:	f7fd fd2d 	bl	800be98 <__retarget_lock_release_recursive>
 800e43e:	e7f3      	b.n	800e428 <_vfiprintf_r+0x44>
 800e440:	2300      	movs	r3, #0
 800e442:	9309      	str	r3, [sp, #36]	@ 0x24
 800e444:	2320      	movs	r3, #32
 800e446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e44e:	2330      	movs	r3, #48	@ 0x30
 800e450:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e600 <_vfiprintf_r+0x21c>
 800e454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e458:	f04f 0901 	mov.w	r9, #1
 800e45c:	4623      	mov	r3, r4
 800e45e:	469a      	mov	sl, r3
 800e460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e464:	b10a      	cbz	r2, 800e46a <_vfiprintf_r+0x86>
 800e466:	2a25      	cmp	r2, #37	@ 0x25
 800e468:	d1f9      	bne.n	800e45e <_vfiprintf_r+0x7a>
 800e46a:	ebba 0b04 	subs.w	fp, sl, r4
 800e46e:	d00b      	beq.n	800e488 <_vfiprintf_r+0xa4>
 800e470:	465b      	mov	r3, fp
 800e472:	4622      	mov	r2, r4
 800e474:	4629      	mov	r1, r5
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ffa1 	bl	800e3be <__sfputs_r>
 800e47c:	3001      	adds	r0, #1
 800e47e:	f000 80a7 	beq.w	800e5d0 <_vfiprintf_r+0x1ec>
 800e482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e484:	445a      	add	r2, fp
 800e486:	9209      	str	r2, [sp, #36]	@ 0x24
 800e488:	f89a 3000 	ldrb.w	r3, [sl]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 809f 	beq.w	800e5d0 <_vfiprintf_r+0x1ec>
 800e492:	2300      	movs	r3, #0
 800e494:	f04f 32ff 	mov.w	r2, #4294967295
 800e498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e49c:	f10a 0a01 	add.w	sl, sl, #1
 800e4a0:	9304      	str	r3, [sp, #16]
 800e4a2:	9307      	str	r3, [sp, #28]
 800e4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4aa:	4654      	mov	r4, sl
 800e4ac:	2205      	movs	r2, #5
 800e4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b2:	4853      	ldr	r0, [pc, #332]	@ (800e600 <_vfiprintf_r+0x21c>)
 800e4b4:	f7f1 ff1c 	bl	80002f0 <memchr>
 800e4b8:	9a04      	ldr	r2, [sp, #16]
 800e4ba:	b9d8      	cbnz	r0, 800e4f4 <_vfiprintf_r+0x110>
 800e4bc:	06d1      	lsls	r1, r2, #27
 800e4be:	bf44      	itt	mi
 800e4c0:	2320      	movmi	r3, #32
 800e4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4c6:	0713      	lsls	r3, r2, #28
 800e4c8:	bf44      	itt	mi
 800e4ca:	232b      	movmi	r3, #43	@ 0x2b
 800e4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4d6:	d015      	beq.n	800e504 <_vfiprintf_r+0x120>
 800e4d8:	9a07      	ldr	r2, [sp, #28]
 800e4da:	4654      	mov	r4, sl
 800e4dc:	2000      	movs	r0, #0
 800e4de:	f04f 0c0a 	mov.w	ip, #10
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4e8:	3b30      	subs	r3, #48	@ 0x30
 800e4ea:	2b09      	cmp	r3, #9
 800e4ec:	d94b      	bls.n	800e586 <_vfiprintf_r+0x1a2>
 800e4ee:	b1b0      	cbz	r0, 800e51e <_vfiprintf_r+0x13a>
 800e4f0:	9207      	str	r2, [sp, #28]
 800e4f2:	e014      	b.n	800e51e <_vfiprintf_r+0x13a>
 800e4f4:	eba0 0308 	sub.w	r3, r0, r8
 800e4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	9304      	str	r3, [sp, #16]
 800e500:	46a2      	mov	sl, r4
 800e502:	e7d2      	b.n	800e4aa <_vfiprintf_r+0xc6>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	1d19      	adds	r1, r3, #4
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	9103      	str	r1, [sp, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	bfbb      	ittet	lt
 800e510:	425b      	neglt	r3, r3
 800e512:	f042 0202 	orrlt.w	r2, r2, #2
 800e516:	9307      	strge	r3, [sp, #28]
 800e518:	9307      	strlt	r3, [sp, #28]
 800e51a:	bfb8      	it	lt
 800e51c:	9204      	strlt	r2, [sp, #16]
 800e51e:	7823      	ldrb	r3, [r4, #0]
 800e520:	2b2e      	cmp	r3, #46	@ 0x2e
 800e522:	d10a      	bne.n	800e53a <_vfiprintf_r+0x156>
 800e524:	7863      	ldrb	r3, [r4, #1]
 800e526:	2b2a      	cmp	r3, #42	@ 0x2a
 800e528:	d132      	bne.n	800e590 <_vfiprintf_r+0x1ac>
 800e52a:	9b03      	ldr	r3, [sp, #12]
 800e52c:	1d1a      	adds	r2, r3, #4
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	9203      	str	r2, [sp, #12]
 800e532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e536:	3402      	adds	r4, #2
 800e538:	9305      	str	r3, [sp, #20]
 800e53a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e610 <_vfiprintf_r+0x22c>
 800e53e:	7821      	ldrb	r1, [r4, #0]
 800e540:	2203      	movs	r2, #3
 800e542:	4650      	mov	r0, sl
 800e544:	f7f1 fed4 	bl	80002f0 <memchr>
 800e548:	b138      	cbz	r0, 800e55a <_vfiprintf_r+0x176>
 800e54a:	9b04      	ldr	r3, [sp, #16]
 800e54c:	eba0 000a 	sub.w	r0, r0, sl
 800e550:	2240      	movs	r2, #64	@ 0x40
 800e552:	4082      	lsls	r2, r0
 800e554:	4313      	orrs	r3, r2
 800e556:	3401      	adds	r4, #1
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55e:	4829      	ldr	r0, [pc, #164]	@ (800e604 <_vfiprintf_r+0x220>)
 800e560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e564:	2206      	movs	r2, #6
 800e566:	f7f1 fec3 	bl	80002f0 <memchr>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d03f      	beq.n	800e5ee <_vfiprintf_r+0x20a>
 800e56e:	4b26      	ldr	r3, [pc, #152]	@ (800e608 <_vfiprintf_r+0x224>)
 800e570:	bb1b      	cbnz	r3, 800e5ba <_vfiprintf_r+0x1d6>
 800e572:	9b03      	ldr	r3, [sp, #12]
 800e574:	3307      	adds	r3, #7
 800e576:	f023 0307 	bic.w	r3, r3, #7
 800e57a:	3308      	adds	r3, #8
 800e57c:	9303      	str	r3, [sp, #12]
 800e57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e580:	443b      	add	r3, r7
 800e582:	9309      	str	r3, [sp, #36]	@ 0x24
 800e584:	e76a      	b.n	800e45c <_vfiprintf_r+0x78>
 800e586:	fb0c 3202 	mla	r2, ip, r2, r3
 800e58a:	460c      	mov	r4, r1
 800e58c:	2001      	movs	r0, #1
 800e58e:	e7a8      	b.n	800e4e2 <_vfiprintf_r+0xfe>
 800e590:	2300      	movs	r3, #0
 800e592:	3401      	adds	r4, #1
 800e594:	9305      	str	r3, [sp, #20]
 800e596:	4619      	mov	r1, r3
 800e598:	f04f 0c0a 	mov.w	ip, #10
 800e59c:	4620      	mov	r0, r4
 800e59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5a2:	3a30      	subs	r2, #48	@ 0x30
 800e5a4:	2a09      	cmp	r2, #9
 800e5a6:	d903      	bls.n	800e5b0 <_vfiprintf_r+0x1cc>
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d0c6      	beq.n	800e53a <_vfiprintf_r+0x156>
 800e5ac:	9105      	str	r1, [sp, #20]
 800e5ae:	e7c4      	b.n	800e53a <_vfiprintf_r+0x156>
 800e5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e7f0      	b.n	800e59c <_vfiprintf_r+0x1b8>
 800e5ba:	ab03      	add	r3, sp, #12
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	462a      	mov	r2, r5
 800e5c0:	4b12      	ldr	r3, [pc, #72]	@ (800e60c <_vfiprintf_r+0x228>)
 800e5c2:	a904      	add	r1, sp, #16
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f7fc fb4f 	bl	800ac68 <_printf_float>
 800e5ca:	4607      	mov	r7, r0
 800e5cc:	1c78      	adds	r0, r7, #1
 800e5ce:	d1d6      	bne.n	800e57e <_vfiprintf_r+0x19a>
 800e5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5d2:	07d9      	lsls	r1, r3, #31
 800e5d4:	d405      	bmi.n	800e5e2 <_vfiprintf_r+0x1fe>
 800e5d6:	89ab      	ldrh	r3, [r5, #12]
 800e5d8:	059a      	lsls	r2, r3, #22
 800e5da:	d402      	bmi.n	800e5e2 <_vfiprintf_r+0x1fe>
 800e5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5de:	f7fd fc5b 	bl	800be98 <__retarget_lock_release_recursive>
 800e5e2:	89ab      	ldrh	r3, [r5, #12]
 800e5e4:	065b      	lsls	r3, r3, #25
 800e5e6:	f53f af1f 	bmi.w	800e428 <_vfiprintf_r+0x44>
 800e5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5ec:	e71e      	b.n	800e42c <_vfiprintf_r+0x48>
 800e5ee:	ab03      	add	r3, sp, #12
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	4b05      	ldr	r3, [pc, #20]	@ (800e60c <_vfiprintf_r+0x228>)
 800e5f6:	a904      	add	r1, sp, #16
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f7fc fdbd 	bl	800b178 <_printf_i>
 800e5fe:	e7e4      	b.n	800e5ca <_vfiprintf_r+0x1e6>
 800e600:	0800f649 	.word	0x0800f649
 800e604:	0800f653 	.word	0x0800f653
 800e608:	0800ac69 	.word	0x0800ac69
 800e60c:	0800e3bf 	.word	0x0800e3bf
 800e610:	0800f64f 	.word	0x0800f64f

0800e614 <__sflush_r>:
 800e614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	0716      	lsls	r6, r2, #28
 800e61e:	4605      	mov	r5, r0
 800e620:	460c      	mov	r4, r1
 800e622:	d454      	bmi.n	800e6ce <__sflush_r+0xba>
 800e624:	684b      	ldr	r3, [r1, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	dc02      	bgt.n	800e630 <__sflush_r+0x1c>
 800e62a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd48      	ble.n	800e6c2 <__sflush_r+0xae>
 800e630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e632:	2e00      	cmp	r6, #0
 800e634:	d045      	beq.n	800e6c2 <__sflush_r+0xae>
 800e636:	2300      	movs	r3, #0
 800e638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e63c:	682f      	ldr	r7, [r5, #0]
 800e63e:	6a21      	ldr	r1, [r4, #32]
 800e640:	602b      	str	r3, [r5, #0]
 800e642:	d030      	beq.n	800e6a6 <__sflush_r+0x92>
 800e644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	0759      	lsls	r1, r3, #29
 800e64a:	d505      	bpl.n	800e658 <__sflush_r+0x44>
 800e64c:	6863      	ldr	r3, [r4, #4]
 800e64e:	1ad2      	subs	r2, r2, r3
 800e650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e652:	b10b      	cbz	r3, 800e658 <__sflush_r+0x44>
 800e654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e656:	1ad2      	subs	r2, r2, r3
 800e658:	2300      	movs	r3, #0
 800e65a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e65c:	6a21      	ldr	r1, [r4, #32]
 800e65e:	4628      	mov	r0, r5
 800e660:	47b0      	blx	r6
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	d106      	bne.n	800e676 <__sflush_r+0x62>
 800e668:	6829      	ldr	r1, [r5, #0]
 800e66a:	291d      	cmp	r1, #29
 800e66c:	d82b      	bhi.n	800e6c6 <__sflush_r+0xb2>
 800e66e:	4a2a      	ldr	r2, [pc, #168]	@ (800e718 <__sflush_r+0x104>)
 800e670:	410a      	asrs	r2, r1
 800e672:	07d6      	lsls	r6, r2, #31
 800e674:	d427      	bmi.n	800e6c6 <__sflush_r+0xb2>
 800e676:	2200      	movs	r2, #0
 800e678:	6062      	str	r2, [r4, #4]
 800e67a:	04d9      	lsls	r1, r3, #19
 800e67c:	6922      	ldr	r2, [r4, #16]
 800e67e:	6022      	str	r2, [r4, #0]
 800e680:	d504      	bpl.n	800e68c <__sflush_r+0x78>
 800e682:	1c42      	adds	r2, r0, #1
 800e684:	d101      	bne.n	800e68a <__sflush_r+0x76>
 800e686:	682b      	ldr	r3, [r5, #0]
 800e688:	b903      	cbnz	r3, 800e68c <__sflush_r+0x78>
 800e68a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e68c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e68e:	602f      	str	r7, [r5, #0]
 800e690:	b1b9      	cbz	r1, 800e6c2 <__sflush_r+0xae>
 800e692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e696:	4299      	cmp	r1, r3
 800e698:	d002      	beq.n	800e6a0 <__sflush_r+0x8c>
 800e69a:	4628      	mov	r0, r5
 800e69c:	f7fe f9f2 	bl	800ca84 <_free_r>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6a4:	e00d      	b.n	800e6c2 <__sflush_r+0xae>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	47b0      	blx	r6
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	1c50      	adds	r0, r2, #1
 800e6b0:	d1c9      	bne.n	800e646 <__sflush_r+0x32>
 800e6b2:	682b      	ldr	r3, [r5, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d0c6      	beq.n	800e646 <__sflush_r+0x32>
 800e6b8:	2b1d      	cmp	r3, #29
 800e6ba:	d001      	beq.n	800e6c0 <__sflush_r+0xac>
 800e6bc:	2b16      	cmp	r3, #22
 800e6be:	d11e      	bne.n	800e6fe <__sflush_r+0xea>
 800e6c0:	602f      	str	r7, [r5, #0]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e022      	b.n	800e70c <__sflush_r+0xf8>
 800e6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ca:	b21b      	sxth	r3, r3
 800e6cc:	e01b      	b.n	800e706 <__sflush_r+0xf2>
 800e6ce:	690f      	ldr	r7, [r1, #16]
 800e6d0:	2f00      	cmp	r7, #0
 800e6d2:	d0f6      	beq.n	800e6c2 <__sflush_r+0xae>
 800e6d4:	0793      	lsls	r3, r2, #30
 800e6d6:	680e      	ldr	r6, [r1, #0]
 800e6d8:	bf08      	it	eq
 800e6da:	694b      	ldreq	r3, [r1, #20]
 800e6dc:	600f      	str	r7, [r1, #0]
 800e6de:	bf18      	it	ne
 800e6e0:	2300      	movne	r3, #0
 800e6e2:	eba6 0807 	sub.w	r8, r6, r7
 800e6e6:	608b      	str	r3, [r1, #8]
 800e6e8:	f1b8 0f00 	cmp.w	r8, #0
 800e6ec:	dde9      	ble.n	800e6c2 <__sflush_r+0xae>
 800e6ee:	6a21      	ldr	r1, [r4, #32]
 800e6f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6f2:	4643      	mov	r3, r8
 800e6f4:	463a      	mov	r2, r7
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	47b0      	blx	r6
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	dc08      	bgt.n	800e710 <__sflush_r+0xfc>
 800e6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e706:	81a3      	strh	r3, [r4, #12]
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e710:	4407      	add	r7, r0
 800e712:	eba8 0800 	sub.w	r8, r8, r0
 800e716:	e7e7      	b.n	800e6e8 <__sflush_r+0xd4>
 800e718:	dfbffffe 	.word	0xdfbffffe

0800e71c <_fflush_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	690b      	ldr	r3, [r1, #16]
 800e720:	4605      	mov	r5, r0
 800e722:	460c      	mov	r4, r1
 800e724:	b913      	cbnz	r3, 800e72c <_fflush_r+0x10>
 800e726:	2500      	movs	r5, #0
 800e728:	4628      	mov	r0, r5
 800e72a:	bd38      	pop	{r3, r4, r5, pc}
 800e72c:	b118      	cbz	r0, 800e736 <_fflush_r+0x1a>
 800e72e:	6a03      	ldr	r3, [r0, #32]
 800e730:	b90b      	cbnz	r3, 800e736 <_fflush_r+0x1a>
 800e732:	f7fd f8d9 	bl	800b8e8 <__sinit>
 800e736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0f3      	beq.n	800e726 <_fflush_r+0xa>
 800e73e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e740:	07d0      	lsls	r0, r2, #31
 800e742:	d404      	bmi.n	800e74e <_fflush_r+0x32>
 800e744:	0599      	lsls	r1, r3, #22
 800e746:	d402      	bmi.n	800e74e <_fflush_r+0x32>
 800e748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e74a:	f7fd fba4 	bl	800be96 <__retarget_lock_acquire_recursive>
 800e74e:	4628      	mov	r0, r5
 800e750:	4621      	mov	r1, r4
 800e752:	f7ff ff5f 	bl	800e614 <__sflush_r>
 800e756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e758:	07da      	lsls	r2, r3, #31
 800e75a:	4605      	mov	r5, r0
 800e75c:	d4e4      	bmi.n	800e728 <_fflush_r+0xc>
 800e75e:	89a3      	ldrh	r3, [r4, #12]
 800e760:	059b      	lsls	r3, r3, #22
 800e762:	d4e1      	bmi.n	800e728 <_fflush_r+0xc>
 800e764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e766:	f7fd fb97 	bl	800be98 <__retarget_lock_release_recursive>
 800e76a:	e7dd      	b.n	800e728 <_fflush_r+0xc>

0800e76c <__swhatbuf_r>:
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e774:	2900      	cmp	r1, #0
 800e776:	b096      	sub	sp, #88	@ 0x58
 800e778:	4615      	mov	r5, r2
 800e77a:	461e      	mov	r6, r3
 800e77c:	da0d      	bge.n	800e79a <__swhatbuf_r+0x2e>
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e784:	f04f 0100 	mov.w	r1, #0
 800e788:	bf14      	ite	ne
 800e78a:	2340      	movne	r3, #64	@ 0x40
 800e78c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e790:	2000      	movs	r0, #0
 800e792:	6031      	str	r1, [r6, #0]
 800e794:	602b      	str	r3, [r5, #0]
 800e796:	b016      	add	sp, #88	@ 0x58
 800e798:	bd70      	pop	{r4, r5, r6, pc}
 800e79a:	466a      	mov	r2, sp
 800e79c:	f000 f874 	bl	800e888 <_fstat_r>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	dbec      	blt.n	800e77e <__swhatbuf_r+0x12>
 800e7a4:	9901      	ldr	r1, [sp, #4]
 800e7a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7ae:	4259      	negs	r1, r3
 800e7b0:	4159      	adcs	r1, r3
 800e7b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7b6:	e7eb      	b.n	800e790 <__swhatbuf_r+0x24>

0800e7b8 <__smakebuf_r>:
 800e7b8:	898b      	ldrh	r3, [r1, #12]
 800e7ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7bc:	079d      	lsls	r5, r3, #30
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	d507      	bpl.n	800e7d4 <__smakebuf_r+0x1c>
 800e7c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	6123      	str	r3, [r4, #16]
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	6163      	str	r3, [r4, #20]
 800e7d0:	b003      	add	sp, #12
 800e7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d4:	ab01      	add	r3, sp, #4
 800e7d6:	466a      	mov	r2, sp
 800e7d8:	f7ff ffc8 	bl	800e76c <__swhatbuf_r>
 800e7dc:	9f00      	ldr	r7, [sp, #0]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7fc f926 	bl	800aa34 <_malloc_r>
 800e7e8:	b948      	cbnz	r0, 800e7fe <__smakebuf_r+0x46>
 800e7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ee:	059a      	lsls	r2, r3, #22
 800e7f0:	d4ee      	bmi.n	800e7d0 <__smakebuf_r+0x18>
 800e7f2:	f023 0303 	bic.w	r3, r3, #3
 800e7f6:	f043 0302 	orr.w	r3, r3, #2
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	e7e2      	b.n	800e7c4 <__smakebuf_r+0xc>
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	6020      	str	r0, [r4, #0]
 800e802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e806:	81a3      	strh	r3, [r4, #12]
 800e808:	9b01      	ldr	r3, [sp, #4]
 800e80a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e80e:	b15b      	cbz	r3, 800e828 <__smakebuf_r+0x70>
 800e810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e814:	4630      	mov	r0, r6
 800e816:	f000 f849 	bl	800e8ac <_isatty_r>
 800e81a:	b128      	cbz	r0, 800e828 <__smakebuf_r+0x70>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f023 0303 	bic.w	r3, r3, #3
 800e822:	f043 0301 	orr.w	r3, r3, #1
 800e826:	81a3      	strh	r3, [r4, #12]
 800e828:	89a3      	ldrh	r3, [r4, #12]
 800e82a:	431d      	orrs	r5, r3
 800e82c:	81a5      	strh	r5, [r4, #12]
 800e82e:	e7cf      	b.n	800e7d0 <__smakebuf_r+0x18>

0800e830 <memmove>:
 800e830:	4288      	cmp	r0, r1
 800e832:	b510      	push	{r4, lr}
 800e834:	eb01 0402 	add.w	r4, r1, r2
 800e838:	d902      	bls.n	800e840 <memmove+0x10>
 800e83a:	4284      	cmp	r4, r0
 800e83c:	4623      	mov	r3, r4
 800e83e:	d807      	bhi.n	800e850 <memmove+0x20>
 800e840:	1e43      	subs	r3, r0, #1
 800e842:	42a1      	cmp	r1, r4
 800e844:	d008      	beq.n	800e858 <memmove+0x28>
 800e846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e84a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e84e:	e7f8      	b.n	800e842 <memmove+0x12>
 800e850:	4402      	add	r2, r0
 800e852:	4601      	mov	r1, r0
 800e854:	428a      	cmp	r2, r1
 800e856:	d100      	bne.n	800e85a <memmove+0x2a>
 800e858:	bd10      	pop	{r4, pc}
 800e85a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e85e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e862:	e7f7      	b.n	800e854 <memmove+0x24>

0800e864 <strncmp>:
 800e864:	b510      	push	{r4, lr}
 800e866:	b16a      	cbz	r2, 800e884 <strncmp+0x20>
 800e868:	3901      	subs	r1, #1
 800e86a:	1884      	adds	r4, r0, r2
 800e86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e870:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e874:	429a      	cmp	r2, r3
 800e876:	d103      	bne.n	800e880 <strncmp+0x1c>
 800e878:	42a0      	cmp	r0, r4
 800e87a:	d001      	beq.n	800e880 <strncmp+0x1c>
 800e87c:	2a00      	cmp	r2, #0
 800e87e:	d1f5      	bne.n	800e86c <strncmp+0x8>
 800e880:	1ad0      	subs	r0, r2, r3
 800e882:	bd10      	pop	{r4, pc}
 800e884:	4610      	mov	r0, r2
 800e886:	e7fc      	b.n	800e882 <strncmp+0x1e>

0800e888 <_fstat_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4d07      	ldr	r5, [pc, #28]	@ (800e8a8 <_fstat_r+0x20>)
 800e88c:	2300      	movs	r3, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	4608      	mov	r0, r1
 800e892:	4611      	mov	r1, r2
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	f7f2 fd7b 	bl	8001390 <_fstat>
 800e89a:	1c43      	adds	r3, r0, #1
 800e89c:	d102      	bne.n	800e8a4 <_fstat_r+0x1c>
 800e89e:	682b      	ldr	r3, [r5, #0]
 800e8a0:	b103      	cbz	r3, 800e8a4 <_fstat_r+0x1c>
 800e8a2:	6023      	str	r3, [r4, #0]
 800e8a4:	bd38      	pop	{r3, r4, r5, pc}
 800e8a6:	bf00      	nop
 800e8a8:	24004e84 	.word	0x24004e84

0800e8ac <_isatty_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d06      	ldr	r5, [pc, #24]	@ (800e8c8 <_isatty_r+0x1c>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	602b      	str	r3, [r5, #0]
 800e8b8:	f7f2 fd7a 	bl	80013b0 <_isatty>
 800e8bc:	1c43      	adds	r3, r0, #1
 800e8be:	d102      	bne.n	800e8c6 <_isatty_r+0x1a>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	b103      	cbz	r3, 800e8c6 <_isatty_r+0x1a>
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	bd38      	pop	{r3, r4, r5, pc}
 800e8c8:	24004e84 	.word	0x24004e84
 800e8cc:	00000000 	.word	0x00000000

0800e8d0 <nan>:
 800e8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e8d8 <nan+0x8>
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	00000000 	.word	0x00000000
 800e8dc:	7ff80000 	.word	0x7ff80000

0800e8e0 <_calloc_r>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	fba1 5402 	umull	r5, r4, r1, r2
 800e8e6:	b93c      	cbnz	r4, 800e8f8 <_calloc_r+0x18>
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7fc f8a3 	bl	800aa34 <_malloc_r>
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	b928      	cbnz	r0, 800e8fe <_calloc_r+0x1e>
 800e8f2:	2600      	movs	r6, #0
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	bd70      	pop	{r4, r5, r6, pc}
 800e8f8:	220c      	movs	r2, #12
 800e8fa:	6002      	str	r2, [r0, #0]
 800e8fc:	e7f9      	b.n	800e8f2 <_calloc_r+0x12>
 800e8fe:	462a      	mov	r2, r5
 800e900:	4621      	mov	r1, r4
 800e902:	f7fd f9a1 	bl	800bc48 <memset>
 800e906:	e7f5      	b.n	800e8f4 <_calloc_r+0x14>

0800e908 <rshift>:
 800e908:	6903      	ldr	r3, [r0, #16]
 800e90a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e90e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e912:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e916:	f100 0414 	add.w	r4, r0, #20
 800e91a:	dd45      	ble.n	800e9a8 <rshift+0xa0>
 800e91c:	f011 011f 	ands.w	r1, r1, #31
 800e920:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e924:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e928:	d10c      	bne.n	800e944 <rshift+0x3c>
 800e92a:	f100 0710 	add.w	r7, r0, #16
 800e92e:	4629      	mov	r1, r5
 800e930:	42b1      	cmp	r1, r6
 800e932:	d334      	bcc.n	800e99e <rshift+0x96>
 800e934:	1a9b      	subs	r3, r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	1eea      	subs	r2, r5, #3
 800e93a:	4296      	cmp	r6, r2
 800e93c:	bf38      	it	cc
 800e93e:	2300      	movcc	r3, #0
 800e940:	4423      	add	r3, r4
 800e942:	e015      	b.n	800e970 <rshift+0x68>
 800e944:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e948:	f1c1 0820 	rsb	r8, r1, #32
 800e94c:	40cf      	lsrs	r7, r1
 800e94e:	f105 0e04 	add.w	lr, r5, #4
 800e952:	46a1      	mov	r9, r4
 800e954:	4576      	cmp	r6, lr
 800e956:	46f4      	mov	ip, lr
 800e958:	d815      	bhi.n	800e986 <rshift+0x7e>
 800e95a:	1a9a      	subs	r2, r3, r2
 800e95c:	0092      	lsls	r2, r2, #2
 800e95e:	3a04      	subs	r2, #4
 800e960:	3501      	adds	r5, #1
 800e962:	42ae      	cmp	r6, r5
 800e964:	bf38      	it	cc
 800e966:	2200      	movcc	r2, #0
 800e968:	18a3      	adds	r3, r4, r2
 800e96a:	50a7      	str	r7, [r4, r2]
 800e96c:	b107      	cbz	r7, 800e970 <rshift+0x68>
 800e96e:	3304      	adds	r3, #4
 800e970:	1b1a      	subs	r2, r3, r4
 800e972:	42a3      	cmp	r3, r4
 800e974:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e978:	bf08      	it	eq
 800e97a:	2300      	moveq	r3, #0
 800e97c:	6102      	str	r2, [r0, #16]
 800e97e:	bf08      	it	eq
 800e980:	6143      	streq	r3, [r0, #20]
 800e982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e986:	f8dc c000 	ldr.w	ip, [ip]
 800e98a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e98e:	ea4c 0707 	orr.w	r7, ip, r7
 800e992:	f849 7b04 	str.w	r7, [r9], #4
 800e996:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e99a:	40cf      	lsrs	r7, r1
 800e99c:	e7da      	b.n	800e954 <rshift+0x4c>
 800e99e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e9a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e9a6:	e7c3      	b.n	800e930 <rshift+0x28>
 800e9a8:	4623      	mov	r3, r4
 800e9aa:	e7e1      	b.n	800e970 <rshift+0x68>

0800e9ac <__hexdig_fun>:
 800e9ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e9b0:	2b09      	cmp	r3, #9
 800e9b2:	d802      	bhi.n	800e9ba <__hexdig_fun+0xe>
 800e9b4:	3820      	subs	r0, #32
 800e9b6:	b2c0      	uxtb	r0, r0
 800e9b8:	4770      	bx	lr
 800e9ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e9be:	2b05      	cmp	r3, #5
 800e9c0:	d801      	bhi.n	800e9c6 <__hexdig_fun+0x1a>
 800e9c2:	3847      	subs	r0, #71	@ 0x47
 800e9c4:	e7f7      	b.n	800e9b6 <__hexdig_fun+0xa>
 800e9c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	d801      	bhi.n	800e9d2 <__hexdig_fun+0x26>
 800e9ce:	3827      	subs	r0, #39	@ 0x27
 800e9d0:	e7f1      	b.n	800e9b6 <__hexdig_fun+0xa>
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	4770      	bx	lr
	...

0800e9d8 <__gethex>:
 800e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	b085      	sub	sp, #20
 800e9de:	468a      	mov	sl, r1
 800e9e0:	9302      	str	r3, [sp, #8]
 800e9e2:	680b      	ldr	r3, [r1, #0]
 800e9e4:	9001      	str	r0, [sp, #4]
 800e9e6:	4690      	mov	r8, r2
 800e9e8:	1c9c      	adds	r4, r3, #2
 800e9ea:	46a1      	mov	r9, r4
 800e9ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e9f0:	2830      	cmp	r0, #48	@ 0x30
 800e9f2:	d0fa      	beq.n	800e9ea <__gethex+0x12>
 800e9f4:	eba9 0303 	sub.w	r3, r9, r3
 800e9f8:	f1a3 0b02 	sub.w	fp, r3, #2
 800e9fc:	f7ff ffd6 	bl	800e9ac <__hexdig_fun>
 800ea00:	4605      	mov	r5, r0
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d168      	bne.n	800ead8 <__gethex+0x100>
 800ea06:	49a0      	ldr	r1, [pc, #640]	@ (800ec88 <__gethex+0x2b0>)
 800ea08:	2201      	movs	r2, #1
 800ea0a:	4648      	mov	r0, r9
 800ea0c:	f7ff ff2a 	bl	800e864 <strncmp>
 800ea10:	4607      	mov	r7, r0
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d167      	bne.n	800eae6 <__gethex+0x10e>
 800ea16:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ea1a:	4626      	mov	r6, r4
 800ea1c:	f7ff ffc6 	bl	800e9ac <__hexdig_fun>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d062      	beq.n	800eaea <__gethex+0x112>
 800ea24:	4623      	mov	r3, r4
 800ea26:	7818      	ldrb	r0, [r3, #0]
 800ea28:	2830      	cmp	r0, #48	@ 0x30
 800ea2a:	4699      	mov	r9, r3
 800ea2c:	f103 0301 	add.w	r3, r3, #1
 800ea30:	d0f9      	beq.n	800ea26 <__gethex+0x4e>
 800ea32:	f7ff ffbb 	bl	800e9ac <__hexdig_fun>
 800ea36:	fab0 f580 	clz	r5, r0
 800ea3a:	096d      	lsrs	r5, r5, #5
 800ea3c:	f04f 0b01 	mov.w	fp, #1
 800ea40:	464a      	mov	r2, r9
 800ea42:	4616      	mov	r6, r2
 800ea44:	3201      	adds	r2, #1
 800ea46:	7830      	ldrb	r0, [r6, #0]
 800ea48:	f7ff ffb0 	bl	800e9ac <__hexdig_fun>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d1f8      	bne.n	800ea42 <__gethex+0x6a>
 800ea50:	498d      	ldr	r1, [pc, #564]	@ (800ec88 <__gethex+0x2b0>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	4630      	mov	r0, r6
 800ea56:	f7ff ff05 	bl	800e864 <strncmp>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d13f      	bne.n	800eade <__gethex+0x106>
 800ea5e:	b944      	cbnz	r4, 800ea72 <__gethex+0x9a>
 800ea60:	1c74      	adds	r4, r6, #1
 800ea62:	4622      	mov	r2, r4
 800ea64:	4616      	mov	r6, r2
 800ea66:	3201      	adds	r2, #1
 800ea68:	7830      	ldrb	r0, [r6, #0]
 800ea6a:	f7ff ff9f 	bl	800e9ac <__hexdig_fun>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d1f8      	bne.n	800ea64 <__gethex+0x8c>
 800ea72:	1ba4      	subs	r4, r4, r6
 800ea74:	00a7      	lsls	r7, r4, #2
 800ea76:	7833      	ldrb	r3, [r6, #0]
 800ea78:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ea7c:	2b50      	cmp	r3, #80	@ 0x50
 800ea7e:	d13e      	bne.n	800eafe <__gethex+0x126>
 800ea80:	7873      	ldrb	r3, [r6, #1]
 800ea82:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea84:	d033      	beq.n	800eaee <__gethex+0x116>
 800ea86:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea88:	d034      	beq.n	800eaf4 <__gethex+0x11c>
 800ea8a:	1c71      	adds	r1, r6, #1
 800ea8c:	2400      	movs	r4, #0
 800ea8e:	7808      	ldrb	r0, [r1, #0]
 800ea90:	f7ff ff8c 	bl	800e9ac <__hexdig_fun>
 800ea94:	1e43      	subs	r3, r0, #1
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	2b18      	cmp	r3, #24
 800ea9a:	d830      	bhi.n	800eafe <__gethex+0x126>
 800ea9c:	f1a0 0210 	sub.w	r2, r0, #16
 800eaa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eaa4:	f7ff ff82 	bl	800e9ac <__hexdig_fun>
 800eaa8:	f100 3cff 	add.w	ip, r0, #4294967295
 800eaac:	fa5f fc8c 	uxtb.w	ip, ip
 800eab0:	f1bc 0f18 	cmp.w	ip, #24
 800eab4:	f04f 030a 	mov.w	r3, #10
 800eab8:	d91e      	bls.n	800eaf8 <__gethex+0x120>
 800eaba:	b104      	cbz	r4, 800eabe <__gethex+0xe6>
 800eabc:	4252      	negs	r2, r2
 800eabe:	4417      	add	r7, r2
 800eac0:	f8ca 1000 	str.w	r1, [sl]
 800eac4:	b1ed      	cbz	r5, 800eb02 <__gethex+0x12a>
 800eac6:	f1bb 0f00 	cmp.w	fp, #0
 800eaca:	bf0c      	ite	eq
 800eacc:	2506      	moveq	r5, #6
 800eace:	2500      	movne	r5, #0
 800ead0:	4628      	mov	r0, r5
 800ead2:	b005      	add	sp, #20
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	2500      	movs	r5, #0
 800eada:	462c      	mov	r4, r5
 800eadc:	e7b0      	b.n	800ea40 <__gethex+0x68>
 800eade:	2c00      	cmp	r4, #0
 800eae0:	d1c7      	bne.n	800ea72 <__gethex+0x9a>
 800eae2:	4627      	mov	r7, r4
 800eae4:	e7c7      	b.n	800ea76 <__gethex+0x9e>
 800eae6:	464e      	mov	r6, r9
 800eae8:	462f      	mov	r7, r5
 800eaea:	2501      	movs	r5, #1
 800eaec:	e7c3      	b.n	800ea76 <__gethex+0x9e>
 800eaee:	2400      	movs	r4, #0
 800eaf0:	1cb1      	adds	r1, r6, #2
 800eaf2:	e7cc      	b.n	800ea8e <__gethex+0xb6>
 800eaf4:	2401      	movs	r4, #1
 800eaf6:	e7fb      	b.n	800eaf0 <__gethex+0x118>
 800eaf8:	fb03 0002 	mla	r0, r3, r2, r0
 800eafc:	e7ce      	b.n	800ea9c <__gethex+0xc4>
 800eafe:	4631      	mov	r1, r6
 800eb00:	e7de      	b.n	800eac0 <__gethex+0xe8>
 800eb02:	eba6 0309 	sub.w	r3, r6, r9
 800eb06:	3b01      	subs	r3, #1
 800eb08:	4629      	mov	r1, r5
 800eb0a:	2b07      	cmp	r3, #7
 800eb0c:	dc0a      	bgt.n	800eb24 <__gethex+0x14c>
 800eb0e:	9801      	ldr	r0, [sp, #4]
 800eb10:	f7fe f802 	bl	800cb18 <_Balloc>
 800eb14:	4604      	mov	r4, r0
 800eb16:	b940      	cbnz	r0, 800eb2a <__gethex+0x152>
 800eb18:	4b5c      	ldr	r3, [pc, #368]	@ (800ec8c <__gethex+0x2b4>)
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	21e4      	movs	r1, #228	@ 0xe4
 800eb1e:	485c      	ldr	r0, [pc, #368]	@ (800ec90 <__gethex+0x2b8>)
 800eb20:	f7fb ff38 	bl	800a994 <__assert_func>
 800eb24:	3101      	adds	r1, #1
 800eb26:	105b      	asrs	r3, r3, #1
 800eb28:	e7ef      	b.n	800eb0a <__gethex+0x132>
 800eb2a:	f100 0a14 	add.w	sl, r0, #20
 800eb2e:	2300      	movs	r3, #0
 800eb30:	4655      	mov	r5, sl
 800eb32:	469b      	mov	fp, r3
 800eb34:	45b1      	cmp	r9, r6
 800eb36:	d337      	bcc.n	800eba8 <__gethex+0x1d0>
 800eb38:	f845 bb04 	str.w	fp, [r5], #4
 800eb3c:	eba5 050a 	sub.w	r5, r5, sl
 800eb40:	10ad      	asrs	r5, r5, #2
 800eb42:	6125      	str	r5, [r4, #16]
 800eb44:	4658      	mov	r0, fp
 800eb46:	f7fe f8d9 	bl	800ccfc <__hi0bits>
 800eb4a:	016d      	lsls	r5, r5, #5
 800eb4c:	f8d8 6000 	ldr.w	r6, [r8]
 800eb50:	1a2d      	subs	r5, r5, r0
 800eb52:	42b5      	cmp	r5, r6
 800eb54:	dd54      	ble.n	800ec00 <__gethex+0x228>
 800eb56:	1bad      	subs	r5, r5, r6
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f7fe fc6a 	bl	800d434 <__any_on>
 800eb60:	4681      	mov	r9, r0
 800eb62:	b178      	cbz	r0, 800eb84 <__gethex+0x1ac>
 800eb64:	1e6b      	subs	r3, r5, #1
 800eb66:	1159      	asrs	r1, r3, #5
 800eb68:	f003 021f 	and.w	r2, r3, #31
 800eb6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb70:	f04f 0901 	mov.w	r9, #1
 800eb74:	fa09 f202 	lsl.w	r2, r9, r2
 800eb78:	420a      	tst	r2, r1
 800eb7a:	d003      	beq.n	800eb84 <__gethex+0x1ac>
 800eb7c:	454b      	cmp	r3, r9
 800eb7e:	dc36      	bgt.n	800ebee <__gethex+0x216>
 800eb80:	f04f 0902 	mov.w	r9, #2
 800eb84:	4629      	mov	r1, r5
 800eb86:	4620      	mov	r0, r4
 800eb88:	f7ff febe 	bl	800e908 <rshift>
 800eb8c:	442f      	add	r7, r5
 800eb8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb92:	42bb      	cmp	r3, r7
 800eb94:	da42      	bge.n	800ec1c <__gethex+0x244>
 800eb96:	9801      	ldr	r0, [sp, #4]
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f7fd fffd 	bl	800cb98 <_Bfree>
 800eb9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eba0:	2300      	movs	r3, #0
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	25a3      	movs	r5, #163	@ 0xa3
 800eba6:	e793      	b.n	800ead0 <__gethex+0xf8>
 800eba8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ebac:	2a2e      	cmp	r2, #46	@ 0x2e
 800ebae:	d012      	beq.n	800ebd6 <__gethex+0x1fe>
 800ebb0:	2b20      	cmp	r3, #32
 800ebb2:	d104      	bne.n	800ebbe <__gethex+0x1e6>
 800ebb4:	f845 bb04 	str.w	fp, [r5], #4
 800ebb8:	f04f 0b00 	mov.w	fp, #0
 800ebbc:	465b      	mov	r3, fp
 800ebbe:	7830      	ldrb	r0, [r6, #0]
 800ebc0:	9303      	str	r3, [sp, #12]
 800ebc2:	f7ff fef3 	bl	800e9ac <__hexdig_fun>
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	f000 000f 	and.w	r0, r0, #15
 800ebcc:	4098      	lsls	r0, r3
 800ebce:	ea4b 0b00 	orr.w	fp, fp, r0
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	e7ae      	b.n	800eb34 <__gethex+0x15c>
 800ebd6:	45b1      	cmp	r9, r6
 800ebd8:	d8ea      	bhi.n	800ebb0 <__gethex+0x1d8>
 800ebda:	492b      	ldr	r1, [pc, #172]	@ (800ec88 <__gethex+0x2b0>)
 800ebdc:	9303      	str	r3, [sp, #12]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f7ff fe3f 	bl	800e864 <strncmp>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d1e1      	bne.n	800ebb0 <__gethex+0x1d8>
 800ebec:	e7a2      	b.n	800eb34 <__gethex+0x15c>
 800ebee:	1ea9      	subs	r1, r5, #2
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f7fe fc1f 	bl	800d434 <__any_on>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d0c2      	beq.n	800eb80 <__gethex+0x1a8>
 800ebfa:	f04f 0903 	mov.w	r9, #3
 800ebfe:	e7c1      	b.n	800eb84 <__gethex+0x1ac>
 800ec00:	da09      	bge.n	800ec16 <__gethex+0x23e>
 800ec02:	1b75      	subs	r5, r6, r5
 800ec04:	4621      	mov	r1, r4
 800ec06:	9801      	ldr	r0, [sp, #4]
 800ec08:	462a      	mov	r2, r5
 800ec0a:	f7fe f9dd 	bl	800cfc8 <__lshift>
 800ec0e:	1b7f      	subs	r7, r7, r5
 800ec10:	4604      	mov	r4, r0
 800ec12:	f100 0a14 	add.w	sl, r0, #20
 800ec16:	f04f 0900 	mov.w	r9, #0
 800ec1a:	e7b8      	b.n	800eb8e <__gethex+0x1b6>
 800ec1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec20:	42bd      	cmp	r5, r7
 800ec22:	dd6f      	ble.n	800ed04 <__gethex+0x32c>
 800ec24:	1bed      	subs	r5, r5, r7
 800ec26:	42ae      	cmp	r6, r5
 800ec28:	dc34      	bgt.n	800ec94 <__gethex+0x2bc>
 800ec2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d022      	beq.n	800ec78 <__gethex+0x2a0>
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d024      	beq.n	800ec80 <__gethex+0x2a8>
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d115      	bne.n	800ec66 <__gethex+0x28e>
 800ec3a:	42ae      	cmp	r6, r5
 800ec3c:	d113      	bne.n	800ec66 <__gethex+0x28e>
 800ec3e:	2e01      	cmp	r6, #1
 800ec40:	d10b      	bne.n	800ec5a <__gethex+0x282>
 800ec42:	9a02      	ldr	r2, [sp, #8]
 800ec44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec48:	6013      	str	r3, [r2, #0]
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	6123      	str	r3, [r4, #16]
 800ec4e:	f8ca 3000 	str.w	r3, [sl]
 800ec52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec54:	2562      	movs	r5, #98	@ 0x62
 800ec56:	601c      	str	r4, [r3, #0]
 800ec58:	e73a      	b.n	800ead0 <__gethex+0xf8>
 800ec5a:	1e71      	subs	r1, r6, #1
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f7fe fbe9 	bl	800d434 <__any_on>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d1ed      	bne.n	800ec42 <__gethex+0x26a>
 800ec66:	9801      	ldr	r0, [sp, #4]
 800ec68:	4621      	mov	r1, r4
 800ec6a:	f7fd ff95 	bl	800cb98 <_Bfree>
 800ec6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec70:	2300      	movs	r3, #0
 800ec72:	6013      	str	r3, [r2, #0]
 800ec74:	2550      	movs	r5, #80	@ 0x50
 800ec76:	e72b      	b.n	800ead0 <__gethex+0xf8>
 800ec78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1f3      	bne.n	800ec66 <__gethex+0x28e>
 800ec7e:	e7e0      	b.n	800ec42 <__gethex+0x26a>
 800ec80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1dd      	bne.n	800ec42 <__gethex+0x26a>
 800ec86:	e7ee      	b.n	800ec66 <__gethex+0x28e>
 800ec88:	0800f4f0 	.word	0x0800f4f0
 800ec8c:	0800f385 	.word	0x0800f385
 800ec90:	0800f662 	.word	0x0800f662
 800ec94:	1e6f      	subs	r7, r5, #1
 800ec96:	f1b9 0f00 	cmp.w	r9, #0
 800ec9a:	d130      	bne.n	800ecfe <__gethex+0x326>
 800ec9c:	b127      	cbz	r7, 800eca8 <__gethex+0x2d0>
 800ec9e:	4639      	mov	r1, r7
 800eca0:	4620      	mov	r0, r4
 800eca2:	f7fe fbc7 	bl	800d434 <__any_on>
 800eca6:	4681      	mov	r9, r0
 800eca8:	117a      	asrs	r2, r7, #5
 800ecaa:	2301      	movs	r3, #1
 800ecac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ecb0:	f007 071f 	and.w	r7, r7, #31
 800ecb4:	40bb      	lsls	r3, r7
 800ecb6:	4213      	tst	r3, r2
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4620      	mov	r0, r4
 800ecbc:	bf18      	it	ne
 800ecbe:	f049 0902 	orrne.w	r9, r9, #2
 800ecc2:	f7ff fe21 	bl	800e908 <rshift>
 800ecc6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ecca:	1b76      	subs	r6, r6, r5
 800eccc:	2502      	movs	r5, #2
 800ecce:	f1b9 0f00 	cmp.w	r9, #0
 800ecd2:	d047      	beq.n	800ed64 <__gethex+0x38c>
 800ecd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d015      	beq.n	800ed08 <__gethex+0x330>
 800ecdc:	2b03      	cmp	r3, #3
 800ecde:	d017      	beq.n	800ed10 <__gethex+0x338>
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d109      	bne.n	800ecf8 <__gethex+0x320>
 800ece4:	f019 0f02 	tst.w	r9, #2
 800ece8:	d006      	beq.n	800ecf8 <__gethex+0x320>
 800ecea:	f8da 3000 	ldr.w	r3, [sl]
 800ecee:	ea49 0903 	orr.w	r9, r9, r3
 800ecf2:	f019 0f01 	tst.w	r9, #1
 800ecf6:	d10e      	bne.n	800ed16 <__gethex+0x33e>
 800ecf8:	f045 0510 	orr.w	r5, r5, #16
 800ecfc:	e032      	b.n	800ed64 <__gethex+0x38c>
 800ecfe:	f04f 0901 	mov.w	r9, #1
 800ed02:	e7d1      	b.n	800eca8 <__gethex+0x2d0>
 800ed04:	2501      	movs	r5, #1
 800ed06:	e7e2      	b.n	800ecce <__gethex+0x2f6>
 800ed08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0a:	f1c3 0301 	rsb	r3, r3, #1
 800ed0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d0f0      	beq.n	800ecf8 <__gethex+0x320>
 800ed16:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed1a:	f104 0314 	add.w	r3, r4, #20
 800ed1e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ed22:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ed26:	f04f 0c00 	mov.w	ip, #0
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed30:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed34:	d01b      	beq.n	800ed6e <__gethex+0x396>
 800ed36:	3201      	adds	r2, #1
 800ed38:	6002      	str	r2, [r0, #0]
 800ed3a:	2d02      	cmp	r5, #2
 800ed3c:	f104 0314 	add.w	r3, r4, #20
 800ed40:	d13c      	bne.n	800edbc <__gethex+0x3e4>
 800ed42:	f8d8 2000 	ldr.w	r2, [r8]
 800ed46:	3a01      	subs	r2, #1
 800ed48:	42b2      	cmp	r2, r6
 800ed4a:	d109      	bne.n	800ed60 <__gethex+0x388>
 800ed4c:	1171      	asrs	r1, r6, #5
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed54:	f006 061f 	and.w	r6, r6, #31
 800ed58:	fa02 f606 	lsl.w	r6, r2, r6
 800ed5c:	421e      	tst	r6, r3
 800ed5e:	d13a      	bne.n	800edd6 <__gethex+0x3fe>
 800ed60:	f045 0520 	orr.w	r5, r5, #32
 800ed64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed66:	601c      	str	r4, [r3, #0]
 800ed68:	9b02      	ldr	r3, [sp, #8]
 800ed6a:	601f      	str	r7, [r3, #0]
 800ed6c:	e6b0      	b.n	800ead0 <__gethex+0xf8>
 800ed6e:	4299      	cmp	r1, r3
 800ed70:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed74:	d8d9      	bhi.n	800ed2a <__gethex+0x352>
 800ed76:	68a3      	ldr	r3, [r4, #8]
 800ed78:	459b      	cmp	fp, r3
 800ed7a:	db17      	blt.n	800edac <__gethex+0x3d4>
 800ed7c:	6861      	ldr	r1, [r4, #4]
 800ed7e:	9801      	ldr	r0, [sp, #4]
 800ed80:	3101      	adds	r1, #1
 800ed82:	f7fd fec9 	bl	800cb18 <_Balloc>
 800ed86:	4681      	mov	r9, r0
 800ed88:	b918      	cbnz	r0, 800ed92 <__gethex+0x3ba>
 800ed8a:	4b1a      	ldr	r3, [pc, #104]	@ (800edf4 <__gethex+0x41c>)
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	2184      	movs	r1, #132	@ 0x84
 800ed90:	e6c5      	b.n	800eb1e <__gethex+0x146>
 800ed92:	6922      	ldr	r2, [r4, #16]
 800ed94:	3202      	adds	r2, #2
 800ed96:	f104 010c 	add.w	r1, r4, #12
 800ed9a:	0092      	lsls	r2, r2, #2
 800ed9c:	300c      	adds	r0, #12
 800ed9e:	f7fd f87c 	bl	800be9a <memcpy>
 800eda2:	4621      	mov	r1, r4
 800eda4:	9801      	ldr	r0, [sp, #4]
 800eda6:	f7fd fef7 	bl	800cb98 <_Bfree>
 800edaa:	464c      	mov	r4, r9
 800edac:	6923      	ldr	r3, [r4, #16]
 800edae:	1c5a      	adds	r2, r3, #1
 800edb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edb4:	6122      	str	r2, [r4, #16]
 800edb6:	2201      	movs	r2, #1
 800edb8:	615a      	str	r2, [r3, #20]
 800edba:	e7be      	b.n	800ed3a <__gethex+0x362>
 800edbc:	6922      	ldr	r2, [r4, #16]
 800edbe:	455a      	cmp	r2, fp
 800edc0:	dd0b      	ble.n	800edda <__gethex+0x402>
 800edc2:	2101      	movs	r1, #1
 800edc4:	4620      	mov	r0, r4
 800edc6:	f7ff fd9f 	bl	800e908 <rshift>
 800edca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edce:	3701      	adds	r7, #1
 800edd0:	42bb      	cmp	r3, r7
 800edd2:	f6ff aee0 	blt.w	800eb96 <__gethex+0x1be>
 800edd6:	2501      	movs	r5, #1
 800edd8:	e7c2      	b.n	800ed60 <__gethex+0x388>
 800edda:	f016 061f 	ands.w	r6, r6, #31
 800edde:	d0fa      	beq.n	800edd6 <__gethex+0x3fe>
 800ede0:	4453      	add	r3, sl
 800ede2:	f1c6 0620 	rsb	r6, r6, #32
 800ede6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800edea:	f7fd ff87 	bl	800ccfc <__hi0bits>
 800edee:	42b0      	cmp	r0, r6
 800edf0:	dbe7      	blt.n	800edc2 <__gethex+0x3ea>
 800edf2:	e7f0      	b.n	800edd6 <__gethex+0x3fe>
 800edf4:	0800f385 	.word	0x0800f385

0800edf8 <L_shift>:
 800edf8:	f1c2 0208 	rsb	r2, r2, #8
 800edfc:	0092      	lsls	r2, r2, #2
 800edfe:	b570      	push	{r4, r5, r6, lr}
 800ee00:	f1c2 0620 	rsb	r6, r2, #32
 800ee04:	6843      	ldr	r3, [r0, #4]
 800ee06:	6804      	ldr	r4, [r0, #0]
 800ee08:	fa03 f506 	lsl.w	r5, r3, r6
 800ee0c:	432c      	orrs	r4, r5
 800ee0e:	40d3      	lsrs	r3, r2
 800ee10:	6004      	str	r4, [r0, #0]
 800ee12:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee16:	4288      	cmp	r0, r1
 800ee18:	d3f4      	bcc.n	800ee04 <L_shift+0xc>
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}

0800ee1c <__match>:
 800ee1c:	b530      	push	{r4, r5, lr}
 800ee1e:	6803      	ldr	r3, [r0, #0]
 800ee20:	3301      	adds	r3, #1
 800ee22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee26:	b914      	cbnz	r4, 800ee2e <__match+0x12>
 800ee28:	6003      	str	r3, [r0, #0]
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	bd30      	pop	{r4, r5, pc}
 800ee2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ee36:	2d19      	cmp	r5, #25
 800ee38:	bf98      	it	ls
 800ee3a:	3220      	addls	r2, #32
 800ee3c:	42a2      	cmp	r2, r4
 800ee3e:	d0f0      	beq.n	800ee22 <__match+0x6>
 800ee40:	2000      	movs	r0, #0
 800ee42:	e7f3      	b.n	800ee2c <__match+0x10>

0800ee44 <__hexnan>:
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	680b      	ldr	r3, [r1, #0]
 800ee4a:	6801      	ldr	r1, [r0, #0]
 800ee4c:	115e      	asrs	r6, r3, #5
 800ee4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee52:	f013 031f 	ands.w	r3, r3, #31
 800ee56:	b087      	sub	sp, #28
 800ee58:	bf18      	it	ne
 800ee5a:	3604      	addne	r6, #4
 800ee5c:	2500      	movs	r5, #0
 800ee5e:	1f37      	subs	r7, r6, #4
 800ee60:	4682      	mov	sl, r0
 800ee62:	4690      	mov	r8, r2
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee6a:	46b9      	mov	r9, r7
 800ee6c:	463c      	mov	r4, r7
 800ee6e:	9502      	str	r5, [sp, #8]
 800ee70:	46ab      	mov	fp, r5
 800ee72:	784a      	ldrb	r2, [r1, #1]
 800ee74:	1c4b      	adds	r3, r1, #1
 800ee76:	9303      	str	r3, [sp, #12]
 800ee78:	b342      	cbz	r2, 800eecc <__hexnan+0x88>
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	9105      	str	r1, [sp, #20]
 800ee7e:	9204      	str	r2, [sp, #16]
 800ee80:	f7ff fd94 	bl	800e9ac <__hexdig_fun>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d151      	bne.n	800ef2c <__hexnan+0xe8>
 800ee88:	9a04      	ldr	r2, [sp, #16]
 800ee8a:	9905      	ldr	r1, [sp, #20]
 800ee8c:	2a20      	cmp	r2, #32
 800ee8e:	d818      	bhi.n	800eec2 <__hexnan+0x7e>
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	459b      	cmp	fp, r3
 800ee94:	dd13      	ble.n	800eebe <__hexnan+0x7a>
 800ee96:	454c      	cmp	r4, r9
 800ee98:	d206      	bcs.n	800eea8 <__hexnan+0x64>
 800ee9a:	2d07      	cmp	r5, #7
 800ee9c:	dc04      	bgt.n	800eea8 <__hexnan+0x64>
 800ee9e:	462a      	mov	r2, r5
 800eea0:	4649      	mov	r1, r9
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7ff ffa8 	bl	800edf8 <L_shift>
 800eea8:	4544      	cmp	r4, r8
 800eeaa:	d952      	bls.n	800ef52 <__hexnan+0x10e>
 800eeac:	2300      	movs	r3, #0
 800eeae:	f1a4 0904 	sub.w	r9, r4, #4
 800eeb2:	f844 3c04 	str.w	r3, [r4, #-4]
 800eeb6:	f8cd b008 	str.w	fp, [sp, #8]
 800eeba:	464c      	mov	r4, r9
 800eebc:	461d      	mov	r5, r3
 800eebe:	9903      	ldr	r1, [sp, #12]
 800eec0:	e7d7      	b.n	800ee72 <__hexnan+0x2e>
 800eec2:	2a29      	cmp	r2, #41	@ 0x29
 800eec4:	d157      	bne.n	800ef76 <__hexnan+0x132>
 800eec6:	3102      	adds	r1, #2
 800eec8:	f8ca 1000 	str.w	r1, [sl]
 800eecc:	f1bb 0f00 	cmp.w	fp, #0
 800eed0:	d051      	beq.n	800ef76 <__hexnan+0x132>
 800eed2:	454c      	cmp	r4, r9
 800eed4:	d206      	bcs.n	800eee4 <__hexnan+0xa0>
 800eed6:	2d07      	cmp	r5, #7
 800eed8:	dc04      	bgt.n	800eee4 <__hexnan+0xa0>
 800eeda:	462a      	mov	r2, r5
 800eedc:	4649      	mov	r1, r9
 800eede:	4620      	mov	r0, r4
 800eee0:	f7ff ff8a 	bl	800edf8 <L_shift>
 800eee4:	4544      	cmp	r4, r8
 800eee6:	d936      	bls.n	800ef56 <__hexnan+0x112>
 800eee8:	f1a8 0204 	sub.w	r2, r8, #4
 800eeec:	4623      	mov	r3, r4
 800eeee:	f853 1b04 	ldr.w	r1, [r3], #4
 800eef2:	f842 1f04 	str.w	r1, [r2, #4]!
 800eef6:	429f      	cmp	r7, r3
 800eef8:	d2f9      	bcs.n	800eeee <__hexnan+0xaa>
 800eefa:	1b3b      	subs	r3, r7, r4
 800eefc:	f023 0303 	bic.w	r3, r3, #3
 800ef00:	3304      	adds	r3, #4
 800ef02:	3401      	adds	r4, #1
 800ef04:	3e03      	subs	r6, #3
 800ef06:	42b4      	cmp	r4, r6
 800ef08:	bf88      	it	hi
 800ef0a:	2304      	movhi	r3, #4
 800ef0c:	4443      	add	r3, r8
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f843 2b04 	str.w	r2, [r3], #4
 800ef14:	429f      	cmp	r7, r3
 800ef16:	d2fb      	bcs.n	800ef10 <__hexnan+0xcc>
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	b91b      	cbnz	r3, 800ef24 <__hexnan+0xe0>
 800ef1c:	4547      	cmp	r7, r8
 800ef1e:	d128      	bne.n	800ef72 <__hexnan+0x12e>
 800ef20:	2301      	movs	r3, #1
 800ef22:	603b      	str	r3, [r7, #0]
 800ef24:	2005      	movs	r0, #5
 800ef26:	b007      	add	sp, #28
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	3501      	adds	r5, #1
 800ef2e:	2d08      	cmp	r5, #8
 800ef30:	f10b 0b01 	add.w	fp, fp, #1
 800ef34:	dd06      	ble.n	800ef44 <__hexnan+0x100>
 800ef36:	4544      	cmp	r4, r8
 800ef38:	d9c1      	bls.n	800eebe <__hexnan+0x7a>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef40:	2501      	movs	r5, #1
 800ef42:	3c04      	subs	r4, #4
 800ef44:	6822      	ldr	r2, [r4, #0]
 800ef46:	f000 000f 	and.w	r0, r0, #15
 800ef4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef4e:	6020      	str	r0, [r4, #0]
 800ef50:	e7b5      	b.n	800eebe <__hexnan+0x7a>
 800ef52:	2508      	movs	r5, #8
 800ef54:	e7b3      	b.n	800eebe <__hexnan+0x7a>
 800ef56:	9b01      	ldr	r3, [sp, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0dd      	beq.n	800ef18 <__hexnan+0xd4>
 800ef5c:	f1c3 0320 	rsb	r3, r3, #32
 800ef60:	f04f 32ff 	mov.w	r2, #4294967295
 800ef64:	40da      	lsrs	r2, r3
 800ef66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef70:	e7d2      	b.n	800ef18 <__hexnan+0xd4>
 800ef72:	3f04      	subs	r7, #4
 800ef74:	e7d0      	b.n	800ef18 <__hexnan+0xd4>
 800ef76:	2004      	movs	r0, #4
 800ef78:	e7d5      	b.n	800ef26 <__hexnan+0xe2>

0800ef7a <__ascii_mbtowc>:
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	b901      	cbnz	r1, 800ef80 <__ascii_mbtowc+0x6>
 800ef7e:	a901      	add	r1, sp, #4
 800ef80:	b142      	cbz	r2, 800ef94 <__ascii_mbtowc+0x1a>
 800ef82:	b14b      	cbz	r3, 800ef98 <__ascii_mbtowc+0x1e>
 800ef84:	7813      	ldrb	r3, [r2, #0]
 800ef86:	600b      	str	r3, [r1, #0]
 800ef88:	7812      	ldrb	r2, [r2, #0]
 800ef8a:	1e10      	subs	r0, r2, #0
 800ef8c:	bf18      	it	ne
 800ef8e:	2001      	movne	r0, #1
 800ef90:	b002      	add	sp, #8
 800ef92:	4770      	bx	lr
 800ef94:	4610      	mov	r0, r2
 800ef96:	e7fb      	b.n	800ef90 <__ascii_mbtowc+0x16>
 800ef98:	f06f 0001 	mvn.w	r0, #1
 800ef9c:	e7f8      	b.n	800ef90 <__ascii_mbtowc+0x16>

0800ef9e <_realloc_r>:
 800ef9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa2:	4680      	mov	r8, r0
 800efa4:	4615      	mov	r5, r2
 800efa6:	460c      	mov	r4, r1
 800efa8:	b921      	cbnz	r1, 800efb4 <_realloc_r+0x16>
 800efaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efae:	4611      	mov	r1, r2
 800efb0:	f7fb bd40 	b.w	800aa34 <_malloc_r>
 800efb4:	b92a      	cbnz	r2, 800efc2 <_realloc_r+0x24>
 800efb6:	f7fd fd65 	bl	800ca84 <_free_r>
 800efba:	2400      	movs	r4, #0
 800efbc:	4620      	mov	r0, r4
 800efbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc2:	f000 f827 	bl	800f014 <_malloc_usable_size_r>
 800efc6:	4285      	cmp	r5, r0
 800efc8:	4606      	mov	r6, r0
 800efca:	d802      	bhi.n	800efd2 <_realloc_r+0x34>
 800efcc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800efd0:	d8f4      	bhi.n	800efbc <_realloc_r+0x1e>
 800efd2:	4629      	mov	r1, r5
 800efd4:	4640      	mov	r0, r8
 800efd6:	f7fb fd2d 	bl	800aa34 <_malloc_r>
 800efda:	4607      	mov	r7, r0
 800efdc:	2800      	cmp	r0, #0
 800efde:	d0ec      	beq.n	800efba <_realloc_r+0x1c>
 800efe0:	42b5      	cmp	r5, r6
 800efe2:	462a      	mov	r2, r5
 800efe4:	4621      	mov	r1, r4
 800efe6:	bf28      	it	cs
 800efe8:	4632      	movcs	r2, r6
 800efea:	f7fc ff56 	bl	800be9a <memcpy>
 800efee:	4621      	mov	r1, r4
 800eff0:	4640      	mov	r0, r8
 800eff2:	f7fd fd47 	bl	800ca84 <_free_r>
 800eff6:	463c      	mov	r4, r7
 800eff8:	e7e0      	b.n	800efbc <_realloc_r+0x1e>

0800effa <__ascii_wctomb>:
 800effa:	4603      	mov	r3, r0
 800effc:	4608      	mov	r0, r1
 800effe:	b141      	cbz	r1, 800f012 <__ascii_wctomb+0x18>
 800f000:	2aff      	cmp	r2, #255	@ 0xff
 800f002:	d904      	bls.n	800f00e <__ascii_wctomb+0x14>
 800f004:	228a      	movs	r2, #138	@ 0x8a
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	f04f 30ff 	mov.w	r0, #4294967295
 800f00c:	4770      	bx	lr
 800f00e:	700a      	strb	r2, [r1, #0]
 800f010:	2001      	movs	r0, #1
 800f012:	4770      	bx	lr

0800f014 <_malloc_usable_size_r>:
 800f014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f018:	1f18      	subs	r0, r3, #4
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bfbc      	itt	lt
 800f01e:	580b      	ldrlt	r3, [r1, r0]
 800f020:	18c0      	addlt	r0, r0, r3
 800f022:	4770      	bx	lr

0800f024 <_init>:
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f026:	bf00      	nop
 800f028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02a:	bc08      	pop	{r3}
 800f02c:	469e      	mov	lr, r3
 800f02e:	4770      	bx	lr

0800f030 <_fini>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	bf00      	nop
 800f034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f036:	bc08      	pop	{r3}
 800f038:	469e      	mov	lr, r3
 800f03a:	4770      	bx	lr
