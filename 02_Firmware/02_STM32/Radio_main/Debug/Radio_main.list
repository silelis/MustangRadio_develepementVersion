
Radio_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145c4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08014878  08014878  00015878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015754  08015754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801575c  0801575c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015760  08015760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08015764  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004da8  240001dc  08015940  000171dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004f84  08015940  00017f84  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000171dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033a52  00000000  00000000  0001720a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006974  00000000  00000000  0004ac5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002070  00000000  00000000  000515d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001904  00000000  00000000  00053640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6ae  00000000  00000000  00054f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f649  00000000  00000000  0008f5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152fe3  00000000  00000000  000bec3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00211c1e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b9c  00000000  00000000  00211c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  0021b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801485c 	.word	0x0801485c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0801485c 	.word	0x0801485c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <_Z18calculate_checksumPKvj>:
 * size_t length - długość bufora (z uwzględnieniem pola na wartość
 *                     CRC) z ktorego należy wyliczyć sume kontrolną.                 
 * Returns:
 * NONE
 *---------------------------------------------------------------*/
uint8_t calculate_checksum(const void *buffer, size_t length) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	const size_t bufferOffset = 1;        //In my solution bufferOffset is required because 1st 8 bits of buffer is uint8_t CRC field
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
	const uint8_t *data = (const uint8_t *)buffer;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60bb      	str	r3, [r7, #8]
	// Zwraca 0 gdy CRC jest ustawione na NONE
	return 0;

#elif I2C_SLAVE_CRC_METHOD == I2C_SLAVE_CRC_XOR
	// Oblicza sumę kontrolną metodą XOR
	uint8_t checksum = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0 + bufferOffset; i < length; i++) {
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e009      	b.n	8000aa8 <_Z18calculate_checksumPKvj+0x30>
		checksum ^= data[i];
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0 + bufferOffset; i < length; i++) {
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f1      	bcc.n	8000a94 <_Z18calculate_checksumPKvj+0x1c>
	}
	return checksum;
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
	return crc;

#else
#error "Nieprawidłowa metoda CRC ustawiona w I2C_SLAVE_CRC_METHOD"
#endif
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster>:
 * @return [NONE]
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
esp32_i2cComunicationDriver::esp32_i2cComunicationDriver(i2cMaster* pointer_to_i2cMasterObject) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	4a1f      	ldr	r2, [pc, #124]	@ (8000b48 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x88>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	223c      	movs	r2, #60	@ 0x3c
 8000ad4:	711a      	strb	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x8c>)
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2215      	movs	r2, #21
 8000ae0:	731a      	strb	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	81da      	strh	r2, [r3, #14]
	// TODO Auto-generated constructor stub
		this->pi2cMaster = pointer_to_i2cMasterObject;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	611a      	str	r2, [r3, #16]
		configASSERT(this->esp32IntrrruptRequest_CountingSemaphore = xSemaphoreCreateCounting(this->esp32InterruptRequestCountingSemaphore_MAX, 0));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00c fb80 	bl	800d1fa <xQueueCreateCountingSemaphore>
 8000afa:	4602      	mov	r2, r0
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b16:	f383 8811 	msr	BASEPRI, r3
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	f3bf 8f4f 	dsb	sy
 8000b22:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	e7fd      	b.n	8000b26 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster+0x66>
		this->esp32DynamicmMemeoryAlocationError=this->esp32InrerruptRequest_CountingSemaphoreOverflowError=pdFALSE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	61da      	str	r2, [r3, #28]
		this->esp32CrcSumCounterError=0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	841a      	strh	r2, [r3, #32]
}
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	0801529c 	.word	0x0801529c
 8000b4c:	08014878 	.word	0x08014878

08000b50 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh>:
 * kontrolnej, dlatego metoda liczy sume kontrolną od drugiego byte'u.
 * @warning i2cFrame_transmitQueue nie zawiera otrzymanych danych tylko
 * informacje na temat otrzymanych danych i miejsce (wskaźnik) ich
 * przechowywania w RAM.
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::isCrcSumCorreect(i2cFrame_transmitQueue I2CReceivedFrame, uint8_t	crcSum){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	4638      	mov	r0, r7
 8000b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(crcSum==calculate_checksum(I2CReceivedFrame.pData, sizeof(i2cFrame_keyboardFrame)))
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2105      	movs	r1, #5
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff88 	bl	8000a78 <_Z18calculate_checksumPKvj>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	7e3b      	ldrb	r3, [r7, #24]
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x36>
	{
		this->esp32CrcSumCounterError=0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	841a      	strh	r2, [r3, #32]
		return pdPASS;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x54>
	}
	else{
		this->esp32CrcSumCounterError++;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	8c1b      	ldrh	r3, [r3, #32]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	841a      	strh	r2, [r3, #32]
		printf("%sCRC sum NOT correct: %d time(s)\r\n", this->TAG, this->esp32CrcSumCounterError);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6899      	ldr	r1, [r3, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	8c1b      	ldrh	r3, [r3, #32]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh+0x5c>)
 8000b9e:	f010 fb07 	bl	80111b0 <iprintf>
		return pdFAIL;
 8000ba2:	2300      	movs	r3, #0
	}
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	08014898 	.word	0x08014898

08000bb0 <_ZN27esp32_i2cComunicationDriver4pingEv>:
 *
 * @note   W praktyce metoda ta jest odwołaniem do funkcji
 * 			HAL_I2C_GetState
 * @warning NONE
 *******************************************************************/
HAL_StatusTypeDef esp32_i2cComunicationDriver::ping(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	this->i2cMasterSemaphoreTake();
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f8a1 	bl	8000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>
	this->pi2cMaster->while_I2C_STATE_READY();
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa26 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	retVal = this->pi2cMaster->ping(this->esp32i2cSlaveAdress_7bit);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	791b      	ldrb	r3, [r3, #4]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f000 f9aa 	bl	8000f2c <_ZN9i2cMaster4pingEt>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
	this->i2cMasterSemaphoreGive();
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f89d 	bl	8000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>
	return retVal;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>:
 * 			danych dekrementuje semafor zliczający. Dodatkowo gdy zemafor
 * 			jest pusty to wymusza to uśpienie tasku obsługującego odczyt
 * 			danych.
 * @warning [NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::incrementInterruptRequestCountingSemaphore(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(this->esp32IntrrruptRequest_CountingSemaphore, &xHigherPriorityTaskWoken);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f107 020c 	add.w	r2, r7, #12
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00c fcce 	bl	800d5a4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d007      	beq.n	8000c1e <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x32>
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv+0x3c>)
 8000c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	f3bf 8f4f 	dsb	sy
 8000c1a:	f3bf 8f6f 	isb	sy
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000ed04 	.word	0xe000ed04

08000c2c <_ZN27esp32_i2cComunicationDriverD1Ev>:




esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <_ZN27esp32_i2cComunicationDriverD1Ev+0x1c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	#warning zrobic porzadny destruktor np. w destruktorze ma wyłączy ć się radio
}
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	0801529c 	.word	0x0801529c

08000c4c <_ZN27esp32_i2cComunicationDriverD0Ev>:
esp32_i2cComunicationDriver::~esp32_i2cComunicationDriver() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
}
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ffe9 	bl	8000c2c <_ZN27esp32_i2cComunicationDriverD1Ev>
 8000c5a:	2124      	movs	r1, #36	@ 0x24
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f00f fa87 	bl	8010170 <_ZdlPvj>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv>:
 * @return NONE
 *
 * @note   	NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::isCountingSemaphoreOverflowed(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if( uxSemaphoreGetCount(this->esp32IntrrruptRequest_CountingSemaphore)== this->esp32InterruptRequestCountingSemaphore_MAX){		//sprawdza czy licznik esp32 interrupt request nie jest przepełniony
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00c ff15 	bl	800daa8 <uxQueueMessagesWaiting>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7b1b      	ldrb	r3, [r3, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bf0c      	ite	eq
 8000c88:	2301      	moveq	r3, #1
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv+0x32>
		this->esp32InrerruptRequest_CountingSemaphoreOverflowError= pdTRUE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	619a      	str	r2, [r3, #24]
		printf("!!! ESP32 interrupt request counter overflowed   !!!\r\n");
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv+0x3c>)
 8000c9a:	f010 faf1 	bl	8011280 <puts>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	080148bc 	.word	0x080148bc

08000cac <_ZN27esp32_i2cComunicationDriver32semaphoreTake__CountingSemaphoreEv>:
 *
 * @param  [NONE
 *
 * @return NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::semaphoreTake__CountingSemaphore(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->esp32IntrrruptRequest_CountingSemaphore, portMAX_DELAY) == pdTRUE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00c fde3 	bl	800d888 <xQueueSemaphoreTake>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>:
 * 			HAL_I2C_Master_Receive_DMA
 *
 * @note	NONE
 * @warning	NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::masterReceiveFromESP32_DMA(uint8_t *pData, uint16_t Size){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	80fb      	strh	r3, [r7, #6]
	return this->pi2cMaster->I2C_Master_Receive_DMA(this->esp32i2cSlaveAdress_7bit, pData, Size);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6918      	ldr	r0, [r3, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	4619      	mov	r1, r3
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	f000 f9a6 	bl	8001042 <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>
 8000cf6:	4603      	mov	r3, r0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>:
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreTake
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreTake(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreTake();
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f8ed 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
 8000d12:	4603      	mov	r3, r0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>:
 * @return [BaseType_t] Zwraca wartośc funkcji xSemaphoreGive
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t esp32_i2cComunicationDriver::i2cMasterSemaphoreGive(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	return this->pi2cMaster->i2cMasterSemaphoreGive();
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f8ef 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::while_I2C_STATE_READY(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	pi2cMaster->while_I2C_STATE_READY();
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f965 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::seteDynamicmMemeoryAlocationError(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	this->esp32DynamicmMemeoryAlocationError=pdTRUE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
	printf("error with memory allocation\r\n");
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv+0x1c>)
 8000d64:	f010 fa8c 	bl	8011280 <puts>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	080148f4 	.word	0x080148f4

08000d74 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue>:
 * @return NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void esp32_i2cComunicationDriver::parseReceivedData(i2cFrame_transmitQueue I2CReceivedFrame){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2cFrame_commonHeader tempI2cFrameCommandHeader;														//tymczasowa zmienna, do któej będa kopiowane otrzymane dane (aby zawsze uzyskać sumę crc z prawidłowego miejsca, nawert jeśli zmieni się typredef i2cFrame_commonHeader)
	memcpy(&tempI2cFrameCommandHeader, I2CReceivedFrame.pData, sizeof(i2cFrame_commonHeader));				//kopiowanie danych z otrzymanego bufora do zmiennej tymczasowej
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	8811      	ldrh	r1, [r2, #0]
 8000d8a:	7892      	ldrb	r2, [r2, #2]
 8000d8c:	8019      	strh	r1, [r3, #0]
 8000d8e:	709a      	strb	r2, [r3, #2]
	if(this->isCrcSumCorreect(I2CReceivedFrame, tempI2cFrameCommandHeader.crcSum))
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	463b      	mov	r3, r7
 8000d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fed9 	bl	8000b50 <_ZN27esp32_i2cComunicationDriver16isCrcSumCorreectE22i2cFrame_transmitQueueh>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d016      	beq.n	8000ddc <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x68>
	{
		switch(tempI2cFrameCommandHeader.commandGroup){
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x4c>

		case I2C_COMMAND_GROUP_KEYBOARD:
			parserFunction::keyboardToRadioMeny((i2cFrame_keyboardFrame*)I2CReceivedFrame.pData);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f81c 	bl	8000df4 <_ZN14parserFunction19keyboardToRadioMenyEP22i2cFrame_keyboardFrame>
			break;
 8000dbc:	bf00      	nop
		default:
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
			assert(0);
		}
	}
}
 8000dbe:	e00d      	b.n	8000ddc <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x68>
			printf("%sunknown commandGroup value:0x%x\r\n",this->TAG, tempI2cFrameCommandHeader.commandGroup);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	7d7a      	ldrb	r2, [r7, #21]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x70>)
 8000dca:	f010 f9f1 	bl	80111b0 <iprintf>
			assert(0);
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x74>)
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x78>)
 8000dd2:	f240 1119 	movw	r1, #281	@ 0x119
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue+0x7c>)
 8000dd8:	f00f f9f6 	bl	80101c8 <__assert_func>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	08014914 	.word	0x08014914
 8000de8:	08014938 	.word	0x08014938
 8000dec:	0801493c 	.word	0x0801493c
 8000df0:	08014988 	.word	0x08014988

08000df4 <_ZN14parserFunction19keyboardToRadioMenyEP22i2cFrame_keyboardFrame>:

#include "SileliS_code/radioMenu.h"

extern radioMenu* pRadioMenu;		//from tasksFunctions.cpp
namespace parserFunction{
	void keyboardToRadioMeny(i2cFrame_keyboardFrame* kbrdFrame){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
		pRadioMenu->queueRadioMenuKbrdSend(kbrdFrame->keyboardData.array);
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <_ZN14parserFunction19keyboardToRadioMenyEP22i2cFrame_keyboardFrame+0x20>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3303      	adds	r3, #3
 8000e04:	4619      	mov	r1, r3
 8000e06:	4610      	mov	r0, r2
 8000e08:	f000 fc92 	bl	8001730 <_ZN9radioMenu22queueRadioMenuKbrdSendEPKv>
	}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2400020c 	.word	0x2400020c

08000e18 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>:
 */

//#include <i2cEngine.h>
#include "SileliS_code/i2cEngine.h"

i2cMaster::i2cMaster(I2C_HandleTypeDef *hi2c1) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xbc>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc0>)
 8000e2c:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub
	this->p_hi2c1 =hi2c1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	609a      	str	r2, [r3, #8]
	this->pReceiveQueueObject = NULL;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
	configASSERT(this->pReceiveQueueObject = new i2cQueue4DynamicData(DEFAULT_RECEIVE_QUEUE_SIZE));
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f00f f99e 	bl	801017c <_Znwj>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461c      	mov	r4, r3
 8000e44:	2119      	movs	r1, #25
 8000e46:	4620      	mov	r0, r4
 8000e48:	f000 f916 	bl	8001078 <_ZN20i2cQueue4DynamicDataC1Em>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	605c      	str	r4, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf0c      	ite	eq
 8000e58:	2301      	moveq	r3, #1
 8000e5a:	2300      	movne	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x62>
	__asm volatile
 8000e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e66:	f383 8811 	msr	BASEPRI, r3
 8000e6a:	f3bf 8f6f 	isb	sy
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	60fb      	str	r3, [r7, #12]
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	e7fd      	b.n	8000e76 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x5e>

//	this->esp32InterruptCounterOverflow =pdFALSE;		//reset interrupt counter overflow indicator
	assert(this->handle_i2cBinarySemaphore = xSemaphoreCreateBinary());
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f00c f95d 	bl	800d13e <xQueueGenericCreate>
 8000e84:	4602      	mov	r2, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0x86>
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc4>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xc8>)
 8000e96:	2112      	movs	r1, #18
 8000e98:	4812      	ldr	r0, [pc, #72]	@ (8000ee4 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xcc>)
 8000e9a:	f00f f995 	bl	80101c8 <__assert_func>
	this->i2cMasterSemaphoreGive();
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f834 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	this->i2cMasterSemaphoreTake();
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f821 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(p_hi2c1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 ff90 	bl	8005dd4 <HAL_I2C_DeInit>
	MX_I2C1_Init();
 8000eb4:	f000 ff50 	bl	8001d58 <MX_I2C1_Init>
	//vTaskDelay(pdMS_TO_TICKS(1000));
	printf("%s bus had been initialized.\r\n",this->TAG);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef+0xd0>)
 8000ec0:	f010 f976 	bl	80111b0 <iprintf>
	this->i2cMasterSemaphoreGive();
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f821 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
}
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	080152ac 	.word	0x080152ac
 8000ed8:	080149c0 	.word	0x080149c0
 8000edc:	080149d0 	.word	0x080149d0
 8000ee0:	08014a0c 	.word	0x08014a0c
 8000ee4:	08014a38 	.word	0x08014a38
 8000ee8:	08014a60 	.word	0x08014a60

08000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreTake(void){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(this->handle_i2cBinarySemaphore, portMAX_DELAY);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00c fcc3 	bl	800d888 <xQueueSemaphoreTake>
 8000f02:	4603      	mov	r3, r0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>:

BaseType_t i2cMaster::i2cMasterSemaphoreGive(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	return xSemaphoreGive(this->handle_i2cBinarySemaphore);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6918      	ldr	r0, [r3, #16]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f00c f9a1 	bl	800d264 <xQueueGenericSend>
 8000f22:	4603      	mov	r3, r0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN9i2cMaster4pingEt>:

HAL_StatusTypeDef i2cMaster::ping(uint16_t DevAddress_7bit){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef retVal;
	retVal = HAL_I2C_IsDeviceReady(this->p_hi2c1, DevAddress_7bit<<1, 100, 1000);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	b299      	uxth	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	2264      	movs	r2, #100	@ 0x64
 8000f48:	f005 f864 	bl	8006014 <HAL_I2C_IsDeviceReady>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	if(retVal==HAL_OK){
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <_ZN9i2cMaster4pingEt+0x3a>
			printf("%s i2c slave avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <_ZN9i2cMaster4pingEt+0x60>)
 8000f60:	f010 f926 	bl	80111b0 <iprintf>
 8000f64:	e00c      	b.n	8000f80 <_ZN9i2cMaster4pingEt+0x54>
	}
	else{
		printf("%s i2c slave NOT avaliable on address: 0x%x (7bit).\r\n", this->TAG, DevAddress_7bit/*<<1*/);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <_ZN9i2cMaster4pingEt+0x64>)
 8000f70:	f010 f91e 	bl	80111b0 <iprintf>
		assert(0);
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <_ZN9i2cMaster4pingEt+0x68>)
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <_ZN9i2cMaster4pingEt+0x6c>)
 8000f78:	212c      	movs	r1, #44	@ 0x2c
 8000f7a:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <_ZN9i2cMaster4pingEt+0x70>)
 8000f7c:	f00f f924 	bl	80101c8 <__assert_func>
	}
	return retVal;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08014a80 	.word	0x08014a80
 8000f90:	08014ab4 	.word	0x08014ab4
 8000f94:	08014aec 	.word	0x08014aec
 8000f98:	08014af0 	.word	0x08014af0
 8000f9c:	08014a38 	.word	0x08014a38

08000fa0 <_ZN9i2cMasterD1Ev>:

i2cMaster::~i2cMaster() {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <_ZN9i2cMasterD1Ev+0x50>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	this->i2cMasterSemaphoreTake();
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff9c 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	HAL_I2C_DeInit(this->p_hi2c1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 ff0b 	bl	8005dd4 <HAL_I2C_DeInit>
	this->p_hi2c1 = NULL;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
	delete this->pReceiveQueueObject;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685c      	ldr	r4, [r3, #4]
 8000fc8:	2c00      	cmp	r4, #0
 8000fca:	d006      	beq.n	8000fda <_ZN9i2cMasterD1Ev+0x3a>
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f000 f87d 	bl	80010cc <_ZN20i2cQueue4DynamicDataD1Ev>
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f00f f8cb 	bl	8010170 <_ZdlPvj>
	vSemaphoreDelete(this->handle_i2cBinarySemaphore);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00c fd81 	bl	800dae6 <vQueueDelete>
}
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	080152ac 	.word	0x080152ac

08000ff4 <_ZN9i2cMasterD0Ev>:
i2cMaster::~i2cMaster() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
}
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffcf 	bl	8000fa0 <_ZN9i2cMasterD1Ev>
 8001002:	2114      	movs	r1, #20
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f00f f8b3 	bl	8010170 <_ZdlPvj>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>:

void i2cMaster::while_I2C_STATE_READY(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	while(HAL_I2C_GetState(this->p_hi2c1)!= HAL_I2C_STATE_READY){};
 800101c:	bf00      	nop
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f005 f9bf 	bl	80063a6 <HAL_I2C_GetState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b20      	cmp	r3, #32
 800102c:	bf14      	ite	ne
 800102e:	2301      	movne	r3, #1
 8001030:	2300      	moveq	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f2      	bne.n	800101e <_ZN9i2cMaster21while_I2C_STATE_READYEv+0xa>
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN9i2cMaster22I2C_Master_Receive_DMAEtPht>:

HAL_StatusTypeDef i2cMaster::I2C_Master_Receive_DMA(uint16_t DevAddress_7bit, uint8_t *pData, uint16_t Size){
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	461a      	mov	r2, r3
 800104e:	460b      	mov	r3, r1
 8001050:	817b      	strh	r3, [r7, #10]
 8001052:	4613      	mov	r3, r2
 8001054:	813b      	strh	r3, [r7, #8]
	this->while_I2C_STATE_READY();
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff ffdc 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	return HAL_I2C_Master_Receive_DMA(this->p_hi2c1, DevAddress_7bit<<1, pData, Size);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b299      	uxth	r1, r3
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	f004 fee3 	bl	8005e34 <HAL_I2C_Master_Receive_DMA>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZN20i2cQueue4DynamicDataC1Em>:
 * @retval NONE
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
i2cQueue4DynamicData::i2cQueue4DynamicData(UBaseType_t uxQueueLength)
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
{
	this->handler_Queue = NULL;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
	configASSERT(this->handler_Queue = xQueueCreate(uxQueueLength, sizeof(i2cFrame_transmitQueue)));
 8001088:	2200      	movs	r2, #0
 800108a:	210c      	movs	r1, #12
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f00c f856 	bl	800d13e <xQueueGenericCreate>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf0c      	ite	eq
 80010a0:	2301      	moveq	r3, #1
 80010a2:	2300      	movne	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <_ZN20i2cQueue4DynamicDataC1Em+0x4a>
	__asm volatile
 80010aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ae:	f383 8811 	msr	BASEPRI, r3
 80010b2:	f3bf 8f6f 	isb	sy
 80010b6:	f3bf 8f4f 	dsb	sy
 80010ba:	60fb      	str	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	e7fd      	b.n	80010be <_ZN20i2cQueue4DynamicDataC1Em+0x46>
}
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN20i2cQueue4DynamicDataD1Ev>:
 * 		   Indormacja o adresach tych danych zawarta jest w poli
 * 		   *pDataposzczególnych elementów trzymanych w
 * 		   i2cFrame_transmitQueue
 * @warning NONE
 *******************************************************************/
i2cQueue4DynamicData::~i2cQueue4DynamicData(void)
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
{
	i2cFrame_transmitQueue tempItemToDestrouQueue;
	BaseType_t tempQueueRetVal;
	do
	{
		tempQueueRetVal = xQueueReceive(this->handler_Queue, &tempItemToDestrouQueue, pdMS_TO_TICKS(1));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f107 0108 	add.w	r1, r7, #8
 80010dc:	2201      	movs	r2, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f00c faf0 	bl	800d6c4 <xQueueReceive>
 80010e4:	6178      	str	r0, [r7, #20]
		if (tempQueueRetVal == pdPASS)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <_ZN20i2cQueue4DynamicDataD1Ev+0x2c>
		{
			this->QueueDeleteDataFromPointer(tempItemToDestrouQueue);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f80d 	bl	8001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		}			
	} while (tempQueueRetVal == pdPASS);
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d0ea      	beq.n	80010d4 <_ZN20i2cQueue4DynamicDataD1Ev+0x8>
	vQueueDelete(this->handler_Queue);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f00c fcef 	bl	800dae6 <vQueueDelete>
}
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>:
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
void i2cQueue4DynamicData::QueueDeleteDataFromPointer(i2cFrame_transmitQueue structWithPointer)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	4638      	mov	r0, r7
 800111c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	delete[] static_cast<char*>(structWithPointer.pData);	
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue+0x1c>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4618      	mov	r0, r3
 800112a:	f00f f823 	bl	8010174 <_ZdaPv>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZN20i2cQueue4DynamicData12QueueReceiveEP22i2cFrame_transmitQueuem>:
 *
 * @note   NONE
 * @warning NONE
 *******************************************************************/
BaseType_t  i2cQueue4DynamicData::QueueReceive(/*void*/i2cFrame_transmitQueue * /*const*/ pvBuffer, TickType_t xTicksToWait)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	
	return xQueueReceive(this->handler_Queue, pvBuffer, xTicksToWait);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	4618      	mov	r0, r3
 800114c:	f00c faba 	bl	800d6c4 <xQueueReceive>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue>:
 * @warning W przypadku, gdy nie udąło się zapisać i2cFrame_transmitQueue
 * 			w kolejce następuje automatyczne zniszczenie lokowanych
 * 			dynamicznie danych, kóre są pod adresem *pData. Dane te to dane
 * 			jakie sąw ysyłane przez slave po i2c bus.
 *******************************************************************/
BaseType_t i2cQueue4DynamicData::QueueSend(/*const*/ /*void*/i2cFrame_transmitQueue * pvItemToQueue){
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
	if (xQueueSend(this->handler_Queue, pvItemToQueue, pdMS_TO_TICKS(700)) == pdTRUE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	f00c f878 	bl	800d264 <xQueueGenericSend>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue+0x2e>
	{
		return pdTRUE;
 8001184:	2301      	movs	r3, #1
 8001186:	e005      	b.n	8001194 <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue+0x3a>
	}
	else
	{
		this->QueueDeleteDataFromPointer(*pvItemToQueue);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffc0 	bl	8001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
		//delete[] static_cast<char*>(pointerToData);
		return pdFALSE;
 8001192:	2300      	movs	r3, #0
	}
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN8menuItemC1EPKch>:

#include "SileliS_code/menuItem.h"



menuItem::menuItem(const char* tag, uint8_t execFunctionArraySize) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	71fb      	strb	r3, [r7, #7]
	if (execFunctionArraySize<= UINT8_MAX){
		this->mI_TAG = tag;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	601a      	str	r2, [r3, #0]

		this->Init= nullptr;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
		this->deInit = nullptr;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]

		this->pExecutableButtons = nullptr;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
		this->create_pExecutableButtonsArray(execFunctionArraySize);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4619      	mov	r1, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f826 	bl	8001218 <_ZN8menuItem30create_pExecutableButtonsArrayEh>
		printf("%s: menuItem with %d executable buttons had been created. Please append functiond.\r\n", this->mI_TAG, this->execFunctionArrySize);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7a1b      	ldrb	r3, [r3, #8]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <_ZN8menuItemC1EPKch+0x4c>)
 80011d8:	f00f ffea 	bl	80111b0 <iprintf>
	}
};
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08014b1c 	.word	0x08014b1c

080011ec <_ZN8menuItem30delete_pExecutableButtonsArrayEv>:

void menuItem::delete_pExecutableButtonsArray(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if (this->pExecutableButtons!=nullptr)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <_ZN8menuItem30delete_pExecutableButtonsArrayEv+0x22>
		delete [] pExecutableButtons;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <_ZN8menuItem30delete_pExecutableButtonsArrayEv+0x22>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f00e ffb3 	bl	8010174 <_ZdaPv>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <_ZN8menuItem30create_pExecutableButtonsArrayEh>:


bool menuItem::create_pExecutableButtonsArray(uint8_t arraySize){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	this->pExecutableButtons = new execute_t[arraySize];
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800122a:	d201      	bcs.n	8001230 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x18>
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	e001      	b.n	8001234 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x1c>
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	4618      	mov	r0, r3
 8001236:	f00e ffb2 	bl	801019e <_Znaj>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
	assert(this->pExecutableButtons);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x3e>
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x70>)
 800124c:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x74>)
 800124e:	2121      	movs	r1, #33	@ 0x21
 8001250:	480f      	ldr	r0, [pc, #60]	@ (8001290 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x78>)
 8001252:	f00e ffb9 	bl	80101c8 <__assert_func>
	if (this->pExecutableButtons){
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00f      	beq.n	800127e <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x66>
		memset(this->pExecutableButtons, 0, sizeof(execute_t)*arraySize);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6858      	ldr	r0, [r3, #4]
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	461a      	mov	r2, r3
 8001268:	2100      	movs	r1, #0
 800126a:	f010 f909 	bl	8011480 <memset>
		this->execFunctionArrySize=arraySize;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	721a      	strb	r2, [r3, #8]
		this->execFunctionArryAppended = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	725a      	strb	r2, [r3, #9]
		return true;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <_ZN8menuItem30create_pExecutableButtonsArrayEh+0x68>
	}
	return false;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08014b74 	.word	0x08014b74
 800128c:	08014b90 	.word	0x08014b90
 8001290:	08014bc8 	.word	0x08014bc8

08001294 <_ZN8menuItemD1Ev>:

void menuItem::mI_executeDeInit(void){
	this->executeFunctionPointer(this->deInit);
}

menuItem::~menuItem(){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	this->delete_pExecutableButtonsArray();
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffa5 	bl	80011ec <_ZN8menuItem30delete_pExecutableButtonsArrayEv>
}
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZN6myListC1EP10ListHeaderPKch>:
//myList* myList::head = nullptr;
//myList* myList::currentListNode = nullptr;
//uint8_t myList::indexCounter = 0;

// Konstruktor
myList::myList(ListHeader* pointerListHeader, const char* nodeName, uint8_t execFunctionArraySize)
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	70fb      	strb	r3, [r7, #3]
    : menuItem(nodeName, execFunctionArraySize) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff6b 	bl	800119c <_ZN8menuItemC1EPKch>
	this->pListHeader = pointerListHeader;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	61da      	str	r2, [r3, #28]

	//this->pListHeader->indexCounter++;

	if (this->pListHeader->head==nullptr){
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <_ZN6myListC1EP10ListHeaderPKch+0x32>
		this->pListHeader->head=this;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	601a      	str	r2, [r3, #0]
	}
	nextListNode=nullptr;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
	//currentListNode=this;
	this->pListHeader->indexCounter++;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	7a1a      	ldrb	r2, [r3, #8]
 80012ea:	3201      	adds	r2, #1
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	721a      	strb	r2, [r3, #8]
	//indexCounter++;
	this->index = this->pListHeader->indexCounter;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	7a1a      	ldrb	r2, [r3, #8]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	761a      	strb	r2, [r3, #24]
	assert(this);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <_ZN6myListC1EP10ListHeaderPKch+0x60>
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <_ZN6myListC1EP10ListHeaderPKch+0x6c>)
 8001302:	4a06      	ldr	r2, [pc, #24]	@ (800131c <_ZN6myListC1EP10ListHeaderPKch+0x70>)
 8001304:	2117      	movs	r1, #23
 8001306:	4806      	ldr	r0, [pc, #24]	@ (8001320 <_ZN6myListC1EP10ListHeaderPKch+0x74>)
 8001308:	f00e ff5e 	bl	80101c8 <__assert_func>
}
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	08014d24 	.word	0x08014d24
 800131c:	08014d2c 	.word	0x08014d2c
 8001320:	08014d60 	.word	0x08014d60

08001324 <_ZN6myListD1Ev>:


// Destruktor
myList::~myList() {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
//	if(head==nullptr)
//		return;
}
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffb0 	bl	8001294 <_ZN8menuItemD1Ev>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <_ZN6myList8addAtEndEPKch>:
    this->pListHeader->currentListNode = newNode; // Ustawienie current na nowo dodany element
    renumberNodes();
}

// Dodanie elementu na końcu listy
void myList::addAtEnd(const char* nodeName, uint8_t execFunctionArraySize) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	4613      	mov	r3, r2
 800134c:	71fb      	strb	r3, [r7, #7]
    if (!canAddItem()) return;
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f896 	bl	8001480 <_ZNK6myList10canAddItemEv>
 8001354:	4603      	mov	r3, r0
 8001356:	f083 0301 	eor.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d136      	bne.n	80013ce <_ZN6myList8addAtEndEPKch+0x8e>

    myList* newNode;// = new myList(nodeName, execFunctionArraySize);
    assert(newNode = new myList(pListHeader, nodeName, execFunctionArraySize));
 8001360:	2020      	movs	r0, #32
 8001362:	f00e ff0b 	bl	801017c <_Znwj>
 8001366:	4603      	mov	r3, r0
 8001368:	461c      	mov	r4, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	69d9      	ldr	r1, [r3, #28]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff9a 	bl	80012ac <_ZN6myListC1EP10ListHeaderPKch>
 8001378:	613c      	str	r4, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <_ZN6myList8addAtEndEPKch+0x4c>
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_ZN6myList8addAtEndEPKch+0x98>)
 8001382:	4a16      	ldr	r2, [pc, #88]	@ (80013dc <_ZN6myList8addAtEndEPKch+0x9c>)
 8001384:	2131      	movs	r1, #49	@ 0x31
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <_ZN6myList8addAtEndEPKch+0xa0>)
 8001388:	f00e ff1e 	bl	80101c8 <__assert_func>
    if (!this->pListHeader->head) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d104      	bne.n	80013a0 <_ZN6myList8addAtEndEPKch+0x60>
    	this->pListHeader->head = newNode;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e00e      	b.n	80013be <_ZN6myList8addAtEndEPKch+0x7e>
    } else {
        myList* temp = this->pListHeader->head;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	617b      	str	r3, [r7, #20]
        while (temp->nextListNode) {
 80013a8:	e002      	b.n	80013b0 <_ZN6myList8addAtEndEPKch+0x70>
            temp = temp->nextListNode;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	617b      	str	r3, [r7, #20]
        while (temp->nextListNode) {
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f8      	bne.n	80013aa <_ZN6myList8addAtEndEPKch+0x6a>
        }
        temp->nextListNode = newNode;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	615a      	str	r2, [r3, #20]
    }

    this->pListHeader->currentListNode = newNode; // Ustawienie current na nowo dodany element
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
    renumberNodes();
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f83c 	bl	8001444 <_ZN6myList13renumberNodesEv>
 80013cc:	e000      	b.n	80013d0 <_ZN6myList8addAtEndEPKch+0x90>
    if (!canAddItem()) return;
 80013ce:	bf00      	nop
}
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	08014d84 	.word	0x08014d84
 80013dc:	08014dfc 	.word	0x08014dfc
 80013e0:	08014d60 	.word	0x08014d60

080013e4 <_ZN6myList12resetToFirstEv>:

// Resetowanie current do pierwszego elementu listy
void myList::resetToFirst() {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	this->pListHeader->currentListNode = this->pListHeader->head;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	605a      	str	r2, [r3, #4]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_ZNK6myList9printListEv>:
bool myList::isAtEnd() const {
    return this->pListHeader->currentListNode->nextListNode == nullptr;
}

// Wydrukowanie wszystkich elementów listy
void myList::printList() const {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    myList* temp = this->pListHeader->head;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]
    while (temp){
 8001414:	e00b      	b.n	800142e <_ZNK6myList9printListEv+0x2a>
    	printf("Node Index: %d, Name: %s.\r\n", temp->index, temp->mI_TAG);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	7e1b      	ldrb	r3, [r3, #24]
 800141a:	4619      	mov	r1, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4807      	ldr	r0, [pc, #28]	@ (8001440 <_ZNK6myList9printListEv+0x3c>)
 8001424:	f00f fec4 	bl	80111b0 <iprintf>
        //std::cout << "Node Index: " << (int)temp->index << ", Name: " << (temp->name ? temp->name : "Unnamed") << std::endl;
        temp = temp->nextListNode;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	60fb      	str	r3, [r7, #12]
    while (temp){
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <_ZNK6myList9printListEv+0x12>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	08014e48 	.word	0x08014e48

08001444 <_ZN6myList13renumberNodesEv>:
        //std::cout << "No current node." << std::endl;
    }
}

// Renumeracja węzłów listy
void myList::renumberNodes() {
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    myList* temp = this->pListHeader->head;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60fb      	str	r3, [r7, #12]
    uint8_t tempIndex = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	72fb      	strb	r3, [r7, #11]
    while (temp) {
 8001458:	e008      	b.n	800146c <_ZN6myList13renumberNodesEv+0x28>
        temp->index = ++tempIndex;
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	3301      	adds	r3, #1
 800145e:	72fb      	strb	r3, [r7, #11]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	7afa      	ldrb	r2, [r7, #11]
 8001464:	761a      	strb	r2, [r3, #24]
        temp = temp->nextListNode;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	60fb      	str	r3, [r7, #12]
    while (temp) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f3      	bne.n	800145a <_ZN6myList13renumberNodesEv+0x16>
    }
    //indexCounter = index;
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_ZNK6myList10canAddItemEv>:

// Sprawdzanie, czy można dodać element do listy
bool myList::canAddItem() const {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    return this->pListHeader->indexCounter < UINT8_MAX; // Maksymalna wartość uint8_t to 255, więc sprawdzamy, czy jest mniejsza niż 255
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	7a1b      	ldrb	r3, [r3, #8]
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <__io_putchar>:

//#include <printfRedirect.h>
#include <SileliS_code/printfRedirect.h>

//printf to uart redirection
void __io_putchar(uint8_t ch) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 0xffff);
 80014ae:	1df9      	adds	r1, r7, #7
 80014b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014b4:	2201      	movs	r2, #1
 80014b6:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <__io_putchar+0x20>)
 80014b8:	f00a f918 	bl	800b6ec <HAL_UART_Transmit>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	240003a8 	.word	0x240003a8

080014c8 <_ZN10ListHeaderC1Ev>:
struct ListHeader {
    myList* head;                 // Wskaźnik do pierwszego elementu listy
    myList* currentListNode;      // Wskaźnik do aktualnego elementu listy
    uint8_t indexCounter;         // Licznik indeksów

    ListHeader() : head(nullptr), currentListNode(nullptr), indexCounter(0) {}
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	721a      	strb	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_ZN9radioMenuC1Ev>:
 *      Author: dbank
 */

#include <SileliS_code/radioMenu.h>

radioMenu::radioMenu() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <_ZN9radioMenuC1Ev+0xa8>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a26      	ldr	r2, [pc, #152]	@ (800159c <_ZN9radioMenuC1Ev+0xac>)
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	330c      	adds	r3, #12
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ffdd 	bl	80014c8 <_ZN10ListHeaderC1Ev>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3318      	adds	r3, #24
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ffd8 	bl	80014c8 <_ZN10ListHeaderC1Ev>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3324      	adds	r3, #36	@ 0x24
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ffd3 	bl	80014c8 <_ZN10ListHeaderC1Ev>
	queueRadioMenuKbrd = nullptr;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
	configASSERT(queueRadioMenuKbrd = xQueueCreate(20, sizeof(keyboardUnion)));
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	2014      	movs	r0, #20
 800152e:	f00b fe06 	bl	800d13e <xQueueGenericCreate>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <_ZN9radioMenuC1Ev+0x72>
	__asm volatile
 800154a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800154e:	f383 8811 	msr	BASEPRI, r3
 8001552:	f3bf 8f6f 	isb	sy
 8001556:	f3bf 8f4f 	dsb	sy
 800155a:	60fb      	str	r3, [r7, #12]
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <_ZN9radioMenuC1Ev+0x6e>

	this->peripheryDevices = nullptr;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
	this->audioDevices=nullptr;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
	this->radioMainMenu = nullptr;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30


	this->createDeviceMenuList_periphery();
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f859 	bl	800162c <_ZN9radioMenu30createDeviceMenuList_peripheryEv>
	this->createDeviceMenuList_audio();
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f810 	bl	80015a0 <_ZN9radioMenu26createDeviceMenuList_audioEv>
	this->createDeviceMenuList_mainMenu();
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f899 	bl	80016b8 <_ZN9radioMenu29createDeviceMenuList_mainMenuEv>

	this->setCurrentDeviceMenu_audio();
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8c4 	bl	8001714 <_ZN9radioMenu26setCurrentDeviceMenu_audioEv>
}
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	080152bc 	.word	0x080152bc
 800159c:	08014e9c 	.word	0x08014e9c

080015a0 <_ZN9radioMenu26createDeviceMenuList_audioEv>:

void radioMenu::createDeviceMenuList_audio(void){
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	assert(this->audioDevices = new myList(&(this->ListHeader_audioDevices),"1st audio",5));
 80015a8:	2020      	movs	r0, #32
 80015aa:	f00e fde7 	bl	801017c <_Znwj>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461c      	mov	r4, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f103 010c 	add.w	r1, r3, #12
 80015b8:	2305      	movs	r3, #5
 80015ba:	4a16      	ldr	r2, [pc, #88]	@ (8001614 <_ZN9radioMenu26createDeviceMenuList_audioEv+0x74>)
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff fe75 	bl	80012ac <_ZN6myListC1EP10ListHeaderPKch>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	639c      	str	r4, [r3, #56]	@ 0x38
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <_ZN9radioMenu26createDeviceMenuList_audioEv+0x3a>
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <_ZN9radioMenu26createDeviceMenuList_audioEv+0x78>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <_ZN9radioMenu26createDeviceMenuList_audioEv+0x7c>)
 80015d2:	211c      	movs	r1, #28
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <_ZN9radioMenu26createDeviceMenuList_audioEv+0x80>)
 80015d6:	f00e fdf7 	bl	80101c8 <__assert_func>
	this->audioDevices->addAtEnd("2nd audio",5);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015de:	2205      	movs	r2, #5
 80015e0:	4910      	ldr	r1, [pc, #64]	@ (8001624 <_ZN9radioMenu26createDeviceMenuList_audioEv+0x84>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff feac 	bl	8001340 <_ZN6myList8addAtEndEPKch>
	this->audioDevices->addAtEnd("3rd audio",5);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ec:	2205      	movs	r2, #5
 80015ee:	490e      	ldr	r1, [pc, #56]	@ (8001628 <_ZN9radioMenu26createDeviceMenuList_audioEv+0x88>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fea5 	bl	8001340 <_ZN6myList8addAtEndEPKch>

	//todo: tutaj zamiast ustawiania pierwszego urządzenia powinno by ć zapamiętywanie, któe urządzenie było ustawione, a jeśli inicjalizacja to pierwsze
	this->peripheryDevices->resetToFirst();
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fef2 	bl	80013e4 <_ZN6myList12resetToFirstEv>
	//this->audioDevices->moveToEnd();
	//this->audioDevices->moveToNextInLoop();
	this->audioDevices->printList();
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fefd 	bl	8001404 <_ZNK6myList9printListEv>

	//this->setCurrentDeviceMenu_audio();
	//this->curretDevice->printCurrent();
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	08014eac 	.word	0x08014eac
 8001618:	08014eb8 	.word	0x08014eb8
 800161c:	08014f08 	.word	0x08014f08
 8001620:	08014f38 	.word	0x08014f38
 8001624:	08014f60 	.word	0x08014f60
 8001628:	08014f6c 	.word	0x08014f6c

0800162c <_ZN9radioMenu30createDeviceMenuList_peripheryEv>:




void radioMenu::createDeviceMenuList_periphery(void){
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	assert(this->peripheryDevices = new myList(&(this->ListHeader_peripheryDevices),"1st periph",3));
 8001634:	2020      	movs	r0, #32
 8001636:	f00e fda1 	bl	801017c <_Znwj>
 800163a:	4603      	mov	r3, r0
 800163c:	461c      	mov	r4, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f103 0118 	add.w	r1, r3, #24
 8001644:	2303      	movs	r3, #3
 8001646:	4a16      	ldr	r2, [pc, #88]	@ (80016a0 <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x74>)
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fe2f 	bl	80012ac <_ZN6myListC1EP10ListHeaderPKch>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	63dc      	str	r4, [r3, #60]	@ 0x3c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x3a>
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x78>)
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x7c>)
 800165e:	212f      	movs	r1, #47	@ 0x2f
 8001660:	4812      	ldr	r0, [pc, #72]	@ (80016ac <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x80>)
 8001662:	f00e fdb1 	bl	80101c8 <__assert_func>
	this->peripheryDevices->addAtEnd("2nd periph",3);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166a:	2203      	movs	r2, #3
 800166c:	4910      	ldr	r1, [pc, #64]	@ (80016b0 <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x84>)
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fe66 	bl	8001340 <_ZN6myList8addAtEndEPKch>
	this->peripheryDevices->addAtEnd("3rd periph",3);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001678:	2203      	movs	r2, #3
 800167a:	490e      	ldr	r1, [pc, #56]	@ (80016b4 <_ZN9radioMenu30createDeviceMenuList_peripheryEv+0x88>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fe5f 	bl	8001340 <_ZN6myList8addAtEndEPKch>

	this->peripheryDevices->resetToFirst();
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff feac 	bl	80013e4 <_ZN6myList12resetToFirstEv>
	this->peripheryDevices->printList();
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff feb7 	bl	8001404 <_ZNK6myList9printListEv>
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	08014f78 	.word	0x08014f78
 80016a4:	08014f84 	.word	0x08014f84
 80016a8:	08014fe0 	.word	0x08014fe0
 80016ac:	08014f38 	.word	0x08014f38
 80016b0:	08015014 	.word	0x08015014
 80016b4:	08015020 	.word	0x08015020

080016b8 <_ZN9radioMenu29createDeviceMenuList_mainMenuEv>:

void radioMenu::createDeviceMenuList_mainMenu(void){
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

	assert(this->radioMainMenu = new myList(&(this->ListHeader_mainMenu),"MainMenu",5));
 80016c0:	2020      	movs	r0, #32
 80016c2:	f00e fd5b 	bl	801017c <_Znwj>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461c      	mov	r4, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80016d0:	2305      	movs	r3, #5
 80016d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <_ZN9radioMenu29createDeviceMenuList_mainMenuEv+0x4c>)
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff fde9 	bl	80012ac <_ZN6myListC1EP10ListHeaderPKch>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	631c      	str	r4, [r3, #48]	@ 0x30
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <_ZN9radioMenu29createDeviceMenuList_mainMenuEv+0x3a>
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <_ZN9radioMenu29createDeviceMenuList_mainMenuEv+0x50>)
 80016e8:	4a08      	ldr	r2, [pc, #32]	@ (800170c <_ZN9radioMenu29createDeviceMenuList_mainMenuEv+0x54>)
 80016ea:	2139      	movs	r1, #57	@ 0x39
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <_ZN9radioMenu29createDeviceMenuList_mainMenuEv+0x58>)
 80016ee:	f00e fd6b 	bl	80101c8 <__assert_func>
	keyboardUnion buttonSequence;

	//this->radioMainMenu->mI_appendExecFunctionArry(buttonSequence, newFunc);


	this->radioMainMenu->printList();
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe84 	bl	8001404 <_ZNK6myList9printListEv>
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	0801502c 	.word	0x0801502c
 8001708:	08015038 	.word	0x08015038
 800170c:	08015084 	.word	0x08015084
 8001710:	08014f38 	.word	0x08014f38

08001714 <_ZN9radioMenu26setCurrentDeviceMenu_audioEv>:

void radioMenu::setCurrentDeviceMenu_audio(void){
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	this->curretDevice=this->audioDevices;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_ZN9radioMenu22queueRadioMenuKbrdSendEPKv>:
void radioMenu::setCurrentDeviceMenu_periphery(void){
	this->curretDevice=this->peripheryDevices;
}


BaseType_t radioMenu::queueRadioMenuKbrdSend(const void * kbrdUnionSend){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	return xQueueSend(this->queueRadioMenuKbrd, kbrdUnionSend, pdMS_TO_TICKS(700));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6898      	ldr	r0, [r3, #8]
 800173e:	2300      	movs	r3, #0
 8001740:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	f00b fd8d 	bl	800d264 <xQueueGenericSend>
 800174a:	4603      	mov	r3, r0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_ZN9radioMenu25queueRadioMenuKbrdReceiveEP13keyboardUnion>:

BaseType_t radioMenu::queueRadioMenuKbrdReceive(keyboardUnion* kbrdUnionReceived){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	return xQueueReceive(this->queueRadioMenuKbrd, kbrdUnionReceived, portMAX_DELAY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f04f 32ff 	mov.w	r2, #4294967295
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f00b ffab 	bl	800d6c4 <xQueueReceive>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZN9radioMenuD1Ev>:

radioMenu::~radioMenu() {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	4a3c      	ldr	r2, [pc, #240]	@ (8001874 <_ZN9radioMenuD1Ev+0xfc>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
		//vTaskDelete(this->taskHandle_manageTheRadioManue);
		vQueueDelete(queueRadioMenuKbrd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f00c f9ab 	bl	800dae6 <vQueueDelete>

		delete [] this->radioMainMenu;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01e      	beq.n	80017d6 <_ZN9radioMenuD1Ev+0x5e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	3b04      	subs	r3, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	18d4      	adds	r4, r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	429c      	cmp	r4, r3
 80017ae:	d004      	beq.n	80017ba <_ZN9radioMenuD1Ev+0x42>
 80017b0:	3c20      	subs	r4, #32
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff fdb6 	bl	8001324 <_ZN6myListD1Ev>
 80017b8:	e7f6      	b.n	80017a8 <_ZN9radioMenuD1Ev+0x30>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f1a3 0208 	sub.w	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	3b04      	subs	r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	015b      	lsls	r3, r3, #5
 80017cc:	3308      	adds	r3, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f00e fcd1 	bl	8010178 <_ZdaPvj>
		delete [] this->audioDevices;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01e      	beq.n	800181c <_ZN9radioMenuD1Ev+0xa4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e6:	3b04      	subs	r3, #4
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	18d4      	adds	r4, r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f2:	429c      	cmp	r4, r3
 80017f4:	d004      	beq.n	8001800 <_ZN9radioMenuD1Ev+0x88>
 80017f6:	3c20      	subs	r4, #32
 80017f8:	4620      	mov	r0, r4
 80017fa:	f7ff fd93 	bl	8001324 <_ZN6myListD1Ev>
 80017fe:	e7f6      	b.n	80017ee <_ZN9radioMenuD1Ev+0x76>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001804:	f1a3 0208 	sub.w	r2, r3, #8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180c:	3b04      	subs	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	015b      	lsls	r3, r3, #5
 8001812:	3308      	adds	r3, #8
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f00e fcae 	bl	8010178 <_ZdaPvj>
		delete [] this->peripheryDevices;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01e      	beq.n	8001862 <_ZN9radioMenuD1Ev+0xea>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800182c:	3b04      	subs	r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	18d4      	adds	r4, r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	429c      	cmp	r4, r3
 800183a:	d004      	beq.n	8001846 <_ZN9radioMenuD1Ev+0xce>
 800183c:	3c20      	subs	r4, #32
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fd70 	bl	8001324 <_ZN6myListD1Ev>
 8001844:	e7f6      	b.n	8001834 <_ZN9radioMenuD1Ev+0xbc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184a:	f1a3 0208 	sub.w	r2, r3, #8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001852:	3b04      	subs	r3, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	015b      	lsls	r3, r3, #5
 8001858:	3308      	adds	r3, #8
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f00e fc8b 	bl	8010178 <_ZdaPvj>

		//memset(&(this->ListHeader_audioDevices),0,sizeof(ListHeader));
		//memset(&(this->ListHeader_peripheryDevices),0,sizeof(ListHeader));
		//memset(&(this->ListHeader_mainMenu),0,sizeof(ListHeader));
		this->curretDevice=nullptr;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	080152bc 	.word	0x080152bc

08001878 <_ZN9radioMenuD0Ev>:
radioMenu::~radioMenu() {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
}
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff79 	bl	8001778 <_ZN9radioMenuD1Ev>
 8001886:	2140      	movs	r1, #64	@ 0x40
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f00e fc71 	bl	8010170 <_ZdlPvj>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZL35i2cMaster_pReceiveQueueObjectParserPv>:
static esp32_i2cComunicationDriver* pESP32=nullptr; 							//wsyaźnik do obiektu obsługującego komunikację z ESP32
/*static*/ radioMenu* pRadioMenu=nullptr;



static void i2cMaster_pReceiveQueueObjectParser(void *pNothing){
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CReceiveFrame;
	while(1){
		if(pi2cMaster->pReceiveQueueObject->QueueReceive(&tempI2CReceiveFrame, portMAX_DELAY)==pdPASS){
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f107 010c 	add.w	r1, r7, #12
 80018aa:	f04f 32ff 	mov.w	r2, #4294967295
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc41 	bl	8001136 <_ZN20i2cQueue4DynamicData12QueueReceiveEP22i2cFrame_transmitQueuem>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ed      	beq.n	80018a0 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8>
			switch(tempI2CReceiveFrame.slaveDevice7bitAddress)
 80018c4:	7b3b      	ldrb	r3, [r7, #12]
 80018c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80018c8:	d110      	bne.n	80018ec <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x54>
			{
			case I2C_SLAVE_ADDRESS_ESP32:
				pESP32->parseReceivedData(tempI2CReceiveFrame);
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x7c>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d4:	f7ff fa4e 	bl	8000d74 <_ZN27esp32_i2cComunicationDriver17parseReceivedDataE22i2cFrame_transmitQueue>
				break;
 80018d8:	bf00      	nop
			default:
				printf("i2cMaster_pReceiveQueueObjectParser: Unknown i2c slave address: 0x%x (7bit).\r\n", tempI2CReceiveFrame.slaveDevice7bitAddress);
				pi2cMaster->ping(tempI2CReceiveFrame.slaveDevice7bitAddress);
				assert(0);
			}
			pi2cMaster->pReceiveQueueObject->QueueDeleteDataFromPointer(tempI2CReceiveFrame);			//BARDZO WAŻNA FUNKCJA, po parsowaniu otrzymanego z i2c pakiedy danych, który jest przetrzymywany pod zmienną alokowaną dynamicznie niszczy tą zmienną. Ta funkcja, w tym miejscu zapobiega wyciekom pamięci!!!!!
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6858      	ldr	r0, [r3, #4]
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e6:	f7ff fc14 	bl	8001112 <_ZN20i2cQueue4DynamicData26QueueDeleteDataFromPointerE22i2cFrame_transmitQueue>
 80018ea:	e7d9      	b.n	80018a0 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8>
				printf("i2cMaster_pReceiveQueueObjectParser: Unknown i2c slave address: 0x%x (7bit).\r\n", tempI2CReceiveFrame.slaveDevice7bitAddress);
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	@ (8001918 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x80>)
 80018f2:	f00f fc5d 	bl	80111b0 <iprintf>
				pi2cMaster->ping(tempI2CReceiveFrame.slaveDevice7bitAddress);
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x78>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	7b3a      	ldrb	r2, [r7, #12]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fb14 	bl	8000f2c <_ZN9i2cMaster4pingEt>
				assert(0);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x84>)
 8001906:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x88>)
 8001908:	2125      	movs	r1, #37	@ 0x25
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <_ZL35i2cMaster_pReceiveQueueObjectParserPv+0x8c>)
 800190c:	f00e fc5c 	bl	80101c8 <__assert_func>
 8001910:	24000204 	.word	0x24000204
 8001914:	24000208 	.word	0x24000208
 8001918:	080150b4 	.word	0x080150b4
 800191c:	08015104 	.word	0x08015104
 8001920:	08015108 	.word	0x08015108
 8001924:	08015138 	.word	0x08015138

08001928 <_ZL29esp32IntrrruptRequestCallbackPv>:
		};
	}
}

static void esp32IntrrruptRequestCallback(void *pNothing){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	i2cFrame_transmitQueue tempI2CFrameForESP32;			//
	tempI2CFrameForESP32.slaveDevice7bitAddress = pESP32->esp32i2cSlaveAdress_7bit;		//I2C_SLAVE_ADDRESS_ESP32;
 8001930:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	733b      	strb	r3, [r7, #12]
	while(1){
		pESP32->isCountingSemaphoreOverflowed();
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f995 	bl	8000c6c <_ZN27esp32_i2cComunicationDriver29isCountingSemaphoreOverflowedEv>
		if (pESP32->semaphoreTake__CountingSemaphore()){								//czeka dopuki nie pojawi się esp32 interrupt request
 8001942:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f9b0 	bl	8000cac <_ZN27esp32_i2cComunicationDriver32semaphoreTake__CountingSemaphoreEv>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ed      	beq.n	8001938 <_ZL29esp32IntrrruptRequestCallbackPv+0x10>
			pESP32->i2cMasterSemaphoreTake();
 800195c:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f9cd 	bl	8000d00 <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreTakeEv>
			pESP32->masterReceiveFromESP32_DMA((uint8_t*) &tempI2CFrameForESP32.dataSize, sizeof(size_t));
 8001966:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	3304      	adds	r3, #4
 8001970:	2204      	movs	r2, #4
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f9af 	bl	8000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>
			pESP32->while_I2C_STATE_READY();
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f9db 	bl	8000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>
			tempI2CFrameForESP32.pData = new char[tempI2CFrameForESP32.dataSize];
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4618      	mov	r0, r3
 8001986:	f00e fc0a 	bl	801019e <_Znaj>
 800198a:	4603      	mov	r3, r0
 800198c:	617b      	str	r3, [r7, #20]
			if (tempI2CFrameForESP32.pData!=nullptr){
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d016      	beq.n	80019c2 <_ZL29esp32IntrrruptRequestCallbackPv+0x9a>
				pESP32->masterReceiveFromESP32_DMA((uint8_t*) tempI2CFrameForESP32.pData, tempI2CFrameForESP32.dataSize);
 8001994:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6979      	ldr	r1, [r7, #20]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	b292      	uxth	r2, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f999 	bl	8000cd6 <_ZN27esp32_i2cComunicationDriver26masterReceiveFromESP32_DMAEPht>
				pESP32->while_I2C_STATE_READY();
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f9c5 	bl	8000d38 <_ZN27esp32_i2cComunicationDriver21while_I2C_STATE_READYEv>
				pi2cMaster->pReceiveQueueObject->QueueSend(&tempI2CFrameForESP32);
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <_ZL29esp32IntrrruptRequestCallbackPv+0xb4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f107 020c 	add.w	r2, r7, #12
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fbcd 	bl	800115a <_ZN20i2cQueue4DynamicData9QueueSendEP22i2cFrame_transmitQueue>
 80019c0:	e004      	b.n	80019cc <_ZL29esp32IntrrruptRequestCallbackPv+0xa4>
			}
			else{
				pESP32->seteDynamicmMemeoryAlocationError();
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9c4 	bl	8000d54 <_ZN27esp32_i2cComunicationDriver33seteDynamicmMemeoryAlocationErrorEv>
			}
			pESP32->i2cMasterSemaphoreGive();
 80019cc:	4b02      	ldr	r3, [pc, #8]	@ (80019d8 <_ZL29esp32IntrrruptRequestCallbackPv+0xb0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f9a3 	bl	8000d1c <_ZN27esp32_i2cComunicationDriver22i2cMasterSemaphoreGiveEv>
		pESP32->isCountingSemaphoreOverflowed();
 80019d6:	e7af      	b.n	8001938 <_ZL29esp32IntrrruptRequestCallbackPv+0x10>
 80019d8:	24000208 	.word	0x24000208
 80019dc:	24000204 	.word	0x24000204

080019e0 <_ZL26manageRadioButtonsAndManuePv>:
		}
	};
}

static void manageRadioButtonsAndManue(void* noThing){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	keyboardUnion receivedKeyboard;
	while(1){
		if(pRadioMenu->queueRadioMenuKbrdReceive(&receivedKeyboard)){
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <_ZL26manageRadioButtonsAndManuePv+0x38>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f107 020c 	add.w	r2, r7, #12
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff feae 	bl	8001754 <_ZN9radioMenu25queueRadioMenuKbrdReceiveEP13keyboardUnion>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf14      	ite	ne
 80019fe:	2301      	movne	r3, #1
 8001a00:	2300      	moveq	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <_ZL26manageRadioButtonsAndManuePv+0x8>
			printf("%c %x\r\n", receivedKeyboard.array[0], receivedKeyboard.array[1]);
 8001a08:	7b3b      	ldrb	r3, [r7, #12]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <_ZL26manageRadioButtonsAndManuePv+0x3c>)
 8001a12:	f00f fbcd 	bl	80111b0 <iprintf>
		if(pRadioMenu->queueRadioMenuKbrdReceive(&receivedKeyboard)){
 8001a16:	e7e7      	b.n	80019e8 <_ZL26manageRadioButtonsAndManuePv+0x8>
 8001a18:	2400020c 	.word	0x2400020c
 8001a1c:	08015164 	.word	0x08015164

08001a20 <_Z17initTaskFunctionsv>:
	printf("11111111\r\n");
	printf("33333333\r\n");
	printf("22222222\r\n");
}*/

void initTaskFunctions(void){
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af02      	add	r7, sp, #8
	assert(pi2cMaster = new i2cMaster(&hi2c1));
 8001a26:	2014      	movs	r0, #20
 8001a28:	f00e fba8 	bl	801017c <_Znwj>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461c      	mov	r4, r3
 8001a30:	495f      	ldr	r1, [pc, #380]	@ (8001bb0 <_Z17initTaskFunctionsv+0x190>)
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff f9f0 	bl	8000e18 <_ZN9i2cMasterC1EP19__I2C_HandleTypeDef>
 8001a38:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb4 <_Z17initTaskFunctionsv+0x194>)
 8001a3a:	601c      	str	r4, [r3, #0]
 8001a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb4 <_Z17initTaskFunctionsv+0x194>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <_Z17initTaskFunctionsv+0x30>
 8001a44:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <_Z17initTaskFunctionsv+0x198>)
 8001a46:	4a5d      	ldr	r2, [pc, #372]	@ (8001bbc <_Z17initTaskFunctionsv+0x19c>)
 8001a48:	2162      	movs	r1, #98	@ 0x62
 8001a4a:	485d      	ldr	r0, [pc, #372]	@ (8001bc0 <_Z17initTaskFunctionsv+0x1a0>)
 8001a4c:	f00e fbbc 	bl	80101c8 <__assert_func>
	assert(pESP32 = new esp32_i2cComunicationDriver(pi2cMaster));
 8001a50:	2024      	movs	r0, #36	@ 0x24
 8001a52:	f00e fb93 	bl	801017c <_Znwj>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461c      	mov	r4, r3
 8001a5a:	4b56      	ldr	r3, [pc, #344]	@ (8001bb4 <_Z17initTaskFunctionsv+0x194>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff f82d 	bl	8000ac0 <_ZN27esp32_i2cComunicationDriverC1EP9i2cMaster>
 8001a66:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <_Z17initTaskFunctionsv+0x1a4>)
 8001a68:	601c      	str	r4, [r3, #0]
 8001a6a:	4b56      	ldr	r3, [pc, #344]	@ (8001bc4 <_Z17initTaskFunctionsv+0x1a4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <_Z17initTaskFunctionsv+0x5e>
 8001a72:	4b55      	ldr	r3, [pc, #340]	@ (8001bc8 <_Z17initTaskFunctionsv+0x1a8>)
 8001a74:	4a51      	ldr	r2, [pc, #324]	@ (8001bbc <_Z17initTaskFunctionsv+0x19c>)
 8001a76:	2163      	movs	r1, #99	@ 0x63
 8001a78:	4851      	ldr	r0, [pc, #324]	@ (8001bc0 <_Z17initTaskFunctionsv+0x1a0>)
 8001a7a:	f00e fba5 	bl	80101c8 <__assert_func>

	//pętla opóźniająca oczekująza aż zakończy się proces bootowania ESP32
	pi2cMaster->i2cMasterSemaphoreTake();
 8001a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb4 <_Z17initTaskFunctionsv+0x194>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa32 	bl	8000eec <_ZN9i2cMaster22i2cMasterSemaphoreTakeEv>
	while(HAL_I2C_IsDeviceReady(&hi2c1, pESP32->esp32i2cSlaveAdress_7bit<<1, 10000, 10000) != HAL_OK){
 8001a88:	e002      	b.n	8001a90 <_Z17initTaskFunctionsv+0x70>
		printf("ESP32 i2c bus not responding\r\n");
 8001a8a:	4850      	ldr	r0, [pc, #320]	@ (8001bcc <_Z17initTaskFunctionsv+0x1ac>)
 8001a8c:	f00f fbf8 	bl	8011280 <puts>
	while(HAL_I2C_IsDeviceReady(&hi2c1, pESP32->esp32i2cSlaveAdress_7bit<<1, 10000, 10000) != HAL_OK){
 8001a90:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc4 <_Z17initTaskFunctionsv+0x1a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001a9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001aa2:	4843      	ldr	r0, [pc, #268]	@ (8001bb0 <_Z17initTaskFunctionsv+0x190>)
 8001aa4:	f004 fab6 	bl	8006014 <HAL_I2C_IsDeviceReady>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e8      	bne.n	8001a8a <_Z17initTaskFunctionsv+0x6a>
	};
	pi2cMaster->i2cMasterSemaphoreGive();
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb4 <_Z17initTaskFunctionsv+0x194>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fa25 	bl	8000f0c <_ZN9i2cMaster22i2cMasterSemaphoreGiveEv>
	//pętla opóźniająca oczekująza aż zakończy si ę proces bootowania ESP32


	printf("Radio main firmware version: %.2f\r\n", FW_VERSION);
 8001ac2:	a339      	add	r3, pc, #228	@ (adr r3, 8001ba8 <_Z17initTaskFunctionsv+0x188>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	4841      	ldr	r0, [pc, #260]	@ (8001bd0 <_Z17initTaskFunctionsv+0x1b0>)
 8001aca:	f00f fb71 	bl	80111b0 <iprintf>

	pi2cMaster->while_I2C_STATE_READY();
 8001ace:	4b39      	ldr	r3, [pc, #228]	@ (8001bb4 <_Z17initTaskFunctionsv+0x194>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fa9e 	bl	8001014 <_ZN9i2cMaster21while_I2C_STATE_READYEv>
	pESP32->ping();
 8001ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc4 <_Z17initTaskFunctionsv+0x1a4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f867 	bl	8000bb0 <_ZN27esp32_i2cComunicationDriver4pingEv>

	//tworzy task callback na przerwanie od ESP32 informującę, że ESP32 ma jakieś dane do wysłania
	configASSERT(xTaskCreate(esp32IntrrruptRequestCallback, "esp32IntReq", 3*128, NULL, tskIDLE_PRIORITY+1, &taskHandle_esp32IntrrruptRequest));
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <_Z17initTaskFunctionsv+0x1b4>)
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2300      	movs	r3, #0
 8001aec:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001af0:	4939      	ldr	r1, [pc, #228]	@ (8001bd8 <_Z17initTaskFunctionsv+0x1b8>)
 8001af2:	483a      	ldr	r0, [pc, #232]	@ (8001bdc <_Z17initTaskFunctionsv+0x1bc>)
 8001af4:	f00c fa2c 	bl	800df50 <xTaskCreate>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <_Z17initTaskFunctionsv+0x100>
	__asm volatile
 8001b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	607b      	str	r3, [r7, #4]
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <_Z17initTaskFunctionsv+0xfc>
	//tworzy task przetwarzający dane (parsujący) z kolejki odbiorczej i2c Mastera
	configASSERT(xTaskCreate(i2cMaster_pReceiveQueueObjectParser, "i2cMastRecQue, Pars", 3*128, NULL, tskIDLE_PRIORITY, &taskHandle_i2cMaster_pReceiveQueueObjectParser));
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <_Z17initTaskFunctionsv+0x1c0>)
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b2e:	492d      	ldr	r1, [pc, #180]	@ (8001be4 <_Z17initTaskFunctionsv+0x1c4>)
 8001b30:	482d      	ldr	r0, [pc, #180]	@ (8001be8 <_Z17initTaskFunctionsv+0x1c8>)
 8001b32:	f00c fa0d 	bl	800df50 <xTaskCreate>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <_Z17initTaskFunctionsv+0x13e>
	__asm volatile
 8001b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	603b      	str	r3, [r7, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	e7fd      	b.n	8001b5a <_Z17initTaskFunctionsv+0x13a>


	assert(pRadioMenu=new radioMenu());
 8001b5e:	2040      	movs	r0, #64	@ 0x40
 8001b60:	f00e fb0c 	bl	801017c <_Znwj>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461c      	mov	r4, r3
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff fcc1 	bl	80014f0 <_ZN9radioMenuC1Ev>
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <_Z17initTaskFunctionsv+0x1cc>)
 8001b70:	601c      	str	r4, [r3, #0]
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <_Z17initTaskFunctionsv+0x1cc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <_Z17initTaskFunctionsv+0x166>
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <_Z17initTaskFunctionsv+0x1d0>)
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <_Z17initTaskFunctionsv+0x19c>)
 8001b7e:	2179      	movs	r1, #121	@ 0x79
 8001b80:	480f      	ldr	r0, [pc, #60]	@ (8001bc0 <_Z17initTaskFunctionsv+0x1a0>)
 8001b82:	f00e fb21 	bl	80101c8 <__assert_func>
	xTaskCreate(manageRadioButtonsAndManue, "RadioMenu", 3*128, NULL, tskIDLE_PRIORITY, &/*(pRadioMenu->*/taskHandle_manageTheRadioManue/*)*/);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <_Z17initTaskFunctionsv+0x1d4>)
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b94:	4918      	ldr	r1, [pc, #96]	@ (8001bf8 <_Z17initTaskFunctionsv+0x1d8>)
 8001b96:	4819      	ldr	r0, [pc, #100]	@ (8001bfc <_Z17initTaskFunctionsv+0x1dc>)
 8001b98:	f00c f9da 	bl	800df50 <xTaskCreate>

	probne->appendExecFunctionArry(buttonSequence, testowyAppend);

	delete probne;*/

}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	9999999a 	.word	0x9999999a
 8001bac:	3fb99999 	.word	0x3fb99999
 8001bb0:	24000214 	.word	0x24000214
 8001bb4:	24000204 	.word	0x24000204
 8001bb8:	0801516c 	.word	0x0801516c
 8001bbc:	08015190 	.word	0x08015190
 8001bc0:	08015138 	.word	0x08015138
 8001bc4:	24000208 	.word	0x24000208
 8001bc8:	080151ac 	.word	0x080151ac
 8001bcc:	080151e4 	.word	0x080151e4
 8001bd0:	08015204 	.word	0x08015204
 8001bd4:	240001f8 	.word	0x240001f8
 8001bd8:	08015228 	.word	0x08015228
 8001bdc:	08001929 	.word	0x08001929
 8001be0:	240001fc 	.word	0x240001fc
 8001be4:	08015234 	.word	0x08015234
 8001be8:	08001899 	.word	0x08001899
 8001bec:	2400020c 	.word	0x2400020c
 8001bf0:	08015248 	.word	0x08015248
 8001bf4:	24000200 	.word	0x24000200
 8001bf8:	08015264 	.word	0x08015264
 8001bfc:	080019e1 	.word	0x080019e1

08001c00 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
		pESP32->incrementInterruptRequestCountingSemaphore();		//inkrementacja semafora daje sygnał ,dla metody esp32_i2sComunicationDriver::intrrruptRequestCallback
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe ffec 	bl	8000bec <_ZN27esp32_i2cComunicationDriver42incrementInterruptRequestCountingSemaphoreEv>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	24000208 	.word	0x24000208

08001c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_DMA_Init+0x4c>)
 8001c28:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <MX_DMA_Init+0x4c>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <MX_DMA_Init+0x4c>)
 8001c38:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2106      	movs	r1, #6
 8001c48:	200b      	movs	r0, #11
 8001c4a:	f000 feb7 	bl	80029bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c4e:	200b      	movs	r0, #11
 8001c50:	f000 fece 	bl	80029f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2106      	movs	r1, #6
 8001c58:	200c      	movs	r0, #12
 8001c5a:	f000 feaf 	bl	80029bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c5e:	200c      	movs	r0, #12
 8001c60:	f000 fec6 	bl	80029f0 <HAL_NVIC_EnableIRQ>

}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	58024400 	.word	0x58024400

08001c70 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <MX_FREERTOS_Init+0x18>)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_FREERTOS_Init+0x1c>)
 8001ca2:	f00a ffcf 	bl	800cc44 <osThreadNew>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a03      	ldr	r2, [pc, #12]	@ (8001cb8 <MX_FREERTOS_Init+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	080152c4 	.word	0x080152c4
 8001cb4:	08001cbd 	.word	0x08001cbd
 8001cb8:	24000210 	.word	0x24000210

08001cbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f00b f84f 	bl	800cd68 <osDelay>
 8001cca:	e7fb      	b.n	8001cc4 <StartDefaultTask+0x8>

08001ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_GPIO_Init+0x84>)
 8001ce4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <MX_GPIO_Init+0x84>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_GPIO_Init+0x84>)
 8001cf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <MX_GPIO_Init+0x84>)
 8001d02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <MX_GPIO_Init+0x84>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_GPIO_Init+0x84>)
 8001d12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <MX_GPIO_Init+0x88>)
 8001d34:	f003 fcde 	bl	80056f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	2017      	movs	r0, #23
 8001d3e:	f000 fe3d 	bl	80029bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d42:	2017      	movs	r0, #23
 8001d44:	f000 fe54 	bl	80029f0 <HAL_NVIC_EnableIRQ>

}
 8001d48:	bf00      	nop
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58024400 	.word	0x58024400
 8001d54:	58020400 	.word	0x58020400

08001d58 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <MX_I2C1_Init+0x78>)
 8001d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <MX_I2C1_Init+0x7c>)
 8001d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d94:	480d      	ldr	r0, [pc, #52]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001d96:	f003 ff81 	bl	8005c9c <HAL_I2C_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001da0:	f000 f9da 	bl	8002158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001da4:	2100      	movs	r1, #0
 8001da6:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001da8:	f006 fad0 	bl	800834c <HAL_I2CEx_ConfigAnalogFilter>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001db2:	f000 f9d1 	bl	8002158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001db6:	2100      	movs	r1, #0
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <MX_I2C1_Init+0x74>)
 8001dba:	f006 fb12 	bl	80083e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001dc4:	f000 f9c8 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	24000214 	.word	0x24000214
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	20b0ccff 	.word	0x20b0ccff

08001dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ba      	sub	sp, #232	@ 0xe8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	22c0      	movs	r2, #192	@ 0xc0
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00f fb41 	bl	8011480 <memset>
  if(i2cHandle->Instance==I2C1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a5c      	ldr	r2, [pc, #368]	@ (8001f74 <HAL_I2C_MspInit+0x19c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	f040 80b1 	bne.w	8001f6c <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e0a:	f04f 0208 	mov.w	r2, #8
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 fb65 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001e2c:	f000 f994 	bl	8002158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <HAL_I2C_MspInit+0x1a0>)
 8001e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e36:	4a50      	ldr	r2, [pc, #320]	@ (8001f78 <HAL_I2C_MspInit+0x1a0>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001e40:	4b4d      	ldr	r3, [pc, #308]	@ (8001f78 <HAL_I2C_MspInit+0x1a0>)
 8001e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e56:	2312      	movs	r3, #18
 8001e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4841      	ldr	r0, [pc, #260]	@ (8001f7c <HAL_I2C_MspInit+0x1a4>)
 8001e76:	f003 fc3d 	bl	80056f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f78 <HAL_I2C_MspInit+0x1a0>)
 8001e7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001e80:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <HAL_I2C_MspInit+0x1a0>)
 8001e82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e86:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_I2C_MspInit+0x1a0>)
 8001e8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e98:	4b39      	ldr	r3, [pc, #228]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <HAL_I2C_MspInit+0x1ac>)
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ea0:	2221      	movs	r2, #33	@ 0x21
 8001ea2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb0:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001eb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ebe:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eca:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ed6:	482a      	ldr	r0, [pc, #168]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001ed8:	f000 fda6 	bl	8002a28 <HAL_DMA_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8001ee2:	f000 f939 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001eea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001eec:	4a24      	ldr	r2, [pc, #144]	@ (8001f80 <HAL_I2C_MspInit+0x1a8>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001ef4:	4a25      	ldr	r2, [pc, #148]	@ (8001f8c <HAL_I2C_MspInit+0x1b4>)
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001ef8:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001efa:	2222      	movs	r2, #34	@ 0x22
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efe:	4b22      	ldr	r3, [pc, #136]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f00:	2240      	movs	r2, #64	@ 0x40
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f12:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001f30:	4815      	ldr	r0, [pc, #84]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f32:	f000 fd79 	bl	8002a28 <HAL_DMA_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8001f3c:	f000 f90c 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f44:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f46:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <HAL_I2C_MspInit+0x1b0>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2105      	movs	r1, #5
 8001f50:	201f      	movs	r0, #31
 8001f52:	f000 fd33 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f56:	201f      	movs	r0, #31
 8001f58:	f000 fd4a 	bl	80029f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2105      	movs	r1, #5
 8001f60:	2020      	movs	r0, #32
 8001f62:	f000 fd2b 	bl	80029bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f66:	2020      	movs	r0, #32
 8001f68:	f000 fd42 	bl	80029f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	37e8      	adds	r7, #232	@ 0xe8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005400 	.word	0x40005400
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020400 	.word	0x58020400
 8001f80:	24000268 	.word	0x24000268
 8001f84:	40020010 	.word	0x40020010
 8001f88:	240002e0 	.word	0x240002e0
 8001f8c:	40020028 	.word	0x40020028

08001f90 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <HAL_I2C_MspDeInit+0x60>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d121      	bne.n	8001fe6 <HAL_I2C_MspDeInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fa2:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <HAL_I2C_MspDeInit+0x64>)
 8001fa4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fa8:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <HAL_I2C_MspDeInit+0x64>)
 8001faa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fae:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001fb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb6:	4810      	ldr	r0, [pc, #64]	@ (8001ff8 <HAL_I2C_MspDeInit+0x68>)
 8001fb8:	f003 fd4c 	bl	8005a54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <HAL_I2C_MspDeInit+0x68>)
 8001fc2:	f003 fd47 	bl	8005a54 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f8ba 	bl	8003144 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 f8b5 	bl	8003144 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001fda:	201f      	movs	r0, #31
 8001fdc:	f000 fd16 	bl	8002a0c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001fe0:	2020      	movs	r0, #32
 8001fe2:	f000 fd13 	bl	8002a0c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020400 	.word	0x58020400

08001ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002000:	f000 fba4 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002004:	f000 f812 	bl	800202c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002008:	f7ff fe60 	bl	8001ccc <MX_GPIO_Init>
  MX_DMA_Init();
 800200c:	f7ff fe08 	bl	8001c20 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002010:	f000 fabc 	bl	800258c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002014:	f7ff fea0 	bl	8001d58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //delay_ms(1000);
  initTaskFunctions();
 8002018:	f7ff fd02 	bl	8001a20 <_Z17initTaskFunctionsv>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800201c:	f00a fdc8 	bl	800cbb0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */

  MX_FREERTOS_Init();
 8002020:	f7ff fe3a 	bl	8001c98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002024:	f00a fde8 	bl	800cbf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <main+0x2c>

0800202c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b09c      	sub	sp, #112	@ 0x70
 8002030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002036:	224c      	movs	r2, #76	@ 0x4c
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f00f fa20 	bl	8011480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2220      	movs	r2, #32
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f00f fa1a 	bl	8011480 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800204c:	4b37      	ldr	r3, [pc, #220]	@ (800212c <SystemClock_Config+0x100>)
 800204e:	f04f 32ff 	mov.w	r2, #4294967295
 8002052:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002056:	2002      	movs	r0, #2
 8002058:	f006 fa10 	bl	800847c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <SystemClock_Config+0x104>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <SystemClock_Config+0x104>)
 8002066:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <SystemClock_Config+0x104>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002078:	bf00      	nop
 800207a:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <SystemClock_Config+0x104>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f3      	bne.n	800207a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002092:	2302      	movs	r3, #2
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002096:	2301      	movs	r3, #1
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800209a:	2340      	movs	r3, #64	@ 0x40
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209e:	2302      	movs	r3, #2
 80020a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020a2:	2300      	movs	r3, #0
 80020a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020a6:	2304      	movs	r3, #4
 80020a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80020aa:	2323      	movs	r3, #35	@ 0x23
 80020ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020b2:	2302      	movs	r3, #2
 80020b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80020ba:	230c      	movs	r3, #12
 80020bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020be:	2300      	movs	r3, #0
 80020c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ca:	4618      	mov	r0, r3
 80020cc:	f006 fa10 	bl	80084f0 <HAL_RCC_OscConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80020e0:	f000 f83a 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e4:	233f      	movs	r3, #63	@ 0x3f
 80020e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e8:	2303      	movs	r3, #3
 80020ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020f4:	2340      	movs	r3, #64	@ 0x40
 80020f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020f8:	2340      	movs	r3, #64	@ 0x40
 80020fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002102:	2340      	movs	r3, #64	@ 0x40
 8002104:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2106      	movs	r1, #6
 800210a:	4618      	mov	r0, r3
 800210c:	f006 fe22 	bl	8008d54 <HAL_RCC_ClockConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002120:	f000 f81a 	bl	8002158 <Error_Handler>
  }
}
 8002124:	bf00      	nop
 8002126:	3770      	adds	r7, #112	@ 0x70
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	58024400 	.word	0x58024400
 8002130:	58024800 	.word	0x58024800

08002134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002146:	f000 fb3d 	bl	80027c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <Error_Handler+0x8>

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_MspInit+0x38>)
 800216c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_MspInit+0x38>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <HAL_MspInit+0x38>)
 800217c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	210f      	movs	r1, #15
 800218c:	f06f 0001 	mvn.w	r0, #1
 8002190:	f000 fc14 	bl	80029bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	58024400 	.word	0x58024400

080021a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	@ 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d844      	bhi.n	8002238 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80021ae:	2200      	movs	r2, #0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	2019      	movs	r0, #25
 80021b4:	f000 fc02 	bl	80029bc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021b8:	2019      	movs	r0, #25
 80021ba:	f000 fc19 	bl	80029f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80021be:	4a24      	ldr	r2, [pc, #144]	@ (8002250 <HAL_InitTick+0xb0>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021c4:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <HAL_InitTick+0xb4>)
 80021c6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80021ca:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_InitTick+0xb4>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80021d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_InitTick+0xb4>)
 80021d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021e2:	f107 020c 	add.w	r2, r7, #12
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f007 f93d 	bl	800946c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021f2:	f007 f925 	bl	8009440 <HAL_RCC_GetPCLK2Freq>
 80021f6:	4603      	mov	r3, r0
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <HAL_InitTick+0xb8>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	3b01      	subs	r3, #1
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800220a:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_InitTick+0xbc>)
 800220c:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <HAL_InitTick+0xc0>)
 800220e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_InitTick+0xbc>)
 8002212:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002216:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002218:	4a10      	ldr	r2, [pc, #64]	@ (800225c <HAL_InitTick+0xbc>)
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800221e:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <HAL_InitTick+0xbc>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_InitTick+0xbc>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800222a:	480c      	ldr	r0, [pc, #48]	@ (800225c <HAL_InitTick+0xbc>)
 800222c:	f008 ff40 	bl	800b0b0 <HAL_TIM_Base_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_InitTick+0xa6>
 8002236:	e001      	b.n	800223c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e005      	b.n	8002248 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800223c:	4807      	ldr	r0, [pc, #28]	@ (800225c <HAL_InitTick+0xbc>)
 800223e:	f008 ff99 	bl	800b174 <HAL_TIM_Base_Start_IT>
 8002242:	4603      	mov	r3, r0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3738      	adds	r7, #56	@ 0x38
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	24000008 	.word	0x24000008
 8002254:	58024400 	.word	0x58024400
 8002258:	431bde83 	.word	0x431bde83
 800225c:	24000358 	.word	0x24000358
 8002260:	40010000 	.word	0x40010000

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <NMI_Handler+0x4>

0800226c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <MemManage_Handler+0x4>

0800227c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <UsageFault_Handler+0x4>

0800228c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <DMA1_Stream0_IRQHandler+0x10>)
 80022a2:	f001 fe8b 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	24000268 	.word	0x24000268

080022b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <DMA1_Stream1_IRQHandler+0x10>)
 80022b6:	f001 fe81 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	240002e0 	.word	0x240002e0

080022c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 80022c8:	2020      	movs	r0, #32
 80022ca:	f003 fccd 	bl	8005c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <TIM1_UP_IRQHandler+0x10>)
 80022da:	f008 ffc3 	bl	800b264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	24000358 	.word	0x24000358

080022e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <I2C1_EV_IRQHandler+0x10>)
 80022ee:	f003 ff7d 	bl	80061ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	24000214 	.word	0x24000214

080022fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <I2C1_ER_IRQHandler+0x10>)
 8002302:	f003 ff8d 	bl	8006220 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	24000214 	.word	0x24000214

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_kill>:

int _kill(int pid, int sig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232a:	f00f f9a5 	bl	8011678 <__errno>
 800232e:	4603      	mov	r3, r0
 8002330:	2216      	movs	r2, #22
 8002332:	601a      	str	r2, [r3, #0]
  return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_exit>:

void _exit (int status)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe7 	bl	8002320 <_kill>
 while (1) {}    /* Make sure we hang here */
 8002352:	bf00      	nop
 8002354:	e7fd      	b.n	8002352 <_exit+0x12>

08002356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e00a      	b.n	800237e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002368:	f3af 8000 	nop.w
 800236c:	4601      	mov	r1, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbf0      	blt.n	8002368 <_read+0x12>
  }

  return len;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e009      	b.n	80023b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	60ba      	str	r2, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f87a 	bl	80014a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbf1      	blt.n	80023a2 <_write+0x12>
  }
  return len;
 80023be:	687b      	ldr	r3, [r7, #4]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_close>:

int _close(int file)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	605a      	str	r2, [r3, #4]
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_isatty>:

int _isatty(int file)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f00f f90a 	bl	8011678 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	24100000 	.word	0x24100000
 8002490:	00000400 	.word	0x00000400
 8002494:	240003a4 	.word	0x240003a4
 8002498:	24004f88 	.word	0x24004f88

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024a0:	4b32      	ldr	r3, [pc, #200]	@ (800256c <SystemInit+0xd0>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	4a31      	ldr	r2, [pc, #196]	@ (800256c <SystemInit+0xd0>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002570 <SystemInit+0xd4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d807      	bhi.n	80024cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002570 <SystemInit+0xd4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 030f 	bic.w	r3, r3, #15
 80024c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002570 <SystemInit+0xd4>)
 80024c6:	f043 0303 	orr.w	r3, r3, #3
 80024ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024cc:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <SystemInit+0xd8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <SystemInit+0xd8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024d8:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <SystemInit+0xd8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024de:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <SystemInit+0xd8>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4924      	ldr	r1, [pc, #144]	@ (8002574 <SystemInit+0xd8>)
 80024e4:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <SystemInit+0xdc>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024ea:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <SystemInit+0xd4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <SystemInit+0xd4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 030f 	bic.w	r3, r3, #15
 80024fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002570 <SystemInit+0xd4>)
 8002500:	f043 0303 	orr.w	r3, r3, #3
 8002504:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002506:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <SystemInit+0xd8>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <SystemInit+0xd8>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <SystemInit+0xd8>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002518:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <SystemInit+0xd8>)
 800251a:	4a18      	ldr	r2, [pc, #96]	@ (800257c <SystemInit+0xe0>)
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <SystemInit+0xd8>)
 8002520:	4a17      	ldr	r2, [pc, #92]	@ (8002580 <SystemInit+0xe4>)
 8002522:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <SystemInit+0xd8>)
 8002526:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <SystemInit+0xe8>)
 8002528:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <SystemInit+0xd8>)
 800252c:	2200      	movs	r2, #0
 800252e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002530:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <SystemInit+0xd8>)
 8002532:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <SystemInit+0xe8>)
 8002534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <SystemInit+0xd8>)
 8002538:	2200      	movs	r2, #0
 800253a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800253c:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <SystemInit+0xd8>)
 800253e:	4a11      	ldr	r2, [pc, #68]	@ (8002584 <SystemInit+0xe8>)
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002542:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <SystemInit+0xd8>)
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002548:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <SystemInit+0xd8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <SystemInit+0xd8>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002552:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002554:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <SystemInit+0xd8>)
 8002556:	2200      	movs	r2, #0
 8002558:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800255a:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <SystemInit+0xec>)
 800255c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002560:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00
 8002570:	52002000 	.word	0x52002000
 8002574:	58024400 	.word	0x58024400
 8002578:	eaf6ed7f 	.word	0xeaf6ed7f
 800257c:	02020200 	.word	0x02020200
 8002580:	01ff0000 	.word	0x01ff0000
 8002584:	01010280 	.word	0x01010280
 8002588:	52004000 	.word	0x52004000

0800258c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <MX_USART1_UART_Init+0x90>)
 8002592:	4a23      	ldr	r2, [pc, #140]	@ (8002620 <MX_USART1_UART_Init+0x94>)
 8002594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002596:	4b21      	ldr	r3, [pc, #132]	@ (800261c <MX_USART1_UART_Init+0x90>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c8:	4b14      	ldr	r3, [pc, #80]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d4:	4811      	ldr	r0, [pc, #68]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025d6:	f009 f839 	bl	800b64c <HAL_UART_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025e0:	f7ff fdba 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e4:	2100      	movs	r1, #0
 80025e6:	480d      	ldr	r0, [pc, #52]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025e8:	f00a f9d3 	bl	800c992 <HAL_UARTEx_SetTxFifoThreshold>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025f2:	f7ff fdb1 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f6:	2100      	movs	r1, #0
 80025f8:	4808      	ldr	r0, [pc, #32]	@ (800261c <MX_USART1_UART_Init+0x90>)
 80025fa:	f00a fa08 	bl	800ca0e <HAL_UARTEx_SetRxFifoThreshold>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002604:	f7ff fda8 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	@ (800261c <MX_USART1_UART_Init+0x90>)
 800260a:	f00a f989 	bl	800c920 <HAL_UARTEx_DisableFifoMode>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002614:	f7ff fda0 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	240003a8 	.word	0x240003a8
 8002620:	40011000 	.word	0x40011000

08002624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0ba      	sub	sp, #232	@ 0xe8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	22c0      	movs	r2, #192	@ 0xc0
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f00e ff1b 	bl	8011480 <memset>
  if(uartHandle->Instance==USART1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <HAL_UART_MspInit+0xc8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d146      	bne.n	80026e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002654:	f04f 0201 	mov.w	r2, #1
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f006 ff40 	bl	80094f0 <HAL_RCCEx_PeriphCLKConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002676:	f7ff fd6f 	bl	8002158 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267a:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 800267c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002680:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800268a:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 800268c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 800269a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_UART_MspInit+0xcc>)
 80026aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 80026b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026d0:	2304      	movs	r3, #4
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_UART_MspInit+0xd0>)
 80026de:	f003 f809 	bl	80056f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026e2:	bf00      	nop
 80026e4:	37e8      	adds	r7, #232	@ 0xe8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40011000 	.word	0x40011000
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58020400 	.word	0x58020400

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002730 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026fc:	f7ff fece 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	@ (8002744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002726:	f00e ffad 	bl	8011684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7ff fc67 	bl	8001ffc <main>
  bx  lr
 800272e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002734:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002738:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 800273c:	08015764 	.word	0x08015764
  ldr r2, =_sbss
 8002740:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8002744:	24004f84 	.word	0x24004f84

08002748 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>
	...

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
 8002754:	f000 f927 	bl	80029a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002758:	f006 fcb2 	bl	80090c0 <HAL_RCC_GetSysClockFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_Init+0x68>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	4913      	ldr	r1, [pc, #76]	@ (80027b8 <HAL_Init+0x6c>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002776:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <HAL_Init+0x68>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <HAL_Init+0x6c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <HAL_Init+0x70>)
 800278e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002790:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_Init+0x74>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	200f      	movs	r0, #15
 8002798:	f7ff fd02 	bl	80021a0 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e002      	b.n	80027ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027a6:	f7ff fcdd 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	58024400 	.word	0x58024400
 80027b8:	080152e8 	.word	0x080152e8
 80027bc:	24000004 	.word	0x24000004
 80027c0:	24000000 	.word	0x24000000

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	@ (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	2400000c 	.word	0x2400000c
 80027e8:	2400043c 	.word	0x2400043c

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	2400043c 	.word	0x2400043c

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <__NVIC_SetPriorityGrouping+0x40>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <__NVIC_SetPriorityGrouping+0x40>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00
 8002848:	05fa0000 	.word	0x05fa0000

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	@ (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db12      	blt.n	80028dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	490a      	ldr	r1, [pc, #40]	@ (80028e8 <__NVIC_DisableIRQ+0x44>)
 80028be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	3320      	adds	r3, #32
 80028cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028d0:	f3bf 8f4f 	dsb	sy
}
 80028d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028d6:	f3bf 8f6f 	isb	sy
}
 80028da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	@ (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <__NVIC_SetPriority+0x50>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff28 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ca:	f7ff ff3f 	bl	800284c <__NVIC_GetPriorityGrouping>
 80029ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	6978      	ldr	r0, [r7, #20]
 80029d6:	f7ff ffb3 	bl	8002940 <NVIC_EncodePriority>
 80029da:	4602      	mov	r2, r0
 80029dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff82 	bl	80028ec <__NVIC_SetPriority>
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff32 	bl	8002868 <__NVIC_EnableIRQ>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff42 	bl	80028a4 <__NVIC_DisableIRQ>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff fedc 	bl	80027ec <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e37d      	b.n	800313c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a66      	ldr	r2, [pc, #408]	@ (8002be0 <HAL_DMA_Init+0x1b8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04a      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_DMA_Init+0x1bc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a63      	ldr	r2, [pc, #396]	@ (8002be8 <HAL_DMA_Init+0x1c0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a62      	ldr	r2, [pc, #392]	@ (8002bec <HAL_DMA_Init+0x1c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d03b      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a60      	ldr	r2, [pc, #384]	@ (8002bf0 <HAL_DMA_Init+0x1c8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf4 <HAL_DMA_Init+0x1cc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf8 <HAL_DMA_Init+0x1d0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02c      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bfc <HAL_DMA_Init+0x1d4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_DMA_Init+0x1d8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a59      	ldr	r2, [pc, #356]	@ (8002c04 <HAL_DMA_Init+0x1dc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	@ (8002c08 <HAL_DMA_Init+0x1e0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <HAL_DMA_Init+0x1e4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a54      	ldr	r2, [pc, #336]	@ (8002c10 <HAL_DMA_Init+0x1e8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a53      	ldr	r2, [pc, #332]	@ (8002c14 <HAL_DMA_Init+0x1ec>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	@ (8002c18 <HAL_DMA_Init+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <HAL_DMA_Init+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0xbc>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_Init+0xbe>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 813c 	beq.w	8002d64 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a37      	ldr	r2, [pc, #220]	@ (8002be0 <HAL_DMA_Init+0x1b8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d04a      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a36      	ldr	r2, [pc, #216]	@ (8002be4 <HAL_DMA_Init+0x1bc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d045      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a34      	ldr	r2, [pc, #208]	@ (8002be8 <HAL_DMA_Init+0x1c0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d040      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a33      	ldr	r2, [pc, #204]	@ (8002bec <HAL_DMA_Init+0x1c4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d03b      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a31      	ldr	r2, [pc, #196]	@ (8002bf0 <HAL_DMA_Init+0x1c8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d036      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a30      	ldr	r2, [pc, #192]	@ (8002bf4 <HAL_DMA_Init+0x1cc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d031      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf8 <HAL_DMA_Init+0x1d0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02c      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2d      	ldr	r2, [pc, #180]	@ (8002bfc <HAL_DMA_Init+0x1d4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d027      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2b      	ldr	r2, [pc, #172]	@ (8002c00 <HAL_DMA_Init+0x1d8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d022      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c04 <HAL_DMA_Init+0x1dc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d01d      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a28      	ldr	r2, [pc, #160]	@ (8002c08 <HAL_DMA_Init+0x1e0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d018      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a27      	ldr	r2, [pc, #156]	@ (8002c0c <HAL_DMA_Init+0x1e4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a25      	ldr	r2, [pc, #148]	@ (8002c10 <HAL_DMA_Init+0x1e8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00e      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <HAL_DMA_Init+0x1ec>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <HAL_DMA_Init+0x1f0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <HAL_DMA_Init+0x1f4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <HAL_DMA_Init+0x186>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_DMA_Init+0x196>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bbe:	e02f      	b.n	8002c20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc0:	f7ff fe14 	bl	80027ec <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d928      	bls.n	8002c20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e2ad      	b.n	800313c <HAL_DMA_Init+0x714>
 8002be0:	40020010 	.word	0x40020010
 8002be4:	40020028 	.word	0x40020028
 8002be8:	40020040 	.word	0x40020040
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	40020070 	.word	0x40020070
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	400200a0 	.word	0x400200a0
 8002bfc:	400200b8 	.word	0x400200b8
 8002c00:	40020410 	.word	0x40020410
 8002c04:	40020428 	.word	0x40020428
 8002c08:	40020440 	.word	0x40020440
 8002c0c:	40020458 	.word	0x40020458
 8002c10:	40020470 	.word	0x40020470
 8002c14:	40020488 	.word	0x40020488
 8002c18:	400204a0 	.word	0x400204a0
 8002c1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1c8      	bne.n	8002bc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4b73      	ldr	r3, [pc, #460]	@ (8002e08 <HAL_DMA_Init+0x3e0>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d107      	bne.n	8002c84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b28      	cmp	r3, #40	@ 0x28
 8002c8a:	d903      	bls.n	8002c94 <HAL_DMA_Init+0x26c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c92:	d91f      	bls.n	8002cd4 <HAL_DMA_Init+0x2ac>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c9a:	d903      	bls.n	8002ca4 <HAL_DMA_Init+0x27c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b42      	cmp	r3, #66	@ 0x42
 8002ca2:	d917      	bls.n	8002cd4 <HAL_DMA_Init+0x2ac>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b46      	cmp	r3, #70	@ 0x46
 8002caa:	d903      	bls.n	8002cb4 <HAL_DMA_Init+0x28c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b48      	cmp	r3, #72	@ 0x48
 8002cb2:	d90f      	bls.n	8002cd4 <HAL_DMA_Init+0x2ac>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b4e      	cmp	r3, #78	@ 0x4e
 8002cba:	d903      	bls.n	8002cc4 <HAL_DMA_Init+0x29c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b52      	cmp	r3, #82	@ 0x52
 8002cc2:	d907      	bls.n	8002cd4 <HAL_DMA_Init+0x2ac>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b73      	cmp	r3, #115	@ 0x73
 8002cca:	d905      	bls.n	8002cd8 <HAL_DMA_Init+0x2b0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b77      	cmp	r3, #119	@ 0x77
 8002cd2:	d801      	bhi.n	8002cd8 <HAL_DMA_Init+0x2b0>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_DMA_Init+0x2b2>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ce4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 0307 	bic.w	r3, r3, #7
 8002cfc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d117      	bne.n	8002d40 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f002 fb5c 	bl	80053e0 <DMA_CheckFifoParam>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2240      	movs	r2, #64	@ 0x40
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e1fd      	b.n	800313c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f002 fa97 	bl	800527c <DMA_CalcBaseAndBitshift>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	223f      	movs	r2, #63	@ 0x3f
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	e0fd      	b.n	8002f60 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a28      	ldr	r2, [pc, #160]	@ (8002e0c <HAL_DMA_Init+0x3e4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a27      	ldr	r2, [pc, #156]	@ (8002e10 <HAL_DMA_Init+0x3e8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <HAL_DMA_Init+0x3ec>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <HAL_DMA_Init+0x3f0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a22      	ldr	r2, [pc, #136]	@ (8002e1c <HAL_DMA_Init+0x3f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	@ (8002e20 <HAL_DMA_Init+0x3f8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e24 <HAL_DMA_Init+0x3fc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	@ (8002e28 <HAL_DMA_Init+0x400>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <HAL_DMA_Init+0x404>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <HAL_DMA_Init+0x408>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <HAL_DMA_Init+0x40c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <HAL_DMA_Init+0x410>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a16      	ldr	r2, [pc, #88]	@ (8002e3c <HAL_DMA_Init+0x414>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a15      	ldr	r2, [pc, #84]	@ (8002e40 <HAL_DMA_Init+0x418>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <HAL_DMA_Init+0x41c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Init+0x3dc>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <HAL_DMA_Init+0x420>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d123      	bne.n	8002e4c <HAL_DMA_Init+0x424>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e022      	b.n	8002e4e <HAL_DMA_Init+0x426>
 8002e08:	fe10803f 	.word	0xfe10803f
 8002e0c:	48022c08 	.word	0x48022c08
 8002e10:	48022c1c 	.word	0x48022c1c
 8002e14:	48022c30 	.word	0x48022c30
 8002e18:	48022c44 	.word	0x48022c44
 8002e1c:	48022c58 	.word	0x48022c58
 8002e20:	48022c6c 	.word	0x48022c6c
 8002e24:	48022c80 	.word	0x48022c80
 8002e28:	48022c94 	.word	0x48022c94
 8002e2c:	58025408 	.word	0x58025408
 8002e30:	5802541c 	.word	0x5802541c
 8002e34:	58025430 	.word	0x58025430
 8002e38:	58025444 	.word	0x58025444
 8002e3c:	58025458 	.word	0x58025458
 8002e40:	5802546c 	.word	0x5802546c
 8002e44:	58025480 	.word	0x58025480
 8002e48:	58025494 	.word	0x58025494
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d07d      	beq.n	8002f4e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7f      	ldr	r2, [pc, #508]	@ (8003054 <HAL_DMA_Init+0x62c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d021      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a7d      	ldr	r2, [pc, #500]	@ (8003058 <HAL_DMA_Init+0x630>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01c      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800305c <HAL_DMA_Init+0x634>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d017      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7a      	ldr	r2, [pc, #488]	@ (8003060 <HAL_DMA_Init+0x638>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d012      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a79      	ldr	r2, [pc, #484]	@ (8003064 <HAL_DMA_Init+0x63c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00d      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a77      	ldr	r2, [pc, #476]	@ (8003068 <HAL_DMA_Init+0x640>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d008      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a76      	ldr	r2, [pc, #472]	@ (800306c <HAL_DMA_Init+0x644>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_Init+0x478>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a74      	ldr	r2, [pc, #464]	@ (8003070 <HAL_DMA_Init+0x648>)
 8002e9e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4b6e      	ldr	r3, [pc, #440]	@ (8003074 <HAL_DMA_Init+0x64c>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d008      	beq.n	8002eda <HAL_DMA_Init+0x4b2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b80      	cmp	r3, #128	@ 0x80
 8002ece:	d102      	bne.n	8002ed6 <HAL_DMA_Init+0x4ae>
 8002ed0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ed4:	e002      	b.n	8002edc <HAL_DMA_Init+0x4b4>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <HAL_DMA_Init+0x4b4>
 8002eda:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68d2      	ldr	r2, [r2, #12]
 8002ee0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ee2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002eea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ef2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002efa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f02:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f0a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b55      	ldr	r3, [pc, #340]	@ (8003078 <HAL_DMA_Init+0x650>)
 8002f22:	4413      	add	r3, r2
 8002f24:	4a55      	ldr	r2, [pc, #340]	@ (800307c <HAL_DMA_Init+0x654>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	009a      	lsls	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f002 f9a2 	bl	800527c <DMA_CalcBaseAndBitshift>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2201      	movs	r2, #1
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e008      	b.n	8002f60 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2240      	movs	r2, #64	@ 0x40
 8002f52:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2203      	movs	r2, #3
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0ed      	b.n	800313c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a46      	ldr	r2, [pc, #280]	@ (8003080 <HAL_DMA_Init+0x658>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d072      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a45      	ldr	r2, [pc, #276]	@ (8003084 <HAL_DMA_Init+0x65c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d06d      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a43      	ldr	r2, [pc, #268]	@ (8003088 <HAL_DMA_Init+0x660>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d068      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a42      	ldr	r2, [pc, #264]	@ (800308c <HAL_DMA_Init+0x664>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d063      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a40      	ldr	r2, [pc, #256]	@ (8003090 <HAL_DMA_Init+0x668>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d05e      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3f      	ldr	r2, [pc, #252]	@ (8003094 <HAL_DMA_Init+0x66c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d059      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8003098 <HAL_DMA_Init+0x670>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d054      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a3c      	ldr	r2, [pc, #240]	@ (800309c <HAL_DMA_Init+0x674>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04f      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80030a0 <HAL_DMA_Init+0x678>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d04a      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a39      	ldr	r2, [pc, #228]	@ (80030a4 <HAL_DMA_Init+0x67c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d045      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a37      	ldr	r2, [pc, #220]	@ (80030a8 <HAL_DMA_Init+0x680>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d040      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	@ (80030ac <HAL_DMA_Init+0x684>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d03b      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a34      	ldr	r2, [pc, #208]	@ (80030b0 <HAL_DMA_Init+0x688>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d036      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a33      	ldr	r2, [pc, #204]	@ (80030b4 <HAL_DMA_Init+0x68c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d031      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a31      	ldr	r2, [pc, #196]	@ (80030b8 <HAL_DMA_Init+0x690>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02c      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a30      	ldr	r2, [pc, #192]	@ (80030bc <HAL_DMA_Init+0x694>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d027      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a13      	ldr	r2, [pc, #76]	@ (8003054 <HAL_DMA_Init+0x62c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d022      	beq.n	8003050 <HAL_DMA_Init+0x628>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <HAL_DMA_Init+0x630>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d01d      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a10      	ldr	r2, [pc, #64]	@ (800305c <HAL_DMA_Init+0x634>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d018      	beq.n	8003050 <HAL_DMA_Init+0x628>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a0f      	ldr	r2, [pc, #60]	@ (8003060 <HAL_DMA_Init+0x638>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <HAL_DMA_Init+0x63c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00e      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <HAL_DMA_Init+0x640>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d009      	beq.n	8003050 <HAL_DMA_Init+0x628>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <HAL_DMA_Init+0x644>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_DMA_Init+0x628>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_DMA_Init+0x648>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d137      	bne.n	80030c0 <HAL_DMA_Init+0x698>
 8003050:	2301      	movs	r3, #1
 8003052:	e036      	b.n	80030c2 <HAL_DMA_Init+0x69a>
 8003054:	58025408 	.word	0x58025408
 8003058:	5802541c 	.word	0x5802541c
 800305c:	58025430 	.word	0x58025430
 8003060:	58025444 	.word	0x58025444
 8003064:	58025458 	.word	0x58025458
 8003068:	5802546c 	.word	0x5802546c
 800306c:	58025480 	.word	0x58025480
 8003070:	58025494 	.word	0x58025494
 8003074:	fffe000f 	.word	0xfffe000f
 8003078:	a7fdabf8 	.word	0xa7fdabf8
 800307c:	cccccccd 	.word	0xcccccccd
 8003080:	40020010 	.word	0x40020010
 8003084:	40020028 	.word	0x40020028
 8003088:	40020040 	.word	0x40020040
 800308c:	40020058 	.word	0x40020058
 8003090:	40020070 	.word	0x40020070
 8003094:	40020088 	.word	0x40020088
 8003098:	400200a0 	.word	0x400200a0
 800309c:	400200b8 	.word	0x400200b8
 80030a0:	40020410 	.word	0x40020410
 80030a4:	40020428 	.word	0x40020428
 80030a8:	40020440 	.word	0x40020440
 80030ac:	40020458 	.word	0x40020458
 80030b0:	40020470 	.word	0x40020470
 80030b4:	40020488 	.word	0x40020488
 80030b8:	400204a0 	.word	0x400204a0
 80030bc:	400204b8 	.word	0x400204b8
 80030c0:	2300      	movs	r3, #0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d032      	beq.n	800312c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f002 fa06 	bl	80054d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b80      	cmp	r3, #128	@ 0x80
 80030d2:	d102      	bne.n	80030da <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030ee:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d010      	beq.n	800311a <HAL_DMA_Init+0x6f2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d80c      	bhi.n	800311a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f002 fa83 	bl	800560c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	e008      	b.n	800312c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e27e      	b.n	8003654 <HAL_DMA_DeInit+0x510>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6d      	ldr	r2, [pc, #436]	@ (8003310 <HAL_DMA_DeInit+0x1cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	@ (8003314 <HAL_DMA_DeInit+0x1d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6a      	ldr	r2, [pc, #424]	@ (8003318 <HAL_DMA_DeInit+0x1d4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	@ (800331c <HAL_DMA_DeInit+0x1d8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a67      	ldr	r2, [pc, #412]	@ (8003320 <HAL_DMA_DeInit+0x1dc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a65      	ldr	r2, [pc, #404]	@ (8003324 <HAL_DMA_DeInit+0x1e0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a64      	ldr	r2, [pc, #400]	@ (8003328 <HAL_DMA_DeInit+0x1e4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a62      	ldr	r2, [pc, #392]	@ (800332c <HAL_DMA_DeInit+0x1e8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a61      	ldr	r2, [pc, #388]	@ (8003330 <HAL_DMA_DeInit+0x1ec>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003334 <HAL_DMA_DeInit+0x1f0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_DMA_DeInit+0x1f4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5c      	ldr	r2, [pc, #368]	@ (800333c <HAL_DMA_DeInit+0x1f8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003340 <HAL_DMA_DeInit+0x1fc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <HAL_DMA_DeInit+0x200>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <HAL_DMA_DeInit+0x204>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_DeInit+0xb2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a56      	ldr	r2, [pc, #344]	@ (800334c <HAL_DMA_DeInit+0x208>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <HAL_DMA_DeInit+0xc4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e007      	b.n	8003218 <HAL_DMA_DeInit+0xd4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3c      	ldr	r2, [pc, #240]	@ (8003310 <HAL_DMA_DeInit+0x1cc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04a      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a3b      	ldr	r2, [pc, #236]	@ (8003314 <HAL_DMA_DeInit+0x1d0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d045      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a39      	ldr	r2, [pc, #228]	@ (8003318 <HAL_DMA_DeInit+0x1d4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d040      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a38      	ldr	r2, [pc, #224]	@ (800331c <HAL_DMA_DeInit+0x1d8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d03b      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a36      	ldr	r2, [pc, #216]	@ (8003320 <HAL_DMA_DeInit+0x1dc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d036      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a35      	ldr	r2, [pc, #212]	@ (8003324 <HAL_DMA_DeInit+0x1e0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a33      	ldr	r2, [pc, #204]	@ (8003328 <HAL_DMA_DeInit+0x1e4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02c      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a32      	ldr	r2, [pc, #200]	@ (800332c <HAL_DMA_DeInit+0x1e8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d027      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a30      	ldr	r2, [pc, #192]	@ (8003330 <HAL_DMA_DeInit+0x1ec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2f      	ldr	r2, [pc, #188]	@ (8003334 <HAL_DMA_DeInit+0x1f0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d01d      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2d      	ldr	r2, [pc, #180]	@ (8003338 <HAL_DMA_DeInit+0x1f4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2c      	ldr	r2, [pc, #176]	@ (800333c <HAL_DMA_DeInit+0x1f8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2a      	ldr	r2, [pc, #168]	@ (8003340 <HAL_DMA_DeInit+0x1fc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <HAL_DMA_DeInit+0x200>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_DMA_DeInit+0x204>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_DeInit+0x174>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a26      	ldr	r2, [pc, #152]	@ (800334c <HAL_DMA_DeInit+0x208>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_DeInit+0x178>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_DMA_DeInit+0x17a>
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d046      	beq.n	8003350 <HAL_DMA_DeInit+0x20c>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2221      	movs	r2, #33	@ 0x21
 80032f0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f001 ffc2 	bl	800527c <DMA_CalcBaseAndBitshift>
 80032f8:	4603      	mov	r3, r0
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	223f      	movs	r2, #63	@ 0x3f
 8003306:	409a      	lsls	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e099      	b.n	8003442 <HAL_DMA_DeInit+0x2fe>
 800330e:	bf00      	nop
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a78      	ldr	r2, [pc, #480]	@ (8003538 <HAL_DMA_DeInit+0x3f4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d04a      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a77      	ldr	r2, [pc, #476]	@ (800353c <HAL_DMA_DeInit+0x3f8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d045      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a75      	ldr	r2, [pc, #468]	@ (8003540 <HAL_DMA_DeInit+0x3fc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d040      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a74      	ldr	r2, [pc, #464]	@ (8003544 <HAL_DMA_DeInit+0x400>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d03b      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a72      	ldr	r2, [pc, #456]	@ (8003548 <HAL_DMA_DeInit+0x404>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d036      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a71      	ldr	r2, [pc, #452]	@ (800354c <HAL_DMA_DeInit+0x408>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d031      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6f      	ldr	r2, [pc, #444]	@ (8003550 <HAL_DMA_DeInit+0x40c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d02c      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6e      	ldr	r2, [pc, #440]	@ (8003554 <HAL_DMA_DeInit+0x410>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d027      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6c      	ldr	r2, [pc, #432]	@ (8003558 <HAL_DMA_DeInit+0x414>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d022      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6b      	ldr	r2, [pc, #428]	@ (800355c <HAL_DMA_DeInit+0x418>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d01d      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a69      	ldr	r2, [pc, #420]	@ (8003560 <HAL_DMA_DeInit+0x41c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a68      	ldr	r2, [pc, #416]	@ (8003564 <HAL_DMA_DeInit+0x420>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a66      	ldr	r2, [pc, #408]	@ (8003568 <HAL_DMA_DeInit+0x424>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a65      	ldr	r2, [pc, #404]	@ (800356c <HAL_DMA_DeInit+0x428>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a63      	ldr	r2, [pc, #396]	@ (8003570 <HAL_DMA_DeInit+0x42c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_DMA_DeInit+0x2ac>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a62      	ldr	r2, [pc, #392]	@ (8003574 <HAL_DMA_DeInit+0x430>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_DMA_DeInit+0x2b0>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_DMA_DeInit+0x2b2>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d021      	beq.n	800343e <HAL_DMA_DeInit+0x2fa>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 ff2a 	bl	800527c <DMA_CalcBaseAndBitshift>
 8003428:	4603      	mov	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	e001      	b.n	8003442 <HAL_DMA_DeInit+0x2fe>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e108      	b.n	8003654 <HAL_DMA_DeInit+0x510>
  }

#if defined (BDMA1) /* No DMAMUX available for BDMA1 available on  STM32H7Ax/Bx devices only */
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4c      	ldr	r2, [pc, #304]	@ (8003578 <HAL_DMA_DeInit+0x434>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d072      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <HAL_DMA_DeInit+0x438>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d06d      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a49      	ldr	r2, [pc, #292]	@ (8003580 <HAL_DMA_DeInit+0x43c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d068      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a47      	ldr	r2, [pc, #284]	@ (8003584 <HAL_DMA_DeInit+0x440>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d063      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a46      	ldr	r2, [pc, #280]	@ (8003588 <HAL_DMA_DeInit+0x444>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d05e      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a44      	ldr	r2, [pc, #272]	@ (800358c <HAL_DMA_DeInit+0x448>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d059      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a43      	ldr	r2, [pc, #268]	@ (8003590 <HAL_DMA_DeInit+0x44c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d054      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a41      	ldr	r2, [pc, #260]	@ (8003594 <HAL_DMA_DeInit+0x450>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04f      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a40      	ldr	r2, [pc, #256]	@ (8003598 <HAL_DMA_DeInit+0x454>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a3e      	ldr	r2, [pc, #248]	@ (800359c <HAL_DMA_DeInit+0x458>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3d      	ldr	r2, [pc, #244]	@ (80035a0 <HAL_DMA_DeInit+0x45c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3b      	ldr	r2, [pc, #236]	@ (80035a4 <HAL_DMA_DeInit+0x460>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3a      	ldr	r2, [pc, #232]	@ (80035a8 <HAL_DMA_DeInit+0x464>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_DMA_DeInit+0x468>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <HAL_DMA_DeInit+0x46c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a35      	ldr	r2, [pc, #212]	@ (80035b4 <HAL_DMA_DeInit+0x470>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003558 <HAL_DMA_DeInit+0x414>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <HAL_DMA_DeInit+0x418>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a19      	ldr	r2, [pc, #100]	@ (8003560 <HAL_DMA_DeInit+0x41c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <HAL_DMA_DeInit+0x420>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a16      	ldr	r2, [pc, #88]	@ (8003568 <HAL_DMA_DeInit+0x424>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a14      	ldr	r2, [pc, #80]	@ (800356c <HAL_DMA_DeInit+0x428>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <HAL_DMA_DeInit+0x42c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_DeInit+0x3ee>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a11      	ldr	r2, [pc, #68]	@ (8003574 <HAL_DMA_DeInit+0x430>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d142      	bne.n	80035b8 <HAL_DMA_DeInit+0x474>
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_DMA_DeInit+0x476>
 8003536:	bf00      	nop
 8003538:	48022c08 	.word	0x48022c08
 800353c:	48022c1c 	.word	0x48022c1c
 8003540:	48022c30 	.word	0x48022c30
 8003544:	48022c44 	.word	0x48022c44
 8003548:	48022c58 	.word	0x48022c58
 800354c:	48022c6c 	.word	0x48022c6c
 8003550:	48022c80 	.word	0x48022c80
 8003554:	48022c94 	.word	0x48022c94
 8003558:	58025408 	.word	0x58025408
 800355c:	5802541c 	.word	0x5802541c
 8003560:	58025430 	.word	0x58025430
 8003564:	58025444 	.word	0x58025444
 8003568:	58025458 	.word	0x58025458
 800356c:	5802546c 	.word	0x5802546c
 8003570:	58025480 	.word	0x58025480
 8003574:	58025494 	.word	0x58025494
 8003578:	40020010 	.word	0x40020010
 800357c:	40020028 	.word	0x40020028
 8003580:	40020040 	.word	0x40020040
 8003584:	40020058 	.word	0x40020058
 8003588:	40020070 	.word	0x40020070
 800358c:	40020088 	.word	0x40020088
 8003590:	400200a0 	.word	0x400200a0
 8003594:	400200b8 	.word	0x400200b8
 8003598:	40020410 	.word	0x40020410
 800359c:	40020428 	.word	0x40020428
 80035a0:	40020440 	.word	0x40020440
 80035a4:	40020458 	.word	0x40020458
 80035a8:	40020470 	.word	0x40020470
 80035ac:	40020488 	.word	0x40020488
 80035b0:	400204a0 	.word	0x400204a0
 80035b4:	400204b8 	.word	0x400204b8
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02c      	beq.n	8003618 <HAL_DMA_DeInit+0x4d4>
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 ff8a 	bl	80054d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_DMA_DeInit+0x49a>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035dc:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00f      	beq.n	8003606 <HAL_DMA_DeInit+0x4c2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d80b      	bhi.n	8003606 <HAL_DMA_DeInit+0x4c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f002 f80c 	bl	800560c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003604:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e226      	b.n	8003ac6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_DMA_Start_IT+0x2a>
 8003682:	2302      	movs	r3, #2
 8003684:	e21f      	b.n	8003ac6 <HAL_DMA_Start_IT+0x46a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	f040 820a 	bne.w	8003ab0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a68      	ldr	r2, [pc, #416]	@ (8003850 <HAL_DMA_Start_IT+0x1f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a66      	ldr	r2, [pc, #408]	@ (8003854 <HAL_DMA_Start_IT+0x1f8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a65      	ldr	r2, [pc, #404]	@ (8003858 <HAL_DMA_Start_IT+0x1fc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a63      	ldr	r2, [pc, #396]	@ (800385c <HAL_DMA_Start_IT+0x200>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a62      	ldr	r2, [pc, #392]	@ (8003860 <HAL_DMA_Start_IT+0x204>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a60      	ldr	r2, [pc, #384]	@ (8003864 <HAL_DMA_Start_IT+0x208>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003868 <HAL_DMA_Start_IT+0x20c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a5d      	ldr	r2, [pc, #372]	@ (800386c <HAL_DMA_Start_IT+0x210>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003870 <HAL_DMA_Start_IT+0x214>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_DMA_Start_IT+0x218>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a59      	ldr	r2, [pc, #356]	@ (8003878 <HAL_DMA_Start_IT+0x21c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a57      	ldr	r2, [pc, #348]	@ (800387c <HAL_DMA_Start_IT+0x220>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_DMA_Start_IT+0x224>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a54      	ldr	r2, [pc, #336]	@ (8003884 <HAL_DMA_Start_IT+0x228>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a53      	ldr	r2, [pc, #332]	@ (8003888 <HAL_DMA_Start_IT+0x22c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_Start_IT+0xee>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a51      	ldr	r2, [pc, #324]	@ (800388c <HAL_DMA_Start_IT+0x230>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <HAL_DMA_Start_IT+0x100>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e007      	b.n	800376c <HAL_DMA_Start_IT+0x110>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f001 fb9e 	bl	8004eb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <HAL_DMA_Start_IT+0x1f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04a      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a33      	ldr	r2, [pc, #204]	@ (8003854 <HAL_DMA_Start_IT+0x1f8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d045      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_DMA_Start_IT+0x1fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d040      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a30      	ldr	r2, [pc, #192]	@ (800385c <HAL_DMA_Start_IT+0x200>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d03b      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003860 <HAL_DMA_Start_IT+0x204>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d036      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <HAL_DMA_Start_IT+0x208>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d031      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <HAL_DMA_Start_IT+0x20c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02c      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <HAL_DMA_Start_IT+0x210>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d027      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <HAL_DMA_Start_IT+0x214>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d022      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a27      	ldr	r2, [pc, #156]	@ (8003874 <HAL_DMA_Start_IT+0x218>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01d      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <HAL_DMA_Start_IT+0x21c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a24      	ldr	r2, [pc, #144]	@ (800387c <HAL_DMA_Start_IT+0x220>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <HAL_DMA_Start_IT+0x224>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <HAL_DMA_Start_IT+0x228>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <HAL_DMA_Start_IT+0x22c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_Start_IT+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	@ (800388c <HAL_DMA_Start_IT+0x230>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_DMA_Start_IT+0x1c0>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <HAL_DMA_Start_IT+0x1c2>
 800381c:	2300      	movs	r3, #0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 021e 	bic.w	r2, r3, #30
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0216 	orr.w	r2, r2, #22
 8003834:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03e      	beq.n	80038bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0208 	orr.w	r2, r2, #8
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e035      	b.n	80038bc <HAL_DMA_Start_IT+0x260>
 8003850:	40020010 	.word	0x40020010
 8003854:	40020028 	.word	0x40020028
 8003858:	40020040 	.word	0x40020040
 800385c:	40020058 	.word	0x40020058
 8003860:	40020070 	.word	0x40020070
 8003864:	40020088 	.word	0x40020088
 8003868:	400200a0 	.word	0x400200a0
 800386c:	400200b8 	.word	0x400200b8
 8003870:	40020410 	.word	0x40020410
 8003874:	40020428 	.word	0x40020428
 8003878:	40020440 	.word	0x40020440
 800387c:	40020458 	.word	0x40020458
 8003880:	40020470 	.word	0x40020470
 8003884:	40020488 	.word	0x40020488
 8003888:	400204a0 	.word	0x400204a0
 800388c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 020e 	bic.w	r2, r3, #14
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 020a 	orr.w	r2, r2, #10
 80038a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0204 	orr.w	r2, r2, #4
 80038ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a83      	ldr	r2, [pc, #524]	@ (8003ad0 <HAL_DMA_Start_IT+0x474>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d072      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a82      	ldr	r2, [pc, #520]	@ (8003ad4 <HAL_DMA_Start_IT+0x478>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d06d      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a80      	ldr	r2, [pc, #512]	@ (8003ad8 <HAL_DMA_Start_IT+0x47c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d068      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7f      	ldr	r2, [pc, #508]	@ (8003adc <HAL_DMA_Start_IT+0x480>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d063      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ae0 <HAL_DMA_Start_IT+0x484>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d05e      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae4 <HAL_DMA_Start_IT+0x488>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d059      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ae8 <HAL_DMA_Start_IT+0x48c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d054      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a79      	ldr	r2, [pc, #484]	@ (8003aec <HAL_DMA_Start_IT+0x490>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04f      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a77      	ldr	r2, [pc, #476]	@ (8003af0 <HAL_DMA_Start_IT+0x494>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a76      	ldr	r2, [pc, #472]	@ (8003af4 <HAL_DMA_Start_IT+0x498>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a74      	ldr	r2, [pc, #464]	@ (8003af8 <HAL_DMA_Start_IT+0x49c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a73      	ldr	r2, [pc, #460]	@ (8003afc <HAL_DMA_Start_IT+0x4a0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a71      	ldr	r2, [pc, #452]	@ (8003b00 <HAL_DMA_Start_IT+0x4a4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a70      	ldr	r2, [pc, #448]	@ (8003b04 <HAL_DMA_Start_IT+0x4a8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b08 <HAL_DMA_Start_IT+0x4ac>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6d      	ldr	r2, [pc, #436]	@ (8003b0c <HAL_DMA_Start_IT+0x4b0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6b      	ldr	r2, [pc, #428]	@ (8003b10 <HAL_DMA_Start_IT+0x4b4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6a      	ldr	r2, [pc, #424]	@ (8003b14 <HAL_DMA_Start_IT+0x4b8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a68      	ldr	r2, [pc, #416]	@ (8003b18 <HAL_DMA_Start_IT+0x4bc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a67      	ldr	r2, [pc, #412]	@ (8003b1c <HAL_DMA_Start_IT+0x4c0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <HAL_DMA_Start_IT+0x4c4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a64      	ldr	r2, [pc, #400]	@ (8003b24 <HAL_DMA_Start_IT+0x4c8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a62      	ldr	r2, [pc, #392]	@ (8003b28 <HAL_DMA_Start_IT+0x4cc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Start_IT+0x350>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a61      	ldr	r2, [pc, #388]	@ (8003b2c <HAL_DMA_Start_IT+0x4d0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x354>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_Start_IT+0x356>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01a      	beq.n	80039ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a37      	ldr	r2, [pc, #220]	@ (8003ad0 <HAL_DMA_Start_IT+0x474>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d04a      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a36      	ldr	r2, [pc, #216]	@ (8003ad4 <HAL_DMA_Start_IT+0x478>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d045      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a34      	ldr	r2, [pc, #208]	@ (8003ad8 <HAL_DMA_Start_IT+0x47c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d040      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a33      	ldr	r2, [pc, #204]	@ (8003adc <HAL_DMA_Start_IT+0x480>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d03b      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a31      	ldr	r2, [pc, #196]	@ (8003ae0 <HAL_DMA_Start_IT+0x484>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d036      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a30      	ldr	r2, [pc, #192]	@ (8003ae4 <HAL_DMA_Start_IT+0x488>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d031      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae8 <HAL_DMA_Start_IT+0x48c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2d      	ldr	r2, [pc, #180]	@ (8003aec <HAL_DMA_Start_IT+0x490>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d027      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2b      	ldr	r2, [pc, #172]	@ (8003af0 <HAL_DMA_Start_IT+0x494>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d022      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003af4 <HAL_DMA_Start_IT+0x498>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d01d      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a28      	ldr	r2, [pc, #160]	@ (8003af8 <HAL_DMA_Start_IT+0x49c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <HAL_DMA_Start_IT+0x4a0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a25      	ldr	r2, [pc, #148]	@ (8003b00 <HAL_DMA_Start_IT+0x4a4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a24      	ldr	r2, [pc, #144]	@ (8003b04 <HAL_DMA_Start_IT+0x4a8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a22      	ldr	r2, [pc, #136]	@ (8003b08 <HAL_DMA_Start_IT+0x4ac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_DMA_Start_IT+0x430>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a21      	ldr	r2, [pc, #132]	@ (8003b0c <HAL_DMA_Start_IT+0x4b0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <HAL_DMA_Start_IT+0x442>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e012      	b.n	8003ac4 <HAL_DMA_Start_IT+0x468>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e009      	b.n	8003ac4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40020010 	.word	0x40020010
 8003ad4:	40020028 	.word	0x40020028
 8003ad8:	40020040 	.word	0x40020040
 8003adc:	40020058 	.word	0x40020058
 8003ae0:	40020070 	.word	0x40020070
 8003ae4:	40020088 	.word	0x40020088
 8003ae8:	400200a0 	.word	0x400200a0
 8003aec:	400200b8 	.word	0x400200b8
 8003af0:	40020410 	.word	0x40020410
 8003af4:	40020428 	.word	0x40020428
 8003af8:	40020440 	.word	0x40020440
 8003afc:	40020458 	.word	0x40020458
 8003b00:	40020470 	.word	0x40020470
 8003b04:	40020488 	.word	0x40020488
 8003b08:	400204a0 	.word	0x400204a0
 8003b0c:	400204b8 	.word	0x400204b8
 8003b10:	58025408 	.word	0x58025408
 8003b14:	5802541c 	.word	0x5802541c
 8003b18:	58025430 	.word	0x58025430
 8003b1c:	58025444 	.word	0x58025444
 8003b20:	58025458 	.word	0x58025458
 8003b24:	5802546c 	.word	0x5802546c
 8003b28:	58025480 	.word	0x58025480
 8003b2c:	58025494 	.word	0x58025494

08003b30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e237      	b.n	8003fb2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d004      	beq.n	8003b58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2280      	movs	r2, #128	@ 0x80
 8003b52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e22c      	b.n	8003fb2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003cd0 <HAL_DMA_Abort_IT+0x1a0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04a      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd4 <HAL_DMA_Abort_IT+0x1a4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d045      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a59      	ldr	r2, [pc, #356]	@ (8003cd8 <HAL_DMA_Abort_IT+0x1a8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d040      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a58      	ldr	r2, [pc, #352]	@ (8003cdc <HAL_DMA_Abort_IT+0x1ac>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d03b      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a56      	ldr	r2, [pc, #344]	@ (8003ce0 <HAL_DMA_Abort_IT+0x1b0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d036      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a55      	ldr	r2, [pc, #340]	@ (8003ce4 <HAL_DMA_Abort_IT+0x1b4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d031      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a53      	ldr	r2, [pc, #332]	@ (8003ce8 <HAL_DMA_Abort_IT+0x1b8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02c      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a52      	ldr	r2, [pc, #328]	@ (8003cec <HAL_DMA_Abort_IT+0x1bc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d027      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a50      	ldr	r2, [pc, #320]	@ (8003cf0 <HAL_DMA_Abort_IT+0x1c0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4f      	ldr	r2, [pc, #316]	@ (8003cf4 <HAL_DMA_Abort_IT+0x1c4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01d      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf8 <HAL_DMA_Abort_IT+0x1c8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4c      	ldr	r2, [pc, #304]	@ (8003cfc <HAL_DMA_Abort_IT+0x1cc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d00 <HAL_DMA_Abort_IT+0x1d0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a49      	ldr	r2, [pc, #292]	@ (8003d04 <HAL_DMA_Abort_IT+0x1d4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a47      	ldr	r2, [pc, #284]	@ (8003d08 <HAL_DMA_Abort_IT+0x1d8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0xc8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a46      	ldr	r2, [pc, #280]	@ (8003d0c <HAL_DMA_Abort_IT+0x1dc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Abort_IT+0xcc>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_DMA_Abort_IT+0xce>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8086 	beq.w	8003d10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2204      	movs	r2, #4
 8003c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd0 <HAL_DMA_Abort_IT+0x1a0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d04a      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd4 <HAL_DMA_Abort_IT+0x1a4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d045      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd8 <HAL_DMA_Abort_IT+0x1a8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d040      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cdc <HAL_DMA_Abort_IT+0x1ac>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d03b      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a29      	ldr	r2, [pc, #164]	@ (8003ce0 <HAL_DMA_Abort_IT+0x1b0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d036      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a28      	ldr	r2, [pc, #160]	@ (8003ce4 <HAL_DMA_Abort_IT+0x1b4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d031      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	@ (8003ce8 <HAL_DMA_Abort_IT+0x1b8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02c      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a25      	ldr	r2, [pc, #148]	@ (8003cec <HAL_DMA_Abort_IT+0x1bc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d027      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a23      	ldr	r2, [pc, #140]	@ (8003cf0 <HAL_DMA_Abort_IT+0x1c0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <HAL_DMA_Abort_IT+0x1c4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d01d      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <HAL_DMA_Abort_IT+0x1c8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cfc <HAL_DMA_Abort_IT+0x1cc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <HAL_DMA_Abort_IT+0x1d0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_DMA_Abort_IT+0x1d4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d08 <HAL_DMA_Abort_IT+0x1d8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_DMA_Abort_IT+0x17c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a19      	ldr	r2, [pc, #100]	@ (8003d0c <HAL_DMA_Abort_IT+0x1dc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <HAL_DMA_Abort_IT+0x18e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e178      	b.n	8003fb0 <HAL_DMA_Abort_IT+0x480>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e16f      	b.n	8003fb0 <HAL_DMA_Abort_IT+0x480>
 8003cd0:	40020010 	.word	0x40020010
 8003cd4:	40020028 	.word	0x40020028
 8003cd8:	40020040 	.word	0x40020040
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	40020070 	.word	0x40020070
 8003ce4:	40020088 	.word	0x40020088
 8003ce8:	400200a0 	.word	0x400200a0
 8003cec:	400200b8 	.word	0x400200b8
 8003cf0:	40020410 	.word	0x40020410
 8003cf4:	40020428 	.word	0x40020428
 8003cf8:	40020440 	.word	0x40020440
 8003cfc:	40020458 	.word	0x40020458
 8003d00:	40020470 	.word	0x40020470
 8003d04:	40020488 	.word	0x40020488
 8003d08:	400204a0 	.word	0x400204a0
 8003d0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 020e 	bic.w	r2, r2, #14
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6c      	ldr	r2, [pc, #432]	@ (8003ed8 <HAL_DMA_Abort_IT+0x3a8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04a      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8003edc <HAL_DMA_Abort_IT+0x3ac>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d045      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a69      	ldr	r2, [pc, #420]	@ (8003ee0 <HAL_DMA_Abort_IT+0x3b0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d040      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a68      	ldr	r2, [pc, #416]	@ (8003ee4 <HAL_DMA_Abort_IT+0x3b4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d03b      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a66      	ldr	r2, [pc, #408]	@ (8003ee8 <HAL_DMA_Abort_IT+0x3b8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d036      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a65      	ldr	r2, [pc, #404]	@ (8003eec <HAL_DMA_Abort_IT+0x3bc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d031      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a63      	ldr	r2, [pc, #396]	@ (8003ef0 <HAL_DMA_Abort_IT+0x3c0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02c      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a62      	ldr	r2, [pc, #392]	@ (8003ef4 <HAL_DMA_Abort_IT+0x3c4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d027      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a60      	ldr	r2, [pc, #384]	@ (8003ef8 <HAL_DMA_Abort_IT+0x3c8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d022      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8003efc <HAL_DMA_Abort_IT+0x3cc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d01d      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a5d      	ldr	r2, [pc, #372]	@ (8003f00 <HAL_DMA_Abort_IT+0x3d0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a5c      	ldr	r2, [pc, #368]	@ (8003f04 <HAL_DMA_Abort_IT+0x3d4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003f08 <HAL_DMA_Abort_IT+0x3d8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a59      	ldr	r2, [pc, #356]	@ (8003f0c <HAL_DMA_Abort_IT+0x3dc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a57      	ldr	r2, [pc, #348]	@ (8003f10 <HAL_DMA_Abort_IT+0x3e0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x290>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a56      	ldr	r2, [pc, #344]	@ (8003f14 <HAL_DMA_Abort_IT+0x3e4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <HAL_DMA_Abort_IT+0x2a2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e007      	b.n	8003de2 <HAL_DMA_Abort_IT+0x2b2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed8 <HAL_DMA_Abort_IT+0x3a8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d072      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3a      	ldr	r2, [pc, #232]	@ (8003edc <HAL_DMA_Abort_IT+0x3ac>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d06d      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a39      	ldr	r2, [pc, #228]	@ (8003ee0 <HAL_DMA_Abort_IT+0x3b0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d068      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a37      	ldr	r2, [pc, #220]	@ (8003ee4 <HAL_DMA_Abort_IT+0x3b4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d063      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a36      	ldr	r2, [pc, #216]	@ (8003ee8 <HAL_DMA_Abort_IT+0x3b8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d05e      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a34      	ldr	r2, [pc, #208]	@ (8003eec <HAL_DMA_Abort_IT+0x3bc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d059      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a33      	ldr	r2, [pc, #204]	@ (8003ef0 <HAL_DMA_Abort_IT+0x3c0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d054      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a31      	ldr	r2, [pc, #196]	@ (8003ef4 <HAL_DMA_Abort_IT+0x3c4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04f      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a30      	ldr	r2, [pc, #192]	@ (8003ef8 <HAL_DMA_Abort_IT+0x3c8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2e      	ldr	r2, [pc, #184]	@ (8003efc <HAL_DMA_Abort_IT+0x3cc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <HAL_DMA_Abort_IT+0x3d0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	@ (8003f04 <HAL_DMA_Abort_IT+0x3d4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f08 <HAL_DMA_Abort_IT+0x3d8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a28      	ldr	r2, [pc, #160]	@ (8003f0c <HAL_DMA_Abort_IT+0x3dc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a27      	ldr	r2, [pc, #156]	@ (8003f10 <HAL_DMA_Abort_IT+0x3e0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	@ (8003f14 <HAL_DMA_Abort_IT+0x3e4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a24      	ldr	r2, [pc, #144]	@ (8003f18 <HAL_DMA_Abort_IT+0x3e8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	@ (8003f1c <HAL_DMA_Abort_IT+0x3ec>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	@ (8003f20 <HAL_DMA_Abort_IT+0x3f0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f24 <HAL_DMA_Abort_IT+0x3f4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <HAL_DMA_Abort_IT+0x3f8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_DMA_Abort_IT+0x3fc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <HAL_DMA_Abort_IT+0x400>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_Abort_IT+0x3a2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_DMA_Abort_IT+0x404>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d132      	bne.n	8003f38 <HAL_DMA_Abort_IT+0x408>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e031      	b.n	8003f3a <HAL_DMA_Abort_IT+0x40a>
 8003ed6:	bf00      	nop
 8003ed8:	40020010 	.word	0x40020010
 8003edc:	40020028 	.word	0x40020028
 8003ee0:	40020040 	.word	0x40020040
 8003ee4:	40020058 	.word	0x40020058
 8003ee8:	40020070 	.word	0x40020070
 8003eec:	40020088 	.word	0x40020088
 8003ef0:	400200a0 	.word	0x400200a0
 8003ef4:	400200b8 	.word	0x400200b8
 8003ef8:	40020410 	.word	0x40020410
 8003efc:	40020428 	.word	0x40020428
 8003f00:	40020440 	.word	0x40020440
 8003f04:	40020458 	.word	0x40020458
 8003f08:	40020470 	.word	0x40020470
 8003f0c:	40020488 	.word	0x40020488
 8003f10:	400204a0 	.word	0x400204a0
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	58025408 	.word	0x58025408
 8003f1c:	5802541c 	.word	0x5802541c
 8003f20:	58025430 	.word	0x58025430
 8003f24:	58025444 	.word	0x58025444
 8003f28:	58025458 	.word	0x58025458
 8003f2c:	5802546c 	.word	0x5802546c
 8003f30:	58025480 	.word	0x58025480
 8003f34:	58025494 	.word	0x58025494
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d028      	beq.n	8003f90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00c      	beq.n	8003f90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop

08003fbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fc8:	4b67      	ldr	r3, [pc, #412]	@ (8004168 <HAL_DMA_IRQHandler+0x1ac>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a67      	ldr	r2, [pc, #412]	@ (800416c <HAL_DMA_IRQHandler+0x1b0>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	0a9b      	lsrs	r3, r3, #10
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8004170 <HAL_DMA_IRQHandler+0x1b4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d04a      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8004174 <HAL_DMA_IRQHandler+0x1b8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d045      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5c      	ldr	r2, [pc, #368]	@ (8004178 <HAL_DMA_IRQHandler+0x1bc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d040      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a5a      	ldr	r2, [pc, #360]	@ (800417c <HAL_DMA_IRQHandler+0x1c0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d03b      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a59      	ldr	r2, [pc, #356]	@ (8004180 <HAL_DMA_IRQHandler+0x1c4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d036      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a57      	ldr	r2, [pc, #348]	@ (8004184 <HAL_DMA_IRQHandler+0x1c8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d031      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a56      	ldr	r2, [pc, #344]	@ (8004188 <HAL_DMA_IRQHandler+0x1cc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d02c      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a54      	ldr	r2, [pc, #336]	@ (800418c <HAL_DMA_IRQHandler+0x1d0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d027      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a53      	ldr	r2, [pc, #332]	@ (8004190 <HAL_DMA_IRQHandler+0x1d4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a51      	ldr	r2, [pc, #324]	@ (8004194 <HAL_DMA_IRQHandler+0x1d8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01d      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a50      	ldr	r2, [pc, #320]	@ (8004198 <HAL_DMA_IRQHandler+0x1dc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d018      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4e      	ldr	r2, [pc, #312]	@ (800419c <HAL_DMA_IRQHandler+0x1e0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a4d      	ldr	r2, [pc, #308]	@ (80041a0 <HAL_DMA_IRQHandler+0x1e4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_DMA_IRQHandler+0x1e8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a4a      	ldr	r2, [pc, #296]	@ (80041a8 <HAL_DMA_IRQHandler+0x1ec>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_DMA_IRQHandler+0xd2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a48      	ldr	r2, [pc, #288]	@ (80041ac <HAL_DMA_IRQHandler+0x1f0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_DMA_IRQHandler+0xd6>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_DMA_IRQHandler+0xd8>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 842b 	beq.w	80048f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2208      	movs	r2, #8
 80040a4:	409a      	lsls	r2, r3
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80a2 	beq.w	80041f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004170 <HAL_DMA_IRQHandler+0x1b4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2d      	ldr	r2, [pc, #180]	@ (8004174 <HAL_DMA_IRQHandler+0x1b8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <HAL_DMA_IRQHandler+0x1bc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2a      	ldr	r2, [pc, #168]	@ (800417c <HAL_DMA_IRQHandler+0x1c0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <HAL_DMA_IRQHandler+0x1c4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <HAL_DMA_IRQHandler+0x1c8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a25      	ldr	r2, [pc, #148]	@ (8004188 <HAL_DMA_IRQHandler+0x1cc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a24      	ldr	r2, [pc, #144]	@ (800418c <HAL_DMA_IRQHandler+0x1d0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a22      	ldr	r2, [pc, #136]	@ (8004190 <HAL_DMA_IRQHandler+0x1d4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <HAL_DMA_IRQHandler+0x1d8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1f      	ldr	r2, [pc, #124]	@ (8004198 <HAL_DMA_IRQHandler+0x1dc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1e      	ldr	r2, [pc, #120]	@ (800419c <HAL_DMA_IRQHandler+0x1e0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <HAL_DMA_IRQHandler+0x1e4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1b      	ldr	r2, [pc, #108]	@ (80041a4 <HAL_DMA_IRQHandler+0x1e8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a19      	ldr	r2, [pc, #100]	@ (80041a8 <HAL_DMA_IRQHandler+0x1ec>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_DMA_IRQHandler+0x194>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_DMA_IRQHandler+0x1f0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d12f      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x1f4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf14      	ite	ne
 800415e:	2301      	movne	r3, #1
 8004160:	2300      	moveq	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e02e      	b.n	80041c4 <HAL_DMA_IRQHandler+0x208>
 8004166:	bf00      	nop
 8004168:	24000000 	.word	0x24000000
 800416c:	1b4e81b5 	.word	0x1b4e81b5
 8004170:	40020010 	.word	0x40020010
 8004174:	40020028 	.word	0x40020028
 8004178:	40020040 	.word	0x40020040
 800417c:	40020058 	.word	0x40020058
 8004180:	40020070 	.word	0x40020070
 8004184:	40020088 	.word	0x40020088
 8004188:	400200a0 	.word	0x400200a0
 800418c:	400200b8 	.word	0x400200b8
 8004190:	40020410 	.word	0x40020410
 8004194:	40020428 	.word	0x40020428
 8004198:	40020440 	.word	0x40020440
 800419c:	40020458 	.word	0x40020458
 80041a0:	40020470 	.word	0x40020470
 80041a4:	40020488 	.word	0x40020488
 80041a8:	400204a0 	.word	0x400204a0
 80041ac:	400204b8 	.word	0x400204b8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bf14      	ite	ne
 80041be:	2301      	movne	r3, #1
 80041c0:	2300      	moveq	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0204 	bic.w	r2, r2, #4
 80041d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2208      	movs	r2, #8
 80041e2:	409a      	lsls	r2, r3
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d06e      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a69      	ldr	r2, [pc, #420]	@ (80043b4 <HAL_DMA_IRQHandler+0x3f8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d04a      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a67      	ldr	r2, [pc, #412]	@ (80043b8 <HAL_DMA_IRQHandler+0x3fc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d045      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a66      	ldr	r2, [pc, #408]	@ (80043bc <HAL_DMA_IRQHandler+0x400>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d040      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a64      	ldr	r2, [pc, #400]	@ (80043c0 <HAL_DMA_IRQHandler+0x404>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d03b      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a63      	ldr	r2, [pc, #396]	@ (80043c4 <HAL_DMA_IRQHandler+0x408>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d036      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a61      	ldr	r2, [pc, #388]	@ (80043c8 <HAL_DMA_IRQHandler+0x40c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d031      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a60      	ldr	r2, [pc, #384]	@ (80043cc <HAL_DMA_IRQHandler+0x410>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d02c      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5e      	ldr	r2, [pc, #376]	@ (80043d0 <HAL_DMA_IRQHandler+0x414>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d027      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5d      	ldr	r2, [pc, #372]	@ (80043d4 <HAL_DMA_IRQHandler+0x418>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d022      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5b      	ldr	r2, [pc, #364]	@ (80043d8 <HAL_DMA_IRQHandler+0x41c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a5a      	ldr	r2, [pc, #360]	@ (80043dc <HAL_DMA_IRQHandler+0x420>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a58      	ldr	r2, [pc, #352]	@ (80043e0 <HAL_DMA_IRQHandler+0x424>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a57      	ldr	r2, [pc, #348]	@ (80043e4 <HAL_DMA_IRQHandler+0x428>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a55      	ldr	r2, [pc, #340]	@ (80043e8 <HAL_DMA_IRQHandler+0x42c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a54      	ldr	r2, [pc, #336]	@ (80043ec <HAL_DMA_IRQHandler+0x430>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_IRQHandler+0x2ee>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a52      	ldr	r2, [pc, #328]	@ (80043f0 <HAL_DMA_IRQHandler+0x434>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10a      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x304>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e003      	b.n	80042c8 <HAL_DMA_IRQHandler+0x30c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	f043 0202 	orr.w	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2204      	movs	r2, #4
 80042f2:	409a      	lsls	r2, r3
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 808f 	beq.w	800441c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <HAL_DMA_IRQHandler+0x3f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04a      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <HAL_DMA_IRQHandler+0x3fc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d045      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <HAL_DMA_IRQHandler+0x400>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a27      	ldr	r2, [pc, #156]	@ (80043c0 <HAL_DMA_IRQHandler+0x404>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d03b      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a26      	ldr	r2, [pc, #152]	@ (80043c4 <HAL_DMA_IRQHandler+0x408>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d036      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a24      	ldr	r2, [pc, #144]	@ (80043c8 <HAL_DMA_IRQHandler+0x40c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d031      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a23      	ldr	r2, [pc, #140]	@ (80043cc <HAL_DMA_IRQHandler+0x410>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d02c      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a21      	ldr	r2, [pc, #132]	@ (80043d0 <HAL_DMA_IRQHandler+0x414>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d027      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a20      	ldr	r2, [pc, #128]	@ (80043d4 <HAL_DMA_IRQHandler+0x418>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1e      	ldr	r2, [pc, #120]	@ (80043d8 <HAL_DMA_IRQHandler+0x41c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01d      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <HAL_DMA_IRQHandler+0x420>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <HAL_DMA_IRQHandler+0x424>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1a      	ldr	r2, [pc, #104]	@ (80043e4 <HAL_DMA_IRQHandler+0x428>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <HAL_DMA_IRQHandler+0x42c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a17      	ldr	r2, [pc, #92]	@ (80043ec <HAL_DMA_IRQHandler+0x430>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_DMA_IRQHandler+0x3e2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a15      	ldr	r2, [pc, #84]	@ (80043f0 <HAL_DMA_IRQHandler+0x434>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d12a      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x438>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e023      	b.n	80043fc <HAL_DMA_IRQHandler+0x440>
 80043b4:	40020010 	.word	0x40020010
 80043b8:	40020028 	.word	0x40020028
 80043bc:	40020040 	.word	0x40020040
 80043c0:	40020058 	.word	0x40020058
 80043c4:	40020070 	.word	0x40020070
 80043c8:	40020088 	.word	0x40020088
 80043cc:	400200a0 	.word	0x400200a0
 80043d0:	400200b8 	.word	0x400200b8
 80043d4:	40020410 	.word	0x40020410
 80043d8:	40020428 	.word	0x40020428
 80043dc:	40020440 	.word	0x40020440
 80043e0:	40020458 	.word	0x40020458
 80043e4:	40020470 	.word	0x40020470
 80043e8:	40020488 	.word	0x40020488
 80043ec:	400204a0 	.word	0x400204a0
 80043f0:	400204b8 	.word	0x400204b8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2204      	movs	r2, #4
 800440a:	409a      	lsls	r2, r3
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	f043 0204 	orr.w	r2, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2210      	movs	r2, #16
 8004426:	409a      	lsls	r2, r3
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a6 	beq.w	800457e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a85      	ldr	r2, [pc, #532]	@ (800464c <HAL_DMA_IRQHandler+0x690>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d04a      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a83      	ldr	r2, [pc, #524]	@ (8004650 <HAL_DMA_IRQHandler+0x694>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d045      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a82      	ldr	r2, [pc, #520]	@ (8004654 <HAL_DMA_IRQHandler+0x698>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d040      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a80      	ldr	r2, [pc, #512]	@ (8004658 <HAL_DMA_IRQHandler+0x69c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d03b      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7f      	ldr	r2, [pc, #508]	@ (800465c <HAL_DMA_IRQHandler+0x6a0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d036      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a7d      	ldr	r2, [pc, #500]	@ (8004660 <HAL_DMA_IRQHandler+0x6a4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d031      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7c      	ldr	r2, [pc, #496]	@ (8004664 <HAL_DMA_IRQHandler+0x6a8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d02c      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7a      	ldr	r2, [pc, #488]	@ (8004668 <HAL_DMA_IRQHandler+0x6ac>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d027      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a79      	ldr	r2, [pc, #484]	@ (800466c <HAL_DMA_IRQHandler+0x6b0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a77      	ldr	r2, [pc, #476]	@ (8004670 <HAL_DMA_IRQHandler+0x6b4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a76      	ldr	r2, [pc, #472]	@ (8004674 <HAL_DMA_IRQHandler+0x6b8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a74      	ldr	r2, [pc, #464]	@ (8004678 <HAL_DMA_IRQHandler+0x6bc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a73      	ldr	r2, [pc, #460]	@ (800467c <HAL_DMA_IRQHandler+0x6c0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a71      	ldr	r2, [pc, #452]	@ (8004680 <HAL_DMA_IRQHandler+0x6c4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a70      	ldr	r2, [pc, #448]	@ (8004684 <HAL_DMA_IRQHandler+0x6c8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x516>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004688 <HAL_DMA_IRQHandler+0x6cc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10a      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x52c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e009      	b.n	80044fc <HAL_DMA_IRQHandler+0x540>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf14      	ite	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	2300      	moveq	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03e      	beq.n	800457e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2210      	movs	r2, #16
 800450a:	409a      	lsls	r2, r3
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d108      	bne.n	800453e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d024      	beq.n	800457e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	e01f      	b.n	800457e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01b      	beq.n	800457e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
 800454e:	e016      	b.n	800457e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0208 	bic.w	r2, r2, #8
 800456c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2220      	movs	r2, #32
 8004588:	409a      	lsls	r2, r3
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8110 	beq.w	80047b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2c      	ldr	r2, [pc, #176]	@ (800464c <HAL_DMA_IRQHandler+0x690>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d04a      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004650 <HAL_DMA_IRQHandler+0x694>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d045      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a29      	ldr	r2, [pc, #164]	@ (8004654 <HAL_DMA_IRQHandler+0x698>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d040      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a28      	ldr	r2, [pc, #160]	@ (8004658 <HAL_DMA_IRQHandler+0x69c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d03b      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a26      	ldr	r2, [pc, #152]	@ (800465c <HAL_DMA_IRQHandler+0x6a0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d036      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a25      	ldr	r2, [pc, #148]	@ (8004660 <HAL_DMA_IRQHandler+0x6a4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d031      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a23      	ldr	r2, [pc, #140]	@ (8004664 <HAL_DMA_IRQHandler+0x6a8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02c      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <HAL_DMA_IRQHandler+0x6ac>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d027      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a20      	ldr	r2, [pc, #128]	@ (800466c <HAL_DMA_IRQHandler+0x6b0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d022      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004670 <HAL_DMA_IRQHandler+0x6b4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d01d      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_DMA_IRQHandler+0x6b8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <HAL_DMA_IRQHandler+0x6bc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_DMA_IRQHandler+0x6c0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a19      	ldr	r2, [pc, #100]	@ (8004680 <HAL_DMA_IRQHandler+0x6c4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <HAL_DMA_IRQHandler+0x6c8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_DMA_IRQHandler+0x678>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a16      	ldr	r2, [pc, #88]	@ (8004688 <HAL_DMA_IRQHandler+0x6cc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d12b      	bne.n	800468c <HAL_DMA_IRQHandler+0x6d0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e02a      	b.n	80046a0 <HAL_DMA_IRQHandler+0x6e4>
 800464a:	bf00      	nop
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8087 	beq.w	80047b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2220      	movs	r2, #32
 80046b0:	409a      	lsls	r2, r3
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d139      	bne.n	8004736 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0216 	bic.w	r2, r2, #22
 80046d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_DMA_IRQHandler+0x736>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	223f      	movs	r2, #63	@ 0x3f
 800470c:	409a      	lsls	r2, r3
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8382 	beq.w	8004e30 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
          }
          return;
 8004734:	e37c      	b.n	8004e30 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d018      	beq.n	8004776 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02c      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
 8004762:	e027      	b.n	80047b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d023      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
 8004774:	e01e      	b.n	80047b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0210 	bic.w	r2, r2, #16
 8004792:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 833e 	beq.w	8004e3a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8088 	beq.w	80048dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2204      	movs	r2, #4
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a89      	ldr	r2, [pc, #548]	@ (8004a00 <HAL_DMA_IRQHandler+0xa44>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d04a      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a88      	ldr	r2, [pc, #544]	@ (8004a04 <HAL_DMA_IRQHandler+0xa48>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d045      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a86      	ldr	r2, [pc, #536]	@ (8004a08 <HAL_DMA_IRQHandler+0xa4c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d040      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a85      	ldr	r2, [pc, #532]	@ (8004a0c <HAL_DMA_IRQHandler+0xa50>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d03b      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a83      	ldr	r2, [pc, #524]	@ (8004a10 <HAL_DMA_IRQHandler+0xa54>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d036      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a82      	ldr	r2, [pc, #520]	@ (8004a14 <HAL_DMA_IRQHandler+0xa58>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d031      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a80      	ldr	r2, [pc, #512]	@ (8004a18 <HAL_DMA_IRQHandler+0xa5c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02c      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a1c <HAL_DMA_IRQHandler+0xa60>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d027      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a7d      	ldr	r2, [pc, #500]	@ (8004a20 <HAL_DMA_IRQHandler+0xa64>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d022      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7c      	ldr	r2, [pc, #496]	@ (8004a24 <HAL_DMA_IRQHandler+0xa68>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d01d      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a28 <HAL_DMA_IRQHandler+0xa6c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d018      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a79      	ldr	r2, [pc, #484]	@ (8004a2c <HAL_DMA_IRQHandler+0xa70>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a77      	ldr	r2, [pc, #476]	@ (8004a30 <HAL_DMA_IRQHandler+0xa74>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a76      	ldr	r2, [pc, #472]	@ (8004a34 <HAL_DMA_IRQHandler+0xa78>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d009      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a74      	ldr	r2, [pc, #464]	@ (8004a38 <HAL_DMA_IRQHandler+0xa7c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_DMA_IRQHandler+0x8b8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a73      	ldr	r2, [pc, #460]	@ (8004a3c <HAL_DMA_IRQHandler+0xa80>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <HAL_DMA_IRQHandler+0x8ca>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e007      	b.n	8004896 <HAL_DMA_IRQHandler+0x8da>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489e:	429a      	cmp	r2, r3
 80048a0:	d307      	bcc.n	80048b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f2      	bne.n	8004896 <HAL_DMA_IRQHandler+0x8da>
 80048b0:	e000      	b.n	80048b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80048b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80048ca:	e003      	b.n	80048d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 82aa 	beq.w	8004e3a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
 80048ee:	e2a4      	b.n	8004e3a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a52      	ldr	r2, [pc, #328]	@ (8004a40 <HAL_DMA_IRQHandler+0xa84>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d04a      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a51      	ldr	r2, [pc, #324]	@ (8004a44 <HAL_DMA_IRQHandler+0xa88>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d045      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4f      	ldr	r2, [pc, #316]	@ (8004a48 <HAL_DMA_IRQHandler+0xa8c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d040      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4e      	ldr	r2, [pc, #312]	@ (8004a4c <HAL_DMA_IRQHandler+0xa90>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d03b      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a4c      	ldr	r2, [pc, #304]	@ (8004a50 <HAL_DMA_IRQHandler+0xa94>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d036      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a4b      	ldr	r2, [pc, #300]	@ (8004a54 <HAL_DMA_IRQHandler+0xa98>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d031      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a49      	ldr	r2, [pc, #292]	@ (8004a58 <HAL_DMA_IRQHandler+0xa9c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02c      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a48      	ldr	r2, [pc, #288]	@ (8004a5c <HAL_DMA_IRQHandler+0xaa0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d027      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a46      	ldr	r2, [pc, #280]	@ (8004a60 <HAL_DMA_IRQHandler+0xaa4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a45      	ldr	r2, [pc, #276]	@ (8004a64 <HAL_DMA_IRQHandler+0xaa8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d01d      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a43      	ldr	r2, [pc, #268]	@ (8004a68 <HAL_DMA_IRQHandler+0xaac>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a42      	ldr	r2, [pc, #264]	@ (8004a6c <HAL_DMA_IRQHandler+0xab0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a40      	ldr	r2, [pc, #256]	@ (8004a70 <HAL_DMA_IRQHandler+0xab4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3f      	ldr	r2, [pc, #252]	@ (8004a74 <HAL_DMA_IRQHandler+0xab8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3d      	ldr	r2, [pc, #244]	@ (8004a78 <HAL_DMA_IRQHandler+0xabc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_DMA_IRQHandler+0x9d4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a7c <HAL_DMA_IRQHandler+0xac0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_DMA_IRQHandler+0x9d8>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_DMA_IRQHandler+0x9da>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 824f 	beq.w	8004e3a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2204      	movs	r2, #4
 80049ae:	409a      	lsls	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80dd 	beq.w	8004b74 <HAL_DMA_IRQHandler+0xbb8>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80d7 	beq.w	8004b74 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2204      	movs	r2, #4
 80049d0:	409a      	lsls	r2, r3
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d059      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d14a      	bne.n	8004a80 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8220 	beq.w	8004e34 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	e21a      	b.n	8004e34 <HAL_DMA_IRQHandler+0xe78>
 80049fe:	bf00      	nop
 8004a00:	40020010 	.word	0x40020010
 8004a04:	40020028 	.word	0x40020028
 8004a08:	40020040 	.word	0x40020040
 8004a0c:	40020058 	.word	0x40020058
 8004a10:	40020070 	.word	0x40020070
 8004a14:	40020088 	.word	0x40020088
 8004a18:	400200a0 	.word	0x400200a0
 8004a1c:	400200b8 	.word	0x400200b8
 8004a20:	40020410 	.word	0x40020410
 8004a24:	40020428 	.word	0x40020428
 8004a28:	40020440 	.word	0x40020440
 8004a2c:	40020458 	.word	0x40020458
 8004a30:	40020470 	.word	0x40020470
 8004a34:	40020488 	.word	0x40020488
 8004a38:	400204a0 	.word	0x400204a0
 8004a3c:	400204b8 	.word	0x400204b8
 8004a40:	48022c08 	.word	0x48022c08
 8004a44:	48022c1c 	.word	0x48022c1c
 8004a48:	48022c30 	.word	0x48022c30
 8004a4c:	48022c44 	.word	0x48022c44
 8004a50:	48022c58 	.word	0x48022c58
 8004a54:	48022c6c 	.word	0x48022c6c
 8004a58:	48022c80 	.word	0x48022c80
 8004a5c:	48022c94 	.word	0x48022c94
 8004a60:	58025408 	.word	0x58025408
 8004a64:	5802541c 	.word	0x5802541c
 8004a68:	58025430 	.word	0x58025430
 8004a6c:	58025444 	.word	0x58025444
 8004a70:	58025458 	.word	0x58025458
 8004a74:	5802546c 	.word	0x5802546c
 8004a78:	58025480 	.word	0x58025480
 8004a7c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 81d5 	beq.w	8004e34 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a92:	e1cf      	b.n	8004e34 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d160      	bne.n	8004b60 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ca0 <HAL_DMA_IRQHandler+0xce4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a7d      	ldr	r2, [pc, #500]	@ (8004ca4 <HAL_DMA_IRQHandler+0xce8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ca8 <HAL_DMA_IRQHandler+0xcec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8004cac <HAL_DMA_IRQHandler+0xcf0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a79      	ldr	r2, [pc, #484]	@ (8004cb0 <HAL_DMA_IRQHandler+0xcf4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a77      	ldr	r2, [pc, #476]	@ (8004cb4 <HAL_DMA_IRQHandler+0xcf8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a76      	ldr	r2, [pc, #472]	@ (8004cb8 <HAL_DMA_IRQHandler+0xcfc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a74      	ldr	r2, [pc, #464]	@ (8004cbc <HAL_DMA_IRQHandler+0xd00>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a73      	ldr	r2, [pc, #460]	@ (8004cc0 <HAL_DMA_IRQHandler+0xd04>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a71      	ldr	r2, [pc, #452]	@ (8004cc4 <HAL_DMA_IRQHandler+0xd08>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a70      	ldr	r2, [pc, #448]	@ (8004cc8 <HAL_DMA_IRQHandler+0xd0c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	@ (8004ccc <HAL_DMA_IRQHandler+0xd10>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8004cd0 <HAL_DMA_IRQHandler+0xd14>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a6b      	ldr	r2, [pc, #428]	@ (8004cd4 <HAL_DMA_IRQHandler+0xd18>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd8 <HAL_DMA_IRQHandler+0xd1c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xb82>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_DMA_IRQHandler+0xd20>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <HAL_DMA_IRQHandler+0xb94>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0208 	bic.w	r2, r2, #8
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e007      	b.n	8004b60 <HAL_DMA_IRQHandler+0xba4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8165 	beq.w	8004e34 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b72:	e15f      	b.n	8004e34 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80c5 	beq.w	8004d14 <HAL_DMA_IRQHandler+0xd58>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80bf 	beq.w	8004d14 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d018      	beq.n	8004be2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 813a 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bcc:	e134      	b.n	8004e38 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8130 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004be0:	e12a      	b.n	8004e38 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 8089 	bne.w	8004d00 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca0 <HAL_DMA_IRQHandler+0xce4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d04a      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <HAL_DMA_IRQHandler+0xce8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d045      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a28      	ldr	r2, [pc, #160]	@ (8004ca8 <HAL_DMA_IRQHandler+0xcec>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d040      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <HAL_DMA_IRQHandler+0xcf0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d03b      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <HAL_DMA_IRQHandler+0xcf4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d036      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <HAL_DMA_IRQHandler+0xcf8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d031      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	@ (8004cb8 <HAL_DMA_IRQHandler+0xcfc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d02c      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <HAL_DMA_IRQHandler+0xd00>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d027      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc0 <HAL_DMA_IRQHandler+0xd04>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d022      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_DMA_IRQHandler+0xd08>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <HAL_DMA_IRQHandler+0xd0c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <HAL_DMA_IRQHandler+0xd10>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	@ (8004cd0 <HAL_DMA_IRQHandler+0xd14>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <HAL_DMA_IRQHandler+0xd18>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <HAL_DMA_IRQHandler+0xd1c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xcd2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <HAL_DMA_IRQHandler+0xd20>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d128      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0xd24>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0214 	bic.w	r2, r2, #20
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e027      	b.n	8004cf0 <HAL_DMA_IRQHandler+0xd34>
 8004ca0:	40020010 	.word	0x40020010
 8004ca4:	40020028 	.word	0x40020028
 8004ca8:	40020040 	.word	0x40020040
 8004cac:	40020058 	.word	0x40020058
 8004cb0:	40020070 	.word	0x40020070
 8004cb4:	40020088 	.word	0x40020088
 8004cb8:	400200a0 	.word	0x400200a0
 8004cbc:	400200b8 	.word	0x400200b8
 8004cc0:	40020410 	.word	0x40020410
 8004cc4:	40020428 	.word	0x40020428
 8004cc8:	40020440 	.word	0x40020440
 8004ccc:	40020458 	.word	0x40020458
 8004cd0:	40020470 	.word	0x40020470
 8004cd4:	40020488 	.word	0x40020488
 8004cd8:	400204a0 	.word	0x400204a0
 8004cdc:	400204b8 	.word	0x400204b8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 020a 	bic.w	r2, r2, #10
 8004cee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8097 	beq.w	8004e38 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d12:	e091      	b.n	8004e38 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8088 	beq.w	8004e3a <HAL_DMA_IRQHandler+0xe7e>
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8082 	beq.w	8004e3a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a41      	ldr	r2, [pc, #260]	@ (8004e40 <HAL_DMA_IRQHandler+0xe84>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d04a      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3f      	ldr	r2, [pc, #252]	@ (8004e44 <HAL_DMA_IRQHandler+0xe88>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d045      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e48 <HAL_DMA_IRQHandler+0xe8c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d040      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3c      	ldr	r2, [pc, #240]	@ (8004e4c <HAL_DMA_IRQHandler+0xe90>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d03b      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3b      	ldr	r2, [pc, #236]	@ (8004e50 <HAL_DMA_IRQHandler+0xe94>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d036      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a39      	ldr	r2, [pc, #228]	@ (8004e54 <HAL_DMA_IRQHandler+0xe98>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d031      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a38      	ldr	r2, [pc, #224]	@ (8004e58 <HAL_DMA_IRQHandler+0xe9c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d02c      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a36      	ldr	r2, [pc, #216]	@ (8004e5c <HAL_DMA_IRQHandler+0xea0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d027      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a35      	ldr	r2, [pc, #212]	@ (8004e60 <HAL_DMA_IRQHandler+0xea4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a33      	ldr	r2, [pc, #204]	@ (8004e64 <HAL_DMA_IRQHandler+0xea8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a32      	ldr	r2, [pc, #200]	@ (8004e68 <HAL_DMA_IRQHandler+0xeac>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a30      	ldr	r2, [pc, #192]	@ (8004e6c <HAL_DMA_IRQHandler+0xeb0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e70 <HAL_DMA_IRQHandler+0xeb4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e74 <HAL_DMA_IRQHandler+0xeb8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e78 <HAL_DMA_IRQHandler+0xebc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0xe1a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e7c <HAL_DMA_IRQHandler+0xec0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <HAL_DMA_IRQHandler+0xe2c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 021c 	bic.w	r2, r2, #28
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e007      	b.n	8004df8 <HAL_DMA_IRQHandler+0xe3c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 020e 	bic.w	r2, r2, #14
 8004df6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2201      	movs	r2, #1
 8004e02:	409a      	lsls	r2, r3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
 8004e2e:	e004      	b.n	8004e3a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004e30:	bf00      	nop
 8004e32:	e002      	b.n	8004e3a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e34:	bf00      	nop
 8004e36:	e000      	b.n	8004e3a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e3a:	3728      	adds	r7, #40	@ 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40020010 	.word	0x40020010
 8004e44:	40020028 	.word	0x40020028
 8004e48:	40020040 	.word	0x40020040
 8004e4c:	40020058 	.word	0x40020058
 8004e50:	40020070 	.word	0x40020070
 8004e54:	40020088 	.word	0x40020088
 8004e58:	400200a0 	.word	0x400200a0
 8004e5c:	400200b8 	.word	0x400200b8
 8004e60:	40020410 	.word	0x40020410
 8004e64:	40020428 	.word	0x40020428
 8004e68:	40020440 	.word	0x40020440
 8004e6c:	40020458 	.word	0x40020458
 8004e70:	40020470 	.word	0x40020470
 8004e74:	40020488 	.word	0x40020488
 8004e78:	400204a0 	.word	0x400204a0
 8004e7c:	400204b8 	.word	0x400204b8

08004e80 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e8e:	b2db      	uxtb	r3, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7f      	ldr	r2, [pc, #508]	@ (80050d0 <DMA_SetConfig+0x21c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d072      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a7d      	ldr	r2, [pc, #500]	@ (80050d4 <DMA_SetConfig+0x220>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d06d      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80050d8 <DMA_SetConfig+0x224>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d068      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a7a      	ldr	r2, [pc, #488]	@ (80050dc <DMA_SetConfig+0x228>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d063      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a79      	ldr	r2, [pc, #484]	@ (80050e0 <DMA_SetConfig+0x22c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d05e      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a77      	ldr	r2, [pc, #476]	@ (80050e4 <DMA_SetConfig+0x230>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d059      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a76      	ldr	r2, [pc, #472]	@ (80050e8 <DMA_SetConfig+0x234>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d054      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a74      	ldr	r2, [pc, #464]	@ (80050ec <DMA_SetConfig+0x238>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04f      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a73      	ldr	r2, [pc, #460]	@ (80050f0 <DMA_SetConfig+0x23c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d04a      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a71      	ldr	r2, [pc, #452]	@ (80050f4 <DMA_SetConfig+0x240>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d045      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a70      	ldr	r2, [pc, #448]	@ (80050f8 <DMA_SetConfig+0x244>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d040      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <DMA_SetConfig+0x248>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d03b      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a6d      	ldr	r2, [pc, #436]	@ (8005100 <DMA_SetConfig+0x24c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d036      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a6b      	ldr	r2, [pc, #428]	@ (8005104 <DMA_SetConfig+0x250>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d031      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8005108 <DMA_SetConfig+0x254>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d02c      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a68      	ldr	r2, [pc, #416]	@ (800510c <DMA_SetConfig+0x258>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d027      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a67      	ldr	r2, [pc, #412]	@ (8005110 <DMA_SetConfig+0x25c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a65      	ldr	r2, [pc, #404]	@ (8005114 <DMA_SetConfig+0x260>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a64      	ldr	r2, [pc, #400]	@ (8005118 <DMA_SetConfig+0x264>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a62      	ldr	r2, [pc, #392]	@ (800511c <DMA_SetConfig+0x268>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a61      	ldr	r2, [pc, #388]	@ (8005120 <DMA_SetConfig+0x26c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5f      	ldr	r2, [pc, #380]	@ (8005124 <DMA_SetConfig+0x270>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5e      	ldr	r2, [pc, #376]	@ (8005128 <DMA_SetConfig+0x274>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <DMA_SetConfig+0x10a>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5c      	ldr	r2, [pc, #368]	@ (800512c <DMA_SetConfig+0x278>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <DMA_SetConfig+0x10e>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <DMA_SetConfig+0x110>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004fd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fe2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a39      	ldr	r2, [pc, #228]	@ (80050d0 <DMA_SetConfig+0x21c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04a      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a38      	ldr	r2, [pc, #224]	@ (80050d4 <DMA_SetConfig+0x220>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d045      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a36      	ldr	r2, [pc, #216]	@ (80050d8 <DMA_SetConfig+0x224>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d040      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a35      	ldr	r2, [pc, #212]	@ (80050dc <DMA_SetConfig+0x228>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03b      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a33      	ldr	r2, [pc, #204]	@ (80050e0 <DMA_SetConfig+0x22c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d036      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a32      	ldr	r2, [pc, #200]	@ (80050e4 <DMA_SetConfig+0x230>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d031      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a30      	ldr	r2, [pc, #192]	@ (80050e8 <DMA_SetConfig+0x234>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2f      	ldr	r2, [pc, #188]	@ (80050ec <DMA_SetConfig+0x238>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d027      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2d      	ldr	r2, [pc, #180]	@ (80050f0 <DMA_SetConfig+0x23c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a2c      	ldr	r2, [pc, #176]	@ (80050f4 <DMA_SetConfig+0x240>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2a      	ldr	r2, [pc, #168]	@ (80050f8 <DMA_SetConfig+0x244>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a29      	ldr	r2, [pc, #164]	@ (80050fc <DMA_SetConfig+0x248>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a27      	ldr	r2, [pc, #156]	@ (8005100 <DMA_SetConfig+0x24c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a26      	ldr	r2, [pc, #152]	@ (8005104 <DMA_SetConfig+0x250>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a24      	ldr	r2, [pc, #144]	@ (8005108 <DMA_SetConfig+0x254>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <DMA_SetConfig+0x1d0>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a23      	ldr	r2, [pc, #140]	@ (800510c <DMA_SetConfig+0x258>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <DMA_SetConfig+0x1d4>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <DMA_SetConfig+0x1d6>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d059      	beq.n	8005142 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	223f      	movs	r2, #63	@ 0x3f
 8005098:	409a      	lsls	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b40      	cmp	r3, #64	@ 0x40
 80050bc:	d138      	bne.n	8005130 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80050ce:	e0ae      	b.n	800522e <DMA_SetConfig+0x37a>
 80050d0:	40020010 	.word	0x40020010
 80050d4:	40020028 	.word	0x40020028
 80050d8:	40020040 	.word	0x40020040
 80050dc:	40020058 	.word	0x40020058
 80050e0:	40020070 	.word	0x40020070
 80050e4:	40020088 	.word	0x40020088
 80050e8:	400200a0 	.word	0x400200a0
 80050ec:	400200b8 	.word	0x400200b8
 80050f0:	40020410 	.word	0x40020410
 80050f4:	40020428 	.word	0x40020428
 80050f8:	40020440 	.word	0x40020440
 80050fc:	40020458 	.word	0x40020458
 8005100:	40020470 	.word	0x40020470
 8005104:	40020488 	.word	0x40020488
 8005108:	400204a0 	.word	0x400204a0
 800510c:	400204b8 	.word	0x400204b8
 8005110:	58025408 	.word	0x58025408
 8005114:	5802541c 	.word	0x5802541c
 8005118:	58025430 	.word	0x58025430
 800511c:	58025444 	.word	0x58025444
 8005120:	58025458 	.word	0x58025458
 8005124:	5802546c 	.word	0x5802546c
 8005128:	58025480 	.word	0x58025480
 800512c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	60da      	str	r2, [r3, #12]
}
 8005140:	e075      	b.n	800522e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3d      	ldr	r2, [pc, #244]	@ (800523c <DMA_SetConfig+0x388>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3b      	ldr	r2, [pc, #236]	@ (8005240 <DMA_SetConfig+0x38c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a3a      	ldr	r2, [pc, #232]	@ (8005244 <DMA_SetConfig+0x390>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a38      	ldr	r2, [pc, #224]	@ (8005248 <DMA_SetConfig+0x394>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a37      	ldr	r2, [pc, #220]	@ (800524c <DMA_SetConfig+0x398>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	@ (8005250 <DMA_SetConfig+0x39c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a34      	ldr	r2, [pc, #208]	@ (8005254 <DMA_SetConfig+0x3a0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a32      	ldr	r2, [pc, #200]	@ (8005258 <DMA_SetConfig+0x3a4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a31      	ldr	r2, [pc, #196]	@ (800525c <DMA_SetConfig+0x3a8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005260 <DMA_SetConfig+0x3ac>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005264 <DMA_SetConfig+0x3b0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005268 <DMA_SetConfig+0x3b4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2b      	ldr	r2, [pc, #172]	@ (800526c <DMA_SetConfig+0x3b8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <DMA_SetConfig+0x3bc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a28      	ldr	r2, [pc, #160]	@ (8005274 <DMA_SetConfig+0x3c0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <DMA_SetConfig+0x32e>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a26      	ldr	r2, [pc, #152]	@ (8005278 <DMA_SetConfig+0x3c4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d101      	bne.n	80051e6 <DMA_SetConfig+0x332>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <DMA_SetConfig+0x334>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d108      	bne.n	800521e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	60da      	str	r2, [r3, #12]
}
 800521c:	e007      	b.n	800522e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	48022c08 	.word	0x48022c08
 8005240:	48022c1c 	.word	0x48022c1c
 8005244:	48022c30 	.word	0x48022c30
 8005248:	48022c44 	.word	0x48022c44
 800524c:	48022c58 	.word	0x48022c58
 8005250:	48022c6c 	.word	0x48022c6c
 8005254:	48022c80 	.word	0x48022c80
 8005258:	48022c94 	.word	0x48022c94
 800525c:	58025408 	.word	0x58025408
 8005260:	5802541c 	.word	0x5802541c
 8005264:	58025430 	.word	0x58025430
 8005268:	58025444 	.word	0x58025444
 800526c:	58025458 	.word	0x58025458
 8005270:	5802546c 	.word	0x5802546c
 8005274:	58025480 	.word	0x58025480
 8005278:	58025494 	.word	0x58025494

0800527c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a42      	ldr	r2, [pc, #264]	@ (8005394 <DMA_CalcBaseAndBitshift+0x118>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d04a      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a41      	ldr	r2, [pc, #260]	@ (8005398 <DMA_CalcBaseAndBitshift+0x11c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d045      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3f      	ldr	r2, [pc, #252]	@ (800539c <DMA_CalcBaseAndBitshift+0x120>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d040      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3e      	ldr	r2, [pc, #248]	@ (80053a0 <DMA_CalcBaseAndBitshift+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03b      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3c      	ldr	r2, [pc, #240]	@ (80053a4 <DMA_CalcBaseAndBitshift+0x128>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d036      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a3b      	ldr	r2, [pc, #236]	@ (80053a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d031      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a39      	ldr	r2, [pc, #228]	@ (80053ac <DMA_CalcBaseAndBitshift+0x130>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02c      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a38      	ldr	r2, [pc, #224]	@ (80053b0 <DMA_CalcBaseAndBitshift+0x134>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a36      	ldr	r2, [pc, #216]	@ (80053b4 <DMA_CalcBaseAndBitshift+0x138>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a35      	ldr	r2, [pc, #212]	@ (80053b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a33      	ldr	r2, [pc, #204]	@ (80053bc <DMA_CalcBaseAndBitshift+0x140>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a32      	ldr	r2, [pc, #200]	@ (80053c0 <DMA_CalcBaseAndBitshift+0x144>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a30      	ldr	r2, [pc, #192]	@ (80053c4 <DMA_CalcBaseAndBitshift+0x148>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2f      	ldr	r2, [pc, #188]	@ (80053c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2d      	ldr	r2, [pc, #180]	@ (80053cc <DMA_CalcBaseAndBitshift+0x150>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <DMA_CalcBaseAndBitshift+0xa8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2c      	ldr	r2, [pc, #176]	@ (80053d0 <DMA_CalcBaseAndBitshift+0x154>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <DMA_CalcBaseAndBitshift+0xac>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <DMA_CalcBaseAndBitshift+0xae>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d024      	beq.n	8005378 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	3b10      	subs	r3, #16
 8005336:	4a27      	ldr	r2, [pc, #156]	@ (80053d4 <DMA_CalcBaseAndBitshift+0x158>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	4a24      	ldr	r2, [pc, #144]	@ (80053d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005348:	5cd3      	ldrb	r3, [r2, r3]
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d908      	bls.n	8005368 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	4b1f      	ldr	r3, [pc, #124]	@ (80053dc <DMA_CalcBaseAndBitshift+0x160>)
 800535e:	4013      	ands	r3, r2
 8005360:	1d1a      	adds	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	659a      	str	r2, [r3, #88]	@ 0x58
 8005366:	e00d      	b.n	8005384 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <DMA_CalcBaseAndBitshift+0x160>)
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6593      	str	r3, [r2, #88]	@ 0x58
 8005376:	e005      	b.n	8005384 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40020010 	.word	0x40020010
 8005398:	40020028 	.word	0x40020028
 800539c:	40020040 	.word	0x40020040
 80053a0:	40020058 	.word	0x40020058
 80053a4:	40020070 	.word	0x40020070
 80053a8:	40020088 	.word	0x40020088
 80053ac:	400200a0 	.word	0x400200a0
 80053b0:	400200b8 	.word	0x400200b8
 80053b4:	40020410 	.word	0x40020410
 80053b8:	40020428 	.word	0x40020428
 80053bc:	40020440 	.word	0x40020440
 80053c0:	40020458 	.word	0x40020458
 80053c4:	40020470 	.word	0x40020470
 80053c8:	40020488 	.word	0x40020488
 80053cc:	400204a0 	.word	0x400204a0
 80053d0:	400204b8 	.word	0x400204b8
 80053d4:	aaaaaaab 	.word	0xaaaaaaab
 80053d8:	080152f8 	.word	0x080152f8
 80053dc:	fffffc00 	.word	0xfffffc00

080053e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d120      	bne.n	8005436 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d858      	bhi.n	80054ae <DMA_CheckFifoParam+0xce>
 80053fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <DMA_CheckFifoParam+0x24>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005415 	.word	0x08005415
 8005408:	08005427 	.word	0x08005427
 800540c:	08005415 	.word	0x08005415
 8005410:	080054af 	.word	0x080054af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d048      	beq.n	80054b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005424:	e045      	b.n	80054b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800542e:	d142      	bne.n	80054b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005434:	e03f      	b.n	80054b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543e:	d123      	bne.n	8005488 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005444:	2b03      	cmp	r3, #3
 8005446:	d838      	bhi.n	80054ba <DMA_CheckFifoParam+0xda>
 8005448:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <DMA_CheckFifoParam+0x70>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005461 	.word	0x08005461
 8005454:	08005467 	.word	0x08005467
 8005458:	08005461 	.word	0x08005461
 800545c:	08005479 	.word	0x08005479
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
        break;
 8005464:	e030      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d025      	beq.n	80054be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005476:	e022      	b.n	80054be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005480:	d11f      	bne.n	80054c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005486:	e01c      	b.n	80054c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	2b02      	cmp	r3, #2
 800548e:	d902      	bls.n	8005496 <DMA_CheckFifoParam+0xb6>
 8005490:	2b03      	cmp	r3, #3
 8005492:	d003      	beq.n	800549c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005494:	e018      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
        break;
 800549a:	e015      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
    break;
 80054ac:	e00b      	b.n	80054c6 <DMA_CheckFifoParam+0xe6>
        break;
 80054ae:	bf00      	nop
 80054b0:	e00a      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        break;
 80054b2:	bf00      	nop
 80054b4:	e008      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        break;
 80054b6:	bf00      	nop
 80054b8:	e006      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        break;
 80054ba:	bf00      	nop
 80054bc:	e004      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
        break;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <DMA_CheckFifoParam+0xe8>
    break;
 80054c6:	bf00      	nop
    }
  }

  return status;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop

080054d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a38      	ldr	r2, [pc, #224]	@ (80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a36      	ldr	r2, [pc, #216]	@ (80055d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a35      	ldr	r2, [pc, #212]	@ (80055d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a33      	ldr	r2, [pc, #204]	@ (80055d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a32      	ldr	r2, [pc, #200]	@ (80055dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a30      	ldr	r2, [pc, #192]	@ (80055e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2f      	ldr	r2, [pc, #188]	@ (80055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2d      	ldr	r2, [pc, #180]	@ (80055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	3b08      	subs	r3, #8
 8005548:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4b26      	ldr	r3, [pc, #152]	@ (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	461a      	mov	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005564:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2201      	movs	r2, #1
 800556e:	409a      	lsls	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005574:	e024      	b.n	80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	3b10      	subs	r3, #16
 800557e:	4a1e      	ldr	r2, [pc, #120]	@ (80055f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4a1c      	ldr	r2, [pc, #112]	@ (80055fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d806      	bhi.n	800559e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a1b      	ldr	r2, [pc, #108]	@ (8005600 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d902      	bls.n	800559e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3308      	adds	r3, #8
 800559c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4b18      	ldr	r3, [pc, #96]	@ (8005604 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80055b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2201      	movs	r2, #1
 80055ba:	409a      	lsls	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	58025408 	.word	0x58025408
 80055d0:	5802541c 	.word	0x5802541c
 80055d4:	58025430 	.word	0x58025430
 80055d8:	58025444 	.word	0x58025444
 80055dc:	58025458 	.word	0x58025458
 80055e0:	5802546c 	.word	0x5802546c
 80055e4:	58025480 	.word	0x58025480
 80055e8:	58025494 	.word	0x58025494
 80055ec:	cccccccd 	.word	0xcccccccd
 80055f0:	16009600 	.word	0x16009600
 80055f4:	58025880 	.word	0x58025880
 80055f8:	aaaaaaab 	.word	0xaaaaaaab
 80055fc:	400204b8 	.word	0x400204b8
 8005600:	4002040f 	.word	0x4002040f
 8005604:	10008200 	.word	0x10008200
 8005608:	40020880 	.word	0x40020880

0800560c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04a      	beq.n	80056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d847      	bhi.n	80056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a25      	ldr	r2, [pc, #148]	@ (80056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a24      	ldr	r2, [pc, #144]	@ (80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a22      	ldr	r2, [pc, #136]	@ (80056cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a21      	ldr	r2, [pc, #132]	@ (80056d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1f      	ldr	r2, [pc, #124]	@ (80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1e      	ldr	r2, [pc, #120]	@ (80056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1c      	ldr	r2, [pc, #112]	@ (80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	461a      	mov	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a15      	ldr	r2, [pc, #84]	@ (80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005694:	671a      	str	r2, [r3, #112]	@ 0x70
 8005696:	e009      	b.n	80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b14      	ldr	r3, [pc, #80]	@ (80056ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	461a      	mov	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a11      	ldr	r2, [pc, #68]	@ (80056f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80056aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	2201      	movs	r2, #1
 80056b2:	409a      	lsls	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	58025408 	.word	0x58025408
 80056c8:	5802541c 	.word	0x5802541c
 80056cc:	58025430 	.word	0x58025430
 80056d0:	58025444 	.word	0x58025444
 80056d4:	58025458 	.word	0x58025458
 80056d8:	5802546c 	.word	0x5802546c
 80056dc:	58025480 	.word	0x58025480
 80056e0:	58025494 	.word	0x58025494
 80056e4:	1600963f 	.word	0x1600963f
 80056e8:	58025940 	.word	0x58025940
 80056ec:	1000823f 	.word	0x1000823f
 80056f0:	40020940 	.word	0x40020940

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	@ 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005702:	4b89      	ldr	r3, [pc, #548]	@ (8005928 <HAL_GPIO_Init+0x234>)
 8005704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005706:	e194      	b.n	8005a32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	2101      	movs	r1, #1
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8186 	beq.w	8005a2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d005      	beq.n	8005738 <HAL_GPIO_Init+0x44>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d130      	bne.n	800579a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	2203      	movs	r2, #3
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4313      	orrs	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800576e:	2201      	movs	r2, #1
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	f003 0201 	and.w	r2, r3, #1
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d017      	beq.n	80057d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	2203      	movs	r2, #3
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d123      	bne.n	800582a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	08da      	lsrs	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3208      	adds	r2, #8
 80057ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	220f      	movs	r2, #15
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	08da      	lsrs	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3208      	adds	r2, #8
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	2203      	movs	r2, #3
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0203 	and.w	r2, r3, #3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80e0 	beq.w	8005a2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586c:	4b2f      	ldr	r3, [pc, #188]	@ (800592c <HAL_GPIO_Init+0x238>)
 800586e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005872:	4a2e      	ldr	r2, [pc, #184]	@ (800592c <HAL_GPIO_Init+0x238>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800587c:	4b2b      	ldr	r3, [pc, #172]	@ (800592c <HAL_GPIO_Init+0x238>)
 800587e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800588a:	4a29      	ldr	r2, [pc, #164]	@ (8005930 <HAL_GPIO_Init+0x23c>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	220f      	movs	r2, #15
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a20      	ldr	r2, [pc, #128]	@ (8005934 <HAL_GPIO_Init+0x240>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d052      	beq.n	800595c <HAL_GPIO_Init+0x268>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005938 <HAL_GPIO_Init+0x244>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d031      	beq.n	8005922 <HAL_GPIO_Init+0x22e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1e      	ldr	r2, [pc, #120]	@ (800593c <HAL_GPIO_Init+0x248>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <HAL_GPIO_Init+0x22a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <HAL_GPIO_Init+0x24c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d025      	beq.n	800591a <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005944 <HAL_GPIO_Init+0x250>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01f      	beq.n	8005916 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005948 <HAL_GPIO_Init+0x254>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d019      	beq.n	8005912 <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1a      	ldr	r2, [pc, #104]	@ (800594c <HAL_GPIO_Init+0x258>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_GPIO_Init+0x21a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a19      	ldr	r2, [pc, #100]	@ (8005950 <HAL_GPIO_Init+0x25c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00d      	beq.n	800590a <HAL_GPIO_Init+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a18      	ldr	r2, [pc, #96]	@ (8005954 <HAL_GPIO_Init+0x260>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <HAL_GPIO_Init+0x212>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <HAL_GPIO_Init+0x264>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_GPIO_Init+0x20e>
 80058fe:	2309      	movs	r3, #9
 8005900:	e02d      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005902:	230a      	movs	r3, #10
 8005904:	e02b      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005906:	2308      	movs	r3, #8
 8005908:	e029      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800590a:	2307      	movs	r3, #7
 800590c:	e027      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800590e:	2306      	movs	r3, #6
 8005910:	e025      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005912:	2305      	movs	r3, #5
 8005914:	e023      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005916:	2304      	movs	r3, #4
 8005918:	e021      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800591a:	2303      	movs	r3, #3
 800591c:	e01f      	b.n	800595e <HAL_GPIO_Init+0x26a>
 800591e:	2302      	movs	r3, #2
 8005920:	e01d      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005922:	2301      	movs	r3, #1
 8005924:	e01b      	b.n	800595e <HAL_GPIO_Init+0x26a>
 8005926:	bf00      	nop
 8005928:	58000080 	.word	0x58000080
 800592c:	58024400 	.word	0x58024400
 8005930:	58000400 	.word	0x58000400
 8005934:	58020000 	.word	0x58020000
 8005938:	58020400 	.word	0x58020400
 800593c:	58020800 	.word	0x58020800
 8005940:	58020c00 	.word	0x58020c00
 8005944:	58021000 	.word	0x58021000
 8005948:	58021400 	.word	0x58021400
 800594c:	58021800 	.word	0x58021800
 8005950:	58021c00 	.word	0x58021c00
 8005954:	58022000 	.word	0x58022000
 8005958:	58022400 	.word	0x58022400
 800595c:	2300      	movs	r3, #0
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	f002 0203 	and.w	r2, r2, #3
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	4093      	lsls	r3, r2
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800596e:	4938      	ldr	r1, [pc, #224]	@ (8005a50 <HAL_GPIO_Init+0x35c>)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f ae63 	bne.w	8005708 <HAL_GPIO_Init+0x14>
  }
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	3724      	adds	r7, #36	@ 0x24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	58000400 	.word	0x58000400

08005a54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a62:	4b75      	ldr	r3, [pc, #468]	@ (8005c38 <HAL_GPIO_DeInit+0x1e4>)
 8005a64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005a66:	e0d9      	b.n	8005c1c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005a68:	2201      	movs	r2, #1
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	4013      	ands	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80cc 	beq.w	8005c16 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c3c <HAL_GPIO_DeInit+0x1e8>)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	089b      	lsrs	r3, r3, #2
 8005a84:	3302      	adds	r3, #2
 8005a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	220f      	movs	r2, #15
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a67      	ldr	r2, [pc, #412]	@ (8005c40 <HAL_GPIO_DeInit+0x1ec>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d037      	beq.n	8005b18 <HAL_GPIO_DeInit+0xc4>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a66      	ldr	r2, [pc, #408]	@ (8005c44 <HAL_GPIO_DeInit+0x1f0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d031      	beq.n	8005b14 <HAL_GPIO_DeInit+0xc0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a65      	ldr	r2, [pc, #404]	@ (8005c48 <HAL_GPIO_DeInit+0x1f4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d02b      	beq.n	8005b10 <HAL_GPIO_DeInit+0xbc>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a64      	ldr	r2, [pc, #400]	@ (8005c4c <HAL_GPIO_DeInit+0x1f8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d025      	beq.n	8005b0c <HAL_GPIO_DeInit+0xb8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a63      	ldr	r2, [pc, #396]	@ (8005c50 <HAL_GPIO_DeInit+0x1fc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d01f      	beq.n	8005b08 <HAL_GPIO_DeInit+0xb4>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a62      	ldr	r2, [pc, #392]	@ (8005c54 <HAL_GPIO_DeInit+0x200>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d019      	beq.n	8005b04 <HAL_GPIO_DeInit+0xb0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a61      	ldr	r2, [pc, #388]	@ (8005c58 <HAL_GPIO_DeInit+0x204>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_GPIO_DeInit+0xac>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a60      	ldr	r2, [pc, #384]	@ (8005c5c <HAL_GPIO_DeInit+0x208>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00d      	beq.n	8005afc <HAL_GPIO_DeInit+0xa8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8005c60 <HAL_GPIO_DeInit+0x20c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <HAL_GPIO_DeInit+0xa4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a5e      	ldr	r2, [pc, #376]	@ (8005c64 <HAL_GPIO_DeInit+0x210>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_GPIO_DeInit+0xa0>
 8005af0:	2309      	movs	r3, #9
 8005af2:	e012      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005af4:	230a      	movs	r3, #10
 8005af6:	e010      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005af8:	2308      	movs	r3, #8
 8005afa:	e00e      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005afc:	2307      	movs	r3, #7
 8005afe:	e00c      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b00:	2306      	movs	r3, #6
 8005b02:	e00a      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b04:	2305      	movs	r3, #5
 8005b06:	e008      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	e006      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e004      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e002      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_GPIO_DeInit+0xc6>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	f002 0203 	and.w	r2, r2, #3
 8005b20:	0092      	lsls	r2, r2, #2
 8005b22:	4093      	lsls	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d136      	bne.n	8005b98 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	401a      	ands	r2, r3
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b54:	4013      	ands	r3, r2
 8005b56:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b66:	4013      	ands	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	220f      	movs	r2, #15
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005b7a:	4a30      	ldr	r2, [pc, #192]	@ (8005c3c <HAL_GPIO_DeInit+0x1e8>)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	3302      	adds	r3, #2
 8005b82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	43da      	mvns	r2, r3
 8005b8a:	482c      	ldr	r0, [pc, #176]	@ (8005c3c <HAL_GPIO_DeInit+0x1e8>)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	400a      	ands	r2, r1
 8005b92:	3302      	adds	r3, #2
 8005b94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	2103      	movs	r1, #3
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	08da      	lsrs	r2, r3, #3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3208      	adds	r2, #8
 8005bb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	08d2      	lsrs	r2, r2, #3
 8005bcc:	4019      	ands	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3208      	adds	r2, #8
 8005bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	2103      	movs	r1, #3
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	401a      	ands	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	2103      	movs	r1, #3
 8005c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	401a      	ands	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f47f af1f 	bne.w	8005a68 <HAL_GPIO_DeInit+0x14>
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	58000080 	.word	0x58000080
 8005c3c:	58000400 	.word	0x58000400
 8005c40:	58020000 	.word	0x58020000
 8005c44:	58020400 	.word	0x58020400
 8005c48:	58020800 	.word	0x58020800
 8005c4c:	58020c00 	.word	0x58020c00
 8005c50:	58021000 	.word	0x58021000
 8005c54:	58021400 	.word	0x58021400
 8005c58:	58021800 	.word	0x58021800
 8005c5c:	58021c00 	.word	0x58021c00
 8005c60:	58022000 	.word	0x58022000
 8005c64:	58022400 	.word	0x58022400

08005c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c76:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fb ffb6 	bl	8001c00 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e08b      	b.n	8005dc6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc f888 	bl	8001dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	@ 0x24
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d107      	bne.n	8005d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	e006      	b.n	8005d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d108      	bne.n	8005d3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	e007      	b.n	8005d4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd0 <HAL_I2C_Init+0x134>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	02008000 	.word	0x02008000

08005dd4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e021      	b.n	8005e2a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2224      	movs	r2, #36	@ 0x24
 8005dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc f8c6 	bl	8001f90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	460b      	mov	r3, r1
 8005e42:	817b      	strh	r3, [r7, #10]
 8005e44:	4613      	mov	r3, r2
 8005e46:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f040 80cd 	bne.w	8005ff0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e64:	d101      	bne.n	8005e6a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	e0c3      	b.n	8005ff2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_I2C_Master_Receive_DMA+0x44>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e0bc      	b.n	8005ff2 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2222      	movs	r2, #34	@ 0x22
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	893a      	ldrh	r2, [r7, #8]
 8005ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a55      	ldr	r2, [pc, #340]	@ (8005ffc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4a55      	ldr	r2, [pc, #340]	@ (8006000 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005eac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2bff      	cmp	r3, #255	@ 0xff
 8005eb6:	d906      	bls.n	8005ec6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	@ 0xff
 8005ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ebe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e007      	b.n	8005ed6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ed0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ed4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d070      	beq.n	8005fc0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d020      	beq.n	8005f28 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	4a46      	ldr	r2, [pc, #280]	@ (8006004 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005eec:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef2:	4a45      	ldr	r2, [pc, #276]	@ (8006008 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005ef4:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f02:	2200      	movs	r2, #0
 8005f04:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3324      	adds	r3, #36	@ 0x24
 8005f10:	4619      	mov	r1, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005f18:	f7fd fba0 	bl	800365c <HAL_DMA_Start_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005f20:	7cfb      	ldrb	r3, [r7, #19]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d138      	bne.n	8005f98 <HAL_I2C_Master_Receive_DMA+0x164>
 8005f26:	e013      	b.n	8005f50 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e050      	b.n	8005ff2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	8979      	ldrh	r1, [r7, #10]
 8005f58:	4b2c      	ldr	r3, [pc, #176]	@ (800600c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f002 f8e0 	bl	8008124 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005f7e:	2110      	movs	r1, #16
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f002 f901 	bl	8008188 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e029      	b.n	8005fec <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fac:	f043 0210 	orr.w	r2, r3, #16
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e018      	b.n	8005ff2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	8979      	ldrh	r1, [r7, #10]
 8005fce:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f002 f8a4 	bl	8008124 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f002 f8ce 	bl	8008188 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	ffff0000 	.word	0xffff0000
 8006000:	08006803 	.word	0x08006803
 8006004:	08007b6b 	.word	0x08007b6b
 8006008:	08007c01 	.word	0x08007c01
 800600c:	80002400 	.word	0x80002400
 8006010:	080063c3 	.word	0x080063c3

08006014 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	@ 0x28
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	460b      	mov	r3, r1
 8006022:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b20      	cmp	r3, #32
 8006032:	f040 80d2 	bne.w	80061da <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006044:	d101      	bne.n	800604a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
 8006048:	e0c8      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_I2C_IsDeviceReady+0x44>
 8006054:	2302      	movs	r3, #2
 8006056:	e0c1      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2224      	movs	r2, #36	@ 0x24
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d105      	bne.n	8006082 <HAL_I2C_IsDeviceReady+0x6e>
 8006076:	897b      	ldrh	r3, [r7, #10]
 8006078:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800607c:	4b59      	ldr	r3, [pc, #356]	@ (80061e4 <HAL_I2C_IsDeviceReady+0x1d0>)
 800607e:	4313      	orrs	r3, r2
 8006080:	e004      	b.n	800608c <HAL_I2C_IsDeviceReady+0x78>
 8006082:	897b      	ldrh	r3, [r7, #10]
 8006084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006088:	4b57      	ldr	r3, [pc, #348]	@ (80061e8 <HAL_I2C_IsDeviceReady+0x1d4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006092:	f7fc fbab 	bl	80027ec <HAL_GetTick>
 8006096:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	bf0c      	ite	eq
 80060a6:	2301      	moveq	r3, #1
 80060a8:	2300      	movne	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80060c4:	e034      	b.n	8006130 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d01a      	beq.n	8006104 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fc fb8d 	bl	80027ec <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <HAL_I2C_IsDeviceReady+0xd0>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10f      	bne.n	8006104 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e06b      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b20      	cmp	r3, #32
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b10      	cmp	r3, #16
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006130:	7ffb      	ldrb	r3, [r7, #31]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <HAL_I2C_IsDeviceReady+0x128>
 8006136:	7fbb      	ldrb	r3, [r7, #30]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0c4      	beq.n	80060c6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d01a      	beq.n	8006180 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	2120      	movs	r1, #32
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f001 feab 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e03b      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2220      	movs	r2, #32
 800616a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e02d      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	2120      	movs	r1, #32
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f001 fe90 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e020      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2210      	movs	r2, #16
 80061a0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2220      	movs	r2, #32
 80061a8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	3301      	adds	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	f63f af5a 	bhi.w	800606e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	02002000 	.word	0x02002000
 80061e8:	02002800 	.word	0x02002800

080061ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
  }
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00f      	beq.n	8006262 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006260:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00f      	beq.n	800628c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627a:	f043 0208 	orr.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800628a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00f      	beq.n	80062b6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a4:	f043 0202 	orr.w	r2, r3, #2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 030b 	and.w	r3, r3, #11
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fb13 	bl	80078f4 <I2C_ITError>
  }
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
 8006332:	4613      	mov	r3, r2
 8006334:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b4:	b2db      	uxtb	r3, r3
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b088      	sub	sp, #32
 80063c6:	af02      	add	r7, sp, #8
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <I2C_Master_ISR_IT+0x1e>
 80063dc:	2302      	movs	r3, #2
 80063de:	e113      	b.n	8006608 <I2C_Master_ISR_IT+0x246>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d012      	beq.n	8006418 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2210      	movs	r2, #16
 8006402:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f001 fb86 	bl	8007b22 <I2C_Flush_TXDR>
 8006416:	e0e4      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d022      	beq.n	8006468 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01d      	beq.n	8006468 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0304 	bic.w	r3, r3, #4
 8006432:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006466:	e0bc      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d128      	bne.n	80064c4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006478:	2b00      	cmp	r3, #0
 800647a:	d023      	beq.n	80064c4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01e      	beq.n	80064c4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80a8 	beq.w	80065e2 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80064c2:	e08e      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d05c      	beq.n	8006588 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d057      	beq.n	8006588 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d040      	beq.n	8006564 <I2C_Master_ISR_IT+0x1a2>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d13c      	bne.n	8006564 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064f6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2bff      	cmp	r3, #255	@ 0xff
 8006500:	d90e      	bls.n	8006520 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	22ff      	movs	r2, #255	@ 0xff
 8006506:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650c:	b2da      	uxtb	r2, r3
 800650e:	8a79      	ldrh	r1, [r7, #18]
 8006510:	2300      	movs	r3, #0
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 fe03 	bl	8008124 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800651e:	e032      	b.n	8006586 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006532:	d00b      	beq.n	800654c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006538:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800653e:	8a79      	ldrh	r1, [r7, #18]
 8006540:	2000      	movs	r0, #0
 8006542:	9000      	str	r0, [sp, #0]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f001 fded 	bl	8008124 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800654a:	e01c      	b.n	8006586 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006550:	b2da      	uxtb	r2, r3
 8006552:	8a79      	ldrh	r1, [r7, #18]
 8006554:	2300      	movs	r3, #0
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 fde1 	bl	8008124 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006562:	e010      	b.n	8006586 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006572:	d003      	beq.n	800657c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fdb3 	bl	80070e0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800657a:	e032      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800657c:	2140      	movs	r1, #64	@ 0x40
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f001 f9b8 	bl	80078f4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006584:	e02d      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
 8006586:	e02c      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d027      	beq.n	80065e2 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006598:	2b00      	cmp	r3, #0
 800659a:	d022      	beq.n	80065e2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d119      	bne.n	80065da <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065b4:	d015      	beq.n	80065e2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065be:	d108      	bne.n	80065d2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	e007      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fd84 	bl	80070e0 <I2C_ITMasterSeqCplt>
 80065d8:	e003      	b.n	80065e2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065da:	2140      	movs	r1, #64	@ 0x40
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f001 f989 	bl	80078f4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fe0b 	bl	8007214 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <I2C_Slave_ISR_IT+0x24>
 8006630:	2302      	movs	r3, #2
 8006632:	e0e2      	b.n	80067fa <I2C_Slave_ISR_IT+0x1ea>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006650:	6939      	ldr	r1, [r7, #16]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fea6 	bl	80073a4 <I2C_ITSlaveCplt>
 8006658:	e0ca      	b.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d04b      	beq.n	80066fc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800666a:	2b00      	cmp	r3, #0
 800666c:	d046      	beq.n	80066fc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d128      	bne.n	80066ca <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b28      	cmp	r3, #40	@ 0x28
 8006682:	d108      	bne.n	8006696 <I2C_Slave_ISR_IT+0x86>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800668a:	d104      	bne.n	8006696 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800668c:	6939      	ldr	r1, [r7, #16]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f001 f8dc 	bl	800784c <I2C_ITListenCplt>
 8006694:	e031      	b.n	80066fa <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b29      	cmp	r3, #41	@ 0x29
 80066a0:	d10e      	bne.n	80066c0 <I2C_Slave_ISR_IT+0xb0>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066a8:	d00a      	beq.n	80066c0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2210      	movs	r2, #16
 80066b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f001 fa35 	bl	8007b22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fd4e 	bl	800715a <I2C_ITSlaveSeqCplt>
 80066be:	e01c      	b.n	80066fa <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2210      	movs	r2, #16
 80066c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80066c8:	e08f      	b.n	80067ea <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2210      	movs	r2, #16
 80066d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d6:	f043 0204 	orr.w	r2, r3, #4
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <I2C_Slave_ISR_IT+0xdc>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066ea:	d17e      	bne.n	80067ea <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f0:	4619      	mov	r1, r3
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f001 f8fe 	bl	80078f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80066f8:	e077      	b.n	80067ea <I2C_Slave_ISR_IT+0x1da>
 80066fa:	e076      	b.n	80067ea <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d02f      	beq.n	8006766 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02a      	beq.n	8006766 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d14b      	bne.n	80067ee <I2C_Slave_ISR_IT+0x1de>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800675c:	d047      	beq.n	80067ee <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fcfb 	bl	800715a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006764:	e043      	b.n	80067ee <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800677a:	6939      	ldr	r1, [r7, #16]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fc2b 	bl	8006fd8 <I2C_ITAddrCplt>
 8006782:	e035      	b.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d030      	beq.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02b      	beq.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d018      	beq.n	80067d4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80067d2:	e00d      	b.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067da:	d002      	beq.n	80067e2 <I2C_Slave_ISR_IT+0x1d2>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fcb9 	bl	800715a <I2C_ITSlaveSeqCplt>
 80067e8:	e002      	b.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80067ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af02      	add	r7, sp, #8
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <I2C_Master_ISR_DMA+0x1a>
 8006818:	2302      	movs	r3, #2
 800681a:	e0d9      	b.n	80069d0 <I2C_Master_ISR_DMA+0x1ce>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006834:	2b00      	cmp	r3, #0
 8006836:	d011      	beq.n	800685c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2210      	movs	r2, #16
 800683e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006844:	f043 0204 	orr.w	r2, r3, #4
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800684c:	2120      	movs	r1, #32
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 fc9a 	bl	8008188 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f001 f964 	bl	8007b22 <I2C_Flush_TXDR>
 800685a:	e0b4      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d071      	beq.n	800694a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800686c:	2b00      	cmp	r3, #0
 800686e:	d06c      	beq.n	800694a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800687e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04e      	beq.n	8006928 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006896:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800689c:	b29b      	uxth	r3, r3
 800689e:	2bff      	cmp	r3, #255	@ 0xff
 80068a0:	d906      	bls.n	80068b0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	22ff      	movs	r2, #255	@ 0xff
 80068a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80068a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e010      	b.n	80068d2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068c2:	d003      	beq.n	80068cc <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e002      	b.n	80068d2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80068cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068d0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	8a79      	ldrh	r1, [r7, #18]
 80068da:	2300      	movs	r3, #0
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f001 fc1f 	bl	8008124 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b22      	cmp	r3, #34	@ 0x22
 8006902:	d108      	bne.n	8006916 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006912:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006914:	e057      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006924:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006926:	e04e      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006936:	d003      	beq.n	8006940 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fbd1 	bl	80070e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800693e:	e042      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006940:	2140      	movs	r1, #64	@ 0x40
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 ffd6 	bl	80078f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006948:	e03d      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d028      	beq.n	80069a6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800695a:	2b00      	cmp	r3, #0
 800695c:	d023      	beq.n	80069a6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d119      	bne.n	800699c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006976:	d025      	beq.n	80069c4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006980:	d108      	bne.n	8006994 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006990:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006992:	e017      	b.n	80069c4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 fba3 	bl	80070e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800699a:	e013      	b.n	80069c4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800699c:	2140      	movs	r1, #64	@ 0x40
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 ffa8 	bl	80078f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80069a4:	e00e      	b.n	80069c4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fc29 	bl	8007214 <I2C_ITMasterCplt>
 80069c2:	e000      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80069c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80069e4:	4b8d      	ldr	r3, [pc, #564]	@ (8006c1c <I2C_Mem_ISR_DMA+0x244>)
 80069e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <I2C_Mem_ISR_DMA+0x1e>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e10e      	b.n	8006c14 <I2C_Mem_ISR_DMA+0x23c>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d016      	beq.n	8006a36 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2210      	movs	r2, #16
 8006a18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	f043 0204 	orr.w	r2, r3, #4
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a26:	2120      	movs	r1, #32
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f001 fbad 	bl	8008188 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 f877 	bl	8007b22 <I2C_Flush_TXDR>
 8006a34:	e0e9      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a5c:	e0d5      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d05f      	beq.n	8006b28 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d05a      	beq.n	8006b28 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a72:	2101      	movs	r1, #1
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f001 fc0b 	bl	8008290 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006a7a:	2110      	movs	r1, #16
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f001 fb83 	bl	8008188 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d048      	beq.n	8006b1e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2bff      	cmp	r3, #255	@ 0xff
 8006a94:	d910      	bls.n	8006ab8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	22ff      	movs	r2, #255	@ 0xff
 8006a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa0:	b299      	uxth	r1, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f001 fb37 	bl	8008124 <I2C_TransferConfig>
 8006ab6:	e011      	b.n	8006adc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac6:	b299      	uxth	r1, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f001 fb24 	bl	8008124 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b22      	cmp	r3, #34	@ 0x22
 8006af8:	d108      	bne.n	8006b0c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b0a:	e07e      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b1c:	e075      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b1e:	2140      	movs	r1, #64	@ 0x40
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fee7 	bl	80078f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006b26:	e070      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d05d      	beq.n	8006bee <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d058      	beq.n	8006bee <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f001 fba6 	bl	8008290 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b44:	2110      	movs	r1, #16
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 fb1e 	bl	8008188 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b22      	cmp	r3, #34	@ 0x22
 8006b56:	d101      	bne.n	8006b5c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006b58:	4b31      	ldr	r3, [pc, #196]	@ (8006c20 <I2C_Mem_ISR_DMA+0x248>)
 8006b5a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2bff      	cmp	r3, #255	@ 0xff
 8006b64:	d910      	bls.n	8006b88 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	22ff      	movs	r2, #255	@ 0xff
 8006b6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b70:	b299      	uxth	r1, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 facf 	bl	8008124 <I2C_TransferConfig>
 8006b86:	e011      	b.n	8006bac <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b96:	b299      	uxth	r1, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f001 fabc 	bl	8008124 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b22      	cmp	r3, #34	@ 0x22
 8006bc8:	d108      	bne.n	8006bdc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bd8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bda:	e016      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bec:	e00d      	b.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fb05 	bl	8007214 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	80002000 	.word	0x80002000
 8006c20:	80002400 	.word	0x80002400

08006c24 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <I2C_Slave_ISR_DMA+0x24>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e1c2      	b.n	8006fce <I2C_Slave_ISR_DMA+0x3aa>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 fb9c 	bl	80073a4 <I2C_ITSlaveCplt>
 8006c6c:	e1aa      	b.n	8006fc4 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8197 	beq.w	8006fa8 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8191 	beq.w	8006fa8 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d105      	bne.n	8006c9c <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 817f 	beq.w	8006f9a <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d07b      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d076      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a74      	ldr	r2, [pc, #464]	@ (8006e88 <I2C_Slave_ISR_DMA+0x264>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d059      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a72      	ldr	r2, [pc, #456]	@ (8006e8c <I2C_Slave_ISR_DMA+0x268>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d053      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a70      	ldr	r2, [pc, #448]	@ (8006e90 <I2C_Slave_ISR_DMA+0x26c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d04d      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a6e      	ldr	r2, [pc, #440]	@ (8006e94 <I2C_Slave_ISR_DMA+0x270>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d047      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6c      	ldr	r2, [pc, #432]	@ (8006e98 <I2C_Slave_ISR_DMA+0x274>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d041      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8006e9c <I2C_Slave_ISR_DMA+0x278>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a68      	ldr	r2, [pc, #416]	@ (8006ea0 <I2C_Slave_ISR_DMA+0x27c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d035      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a66      	ldr	r2, [pc, #408]	@ (8006ea4 <I2C_Slave_ISR_DMA+0x280>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d02f      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a64      	ldr	r2, [pc, #400]	@ (8006ea8 <I2C_Slave_ISR_DMA+0x284>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d029      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a62      	ldr	r2, [pc, #392]	@ (8006eac <I2C_Slave_ISR_DMA+0x288>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d023      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a60      	ldr	r2, [pc, #384]	@ (8006eb0 <I2C_Slave_ISR_DMA+0x28c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5e      	ldr	r2, [pc, #376]	@ (8006eb4 <I2C_Slave_ISR_DMA+0x290>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d017      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a5c      	ldr	r2, [pc, #368]	@ (8006eb8 <I2C_Slave_ISR_DMA+0x294>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d011      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a5a      	ldr	r2, [pc, #360]	@ (8006ebc <I2C_Slave_ISR_DMA+0x298>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a58      	ldr	r2, [pc, #352]	@ (8006ec0 <I2C_Slave_ISR_DMA+0x29c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d005      	beq.n	8006d6e <I2C_Slave_ISR_DMA+0x14a>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a56      	ldr	r2, [pc, #344]	@ (8006ec4 <I2C_Slave_ISR_DMA+0x2a0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d109      	bne.n	8006d82 <I2C_Slave_ISR_DMA+0x15e>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	e008      	b.n	8006d94 <I2C_Slave_ISR_DMA+0x170>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	2300      	movne	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 809e 	beq.w	8006ee2 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8098 	beq.w	8006ee2 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a33      	ldr	r2, [pc, #204]	@ (8006e88 <I2C_Slave_ISR_DMA+0x264>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d059      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a31      	ldr	r2, [pc, #196]	@ (8006e8c <I2C_Slave_ISR_DMA+0x268>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d053      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8006e90 <I2C_Slave_ISR_DMA+0x26c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04d      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8006e94 <I2C_Slave_ISR_DMA+0x270>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d047      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e98 <I2C_Slave_ISR_DMA+0x274>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d041      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a29      	ldr	r2, [pc, #164]	@ (8006e9c <I2C_Slave_ISR_DMA+0x278>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d03b      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a27      	ldr	r2, [pc, #156]	@ (8006ea0 <I2C_Slave_ISR_DMA+0x27c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d035      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a25      	ldr	r2, [pc, #148]	@ (8006ea4 <I2C_Slave_ISR_DMA+0x280>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02f      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a23      	ldr	r2, [pc, #140]	@ (8006ea8 <I2C_Slave_ISR_DMA+0x284>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d029      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a21      	ldr	r2, [pc, #132]	@ (8006eac <I2C_Slave_ISR_DMA+0x288>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d023      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <I2C_Slave_ISR_DMA+0x28c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d01d      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb4 <I2C_Slave_ISR_DMA+0x290>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d017      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb8 <I2C_Slave_ISR_DMA+0x294>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d011      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a19      	ldr	r2, [pc, #100]	@ (8006ebc <I2C_Slave_ISR_DMA+0x298>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a17      	ldr	r2, [pc, #92]	@ (8006ec0 <I2C_Slave_ISR_DMA+0x29c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d005      	beq.n	8006e72 <I2C_Slave_ISR_DMA+0x24e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a15      	ldr	r2, [pc, #84]	@ (8006ec4 <I2C_Slave_ISR_DMA+0x2a0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d12a      	bne.n	8006ec8 <I2C_Slave_ISR_DMA+0x2a4>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bf0c      	ite	eq
 8006e7e:	2301      	moveq	r3, #1
 8006e80:	2300      	movne	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	e029      	b.n	8006eda <I2C_Slave_ISR_DMA+0x2b6>
 8006e86:	bf00      	nop
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020028 	.word	0x40020028
 8006e90:	40020040 	.word	0x40020040
 8006e94:	40020058 	.word	0x40020058
 8006e98:	40020070 	.word	0x40020070
 8006e9c:	40020088 	.word	0x40020088
 8006ea0:	400200a0 	.word	0x400200a0
 8006ea4:	400200b8 	.word	0x400200b8
 8006ea8:	40020410 	.word	0x40020410
 8006eac:	40020428 	.word	0x40020428
 8006eb0:	40020440 	.word	0x40020440
 8006eb4:	40020458 	.word	0x40020458
 8006eb8:	40020470 	.word	0x40020470
 8006ebc:	40020488 	.word	0x40020488
 8006ec0:	400204a0 	.word	0x400204a0
 8006ec4:	400204b8 	.word	0x400204b8
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bf0c      	ite	eq
 8006ed4:	2301      	moveq	r3, #1
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d128      	bne.n	8006f3a <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b28      	cmp	r3, #40	@ 0x28
 8006ef2:	d108      	bne.n	8006f06 <I2C_Slave_ISR_DMA+0x2e2>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006efa:	d104      	bne.n	8006f06 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 fca4 	bl	800784c <I2C_ITListenCplt>
 8006f04:	e048      	b.n	8006f98 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b29      	cmp	r3, #41	@ 0x29
 8006f10:	d10e      	bne.n	8006f30 <I2C_Slave_ISR_DMA+0x30c>
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f18:	d00a      	beq.n	8006f30 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2210      	movs	r2, #16
 8006f20:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fdfd 	bl	8007b22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f916 	bl	800715a <I2C_ITSlaveSeqCplt>
 8006f2e:	e033      	b.n	8006f98 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2210      	movs	r2, #16
 8006f36:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006f38:	e034      	b.n	8006fa4 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	f043 0204 	orr.w	r2, r3, #4
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f54:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <I2C_Slave_ISR_DMA+0x340>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f62:	d11f      	bne.n	8006fa4 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b21      	cmp	r3, #33	@ 0x21
 8006f68:	d002      	beq.n	8006f70 <I2C_Slave_ISR_DMA+0x34c>
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	2b29      	cmp	r3, #41	@ 0x29
 8006f6e:	d103      	bne.n	8006f78 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2221      	movs	r2, #33	@ 0x21
 8006f74:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f76:	e008      	b.n	8006f8a <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b22      	cmp	r3, #34	@ 0x22
 8006f7c:	d002      	beq.n	8006f84 <I2C_Slave_ISR_DMA+0x360>
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f82:	d102      	bne.n	8006f8a <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2222      	movs	r2, #34	@ 0x22
 8006f88:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	4619      	mov	r1, r3
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fcaf 	bl	80078f4 <I2C_ITError>
      if (treatdmanack == 1U)
 8006f96:	e005      	b.n	8006fa4 <I2C_Slave_ISR_DMA+0x380>
 8006f98:	e004      	b.n	8006fa4 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006fa2:	e00f      	b.n	8006fc4 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8006fa4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006fa6:	e00d      	b.n	8006fc4 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d008      	beq.n	8006fc4 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f80a 	bl	8006fd8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006fee:	2b28      	cmp	r3, #40	@ 0x28
 8006ff0:	d16a      	bne.n	80070c8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	0c1b      	lsrs	r3, r3, #16
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	b29b      	uxth	r3, r3
 800700c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007010:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800701e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800702c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d138      	bne.n	80070a8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	09db      	lsrs	r3, r3, #7
 800703a:	b29a      	uxth	r2, r3
 800703c:	89bb      	ldrh	r3, [r7, #12]
 800703e:	4053      	eors	r3, r2
 8007040:	b29b      	uxth	r3, r3
 8007042:	f003 0306 	and.w	r3, r3, #6
 8007046:	2b00      	cmp	r3, #0
 8007048:	d11c      	bne.n	8007084 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800704a:	897b      	ldrh	r3, [r7, #10]
 800704c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705c:	2b02      	cmp	r3, #2
 800705e:	d13b      	bne.n	80070d8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2208      	movs	r2, #8
 800706c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007076:	89ba      	ldrh	r2, [r7, #12]
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff f952 	bl	8006326 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007082:	e029      	b.n	80070d8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007088:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f8ff 	bl	8008290 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800709a:	89ba      	ldrh	r2, [r7, #12]
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff f940 	bl	8006326 <HAL_I2C_AddrCallback>
}
 80070a6:	e017      	b.n	80070d8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80070a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 f8ef 	bl	8008290 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80070ba:	89ba      	ldrh	r2, [r7, #12]
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff f930 	bl	8006326 <HAL_I2C_AddrCallback>
}
 80070c6:	e007      	b.n	80070d8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2208      	movs	r2, #8
 80070ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b21      	cmp	r3, #33	@ 0x21
 80070fa:	d115      	bne.n	8007128 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2211      	movs	r2, #17
 8007108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007110:	2101      	movs	r1, #1
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f8bc 	bl	8008290 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff f8d8 	bl	80062d6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007126:	e014      	b.n	8007152 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2212      	movs	r2, #18
 8007134:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800713c:	2102      	movs	r1, #2
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 f8a6 	bl	8008290 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff f8cc 	bl	80062ea <HAL_I2C_MasterRxCpltCallback>
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e00c      	b.n	80071a8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071a6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b29      	cmp	r3, #41	@ 0x29
 80071b2:	d112      	bne.n	80071da <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2228      	movs	r2, #40	@ 0x28
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2221      	movs	r2, #33	@ 0x21
 80071c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071c2:	2101      	movs	r1, #1
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f863 	bl	8008290 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff f893 	bl	80062fe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80071d8:	e017      	b.n	800720a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80071e4:	d111      	bne.n	800720a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2228      	movs	r2, #40	@ 0x28
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2222      	movs	r2, #34	@ 0x22
 80071f2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071f4:	2102      	movs	r1, #2
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 f84a 	bl	8008290 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff f884 	bl	8006312 <HAL_I2C_SlaveRxCpltCallback>
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2220      	movs	r2, #32
 8007228:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b21      	cmp	r3, #33	@ 0x21
 8007234:	d107      	bne.n	8007246 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007236:	2101      	movs	r1, #1
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f829 	bl	8008290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2211      	movs	r2, #17
 8007242:	631a      	str	r2, [r3, #48]	@ 0x30
 8007244:	e00c      	b.n	8007260 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b22      	cmp	r3, #34	@ 0x22
 8007250:	d106      	bne.n	8007260 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007252:	2102      	movs	r1, #2
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f81b 	bl	8008290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2212      	movs	r2, #18
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6859      	ldr	r1, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b4c      	ldr	r3, [pc, #304]	@ (800739c <I2C_ITMasterCplt+0x188>)
 800726c:	400b      	ands	r3, r1
 800726e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a49      	ldr	r2, [pc, #292]	@ (80073a0 <I2C_ITMasterCplt+0x18c>)
 800727a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2210      	movs	r2, #16
 800728c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007292:	f043 0204 	orr.w	r2, r3, #4
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b60      	cmp	r3, #96	@ 0x60
 80072a4:	d10a      	bne.n	80072bc <I2C_ITMasterCplt+0xa8>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80072ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc30 	bl	8007b22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b60      	cmp	r3, #96	@ 0x60
 80072d2:	d002      	beq.n	80072da <I2C_ITMasterCplt+0xc6>
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fb07 	bl	80078f4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80072e6:	e054      	b.n	8007392 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b21      	cmp	r3, #33	@ 0x21
 80072f2:	d124      	bne.n	800733e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	d10b      	bne.n	8007326 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff f819 	bl	8006356 <HAL_I2C_MemTxCpltCallback>
}
 8007324:	e035      	b.n	8007392 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fe ffcd 	bl	80062d6 <HAL_I2C_MasterTxCpltCallback>
}
 800733c:	e029      	b.n	8007392 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b22      	cmp	r3, #34	@ 0x22
 8007348:	d123      	bne.n	8007392 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b40      	cmp	r3, #64	@ 0x40
 8007362:	d10b      	bne.n	800737c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fe fff8 	bl	800636a <HAL_I2C_MemRxCpltCallback>
}
 800737a:	e00a      	b.n	8007392 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fe ffac 	bl	80062ea <HAL_I2C_MasterRxCpltCallback>
}
 8007392:	bf00      	nop
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	fe00e800 	.word	0xfe00e800
 80073a0:	ffff0000 	.word	0xffff0000

080073a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2220      	movs	r2, #32
 80073ce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	2b21      	cmp	r3, #33	@ 0x21
 80073d4:	d002      	beq.n	80073dc <I2C_ITSlaveCplt+0x38>
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	2b29      	cmp	r3, #41	@ 0x29
 80073da:	d108      	bne.n	80073ee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80073dc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 ff55 	bl	8008290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2221      	movs	r2, #33	@ 0x21
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80073ec:	e019      	b.n	8007422 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	2b22      	cmp	r3, #34	@ 0x22
 80073f2:	d002      	beq.n	80073fa <I2C_ITSlaveCplt+0x56>
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f8:	d108      	bne.n	800740c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80073fa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 ff46 	bl	8008290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2222      	movs	r2, #34	@ 0x22
 8007408:	631a      	str	r2, [r3, #48]	@ 0x30
 800740a:	e00a      	b.n	8007422 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	2b28      	cmp	r3, #40	@ 0x28
 8007410:	d107      	bne.n	8007422 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007412:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 ff3a 	bl	8008290 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007430:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b7f      	ldr	r3, [pc, #508]	@ (800763c <I2C_ITSlaveCplt+0x298>)
 800743e:	400b      	ands	r3, r1
 8007440:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fb6d 	bl	8007b22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d07a      	beq.n	8007548 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007460:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 8111 	beq.w	800768e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a73      	ldr	r2, [pc, #460]	@ (8007640 <I2C_ITSlaveCplt+0x29c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d059      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a71      	ldr	r2, [pc, #452]	@ (8007644 <I2C_ITSlaveCplt+0x2a0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d053      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a6f      	ldr	r2, [pc, #444]	@ (8007648 <I2C_ITSlaveCplt+0x2a4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d04d      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a6d      	ldr	r2, [pc, #436]	@ (800764c <I2C_ITSlaveCplt+0x2a8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d047      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a6b      	ldr	r2, [pc, #428]	@ (8007650 <I2C_ITSlaveCplt+0x2ac>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d041      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a69      	ldr	r2, [pc, #420]	@ (8007654 <I2C_ITSlaveCplt+0x2b0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d03b      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a67      	ldr	r2, [pc, #412]	@ (8007658 <I2C_ITSlaveCplt+0x2b4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d035      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a65      	ldr	r2, [pc, #404]	@ (800765c <I2C_ITSlaveCplt+0x2b8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d02f      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a63      	ldr	r2, [pc, #396]	@ (8007660 <I2C_ITSlaveCplt+0x2bc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d029      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a61      	ldr	r2, [pc, #388]	@ (8007664 <I2C_ITSlaveCplt+0x2c0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d023      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a5f      	ldr	r2, [pc, #380]	@ (8007668 <I2C_ITSlaveCplt+0x2c4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01d      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a5d      	ldr	r2, [pc, #372]	@ (800766c <I2C_ITSlaveCplt+0x2c8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d017      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5b      	ldr	r2, [pc, #364]	@ (8007670 <I2C_ITSlaveCplt+0x2cc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d011      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a59      	ldr	r2, [pc, #356]	@ (8007674 <I2C_ITSlaveCplt+0x2d0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00b      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a57      	ldr	r2, [pc, #348]	@ (8007678 <I2C_ITSlaveCplt+0x2d4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d005      	beq.n	800752c <I2C_ITSlaveCplt+0x188>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a55      	ldr	r2, [pc, #340]	@ (800767c <I2C_ITSlaveCplt+0x2d8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d105      	bne.n	8007538 <I2C_ITSlaveCplt+0x194>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	b29b      	uxth	r3, r3
 8007536:	e004      	b.n	8007542 <I2C_ITSlaveCplt+0x19e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	b29b      	uxth	r3, r3
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007546:	e0a2      	b.n	800768e <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 809d 	beq.w	800768e <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007562:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8090 	beq.w	800768e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a32      	ldr	r2, [pc, #200]	@ (8007640 <I2C_ITSlaveCplt+0x29c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d059      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a30      	ldr	r2, [pc, #192]	@ (8007644 <I2C_ITSlaveCplt+0x2a0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d053      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2e      	ldr	r2, [pc, #184]	@ (8007648 <I2C_ITSlaveCplt+0x2a4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d04d      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a2c      	ldr	r2, [pc, #176]	@ (800764c <I2C_ITSlaveCplt+0x2a8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d047      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007650 <I2C_ITSlaveCplt+0x2ac>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d041      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a28      	ldr	r2, [pc, #160]	@ (8007654 <I2C_ITSlaveCplt+0x2b0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d03b      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a26      	ldr	r2, [pc, #152]	@ (8007658 <I2C_ITSlaveCplt+0x2b4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d035      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a24      	ldr	r2, [pc, #144]	@ (800765c <I2C_ITSlaveCplt+0x2b8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02f      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a22      	ldr	r2, [pc, #136]	@ (8007660 <I2C_ITSlaveCplt+0x2bc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d029      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a20      	ldr	r2, [pc, #128]	@ (8007664 <I2C_ITSlaveCplt+0x2c0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d023      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <I2C_ITSlaveCplt+0x2c4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01d      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1c      	ldr	r2, [pc, #112]	@ (800766c <I2C_ITSlaveCplt+0x2c8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d017      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1a      	ldr	r2, [pc, #104]	@ (8007670 <I2C_ITSlaveCplt+0x2cc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d011      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	@ (8007674 <I2C_ITSlaveCplt+0x2d0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00b      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a16      	ldr	r2, [pc, #88]	@ (8007678 <I2C_ITSlaveCplt+0x2d4>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d005      	beq.n	800762e <I2C_ITSlaveCplt+0x28a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <I2C_ITSlaveCplt+0x2d8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d128      	bne.n	8007680 <I2C_ITSlaveCplt+0x2dc>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b29b      	uxth	r3, r3
 8007638:	e027      	b.n	800768a <I2C_ITSlaveCplt+0x2e6>
 800763a:	bf00      	nop
 800763c:	fe00e800 	.word	0xfe00e800
 8007640:	40020010 	.word	0x40020010
 8007644:	40020028 	.word	0x40020028
 8007648:	40020040 	.word	0x40020040
 800764c:	40020058 	.word	0x40020058
 8007650:	40020070 	.word	0x40020070
 8007654:	40020088 	.word	0x40020088
 8007658:	400200a0 	.word	0x400200a0
 800765c:	400200b8 	.word	0x400200b8
 8007660:	40020410 	.word	0x40020410
 8007664:	40020428 	.word	0x40020428
 8007668:	40020440 	.word	0x40020440
 800766c:	40020458 	.word	0x40020458
 8007670:	40020470 	.word	0x40020470
 8007674:	40020488 	.word	0x40020488
 8007678:	400204a0 	.word	0x400204a0
 800767c:	400204b8 	.word	0x400204b8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	b29b      	uxth	r3, r3
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	d020      	beq.n	80076da <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0304 	bic.w	r3, r3, #4
 800769e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00c      	beq.n	80076da <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e8:	f043 0204 	orr.w	r2, r3, #4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d049      	beq.n	800778e <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007700:	2b00      	cmp	r3, #0
 8007702:	d044      	beq.n	800778e <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d128      	bne.n	8007760 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b28      	cmp	r3, #40	@ 0x28
 8007718:	d108      	bne.n	800772c <I2C_ITSlaveCplt+0x388>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007720:	d104      	bne.n	800772c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f891 	bl	800784c <I2C_ITListenCplt>
 800772a:	e030      	b.n	800778e <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b29      	cmp	r3, #41	@ 0x29
 8007736:	d10e      	bne.n	8007756 <I2C_ITSlaveCplt+0x3b2>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800773e:	d00a      	beq.n	8007756 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2210      	movs	r2, #16
 8007746:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9ea 	bl	8007b22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff fd03 	bl	800715a <I2C_ITSlaveSeqCplt>
 8007754:	e01b      	b.n	800778e <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2210      	movs	r2, #16
 800775c:	61da      	str	r2, [r3, #28]
 800775e:	e016      	b.n	800778e <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2210      	movs	r2, #16
 8007766:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776c:	f043 0204 	orr.w	r2, r3, #4
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <I2C_ITSlaveCplt+0x3de>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007780:	d105      	bne.n	800778e <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f8b3 	bl	80078f4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d010      	beq.n	80077c6 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8a2 	bl	80078f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b28      	cmp	r3, #40	@ 0x28
 80077ba:	d141      	bne.n	8007840 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80077bc:	6979      	ldr	r1, [r7, #20]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f844 	bl	800784c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077c4:	e03c      	b.n	8007840 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077ce:	d014      	beq.n	80077fa <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff fcc2 	bl	800715a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007848 <I2C_ITSlaveCplt+0x4a4>)
 80077da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fe fda5 	bl	8006342 <HAL_I2C_ListenCpltCallback>
}
 80077f8:	e022      	b.n	8007840 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b22      	cmp	r3, #34	@ 0x22
 8007804:	d10e      	bne.n	8007824 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7fe fd78 	bl	8006312 <HAL_I2C_SlaveRxCpltCallback>
}
 8007822:	e00d      	b.n	8007840 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fe fd5f 	bl	80062fe <HAL_I2C_SlaveTxCpltCallback>
}
 8007840:	bf00      	nop
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	ffff0000 	.word	0xffff0000

0800784c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a25      	ldr	r2, [pc, #148]	@ (80078f0 <I2C_ITListenCplt+0xa4>)
 800785a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d022      	beq.n	80078c8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d012      	beq.n	80078c8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c0:	f043 0204 	orr.w	r2, r3, #4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80078c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fcdf 	bl	8008290 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2210      	movs	r2, #16
 80078d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fe fd2d 	bl	8006342 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	ffff0000 	.word	0xffff0000

080078f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007904:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a6d      	ldr	r2, [pc, #436]	@ (8007ac8 <I2C_ITError+0x1d4>)
 8007912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b28      	cmp	r3, #40	@ 0x28
 800792a:	d005      	beq.n	8007938 <I2C_ITError+0x44>
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b29      	cmp	r3, #41	@ 0x29
 8007930:	d002      	beq.n	8007938 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b2a      	cmp	r3, #42	@ 0x2a
 8007936:	d10b      	bne.n	8007950 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007938:	2103      	movs	r1, #3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fca8 	bl	8008290 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2228      	movs	r2, #40	@ 0x28
 8007944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a60      	ldr	r2, [pc, #384]	@ (8007acc <I2C_ITError+0x1d8>)
 800794c:	635a      	str	r2, [r3, #52]	@ 0x34
 800794e:	e030      	b.n	80079b2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007950:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc9b 	bl	8008290 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8e1 	bl	8007b22 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b60      	cmp	r3, #96	@ 0x60
 800796a:	d01f      	beq.n	80079ac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b20      	cmp	r3, #32
 8007980:	d114      	bne.n	80079ac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d109      	bne.n	80079a4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2210      	movs	r2, #16
 8007996:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799c:	f043 0204 	orr.w	r2, r3, #4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2220      	movs	r2, #32
 80079aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d039      	beq.n	8007a34 <I2C_ITError+0x140>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b11      	cmp	r3, #17
 80079c4:	d002      	beq.n	80079cc <I2C_ITError+0xd8>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b21      	cmp	r3, #33	@ 0x21
 80079ca:	d133      	bne.n	8007a34 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079da:	d107      	bne.n	80079ec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fd fa45 	bl	8004e80 <HAL_DMA_GetState>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d017      	beq.n	8007a2c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	4a33      	ldr	r2, [pc, #204]	@ (8007ad0 <I2C_ITError+0x1dc>)
 8007a02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fc f88d 	bl	8003b30 <HAL_DMA_Abort_IT>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d04d      	beq.n	8007ab8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a26:	4610      	mov	r0, r2
 8007a28:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a2a:	e045      	b.n	8007ab8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f851 	bl	8007ad4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a32:	e041      	b.n	8007ab8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d039      	beq.n	8007ab0 <I2C_ITError+0x1bc>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b12      	cmp	r3, #18
 8007a40:	d002      	beq.n	8007a48 <I2C_ITError+0x154>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b22      	cmp	r3, #34	@ 0x22
 8007a46:	d133      	bne.n	8007ab0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a56:	d107      	bne.n	8007a68 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd fa07 	bl	8004e80 <HAL_DMA_GetState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d017      	beq.n	8007aa8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	4a14      	ldr	r2, [pc, #80]	@ (8007ad0 <I2C_ITError+0x1dc>)
 8007a7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fc f84f 	bl	8003b30 <HAL_DMA_Abort_IT>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d011      	beq.n	8007abc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007aa6:	e009      	b.n	8007abc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f813 	bl	8007ad4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007aae:	e005      	b.n	8007abc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f80f 	bl	8007ad4 <I2C_TreatErrorCallback>
  }
}
 8007ab6:	e002      	b.n	8007abe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ab8:	bf00      	nop
 8007aba:	e000      	b.n	8007abe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007abc:	bf00      	nop
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	ffff0000 	.word	0xffff0000
 8007acc:	08006611 	.word	0x08006611
 8007ad0:	08007e75 	.word	0x08007e75

08007ad4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b60      	cmp	r3, #96	@ 0x60
 8007ae6:	d10e      	bne.n	8007b06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fe fc47 	bl	8006392 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b04:	e009      	b.n	8007b1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fe fc32 	bl	800637e <HAL_I2C_ErrorCallback>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d103      	bne.n	8007b40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d007      	beq.n	8007b5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	619a      	str	r2, [r3, #24]
  }
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b86:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007b92:	2120      	movs	r1, #32
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 faf7 	bl	8008188 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007b9a:	e02d      	b.n	8007bf8 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007ba4:	441a      	add	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2bff      	cmp	r3, #255	@ 0xff
 8007bb2:	d903      	bls.n	8007bbc <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	22ff      	movs	r2, #255	@ 0xff
 8007bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007bba:	e004      	b.n	8007bc6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3324      	adds	r3, #36	@ 0x24
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007bdc:	f7fb fd3e 	bl	800365c <HAL_DMA_Start_IT>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007be6:	2110      	movs	r1, #16
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f7ff fe83 	bl	80078f4 <I2C_ITError>
}
 8007bee:	e003      	b.n	8007bf8 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007bf0:	2140      	movs	r1, #64	@ 0x40
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fac8 	bl	8008188 <I2C_Enable_IRQ>
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d076      	beq.n	8007d08 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a71      	ldr	r2, [pc, #452]	@ (8007de8 <I2C_DMAError+0x1e8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d059      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a6f      	ldr	r2, [pc, #444]	@ (8007dec <I2C_DMAError+0x1ec>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d053      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a6d      	ldr	r2, [pc, #436]	@ (8007df0 <I2C_DMAError+0x1f0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d04d      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a6b      	ldr	r2, [pc, #428]	@ (8007df4 <I2C_DMAError+0x1f4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d047      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a69      	ldr	r2, [pc, #420]	@ (8007df8 <I2C_DMAError+0x1f8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d041      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a67      	ldr	r2, [pc, #412]	@ (8007dfc <I2C_DMAError+0x1fc>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d03b      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a65      	ldr	r2, [pc, #404]	@ (8007e00 <I2C_DMAError+0x200>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d035      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a63      	ldr	r2, [pc, #396]	@ (8007e04 <I2C_DMAError+0x204>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d02f      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a61      	ldr	r2, [pc, #388]	@ (8007e08 <I2C_DMAError+0x208>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d029      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8007e0c <I2C_DMAError+0x20c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d023      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a5d      	ldr	r2, [pc, #372]	@ (8007e10 <I2C_DMAError+0x210>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d01d      	beq.n	8007cda <I2C_DMAError+0xda>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a5b      	ldr	r2, [pc, #364]	@ (8007e14 <I2C_DMAError+0x214>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d017      	beq.n	8007cda <I2C_DMAError+0xda>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a59      	ldr	r2, [pc, #356]	@ (8007e18 <I2C_DMAError+0x218>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d011      	beq.n	8007cda <I2C_DMAError+0xda>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a57      	ldr	r2, [pc, #348]	@ (8007e1c <I2C_DMAError+0x21c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00b      	beq.n	8007cda <I2C_DMAError+0xda>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a55      	ldr	r2, [pc, #340]	@ (8007e20 <I2C_DMAError+0x220>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d005      	beq.n	8007cda <I2C_DMAError+0xda>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a53      	ldr	r2, [pc, #332]	@ (8007e24 <I2C_DMAError+0x224>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d109      	bne.n	8007cee <I2C_DMAError+0xee>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bf0c      	ite	eq
 8007ce6:	2301      	moveq	r3, #1
 8007ce8:	2300      	movne	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e008      	b.n	8007d00 <I2C_DMAError+0x100>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bf0c      	ite	eq
 8007cfa:	2301      	moveq	r3, #1
 8007cfc:	2300      	movne	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007d04:	2301      	movs	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8098 	beq.w	8007e42 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a33      	ldr	r2, [pc, #204]	@ (8007de8 <I2C_DMAError+0x1e8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d059      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a31      	ldr	r2, [pc, #196]	@ (8007dec <I2C_DMAError+0x1ec>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d053      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a2f      	ldr	r2, [pc, #188]	@ (8007df0 <I2C_DMAError+0x1f0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d04d      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007df4 <I2C_DMAError+0x1f4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d047      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a2b      	ldr	r2, [pc, #172]	@ (8007df8 <I2C_DMAError+0x1f8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d041      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a29      	ldr	r2, [pc, #164]	@ (8007dfc <I2C_DMAError+0x1fc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d03b      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a27      	ldr	r2, [pc, #156]	@ (8007e00 <I2C_DMAError+0x200>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d035      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a25      	ldr	r2, [pc, #148]	@ (8007e04 <I2C_DMAError+0x204>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d02f      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a23      	ldr	r2, [pc, #140]	@ (8007e08 <I2C_DMAError+0x208>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d029      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a21      	ldr	r2, [pc, #132]	@ (8007e0c <I2C_DMAError+0x20c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d023      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	@ (8007e10 <I2C_DMAError+0x210>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01d      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <I2C_DMAError+0x214>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d017      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e18 <I2C_DMAError+0x218>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d011      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a19      	ldr	r2, [pc, #100]	@ (8007e1c <I2C_DMAError+0x21c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00b      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a17      	ldr	r2, [pc, #92]	@ (8007e20 <I2C_DMAError+0x220>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d005      	beq.n	8007dd2 <I2C_DMAError+0x1d2>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a15      	ldr	r2, [pc, #84]	@ (8007e24 <I2C_DMAError+0x224>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d12a      	bne.n	8007e28 <I2C_DMAError+0x228>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e029      	b.n	8007e3a <I2C_DMAError+0x23a>
 8007de6:	bf00      	nop
 8007de8:	40020010 	.word	0x40020010
 8007dec:	40020028 	.word	0x40020028
 8007df0:	40020040 	.word	0x40020040
 8007df4:	40020058 	.word	0x40020058
 8007df8:	40020070 	.word	0x40020070
 8007dfc:	40020088 	.word	0x40020088
 8007e00:	400200a0 	.word	0x400200a0
 8007e04:	400200b8 	.word	0x400200b8
 8007e08:	40020410 	.word	0x40020410
 8007e0c:	40020428 	.word	0x40020428
 8007e10:	40020440 	.word	0x40020440
 8007e14:	40020458 	.word	0x40020458
 8007e18:	40020470 	.word	0x40020470
 8007e1c:	40020488 	.word	0x40020488
 8007e20:	400204a0 	.word	0x400204a0
 8007e24:	400204b8 	.word	0x400204b8
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bf0c      	ite	eq
 8007e34:	2301      	moveq	r3, #1
 8007e36:	2300      	movne	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fd f82a 	bl	8004e9c <HAL_DMA_GetError>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d00e      	beq.n	8007e6c <I2C_DMAError+0x26c>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e62:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007e64:	2110      	movs	r1, #16
 8007e66:	68b8      	ldr	r0, [r7, #8]
 8007e68:	f7ff fd44 	bl	80078f4 <I2C_ITError>
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	2200      	movs	r2, #0
 8007e90:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff fe16 	bl	8007ad4 <I2C_TreatErrorCallback>
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec0:	e03b      	b.n	8007f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 f84c 	bl	8007f64 <I2C_IsErrorOccurred>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e041      	b.n	8007f5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d02d      	beq.n	8007f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7fa fc85 	bl	80027ec <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d122      	bne.n	8007f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4013      	ands	r3, r2
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d113      	bne.n	8007f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	f043 0220 	orr.w	r2, r3, #32
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e00f      	b.n	8007f5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699a      	ldr	r2, [r3, #24]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4013      	ands	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d0b4      	beq.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	@ 0x28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d068      	beq.n	8008062 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2210      	movs	r2, #16
 8007f96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f98:	e049      	b.n	800802e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa0:	d045      	beq.n	800802e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fa2:	f7fa fc23 	bl	80027ec <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d302      	bcc.n	8007fb8 <I2C_IsErrorOccurred+0x54>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d13a      	bne.n	800802e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fda:	d121      	bne.n	8008020 <I2C_IsErrorOccurred+0xbc>
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fe2:	d01d      	beq.n	8008020 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007fe4:	7cfb      	ldrb	r3, [r7, #19]
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d01a      	beq.n	8008020 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ff8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ffa:	f7fa fbf7 	bl	80027ec <HAL_GetTick>
 8007ffe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008000:	e00e      	b.n	8008020 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008002:	f7fa fbf3 	bl	80027ec <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b19      	cmp	r3, #25
 800800e:	d907      	bls.n	8008020 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	f043 0320 	orr.w	r3, r3, #32
 8008016:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800801e:	e006      	b.n	800802e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d1e9      	bne.n	8008002 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b20      	cmp	r3, #32
 800803a:	d003      	beq.n	8008044 <I2C_IsErrorOccurred+0xe0>
 800803c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0aa      	beq.n	8007f9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2220      	movs	r2, #32
 8008052:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	f043 0304 	orr.w	r3, r3, #4
 800805a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	f043 0308 	orr.w	r3, r3, #8
 800809c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	f043 0302 	orr.w	r3, r3, #2
 80080be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80080d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01c      	beq.n	8008112 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff fd22 	bl	8007b22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6859      	ldr	r1, [r3, #4]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008120 <I2C_IsErrorOccurred+0x1bc>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008116:	4618      	mov	r0, r3
 8008118:	3728      	adds	r7, #40	@ 0x28
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	fe00e800 	.word	0xfe00e800

08008124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	607b      	str	r3, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	817b      	strh	r3, [r7, #10]
 8008132:	4613      	mov	r3, r2
 8008134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008136:	897b      	ldrh	r3, [r7, #10]
 8008138:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800813c:	7a7b      	ldrb	r3, [r7, #9]
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008144:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	4313      	orrs	r3, r2
 800814e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008152:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	0d5b      	lsrs	r3, r3, #21
 800815e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008162:	4b08      	ldr	r3, [pc, #32]	@ (8008184 <I2C_TransferConfig+0x60>)
 8008164:	430b      	orrs	r3, r1
 8008166:	43db      	mvns	r3, r3
 8008168:	ea02 0103 	and.w	r1, r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	03ff63ff 	.word	0x03ff63ff

08008188 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800819c:	4a39      	ldr	r2, [pc, #228]	@ (8008284 <I2C_Enable_IRQ+0xfc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d032      	beq.n	8008208 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80081a6:	4a38      	ldr	r2, [pc, #224]	@ (8008288 <I2C_Enable_IRQ+0x100>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d02d      	beq.n	8008208 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80081b0:	4a36      	ldr	r2, [pc, #216]	@ (800828c <I2C_Enable_IRQ+0x104>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d028      	beq.n	8008208 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80081b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da03      	bge.n	80081c6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80081c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80081c6:	887b      	ldrh	r3, [r7, #2]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80081d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80081d8:	887b      	ldrh	r3, [r7, #2]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80081e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80081ea:	887b      	ldrh	r3, [r7, #2]
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d103      	bne.n	80081f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80081f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081f8:	887b      	ldrh	r3, [r7, #2]
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d133      	bne.n	8008266 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f043 0320 	orr.w	r3, r3, #32
 8008204:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008206:	e02e      	b.n	8008266 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da03      	bge.n	8008218 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008216:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008218:	887b      	ldrh	r3, [r7, #2]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008228:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800822a:	887b      	ldrh	r3, [r7, #2]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800823a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800823c:	887b      	ldrh	r3, [r7, #2]
 800823e:	2b10      	cmp	r3, #16
 8008240:	d103      	bne.n	800824a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008248:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800824a:	887b      	ldrh	r3, [r7, #2]
 800824c:	2b20      	cmp	r3, #32
 800824e:	d103      	bne.n	8008258 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008256:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008258:	887b      	ldrh	r3, [r7, #2]
 800825a:	2b40      	cmp	r3, #64	@ 0x40
 800825c:	d103      	bne.n	8008266 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008264:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	430a      	orrs	r2, r1
 8008274:	601a      	str	r2, [r3, #0]
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	08006803 	.word	0x08006803
 8008288:	08006c25 	.word	0x08006c25
 800828c:	080069d9 	.word	0x080069d9

08008290 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80082a0:	887b      	ldrh	r3, [r7, #2]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80082b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80082be:	2b28      	cmp	r3, #40	@ 0x28
 80082c0:	d003      	beq.n	80082ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80082c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80082ca:	887b      	ldrh	r3, [r7, #2]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00f      	beq.n	80082f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80082da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80082e8:	2b28      	cmp	r3, #40	@ 0x28
 80082ea:	d003      	beq.n	80082f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80082f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80082f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	da03      	bge.n	8008304 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008302:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008304:	887b      	ldrh	r3, [r7, #2]
 8008306:	2b10      	cmp	r3, #16
 8008308:	d103      	bne.n	8008312 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008310:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008312:	887b      	ldrh	r3, [r7, #2]
 8008314:	2b20      	cmp	r3, #32
 8008316:	d103      	bne.n	8008320 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f043 0320 	orr.w	r3, r3, #32
 800831e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008320:	887b      	ldrh	r3, [r7, #2]
 8008322:	2b40      	cmp	r3, #64	@ 0x40
 8008324:	d103      	bne.n	800832e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6819      	ldr	r1, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	43da      	mvns	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	400a      	ands	r2, r1
 800833e:	601a      	str	r2, [r3, #0]
}
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b20      	cmp	r3, #32
 8008360:	d138      	bne.n	80083d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800836c:	2302      	movs	r3, #2
 800836e:	e032      	b.n	80083d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2224      	movs	r2, #36	@ 0x24
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800839e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6819      	ldr	r1, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e000      	b.n	80083d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083d4:	2302      	movs	r3, #2
  }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	d139      	bne.n	800846c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008402:	2302      	movs	r3, #2
 8008404:	e033      	b.n	800846e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2224      	movs	r2, #36	@ 0x24
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	e000      	b.n	800846e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800846c:	2302      	movs	r3, #2
  }
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008484:	4b19      	ldr	r3, [pc, #100]	@ (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b04      	cmp	r3, #4
 800848e:	d00a      	beq.n	80084a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008490:	4b16      	ldr	r3, [pc, #88]	@ (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	429a      	cmp	r2, r3
 800849c:	d001      	beq.n	80084a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e01f      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e01d      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084a6:	4b11      	ldr	r3, [pc, #68]	@ (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f023 0207 	bic.w	r2, r3, #7
 80084ae:	490f      	ldr	r1, [pc, #60]	@ (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084b6:	f7fa f999 	bl	80027ec <HAL_GetTick>
 80084ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084bc:	e009      	b.n	80084d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084be:	f7fa f995 	bl	80027ec <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084cc:	d901      	bls.n	80084d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e007      	b.n	80084e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084d2:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <HAL_PWREx_ConfigSupply+0x70>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084de:	d1ee      	bne.n	80084be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	58024800 	.word	0x58024800

080084f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08c      	sub	sp, #48	@ 0x30
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f000 bc1f 	b.w	8008d42 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80b3 	beq.w	8008678 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008512:	4b95      	ldr	r3, [pc, #596]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800851c:	4b92      	ldr	r3, [pc, #584]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008520:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008524:	2b10      	cmp	r3, #16
 8008526:	d007      	beq.n	8008538 <HAL_RCC_OscConfig+0x48>
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	2b18      	cmp	r3, #24
 800852c:	d112      	bne.n	8008554 <HAL_RCC_OscConfig+0x64>
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d10d      	bne.n	8008554 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008538:	4b8b      	ldr	r3, [pc, #556]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8098 	beq.w	8008676 <HAL_RCC_OscConfig+0x186>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f040 8093 	bne.w	8008676 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e3f6      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800855c:	d106      	bne.n	800856c <HAL_RCC_OscConfig+0x7c>
 800855e:	4b82      	ldr	r3, [pc, #520]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a81      	ldr	r2, [pc, #516]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	e058      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d112      	bne.n	800859a <HAL_RCC_OscConfig+0xaa>
 8008574:	4b7c      	ldr	r3, [pc, #496]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a7b      	ldr	r2, [pc, #492]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800857a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	4b79      	ldr	r3, [pc, #484]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a78      	ldr	r2, [pc, #480]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008586:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	4b76      	ldr	r3, [pc, #472]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a75      	ldr	r2, [pc, #468]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	e041      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085a2:	d112      	bne.n	80085ca <HAL_RCC_OscConfig+0xda>
 80085a4:	4b70      	ldr	r3, [pc, #448]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a6f      	ldr	r2, [pc, #444]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4b6d      	ldr	r3, [pc, #436]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a6c      	ldr	r2, [pc, #432]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b6a      	ldr	r3, [pc, #424]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a69      	ldr	r2, [pc, #420]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	e029      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80085d2:	d112      	bne.n	80085fa <HAL_RCC_OscConfig+0x10a>
 80085d4:	4b64      	ldr	r3, [pc, #400]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a63      	ldr	r2, [pc, #396]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4b61      	ldr	r3, [pc, #388]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a60      	ldr	r2, [pc, #384]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	4b5e      	ldr	r3, [pc, #376]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a5d      	ldr	r2, [pc, #372]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	e011      	b.n	800861e <HAL_RCC_OscConfig+0x12e>
 80085fa:	4b5b      	ldr	r3, [pc, #364]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a5a      	ldr	r2, [pc, #360]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	4b58      	ldr	r3, [pc, #352]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a57      	ldr	r2, [pc, #348]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800860c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	4b55      	ldr	r3, [pc, #340]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a54      	ldr	r2, [pc, #336]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008618:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800861c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d013      	beq.n	800864e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008626:	f7fa f8e1 	bl	80027ec <HAL_GetTick>
 800862a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800862c:	e008      	b.n	8008640 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800862e:	f7fa f8dd 	bl	80027ec <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b64      	cmp	r3, #100	@ 0x64
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e380      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008640:	4b49      	ldr	r3, [pc, #292]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0f0      	beq.n	800862e <HAL_RCC_OscConfig+0x13e>
 800864c:	e014      	b.n	8008678 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fa f8cd 	bl	80027ec <HAL_GetTick>
 8008652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008654:	e008      	b.n	8008668 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008656:	f7fa f8c9 	bl	80027ec <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b64      	cmp	r3, #100	@ 0x64
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e36c      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008668:	4b3f      	ldr	r3, [pc, #252]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f0      	bne.n	8008656 <HAL_RCC_OscConfig+0x166>
 8008674:	e000      	b.n	8008678 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008676:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 808c 	beq.w	800879e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008686:	4b38      	ldr	r3, [pc, #224]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800868e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008690:	4b35      	ldr	r3, [pc, #212]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008694:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <HAL_RCC_OscConfig+0x1bc>
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	2b18      	cmp	r3, #24
 80086a0:	d137      	bne.n	8008712 <HAL_RCC_OscConfig+0x222>
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d132      	bne.n	8008712 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_RCC_OscConfig+0x1d4>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e33e      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086c4:	4b28      	ldr	r3, [pc, #160]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f023 0219 	bic.w	r2, r3, #25
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	4925      	ldr	r1, [pc, #148]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d6:	f7fa f889 	bl	80027ec <HAL_GetTick>
 80086da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086de:	f7fa f885 	bl	80027ec <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e328      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	061b      	lsls	r3, r3, #24
 800870a:	4917      	ldr	r1, [pc, #92]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800870c:	4313      	orrs	r3, r2
 800870e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008710:	e045      	b.n	800879e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d028      	beq.n	800876c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800871a:	4b13      	ldr	r3, [pc, #76]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f023 0219 	bic.w	r2, r3, #25
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	4910      	ldr	r1, [pc, #64]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008728:	4313      	orrs	r3, r2
 800872a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872c:	f7fa f85e 	bl	80027ec <HAL_GetTick>
 8008730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008734:	f7fa f85a 	bl	80027ec <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e2fd      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008746:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008752:	4b05      	ldr	r3, [pc, #20]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	061b      	lsls	r3, r3, #24
 8008760:	4901      	ldr	r1, [pc, #4]	@ (8008768 <HAL_RCC_OscConfig+0x278>)
 8008762:	4313      	orrs	r3, r2
 8008764:	604b      	str	r3, [r1, #4]
 8008766:	e01a      	b.n	800879e <HAL_RCC_OscConfig+0x2ae>
 8008768:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800876c:	4b97      	ldr	r3, [pc, #604]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a96      	ldr	r2, [pc, #600]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008772:	f023 0301 	bic.w	r3, r3, #1
 8008776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008778:	f7fa f838 	bl	80027ec <HAL_GetTick>
 800877c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008780:	f7fa f834 	bl	80027ec <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e2d7      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008792:	4b8e      	ldr	r3, [pc, #568]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f0      	bne.n	8008780 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d06a      	beq.n	8008880 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087aa:	4b88      	ldr	r3, [pc, #544]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087b4:	4b85      	ldr	r3, [pc, #532]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80087b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d007      	beq.n	80087d0 <HAL_RCC_OscConfig+0x2e0>
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2b18      	cmp	r3, #24
 80087c4:	d11b      	bne.n	80087fe <HAL_RCC_OscConfig+0x30e>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d116      	bne.n	80087fe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087d0:	4b7e      	ldr	r3, [pc, #504]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_RCC_OscConfig+0x2f8>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	2b80      	cmp	r3, #128	@ 0x80
 80087e2:	d001      	beq.n	80087e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e2ac      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087e8:	4b78      	ldr	r3, [pc, #480]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	061b      	lsls	r3, r3, #24
 80087f6:	4975      	ldr	r1, [pc, #468]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087fc:	e040      	b.n	8008880 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d023      	beq.n	800884e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008806:	4b71      	ldr	r3, [pc, #452]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a70      	ldr	r2, [pc, #448]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 800880c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008812:	f7f9 ffeb 	bl	80027ec <HAL_GetTick>
 8008816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008818:	e008      	b.n	800882c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800881a:	f7f9 ffe7 	bl	80027ec <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d901      	bls.n	800882c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e28a      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800882c:	4b67      	ldr	r3, [pc, #412]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0f0      	beq.n	800881a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008838:	4b64      	ldr	r3, [pc, #400]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	061b      	lsls	r3, r3, #24
 8008846:	4961      	ldr	r1, [pc, #388]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008848:	4313      	orrs	r3, r2
 800884a:	60cb      	str	r3, [r1, #12]
 800884c:	e018      	b.n	8008880 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800884e:	4b5f      	ldr	r3, [pc, #380]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a5e      	ldr	r2, [pc, #376]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7f9 ffc7 	bl	80027ec <HAL_GetTick>
 800885e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008862:	f7f9 ffc3 	bl	80027ec <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e266      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008874:	4b55      	ldr	r3, [pc, #340]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f0      	bne.n	8008862 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d036      	beq.n	80088fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d019      	beq.n	80088c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008894:	4b4d      	ldr	r3, [pc, #308]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008898:	4a4c      	ldr	r2, [pc, #304]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 800889a:	f043 0301 	orr.w	r3, r3, #1
 800889e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a0:	f7f9 ffa4 	bl	80027ec <HAL_GetTick>
 80088a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088a6:	e008      	b.n	80088ba <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088a8:	f7f9 ffa0 	bl	80027ec <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e243      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088ba:	4b44      	ldr	r3, [pc, #272]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80088bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0f0      	beq.n	80088a8 <HAL_RCC_OscConfig+0x3b8>
 80088c6:	e018      	b.n	80088fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088c8:	4b40      	ldr	r3, [pc, #256]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80088ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088cc:	4a3f      	ldr	r2, [pc, #252]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d4:	f7f9 ff8a 	bl	80027ec <HAL_GetTick>
 80088d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088dc:	f7f9 ff86 	bl	80027ec <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e229      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088ee:	4b37      	ldr	r3, [pc, #220]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80088f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d036      	beq.n	8008974 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d019      	beq.n	8008942 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800890e:	4b2f      	ldr	r3, [pc, #188]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a2e      	ldr	r2, [pc, #184]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008918:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800891a:	f7f9 ff67 	bl	80027ec <HAL_GetTick>
 800891e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008920:	e008      	b.n	8008934 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008922:	f7f9 ff63 	bl	80027ec <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e206      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008934:	4b25      	ldr	r3, [pc, #148]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f0      	beq.n	8008922 <HAL_RCC_OscConfig+0x432>
 8008940:	e018      	b.n	8008974 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008942:	4b22      	ldr	r3, [pc, #136]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a21      	ldr	r2, [pc, #132]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 8008948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800894c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800894e:	f7f9 ff4d 	bl	80027ec <HAL_GetTick>
 8008952:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008956:	f7f9 ff49 	bl	80027ec <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e1ec      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008968:	4b18      	ldr	r3, [pc, #96]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f0      	bne.n	8008956 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80af 	beq.w	8008ae0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008982:	4b13      	ldr	r3, [pc, #76]	@ (80089d0 <HAL_RCC_OscConfig+0x4e0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a12      	ldr	r2, [pc, #72]	@ (80089d0 <HAL_RCC_OscConfig+0x4e0>)
 8008988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800898c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800898e:	f7f9 ff2d 	bl	80027ec <HAL_GetTick>
 8008992:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008996:	f7f9 ff29 	bl	80027ec <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b64      	cmp	r3, #100	@ 0x64
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e1cc      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089a8:	4b09      	ldr	r3, [pc, #36]	@ (80089d0 <HAL_RCC_OscConfig+0x4e0>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d10b      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4e4>
 80089bc:	4b03      	ldr	r3, [pc, #12]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c0:	4a02      	ldr	r2, [pc, #8]	@ (80089cc <HAL_RCC_OscConfig+0x4dc>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c8:	e05b      	b.n	8008a82 <HAL_RCC_OscConfig+0x592>
 80089ca:	bf00      	nop
 80089cc:	58024400 	.word	0x58024400
 80089d0:	58024800 	.word	0x58024800
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d112      	bne.n	8008a02 <HAL_RCC_OscConfig+0x512>
 80089dc:	4b9d      	ldr	r3, [pc, #628]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e0:	4a9c      	ldr	r2, [pc, #624]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089e8:	4b9a      	ldr	r3, [pc, #616]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 80089ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ec:	4a99      	ldr	r2, [pc, #612]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 80089ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089f4:	4b97      	ldr	r3, [pc, #604]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 80089f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f8:	4a96      	ldr	r2, [pc, #600]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 80089fa:	f023 0304 	bic.w	r3, r3, #4
 80089fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a00:	e03f      	b.n	8008a82 <HAL_RCC_OscConfig+0x592>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d112      	bne.n	8008a30 <HAL_RCC_OscConfig+0x540>
 8008a0a:	4b92      	ldr	r3, [pc, #584]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0e:	4a91      	ldr	r2, [pc, #580]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a10:	f043 0304 	orr.w	r3, r3, #4
 8008a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a16:	4b8f      	ldr	r3, [pc, #572]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a1a:	4a8e      	ldr	r2, [pc, #568]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a22:	4b8c      	ldr	r3, [pc, #560]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a26:	4a8b      	ldr	r2, [pc, #556]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a2e:	e028      	b.n	8008a82 <HAL_RCC_OscConfig+0x592>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b85      	cmp	r3, #133	@ 0x85
 8008a36:	d112      	bne.n	8008a5e <HAL_RCC_OscConfig+0x56e>
 8008a38:	4b86      	ldr	r3, [pc, #536]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3c:	4a85      	ldr	r2, [pc, #532]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a3e:	f043 0304 	orr.w	r3, r3, #4
 8008a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a44:	4b83      	ldr	r3, [pc, #524]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a48:	4a82      	ldr	r2, [pc, #520]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a50:	4b80      	ldr	r3, [pc, #512]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a54:	4a7f      	ldr	r2, [pc, #508]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a5c:	e011      	b.n	8008a82 <HAL_RCC_OscConfig+0x592>
 8008a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a62:	4a7c      	ldr	r2, [pc, #496]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a64:	f023 0301 	bic.w	r3, r3, #1
 8008a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6e:	4a79      	ldr	r2, [pc, #484]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a70:	f023 0304 	bic.w	r3, r3, #4
 8008a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a76:	4b77      	ldr	r3, [pc, #476]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a7a:	4a76      	ldr	r2, [pc, #472]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d015      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a8a:	f7f9 feaf 	bl	80027ec <HAL_GetTick>
 8008a8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a90:	e00a      	b.n	8008aa8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a92:	f7f9 feab 	bl	80027ec <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e14c      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0ee      	beq.n	8008a92 <HAL_RCC_OscConfig+0x5a2>
 8008ab4:	e014      	b.n	8008ae0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab6:	f7f9 fe99 	bl	80027ec <HAL_GetTick>
 8008aba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008abc:	e00a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008abe:	f7f9 fe95 	bl	80027ec <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e136      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1ee      	bne.n	8008abe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 812b 	beq.w	8008d40 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008aea:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008af2:	2b18      	cmp	r3, #24
 8008af4:	f000 80bb 	beq.w	8008c6e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	f040 8095 	bne.w	8008c2c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b02:	4b54      	ldr	r3, [pc, #336]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a53      	ldr	r2, [pc, #332]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b0e:	f7f9 fe6d 	bl	80027ec <HAL_GetTick>
 8008b12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b14:	e008      	b.n	8008b28 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b16:	f7f9 fe69 	bl	80027ec <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e10c      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b28:	4b4a      	ldr	r3, [pc, #296]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f0      	bne.n	8008b16 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b34:	4b47      	ldr	r3, [pc, #284]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b38:	4b47      	ldr	r3, [pc, #284]	@ (8008c58 <HAL_RCC_OscConfig+0x768>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b44:	0112      	lsls	r2, r2, #4
 8008b46:	430a      	orrs	r2, r1
 8008b48:	4942      	ldr	r1, [pc, #264]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b52:	3b01      	subs	r3, #1
 8008b54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	025b      	lsls	r3, r3, #9
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	041b      	lsls	r3, r3, #16
 8008b6c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b76:	3b01      	subs	r3, #1
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b7e:	4935      	ldr	r1, [pc, #212]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008b84:	4b33      	ldr	r3, [pc, #204]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	4a32      	ldr	r2, [pc, #200]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b90:	4b30      	ldr	r3, [pc, #192]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b94:	4b31      	ldr	r3, [pc, #196]	@ (8008c5c <HAL_RCC_OscConfig+0x76c>)
 8008b96:	4013      	ands	r3, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b9c:	00d2      	lsls	r2, r2, #3
 8008b9e:	492d      	ldr	r1, [pc, #180]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	f023 020c 	bic.w	r2, r3, #12
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb0:	4928      	ldr	r1, [pc, #160]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008bb6:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	f023 0202 	bic.w	r2, r3, #2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc2:	4924      	ldr	r1, [pc, #144]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008bc8:	4b22      	ldr	r3, [pc, #136]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bcc:	4a21      	ldr	r2, [pc, #132]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008be0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008be6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008bec:	4b19      	ldr	r3, [pc, #100]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	4a18      	ldr	r2, [pc, #96]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bf2:	f043 0301 	orr.w	r3, r3, #1
 8008bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bf8:	4b16      	ldr	r3, [pc, #88]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a15      	ldr	r2, [pc, #84]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c04:	f7f9 fdf2 	bl	80027ec <HAL_GetTick>
 8008c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c0c:	f7f9 fdee 	bl	80027ec <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e091      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0f0      	beq.n	8008c0c <HAL_RCC_OscConfig+0x71c>
 8008c2a:	e089      	b.n	8008d40 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c2c:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a08      	ldr	r2, [pc, #32]	@ (8008c54 <HAL_RCC_OscConfig+0x764>)
 8008c32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c38:	f7f9 fdd8 	bl	80027ec <HAL_GetTick>
 8008c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c3e:	e00f      	b.n	8008c60 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c40:	f7f9 fdd4 	bl	80027ec <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d908      	bls.n	8008c60 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e077      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
 8008c58:	fffffc0c 	.word	0xfffffc0c
 8008c5c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c60:	4b3a      	ldr	r3, [pc, #232]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e9      	bne.n	8008c40 <HAL_RCC_OscConfig+0x750>
 8008c6c:	e068      	b.n	8008d40 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c6e:	4b37      	ldr	r3, [pc, #220]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c72:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c74:	4b35      	ldr	r3, [pc, #212]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c78:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d031      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f003 0203 	and.w	r2, r3, #3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d12a      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	091b      	lsrs	r3, r3, #4
 8008c94:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d122      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008caa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d11a      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	0a5b      	lsrs	r3, r3, #9
 8008cb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cbc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d111      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	0c1b      	lsrs	r3, r3, #16
 8008cc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d108      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0e1b      	lsrs	r3, r3, #24
 8008cd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d001      	beq.n	8008cea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e02b      	b.n	8008d42 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008cea:	4b18      	ldr	r3, [pc, #96]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cee:	08db      	lsrs	r3, r3, #3
 8008cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cf4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d01f      	beq.n	8008d40 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008d00:	4b12      	ldr	r3, [pc, #72]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d04:	4a11      	ldr	r2, [pc, #68]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008d06:	f023 0301 	bic.w	r3, r3, #1
 8008d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d0c:	f7f9 fd6e 	bl	80027ec <HAL_GetTick>
 8008d10:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008d12:	bf00      	nop
 8008d14:	f7f9 fd6a 	bl	80027ec <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d0f9      	beq.n	8008d14 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d20:	4b0a      	ldr	r3, [pc, #40]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d24:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <HAL_RCC_OscConfig+0x860>)
 8008d26:	4013      	ands	r3, r2
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d2c:	00d2      	lsls	r2, r2, #3
 8008d2e:	4907      	ldr	r1, [pc, #28]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008d34:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	4a04      	ldr	r2, [pc, #16]	@ (8008d4c <HAL_RCC_OscConfig+0x85c>)
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3730      	adds	r7, #48	@ 0x30
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	ffff0007 	.word	0xffff0007

08008d54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e19c      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d68:	4b8a      	ldr	r3, [pc, #552]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d910      	bls.n	8008d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d76:	4b87      	ldr	r3, [pc, #540]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f023 020f 	bic.w	r2, r3, #15
 8008d7e:	4985      	ldr	r1, [pc, #532]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d86:	4b83      	ldr	r3, [pc, #524]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 030f 	and.w	r3, r3, #15
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d001      	beq.n	8008d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e184      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d010      	beq.n	8008dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	4b7b      	ldr	r3, [pc, #492]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d908      	bls.n	8008dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008db4:	4b78      	ldr	r3, [pc, #480]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	4975      	ldr	r1, [pc, #468]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0308 	and.w	r3, r3, #8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695a      	ldr	r2, [r3, #20]
 8008dd6:	4b70      	ldr	r3, [pc, #448]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d908      	bls.n	8008df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008de2:	4b6d      	ldr	r3, [pc, #436]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	496a      	ldr	r1, [pc, #424]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d010      	beq.n	8008e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	4b64      	ldr	r3, [pc, #400]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d908      	bls.n	8008e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e10:	4b61      	ldr	r3, [pc, #388]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	495e      	ldr	r1, [pc, #376]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d010      	beq.n	8008e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69da      	ldr	r2, [r3, #28]
 8008e32:	4b59      	ldr	r3, [pc, #356]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d908      	bls.n	8008e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e3e:	4b56      	ldr	r3, [pc, #344]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	4953      	ldr	r1, [pc, #332]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	4b4d      	ldr	r3, [pc, #308]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	f003 030f 	and.w	r3, r3, #15
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d908      	bls.n	8008e7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f023 020f 	bic.w	r2, r3, #15
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	4947      	ldr	r1, [pc, #284]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d055      	beq.n	8008f36 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008e8a:	4b43      	ldr	r3, [pc, #268]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	4940      	ldr	r1, [pc, #256]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d107      	bne.n	8008eb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d121      	bne.n	8008ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0f6      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d107      	bne.n	8008ecc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ebc:	4b36      	ldr	r3, [pc, #216]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d115      	bne.n	8008ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0ea      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ed4:	4b30      	ldr	r3, [pc, #192]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e0de      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0d6      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ef4:	4b28      	ldr	r3, [pc, #160]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f023 0207 	bic.w	r2, r3, #7
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4925      	ldr	r1, [pc, #148]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f06:	f7f9 fc71 	bl	80027ec <HAL_GetTick>
 8008f0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f0c:	e00a      	b.n	8008f24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f0e:	f7f9 fc6d 	bl	80027ec <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d901      	bls.n	8008f24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e0be      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f24:	4b1c      	ldr	r3, [pc, #112]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d1eb      	bne.n	8008f0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d010      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	4b14      	ldr	r3, [pc, #80]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d208      	bcs.n	8008f64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f52:	4b11      	ldr	r3, [pc, #68]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	f023 020f 	bic.w	r2, r3, #15
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	490e      	ldr	r1, [pc, #56]	@ (8008f98 <HAL_RCC_ClockConfig+0x244>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f64:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d214      	bcs.n	8008f9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f72:	4b08      	ldr	r3, [pc, #32]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f023 020f 	bic.w	r2, r3, #15
 8008f7a:	4906      	ldr	r1, [pc, #24]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f82:	4b04      	ldr	r3, [pc, #16]	@ (8008f94 <HAL_RCC_ClockConfig+0x240>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d005      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e086      	b.n	80090a2 <HAL_RCC_ClockConfig+0x34e>
 8008f94:	52002000 	.word	0x52002000
 8008f98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d010      	beq.n	8008fca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	4b3f      	ldr	r3, [pc, #252]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d208      	bcs.n	8008fca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	4939      	ldr	r1, [pc, #228]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d010      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695a      	ldr	r2, [r3, #20]
 8008fda:	4b34      	ldr	r3, [pc, #208]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d208      	bcs.n	8008ff8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fe6:	4b31      	ldr	r3, [pc, #196]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	492e      	ldr	r1, [pc, #184]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	4b28      	ldr	r3, [pc, #160]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009010:	429a      	cmp	r2, r3
 8009012:	d208      	bcs.n	8009026 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009014:	4b25      	ldr	r3, [pc, #148]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	4922      	ldr	r1, [pc, #136]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8009022:	4313      	orrs	r3, r2
 8009024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800903e:	429a      	cmp	r2, r3
 8009040:	d208      	bcs.n	8009054 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009042:	4b1a      	ldr	r3, [pc, #104]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	4917      	ldr	r1, [pc, #92]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8009050:	4313      	orrs	r3, r2
 8009052:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009054:	f000 f834 	bl	80090c0 <HAL_RCC_GetSysClockFreq>
 8009058:	4602      	mov	r2, r0
 800905a:	4b14      	ldr	r3, [pc, #80]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	0a1b      	lsrs	r3, r3, #8
 8009060:	f003 030f 	and.w	r3, r3, #15
 8009064:	4912      	ldr	r1, [pc, #72]	@ (80090b0 <HAL_RCC_ClockConfig+0x35c>)
 8009066:	5ccb      	ldrb	r3, [r1, r3]
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	fa22 f303 	lsr.w	r3, r2, r3
 8009070:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009072:	4b0e      	ldr	r3, [pc, #56]	@ (80090ac <HAL_RCC_ClockConfig+0x358>)
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	4a0d      	ldr	r2, [pc, #52]	@ (80090b0 <HAL_RCC_ClockConfig+0x35c>)
 800907c:	5cd3      	ldrb	r3, [r2, r3]
 800907e:	f003 031f 	and.w	r3, r3, #31
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
 8009088:	4a0a      	ldr	r2, [pc, #40]	@ (80090b4 <HAL_RCC_ClockConfig+0x360>)
 800908a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800908c:	4a0a      	ldr	r2, [pc, #40]	@ (80090b8 <HAL_RCC_ClockConfig+0x364>)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <HAL_RCC_ClockConfig+0x368>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f7f9 f882 	bl	80021a0 <HAL_InitTick>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	58024400 	.word	0x58024400
 80090b0:	080152e8 	.word	0x080152e8
 80090b4:	24000004 	.word	0x24000004
 80090b8:	24000000 	.word	0x24000000
 80090bc:	24000008 	.word	0x24000008

080090c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b089      	sub	sp, #36	@ 0x24
 80090c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090c6:	4bb3      	ldr	r3, [pc, #716]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090ce:	2b18      	cmp	r3, #24
 80090d0:	f200 8155 	bhi.w	800937e <HAL_RCC_GetSysClockFreq+0x2be>
 80090d4:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	08009141 	.word	0x08009141
 80090e0:	0800937f 	.word	0x0800937f
 80090e4:	0800937f 	.word	0x0800937f
 80090e8:	0800937f 	.word	0x0800937f
 80090ec:	0800937f 	.word	0x0800937f
 80090f0:	0800937f 	.word	0x0800937f
 80090f4:	0800937f 	.word	0x0800937f
 80090f8:	0800937f 	.word	0x0800937f
 80090fc:	08009167 	.word	0x08009167
 8009100:	0800937f 	.word	0x0800937f
 8009104:	0800937f 	.word	0x0800937f
 8009108:	0800937f 	.word	0x0800937f
 800910c:	0800937f 	.word	0x0800937f
 8009110:	0800937f 	.word	0x0800937f
 8009114:	0800937f 	.word	0x0800937f
 8009118:	0800937f 	.word	0x0800937f
 800911c:	0800916d 	.word	0x0800916d
 8009120:	0800937f 	.word	0x0800937f
 8009124:	0800937f 	.word	0x0800937f
 8009128:	0800937f 	.word	0x0800937f
 800912c:	0800937f 	.word	0x0800937f
 8009130:	0800937f 	.word	0x0800937f
 8009134:	0800937f 	.word	0x0800937f
 8009138:	0800937f 	.word	0x0800937f
 800913c:	08009173 	.word	0x08009173
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009140:	4b94      	ldr	r3, [pc, #592]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800914c:	4b91      	ldr	r3, [pc, #580]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	08db      	lsrs	r3, r3, #3
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	4a90      	ldr	r2, [pc, #576]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
 800915c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800915e:	e111      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009160:	4b8d      	ldr	r3, [pc, #564]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009162:	61bb      	str	r3, [r7, #24]
      break;
 8009164:	e10e      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009166:	4b8d      	ldr	r3, [pc, #564]	@ (800939c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009168:	61bb      	str	r3, [r7, #24]
      break;
 800916a:	e10b      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800916c:	4b8c      	ldr	r3, [pc, #560]	@ (80093a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800916e:	61bb      	str	r3, [r7, #24]
      break;
 8009170:	e108      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009172:	4b88      	ldr	r3, [pc, #544]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800917c:	4b85      	ldr	r3, [pc, #532]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800917e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009180:	091b      	lsrs	r3, r3, #4
 8009182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009186:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009188:	4b82      	ldr	r3, [pc, #520]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009192:	4b80      	ldr	r3, [pc, #512]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009196:	08db      	lsrs	r3, r3, #3
 8009198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 80e1 	beq.w	8009378 <HAL_RCC_GetSysClockFreq+0x2b8>
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	f000 8083 	beq.w	80092c4 <HAL_RCC_GetSysClockFreq+0x204>
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	f200 80a1 	bhi.w	8009308 <HAL_RCC_GetSysClockFreq+0x248>
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_RCC_GetSysClockFreq+0x114>
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d056      	beq.n	8009280 <HAL_RCC_GetSysClockFreq+0x1c0>
 80091d2:	e099      	b.n	8009308 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d4:	4b6f      	ldr	r3, [pc, #444]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d02d      	beq.n	800923c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091e0:	4b6c      	ldr	r3, [pc, #432]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	4a6b      	ldr	r2, [pc, #428]	@ (8009398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920a:	4b62      	ldr	r3, [pc, #392]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800920c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921a:	ed97 6a02 	vldr	s12, [r7, #8]
 800921e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80093a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800923a:	e087      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80093a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800924a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924e:	4b51      	ldr	r3, [pc, #324]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009262:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80093a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800927e:	e065      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80093ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800928e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009292:	4b40      	ldr	r3, [pc, #256]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80092a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80093a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092c2:	e043      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80093b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80093a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009306:	e021      	b.n	800934c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80093ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931a:	4b1e      	ldr	r3, [pc, #120]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932a:	ed97 6a02 	vldr	s12, [r7, #8]
 800932e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80093a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800934a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800934c:	4b11      	ldr	r3, [pc, #68]	@ (8009394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800934e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009350:	0a5b      	lsrs	r3, r3, #9
 8009352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009356:	3301      	adds	r3, #1
 8009358:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009364:	edd7 6a07 	vldr	s13, [r7, #28]
 8009368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800936c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009370:	ee17 3a90 	vmov	r3, s15
 8009374:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009376:	e005      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	61bb      	str	r3, [r7, #24]
      break;
 800937c:	e002      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800937e:	4b07      	ldr	r3, [pc, #28]	@ (800939c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009380:	61bb      	str	r3, [r7, #24]
      break;
 8009382:	bf00      	nop
  }

  return sysclockfreq;
 8009384:	69bb      	ldr	r3, [r7, #24]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3724      	adds	r7, #36	@ 0x24
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400
 8009398:	03d09000 	.word	0x03d09000
 800939c:	003d0900 	.word	0x003d0900
 80093a0:	016e3600 	.word	0x016e3600
 80093a4:	46000000 	.word	0x46000000
 80093a8:	4c742400 	.word	0x4c742400
 80093ac:	4a742400 	.word	0x4a742400
 80093b0:	4bb71b00 	.word	0x4bb71b00

080093b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80093ba:	f7ff fe81 	bl	80090c0 <HAL_RCC_GetSysClockFreq>
 80093be:	4602      	mov	r2, r0
 80093c0:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <HAL_RCC_GetHCLKFreq+0x50>)
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	0a1b      	lsrs	r3, r3, #8
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	490f      	ldr	r1, [pc, #60]	@ (8009408 <HAL_RCC_GetHCLKFreq+0x54>)
 80093cc:	5ccb      	ldrb	r3, [r1, r3]
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	fa22 f303 	lsr.w	r3, r2, r3
 80093d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80093d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009404 <HAL_RCC_GetHCLKFreq+0x50>)
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	4a09      	ldr	r2, [pc, #36]	@ (8009408 <HAL_RCC_GetHCLKFreq+0x54>)
 80093e2:	5cd3      	ldrb	r3, [r2, r3]
 80093e4:	f003 031f 	and.w	r3, r3, #31
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	fa22 f303 	lsr.w	r3, r2, r3
 80093ee:	4a07      	ldr	r2, [pc, #28]	@ (800940c <HAL_RCC_GetHCLKFreq+0x58>)
 80093f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093f2:	4a07      	ldr	r2, [pc, #28]	@ (8009410 <HAL_RCC_GetHCLKFreq+0x5c>)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80093f8:	4b04      	ldr	r3, [pc, #16]	@ (800940c <HAL_RCC_GetHCLKFreq+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	58024400 	.word	0x58024400
 8009408:	080152e8 	.word	0x080152e8
 800940c:	24000004 	.word	0x24000004
 8009410:	24000000 	.word	0x24000000

08009414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8009418:	f7ff ffcc 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 800941c:	4602      	mov	r2, r0
 800941e:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	091b      	lsrs	r3, r3, #4
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	4904      	ldr	r1, [pc, #16]	@ (800943c <HAL_RCC_GetPCLK1Freq+0x28>)
 800942a:	5ccb      	ldrb	r3, [r1, r3]
 800942c:	f003 031f 	and.w	r3, r3, #31
 8009430:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009434:	4618      	mov	r0, r3
 8009436:	bd80      	pop	{r7, pc}
 8009438:	58024400 	.word	0x58024400
 800943c:	080152e8 	.word	0x080152e8

08009440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8009444:	f7ff ffb6 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 8009448:	4602      	mov	r2, r0
 800944a:	4b06      	ldr	r3, [pc, #24]	@ (8009464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	0a1b      	lsrs	r3, r3, #8
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	4904      	ldr	r1, [pc, #16]	@ (8009468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009456:	5ccb      	ldrb	r3, [r1, r3]
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009460:	4618      	mov	r0, r3
 8009462:	bd80      	pop	{r7, pc}
 8009464:	58024400 	.word	0x58024400
 8009468:	080152e8 	.word	0x080152e8

0800946c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	223f      	movs	r2, #63	@ 0x3f
 800947a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800947c:	4b1a      	ldr	r3, [pc, #104]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	f003 0207 	and.w	r2, r3, #7
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8009488:	4b17      	ldr	r3, [pc, #92]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8009494:	4b14      	ldr	r3, [pc, #80]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	f003 020f 	and.w	r2, r3, #15
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80094a0:	4b11      	ldr	r3, [pc, #68]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80094ac:	4b0e      	ldr	r3, [pc, #56]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80094b8:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80094c4:	4b08      	ldr	r3, [pc, #32]	@ (80094e8 <HAL_RCC_GetClockConfig+0x7c>)
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80094d0:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <HAL_RCC_GetClockConfig+0x80>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 020f 	and.w	r2, r3, #15
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	601a      	str	r2, [r3, #0]
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	58024400 	.word	0x58024400
 80094ec:	52002000 	.word	0x52002000

080094f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094f4:	b0c8      	sub	sp, #288	@ 0x120
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80094fc:	2300      	movs	r3, #0
 80094fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009502:	2300      	movs	r3, #0
 8009504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009514:	2500      	movs	r5, #0
 8009516:	ea54 0305 	orrs.w	r3, r4, r5
 800951a:	d049      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800951c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009522:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009526:	d02f      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009528:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800952c:	d828      	bhi.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800952e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009532:	d01a      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009538:	d822      	bhi.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800953e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009542:	d007      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009544:	e01c      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009546:	4ba7      	ldr	r3, [pc, #668]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	4aa6      	ldr	r2, [pc, #664]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800954c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009552:	e01a      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009558:	3308      	adds	r3, #8
 800955a:	2102      	movs	r1, #2
 800955c:	4618      	mov	r0, r3
 800955e:	f001 fc43 	bl	800ade8 <RCCEx_PLL2_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009568:	e00f      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800956a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956e:	3328      	adds	r3, #40	@ 0x28
 8009570:	2102      	movs	r1, #2
 8009572:	4618      	mov	r0, r3
 8009574:	f001 fcea 	bl	800af4c <RCCEx_PLL3_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800957e:	e004      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009586:	e000      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800958a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009592:	4b94      	ldr	r3, [pc, #592]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009596:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800959a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095a0:	4a90      	ldr	r2, [pc, #576]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095a2:	430b      	orrs	r3, r1
 80095a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80095a6:	e003      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80095bc:	f04f 0900 	mov.w	r9, #0
 80095c0:	ea58 0309 	orrs.w	r3, r8, r9
 80095c4:	d047      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80095c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d82a      	bhi.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80095d0:	a201      	add	r2, pc, #4	@ (adr r2, 80095d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80095d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d6:	bf00      	nop
 80095d8:	080095ed 	.word	0x080095ed
 80095dc:	080095fb 	.word	0x080095fb
 80095e0:	08009611 	.word	0x08009611
 80095e4:	0800962f 	.word	0x0800962f
 80095e8:	0800962f 	.word	0x0800962f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ec:	4b7d      	ldr	r3, [pc, #500]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f0:	4a7c      	ldr	r2, [pc, #496]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095f8:	e01a      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fe:	3308      	adds	r3, #8
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 fbf0 	bl	800ade8 <RCCEx_PLL2_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800960e:	e00f      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009614:	3328      	adds	r3, #40	@ 0x28
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f001 fc97 	bl	800af4c <RCCEx_PLL3_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800962e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009630:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009638:	4b6a      	ldr	r3, [pc, #424]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	f023 0107 	bic.w	r1, r3, #7
 8009640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009646:	4a67      	ldr	r2, [pc, #412]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009648:	430b      	orrs	r3, r1
 800964a:	6513      	str	r3, [r2, #80]	@ 0x50
 800964c:	e003      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009662:	f04f 0b00 	mov.w	fp, #0
 8009666:	ea5a 030b 	orrs.w	r3, sl, fp
 800966a:	d054      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800966c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009672:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009676:	d036      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009678:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800967c:	d82f      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800967e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009682:	d032      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009688:	d829      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800968a:	2bc0      	cmp	r3, #192	@ 0xc0
 800968c:	d02f      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800968e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009690:	d825      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009692:	2b80      	cmp	r3, #128	@ 0x80
 8009694:	d018      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009696:	2b80      	cmp	r3, #128	@ 0x80
 8009698:	d821      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800969e:	2b40      	cmp	r3, #64	@ 0x40
 80096a0:	d007      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80096a2:	e01c      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a4:	4b4f      	ldr	r3, [pc, #316]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	4a4e      	ldr	r2, [pc, #312]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80096b0:	e01e      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b6:	3308      	adds	r3, #8
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 fb94 	bl	800ade8 <RCCEx_PLL2_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80096c6:	e013      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096cc:	3328      	adds	r3, #40	@ 0x28
 80096ce:	2100      	movs	r1, #0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 fc3b 	bl	800af4c <RCCEx_PLL3_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80096dc:	e008      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80096e4:	e004      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80096e6:	bf00      	nop
 80096e8:	e002      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80096ea:	bf00      	nop
 80096ec:	e000      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80096ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80096f8:	4b3a      	ldr	r3, [pc, #232]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009706:	4a37      	ldr	r2, [pc, #220]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009708:	430b      	orrs	r3, r1
 800970a:	6513      	str	r3, [r2, #80]	@ 0x50
 800970c:	e003      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009712:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009722:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009726:	2300      	movs	r3, #0
 8009728:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800972c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009730:	460b      	mov	r3, r1
 8009732:	4313      	orrs	r3, r2
 8009734:	d05c      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8009736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800973c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009740:	d03b      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009742:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009746:	d834      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800974c:	d037      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800974e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009752:	d82e      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009754:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009758:	d033      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800975a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800975e:	d828      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009764:	d01a      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8009766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800976a:	d822      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009774:	d007      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009776:	e01c      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009778:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977c:	4a19      	ldr	r2, [pc, #100]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800977e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009784:	e01e      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800978a:	3308      	adds	r3, #8
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fb2a 	bl	800ade8 <RCCEx_PLL2_Config>
 8009794:	4603      	mov	r3, r0
 8009796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800979a:	e013      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800979c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a0:	3328      	adds	r3, #40	@ 0x28
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 fbd1 	bl	800af4c <RCCEx_PLL3_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80097b0:	e008      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097b8:	e004      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80097ba:	bf00      	nop
 80097bc:	e002      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80097be:	bf00      	nop
 80097c0:	e000      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80097c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10d      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097d0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80097d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097da:	4a02      	ldr	r2, [pc, #8]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097dc:	430b      	orrs	r3, r1
 80097de:	6513      	str	r3, [r2, #80]	@ 0x50
 80097e0:	e006      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80097e2:	bf00      	nop
 80097e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80097f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80097fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009800:	2300      	movs	r3, #0
 8009802:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009806:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800980a:	460b      	mov	r3, r1
 800980c:	4313      	orrs	r3, r2
 800980e:	d03a      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009816:	2b30      	cmp	r3, #48	@ 0x30
 8009818:	d01f      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800981a:	2b30      	cmp	r3, #48	@ 0x30
 800981c:	d819      	bhi.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800981e:	2b20      	cmp	r3, #32
 8009820:	d00c      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009822:	2b20      	cmp	r3, #32
 8009824:	d815      	bhi.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d019      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800982a:	2b10      	cmp	r3, #16
 800982c:	d111      	bne.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982e:	4bae      	ldr	r3, [pc, #696]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	4aad      	ldr	r2, [pc, #692]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800983a:	e011      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800983c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009840:	3308      	adds	r3, #8
 8009842:	2102      	movs	r1, #2
 8009844:	4618      	mov	r0, r3
 8009846:	f001 facf 	bl	800ade8 <RCCEx_PLL2_Config>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009850:	e006      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009858:	e002      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800985a:	bf00      	nop
 800985c:	e000      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800985e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009868:	4b9f      	ldr	r3, [pc, #636]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800986a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009876:	4a9c      	ldr	r2, [pc, #624]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009878:	430b      	orrs	r3, r1
 800987a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800987c:	e003      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009882:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009892:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009896:	2300      	movs	r3, #0
 8009898:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800989c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d051      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80098a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b0:	d035      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b6:	d82e      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80098b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098bc:	d031      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80098be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098c2:	d828      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80098c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098c8:	d01a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ce:	d822      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098d8:	d007      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80098da:	e01c      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4b82      	ldr	r3, [pc, #520]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	4a81      	ldr	r2, [pc, #516]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098e8:	e01c      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ee:	3308      	adds	r3, #8
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f001 fa78 	bl	800ade8 <RCCEx_PLL2_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098fe:	e011      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009904:	3328      	adds	r3, #40	@ 0x28
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f001 fb1f 	bl	800af4c <RCCEx_PLL3_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009914:	e006      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009924:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800992c:	4b6e      	ldr	r3, [pc, #440]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800992e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009930:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800993a:	4a6b      	ldr	r2, [pc, #428]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800993c:	430b      	orrs	r3, r1
 800993e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009940:	e003      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009946:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800994a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800995a:	2300      	movs	r3, #0
 800995c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009960:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009964:	460b      	mov	r3, r1
 8009966:	4313      	orrs	r3, r2
 8009968:	d053      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800996a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800996e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009974:	d033      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009976:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800997a:	d82c      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800997c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009980:	d02f      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009986:	d826      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800998c:	d02b      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800998e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009992:	d820      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009998:	d012      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800999a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800999e:	d81a      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d022      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80099a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a8:	d115      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ae:	3308      	adds	r3, #8
 80099b0:	2101      	movs	r1, #1
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 fa18 	bl	800ade8 <RCCEx_PLL2_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099be:	e015      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c4:	3328      	adds	r3, #40	@ 0x28
 80099c6:	2101      	movs	r1, #1
 80099c8:	4618      	mov	r0, r3
 80099ca:	f001 fabf 	bl	800af4c <RCCEx_PLL3_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099d4:	e00a      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80099dc:	e006      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80099de:	bf00      	nop
 80099e0:	e004      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80099e2:	bf00      	nop
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80099ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80099f4:	4b3c      	ldr	r3, [pc, #240]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80099fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a02:	4a39      	ldr	r2, [pc, #228]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a08:	e003      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a22:	2300      	movs	r3, #0
 8009a24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	d060      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a3e:	d039      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8009a40:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a44:	d832      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a4a:	d035      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a50:	d82c      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a56:	d031      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5c:	d826      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a62:	d02d      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009a64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a68:	d820      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a6e:	d012      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a74:	d81a      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d024      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a7e:	d115      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a84:	3308      	adds	r3, #8
 8009a86:	2101      	movs	r1, #1
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f001 f9ad 	bl	800ade8 <RCCEx_PLL2_Config>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a94:	e017      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9a:	3328      	adds	r3, #40	@ 0x28
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 fa54 	bl	800af4c <RCCEx_PLL3_Config>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009aaa:	e00c      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ab2:	e008      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ab4:	bf00      	nop
 8009ab6:	e006      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ab8:	bf00      	nop
 8009aba:	e004      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009abc:	bf00      	nop
 8009abe:	e002      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ac0:	bf00      	nop
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10e      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ace:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ade:	4a02      	ldr	r2, [pc, #8]	@ (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ae0:	430b      	orrs	r3, r1
 8009ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ae4:	e006      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009ae6:	bf00      	nop
 8009ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009af0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b04:	2300      	movs	r3, #0
 8009b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4313      	orrs	r3, r2
 8009b12:	d037      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b1e:	d00e      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b24:	d816      	bhi.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d018      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b2e:	d111      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b30:	4bc4      	ldr	r3, [pc, #784]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	4ac3      	ldr	r2, [pc, #780]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b3c:	e00f      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b42:	3308      	adds	r3, #8
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 f94e 	bl	800ade8 <RCCEx_PLL2_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b52:	e004      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b5a:	e000      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b66:	4bb7      	ldr	r3, [pc, #732]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b74:	4ab3      	ldr	r2, [pc, #716]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b76:	430b      	orrs	r3, r1
 8009b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b7a:	e003      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009b9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	d039      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d81c      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009bae:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bf1 	.word	0x08009bf1
 8009bb8:	08009bc5 	.word	0x08009bc5
 8009bbc:	08009bd3 	.word	0x08009bd3
 8009bc0:	08009bf1 	.word	0x08009bf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc4:	4b9f      	ldr	r3, [pc, #636]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc8:	4a9e      	ldr	r2, [pc, #632]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bd0:	e00f      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	2102      	movs	r1, #2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 f904 	bl	800ade8 <RCCEx_PLL2_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009be6:	e004      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009bee:	e000      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bfa:	4b92      	ldr	r3, [pc, #584]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bfe:	f023 0103 	bic.w	r1, r3, #3
 8009c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c08:	4a8e      	ldr	r2, [pc, #568]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c0e:	e003      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009c24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009c32:	460b      	mov	r3, r1
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f000 8099 	beq.w	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c3a:	4b83      	ldr	r3, [pc, #524]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a82      	ldr	r2, [pc, #520]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c46:	f7f8 fdd1 	bl	80027ec <HAL_GetTick>
 8009c4a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c4e:	e00b      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c50:	f7f8 fdcc 	bl	80027ec <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b64      	cmp	r3, #100	@ 0x64
 8009c5e:	d903      	bls.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c66:	e005      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c68:	4b77      	ldr	r3, [pc, #476]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0ed      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d173      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c7c:	4b71      	ldr	r3, [pc, #452]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c88:	4053      	eors	r3, r2
 8009c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d015      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c92:	4b6c      	ldr	r3, [pc, #432]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c9e:	4b69      	ldr	r3, [pc, #420]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca2:	4a68      	ldr	r2, [pc, #416]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ca8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009caa:	4b66      	ldr	r3, [pc, #408]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cae:	4a65      	ldr	r2, [pc, #404]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cb4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009cb6:	4a63      	ldr	r2, [pc, #396]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cca:	d118      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ccc:	f7f8 fd8e 	bl	80027ec <HAL_GetTick>
 8009cd0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cd4:	e00d      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cd6:	f7f8 fd89 	bl	80027ec <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009ce0:	1ad2      	subs	r2, r2, r3
 8009ce2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d903      	bls.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009cf0:	e005      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cf2:	4b54      	ldr	r3, [pc, #336]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d0eb      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009cfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d129      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d16:	d10e      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009d18:	4b4a      	ldr	r3, [pc, #296]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d28:	091a      	lsrs	r2, r3, #4
 8009d2a:	4b48      	ldr	r3, [pc, #288]	@ (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	4a45      	ldr	r2, [pc, #276]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d30:	430b      	orrs	r3, r1
 8009d32:	6113      	str	r3, [r2, #16]
 8009d34:	e005      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009d36:	4b43      	ldr	r3, [pc, #268]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	4a42      	ldr	r2, [pc, #264]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d40:	6113      	str	r3, [r2, #16]
 8009d42:	4b40      	ldr	r3, [pc, #256]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d52:	4a3c      	ldr	r2, [pc, #240]	@ (8009e44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d58:	e008      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009d62:	e003      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f002 0301 	and.w	r3, r2, #1
 8009d78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	f000 8090 	beq.w	8009eae <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d96:	2b28      	cmp	r3, #40	@ 0x28
 8009d98:	d870      	bhi.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009da0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009e85 	.word	0x08009e85
 8009da4:	08009e7d 	.word	0x08009e7d
 8009da8:	08009e7d 	.word	0x08009e7d
 8009dac:	08009e7d 	.word	0x08009e7d
 8009db0:	08009e7d 	.word	0x08009e7d
 8009db4:	08009e7d 	.word	0x08009e7d
 8009db8:	08009e7d 	.word	0x08009e7d
 8009dbc:	08009e7d 	.word	0x08009e7d
 8009dc0:	08009e51 	.word	0x08009e51
 8009dc4:	08009e7d 	.word	0x08009e7d
 8009dc8:	08009e7d 	.word	0x08009e7d
 8009dcc:	08009e7d 	.word	0x08009e7d
 8009dd0:	08009e7d 	.word	0x08009e7d
 8009dd4:	08009e7d 	.word	0x08009e7d
 8009dd8:	08009e7d 	.word	0x08009e7d
 8009ddc:	08009e7d 	.word	0x08009e7d
 8009de0:	08009e67 	.word	0x08009e67
 8009de4:	08009e7d 	.word	0x08009e7d
 8009de8:	08009e7d 	.word	0x08009e7d
 8009dec:	08009e7d 	.word	0x08009e7d
 8009df0:	08009e7d 	.word	0x08009e7d
 8009df4:	08009e7d 	.word	0x08009e7d
 8009df8:	08009e7d 	.word	0x08009e7d
 8009dfc:	08009e7d 	.word	0x08009e7d
 8009e00:	08009e85 	.word	0x08009e85
 8009e04:	08009e7d 	.word	0x08009e7d
 8009e08:	08009e7d 	.word	0x08009e7d
 8009e0c:	08009e7d 	.word	0x08009e7d
 8009e10:	08009e7d 	.word	0x08009e7d
 8009e14:	08009e7d 	.word	0x08009e7d
 8009e18:	08009e7d 	.word	0x08009e7d
 8009e1c:	08009e7d 	.word	0x08009e7d
 8009e20:	08009e85 	.word	0x08009e85
 8009e24:	08009e7d 	.word	0x08009e7d
 8009e28:	08009e7d 	.word	0x08009e7d
 8009e2c:	08009e7d 	.word	0x08009e7d
 8009e30:	08009e7d 	.word	0x08009e7d
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009e7d 	.word	0x08009e7d
 8009e3c:	08009e7d 	.word	0x08009e7d
 8009e40:	08009e85 	.word	0x08009e85
 8009e44:	58024400 	.word	0x58024400
 8009e48:	58024800 	.word	0x58024800
 8009e4c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e54:	3308      	adds	r3, #8
 8009e56:	2101      	movs	r1, #1
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 ffc5 	bl	800ade8 <RCCEx_PLL2_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e64:	e00f      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e6a:	3328      	adds	r3, #40	@ 0x28
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 f86c 	bl	800af4c <RCCEx_PLL3_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e004      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e82:	e000      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e8e:	4bc0      	ldr	r3, [pc, #768]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e9e:	4abc      	ldr	r2, [pc, #752]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009eaa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f002 0302 	and.w	r3, r2, #2
 8009eba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ec4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d043      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	d824      	bhi.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009eda:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009f2d 	.word	0x08009f2d
 8009ee4:	08009ef9 	.word	0x08009ef9
 8009ee8:	08009f0f 	.word	0x08009f0f
 8009eec:	08009f2d 	.word	0x08009f2d
 8009ef0:	08009f2d 	.word	0x08009f2d
 8009ef4:	08009f2d 	.word	0x08009f2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009efc:	3308      	adds	r3, #8
 8009efe:	2101      	movs	r1, #1
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 ff71 	bl	800ade8 <RCCEx_PLL2_Config>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f0c:	e00f      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f12:	3328      	adds	r3, #40	@ 0x28
 8009f14:	2101      	movs	r1, #1
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 f818 	bl	800af4c <RCCEx_PLL3_Config>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f22:	e004      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009f2a:	e000      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10b      	bne.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f36:	4b96      	ldr	r3, [pc, #600]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3a:	f023 0107 	bic.w	r1, r3, #7
 8009f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f46:	4a92      	ldr	r2, [pc, #584]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f48:	430b      	orrs	r3, r1
 8009f4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f4c:	e003      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f002 0304 	and.w	r3, r2, #4
 8009f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f66:	2300      	movs	r3, #0
 8009f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f6c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4313      	orrs	r3, r2
 8009f74:	d043      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f7e:	2b05      	cmp	r3, #5
 8009f80:	d824      	bhi.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009f82:	a201      	add	r2, pc, #4	@ (adr r2, 8009f88 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fd5 	.word	0x08009fd5
 8009f8c:	08009fa1 	.word	0x08009fa1
 8009f90:	08009fb7 	.word	0x08009fb7
 8009f94:	08009fd5 	.word	0x08009fd5
 8009f98:	08009fd5 	.word	0x08009fd5
 8009f9c:	08009fd5 	.word	0x08009fd5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 ff1d 	bl	800ade8 <RCCEx_PLL2_Config>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fb4:	e00f      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fba:	3328      	adds	r3, #40	@ 0x28
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 ffc4 	bl	800af4c <RCCEx_PLL3_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fca:	e004      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009fd2:	e000      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fde:	4b6c      	ldr	r3, [pc, #432]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fe2:	f023 0107 	bic.w	r1, r3, #7
 8009fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fee:	4a68      	ldr	r2, [pc, #416]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ff4:	e003      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ffa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f002 0320 	and.w	r3, r2, #32
 800a00a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a00e:	2300      	movs	r3, #0
 800a010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a018:	460b      	mov	r3, r1
 800a01a:	4313      	orrs	r3, r2
 800a01c:	d055      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a02a:	d033      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a02c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a030:	d82c      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a036:	d02f      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03c:	d826      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a03e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a042:	d02b      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a048:	d820      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a04a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a04e:	d012      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a054:	d81a      	bhi.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d022      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a05a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a05e:	d115      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a064:	3308      	adds	r3, #8
 800a066:	2100      	movs	r1, #0
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 febd 	bl	800ade8 <RCCEx_PLL2_Config>
 800a06e:	4603      	mov	r3, r0
 800a070:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a074:	e015      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a07a:	3328      	adds	r3, #40	@ 0x28
 800a07c:	2102      	movs	r1, #2
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 ff64 	bl	800af4c <RCCEx_PLL3_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a08a:	e00a      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a092:	e006      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a094:	bf00      	nop
 800a096:	e004      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a098:	bf00      	nop
 800a09a:	e002      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a09c:	bf00      	nop
 800a09e:	e000      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a0a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10b      	bne.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0aa:	4b39      	ldr	r3, [pc, #228]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0ba:	4a35      	ldr	r2, [pc, #212]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0c0:	e003      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a0d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	d058      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a0f6:	d033      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a0f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a0fc:	d82c      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a0fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a102:	d02f      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a108:	d826      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a10a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a10e:	d02b      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a110:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a114:	d820      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a11a:	d012      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800a11c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a120:	d81a      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d022      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800a126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a12a:	d115      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a12c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a130:	3308      	adds	r3, #8
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fe57 	bl	800ade8 <RCCEx_PLL2_Config>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a140:	e015      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a146:	3328      	adds	r3, #40	@ 0x28
 800a148:	2102      	movs	r1, #2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 fefe 	bl	800af4c <RCCEx_PLL3_Config>
 800a150:	4603      	mov	r3, r0
 800a152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a156:	e00a      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a15e:	e006      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a160:	bf00      	nop
 800a162:	e004      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a164:	bf00      	nop
 800a166:	e002      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a168:	bf00      	nop
 800a16a:	e000      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a16c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a16e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10e      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a176:	4b06      	ldr	r3, [pc, #24]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a17a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a186:	4a02      	ldr	r2, [pc, #8]	@ (800a190 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a188:	430b      	orrs	r3, r1
 800a18a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a18c:	e006      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a18e:	bf00      	nop
 800a190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a194:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a198:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a19c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a1a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	d055      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a1c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a1c8:	d033      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a1ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a1ce:	d82c      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a1d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1d4:	d02f      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a1d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1da:	d826      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a1dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a1e0:	d02b      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a1e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a1e6:	d820      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a1e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1ec:	d012      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a1ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1f2:	d81a      	bhi.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d022      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a1f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1fc:	d115      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a202:	3308      	adds	r3, #8
 800a204:	2100      	movs	r1, #0
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fdee 	bl	800ade8 <RCCEx_PLL2_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a212:	e015      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a218:	3328      	adds	r3, #40	@ 0x28
 800a21a:	2102      	movs	r1, #2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 fe95 	bl	800af4c <RCCEx_PLL3_Config>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a228:	e00a      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a230:	e006      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a232:	bf00      	nop
 800a234:	e004      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a236:	bf00      	nop
 800a238:	e002      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a23a:	bf00      	nop
 800a23c:	e000      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a23e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a240:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10b      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a248:	4ba1      	ldr	r3, [pc, #644]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a24a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a24c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a254:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a258:	4a9d      	ldr	r2, [pc, #628]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a25a:	430b      	orrs	r3, r1
 800a25c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a25e:	e003      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a260:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a264:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f002 0308 	and.w	r3, r2, #8
 800a274:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a278:	2300      	movs	r3, #0
 800a27a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a27e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a282:	460b      	mov	r3, r1
 800a284:	4313      	orrs	r3, r2
 800a286:	d01e      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a294:	d10c      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a29a:	3328      	adds	r3, #40	@ 0x28
 800a29c:	2102      	movs	r1, #2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fe54 	bl	800af4c <RCCEx_PLL3_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a2b0:	4b87      	ldr	r3, [pc, #540]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c0:	4a83      	ldr	r2, [pc, #524]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f002 0310 	and.w	r3, r2, #16
 800a2d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a2dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	d01e      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f2:	d10c      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2f8:	3328      	adds	r3, #40	@ 0x28
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fe25 	bl	800af4c <RCCEx_PLL3_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a30e:	4b70      	ldr	r3, [pc, #448]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a312:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a31a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a31e:	4a6c      	ldr	r2, [pc, #432]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a320:	430b      	orrs	r3, r1
 800a322:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a334:	2300      	movs	r3, #0
 800a336:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a33a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a33e:	460b      	mov	r3, r1
 800a340:	4313      	orrs	r3, r2
 800a342:	d03e      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a348:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a34c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a350:	d022      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a356:	d81b      	bhi.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a360:	d00b      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a362:	e015      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a368:	3308      	adds	r3, #8
 800a36a:	2100      	movs	r1, #0
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fd3b 	bl	800ade8 <RCCEx_PLL2_Config>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a378:	e00f      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a37a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a37e:	3328      	adds	r3, #40	@ 0x28
 800a380:	2102      	movs	r1, #2
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fde2 	bl	800af4c <RCCEx_PLL3_Config>
 800a388:	4603      	mov	r3, r0
 800a38a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a38e:	e004      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a396:	e000      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a39a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10b      	bne.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3a2:	4b4b      	ldr	r3, [pc, #300]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a3b2:	4a47      	ldr	r2, [pc, #284]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3b8:	e003      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a3ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a3d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	d03b      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3ea:	d01f      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a3ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3f0:	d818      	bhi.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a3f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3f6:	d003      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a3f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3fc:	d007      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a3fe:	e011      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a400:	4b33      	ldr	r3, [pc, #204]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a404:	4a32      	ldr	r2, [pc, #200]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a40a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a40c:	e00f      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a40e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a412:	3328      	adds	r3, #40	@ 0x28
 800a414:	2101      	movs	r1, #1
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fd98 	bl	800af4c <RCCEx_PLL3_Config>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a422:	e004      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a42a:	e000      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a42c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a42e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10b      	bne.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a436:	4b26      	ldr	r3, [pc, #152]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a43e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a446:	4a22      	ldr	r2, [pc, #136]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a448:	430b      	orrs	r3, r1
 800a44a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a44c:	e003      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a44e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a452:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a462:	673b      	str	r3, [r7, #112]	@ 0x70
 800a464:	2300      	movs	r3, #0
 800a466:	677b      	str	r3, [r7, #116]	@ 0x74
 800a468:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a46c:	460b      	mov	r3, r1
 800a46e:	4313      	orrs	r3, r2
 800a470:	d034      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a47c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a480:	d007      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a482:	e011      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a484:	4b12      	ldr	r3, [pc, #72]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a488:	4a11      	ldr	r2, [pc, #68]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a48a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a48e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a490:	e00e      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a496:	3308      	adds	r3, #8
 800a498:	2102      	movs	r1, #2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fca4 	bl	800ade8 <RCCEx_PLL2_Config>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a4a6:	e003      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10d      	bne.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a4b8:	4b05      	ldr	r3, [pc, #20]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a4ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4c6:	4a02      	ldr	r2, [pc, #8]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4cc:	e006      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a4ce:	bf00      	nop
 800a4d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a4e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	d00c      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4fc:	3328      	adds	r3, #40	@ 0x28
 800a4fe:	2102      	movs	r1, #2
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fd23 	bl	800af4c <RCCEx_PLL3_Config>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a51e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a520:	2300      	movs	r3, #0
 800a522:	667b      	str	r3, [r7, #100]	@ 0x64
 800a524:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a528:	460b      	mov	r3, r1
 800a52a:	4313      	orrs	r3, r2
 800a52c:	d038      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a53a:	d018      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a53c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a540:	d811      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a546:	d014      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a54c:	d80b      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d011      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a556:	d106      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a558:	4bc3      	ldr	r3, [pc, #780]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	4ac2      	ldr	r2, [pc, #776]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a564:	e008      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a56c:	e004      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a56e:	bf00      	nop
 800a570:	e002      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a572:	bf00      	nop
 800a574:	e000      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a576:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10b      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a580:	4bb9      	ldr	r3, [pc, #740]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a584:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a590:	4ab5      	ldr	r2, [pc, #724]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a592:	430b      	orrs	r3, r1
 800a594:	6553      	str	r3, [r2, #84]	@ 0x54
 800a596:	e003      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a59c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a5ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	d009      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5bc:	4baa      	ldr	r3, [pc, #680]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ca:	4aa7      	ldr	r2, [pc, #668]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5cc:	430b      	orrs	r3, r1
 800a5ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a5dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5de:	2300      	movs	r3, #0
 800a5e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	d009      	beq.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a5ec:	4b9e      	ldr	r3, [pc, #632]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5fa:	4a9b      	ldr	r2, [pc, #620]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a60c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a60e:	2300      	movs	r3, #0
 800a610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a612:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a616:	460b      	mov	r3, r1
 800a618:	4313      	orrs	r3, r2
 800a61a:	d009      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a61c:	4b92      	ldr	r3, [pc, #584]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a61e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a620:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62a:	4a8f      	ldr	r2, [pc, #572]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a62c:	430b      	orrs	r3, r1
 800a62e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a63c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a63e:	2300      	movs	r3, #0
 800a640:	647b      	str	r3, [r7, #68]	@ 0x44
 800a642:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a646:	460b      	mov	r3, r1
 800a648:	4313      	orrs	r3, r2
 800a64a:	d00e      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a64c:	4b86      	ldr	r3, [pc, #536]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	4a85      	ldr	r2, [pc, #532]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a652:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a656:	6113      	str	r3, [r2, #16]
 800a658:	4b83      	ldr	r3, [pc, #524]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a65a:	6919      	ldr	r1, [r3, #16]
 800a65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a664:	4a80      	ldr	r2, [pc, #512]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a666:	430b      	orrs	r3, r1
 800a668:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a676:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a680:	460b      	mov	r3, r1
 800a682:	4313      	orrs	r3, r2
 800a684:	d009      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a686:	4b78      	ldr	r3, [pc, #480]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a68e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a694:	4a74      	ldr	r2, [pc, #464]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a696:	430b      	orrs	r3, r1
 800a698:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	d00a      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6b6:	4b6c      	ldr	r3, [pc, #432]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6c6:	4a68      	ldr	r2, [pc, #416]	@ (800a868 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	d011      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fb79 	bl	800ade8 <RCCEx_PLL2_Config>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a708:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	2100      	movs	r1, #0
 800a716:	6239      	str	r1, [r7, #32]
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a71e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a722:	460b      	mov	r3, r1
 800a724:	4313      	orrs	r3, r2
 800a726:	d011      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72c:	3308      	adds	r3, #8
 800a72e:	2101      	movs	r1, #1
 800a730:	4618      	mov	r0, r3
 800a732:	f000 fb59 	bl	800ade8 <RCCEx_PLL2_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a73c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a744:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a748:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a74c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	2100      	movs	r1, #0
 800a756:	61b9      	str	r1, [r7, #24]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a762:	460b      	mov	r3, r1
 800a764:	4313      	orrs	r3, r2
 800a766:	d011      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a76c:	3308      	adds	r3, #8
 800a76e:	2102      	movs	r1, #2
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fb39 	bl	800ade8 <RCCEx_PLL2_Config>
 800a776:	4603      	mov	r3, r0
 800a778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a77c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a784:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a788:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	2100      	movs	r1, #0
 800a796:	6139      	str	r1, [r7, #16]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	d011      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ac:	3328      	adds	r3, #40	@ 0x28
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fbcb 	bl	800af4c <RCCEx_PLL3_Config>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a7bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	d011      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ec:	3328      	adds	r3, #40	@ 0x28
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fbab 	bl	800af4c <RCCEx_PLL3_Config>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a7fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a800:	2b00      	cmp	r3, #0
 800a802:	d003      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a808:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a80c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	2100      	movs	r1, #0
 800a816:	6039      	str	r1, [r7, #0]
 800a818:	f003 0320 	and.w	r3, r3, #32
 800a81c:	607b      	str	r3, [r7, #4]
 800a81e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a822:	460b      	mov	r3, r1
 800a824:	4313      	orrs	r3, r2
 800a826:	d011      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a82c:	3328      	adds	r3, #40	@ 0x28
 800a82e:	2102      	movs	r1, #2
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fb8b 	bl	800af4c <RCCEx_PLL3_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a83c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a840:	2b00      	cmp	r3, #0
 800a842:	d003      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a844:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a848:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a84c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	e000      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a860:	46bd      	mov	sp, r7
 800a862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a866:	bf00      	nop
 800a868:	58024400 	.word	0x58024400

0800a86c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a870:	f7fe fda0 	bl	80093b4 <HAL_RCC_GetHCLKFreq>
 800a874:	4602      	mov	r2, r0
 800a876:	4b06      	ldr	r3, [pc, #24]	@ (800a890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	091b      	lsrs	r3, r3, #4
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	4904      	ldr	r1, [pc, #16]	@ (800a894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a882:	5ccb      	ldrb	r3, [r1, r3]
 800a884:	f003 031f 	and.w	r3, r3, #31
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	58024400 	.word	0x58024400
 800a894:	080152e8 	.word	0x080152e8

0800a898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a898:	b480      	push	{r7}
 800a89a:	b089      	sub	sp, #36	@ 0x24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8a0:	4ba1      	ldr	r3, [pc, #644]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8aa:	4b9f      	ldr	r3, [pc, #636]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ae:	0b1b      	lsrs	r3, r3, #12
 800a8b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8b6:	4b9c      	ldr	r3, [pc, #624]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ba:	091b      	lsrs	r3, r3, #4
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8c2:	4b99      	ldr	r3, [pc, #612]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c6:	08db      	lsrs	r3, r3, #3
 800a8c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	fb02 f303 	mul.w	r3, r2, r3
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 8111 	beq.w	800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	f000 8083 	beq.w	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	f200 80a1 	bhi.w	800aa38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d056      	beq.n	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a902:	e099      	b.n	800aa38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a904:	4b88      	ldr	r3, [pc, #544]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d02d      	beq.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a910:	4b85      	ldr	r3, [pc, #532]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	08db      	lsrs	r3, r3, #3
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	4a84      	ldr	r2, [pc, #528]	@ (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a91c:	fa22 f303 	lsr.w	r3, r2, r3
 800a920:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	ee07 3a90 	vmov	s15, r3
 800a928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a94e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a95a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a96a:	e087      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	ee07 3a90 	vmov	s15, r3
 800a972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a976:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a97e:	4b6a      	ldr	r3, [pc, #424]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a992:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a99e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ae:	e065      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c2:	4b59      	ldr	r3, [pc, #356]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9f2:	e043      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa06:	4b48      	ldr	r3, [pc, #288]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa16:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa36:	e021      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4a:	4b37      	ldr	r3, [pc, #220]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa7c:	4b2a      	ldr	r3, [pc, #168]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa80:	0a5b      	lsrs	r3, r3, #9
 800aa82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa96:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa2:	ee17 2a90 	vmov	r2, s15
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaae:	0c1b      	lsrs	r3, r3, #16
 800aab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab4:	ee07 3a90 	vmov	s15, r3
 800aab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aac4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad0:	ee17 2a90 	vmov	r2, s15
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aad8:	4b13      	ldr	r3, [pc, #76]	@ (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aadc:	0e1b      	lsrs	r3, r3, #24
 800aade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafe:	ee17 2a90 	vmov	r2, s15
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab06:	e008      	b.n	800ab1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	609a      	str	r2, [r3, #8]
}
 800ab1a:	bf00      	nop
 800ab1c:	3724      	adds	r7, #36	@ 0x24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	03d09000 	.word	0x03d09000
 800ab30:	46000000 	.word	0x46000000
 800ab34:	4c742400 	.word	0x4c742400
 800ab38:	4a742400 	.word	0x4a742400
 800ab3c:	4bb71b00 	.word	0x4bb71b00

0800ab40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b089      	sub	sp, #36	@ 0x24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab48:	4ba1      	ldr	r3, [pc, #644]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4c:	f003 0303 	and.w	r3, r3, #3
 800ab50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab52:	4b9f      	ldr	r3, [pc, #636]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab56:	0d1b      	lsrs	r3, r3, #20
 800ab58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab5e:	4b9c      	ldr	r3, [pc, #624]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab62:	0a1b      	lsrs	r3, r3, #8
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab6a:	4b99      	ldr	r3, [pc, #612]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6e:	08db      	lsrs	r3, r3, #3
 800ab70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	fb02 f303 	mul.w	r3, r2, r3
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 8111 	beq.w	800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	f000 8083 	beq.w	800ac9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	f200 80a1 	bhi.w	800ace0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d056      	beq.n	800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abaa:	e099      	b.n	800ace0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abac:	4b88      	ldr	r3, [pc, #544]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0320 	and.w	r3, r3, #32
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d02d      	beq.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abb8:	4b85      	ldr	r3, [pc, #532]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	08db      	lsrs	r3, r3, #3
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	4a84      	ldr	r2, [pc, #528]	@ (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
 800abc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	ee07 3a90 	vmov	s15, r3
 800abd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b7b      	ldr	r3, [pc, #492]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac12:	e087      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac26:	4b6a      	ldr	r3, [pc, #424]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac56:	e065      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac6a:	4b59      	ldr	r3, [pc, #356]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac72:	ee07 3a90 	vmov	s15, r3
 800ac76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac9a:	e043      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800acaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acae:	4b48      	ldr	r3, [pc, #288]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acde:	e021      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf2:	4b37      	ldr	r3, [pc, #220]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad24:	4b2a      	ldr	r3, [pc, #168]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad28:	0a5b      	lsrs	r3, r3, #9
 800ad2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4a:	ee17 2a90 	vmov	r2, s15
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad52:	4b1f      	ldr	r3, [pc, #124]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad5c:	ee07 3a90 	vmov	s15, r3
 800ad60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad78:	ee17 2a90 	vmov	r2, s15
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad80:	4b13      	ldr	r3, [pc, #76]	@ (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad84:	0e1b      	lsrs	r3, r3, #24
 800ad86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada6:	ee17 2a90 	vmov	r2, s15
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adae:	e008      	b.n	800adc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	609a      	str	r2, [r3, #8]
}
 800adc2:	bf00      	nop
 800adc4:	3724      	adds	r7, #36	@ 0x24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	58024400 	.word	0x58024400
 800add4:	03d09000 	.word	0x03d09000
 800add8:	46000000 	.word	0x46000000
 800addc:	4c742400 	.word	0x4c742400
 800ade0:	4a742400 	.word	0x4a742400
 800ade4:	4bb71b00 	.word	0x4bb71b00

0800ade8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adf6:	4b53      	ldr	r3, [pc, #332]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800adf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfa:	f003 0303 	and.w	r3, r3, #3
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d101      	bne.n	800ae06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e099      	b.n	800af3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae06:	4b4f      	ldr	r3, [pc, #316]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a4e      	ldr	r2, [pc, #312]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae12:	f7f7 fceb 	bl	80027ec <HAL_GetTick>
 800ae16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae18:	e008      	b.n	800ae2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae1a:	f7f7 fce7 	bl	80027ec <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d901      	bls.n	800ae2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e086      	b.n	800af3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae2c:	4b45      	ldr	r3, [pc, #276]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1f0      	bne.n	800ae1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae38:	4b42      	ldr	r3, [pc, #264]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	031b      	lsls	r3, r3, #12
 800ae46:	493f      	ldr	r1, [pc, #252]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	025b      	lsls	r3, r3, #9
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	431a      	orrs	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	041b      	lsls	r3, r3, #16
 800ae6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	061b      	lsls	r3, r3, #24
 800ae78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae7c:	4931      	ldr	r1, [pc, #196]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae82:	4b30      	ldr	r3, [pc, #192]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	492d      	ldr	r1, [pc, #180]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae94:	4b2b      	ldr	r3, [pc, #172]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800ae96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae98:	f023 0220 	bic.w	r2, r3, #32
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	4928      	ldr	r1, [pc, #160]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aea6:	4b27      	ldr	r3, [pc, #156]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	4a26      	ldr	r2, [pc, #152]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aeac:	f023 0310 	bic.w	r3, r3, #16
 800aeb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aeb2:	4b24      	ldr	r3, [pc, #144]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aeb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeb6:	4b24      	ldr	r3, [pc, #144]	@ (800af48 <RCCEx_PLL2_Config+0x160>)
 800aeb8:	4013      	ands	r3, r2
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	69d2      	ldr	r2, [r2, #28]
 800aebe:	00d2      	lsls	r2, r2, #3
 800aec0:	4920      	ldr	r1, [pc, #128]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aec6:	4b1f      	ldr	r3, [pc, #124]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeca:	4a1e      	ldr	r2, [pc, #120]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aecc:	f043 0310 	orr.w	r3, r3, #16
 800aed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aed8:	4b1a      	ldr	r3, [pc, #104]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aeda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aedc:	4a19      	ldr	r2, [pc, #100]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aede:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aee4:	e00f      	b.n	800af06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d106      	bne.n	800aefa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aeec:	4b15      	ldr	r3, [pc, #84]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	4a14      	ldr	r2, [pc, #80]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aef8:	e005      	b.n	800af06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aefa:	4b12      	ldr	r3, [pc, #72]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800aefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefe:	4a11      	ldr	r2, [pc, #68]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800af00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af06:	4b0f      	ldr	r3, [pc, #60]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a0e      	ldr	r2, [pc, #56]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800af0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af12:	f7f7 fc6b 	bl	80027ec <HAL_GetTick>
 800af16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af18:	e008      	b.n	800af2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af1a:	f7f7 fc67 	bl	80027ec <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d901      	bls.n	800af2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e006      	b.n	800af3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af2c:	4b05      	ldr	r3, [pc, #20]	@ (800af44 <RCCEx_PLL2_Config+0x15c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0f0      	beq.n	800af1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	58024400 	.word	0x58024400
 800af48:	ffff0007 	.word	0xffff0007

0800af4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af5a:	4b53      	ldr	r3, [pc, #332]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5e:	f003 0303 	and.w	r3, r3, #3
 800af62:	2b03      	cmp	r3, #3
 800af64:	d101      	bne.n	800af6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e099      	b.n	800b09e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af6a:	4b4f      	ldr	r3, [pc, #316]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a4e      	ldr	r2, [pc, #312]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800af70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af76:	f7f7 fc39 	bl	80027ec <HAL_GetTick>
 800af7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af7c:	e008      	b.n	800af90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af7e:	f7f7 fc35 	bl	80027ec <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d901      	bls.n	800af90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e086      	b.n	800b09e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af90:	4b45      	ldr	r3, [pc, #276]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1f0      	bne.n	800af7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af9c:	4b42      	ldr	r3, [pc, #264]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800af9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	051b      	lsls	r3, r3, #20
 800afaa:	493f      	ldr	r1, [pc, #252]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800afac:	4313      	orrs	r3, r2
 800afae:	628b      	str	r3, [r1, #40]	@ 0x28
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	025b      	lsls	r3, r3, #9
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	3b01      	subs	r3, #1
 800afcc:	041b      	lsls	r3, r3, #16
 800afce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afd2:	431a      	orrs	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	3b01      	subs	r3, #1
 800afda:	061b      	lsls	r3, r3, #24
 800afdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afe0:	4931      	ldr	r1, [pc, #196]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800afe2:	4313      	orrs	r3, r2
 800afe4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800afe6:	4b30      	ldr	r3, [pc, #192]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800afe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	492d      	ldr	r1, [pc, #180]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aff8:	4b2b      	ldr	r3, [pc, #172]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800affa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	4928      	ldr	r1, [pc, #160]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b006:	4313      	orrs	r3, r2
 800b008:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b00a:	4b27      	ldr	r3, [pc, #156]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	4a26      	ldr	r2, [pc, #152]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b014:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b016:	4b24      	ldr	r3, [pc, #144]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b01a:	4b24      	ldr	r3, [pc, #144]	@ (800b0ac <RCCEx_PLL3_Config+0x160>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	69d2      	ldr	r2, [r2, #28]
 800b022:	00d2      	lsls	r2, r2, #3
 800b024:	4920      	ldr	r1, [pc, #128]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b026:	4313      	orrs	r3, r2
 800b028:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b02a:	4b1f      	ldr	r3, [pc, #124]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02e:	4a1e      	ldr	r2, [pc, #120]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b03c:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	4a19      	ldr	r2, [pc, #100]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b042:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b048:	e00f      	b.n	800b06a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d106      	bne.n	800b05e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b050:	4b15      	ldr	r3, [pc, #84]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	4a14      	ldr	r2, [pc, #80]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b056:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b05a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b05c:	e005      	b.n	800b06a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b05e:	4b12      	ldr	r3, [pc, #72]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b062:	4a11      	ldr	r2, [pc, #68]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b068:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b06a:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a0e      	ldr	r2, [pc, #56]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b076:	f7f7 fbb9 	bl	80027ec <HAL_GetTick>
 800b07a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b07c:	e008      	b.n	800b090 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b07e:	f7f7 fbb5 	bl	80027ec <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d901      	bls.n	800b090 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e006      	b.n	800b09e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b090:	4b05      	ldr	r3, [pc, #20]	@ (800b0a8 <RCCEx_PLL3_Config+0x15c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0f0      	beq.n	800b07e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	58024400 	.word	0x58024400
 800b0ac:	ffff0007 	.word	0xffff0007

0800b0b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e049      	b.n	800b156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f841 	bl	800b15e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2202      	movs	r2, #2
 800b0e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f000 f9e8 	bl	800b4c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b166:	bf00      	nop
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
	...

0800b174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b01      	cmp	r3, #1
 800b186:	d001      	beq.n	800b18c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	e054      	b.n	800b236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f042 0201 	orr.w	r2, r2, #1
 800b1a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a26      	ldr	r2, [pc, #152]	@ (800b244 <HAL_TIM_Base_Start_IT+0xd0>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d022      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1b6:	d01d      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a22      	ldr	r2, [pc, #136]	@ (800b248 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d018      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a21      	ldr	r2, [pc, #132]	@ (800b24c <HAL_TIM_Base_Start_IT+0xd8>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d013      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b250 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d00e      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a1e      	ldr	r2, [pc, #120]	@ (800b254 <HAL_TIM_Base_Start_IT+0xe0>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d009      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b258 <HAL_TIM_Base_Start_IT+0xe4>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d004      	beq.n	800b1f4 <HAL_TIM_Base_Start_IT+0x80>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b25c <HAL_TIM_Base_Start_IT+0xe8>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d115      	bne.n	800b220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689a      	ldr	r2, [r3, #8]
 800b1fa:	4b19      	ldr	r3, [pc, #100]	@ (800b260 <HAL_TIM_Base_Start_IT+0xec>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b06      	cmp	r3, #6
 800b204:	d015      	beq.n	800b232 <HAL_TIM_Base_Start_IT+0xbe>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b20c:	d011      	beq.n	800b232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f042 0201 	orr.w	r2, r2, #1
 800b21c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b21e:	e008      	b.n	800b232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f042 0201 	orr.w	r2, r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	e000      	b.n	800b234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	40010000 	.word	0x40010000
 800b248:	40000400 	.word	0x40000400
 800b24c:	40000800 	.word	0x40000800
 800b250:	40000c00 	.word	0x40000c00
 800b254:	40010400 	.word	0x40010400
 800b258:	40001800 	.word	0x40001800
 800b25c:	40014000 	.word	0x40014000
 800b260:	00010007 	.word	0x00010007

0800b264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d020      	beq.n	800b2c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d01b      	beq.n	800b2c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f06f 0202 	mvn.w	r2, #2
 800b298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	f003 0303 	and.w	r3, r3, #3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8e9 	bl	800b486 <HAL_TIM_IC_CaptureCallback>
 800b2b4:	e005      	b.n	800b2c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f8db 	bl	800b472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f8ec 	bl	800b49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f003 0304 	and.w	r3, r3, #4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d020      	beq.n	800b314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01b      	beq.n	800b314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f06f 0204 	mvn.w	r2, #4
 800b2e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f8c3 	bl	800b486 <HAL_TIM_IC_CaptureCallback>
 800b300:	e005      	b.n	800b30e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f8b5 	bl	800b472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f8c6 	bl	800b49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f003 0308 	and.w	r3, r3, #8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d020      	beq.n	800b360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01b      	beq.n	800b360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f06f 0208 	mvn.w	r2, #8
 800b330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2204      	movs	r2, #4
 800b336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f89d 	bl	800b486 <HAL_TIM_IC_CaptureCallback>
 800b34c:	e005      	b.n	800b35a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f88f 	bl	800b472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f8a0 	bl	800b49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f003 0310 	and.w	r3, r3, #16
 800b366:	2b00      	cmp	r3, #0
 800b368:	d020      	beq.n	800b3ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	d01b      	beq.n	800b3ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f06f 0210 	mvn.w	r2, #16
 800b37c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2208      	movs	r2, #8
 800b382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f877 	bl	800b486 <HAL_TIM_IC_CaptureCallback>
 800b398:	e005      	b.n	800b3a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f869 	bl	800b472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f87a 	bl	800b49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00c      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d007      	beq.n	800b3d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0201 	mvn.w	r2, #1
 800b3c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7f6 feb2 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d104      	bne.n	800b3e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00c      	beq.n	800b3fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d007      	beq.n	800b3fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f913 	bl	800b624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00c      	beq.n	800b422 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d007      	beq.n	800b422 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f90b 	bl	800b638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00c      	beq.n	800b446 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b43e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 f834 	bl	800b4ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f003 0320 	and.w	r3, r3, #32
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00c      	beq.n	800b46a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f06f 0220 	mvn.w	r2, #32
 800b462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f8d3 	bl	800b610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b46a:	bf00      	nop
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b472:	b480      	push	{r7}
 800b474:	b083      	sub	sp, #12
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b47a:	bf00      	nop
 800b47c:	370c      	adds	r7, #12
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b486:	b480      	push	{r7}
 800b488:	b083      	sub	sp, #12
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b48e:	bf00      	nop
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4b6:	bf00      	nop
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a46      	ldr	r2, [pc, #280]	@ (800b5f0 <TIM_Base_SetConfig+0x12c>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d013      	beq.n	800b504 <TIM_Base_SetConfig+0x40>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e2:	d00f      	beq.n	800b504 <TIM_Base_SetConfig+0x40>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a43      	ldr	r2, [pc, #268]	@ (800b5f4 <TIM_Base_SetConfig+0x130>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00b      	beq.n	800b504 <TIM_Base_SetConfig+0x40>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a42      	ldr	r2, [pc, #264]	@ (800b5f8 <TIM_Base_SetConfig+0x134>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d007      	beq.n	800b504 <TIM_Base_SetConfig+0x40>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a41      	ldr	r2, [pc, #260]	@ (800b5fc <TIM_Base_SetConfig+0x138>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d003      	beq.n	800b504 <TIM_Base_SetConfig+0x40>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a40      	ldr	r2, [pc, #256]	@ (800b600 <TIM_Base_SetConfig+0x13c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d108      	bne.n	800b516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b50a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	4313      	orrs	r3, r2
 800b514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a35      	ldr	r2, [pc, #212]	@ (800b5f0 <TIM_Base_SetConfig+0x12c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d01f      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b524:	d01b      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a32      	ldr	r2, [pc, #200]	@ (800b5f4 <TIM_Base_SetConfig+0x130>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d017      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a31      	ldr	r2, [pc, #196]	@ (800b5f8 <TIM_Base_SetConfig+0x134>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d013      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a30      	ldr	r2, [pc, #192]	@ (800b5fc <TIM_Base_SetConfig+0x138>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d00f      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a2f      	ldr	r2, [pc, #188]	@ (800b600 <TIM_Base_SetConfig+0x13c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d00b      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a2e      	ldr	r2, [pc, #184]	@ (800b604 <TIM_Base_SetConfig+0x140>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d007      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a2d      	ldr	r2, [pc, #180]	@ (800b608 <TIM_Base_SetConfig+0x144>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d003      	beq.n	800b55e <TIM_Base_SetConfig+0x9a>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a2c      	ldr	r2, [pc, #176]	@ (800b60c <TIM_Base_SetConfig+0x148>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d108      	bne.n	800b570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	689a      	ldr	r2, [r3, #8]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a16      	ldr	r2, [pc, #88]	@ (800b5f0 <TIM_Base_SetConfig+0x12c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d00f      	beq.n	800b5bc <TIM_Base_SetConfig+0xf8>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a18      	ldr	r2, [pc, #96]	@ (800b600 <TIM_Base_SetConfig+0x13c>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d00b      	beq.n	800b5bc <TIM_Base_SetConfig+0xf8>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a17      	ldr	r2, [pc, #92]	@ (800b604 <TIM_Base_SetConfig+0x140>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d007      	beq.n	800b5bc <TIM_Base_SetConfig+0xf8>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a16      	ldr	r2, [pc, #88]	@ (800b608 <TIM_Base_SetConfig+0x144>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d003      	beq.n	800b5bc <TIM_Base_SetConfig+0xf8>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a15      	ldr	r2, [pc, #84]	@ (800b60c <TIM_Base_SetConfig+0x148>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d103      	bne.n	800b5c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	691a      	ldr	r2, [r3, #16]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d105      	bne.n	800b5e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	f023 0201 	bic.w	r2, r3, #1
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	611a      	str	r2, [r3, #16]
  }
}
 800b5e2:	bf00      	nop
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	40010000 	.word	0x40010000
 800b5f4:	40000400 	.word	0x40000400
 800b5f8:	40000800 	.word	0x40000800
 800b5fc:	40000c00 	.word	0x40000c00
 800b600:	40010400 	.word	0x40010400
 800b604:	40014000 	.word	0x40014000
 800b608:	40014400 	.word	0x40014400
 800b60c:	40014800 	.word	0x40014800

0800b610 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e042      	b.n	800b6e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7f6 ffd7 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2224      	movs	r2, #36	@ 0x24
 800b67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 0201 	bic.w	r2, r2, #1
 800b68c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 ff22 	bl	800c4e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f8b3 	bl	800b808 <UART_SetConfig>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d101      	bne.n	800b6ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e01b      	b.n	800b6e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b6ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 ffa1 	bl	800c624 <UART_CheckIdleState>
 800b6e2:	4603      	mov	r3, r0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	@ 0x28
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	603b      	str	r3, [r7, #0]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b702:	2b20      	cmp	r3, #32
 800b704:	d17b      	bne.n	800b7fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <HAL_UART_Transmit+0x26>
 800b70c:	88fb      	ldrh	r3, [r7, #6]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e074      	b.n	800b800 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2221      	movs	r2, #33	@ 0x21
 800b722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b726:	f7f7 f861 	bl	80027ec <HAL_GetTick>
 800b72a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	88fa      	ldrh	r2, [r7, #6]
 800b730:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	88fa      	ldrh	r2, [r7, #6]
 800b738:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b744:	d108      	bne.n	800b758 <HAL_UART_Transmit+0x6c>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	e003      	b.n	800b760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b75c:	2300      	movs	r3, #0
 800b75e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b760:	e030      	b.n	800b7c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2200      	movs	r2, #0
 800b76a:	2180      	movs	r1, #128	@ 0x80
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f001 f803 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d005      	beq.n	800b784 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2220      	movs	r2, #32
 800b77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e03d      	b.n	800b800 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10b      	bne.n	800b7a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b798:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	3302      	adds	r3, #2
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	e007      	b.n	800b7b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	781a      	ldrb	r2, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1c8      	bne.n	800b762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2140      	movs	r1, #64	@ 0x40
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 ffcc 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e006      	b.n	800b800 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	e000      	b.n	800b800 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b7fe:	2302      	movs	r3, #2
  }
}
 800b800:	4618      	mov	r0, r3
 800b802:	3720      	adds	r7, #32
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b80c:	b092      	sub	sp, #72	@ 0x48
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	431a      	orrs	r2, r3
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	431a      	orrs	r2, r3
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	4bbe      	ldr	r3, [pc, #760]	@ (800bb30 <UART_SetConfig+0x328>)
 800b838:	4013      	ands	r3, r2
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	6812      	ldr	r2, [r2, #0]
 800b83e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b840:	430b      	orrs	r3, r1
 800b842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4ab3      	ldr	r2, [pc, #716]	@ (800bb34 <UART_SetConfig+0x32c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d004      	beq.n	800b874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b870:	4313      	orrs	r3, r2
 800b872:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689a      	ldr	r2, [r3, #8]
 800b87a:	4baf      	ldr	r3, [pc, #700]	@ (800bb38 <UART_SetConfig+0x330>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b884:	430b      	orrs	r3, r1
 800b886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b88e:	f023 010f 	bic.w	r1, r3, #15
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4aa6      	ldr	r2, [pc, #664]	@ (800bb3c <UART_SetConfig+0x334>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d177      	bne.n	800b998 <UART_SetConfig+0x190>
 800b8a8:	4ba5      	ldr	r3, [pc, #660]	@ (800bb40 <UART_SetConfig+0x338>)
 800b8aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8b0:	2b28      	cmp	r3, #40	@ 0x28
 800b8b2:	d86d      	bhi.n	800b990 <UART_SetConfig+0x188>
 800b8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b8bc <UART_SetConfig+0xb4>)
 800b8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ba:	bf00      	nop
 800b8bc:	0800b961 	.word	0x0800b961
 800b8c0:	0800b991 	.word	0x0800b991
 800b8c4:	0800b991 	.word	0x0800b991
 800b8c8:	0800b991 	.word	0x0800b991
 800b8cc:	0800b991 	.word	0x0800b991
 800b8d0:	0800b991 	.word	0x0800b991
 800b8d4:	0800b991 	.word	0x0800b991
 800b8d8:	0800b991 	.word	0x0800b991
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b991 	.word	0x0800b991
 800b8e4:	0800b991 	.word	0x0800b991
 800b8e8:	0800b991 	.word	0x0800b991
 800b8ec:	0800b991 	.word	0x0800b991
 800b8f0:	0800b991 	.word	0x0800b991
 800b8f4:	0800b991 	.word	0x0800b991
 800b8f8:	0800b991 	.word	0x0800b991
 800b8fc:	0800b971 	.word	0x0800b971
 800b900:	0800b991 	.word	0x0800b991
 800b904:	0800b991 	.word	0x0800b991
 800b908:	0800b991 	.word	0x0800b991
 800b90c:	0800b991 	.word	0x0800b991
 800b910:	0800b991 	.word	0x0800b991
 800b914:	0800b991 	.word	0x0800b991
 800b918:	0800b991 	.word	0x0800b991
 800b91c:	0800b979 	.word	0x0800b979
 800b920:	0800b991 	.word	0x0800b991
 800b924:	0800b991 	.word	0x0800b991
 800b928:	0800b991 	.word	0x0800b991
 800b92c:	0800b991 	.word	0x0800b991
 800b930:	0800b991 	.word	0x0800b991
 800b934:	0800b991 	.word	0x0800b991
 800b938:	0800b991 	.word	0x0800b991
 800b93c:	0800b981 	.word	0x0800b981
 800b940:	0800b991 	.word	0x0800b991
 800b944:	0800b991 	.word	0x0800b991
 800b948:	0800b991 	.word	0x0800b991
 800b94c:	0800b991 	.word	0x0800b991
 800b950:	0800b991 	.word	0x0800b991
 800b954:	0800b991 	.word	0x0800b991
 800b958:	0800b991 	.word	0x0800b991
 800b95c:	0800b989 	.word	0x0800b989
 800b960:	2301      	movs	r3, #1
 800b962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b966:	e326      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b968:	2304      	movs	r3, #4
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e322      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b970:	2308      	movs	r3, #8
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e31e      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b978:	2310      	movs	r3, #16
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e31a      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b980:	2320      	movs	r3, #32
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e316      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b988:	2340      	movs	r3, #64	@ 0x40
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e312      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b990:	2380      	movs	r3, #128	@ 0x80
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e30e      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a69      	ldr	r2, [pc, #420]	@ (800bb44 <UART_SetConfig+0x33c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d130      	bne.n	800ba04 <UART_SetConfig+0x1fc>
 800b9a2:	4b67      	ldr	r3, [pc, #412]	@ (800bb40 <UART_SetConfig+0x338>)
 800b9a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b05      	cmp	r3, #5
 800b9ac:	d826      	bhi.n	800b9fc <UART_SetConfig+0x1f4>
 800b9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b4 <UART_SetConfig+0x1ac>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800b9cd 	.word	0x0800b9cd
 800b9b8:	0800b9d5 	.word	0x0800b9d5
 800b9bc:	0800b9dd 	.word	0x0800b9dd
 800b9c0:	0800b9e5 	.word	0x0800b9e5
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9f5 	.word	0x0800b9f5
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d2:	e2f0      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e2ec      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b9dc:	2308      	movs	r3, #8
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e2e8      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e2e4      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b9ec:	2320      	movs	r3, #32
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e2e0      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b9f4:	2340      	movs	r3, #64	@ 0x40
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e2dc      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800b9fc:	2380      	movs	r3, #128	@ 0x80
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e2d8      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a4f      	ldr	r2, [pc, #316]	@ (800bb48 <UART_SetConfig+0x340>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d130      	bne.n	800ba70 <UART_SetConfig+0x268>
 800ba0e:	4b4c      	ldr	r3, [pc, #304]	@ (800bb40 <UART_SetConfig+0x338>)
 800ba10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d826      	bhi.n	800ba68 <UART_SetConfig+0x260>
 800ba1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba20 <UART_SetConfig+0x218>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba49 	.word	0x0800ba49
 800ba2c:	0800ba51 	.word	0x0800ba51
 800ba30:	0800ba59 	.word	0x0800ba59
 800ba34:	0800ba61 	.word	0x0800ba61
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3e:	e2ba      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba40:	2304      	movs	r3, #4
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba46:	e2b6      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba48:	2308      	movs	r3, #8
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e2b2      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba50:	2310      	movs	r3, #16
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e2ae      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e2aa      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba60:	2340      	movs	r3, #64	@ 0x40
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e2a6      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba68:	2380      	movs	r3, #128	@ 0x80
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e2a2      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a35      	ldr	r2, [pc, #212]	@ (800bb4c <UART_SetConfig+0x344>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d130      	bne.n	800badc <UART_SetConfig+0x2d4>
 800ba7a:	4b31      	ldr	r3, [pc, #196]	@ (800bb40 <UART_SetConfig+0x338>)
 800ba7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d826      	bhi.n	800bad4 <UART_SetConfig+0x2cc>
 800ba86:	a201      	add	r2, pc, #4	@ (adr r2, 800ba8c <UART_SetConfig+0x284>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800baa5 	.word	0x0800baa5
 800ba90:	0800baad 	.word	0x0800baad
 800ba94:	0800bab5 	.word	0x0800bab5
 800ba98:	0800babd 	.word	0x0800babd
 800ba9c:	0800bac5 	.word	0x0800bac5
 800baa0:	0800bacd 	.word	0x0800bacd
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e284      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800baac:	2304      	movs	r3, #4
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e280      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baba:	e27c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800babc:	2310      	movs	r3, #16
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac2:	e278      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bac4:	2320      	movs	r3, #32
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e274      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bacc:	2340      	movs	r3, #64	@ 0x40
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e270      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bad4:	2380      	movs	r3, #128	@ 0x80
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e26c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a1b      	ldr	r2, [pc, #108]	@ (800bb50 <UART_SetConfig+0x348>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d142      	bne.n	800bb6c <UART_SetConfig+0x364>
 800bae6:	4b16      	ldr	r3, [pc, #88]	@ (800bb40 <UART_SetConfig+0x338>)
 800bae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	2b05      	cmp	r3, #5
 800baf0:	d838      	bhi.n	800bb64 <UART_SetConfig+0x35c>
 800baf2:	a201      	add	r2, pc, #4	@ (adr r2, 800baf8 <UART_SetConfig+0x2f0>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb11 	.word	0x0800bb11
 800bafc:	0800bb19 	.word	0x0800bb19
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb55 	.word	0x0800bb55
 800bb0c:	0800bb5d 	.word	0x0800bb5d
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e24e      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb18:	2304      	movs	r3, #4
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e24a      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb20:	2308      	movs	r3, #8
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e246      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e242      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb30:	cfff69f3 	.word	0xcfff69f3
 800bb34:	58000c00 	.word	0x58000c00
 800bb38:	11fff4ff 	.word	0x11fff4ff
 800bb3c:	40011000 	.word	0x40011000
 800bb40:	58024400 	.word	0x58024400
 800bb44:	40004400 	.word	0x40004400
 800bb48:	40004800 	.word	0x40004800
 800bb4c:	40004c00 	.word	0x40004c00
 800bb50:	40005000 	.word	0x40005000
 800bb54:	2320      	movs	r3, #32
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e22c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb5c:	2340      	movs	r3, #64	@ 0x40
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e228      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb64:	2380      	movs	r3, #128	@ 0x80
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e224      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4ab1      	ldr	r2, [pc, #708]	@ (800be38 <UART_SetConfig+0x630>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d176      	bne.n	800bc64 <UART_SetConfig+0x45c>
 800bb76:	4bb1      	ldr	r3, [pc, #708]	@ (800be3c <UART_SetConfig+0x634>)
 800bb78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb7e:	2b28      	cmp	r3, #40	@ 0x28
 800bb80:	d86c      	bhi.n	800bc5c <UART_SetConfig+0x454>
 800bb82:	a201      	add	r2, pc, #4	@ (adr r2, 800bb88 <UART_SetConfig+0x380>)
 800bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb88:	0800bc2d 	.word	0x0800bc2d
 800bb8c:	0800bc5d 	.word	0x0800bc5d
 800bb90:	0800bc5d 	.word	0x0800bc5d
 800bb94:	0800bc5d 	.word	0x0800bc5d
 800bb98:	0800bc5d 	.word	0x0800bc5d
 800bb9c:	0800bc5d 	.word	0x0800bc5d
 800bba0:	0800bc5d 	.word	0x0800bc5d
 800bba4:	0800bc5d 	.word	0x0800bc5d
 800bba8:	0800bc35 	.word	0x0800bc35
 800bbac:	0800bc5d 	.word	0x0800bc5d
 800bbb0:	0800bc5d 	.word	0x0800bc5d
 800bbb4:	0800bc5d 	.word	0x0800bc5d
 800bbb8:	0800bc5d 	.word	0x0800bc5d
 800bbbc:	0800bc5d 	.word	0x0800bc5d
 800bbc0:	0800bc5d 	.word	0x0800bc5d
 800bbc4:	0800bc5d 	.word	0x0800bc5d
 800bbc8:	0800bc3d 	.word	0x0800bc3d
 800bbcc:	0800bc5d 	.word	0x0800bc5d
 800bbd0:	0800bc5d 	.word	0x0800bc5d
 800bbd4:	0800bc5d 	.word	0x0800bc5d
 800bbd8:	0800bc5d 	.word	0x0800bc5d
 800bbdc:	0800bc5d 	.word	0x0800bc5d
 800bbe0:	0800bc5d 	.word	0x0800bc5d
 800bbe4:	0800bc5d 	.word	0x0800bc5d
 800bbe8:	0800bc45 	.word	0x0800bc45
 800bbec:	0800bc5d 	.word	0x0800bc5d
 800bbf0:	0800bc5d 	.word	0x0800bc5d
 800bbf4:	0800bc5d 	.word	0x0800bc5d
 800bbf8:	0800bc5d 	.word	0x0800bc5d
 800bbfc:	0800bc5d 	.word	0x0800bc5d
 800bc00:	0800bc5d 	.word	0x0800bc5d
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	0800bc4d 	.word	0x0800bc4d
 800bc0c:	0800bc5d 	.word	0x0800bc5d
 800bc10:	0800bc5d 	.word	0x0800bc5d
 800bc14:	0800bc5d 	.word	0x0800bc5d
 800bc18:	0800bc5d 	.word	0x0800bc5d
 800bc1c:	0800bc5d 	.word	0x0800bc5d
 800bc20:	0800bc5d 	.word	0x0800bc5d
 800bc24:	0800bc5d 	.word	0x0800bc5d
 800bc28:	0800bc55 	.word	0x0800bc55
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc32:	e1c0      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	e1bc      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc42:	e1b8      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4a:	e1b4      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc52:	e1b0      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc54:	2340      	movs	r3, #64	@ 0x40
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5a:	e1ac      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc5c:	2380      	movs	r3, #128	@ 0x80
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc62:	e1a8      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a75      	ldr	r2, [pc, #468]	@ (800be40 <UART_SetConfig+0x638>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d130      	bne.n	800bcd0 <UART_SetConfig+0x4c8>
 800bc6e:	4b73      	ldr	r3, [pc, #460]	@ (800be3c <UART_SetConfig+0x634>)
 800bc70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc72:	f003 0307 	and.w	r3, r3, #7
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d826      	bhi.n	800bcc8 <UART_SetConfig+0x4c0>
 800bc7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc80 <UART_SetConfig+0x478>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc99 	.word	0x0800bc99
 800bc84:	0800bca1 	.word	0x0800bca1
 800bc88:	0800bca9 	.word	0x0800bca9
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc9e:	e18a      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bca0:	2304      	movs	r3, #4
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca6:	e186      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bca8:	2308      	movs	r3, #8
 800bcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcae:	e182      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb6:	e17e      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bcb8:	2320      	movs	r3, #32
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e17a      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bcc0:	2340      	movs	r3, #64	@ 0x40
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e176      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bcc8:	2380      	movs	r3, #128	@ 0x80
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e172      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a5b      	ldr	r2, [pc, #364]	@ (800be44 <UART_SetConfig+0x63c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d130      	bne.n	800bd3c <UART_SetConfig+0x534>
 800bcda:	4b58      	ldr	r3, [pc, #352]	@ (800be3c <UART_SetConfig+0x634>)
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d826      	bhi.n	800bd34 <UART_SetConfig+0x52c>
 800bce6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <UART_SetConfig+0x4e4>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd0a:	e154      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd12:	e150      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1a:	e14c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd22:	e148      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd24:	2320      	movs	r3, #32
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e144      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd2c:	2340      	movs	r3, #64	@ 0x40
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e140      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd34:	2380      	movs	r3, #128	@ 0x80
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e13c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a41      	ldr	r2, [pc, #260]	@ (800be48 <UART_SetConfig+0x640>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	f040 8082 	bne.w	800be4c <UART_SetConfig+0x644>
 800bd48:	4b3c      	ldr	r3, [pc, #240]	@ (800be3c <UART_SetConfig+0x634>)
 800bd4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd50:	2b28      	cmp	r3, #40	@ 0x28
 800bd52:	d86d      	bhi.n	800be30 <UART_SetConfig+0x628>
 800bd54:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <UART_SetConfig+0x554>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800be01 	.word	0x0800be01
 800bd60:	0800be31 	.word	0x0800be31
 800bd64:	0800be31 	.word	0x0800be31
 800bd68:	0800be31 	.word	0x0800be31
 800bd6c:	0800be31 	.word	0x0800be31
 800bd70:	0800be31 	.word	0x0800be31
 800bd74:	0800be31 	.word	0x0800be31
 800bd78:	0800be31 	.word	0x0800be31
 800bd7c:	0800be09 	.word	0x0800be09
 800bd80:	0800be31 	.word	0x0800be31
 800bd84:	0800be31 	.word	0x0800be31
 800bd88:	0800be31 	.word	0x0800be31
 800bd8c:	0800be31 	.word	0x0800be31
 800bd90:	0800be31 	.word	0x0800be31
 800bd94:	0800be31 	.word	0x0800be31
 800bd98:	0800be31 	.word	0x0800be31
 800bd9c:	0800be11 	.word	0x0800be11
 800bda0:	0800be31 	.word	0x0800be31
 800bda4:	0800be31 	.word	0x0800be31
 800bda8:	0800be31 	.word	0x0800be31
 800bdac:	0800be31 	.word	0x0800be31
 800bdb0:	0800be31 	.word	0x0800be31
 800bdb4:	0800be31 	.word	0x0800be31
 800bdb8:	0800be31 	.word	0x0800be31
 800bdbc:	0800be19 	.word	0x0800be19
 800bdc0:	0800be31 	.word	0x0800be31
 800bdc4:	0800be31 	.word	0x0800be31
 800bdc8:	0800be31 	.word	0x0800be31
 800bdcc:	0800be31 	.word	0x0800be31
 800bdd0:	0800be31 	.word	0x0800be31
 800bdd4:	0800be31 	.word	0x0800be31
 800bdd8:	0800be31 	.word	0x0800be31
 800bddc:	0800be21 	.word	0x0800be21
 800bde0:	0800be31 	.word	0x0800be31
 800bde4:	0800be31 	.word	0x0800be31
 800bde8:	0800be31 	.word	0x0800be31
 800bdec:	0800be31 	.word	0x0800be31
 800bdf0:	0800be31 	.word	0x0800be31
 800bdf4:	0800be31 	.word	0x0800be31
 800bdf8:	0800be31 	.word	0x0800be31
 800bdfc:	0800be29 	.word	0x0800be29
 800be00:	2301      	movs	r3, #1
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be06:	e0d6      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be08:	2304      	movs	r3, #4
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e0d2      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be10:	2308      	movs	r3, #8
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be16:	e0ce      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be18:	2310      	movs	r3, #16
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1e:	e0ca      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be20:	2320      	movs	r3, #32
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be26:	e0c6      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be28:	2340      	movs	r3, #64	@ 0x40
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2e:	e0c2      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be30:	2380      	movs	r3, #128	@ 0x80
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be36:	e0be      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800be38:	40011400 	.word	0x40011400
 800be3c:	58024400 	.word	0x58024400
 800be40:	40007800 	.word	0x40007800
 800be44:	40007c00 	.word	0x40007c00
 800be48:	40011800 	.word	0x40011800
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4aad      	ldr	r2, [pc, #692]	@ (800c108 <UART_SetConfig+0x900>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d176      	bne.n	800bf44 <UART_SetConfig+0x73c>
 800be56:	4bad      	ldr	r3, [pc, #692]	@ (800c10c <UART_SetConfig+0x904>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be5e:	2b28      	cmp	r3, #40	@ 0x28
 800be60:	d86c      	bhi.n	800bf3c <UART_SetConfig+0x734>
 800be62:	a201      	add	r2, pc, #4	@ (adr r2, 800be68 <UART_SetConfig+0x660>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800bf0d 	.word	0x0800bf0d
 800be6c:	0800bf3d 	.word	0x0800bf3d
 800be70:	0800bf3d 	.word	0x0800bf3d
 800be74:	0800bf3d 	.word	0x0800bf3d
 800be78:	0800bf3d 	.word	0x0800bf3d
 800be7c:	0800bf3d 	.word	0x0800bf3d
 800be80:	0800bf3d 	.word	0x0800bf3d
 800be84:	0800bf3d 	.word	0x0800bf3d
 800be88:	0800bf15 	.word	0x0800bf15
 800be8c:	0800bf3d 	.word	0x0800bf3d
 800be90:	0800bf3d 	.word	0x0800bf3d
 800be94:	0800bf3d 	.word	0x0800bf3d
 800be98:	0800bf3d 	.word	0x0800bf3d
 800be9c:	0800bf3d 	.word	0x0800bf3d
 800bea0:	0800bf3d 	.word	0x0800bf3d
 800bea4:	0800bf3d 	.word	0x0800bf3d
 800bea8:	0800bf1d 	.word	0x0800bf1d
 800beac:	0800bf3d 	.word	0x0800bf3d
 800beb0:	0800bf3d 	.word	0x0800bf3d
 800beb4:	0800bf3d 	.word	0x0800bf3d
 800beb8:	0800bf3d 	.word	0x0800bf3d
 800bebc:	0800bf3d 	.word	0x0800bf3d
 800bec0:	0800bf3d 	.word	0x0800bf3d
 800bec4:	0800bf3d 	.word	0x0800bf3d
 800bec8:	0800bf25 	.word	0x0800bf25
 800becc:	0800bf3d 	.word	0x0800bf3d
 800bed0:	0800bf3d 	.word	0x0800bf3d
 800bed4:	0800bf3d 	.word	0x0800bf3d
 800bed8:	0800bf3d 	.word	0x0800bf3d
 800bedc:	0800bf3d 	.word	0x0800bf3d
 800bee0:	0800bf3d 	.word	0x0800bf3d
 800bee4:	0800bf3d 	.word	0x0800bf3d
 800bee8:	0800bf2d 	.word	0x0800bf2d
 800beec:	0800bf3d 	.word	0x0800bf3d
 800bef0:	0800bf3d 	.word	0x0800bf3d
 800bef4:	0800bf3d 	.word	0x0800bf3d
 800bef8:	0800bf3d 	.word	0x0800bf3d
 800befc:	0800bf3d 	.word	0x0800bf3d
 800bf00:	0800bf3d 	.word	0x0800bf3d
 800bf04:	0800bf3d 	.word	0x0800bf3d
 800bf08:	0800bf35 	.word	0x0800bf35
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf12:	e050      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf14:	2304      	movs	r3, #4
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1a:	e04c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf1c:	2308      	movs	r3, #8
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf22:	e048      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf24:	2310      	movs	r3, #16
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2a:	e044      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf2c:	2320      	movs	r3, #32
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf32:	e040      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf34:	2340      	movs	r3, #64	@ 0x40
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3a:	e03c      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf3c:	2380      	movs	r3, #128	@ 0x80
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf42:	e038      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a71      	ldr	r2, [pc, #452]	@ (800c110 <UART_SetConfig+0x908>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d130      	bne.n	800bfb0 <UART_SetConfig+0x7a8>
 800bf4e:	4b6f      	ldr	r3, [pc, #444]	@ (800c10c <UART_SetConfig+0x904>)
 800bf50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf52:	f003 0307 	and.w	r3, r3, #7
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	d826      	bhi.n	800bfa8 <UART_SetConfig+0x7a0>
 800bf5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf60 <UART_SetConfig+0x758>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bf79 	.word	0x0800bf79
 800bf64:	0800bf81 	.word	0x0800bf81
 800bf68:	0800bf89 	.word	0x0800bf89
 800bf6c:	0800bf91 	.word	0x0800bf91
 800bf70:	0800bf99 	.word	0x0800bf99
 800bf74:	0800bfa1 	.word	0x0800bfa1
 800bf78:	2302      	movs	r3, #2
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf7e:	e01a      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf80:	2304      	movs	r3, #4
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf86:	e016      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf88:	2308      	movs	r3, #8
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8e:	e012      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf90:	2310      	movs	r3, #16
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf96:	e00e      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bf98:	2320      	movs	r3, #32
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9e:	e00a      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bfa0:	2340      	movs	r3, #64	@ 0x40
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa6:	e006      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bfa8:	2380      	movs	r3, #128	@ 0x80
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfae:	e002      	b.n	800bfb6 <UART_SetConfig+0x7ae>
 800bfb0:	2380      	movs	r3, #128	@ 0x80
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a55      	ldr	r2, [pc, #340]	@ (800c110 <UART_SetConfig+0x908>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	f040 80f8 	bne.w	800c1b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	dc46      	bgt.n	800c058 <UART_SetConfig+0x850>
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	db75      	blt.n	800c0ba <UART_SetConfig+0x8b2>
 800bfce:	3b02      	subs	r3, #2
 800bfd0:	2b1e      	cmp	r3, #30
 800bfd2:	d872      	bhi.n	800c0ba <UART_SetConfig+0x8b2>
 800bfd4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <UART_SetConfig+0x7d4>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800c05f 	.word	0x0800c05f
 800bfe0:	0800c0bb 	.word	0x0800c0bb
 800bfe4:	0800c067 	.word	0x0800c067
 800bfe8:	0800c0bb 	.word	0x0800c0bb
 800bfec:	0800c0bb 	.word	0x0800c0bb
 800bff0:	0800c0bb 	.word	0x0800c0bb
 800bff4:	0800c077 	.word	0x0800c077
 800bff8:	0800c0bb 	.word	0x0800c0bb
 800bffc:	0800c0bb 	.word	0x0800c0bb
 800c000:	0800c0bb 	.word	0x0800c0bb
 800c004:	0800c0bb 	.word	0x0800c0bb
 800c008:	0800c0bb 	.word	0x0800c0bb
 800c00c:	0800c0bb 	.word	0x0800c0bb
 800c010:	0800c0bb 	.word	0x0800c0bb
 800c014:	0800c087 	.word	0x0800c087
 800c018:	0800c0bb 	.word	0x0800c0bb
 800c01c:	0800c0bb 	.word	0x0800c0bb
 800c020:	0800c0bb 	.word	0x0800c0bb
 800c024:	0800c0bb 	.word	0x0800c0bb
 800c028:	0800c0bb 	.word	0x0800c0bb
 800c02c:	0800c0bb 	.word	0x0800c0bb
 800c030:	0800c0bb 	.word	0x0800c0bb
 800c034:	0800c0bb 	.word	0x0800c0bb
 800c038:	0800c0bb 	.word	0x0800c0bb
 800c03c:	0800c0bb 	.word	0x0800c0bb
 800c040:	0800c0bb 	.word	0x0800c0bb
 800c044:	0800c0bb 	.word	0x0800c0bb
 800c048:	0800c0bb 	.word	0x0800c0bb
 800c04c:	0800c0bb 	.word	0x0800c0bb
 800c050:	0800c0bb 	.word	0x0800c0bb
 800c054:	0800c0ad 	.word	0x0800c0ad
 800c058:	2b40      	cmp	r3, #64	@ 0x40
 800c05a:	d02a      	beq.n	800c0b2 <UART_SetConfig+0x8aa>
 800c05c:	e02d      	b.n	800c0ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c05e:	f7fe fc05 	bl	800a86c <HAL_RCCEx_GetD3PCLK1Freq>
 800c062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c064:	e02f      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe fc14 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c074:	e027      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c076:	f107 0318 	add.w	r3, r7, #24
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe fd60 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c084:	e01f      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c086:	4b21      	ldr	r3, [pc, #132]	@ (800c10c <UART_SetConfig+0x904>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f003 0320 	and.w	r3, r3, #32
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d009      	beq.n	800c0a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c092:	4b1e      	ldr	r3, [pc, #120]	@ (800c10c <UART_SetConfig+0x904>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	08db      	lsrs	r3, r3, #3
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	4a1d      	ldr	r2, [pc, #116]	@ (800c114 <UART_SetConfig+0x90c>)
 800c09e:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0a4:	e00f      	b.n	800c0c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c0a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c114 <UART_SetConfig+0x90c>)
 800c0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0aa:	e00c      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c118 <UART_SetConfig+0x910>)
 800c0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b0:	e009      	b.n	800c0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b8:	e005      	b.n	800c0c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 81ee 	beq.w	800c4aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d2:	4a12      	ldr	r2, [pc, #72]	@ (800c11c <UART_SetConfig+0x914>)
 800c0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	4413      	add	r3, r2
 800c0ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d305      	bcc.n	800c0fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d910      	bls.n	800c120 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c104:	e1d1      	b.n	800c4aa <UART_SetConfig+0xca2>
 800c106:	bf00      	nop
 800c108:	40011c00 	.word	0x40011c00
 800c10c:	58024400 	.word	0x58024400
 800c110:	58000c00 	.word	0x58000c00
 800c114:	03d09000 	.word	0x03d09000
 800c118:	003d0900 	.word	0x003d0900
 800c11c:	08015300 	.word	0x08015300
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c122:	2200      	movs	r2, #0
 800c124:	60bb      	str	r3, [r7, #8]
 800c126:	60fa      	str	r2, [r7, #12]
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c12c:	4ac0      	ldr	r2, [pc, #768]	@ (800c430 <UART_SetConfig+0xc28>)
 800c12e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c132:	b29b      	uxth	r3, r3
 800c134:	2200      	movs	r2, #0
 800c136:	603b      	str	r3, [r7, #0]
 800c138:	607a      	str	r2, [r7, #4]
 800c13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c13e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c142:	f7f4 fae9 	bl	8000718 <__aeabi_uldivmod>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4610      	mov	r0, r2
 800c14c:	4619      	mov	r1, r3
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	f04f 0300 	mov.w	r3, #0
 800c156:	020b      	lsls	r3, r1, #8
 800c158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c15c:	0202      	lsls	r2, r0, #8
 800c15e:	6979      	ldr	r1, [r7, #20]
 800c160:	6849      	ldr	r1, [r1, #4]
 800c162:	0849      	lsrs	r1, r1, #1
 800c164:	2000      	movs	r0, #0
 800c166:	460c      	mov	r4, r1
 800c168:	4605      	mov	r5, r0
 800c16a:	eb12 0804 	adds.w	r8, r2, r4
 800c16e:	eb43 0905 	adc.w	r9, r3, r5
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	469a      	mov	sl, r3
 800c17a:	4693      	mov	fp, r2
 800c17c:	4652      	mov	r2, sl
 800c17e:	465b      	mov	r3, fp
 800c180:	4640      	mov	r0, r8
 800c182:	4649      	mov	r1, r9
 800c184:	f7f4 fac8 	bl	8000718 <__aeabi_uldivmod>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4613      	mov	r3, r2
 800c18e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c196:	d308      	bcc.n	800c1aa <UART_SetConfig+0x9a2>
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c19e:	d204      	bcs.n	800c1aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1a6:	60da      	str	r2, [r3, #12]
 800c1a8:	e17f      	b.n	800c4aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c1b0:	e17b      	b.n	800c4aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1ba:	f040 80bd 	bne.w	800c338 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c1be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	2b20      	cmp	r3, #32
 800c1c4:	dc48      	bgt.n	800c258 <UART_SetConfig+0xa50>
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	db7b      	blt.n	800c2c2 <UART_SetConfig+0xaba>
 800c1ca:	2b20      	cmp	r3, #32
 800c1cc:	d879      	bhi.n	800c2c2 <UART_SetConfig+0xaba>
 800c1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d4 <UART_SetConfig+0x9cc>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c25f 	.word	0x0800c25f
 800c1d8:	0800c267 	.word	0x0800c267
 800c1dc:	0800c2c3 	.word	0x0800c2c3
 800c1e0:	0800c2c3 	.word	0x0800c2c3
 800c1e4:	0800c26f 	.word	0x0800c26f
 800c1e8:	0800c2c3 	.word	0x0800c2c3
 800c1ec:	0800c2c3 	.word	0x0800c2c3
 800c1f0:	0800c2c3 	.word	0x0800c2c3
 800c1f4:	0800c27f 	.word	0x0800c27f
 800c1f8:	0800c2c3 	.word	0x0800c2c3
 800c1fc:	0800c2c3 	.word	0x0800c2c3
 800c200:	0800c2c3 	.word	0x0800c2c3
 800c204:	0800c2c3 	.word	0x0800c2c3
 800c208:	0800c2c3 	.word	0x0800c2c3
 800c20c:	0800c2c3 	.word	0x0800c2c3
 800c210:	0800c2c3 	.word	0x0800c2c3
 800c214:	0800c28f 	.word	0x0800c28f
 800c218:	0800c2c3 	.word	0x0800c2c3
 800c21c:	0800c2c3 	.word	0x0800c2c3
 800c220:	0800c2c3 	.word	0x0800c2c3
 800c224:	0800c2c3 	.word	0x0800c2c3
 800c228:	0800c2c3 	.word	0x0800c2c3
 800c22c:	0800c2c3 	.word	0x0800c2c3
 800c230:	0800c2c3 	.word	0x0800c2c3
 800c234:	0800c2c3 	.word	0x0800c2c3
 800c238:	0800c2c3 	.word	0x0800c2c3
 800c23c:	0800c2c3 	.word	0x0800c2c3
 800c240:	0800c2c3 	.word	0x0800c2c3
 800c244:	0800c2c3 	.word	0x0800c2c3
 800c248:	0800c2c3 	.word	0x0800c2c3
 800c24c:	0800c2c3 	.word	0x0800c2c3
 800c250:	0800c2c3 	.word	0x0800c2c3
 800c254:	0800c2b5 	.word	0x0800c2b5
 800c258:	2b40      	cmp	r3, #64	@ 0x40
 800c25a:	d02e      	beq.n	800c2ba <UART_SetConfig+0xab2>
 800c25c:	e031      	b.n	800c2c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c25e:	f7fd f8d9 	bl	8009414 <HAL_RCC_GetPCLK1Freq>
 800c262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c264:	e033      	b.n	800c2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c266:	f7fd f8eb 	bl	8009440 <HAL_RCC_GetPCLK2Freq>
 800c26a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c26c:	e02f      	b.n	800c2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c26e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fb10 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c27c:	e027      	b.n	800c2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c27e:	f107 0318 	add.w	r3, r7, #24
 800c282:	4618      	mov	r0, r3
 800c284:	f7fe fc5c 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c28c:	e01f      	b.n	800c2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c28e:	4b69      	ldr	r3, [pc, #420]	@ (800c434 <UART_SetConfig+0xc2c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	2b00      	cmp	r3, #0
 800c298:	d009      	beq.n	800c2ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c29a:	4b66      	ldr	r3, [pc, #408]	@ (800c434 <UART_SetConfig+0xc2c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	08db      	lsrs	r3, r3, #3
 800c2a0:	f003 0303 	and.w	r3, r3, #3
 800c2a4:	4a64      	ldr	r2, [pc, #400]	@ (800c438 <UART_SetConfig+0xc30>)
 800c2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2ac:	e00f      	b.n	800c2ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c2ae:	4b62      	ldr	r3, [pc, #392]	@ (800c438 <UART_SetConfig+0xc30>)
 800c2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2b2:	e00c      	b.n	800c2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2b4:	4b61      	ldr	r3, [pc, #388]	@ (800c43c <UART_SetConfig+0xc34>)
 800c2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2b8:	e009      	b.n	800c2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c0:	e005      	b.n	800c2ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c2cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 80ea 	beq.w	800c4aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2da:	4a55      	ldr	r2, [pc, #340]	@ (800c430 <UART_SetConfig+0xc28>)
 800c2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2e8:	005a      	lsls	r2, r3, #1
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	085b      	lsrs	r3, r3, #1
 800c2f0:	441a      	add	r2, r3
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fe:	2b0f      	cmp	r3, #15
 800c300:	d916      	bls.n	800c330 <UART_SetConfig+0xb28>
 800c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c308:	d212      	bcs.n	800c330 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	f023 030f 	bic.w	r3, r3, #15
 800c312:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c316:	085b      	lsrs	r3, r3, #1
 800c318:	b29b      	uxth	r3, r3
 800c31a:	f003 0307 	and.w	r3, r3, #7
 800c31e:	b29a      	uxth	r2, r3
 800c320:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c322:	4313      	orrs	r3, r2
 800c324:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c32c:	60da      	str	r2, [r3, #12]
 800c32e:	e0bc      	b.n	800c4aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c336:	e0b8      	b.n	800c4aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c338:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c33c:	2b20      	cmp	r3, #32
 800c33e:	dc4b      	bgt.n	800c3d8 <UART_SetConfig+0xbd0>
 800c340:	2b00      	cmp	r3, #0
 800c342:	f2c0 8087 	blt.w	800c454 <UART_SetConfig+0xc4c>
 800c346:	2b20      	cmp	r3, #32
 800c348:	f200 8084 	bhi.w	800c454 <UART_SetConfig+0xc4c>
 800c34c:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <UART_SetConfig+0xb4c>)
 800c34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c352:	bf00      	nop
 800c354:	0800c3df 	.word	0x0800c3df
 800c358:	0800c3e7 	.word	0x0800c3e7
 800c35c:	0800c455 	.word	0x0800c455
 800c360:	0800c455 	.word	0x0800c455
 800c364:	0800c3ef 	.word	0x0800c3ef
 800c368:	0800c455 	.word	0x0800c455
 800c36c:	0800c455 	.word	0x0800c455
 800c370:	0800c455 	.word	0x0800c455
 800c374:	0800c3ff 	.word	0x0800c3ff
 800c378:	0800c455 	.word	0x0800c455
 800c37c:	0800c455 	.word	0x0800c455
 800c380:	0800c455 	.word	0x0800c455
 800c384:	0800c455 	.word	0x0800c455
 800c388:	0800c455 	.word	0x0800c455
 800c38c:	0800c455 	.word	0x0800c455
 800c390:	0800c455 	.word	0x0800c455
 800c394:	0800c40f 	.word	0x0800c40f
 800c398:	0800c455 	.word	0x0800c455
 800c39c:	0800c455 	.word	0x0800c455
 800c3a0:	0800c455 	.word	0x0800c455
 800c3a4:	0800c455 	.word	0x0800c455
 800c3a8:	0800c455 	.word	0x0800c455
 800c3ac:	0800c455 	.word	0x0800c455
 800c3b0:	0800c455 	.word	0x0800c455
 800c3b4:	0800c455 	.word	0x0800c455
 800c3b8:	0800c455 	.word	0x0800c455
 800c3bc:	0800c455 	.word	0x0800c455
 800c3c0:	0800c455 	.word	0x0800c455
 800c3c4:	0800c455 	.word	0x0800c455
 800c3c8:	0800c455 	.word	0x0800c455
 800c3cc:	0800c455 	.word	0x0800c455
 800c3d0:	0800c455 	.word	0x0800c455
 800c3d4:	0800c447 	.word	0x0800c447
 800c3d8:	2b40      	cmp	r3, #64	@ 0x40
 800c3da:	d037      	beq.n	800c44c <UART_SetConfig+0xc44>
 800c3dc:	e03a      	b.n	800c454 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3de:	f7fd f819 	bl	8009414 <HAL_RCC_GetPCLK1Freq>
 800c3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3e4:	e03c      	b.n	800c460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3e6:	f7fd f82b 	bl	8009440 <HAL_RCC_GetPCLK2Freq>
 800c3ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3ec:	e038      	b.n	800c460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fa50 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3fc:	e030      	b.n	800c460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3fe:	f107 0318 	add.w	r3, r7, #24
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe fb9c 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c40c:	e028      	b.n	800c460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c40e:	4b09      	ldr	r3, [pc, #36]	@ (800c434 <UART_SetConfig+0xc2c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 0320 	and.w	r3, r3, #32
 800c416:	2b00      	cmp	r3, #0
 800c418:	d012      	beq.n	800c440 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c41a:	4b06      	ldr	r3, [pc, #24]	@ (800c434 <UART_SetConfig+0xc2c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	08db      	lsrs	r3, r3, #3
 800c420:	f003 0303 	and.w	r3, r3, #3
 800c424:	4a04      	ldr	r2, [pc, #16]	@ (800c438 <UART_SetConfig+0xc30>)
 800c426:	fa22 f303 	lsr.w	r3, r2, r3
 800c42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c42c:	e018      	b.n	800c460 <UART_SetConfig+0xc58>
 800c42e:	bf00      	nop
 800c430:	08015300 	.word	0x08015300
 800c434:	58024400 	.word	0x58024400
 800c438:	03d09000 	.word	0x03d09000
 800c43c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c440:	4b24      	ldr	r3, [pc, #144]	@ (800c4d4 <UART_SetConfig+0xccc>)
 800c442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c444:	e00c      	b.n	800c460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c446:	4b24      	ldr	r3, [pc, #144]	@ (800c4d8 <UART_SetConfig+0xcd0>)
 800c448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c44a:	e009      	b.n	800c460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c44c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c452:	e005      	b.n	800c460 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c454:	2300      	movs	r3, #0
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c45e:	bf00      	nop
    }

    if (pclk != 0U)
 800c460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d021      	beq.n	800c4aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46a:	4a1c      	ldr	r2, [pc, #112]	@ (800c4dc <UART_SetConfig+0xcd4>)
 800c46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c470:	461a      	mov	r2, r3
 800c472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c474:	fbb3 f2f2 	udiv	r2, r3, r2
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	085b      	lsrs	r3, r3, #1
 800c47e:	441a      	add	r2, r3
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	fbb2 f3f3 	udiv	r3, r2, r3
 800c488:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48c:	2b0f      	cmp	r3, #15
 800c48e:	d909      	bls.n	800c4a4 <UART_SetConfig+0xc9c>
 800c490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c496:	d205      	bcs.n	800c4a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60da      	str	r2, [r3, #12]
 800c4a2:	e002      	b.n	800c4aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4c6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3748      	adds	r7, #72	@ 0x48
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d4:	03d09000 	.word	0x03d09000
 800c4d8:	003d0900 	.word	0x003d0900
 800c4dc:	08015300 	.word	0x08015300

0800c4e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ec:	f003 0308 	and.w	r3, r3, #8
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00a      	beq.n	800c50a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c530:	f003 0302 	and.w	r3, r3, #2
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00a      	beq.n	800c54e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	430a      	orrs	r2, r1
 800c54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c552:	f003 0304 	and.w	r3, r3, #4
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00a      	beq.n	800c570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	430a      	orrs	r2, r1
 800c56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c574:	f003 0310 	and.w	r3, r3, #16
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01a      	beq.n	800c5f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5de:	d10a      	bne.n	800c5f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	605a      	str	r2, [r3, #4]
  }
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b098      	sub	sp, #96	@ 0x60
 800c628:	af02      	add	r7, sp, #8
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c634:	f7f6 f8da 	bl	80027ec <HAL_GetTick>
 800c638:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0308 	and.w	r3, r3, #8
 800c644:	2b08      	cmp	r3, #8
 800c646:	d12f      	bne.n	800c6a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c650:	2200      	movs	r2, #0
 800c652:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f88e 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d022      	beq.n	800c6a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66a:	e853 3f00 	ldrex	r3, [r3]
 800c66e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c676:	653b      	str	r3, [r7, #80]	@ 0x50
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c680:	647b      	str	r3, [r7, #68]	@ 0x44
 800c682:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c688:	e841 2300 	strex	r3, r2, [r1]
 800c68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1e6      	bne.n	800c662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e063      	b.n	800c770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d149      	bne.n	800c74a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f857 	bl	800c778 <UART_WaitOnFlagUntilTimeout>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d03c      	beq.n	800c74a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	e853 3f00 	ldrex	r3, [r3]
 800c6dc:	623b      	str	r3, [r7, #32]
   return(result);
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e6      	bne.n	800c6d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3308      	adds	r3, #8
 800c708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	e853 3f00 	ldrex	r3, [r3]
 800c710:	60fb      	str	r3, [r7, #12]
   return(result);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f023 0301 	bic.w	r3, r3, #1
 800c718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c722:	61fa      	str	r2, [r7, #28]
 800c724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c726:	69b9      	ldr	r1, [r7, #24]
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	e841 2300 	strex	r3, r2, [r1]
 800c72e:	617b      	str	r3, [r7, #20]
   return(result);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1e5      	bne.n	800c702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2220      	movs	r2, #32
 800c73a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e012      	b.n	800c770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3758      	adds	r7, #88	@ 0x58
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	603b      	str	r3, [r7, #0]
 800c784:	4613      	mov	r3, r2
 800c786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c788:	e04f      	b.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d04b      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c792:	f7f6 f82b 	bl	80027ec <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	69ba      	ldr	r2, [r7, #24]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d302      	bcc.n	800c7a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e04e      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 0304 	and.w	r3, r3, #4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d037      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b80      	cmp	r3, #128	@ 0x80
 800c7be:	d034      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2b40      	cmp	r3, #64	@ 0x40
 800c7c4:	d031      	beq.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f003 0308 	and.w	r3, r3, #8
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	d110      	bne.n	800c7f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2208      	movs	r2, #8
 800c7da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 f839 	bl	800c854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2208      	movs	r2, #8
 800c7e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e029      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c804:	d111      	bne.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c80e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f000 f81f 	bl	800c854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2220      	movs	r2, #32
 800c81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e00f      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	69da      	ldr	r2, [r3, #28]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	4013      	ands	r3, r2
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	429a      	cmp	r2, r3
 800c838:	bf0c      	ite	eq
 800c83a:	2301      	moveq	r3, #1
 800c83c:	2300      	movne	r3, #0
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	461a      	mov	r2, r3
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	429a      	cmp	r2, r3
 800c846:	d0a0      	beq.n	800c78a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c854:	b480      	push	{r7}
 800c856:	b095      	sub	sp, #84	@ 0x54
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c864:	e853 3f00 	ldrex	r3, [r3]
 800c868:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c87a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c87c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c882:	e841 2300 	strex	r3, r2, [r1]
 800c886:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1e6      	bne.n	800c85c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3308      	adds	r3, #8
 800c894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	e853 3f00 	ldrex	r3, [r3]
 800c89c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c89e:	69fa      	ldr	r2, [r7, #28]
 800c8a0:	4b1e      	ldr	r3, [pc, #120]	@ (800c91c <UART_EndRxTransfer+0xc8>)
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3308      	adds	r3, #8
 800c8ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8b6:	e841 2300 	strex	r3, r2, [r1]
 800c8ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1e5      	bne.n	800c88e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d118      	bne.n	800c8fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	e853 3f00 	ldrex	r3, [r3]
 800c8d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f023 0310 	bic.w	r3, r3, #16
 800c8de:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e8:	61bb      	str	r3, [r7, #24]
 800c8ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ec:	6979      	ldr	r1, [r7, #20]
 800c8ee:	69ba      	ldr	r2, [r7, #24]
 800c8f0:	e841 2300 	strex	r3, r2, [r1]
 800c8f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e6      	bne.n	800c8ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2220      	movs	r2, #32
 800c900:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c910:	bf00      	nop
 800c912:	3754      	adds	r7, #84	@ 0x54
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	effffffe 	.word	0xeffffffe

0800c920 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <HAL_UARTEx_DisableFifoMode+0x16>
 800c932:	2302      	movs	r3, #2
 800c934:	e027      	b.n	800c986 <HAL_UARTEx_DisableFifoMode+0x66>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2224      	movs	r2, #36	@ 0x24
 800c942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f022 0201 	bic.w	r2, r2, #1
 800c95c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c964:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2220      	movs	r2, #32
 800c978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d101      	bne.n	800c9aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	e02d      	b.n	800ca06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2224      	movs	r2, #36	@ 0x24
 800c9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f022 0201 	bic.w	r2, r2, #1
 800c9d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	430a      	orrs	r2, r1
 800c9e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f850 	bl	800ca8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d101      	bne.n	800ca26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca22:	2302      	movs	r3, #2
 800ca24:	e02d      	b.n	800ca82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2224      	movs	r2, #36	@ 0x24
 800ca32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f022 0201 	bic.w	r2, r2, #1
 800ca4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f812 	bl	800ca8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2220      	movs	r2, #32
 800ca74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d108      	bne.n	800caae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800caac:	e031      	b.n	800cb12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800caae:	2310      	movs	r3, #16
 800cab0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cab2:	2310      	movs	r3, #16
 800cab4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	0e5b      	lsrs	r3, r3, #25
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	0f5b      	lsrs	r3, r3, #29
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	f003 0307 	and.w	r3, r3, #7
 800cad4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	7b3a      	ldrb	r2, [r7, #12]
 800cada:	4911      	ldr	r1, [pc, #68]	@ (800cb20 <UARTEx_SetNbDataToProcess+0x94>)
 800cadc:	5c8a      	ldrb	r2, [r1, r2]
 800cade:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cae2:	7b3a      	ldrb	r2, [r7, #12]
 800cae4:	490f      	ldr	r1, [pc, #60]	@ (800cb24 <UARTEx_SetNbDataToProcess+0x98>)
 800cae6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cae8:	fb93 f3f2 	sdiv	r3, r3, r2
 800caec:	b29a      	uxth	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	7b7a      	ldrb	r2, [r7, #13]
 800caf8:	4909      	ldr	r1, [pc, #36]	@ (800cb20 <UARTEx_SetNbDataToProcess+0x94>)
 800cafa:	5c8a      	ldrb	r2, [r1, r2]
 800cafc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb00:	7b7a      	ldrb	r2, [r7, #13]
 800cb02:	4908      	ldr	r1, [pc, #32]	@ (800cb24 <UARTEx_SetNbDataToProcess+0x98>)
 800cb04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb06:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cb12:	bf00      	nop
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	08015318 	.word	0x08015318
 800cb24:	08015320 	.word	0x08015320

0800cb28 <__NVIC_SetPriority>:
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	6039      	str	r1, [r7, #0]
 800cb32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	db0a      	blt.n	800cb52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	490c      	ldr	r1, [pc, #48]	@ (800cb74 <__NVIC_SetPriority+0x4c>)
 800cb42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb46:	0112      	lsls	r2, r2, #4
 800cb48:	b2d2      	uxtb	r2, r2
 800cb4a:	440b      	add	r3, r1
 800cb4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cb50:	e00a      	b.n	800cb68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	4908      	ldr	r1, [pc, #32]	@ (800cb78 <__NVIC_SetPriority+0x50>)
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	f003 030f 	and.w	r3, r3, #15
 800cb5e:	3b04      	subs	r3, #4
 800cb60:	0112      	lsls	r2, r2, #4
 800cb62:	b2d2      	uxtb	r2, r2
 800cb64:	440b      	add	r3, r1
 800cb66:	761a      	strb	r2, [r3, #24]
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	e000e100 	.word	0xe000e100
 800cb78:	e000ed00 	.word	0xe000ed00

0800cb7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cb80:	4b05      	ldr	r3, [pc, #20]	@ (800cb98 <SysTick_Handler+0x1c>)
 800cb82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cb84:	f002 f894 	bl	800ecb0 <xTaskGetSchedulerState>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d001      	beq.n	800cb92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cb8e:	f002 ff8b 	bl	800faa8 <xPortSysTickHandler>
  }
}
 800cb92:	bf00      	nop
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	e000e010 	.word	0xe000e010

0800cb9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cba0:	2100      	movs	r1, #0
 800cba2:	f06f 0004 	mvn.w	r0, #4
 800cba6:	f7ff ffbf 	bl	800cb28 <__NVIC_SetPriority>
#endif
}
 800cbaa:	bf00      	nop
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbb6:	f3ef 8305 	mrs	r3, IPSR
 800cbba:	603b      	str	r3, [r7, #0]
  return(result);
 800cbbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cbc2:	f06f 0305 	mvn.w	r3, #5
 800cbc6:	607b      	str	r3, [r7, #4]
 800cbc8:	e00c      	b.n	800cbe4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cbca:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf4 <osKernelInitialize+0x44>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d105      	bne.n	800cbde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cbd2:	4b08      	ldr	r3, [pc, #32]	@ (800cbf4 <osKernelInitialize+0x44>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	607b      	str	r3, [r7, #4]
 800cbdc:	e002      	b.n	800cbe4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cbde:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbe4:	687b      	ldr	r3, [r7, #4]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	370c      	adds	r7, #12
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	24000440 	.word	0x24000440

0800cbf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbfe:	f3ef 8305 	mrs	r3, IPSR
 800cc02:	603b      	str	r3, [r7, #0]
  return(result);
 800cc04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cc0a:	f06f 0305 	mvn.w	r3, #5
 800cc0e:	607b      	str	r3, [r7, #4]
 800cc10:	e010      	b.n	800cc34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc12:	4b0b      	ldr	r3, [pc, #44]	@ (800cc40 <osKernelStart+0x48>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d109      	bne.n	800cc2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc1a:	f7ff ffbf 	bl	800cb9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc1e:	4b08      	ldr	r3, [pc, #32]	@ (800cc40 <osKernelStart+0x48>)
 800cc20:	2202      	movs	r2, #2
 800cc22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc24:	f001 fb28 	bl	800e278 <vTaskStartScheduler>
      stat = osOK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	607b      	str	r3, [r7, #4]
 800cc2c:	e002      	b.n	800cc34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc34:	687b      	ldr	r3, [r7, #4]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	24000440 	.word	0x24000440

0800cc44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08e      	sub	sp, #56	@ 0x38
 800cc48:	af04      	add	r7, sp, #16
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc50:	2300      	movs	r3, #0
 800cc52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc54:	f3ef 8305 	mrs	r3, IPSR
 800cc58:	617b      	str	r3, [r7, #20]
  return(result);
 800cc5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d17e      	bne.n	800cd5e <osThreadNew+0x11a>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d07b      	beq.n	800cd5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc66:	2380      	movs	r3, #128	@ 0x80
 800cc68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc6a:	2318      	movs	r3, #24
 800cc6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cc72:	f04f 33ff 	mov.w	r3, #4294967295
 800cc76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d045      	beq.n	800cd0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d002      	beq.n	800cc8c <osThreadNew+0x48>
        name = attr->name;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d002      	beq.n	800cc9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d008      	beq.n	800ccb2 <osThreadNew+0x6e>
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	2b38      	cmp	r3, #56	@ 0x38
 800cca4:	d805      	bhi.n	800ccb2 <osThreadNew+0x6e>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <osThreadNew+0x72>
        return (NULL);
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e054      	b.n	800cd60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	089b      	lsrs	r3, r3, #2
 800ccc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00e      	beq.n	800ccec <osThreadNew+0xa8>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	2ba7      	cmp	r3, #167	@ 0xa7
 800ccd4:	d90a      	bls.n	800ccec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d006      	beq.n	800ccec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <osThreadNew+0xa8>
        mem = 1;
 800cce6:	2301      	movs	r3, #1
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	e010      	b.n	800cd0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10c      	bne.n	800cd0e <osThreadNew+0xca>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d108      	bne.n	800cd0e <osThreadNew+0xca>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d104      	bne.n	800cd0e <osThreadNew+0xca>
          mem = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	61bb      	str	r3, [r7, #24]
 800cd08:	e001      	b.n	800cd0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d110      	bne.n	800cd36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd1c:	9202      	str	r2, [sp, #8]
 800cd1e:	9301      	str	r3, [sp, #4]
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	6a3a      	ldr	r2, [r7, #32]
 800cd28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f001 f8b0 	bl	800de90 <xTaskCreateStatic>
 800cd30:	4603      	mov	r3, r0
 800cd32:	613b      	str	r3, [r7, #16]
 800cd34:	e013      	b.n	800cd5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d110      	bne.n	800cd5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	f107 0310 	add.w	r3, r7, #16
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f001 f8fe 	bl	800df50 <xTaskCreate>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d001      	beq.n	800cd5e <osThreadNew+0x11a>
            hTask = NULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd5e:	693b      	ldr	r3, [r7, #16]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3728      	adds	r7, #40	@ 0x28
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd70:	f3ef 8305 	mrs	r3, IPSR
 800cd74:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <osDelay+0x1c>
    stat = osErrorISR;
 800cd7c:	f06f 0305 	mvn.w	r3, #5
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	e007      	b.n	800cd94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 fa3c 	bl	800e20c <vTaskDelay>
    }
  }

  return (stat);
 800cd94:	68fb      	ldr	r3, [r7, #12]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4a07      	ldr	r2, [pc, #28]	@ (800cdcc <vApplicationGetIdleTaskMemory+0x2c>)
 800cdb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	4a06      	ldr	r2, [pc, #24]	@ (800cdd0 <vApplicationGetIdleTaskMemory+0x30>)
 800cdb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2280      	movs	r2, #128	@ 0x80
 800cdbc:	601a      	str	r2, [r3, #0]
}
 800cdbe:	bf00      	nop
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	24000444 	.word	0x24000444
 800cdd0:	240004ec 	.word	0x240004ec

0800cdd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4a07      	ldr	r2, [pc, #28]	@ (800ce00 <vApplicationGetTimerTaskMemory+0x2c>)
 800cde4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	4a06      	ldr	r2, [pc, #24]	@ (800ce04 <vApplicationGetTimerTaskMemory+0x30>)
 800cdea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	240006ec 	.word	0x240006ec
 800ce04:	24000794 	.word	0x24000794

0800ce08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f103 0208 	add.w	r2, r3, #8
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f103 0208 	add.w	r2, r3, #8
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f103 0208 	add.w	r2, r3, #8
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce62:	b480      	push	{r7}
 800ce64:	b085      	sub	sp, #20
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	689a      	ldr	r2, [r3, #8]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	601a      	str	r2, [r3, #0]
}
 800ce9e:	bf00      	nop
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b085      	sub	sp, #20
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec0:	d103      	bne.n	800ceca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	e00c      	b.n	800cee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3308      	adds	r3, #8
 800cece:	60fb      	str	r3, [r7, #12]
 800ced0:	e002      	b.n	800ced8 <vListInsert+0x2e>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d2f6      	bcs.n	800ced2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	685a      	ldr	r2, [r3, #4]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
}
 800cf10:	bf00      	nop
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	6892      	ldr	r2, [r2, #8]
 800cf32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	6852      	ldr	r2, [r2, #4]
 800cf3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d103      	bne.n	800cf50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689a      	ldr	r2, [r3, #8]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	1e5a      	subs	r2, r3, #1
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10b      	bne.n	800cf9c <xQueueGenericReset+0x2c>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	60bb      	str	r3, [r7, #8]
}
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
 800cf9a:	e7fd      	b.n	800cf98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cf9c:	f002 fcf4 	bl	800f988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa8:	68f9      	ldr	r1, [r7, #12]
 800cfaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cfac:	fb01 f303 	mul.w	r3, r1, r3
 800cfb0:	441a      	add	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	68f9      	ldr	r1, [r7, #12]
 800cfd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cfd2:	fb01 f303 	mul.w	r3, r1, r3
 800cfd6:	441a      	add	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	22ff      	movs	r2, #255	@ 0xff
 800cfe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	22ff      	movs	r2, #255	@ 0xff
 800cfe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d114      	bne.n	800d01c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01a      	beq.n	800d030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3310      	adds	r3, #16
 800cffe:	4618      	mov	r0, r3
 800d000:	f001 fc38 	bl	800e874 <xTaskRemoveFromEventList>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d012      	beq.n	800d030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d00a:	4b0d      	ldr	r3, [pc, #52]	@ (800d040 <xQueueGenericReset+0xd0>)
 800d00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	e009      	b.n	800d030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3310      	adds	r3, #16
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff fef1 	bl	800ce08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	3324      	adds	r3, #36	@ 0x24
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff feec 	bl	800ce08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d030:	f002 fcdc 	bl	800f9ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d034:	2301      	movs	r3, #1
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	e000ed04 	.word	0xe000ed04

0800d044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08e      	sub	sp, #56	@ 0x38
 800d048:	af02      	add	r7, sp, #8
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10b      	bne.n	800d070 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	e7fd      	b.n	800d06c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <xQueueGenericCreateStatic+0x56>
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <xQueueGenericCreateStatic+0x5a>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <xQueueGenericCreateStatic+0x5c>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10b      	bne.n	800d0bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	623b      	str	r3, [r7, #32]
}
 800d0b6:	bf00      	nop
 800d0b8:	bf00      	nop
 800d0ba:	e7fd      	b.n	800d0b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <xQueueGenericCreateStatic+0x84>
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <xQueueGenericCreateStatic+0x88>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <xQueueGenericCreateStatic+0x8a>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	61fb      	str	r3, [r7, #28]
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	e7fd      	b.n	800d0e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d0ea:	2350      	movs	r3, #80	@ 0x50
 800d0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2b50      	cmp	r3, #80	@ 0x50
 800d0f2:	d00b      	beq.n	800d10c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	61bb      	str	r3, [r7, #24]
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	e7fd      	b.n	800d108 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d10c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00d      	beq.n	800d134 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4613      	mov	r3, r2
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	68b9      	ldr	r1, [r7, #8]
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 f840 	bl	800d1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3730      	adds	r7, #48	@ 0x30
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b08a      	sub	sp, #40	@ 0x28
 800d142:	af02      	add	r7, sp, #8
 800d144:	60f8      	str	r0, [r7, #12]
 800d146:	60b9      	str	r1, [r7, #8]
 800d148:	4613      	mov	r3, r2
 800d14a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10b      	bne.n	800d16a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	613b      	str	r3, [r7, #16]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	fb02 f303 	mul.w	r3, r2, r3
 800d172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	3350      	adds	r3, #80	@ 0x50
 800d178:	4618      	mov	r0, r3
 800d17a:	f002 fe0b 	bl	800fd94 <pvPortMalloc>
 800d17e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d011      	beq.n	800d1aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3350      	adds	r3, #80	@ 0x50
 800d18e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d198:	79fa      	ldrb	r2, [r7, #7]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 f805 	bl	800d1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3720      	adds	r7, #32
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e002      	b.n	800d1d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	69b8      	ldr	r0, [r7, #24]
 800d1e6:	f7ff fec3 	bl	800cf70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1f2:	bf00      	nop
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b086      	sub	sp, #24
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10b      	bne.n	800d222 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	613b      	str	r3, [r7, #16]
}
 800d21c:	bf00      	nop
 800d21e:	bf00      	nop
 800d220:	e7fd      	b.n	800d21e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	429a      	cmp	r2, r3
 800d228:	d90b      	bls.n	800d242 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	60fb      	str	r3, [r7, #12]
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	e7fd      	b.n	800d23e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d242:	2202      	movs	r2, #2
 800d244:	2100      	movs	r1, #0
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ff79 	bl	800d13e <xQueueGenericCreate>
 800d24c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d25a:	697b      	ldr	r3, [r7, #20]
	}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08e      	sub	sp, #56	@ 0x38
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d272:	2300      	movs	r3, #0
 800d274:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10b      	bne.n	800d298 <xQueueGenericSend+0x34>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d292:	bf00      	nop
 800d294:	bf00      	nop
 800d296:	e7fd      	b.n	800d294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d103      	bne.n	800d2a6 <xQueueGenericSend+0x42>
 800d29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <xQueueGenericSend+0x46>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e000      	b.n	800d2ac <xQueueGenericSend+0x48>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10b      	bne.n	800d2c8 <xQueueGenericSend+0x64>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	e7fd      	b.n	800d2c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	2b02      	cmp	r3, #2
 800d2cc:	d103      	bne.n	800d2d6 <xQueueGenericSend+0x72>
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d101      	bne.n	800d2da <xQueueGenericSend+0x76>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e000      	b.n	800d2dc <xQueueGenericSend+0x78>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10b      	bne.n	800d2f8 <xQueueGenericSend+0x94>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	623b      	str	r3, [r7, #32]
}
 800d2f2:	bf00      	nop
 800d2f4:	bf00      	nop
 800d2f6:	e7fd      	b.n	800d2f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2f8:	f001 fcda 	bl	800ecb0 <xTaskGetSchedulerState>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d102      	bne.n	800d308 <xQueueGenericSend+0xa4>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <xQueueGenericSend+0xa8>
 800d308:	2301      	movs	r3, #1
 800d30a:	e000      	b.n	800d30e <xQueueGenericSend+0xaa>
 800d30c:	2300      	movs	r3, #0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10b      	bne.n	800d32a <xQueueGenericSend+0xc6>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	61fb      	str	r3, [r7, #28]
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop
 800d328:	e7fd      	b.n	800d326 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d32a:	f002 fb2d 	bl	800f988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d336:	429a      	cmp	r2, r3
 800d338:	d302      	bcc.n	800d340 <xQueueGenericSend+0xdc>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d129      	bne.n	800d394 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d346:	f000 fc0a 	bl	800db5e <prvCopyDataToQueue>
 800d34a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d350:	2b00      	cmp	r3, #0
 800d352:	d010      	beq.n	800d376 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d356:	3324      	adds	r3, #36	@ 0x24
 800d358:	4618      	mov	r0, r3
 800d35a:	f001 fa8b 	bl	800e874 <xTaskRemoveFromEventList>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d013      	beq.n	800d38c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d364:	4b3f      	ldr	r3, [pc, #252]	@ (800d464 <xQueueGenericSend+0x200>)
 800d366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	e00a      	b.n	800d38c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d007      	beq.n	800d38c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d37c:	4b39      	ldr	r3, [pc, #228]	@ (800d464 <xQueueGenericSend+0x200>)
 800d37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d38c:	f002 fb2e 	bl	800f9ec <vPortExitCritical>
				return pdPASS;
 800d390:	2301      	movs	r3, #1
 800d392:	e063      	b.n	800d45c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d103      	bne.n	800d3a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d39a:	f002 fb27 	bl	800f9ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e05c      	b.n	800d45c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3a8:	f107 0314 	add.w	r3, r7, #20
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f001 fac7 	bl	800e940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3b6:	f002 fb19 	bl	800f9ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3ba:	f000 ffcd 	bl	800e358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3be:	f002 fae3 	bl	800f988 <vPortEnterCritical>
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3c8:	b25b      	sxtb	r3, r3
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ce:	d103      	bne.n	800d3d8 <xQueueGenericSend+0x174>
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3de:	b25b      	sxtb	r3, r3
 800d3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e4:	d103      	bne.n	800d3ee <xQueueGenericSend+0x18a>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3ee:	f002 fafd 	bl	800f9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3f2:	1d3a      	adds	r2, r7, #4
 800d3f4:	f107 0314 	add.w	r3, r7, #20
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f001 fab6 	bl	800e96c <xTaskCheckForTimeOut>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d124      	bne.n	800d450 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d406:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d408:	f000 fca1 	bl	800dd4e <prvIsQueueFull>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d018      	beq.n	800d444 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	3310      	adds	r3, #16
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f001 f9d8 	bl	800e7d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d422:	f000 fc2c 	bl	800dc7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d426:	f000 ffdd 	bl	800e3e4 <xTaskResumeAll>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f47f af7c 	bne.w	800d32a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d432:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <xQueueGenericSend+0x200>)
 800d434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	e772      	b.n	800d32a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d446:	f000 fc1a 	bl	800dc7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d44a:	f000 ffcb 	bl	800e3e4 <xTaskResumeAll>
 800d44e:	e76c      	b.n	800d32a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d452:	f000 fc14 	bl	800dc7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d456:	f000 ffc5 	bl	800e3e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d45a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3738      	adds	r7, #56	@ 0x38
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b090      	sub	sp, #64	@ 0x40
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d10b      	bne.n	800d498 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d103      	bne.n	800d4a6 <xQueueGenericSendFromISR+0x3e>
 800d49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d101      	bne.n	800d4aa <xQueueGenericSendFromISR+0x42>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e000      	b.n	800d4ac <xQueueGenericSendFromISR+0x44>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10b      	bne.n	800d4c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4c2:	bf00      	nop
 800d4c4:	bf00      	nop
 800d4c6:	e7fd      	b.n	800d4c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d103      	bne.n	800d4d6 <xQueueGenericSendFromISR+0x6e>
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d101      	bne.n	800d4da <xQueueGenericSendFromISR+0x72>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e000      	b.n	800d4dc <xQueueGenericSendFromISR+0x74>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10b      	bne.n	800d4f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	623b      	str	r3, [r7, #32]
}
 800d4f2:	bf00      	nop
 800d4f4:	bf00      	nop
 800d4f6:	e7fd      	b.n	800d4f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4f8:	f002 fc0a 	bl	800fd10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4fc:	f3ef 8211 	mrs	r2, BASEPRI
 800d500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	61fa      	str	r2, [r7, #28]
 800d512:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d514:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d516:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d520:	429a      	cmp	r2, r3
 800d522:	d302      	bcc.n	800d52a <xQueueGenericSendFromISR+0xc2>
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	2b02      	cmp	r3, #2
 800d528:	d12f      	bne.n	800d58a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d52c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d530:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d538:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	68b9      	ldr	r1, [r7, #8]
 800d53e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d540:	f000 fb0d 	bl	800db5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d544:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54c:	d112      	bne.n	800d574 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d552:	2b00      	cmp	r3, #0
 800d554:	d016      	beq.n	800d584 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d558:	3324      	adds	r3, #36	@ 0x24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f001 f98a 	bl	800e874 <xTaskRemoveFromEventList>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00e      	beq.n	800d584 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00b      	beq.n	800d584 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	601a      	str	r2, [r3, #0]
 800d572:	e007      	b.n	800d584 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d574:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d578:	3301      	adds	r3, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	b25a      	sxtb	r2, r3
 800d57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d584:	2301      	movs	r3, #1
 800d586:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d588:	e001      	b.n	800d58e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d590:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d598:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3740      	adds	r7, #64	@ 0x40
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b08e      	sub	sp, #56	@ 0x38
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10b      	bne.n	800d5d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	623b      	str	r3, [r7, #32]
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	e7fd      	b.n	800d5cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	61fb      	str	r3, [r7, #28]
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	e7fd      	b.n	800d5ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d103      	bne.n	800d600 <xQueueGiveFromISR+0x5c>
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <xQueueGiveFromISR+0x60>
 800d600:	2301      	movs	r3, #1
 800d602:	e000      	b.n	800d606 <xQueueGiveFromISR+0x62>
 800d604:	2300      	movs	r3, #0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10b      	bne.n	800d622 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	61bb      	str	r3, [r7, #24]
}
 800d61c:	bf00      	nop
 800d61e:	bf00      	nop
 800d620:	e7fd      	b.n	800d61e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d622:	f002 fb75 	bl	800fd10 <vPortValidateInterruptPriority>
	__asm volatile
 800d626:	f3ef 8211 	mrs	r2, BASEPRI
 800d62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	617a      	str	r2, [r7, #20]
 800d63c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d63e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d640:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d646:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d64c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d64e:	429a      	cmp	r2, r3
 800d650:	d22b      	bcs.n	800d6aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65e:	1c5a      	adds	r2, r3, #1
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d664:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66c:	d112      	bne.n	800d694 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d672:	2b00      	cmp	r3, #0
 800d674:	d016      	beq.n	800d6a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d678:	3324      	adds	r3, #36	@ 0x24
 800d67a:	4618      	mov	r0, r3
 800d67c:	f001 f8fa 	bl	800e874 <xTaskRemoveFromEventList>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00e      	beq.n	800d6a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00b      	beq.n	800d6a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2201      	movs	r2, #1
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	e007      	b.n	800d6a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d698:	3301      	adds	r3, #1
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	b25a      	sxtb	r2, r3
 800d69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a8:	e001      	b.n	800d6ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f383 8811 	msr	BASEPRI, r3
}
 800d6b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3738      	adds	r7, #56	@ 0x38
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08c      	sub	sp, #48	@ 0x30
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10b      	bne.n	800d6f6 <xQueueReceive+0x32>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	623b      	str	r3, [r7, #32]
}
 800d6f0:	bf00      	nop
 800d6f2:	bf00      	nop
 800d6f4:	e7fd      	b.n	800d6f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d103      	bne.n	800d704 <xQueueReceive+0x40>
 800d6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <xQueueReceive+0x44>
 800d704:	2301      	movs	r3, #1
 800d706:	e000      	b.n	800d70a <xQueueReceive+0x46>
 800d708:	2300      	movs	r3, #0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10b      	bne.n	800d726 <xQueueReceive+0x62>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	61fb      	str	r3, [r7, #28]
}
 800d720:	bf00      	nop
 800d722:	bf00      	nop
 800d724:	e7fd      	b.n	800d722 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d726:	f001 fac3 	bl	800ecb0 <xTaskGetSchedulerState>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <xQueueReceive+0x72>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <xQueueReceive+0x76>
 800d736:	2301      	movs	r3, #1
 800d738:	e000      	b.n	800d73c <xQueueReceive+0x78>
 800d73a:	2300      	movs	r3, #0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10b      	bne.n	800d758 <xQueueReceive+0x94>
	__asm volatile
 800d740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	61bb      	str	r3, [r7, #24]
}
 800d752:	bf00      	nop
 800d754:	bf00      	nop
 800d756:	e7fd      	b.n	800d754 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d758:	f002 f916 	bl	800f988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d760:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d764:	2b00      	cmp	r3, #0
 800d766:	d01f      	beq.n	800d7a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d768:	68b9      	ldr	r1, [r7, #8]
 800d76a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d76c:	f000 fa61 	bl	800dc32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d772:	1e5a      	subs	r2, r3, #1
 800d774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d776:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00f      	beq.n	800d7a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d782:	3310      	adds	r3, #16
 800d784:	4618      	mov	r0, r3
 800d786:	f001 f875 	bl	800e874 <xTaskRemoveFromEventList>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d790:	4b3c      	ldr	r3, [pc, #240]	@ (800d884 <xQueueReceive+0x1c0>)
 800d792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7a0:	f002 f924 	bl	800f9ec <vPortExitCritical>
				return pdPASS;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e069      	b.n	800d87c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d103      	bne.n	800d7b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7ae:	f002 f91d 	bl	800f9ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	e062      	b.n	800d87c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7bc:	f107 0310 	add.w	r3, r7, #16
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f001 f8bd 	bl	800e940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7ca:	f002 f90f 	bl	800f9ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7ce:	f000 fdc3 	bl	800e358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7d2:	f002 f8d9 	bl	800f988 <vPortEnterCritical>
 800d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7dc:	b25b      	sxtb	r3, r3
 800d7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e2:	d103      	bne.n	800d7ec <xQueueReceive+0x128>
 800d7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7f2:	b25b      	sxtb	r3, r3
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f8:	d103      	bne.n	800d802 <xQueueReceive+0x13e>
 800d7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d802:	f002 f8f3 	bl	800f9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d806:	1d3a      	adds	r2, r7, #4
 800d808:	f107 0310 	add.w	r3, r7, #16
 800d80c:	4611      	mov	r1, r2
 800d80e:	4618      	mov	r0, r3
 800d810:	f001 f8ac 	bl	800e96c <xTaskCheckForTimeOut>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d123      	bne.n	800d862 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d81c:	f000 fa81 	bl	800dd22 <prvIsQueueEmpty>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d017      	beq.n	800d856 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d828:	3324      	adds	r3, #36	@ 0x24
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 ffce 	bl	800e7d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d836:	f000 fa22 	bl	800dc7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d83a:	f000 fdd3 	bl	800e3e4 <xTaskResumeAll>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d189      	bne.n	800d758 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d844:	4b0f      	ldr	r3, [pc, #60]	@ (800d884 <xQueueReceive+0x1c0>)
 800d846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	e780      	b.n	800d758 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d858:	f000 fa11 	bl	800dc7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d85c:	f000 fdc2 	bl	800e3e4 <xTaskResumeAll>
 800d860:	e77a      	b.n	800d758 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d864:	f000 fa0b 	bl	800dc7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d868:	f000 fdbc 	bl	800e3e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d86c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d86e:	f000 fa58 	bl	800dd22 <prvIsQueueEmpty>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	f43f af6f 	beq.w	800d758 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d87a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3730      	adds	r7, #48	@ 0x30
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	e000ed04 	.word	0xe000ed04

0800d888 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08e      	sub	sp, #56	@ 0x38
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d892:	2300      	movs	r3, #0
 800d894:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d89a:	2300      	movs	r3, #0
 800d89c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	623b      	str	r3, [r7, #32]
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	e7fd      	b.n	800d8b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00b      	beq.n	800d8dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	61fb      	str	r3, [r7, #28]
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	e7fd      	b.n	800d8d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8dc:	f001 f9e8 	bl	800ecb0 <xTaskGetSchedulerState>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d102      	bne.n	800d8ec <xQueueSemaphoreTake+0x64>
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d101      	bne.n	800d8f0 <xQueueSemaphoreTake+0x68>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e000      	b.n	800d8f2 <xQueueSemaphoreTake+0x6a>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10b      	bne.n	800d90e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	61bb      	str	r3, [r7, #24]
}
 800d908:	bf00      	nop
 800d90a:	bf00      	nop
 800d90c:	e7fd      	b.n	800d90a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d90e:	f002 f83b 	bl	800f988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d916:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d024      	beq.n	800d968 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d920:	1e5a      	subs	r2, r3, #1
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d104      	bne.n	800d938 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d92e:	f001 fb39 	bl	800efa4 <pvTaskIncrementMutexHeldCount>
 800d932:	4602      	mov	r2, r0
 800d934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d936:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00f      	beq.n	800d960 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d942:	3310      	adds	r3, #16
 800d944:	4618      	mov	r0, r3
 800d946:	f000 ff95 	bl	800e874 <xTaskRemoveFromEventList>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d007      	beq.n	800d960 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d950:	4b54      	ldr	r3, [pc, #336]	@ (800daa4 <xQueueSemaphoreTake+0x21c>)
 800d952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d956:	601a      	str	r2, [r3, #0]
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d960:	f002 f844 	bl	800f9ec <vPortExitCritical>
				return pdPASS;
 800d964:	2301      	movs	r3, #1
 800d966:	e098      	b.n	800da9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d112      	bne.n	800d994 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00b      	beq.n	800d98c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	617b      	str	r3, [r7, #20]
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d98c:	f002 f82e 	bl	800f9ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d990:	2300      	movs	r3, #0
 800d992:	e082      	b.n	800da9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 ffce 	bl	800e940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9a8:	f002 f820 	bl	800f9ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ac:	f000 fcd4 	bl	800e358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9b0:	f001 ffea 	bl	800f988 <vPortEnterCritical>
 800d9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9ba:	b25b      	sxtb	r3, r3
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d103      	bne.n	800d9ca <xQueueSemaphoreTake+0x142>
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9d0:	b25b      	sxtb	r3, r3
 800d9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d6:	d103      	bne.n	800d9e0 <xQueueSemaphoreTake+0x158>
 800d9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9e0:	f002 f804 	bl	800f9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9e4:	463a      	mov	r2, r7
 800d9e6:	f107 030c 	add.w	r3, r7, #12
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 ffbd 	bl	800e96c <xTaskCheckForTimeOut>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d132      	bne.n	800da5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9fa:	f000 f992 	bl	800dd22 <prvIsQueueEmpty>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d026      	beq.n	800da52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d109      	bne.n	800da20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800da0c:	f001 ffbc 	bl	800f988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	4618      	mov	r0, r3
 800da16:	f001 f969 	bl	800ecec <xTaskPriorityInherit>
 800da1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800da1c:	f001 ffe6 	bl	800f9ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da22:	3324      	adds	r3, #36	@ 0x24
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	4611      	mov	r1, r2
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 fed1 	bl	800e7d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da30:	f000 f925 	bl	800dc7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da34:	f000 fcd6 	bl	800e3e4 <xTaskResumeAll>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f47f af67 	bne.w	800d90e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800da40:	4b18      	ldr	r3, [pc, #96]	@ (800daa4 <xQueueSemaphoreTake+0x21c>)
 800da42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	e75d      	b.n	800d90e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da54:	f000 f913 	bl	800dc7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da58:	f000 fcc4 	bl	800e3e4 <xTaskResumeAll>
 800da5c:	e757      	b.n	800d90e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da60:	f000 f90d 	bl	800dc7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da64:	f000 fcbe 	bl	800e3e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da6a:	f000 f95a 	bl	800dd22 <prvIsQueueEmpty>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	f43f af4c 	beq.w	800d90e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00d      	beq.n	800da98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800da7c:	f001 ff84 	bl	800f988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da82:	f000 f854 	bl	800db2e <prvGetDisinheritPriorityAfterTimeout>
 800da86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da8e:	4618      	mov	r0, r3
 800da90:	f001 fa04 	bl	800ee9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da94:	f001 ffaa 	bl	800f9ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3738      	adds	r7, #56	@ 0x38
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	e000ed04 	.word	0xe000ed04

0800daa8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10b      	bne.n	800dace <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	60bb      	str	r3, [r7, #8]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800dace:	f001 ff5b 	bl	800f988 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dad6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800dad8:	f001 ff88 	bl	800f9ec <vPortExitCritical>

	return uxReturn;
 800dadc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10b      	bne.n	800db10 <vQueueDelete+0x2a>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafc:	f383 8811 	msr	BASEPRI, r3
 800db00:	f3bf 8f6f 	isb	sy
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	60bb      	str	r3, [r7, #8]
}
 800db0a:	bf00      	nop
 800db0c:	bf00      	nop
 800db0e:	e7fd      	b.n	800db0c <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f000 f95f 	bl	800ddd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d102      	bne.n	800db26 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f002 fa05 	bl	800ff30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800db26:	bf00      	nop
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db2e:	b480      	push	{r7}
 800db30:	b085      	sub	sp, #20
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d006      	beq.n	800db4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800db48:	60fb      	str	r3, [r7, #12]
 800db4a:	e001      	b.n	800db50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db50:	68fb      	ldr	r3, [r7, #12]
	}
 800db52:	4618      	mov	r0, r3
 800db54:	3714      	adds	r7, #20
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b086      	sub	sp, #24
 800db62:	af00      	add	r7, sp, #0
 800db64:	60f8      	str	r0, [r7, #12]
 800db66:	60b9      	str	r1, [r7, #8]
 800db68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db6a:	2300      	movs	r3, #0
 800db6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10d      	bne.n	800db98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d14d      	bne.n	800dc20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	4618      	mov	r0, r3
 800db8a:	f001 f917 	bl	800edbc <xTaskPriorityDisinherit>
 800db8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	609a      	str	r2, [r3, #8]
 800db96:	e043      	b.n	800dc20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d119      	bne.n	800dbd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6858      	ldr	r0, [r3, #4]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba6:	461a      	mov	r2, r3
 800dba8:	68b9      	ldr	r1, [r7, #8]
 800dbaa:	f003 fd92 	bl	80116d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb6:	441a      	add	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d32b      	bcc.n	800dc20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	605a      	str	r2, [r3, #4]
 800dbd0:	e026      	b.n	800dc20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68d8      	ldr	r0, [r3, #12]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbda:	461a      	mov	r2, r3
 800dbdc:	68b9      	ldr	r1, [r7, #8]
 800dbde:	f003 fd78 	bl	80116d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	68da      	ldr	r2, [r3, #12]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbea:	425b      	negs	r3, r3
 800dbec:	441a      	add	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68da      	ldr	r2, [r3, #12]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d207      	bcs.n	800dc0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	689a      	ldr	r2, [r3, #8]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc06:	425b      	negs	r3, r3
 800dc08:	441a      	add	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	d105      	bne.n	800dc20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc28:	697b      	ldr	r3, [r7, #20]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b082      	sub	sp, #8
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d018      	beq.n	800dc76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc4c:	441a      	add	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68da      	ldr	r2, [r3, #12]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d303      	bcc.n	800dc66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68d9      	ldr	r1, [r3, #12]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc6e:	461a      	mov	r2, r3
 800dc70:	6838      	ldr	r0, [r7, #0]
 800dc72:	f003 fd2e 	bl	80116d2 <memcpy>
	}
}
 800dc76:	bf00      	nop
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc86:	f001 fe7f 	bl	800f988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc92:	e011      	b.n	800dcb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d012      	beq.n	800dcc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	3324      	adds	r3, #36	@ 0x24
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fde7 	bl	800e874 <xTaskRemoveFromEventList>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dcac:	f000 fec2 	bl	800ea34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dce9      	bgt.n	800dc94 <prvUnlockQueue+0x16>
 800dcc0:	e000      	b.n	800dcc4 <prvUnlockQueue+0x46>
					break;
 800dcc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	22ff      	movs	r2, #255	@ 0xff
 800dcc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dccc:	f001 fe8e 	bl	800f9ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dcd0:	f001 fe5a 	bl	800f988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dcdc:	e011      	b.n	800dd02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d012      	beq.n	800dd0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	3310      	adds	r3, #16
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 fdc2 	bl	800e874 <xTaskRemoveFromEventList>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dcf6:	f000 fe9d 	bl	800ea34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dcfa:	7bbb      	ldrb	r3, [r7, #14]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	dce9      	bgt.n	800dcde <prvUnlockQueue+0x60>
 800dd0a:	e000      	b.n	800dd0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	22ff      	movs	r2, #255	@ 0xff
 800dd12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd16:	f001 fe69 	bl	800f9ec <vPortExitCritical>
}
 800dd1a:	bf00      	nop
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd2a:	f001 fe2d 	bl	800f988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d102      	bne.n	800dd3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd36:	2301      	movs	r3, #1
 800dd38:	60fb      	str	r3, [r7, #12]
 800dd3a:	e001      	b.n	800dd40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd40:	f001 fe54 	bl	800f9ec <vPortExitCritical>

	return xReturn;
 800dd44:	68fb      	ldr	r3, [r7, #12]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd56:	f001 fe17 	bl	800f988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d102      	bne.n	800dd6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd66:	2301      	movs	r3, #1
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	e001      	b.n	800dd70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd70:	f001 fe3c 	bl	800f9ec <vPortExitCritical>

	return xReturn;
 800dd74:	68fb      	ldr	r3, [r7, #12]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60fb      	str	r3, [r7, #12]
 800dd8e:	e014      	b.n	800ddba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd90:	4a0f      	ldr	r2, [pc, #60]	@ (800ddd0 <vQueueAddToRegistry+0x50>)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10b      	bne.n	800ddb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd9c:	490c      	ldr	r1, [pc, #48]	@ (800ddd0 <vQueueAddToRegistry+0x50>)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dda6:	4a0a      	ldr	r2, [pc, #40]	@ (800ddd0 <vQueueAddToRegistry+0x50>)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	4413      	add	r3, r2
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ddb2:	e006      	b.n	800ddc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	60fb      	str	r3, [r7, #12]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2b07      	cmp	r3, #7
 800ddbe:	d9e7      	bls.n	800dd90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	24000b94 	.word	0x24000b94

0800ddd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dddc:	2300      	movs	r3, #0
 800ddde:	60fb      	str	r3, [r7, #12]
 800dde0:	e016      	b.n	800de10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dde2:	4a10      	ldr	r2, [pc, #64]	@ (800de24 <vQueueUnregisterQueue+0x50>)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	4413      	add	r3, r2
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d10b      	bne.n	800de0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ddf2:	4a0c      	ldr	r2, [pc, #48]	@ (800de24 <vQueueUnregisterQueue+0x50>)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ddfc:	4a09      	ldr	r2, [pc, #36]	@ (800de24 <vQueueUnregisterQueue+0x50>)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	00db      	lsls	r3, r3, #3
 800de02:	4413      	add	r3, r2
 800de04:	2200      	movs	r2, #0
 800de06:	605a      	str	r2, [r3, #4]
				break;
 800de08:	e006      	b.n	800de18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	3301      	adds	r3, #1
 800de0e:	60fb      	str	r3, [r7, #12]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b07      	cmp	r3, #7
 800de14:	d9e5      	bls.n	800dde2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800de16:	bf00      	nop
 800de18:	bf00      	nop
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	24000b94 	.word	0x24000b94

0800de28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de38:	f001 fda6 	bl	800f988 <vPortEnterCritical>
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de42:	b25b      	sxtb	r3, r3
 800de44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de48:	d103      	bne.n	800de52 <vQueueWaitForMessageRestricted+0x2a>
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de58:	b25b      	sxtb	r3, r3
 800de5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5e:	d103      	bne.n	800de68 <vQueueWaitForMessageRestricted+0x40>
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	2200      	movs	r2, #0
 800de64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de68:	f001 fdc0 	bl	800f9ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	3324      	adds	r3, #36	@ 0x24
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	68b9      	ldr	r1, [r7, #8]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f000 fccd 	bl	800e81c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de82:	6978      	ldr	r0, [r7, #20]
 800de84:	f7ff fefb 	bl	800dc7e <prvUnlockQueue>
	}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08e      	sub	sp, #56	@ 0x38
 800de94:	af04      	add	r7, sp, #16
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10b      	bne.n	800debc <xTaskCreateStatic+0x2c>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	623b      	str	r3, [r7, #32]
}
 800deb6:	bf00      	nop
 800deb8:	bf00      	nop
 800deba:	e7fd      	b.n	800deb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800debc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10b      	bne.n	800deda <xTaskCreateStatic+0x4a>
	__asm volatile
 800dec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	61fb      	str	r3, [r7, #28]
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop
 800ded8:	e7fd      	b.n	800ded6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800deda:	23a8      	movs	r3, #168	@ 0xa8
 800dedc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2ba8      	cmp	r3, #168	@ 0xa8
 800dee2:	d00b      	beq.n	800defc <xTaskCreateStatic+0x6c>
	__asm volatile
 800dee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	61bb      	str	r3, [r7, #24]
}
 800def6:	bf00      	nop
 800def8:	bf00      	nop
 800defa:	e7fd      	b.n	800def8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800defc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800defe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df00:	2b00      	cmp	r3, #0
 800df02:	d01e      	beq.n	800df42 <xTaskCreateStatic+0xb2>
 800df04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df06:	2b00      	cmp	r3, #0
 800df08:	d01b      	beq.n	800df42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df16:	2202      	movs	r2, #2
 800df18:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df1c:	2300      	movs	r3, #0
 800df1e:	9303      	str	r3, [sp, #12]
 800df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	f107 0314 	add.w	r3, r7, #20
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f000 f851 	bl	800dfdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df3c:	f000 f8f6 	bl	800e12c <prvAddNewTaskToReadyList>
 800df40:	e001      	b.n	800df46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df42:	2300      	movs	r3, #0
 800df44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df46:	697b      	ldr	r3, [r7, #20]
	}
 800df48:	4618      	mov	r0, r3
 800df4a:	3728      	adds	r7, #40	@ 0x28
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	@ 0x30
 800df54:	af04      	add	r7, sp, #16
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	4613      	mov	r3, r2
 800df5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df60:	88fb      	ldrh	r3, [r7, #6]
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4618      	mov	r0, r3
 800df66:	f001 ff15 	bl	800fd94 <pvPortMalloc>
 800df6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df72:	20a8      	movs	r0, #168	@ 0xa8
 800df74:	f001 ff0e 	bl	800fd94 <pvPortMalloc>
 800df78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d003      	beq.n	800df88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	631a      	str	r2, [r3, #48]	@ 0x30
 800df86:	e005      	b.n	800df94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df88:	6978      	ldr	r0, [r7, #20]
 800df8a:	f001 ffd1 	bl	800ff30 <vPortFree>
 800df8e:	e001      	b.n	800df94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df90:	2300      	movs	r3, #0
 800df92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d017      	beq.n	800dfca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfa2:	88fa      	ldrh	r2, [r7, #6]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9303      	str	r3, [sp, #12]
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	9302      	str	r3, [sp, #8]
 800dfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfae:	9301      	str	r3, [sp, #4]
 800dfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f000 f80f 	bl	800dfdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfbe:	69f8      	ldr	r0, [r7, #28]
 800dfc0:	f000 f8b4 	bl	800e12c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	61bb      	str	r3, [r7, #24]
 800dfc8:	e002      	b.n	800dfd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfca:	f04f 33ff 	mov.w	r3, #4294967295
 800dfce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfd0:	69bb      	ldr	r3, [r7, #24]
	}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3720      	adds	r7, #32
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
	...

0800dfdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b088      	sub	sp, #32
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	461a      	mov	r2, r3
 800dff4:	21a5      	movs	r1, #165	@ 0xa5
 800dff6:	f003 fa43 	bl	8011480 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e004:	440b      	add	r3, r1
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4413      	add	r3, r2
 800e00a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	f023 0307 	bic.w	r3, r3, #7
 800e012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	f003 0307 	and.w	r3, r3, #7
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00b      	beq.n	800e036 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	617b      	str	r3, [r7, #20]
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	e7fd      	b.n	800e032 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01f      	beq.n	800e07c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e03c:	2300      	movs	r3, #0
 800e03e:	61fb      	str	r3, [r7, #28]
 800e040:	e012      	b.n	800e068 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	4413      	add	r3, r2
 800e048:	7819      	ldrb	r1, [r3, #0]
 800e04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	4413      	add	r3, r2
 800e050:	3334      	adds	r3, #52	@ 0x34
 800e052:	460a      	mov	r2, r1
 800e054:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e056:	68ba      	ldr	r2, [r7, #8]
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	4413      	add	r3, r2
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	3301      	adds	r3, #1
 800e066:	61fb      	str	r3, [r7, #28]
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	2b0f      	cmp	r3, #15
 800e06c:	d9e9      	bls.n	800e042 <prvInitialiseNewTask+0x66>
 800e06e:	e000      	b.n	800e072 <prvInitialiseNewTask+0x96>
			{
				break;
 800e070:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e07a:	e003      	b.n	800e084 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e086:	2b37      	cmp	r3, #55	@ 0x37
 800e088:	d901      	bls.n	800e08e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e08a:	2337      	movs	r3, #55	@ 0x37
 800e08c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e092:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e098:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09c:	2200      	movs	r2, #0
 800e09e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fe fecf 	bl	800ce48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ac:	3318      	adds	r3, #24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fe feca 	bl	800ce48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	3354      	adds	r3, #84	@ 0x54
 800e0de:	224c      	movs	r2, #76	@ 0x4c
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f003 f9cc 	bl	8011480 <memset>
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ea:	4a0d      	ldr	r2, [pc, #52]	@ (800e120 <prvInitialiseNewTask+0x144>)
 800e0ec:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	4a0c      	ldr	r2, [pc, #48]	@ (800e124 <prvInitialiseNewTask+0x148>)
 800e0f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f6:	4a0c      	ldr	r2, [pc, #48]	@ (800e128 <prvInitialiseNewTask+0x14c>)
 800e0f8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	68f9      	ldr	r1, [r7, #12]
 800e0fe:	69b8      	ldr	r0, [r7, #24]
 800e100:	f001 fb12 	bl	800f728 <pxPortInitialiseStack>
 800e104:	4602      	mov	r2, r0
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e116:	bf00      	nop
 800e118:	3720      	adds	r7, #32
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	24004e40 	.word	0x24004e40
 800e124:	24004ea8 	.word	0x24004ea8
 800e128:	24004f10 	.word	0x24004f10

0800e12c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e134:	f001 fc28 	bl	800f988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e138:	4b2d      	ldr	r3, [pc, #180]	@ (800e1f0 <prvAddNewTaskToReadyList+0xc4>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	4a2c      	ldr	r2, [pc, #176]	@ (800e1f0 <prvAddNewTaskToReadyList+0xc4>)
 800e140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e142:	4b2c      	ldr	r3, [pc, #176]	@ (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d109      	bne.n	800e15e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e14a:	4a2a      	ldr	r2, [pc, #168]	@ (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e150:	4b27      	ldr	r3, [pc, #156]	@ (800e1f0 <prvAddNewTaskToReadyList+0xc4>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d110      	bne.n	800e17a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e158:	f000 fce6 	bl	800eb28 <prvInitialiseTaskLists>
 800e15c:	e00d      	b.n	800e17a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e15e:	4b26      	ldr	r3, [pc, #152]	@ (800e1f8 <prvAddNewTaskToReadyList+0xcc>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d109      	bne.n	800e17a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e166:	4b23      	ldr	r3, [pc, #140]	@ (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e170:	429a      	cmp	r2, r3
 800e172:	d802      	bhi.n	800e17a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e174:	4a1f      	ldr	r2, [pc, #124]	@ (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e17a:	4b20      	ldr	r3, [pc, #128]	@ (800e1fc <prvAddNewTaskToReadyList+0xd0>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	3301      	adds	r3, #1
 800e180:	4a1e      	ldr	r2, [pc, #120]	@ (800e1fc <prvAddNewTaskToReadyList+0xd0>)
 800e182:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e184:	4b1d      	ldr	r3, [pc, #116]	@ (800e1fc <prvAddNewTaskToReadyList+0xd0>)
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e190:	4b1b      	ldr	r3, [pc, #108]	@ (800e200 <prvAddNewTaskToReadyList+0xd4>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	429a      	cmp	r2, r3
 800e196:	d903      	bls.n	800e1a0 <prvAddNewTaskToReadyList+0x74>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19c:	4a18      	ldr	r2, [pc, #96]	@ (800e200 <prvAddNewTaskToReadyList+0xd4>)
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a15      	ldr	r2, [pc, #84]	@ (800e204 <prvAddNewTaskToReadyList+0xd8>)
 800e1ae:	441a      	add	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7fe fe53 	bl	800ce62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1bc:	f001 fc16 	bl	800f9ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f8 <prvAddNewTaskToReadyList+0xcc>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00e      	beq.n	800e1e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d207      	bcs.n	800e1e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e208 <prvAddNewTaskToReadyList+0xdc>)
 800e1d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	240010a8 	.word	0x240010a8
 800e1f4:	24000bd4 	.word	0x24000bd4
 800e1f8:	240010b4 	.word	0x240010b4
 800e1fc:	240010c4 	.word	0x240010c4
 800e200:	240010b0 	.word	0x240010b0
 800e204:	24000bd8 	.word	0x24000bd8
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e214:	2300      	movs	r3, #0
 800e216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d018      	beq.n	800e250 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e21e:	4b14      	ldr	r3, [pc, #80]	@ (800e270 <vTaskDelay+0x64>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00b      	beq.n	800e23e <vTaskDelay+0x32>
	__asm volatile
 800e226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	60bb      	str	r3, [r7, #8]
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	e7fd      	b.n	800e23a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e23e:	f000 f88b 	bl	800e358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e242:	2100      	movs	r1, #0
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 fec1 	bl	800efcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e24a:	f000 f8cb 	bl	800e3e4 <xTaskResumeAll>
 800e24e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d107      	bne.n	800e266 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e256:	4b07      	ldr	r3, [pc, #28]	@ (800e274 <vTaskDelay+0x68>)
 800e258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e266:	bf00      	nop
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	240010d0 	.word	0x240010d0
 800e274:	e000ed04 	.word	0xe000ed04

0800e278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b08a      	sub	sp, #40	@ 0x28
 800e27c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e282:	2300      	movs	r3, #0
 800e284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e286:	463a      	mov	r2, r7
 800e288:	1d39      	adds	r1, r7, #4
 800e28a:	f107 0308 	add.w	r3, r7, #8
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fe fd86 	bl	800cda0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	9202      	str	r2, [sp, #8]
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	2300      	movs	r3, #0
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	460a      	mov	r2, r1
 800e2a6:	4924      	ldr	r1, [pc, #144]	@ (800e338 <vTaskStartScheduler+0xc0>)
 800e2a8:	4824      	ldr	r0, [pc, #144]	@ (800e33c <vTaskStartScheduler+0xc4>)
 800e2aa:	f7ff fdf1 	bl	800de90 <xTaskCreateStatic>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4a23      	ldr	r2, [pc, #140]	@ (800e340 <vTaskStartScheduler+0xc8>)
 800e2b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2b4:	4b22      	ldr	r3, [pc, #136]	@ (800e340 <vTaskStartScheduler+0xc8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	617b      	str	r3, [r7, #20]
 800e2c0:	e001      	b.n	800e2c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d102      	bne.n	800e2d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2cc:	f000 fed2 	bl	800f074 <xTimerCreateTimerTask>
 800e2d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d11b      	bne.n	800e310 <vTaskStartScheduler+0x98>
	__asm volatile
 800e2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	613b      	str	r3, [r7, #16]
}
 800e2ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2ec:	4b15      	ldr	r3, [pc, #84]	@ (800e344 <vTaskStartScheduler+0xcc>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3354      	adds	r3, #84	@ 0x54
 800e2f2:	4a15      	ldr	r2, [pc, #84]	@ (800e348 <vTaskStartScheduler+0xd0>)
 800e2f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2f6:	4b15      	ldr	r3, [pc, #84]	@ (800e34c <vTaskStartScheduler+0xd4>)
 800e2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2fe:	4b14      	ldr	r3, [pc, #80]	@ (800e350 <vTaskStartScheduler+0xd8>)
 800e300:	2201      	movs	r2, #1
 800e302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e304:	4b13      	ldr	r3, [pc, #76]	@ (800e354 <vTaskStartScheduler+0xdc>)
 800e306:	2200      	movs	r2, #0
 800e308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e30a:	f001 fa99 	bl	800f840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e30e:	e00f      	b.n	800e330 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e316:	d10b      	bne.n	800e330 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	60fb      	str	r3, [r7, #12]
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	e7fd      	b.n	800e32c <vTaskStartScheduler+0xb4>
}
 800e330:	bf00      	nop
 800e332:	3718      	adds	r7, #24
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	0801527c 	.word	0x0801527c
 800e33c:	0800ea4d 	.word	0x0800ea4d
 800e340:	240010cc 	.word	0x240010cc
 800e344:	24000bd4 	.word	0x24000bd4
 800e348:	24000020 	.word	0x24000020
 800e34c:	240010c8 	.word	0x240010c8
 800e350:	240010b4 	.word	0x240010b4
 800e354:	240010ac 	.word	0x240010ac

0800e358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e358:	b480      	push	{r7}
 800e35a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e35c:	4b04      	ldr	r3, [pc, #16]	@ (800e370 <vTaskSuspendAll+0x18>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3301      	adds	r3, #1
 800e362:	4a03      	ldr	r2, [pc, #12]	@ (800e370 <vTaskSuspendAll+0x18>)
 800e364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e366:	bf00      	nop
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	240010d0 	.word	0x240010d0

0800e374 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800e37a:	2300      	movs	r3, #0
 800e37c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800e37e:	4b14      	ldr	r3, [pc, #80]	@ (800e3d0 <prvGetExpectedIdleTime+0x5c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800e386:	2301      	movs	r3, #1
 800e388:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e38a:	4b12      	ldr	r3, [pc, #72]	@ (800e3d4 <prvGetExpectedIdleTime+0x60>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e390:	2b00      	cmp	r3, #0
 800e392:	d002      	beq.n	800e39a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	607b      	str	r3, [r7, #4]
 800e398:	e012      	b.n	800e3c0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e39a:	4b0f      	ldr	r3, [pc, #60]	@ (800e3d8 <prvGetExpectedIdleTime+0x64>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d902      	bls.n	800e3a8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	607b      	str	r3, [r7, #4]
 800e3a6:	e00b      	b.n	800e3c0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d002      	beq.n	800e3b4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	607b      	str	r3, [r7, #4]
 800e3b2:	e005      	b.n	800e3c0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e3b4:	4b09      	ldr	r3, [pc, #36]	@ (800e3dc <prvGetExpectedIdleTime+0x68>)
 800e3b6:	681a      	ldr	r2, [r3, #0]
 800e3b8:	4b09      	ldr	r3, [pc, #36]	@ (800e3e0 <prvGetExpectedIdleTime+0x6c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800e3c0:	687b      	ldr	r3, [r7, #4]
	}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	370c      	adds	r7, #12
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	240010b0 	.word	0x240010b0
 800e3d4:	24000bd4 	.word	0x24000bd4
 800e3d8:	24000bd8 	.word	0x24000bd8
 800e3dc:	240010c8 	.word	0x240010c8
 800e3e0:	240010ac 	.word	0x240010ac

0800e3e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3f2:	4b42      	ldr	r3, [pc, #264]	@ (800e4fc <xTaskResumeAll+0x118>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10b      	bne.n	800e412 <xTaskResumeAll+0x2e>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	603b      	str	r3, [r7, #0]
}
 800e40c:	bf00      	nop
 800e40e:	bf00      	nop
 800e410:	e7fd      	b.n	800e40e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e412:	f001 fab9 	bl	800f988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e416:	4b39      	ldr	r3, [pc, #228]	@ (800e4fc <xTaskResumeAll+0x118>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	4a37      	ldr	r2, [pc, #220]	@ (800e4fc <xTaskResumeAll+0x118>)
 800e41e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e420:	4b36      	ldr	r3, [pc, #216]	@ (800e4fc <xTaskResumeAll+0x118>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d162      	bne.n	800e4ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e428:	4b35      	ldr	r3, [pc, #212]	@ (800e500 <xTaskResumeAll+0x11c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d05e      	beq.n	800e4ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e430:	e02f      	b.n	800e492 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e432:	4b34      	ldr	r3, [pc, #208]	@ (800e504 <xTaskResumeAll+0x120>)
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3318      	adds	r3, #24
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fd6c 	bl	800cf1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	3304      	adds	r3, #4
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe fd67 	bl	800cf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e452:	4b2d      	ldr	r3, [pc, #180]	@ (800e508 <xTaskResumeAll+0x124>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	429a      	cmp	r2, r3
 800e458:	d903      	bls.n	800e462 <xTaskResumeAll+0x7e>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e45e:	4a2a      	ldr	r2, [pc, #168]	@ (800e508 <xTaskResumeAll+0x124>)
 800e460:	6013      	str	r3, [r2, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4a27      	ldr	r2, [pc, #156]	@ (800e50c <xTaskResumeAll+0x128>)
 800e470:	441a      	add	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3304      	adds	r3, #4
 800e476:	4619      	mov	r1, r3
 800e478:	4610      	mov	r0, r2
 800e47a:	f7fe fcf2 	bl	800ce62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e482:	4b23      	ldr	r3, [pc, #140]	@ (800e510 <xTaskResumeAll+0x12c>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e488:	429a      	cmp	r2, r3
 800e48a:	d302      	bcc.n	800e492 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e48c:	4b21      	ldr	r3, [pc, #132]	@ (800e514 <xTaskResumeAll+0x130>)
 800e48e:	2201      	movs	r2, #1
 800e490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e492:	4b1c      	ldr	r3, [pc, #112]	@ (800e504 <xTaskResumeAll+0x120>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1cb      	bne.n	800e432 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4a0:	f000 fbe6 	bl	800ec70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4a4:	4b1c      	ldr	r3, [pc, #112]	@ (800e518 <xTaskResumeAll+0x134>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d010      	beq.n	800e4d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4b0:	f000 f86e 	bl	800e590 <xTaskIncrementTick>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d002      	beq.n	800e4c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e4ba:	4b16      	ldr	r3, [pc, #88]	@ (800e514 <xTaskResumeAll+0x130>)
 800e4bc:	2201      	movs	r2, #1
 800e4be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1f1      	bne.n	800e4b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e4cc:	4b12      	ldr	r3, [pc, #72]	@ (800e518 <xTaskResumeAll+0x134>)
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4d2:	4b10      	ldr	r3, [pc, #64]	@ (800e514 <xTaskResumeAll+0x130>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d009      	beq.n	800e4ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4de:	4b0f      	ldr	r3, [pc, #60]	@ (800e51c <xTaskResumeAll+0x138>)
 800e4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4e4:	601a      	str	r2, [r3, #0]
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4ee:	f001 fa7d 	bl	800f9ec <vPortExitCritical>

	return xAlreadyYielded;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	240010d0 	.word	0x240010d0
 800e500:	240010a8 	.word	0x240010a8
 800e504:	24001068 	.word	0x24001068
 800e508:	240010b0 	.word	0x240010b0
 800e50c:	24000bd8 	.word	0x24000bd8
 800e510:	24000bd4 	.word	0x24000bd4
 800e514:	240010bc 	.word	0x240010bc
 800e518:	240010b8 	.word	0x240010b8
 800e51c:	e000ed04 	.word	0xe000ed04

0800e520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e526:	4b05      	ldr	r3, [pc, #20]	@ (800e53c <xTaskGetTickCount+0x1c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e52c:	687b      	ldr	r3, [r7, #4]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	370c      	adds	r7, #12
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop
 800e53c:	240010ac 	.word	0x240010ac

0800e540 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e548:	4b0f      	ldr	r3, [pc, #60]	@ (800e588 <vTaskStepTick+0x48>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	441a      	add	r2, r3
 800e550:	4b0e      	ldr	r3, [pc, #56]	@ (800e58c <vTaskStepTick+0x4c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	429a      	cmp	r2, r3
 800e556:	d90b      	bls.n	800e570 <vTaskStepTick+0x30>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	60fb      	str	r3, [r7, #12]
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	e7fd      	b.n	800e56c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e570:	4b05      	ldr	r3, [pc, #20]	@ (800e588 <vTaskStepTick+0x48>)
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4413      	add	r3, r2
 800e578:	4a03      	ldr	r2, [pc, #12]	@ (800e588 <vTaskStepTick+0x48>)
 800e57a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e57c:	bf00      	nop
 800e57e:	3714      	adds	r7, #20
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	240010ac 	.word	0x240010ac
 800e58c:	240010c8 	.word	0x240010c8

0800e590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e596:	2300      	movs	r3, #0
 800e598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e59a:	4b4f      	ldr	r3, [pc, #316]	@ (800e6d8 <xTaskIncrementTick+0x148>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	f040 8090 	bne.w	800e6c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5a4:	4b4d      	ldr	r3, [pc, #308]	@ (800e6dc <xTaskIncrementTick+0x14c>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5ac:	4a4b      	ldr	r2, [pc, #300]	@ (800e6dc <xTaskIncrementTick+0x14c>)
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d121      	bne.n	800e5fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5b8:	4b49      	ldr	r3, [pc, #292]	@ (800e6e0 <xTaskIncrementTick+0x150>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00b      	beq.n	800e5da <xTaskIncrementTick+0x4a>
	__asm volatile
 800e5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c6:	f383 8811 	msr	BASEPRI, r3
 800e5ca:	f3bf 8f6f 	isb	sy
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	603b      	str	r3, [r7, #0]
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop
 800e5d8:	e7fd      	b.n	800e5d6 <xTaskIncrementTick+0x46>
 800e5da:	4b41      	ldr	r3, [pc, #260]	@ (800e6e0 <xTaskIncrementTick+0x150>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	60fb      	str	r3, [r7, #12]
 800e5e0:	4b40      	ldr	r3, [pc, #256]	@ (800e6e4 <xTaskIncrementTick+0x154>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a3e      	ldr	r2, [pc, #248]	@ (800e6e0 <xTaskIncrementTick+0x150>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	4a3e      	ldr	r2, [pc, #248]	@ (800e6e4 <xTaskIncrementTick+0x154>)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	4b3e      	ldr	r3, [pc, #248]	@ (800e6e8 <xTaskIncrementTick+0x158>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4a3c      	ldr	r2, [pc, #240]	@ (800e6e8 <xTaskIncrementTick+0x158>)
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	f000 fb3a 	bl	800ec70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5fc:	4b3b      	ldr	r3, [pc, #236]	@ (800e6ec <xTaskIncrementTick+0x15c>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	429a      	cmp	r2, r3
 800e604:	d349      	bcc.n	800e69a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e606:	4b36      	ldr	r3, [pc, #216]	@ (800e6e0 <xTaskIncrementTick+0x150>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d104      	bne.n	800e61a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e610:	4b36      	ldr	r3, [pc, #216]	@ (800e6ec <xTaskIncrementTick+0x15c>)
 800e612:	f04f 32ff 	mov.w	r2, #4294967295
 800e616:	601a      	str	r2, [r3, #0]
					break;
 800e618:	e03f      	b.n	800e69a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e61a:	4b31      	ldr	r3, [pc, #196]	@ (800e6e0 <xTaskIncrementTick+0x150>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d203      	bcs.n	800e63a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e632:	4a2e      	ldr	r2, [pc, #184]	@ (800e6ec <xTaskIncrementTick+0x15c>)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e638:	e02f      	b.n	800e69a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fc6c 	bl	800cf1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d004      	beq.n	800e656 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	3318      	adds	r3, #24
 800e650:	4618      	mov	r0, r3
 800e652:	f7fe fc63 	bl	800cf1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e65a:	4b25      	ldr	r3, [pc, #148]	@ (800e6f0 <xTaskIncrementTick+0x160>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d903      	bls.n	800e66a <xTaskIncrementTick+0xda>
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e666:	4a22      	ldr	r2, [pc, #136]	@ (800e6f0 <xTaskIncrementTick+0x160>)
 800e668:	6013      	str	r3, [r2, #0]
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e66e:	4613      	mov	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4a1f      	ldr	r2, [pc, #124]	@ (800e6f4 <xTaskIncrementTick+0x164>)
 800e678:	441a      	add	r2, r3
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	3304      	adds	r3, #4
 800e67e:	4619      	mov	r1, r3
 800e680:	4610      	mov	r0, r2
 800e682:	f7fe fbee 	bl	800ce62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e68a:	4b1b      	ldr	r3, [pc, #108]	@ (800e6f8 <xTaskIncrementTick+0x168>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e690:	429a      	cmp	r2, r3
 800e692:	d3b8      	bcc.n	800e606 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e698:	e7b5      	b.n	800e606 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e69a:	4b17      	ldr	r3, [pc, #92]	@ (800e6f8 <xTaskIncrementTick+0x168>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6a0:	4914      	ldr	r1, [pc, #80]	@ (800e6f4 <xTaskIncrementTick+0x164>)
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	4413      	add	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	440b      	add	r3, r1
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d901      	bls.n	800e6b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e6b6:	4b11      	ldr	r3, [pc, #68]	@ (800e6fc <xTaskIncrementTick+0x16c>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d007      	beq.n	800e6ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	e004      	b.n	800e6ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e700 <xTaskIncrementTick+0x170>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e700 <xTaskIncrementTick+0x170>)
 800e6cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6ce:	697b      	ldr	r3, [r7, #20]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3718      	adds	r7, #24
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	240010d0 	.word	0x240010d0
 800e6dc:	240010ac 	.word	0x240010ac
 800e6e0:	24001060 	.word	0x24001060
 800e6e4:	24001064 	.word	0x24001064
 800e6e8:	240010c0 	.word	0x240010c0
 800e6ec:	240010c8 	.word	0x240010c8
 800e6f0:	240010b0 	.word	0x240010b0
 800e6f4:	24000bd8 	.word	0x24000bd8
 800e6f8:	24000bd4 	.word	0x24000bd4
 800e6fc:	240010bc 	.word	0x240010bc
 800e700:	240010b8 	.word	0x240010b8

0800e704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e70a:	4b2b      	ldr	r3, [pc, #172]	@ (800e7b8 <vTaskSwitchContext+0xb4>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d003      	beq.n	800e71a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e712:	4b2a      	ldr	r3, [pc, #168]	@ (800e7bc <vTaskSwitchContext+0xb8>)
 800e714:	2201      	movs	r2, #1
 800e716:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e718:	e047      	b.n	800e7aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e71a:	4b28      	ldr	r3, [pc, #160]	@ (800e7bc <vTaskSwitchContext+0xb8>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e720:	4b27      	ldr	r3, [pc, #156]	@ (800e7c0 <vTaskSwitchContext+0xbc>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	60fb      	str	r3, [r7, #12]
 800e726:	e011      	b.n	800e74c <vTaskSwitchContext+0x48>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d10b      	bne.n	800e746 <vTaskSwitchContext+0x42>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	607b      	str	r3, [r7, #4]
}
 800e740:	bf00      	nop
 800e742:	bf00      	nop
 800e744:	e7fd      	b.n	800e742 <vTaskSwitchContext+0x3e>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3b01      	subs	r3, #1
 800e74a:	60fb      	str	r3, [r7, #12]
 800e74c:	491d      	ldr	r1, [pc, #116]	@ (800e7c4 <vTaskSwitchContext+0xc0>)
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	440b      	add	r3, r1
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d0e3      	beq.n	800e728 <vTaskSwitchContext+0x24>
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	4613      	mov	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	4a16      	ldr	r2, [pc, #88]	@ (800e7c4 <vTaskSwitchContext+0xc0>)
 800e76c:	4413      	add	r3, r2
 800e76e:	60bb      	str	r3, [r7, #8]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	605a      	str	r2, [r3, #4]
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	685a      	ldr	r2, [r3, #4]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	3308      	adds	r3, #8
 800e782:	429a      	cmp	r2, r3
 800e784:	d104      	bne.n	800e790 <vTaskSwitchContext+0x8c>
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	605a      	str	r2, [r3, #4]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	4a0c      	ldr	r2, [pc, #48]	@ (800e7c8 <vTaskSwitchContext+0xc4>)
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	4a09      	ldr	r2, [pc, #36]	@ (800e7c0 <vTaskSwitchContext+0xbc>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e7a0:	4b09      	ldr	r3, [pc, #36]	@ (800e7c8 <vTaskSwitchContext+0xc4>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3354      	adds	r3, #84	@ 0x54
 800e7a6:	4a09      	ldr	r2, [pc, #36]	@ (800e7cc <vTaskSwitchContext+0xc8>)
 800e7a8:	6013      	str	r3, [r2, #0]
}
 800e7aa:	bf00      	nop
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	240010d0 	.word	0x240010d0
 800e7bc:	240010bc 	.word	0x240010bc
 800e7c0:	240010b0 	.word	0x240010b0
 800e7c4:	24000bd8 	.word	0x24000bd8
 800e7c8:	24000bd4 	.word	0x24000bd4
 800e7cc:	24000020 	.word	0x24000020

0800e7d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10b      	bne.n	800e7f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	60fb      	str	r3, [r7, #12]
}
 800e7f2:	bf00      	nop
 800e7f4:	bf00      	nop
 800e7f6:	e7fd      	b.n	800e7f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7f8:	4b07      	ldr	r3, [pc, #28]	@ (800e818 <vTaskPlaceOnEventList+0x48>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3318      	adds	r3, #24
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7fe fb52 	bl	800ceaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e806:	2101      	movs	r1, #1
 800e808:	6838      	ldr	r0, [r7, #0]
 800e80a:	f000 fbdf 	bl	800efcc <prvAddCurrentTaskToDelayedList>
}
 800e80e:	bf00      	nop
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	24000bd4 	.word	0x24000bd4

0800e81c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d10b      	bne.n	800e846 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	617b      	str	r3, [r7, #20]
}
 800e840:	bf00      	nop
 800e842:	bf00      	nop
 800e844:	e7fd      	b.n	800e842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e846:	4b0a      	ldr	r3, [pc, #40]	@ (800e870 <vTaskPlaceOnEventListRestricted+0x54>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	3318      	adds	r3, #24
 800e84c:	4619      	mov	r1, r3
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f7fe fb07 	bl	800ce62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e85a:	f04f 33ff 	mov.w	r3, #4294967295
 800e85e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e860:	6879      	ldr	r1, [r7, #4]
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f000 fbb2 	bl	800efcc <prvAddCurrentTaskToDelayedList>
	}
 800e868:	bf00      	nop
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	24000bd4 	.word	0x24000bd4

0800e874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10b      	bne.n	800e8a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	60fb      	str	r3, [r7, #12]
}
 800e89c:	bf00      	nop
 800e89e:	bf00      	nop
 800e8a0:	e7fd      	b.n	800e89e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	3318      	adds	r3, #24
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe fb38 	bl	800cf1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8ac:	4b1e      	ldr	r3, [pc, #120]	@ (800e928 <xTaskRemoveFromEventList+0xb4>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d11f      	bne.n	800e8f4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fb2f 	bl	800cf1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8c2:	4b1a      	ldr	r3, [pc, #104]	@ (800e92c <xTaskRemoveFromEventList+0xb8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d903      	bls.n	800e8d2 <xTaskRemoveFromEventList+0x5e>
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ce:	4a17      	ldr	r2, [pc, #92]	@ (800e92c <xTaskRemoveFromEventList+0xb8>)
 800e8d0:	6013      	str	r3, [r2, #0]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4a14      	ldr	r2, [pc, #80]	@ (800e930 <xTaskRemoveFromEventList+0xbc>)
 800e8e0:	441a      	add	r2, r3
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7fe faba 	bl	800ce62 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e8ee:	f000 f9bf 	bl	800ec70 <prvResetNextTaskUnblockTime>
 800e8f2:	e005      	b.n	800e900 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	3318      	adds	r3, #24
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	480e      	ldr	r0, [pc, #56]	@ (800e934 <xTaskRemoveFromEventList+0xc0>)
 800e8fc:	f7fe fab1 	bl	800ce62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e904:	4b0c      	ldr	r3, [pc, #48]	@ (800e938 <xTaskRemoveFromEventList+0xc4>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d905      	bls.n	800e91a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e90e:	2301      	movs	r3, #1
 800e910:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e912:	4b0a      	ldr	r3, [pc, #40]	@ (800e93c <xTaskRemoveFromEventList+0xc8>)
 800e914:	2201      	movs	r2, #1
 800e916:	601a      	str	r2, [r3, #0]
 800e918:	e001      	b.n	800e91e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800e91a:	2300      	movs	r3, #0
 800e91c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e91e:	697b      	ldr	r3, [r7, #20]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3718      	adds	r7, #24
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	240010d0 	.word	0x240010d0
 800e92c:	240010b0 	.word	0x240010b0
 800e930:	24000bd8 	.word	0x24000bd8
 800e934:	24001068 	.word	0x24001068
 800e938:	24000bd4 	.word	0x24000bd4
 800e93c:	240010bc 	.word	0x240010bc

0800e940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e948:	4b06      	ldr	r3, [pc, #24]	@ (800e964 <vTaskInternalSetTimeOutState+0x24>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e950:	4b05      	ldr	r3, [pc, #20]	@ (800e968 <vTaskInternalSetTimeOutState+0x28>)
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	605a      	str	r2, [r3, #4]
}
 800e958:	bf00      	nop
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	240010c0 	.word	0x240010c0
 800e968:	240010ac 	.word	0x240010ac

0800e96c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b088      	sub	sp, #32
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10b      	bne.n	800e994 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	613b      	str	r3, [r7, #16]
}
 800e98e:	bf00      	nop
 800e990:	bf00      	nop
 800e992:	e7fd      	b.n	800e990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d10b      	bne.n	800e9b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	60fb      	str	r3, [r7, #12]
}
 800e9ac:	bf00      	nop
 800e9ae:	bf00      	nop
 800e9b0:	e7fd      	b.n	800e9ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e9b2:	f000 ffe9 	bl	800f988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800ea2c <xTaskCheckForTimeOut+0xc0>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	69ba      	ldr	r2, [r7, #24]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ce:	d102      	bne.n	800e9d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61fb      	str	r3, [r7, #28]
 800e9d4:	e023      	b.n	800ea1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	4b15      	ldr	r3, [pc, #84]	@ (800ea30 <xTaskCheckForTimeOut+0xc4>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d007      	beq.n	800e9f2 <xTaskCheckForTimeOut+0x86>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d302      	bcc.n	800e9f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	61fb      	str	r3, [r7, #28]
 800e9f0:	e015      	b.n	800ea1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d20b      	bcs.n	800ea14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	1ad2      	subs	r2, r2, r3
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7ff ff99 	bl	800e940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	61fb      	str	r3, [r7, #28]
 800ea12:	e004      	b.n	800ea1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	2200      	movs	r2, #0
 800ea18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea1e:	f000 ffe5 	bl	800f9ec <vPortExitCritical>

	return xReturn;
 800ea22:	69fb      	ldr	r3, [r7, #28]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3720      	adds	r7, #32
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	240010ac 	.word	0x240010ac
 800ea30:	240010c0 	.word	0x240010c0

0800ea34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea34:	b480      	push	{r7}
 800ea36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea38:	4b03      	ldr	r3, [pc, #12]	@ (800ea48 <vTaskMissedYield+0x14>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]
}
 800ea3e:	bf00      	nop
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	240010bc 	.word	0x240010bc

0800ea4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea54:	f000 f8a8 	bl	800eba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea58:	4b18      	ldr	r3, [pc, #96]	@ (800eabc <prvIdleTask+0x70>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d907      	bls.n	800ea70 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ea60:	4b17      	ldr	r3, [pc, #92]	@ (800eac0 <prvIdleTask+0x74>)
 800ea62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	f3bf 8f4f 	dsb	sy
 800ea6c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ea70:	f7ff fc80 	bl	800e374 <prvGetExpectedIdleTime>
 800ea74:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d9eb      	bls.n	800ea54 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800ea7c:	f7ff fc6c 	bl	800e358 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ea80:	4b10      	ldr	r3, [pc, #64]	@ (800eac4 <prvIdleTask+0x78>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	4b10      	ldr	r3, [pc, #64]	@ (800eac8 <prvIdleTask+0x7c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d20b      	bcs.n	800eaa4 <prvIdleTask+0x58>
	__asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	60bb      	str	r3, [r7, #8]
}
 800ea9e:	bf00      	nop
 800eaa0:	bf00      	nop
 800eaa2:	e7fd      	b.n	800eaa0 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800eaa4:	f7ff fc66 	bl	800e374 <prvGetExpectedIdleTime>
 800eaa8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d902      	bls.n	800eab6 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f001 f81b 	bl	800faec <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800eab6:	f7ff fc95 	bl	800e3e4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800eaba:	e7cb      	b.n	800ea54 <prvIdleTask+0x8>
 800eabc:	24000bd8 	.word	0x24000bd8
 800eac0:	e000ed04 	.word	0xe000ed04
 800eac4:	240010c8 	.word	0x240010c8
 800eac8:	240010ac 	.word	0x240010ac

0800eacc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800ead2:	2301      	movs	r3, #1
 800ead4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800ead6:	2301      	movs	r3, #1
 800ead8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800eada:	4b0f      	ldr	r3, [pc, #60]	@ (800eb18 <eTaskConfirmSleepModeStatus+0x4c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d002      	beq.n	800eae8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800eae2:	2300      	movs	r3, #0
 800eae4:	71fb      	strb	r3, [r7, #7]
 800eae6:	e010      	b.n	800eb0a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800eae8:	4b0c      	ldr	r3, [pc, #48]	@ (800eb1c <eTaskConfirmSleepModeStatus+0x50>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	71fb      	strb	r3, [r7, #7]
 800eaf4:	e009      	b.n	800eb0a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	@ (800eb20 <eTaskConfirmSleepModeStatus+0x54>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	4b0a      	ldr	r3, [pc, #40]	@ (800eb24 <eTaskConfirmSleepModeStatus+0x58>)
 800eafc:	6819      	ldr	r1, [r3, #0]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	1acb      	subs	r3, r1, r3
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d101      	bne.n	800eb0a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800eb06:	2302      	movs	r3, #2
 800eb08:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800eb0a:	79fb      	ldrb	r3, [r7, #7]
	}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	24001068 	.word	0x24001068
 800eb1c:	240010bc 	.word	0x240010bc
 800eb20:	24001094 	.word	0x24001094
 800eb24:	240010a8 	.word	0x240010a8

0800eb28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb2e:	2300      	movs	r3, #0
 800eb30:	607b      	str	r3, [r7, #4]
 800eb32:	e00c      	b.n	800eb4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	4613      	mov	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4a12      	ldr	r2, [pc, #72]	@ (800eb88 <prvInitialiseTaskLists+0x60>)
 800eb40:	4413      	add	r3, r2
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe f960 	bl	800ce08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	607b      	str	r3, [r7, #4]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b37      	cmp	r3, #55	@ 0x37
 800eb52:	d9ef      	bls.n	800eb34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb54:	480d      	ldr	r0, [pc, #52]	@ (800eb8c <prvInitialiseTaskLists+0x64>)
 800eb56:	f7fe f957 	bl	800ce08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb5a:	480d      	ldr	r0, [pc, #52]	@ (800eb90 <prvInitialiseTaskLists+0x68>)
 800eb5c:	f7fe f954 	bl	800ce08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb60:	480c      	ldr	r0, [pc, #48]	@ (800eb94 <prvInitialiseTaskLists+0x6c>)
 800eb62:	f7fe f951 	bl	800ce08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb66:	480c      	ldr	r0, [pc, #48]	@ (800eb98 <prvInitialiseTaskLists+0x70>)
 800eb68:	f7fe f94e 	bl	800ce08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb6c:	480b      	ldr	r0, [pc, #44]	@ (800eb9c <prvInitialiseTaskLists+0x74>)
 800eb6e:	f7fe f94b 	bl	800ce08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb72:	4b0b      	ldr	r3, [pc, #44]	@ (800eba0 <prvInitialiseTaskLists+0x78>)
 800eb74:	4a05      	ldr	r2, [pc, #20]	@ (800eb8c <prvInitialiseTaskLists+0x64>)
 800eb76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb78:	4b0a      	ldr	r3, [pc, #40]	@ (800eba4 <prvInitialiseTaskLists+0x7c>)
 800eb7a:	4a05      	ldr	r2, [pc, #20]	@ (800eb90 <prvInitialiseTaskLists+0x68>)
 800eb7c:	601a      	str	r2, [r3, #0]
}
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	24000bd8 	.word	0x24000bd8
 800eb8c:	24001038 	.word	0x24001038
 800eb90:	2400104c 	.word	0x2400104c
 800eb94:	24001068 	.word	0x24001068
 800eb98:	2400107c 	.word	0x2400107c
 800eb9c:	24001094 	.word	0x24001094
 800eba0:	24001060 	.word	0x24001060
 800eba4:	24001064 	.word	0x24001064

0800eba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebae:	e019      	b.n	800ebe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebb0:	f000 feea 	bl	800f988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebb4:	4b10      	ldr	r3, [pc, #64]	@ (800ebf8 <prvCheckTasksWaitingTermination+0x50>)
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	3304      	adds	r3, #4
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fe f9ab 	bl	800cf1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebfc <prvCheckTasksWaitingTermination+0x54>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	4a0b      	ldr	r2, [pc, #44]	@ (800ebfc <prvCheckTasksWaitingTermination+0x54>)
 800ebce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ec00 <prvCheckTasksWaitingTermination+0x58>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	4a0a      	ldr	r2, [pc, #40]	@ (800ec00 <prvCheckTasksWaitingTermination+0x58>)
 800ebd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebda:	f000 ff07 	bl	800f9ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 f810 	bl	800ec04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebe4:	4b06      	ldr	r3, [pc, #24]	@ (800ec00 <prvCheckTasksWaitingTermination+0x58>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1e1      	bne.n	800ebb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	2400107c 	.word	0x2400107c
 800ebfc:	240010a8 	.word	0x240010a8
 800ec00:	24001090 	.word	0x24001090

0800ec04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	3354      	adds	r3, #84	@ 0x54
 800ec10:	4618      	mov	r0, r3
 800ec12:	f002 fc81 	bl	8011518 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d108      	bne.n	800ec32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec24:	4618      	mov	r0, r3
 800ec26:	f001 f983 	bl	800ff30 <vPortFree>
				vPortFree( pxTCB );
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f001 f980 	bl	800ff30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec30:	e019      	b.n	800ec66 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d103      	bne.n	800ec44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f001 f977 	bl	800ff30 <vPortFree>
	}
 800ec42:	e010      	b.n	800ec66 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d00b      	beq.n	800ec66 <prvDeleteTCB+0x62>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	60fb      	str	r3, [r7, #12]
}
 800ec60:	bf00      	nop
 800ec62:	bf00      	nop
 800ec64:	e7fd      	b.n	800ec62 <prvDeleteTCB+0x5e>
	}
 800ec66:	bf00      	nop
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec76:	4b0c      	ldr	r3, [pc, #48]	@ (800eca8 <prvResetNextTaskUnblockTime+0x38>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d104      	bne.n	800ec8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec80:	4b0a      	ldr	r3, [pc, #40]	@ (800ecac <prvResetNextTaskUnblockTime+0x3c>)
 800ec82:	f04f 32ff 	mov.w	r2, #4294967295
 800ec86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec88:	e008      	b.n	800ec9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec8a:	4b07      	ldr	r3, [pc, #28]	@ (800eca8 <prvResetNextTaskUnblockTime+0x38>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	4a04      	ldr	r2, [pc, #16]	@ (800ecac <prvResetNextTaskUnblockTime+0x3c>)
 800ec9a:	6013      	str	r3, [r2, #0]
}
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr
 800eca8:	24001060 	.word	0x24001060
 800ecac:	240010c8 	.word	0x240010c8

0800ecb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ece4 <xTaskGetSchedulerState+0x34>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d102      	bne.n	800ecc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	607b      	str	r3, [r7, #4]
 800ecc2:	e008      	b.n	800ecd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc4:	4b08      	ldr	r3, [pc, #32]	@ (800ece8 <xTaskGetSchedulerState+0x38>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d102      	bne.n	800ecd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eccc:	2302      	movs	r3, #2
 800ecce:	607b      	str	r3, [r7, #4]
 800ecd0:	e001      	b.n	800ecd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecd6:	687b      	ldr	r3, [r7, #4]
	}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	240010b4 	.word	0x240010b4
 800ece8:	240010d0 	.word	0x240010d0

0800ecec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d051      	beq.n	800eda6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed06:	4b2a      	ldr	r3, [pc, #168]	@ (800edb0 <xTaskPriorityInherit+0xc4>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d241      	bcs.n	800ed94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	db06      	blt.n	800ed26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed18:	4b25      	ldr	r3, [pc, #148]	@ (800edb0 <xTaskPriorityInherit+0xc4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	6959      	ldr	r1, [r3, #20]
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed2e:	4613      	mov	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	4413      	add	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4a1f      	ldr	r2, [pc, #124]	@ (800edb4 <xTaskPriorityInherit+0xc8>)
 800ed38:	4413      	add	r3, r2
 800ed3a:	4299      	cmp	r1, r3
 800ed3c:	d122      	bne.n	800ed84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fe f8ea 	bl	800cf1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed48:	4b19      	ldr	r3, [pc, #100]	@ (800edb0 <xTaskPriorityInherit+0xc4>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed56:	4b18      	ldr	r3, [pc, #96]	@ (800edb8 <xTaskPriorityInherit+0xcc>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d903      	bls.n	800ed66 <xTaskPriorityInherit+0x7a>
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed62:	4a15      	ldr	r2, [pc, #84]	@ (800edb8 <xTaskPriorityInherit+0xcc>)
 800ed64:	6013      	str	r3, [r2, #0]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4413      	add	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4a10      	ldr	r2, [pc, #64]	@ (800edb4 <xTaskPriorityInherit+0xc8>)
 800ed74:	441a      	add	r2, r3
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	3304      	adds	r3, #4
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	4610      	mov	r0, r2
 800ed7e:	f7fe f870 	bl	800ce62 <vListInsertEnd>
 800ed82:	e004      	b.n	800ed8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed84:	4b0a      	ldr	r3, [pc, #40]	@ (800edb0 <xTaskPriorityInherit+0xc4>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	60fb      	str	r3, [r7, #12]
 800ed92:	e008      	b.n	800eda6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed98:	4b05      	ldr	r3, [pc, #20]	@ (800edb0 <xTaskPriorityInherit+0xc4>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d201      	bcs.n	800eda6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eda2:	2301      	movs	r3, #1
 800eda4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eda6:	68fb      	ldr	r3, [r7, #12]
	}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	24000bd4 	.word	0x24000bd4
 800edb4:	24000bd8 	.word	0x24000bd8
 800edb8:	240010b0 	.word	0x240010b0

0800edbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edc8:	2300      	movs	r3, #0
 800edca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d058      	beq.n	800ee84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edd2:	4b2f      	ldr	r3, [pc, #188]	@ (800ee90 <xTaskPriorityDisinherit+0xd4>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	693a      	ldr	r2, [r7, #16]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d00b      	beq.n	800edf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	60fb      	str	r3, [r7, #12]
}
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	e7fd      	b.n	800edf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10b      	bne.n	800ee14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800edfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	60bb      	str	r3, [r7, #8]
}
 800ee0e:	bf00      	nop
 800ee10:	bf00      	nop
 800ee12:	e7fd      	b.n	800ee10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee18:	1e5a      	subs	r2, r3, #1
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d02c      	beq.n	800ee84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d128      	bne.n	800ee84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	3304      	adds	r3, #4
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fe f870 	bl	800cf1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee54:	4b0f      	ldr	r3, [pc, #60]	@ (800ee94 <xTaskPriorityDisinherit+0xd8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d903      	bls.n	800ee64 <xTaskPriorityDisinherit+0xa8>
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee60:	4a0c      	ldr	r2, [pc, #48]	@ (800ee94 <xTaskPriorityDisinherit+0xd8>)
 800ee62:	6013      	str	r3, [r2, #0]
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee68:	4613      	mov	r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4a09      	ldr	r2, [pc, #36]	@ (800ee98 <xTaskPriorityDisinherit+0xdc>)
 800ee72:	441a      	add	r2, r3
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f7fd fff1 	bl	800ce62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee80:	2301      	movs	r3, #1
 800ee82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee84:	697b      	ldr	r3, [r7, #20]
	}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3718      	adds	r7, #24
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	24000bd4 	.word	0x24000bd4
 800ee94:	240010b0 	.word	0x240010b0
 800ee98:	24000bd8 	.word	0x24000bd8

0800ee9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b088      	sub	sp, #32
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d06c      	beq.n	800ef8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d10b      	bne.n	800eed4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	60fb      	str	r3, [r7, #12]
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	e7fd      	b.n	800eed0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eed8:	683a      	ldr	r2, [r7, #0]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d902      	bls.n	800eee4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	61fb      	str	r3, [r7, #28]
 800eee2:	e002      	b.n	800eeea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eee8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeee:	69fa      	ldr	r2, [r7, #28]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d04c      	beq.n	800ef8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d147      	bne.n	800ef8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eefe:	4b26      	ldr	r3, [pc, #152]	@ (800ef98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	69ba      	ldr	r2, [r7, #24]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d10b      	bne.n	800ef20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ef08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	60bb      	str	r3, [r7, #8]
}
 800ef1a:	bf00      	nop
 800ef1c:	bf00      	nop
 800ef1e:	e7fd      	b.n	800ef1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	69fa      	ldr	r2, [r7, #28]
 800ef2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	db04      	blt.n	800ef3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	6959      	ldr	r1, [r3, #20]
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	4613      	mov	r3, r2
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4a13      	ldr	r2, [pc, #76]	@ (800ef9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef4e:	4413      	add	r3, r2
 800ef50:	4299      	cmp	r1, r3
 800ef52:	d11c      	bne.n	800ef8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	3304      	adds	r3, #4
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fd ffdf 	bl	800cf1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef62:	4b0f      	ldr	r3, [pc, #60]	@ (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d903      	bls.n	800ef72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef6e:	4a0c      	ldr	r2, [pc, #48]	@ (800efa0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef70:	6013      	str	r3, [r2, #0]
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef76:	4613      	mov	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4a07      	ldr	r2, [pc, #28]	@ (800ef9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef80:	441a      	add	r2, r3
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	3304      	adds	r3, #4
 800ef86:	4619      	mov	r1, r3
 800ef88:	4610      	mov	r0, r2
 800ef8a:	f7fd ff6a 	bl	800ce62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef8e:	bf00      	nop
 800ef90:	3720      	adds	r7, #32
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	24000bd4 	.word	0x24000bd4
 800ef9c:	24000bd8 	.word	0x24000bd8
 800efa0:	240010b0 	.word	0x240010b0

0800efa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efa4:	b480      	push	{r7}
 800efa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efa8:	4b07      	ldr	r3, [pc, #28]	@ (800efc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efb0:	4b05      	ldr	r3, [pc, #20]	@ (800efc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efb6:	3201      	adds	r2, #1
 800efb8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800efba:	4b03      	ldr	r3, [pc, #12]	@ (800efc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800efbc:	681b      	ldr	r3, [r3, #0]
	}
 800efbe:	4618      	mov	r0, r3
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	24000bd4 	.word	0x24000bd4

0800efcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efd6:	4b21      	ldr	r3, [pc, #132]	@ (800f05c <prvAddCurrentTaskToDelayedList+0x90>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efdc:	4b20      	ldr	r3, [pc, #128]	@ (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3304      	adds	r3, #4
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fd ff9a 	bl	800cf1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efee:	d10a      	bne.n	800f006 <prvAddCurrentTaskToDelayedList+0x3a>
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d007      	beq.n	800f006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eff6:	4b1a      	ldr	r3, [pc, #104]	@ (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	3304      	adds	r3, #4
 800effc:	4619      	mov	r1, r3
 800effe:	4819      	ldr	r0, [pc, #100]	@ (800f064 <prvAddCurrentTaskToDelayedList+0x98>)
 800f000:	f7fd ff2f 	bl	800ce62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f004:	e026      	b.n	800f054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4413      	add	r3, r2
 800f00c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f00e:	4b14      	ldr	r3, [pc, #80]	@ (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f016:	68ba      	ldr	r2, [r7, #8]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d209      	bcs.n	800f032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f01e:	4b12      	ldr	r3, [pc, #72]	@ (800f068 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	4b0f      	ldr	r3, [pc, #60]	@ (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	3304      	adds	r3, #4
 800f028:	4619      	mov	r1, r3
 800f02a:	4610      	mov	r0, r2
 800f02c:	f7fd ff3d 	bl	800ceaa <vListInsert>
}
 800f030:	e010      	b.n	800f054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f032:	4b0e      	ldr	r3, [pc, #56]	@ (800f06c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	4b0a      	ldr	r3, [pc, #40]	@ (800f060 <prvAddCurrentTaskToDelayedList+0x94>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3304      	adds	r3, #4
 800f03c:	4619      	mov	r1, r3
 800f03e:	4610      	mov	r0, r2
 800f040:	f7fd ff33 	bl	800ceaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f044:	4b0a      	ldr	r3, [pc, #40]	@ (800f070 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d202      	bcs.n	800f054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f04e:	4a08      	ldr	r2, [pc, #32]	@ (800f070 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	6013      	str	r3, [r2, #0]
}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	240010ac 	.word	0x240010ac
 800f060:	24000bd4 	.word	0x24000bd4
 800f064:	24001094 	.word	0x24001094
 800f068:	24001064 	.word	0x24001064
 800f06c:	24001060 	.word	0x24001060
 800f070:	240010c8 	.word	0x240010c8

0800f074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08a      	sub	sp, #40	@ 0x28
 800f078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f07e:	f000 fb13 	bl	800f6a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f082:	4b1d      	ldr	r3, [pc, #116]	@ (800f0f8 <xTimerCreateTimerTask+0x84>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d021      	beq.n	800f0ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f092:	1d3a      	adds	r2, r7, #4
 800f094:	f107 0108 	add.w	r1, r7, #8
 800f098:	f107 030c 	add.w	r3, r7, #12
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fd fe99 	bl	800cdd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	9202      	str	r2, [sp, #8]
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	460a      	mov	r2, r1
 800f0b4:	4911      	ldr	r1, [pc, #68]	@ (800f0fc <xTimerCreateTimerTask+0x88>)
 800f0b6:	4812      	ldr	r0, [pc, #72]	@ (800f100 <xTimerCreateTimerTask+0x8c>)
 800f0b8:	f7fe feea 	bl	800de90 <xTaskCreateStatic>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	4a11      	ldr	r2, [pc, #68]	@ (800f104 <xTimerCreateTimerTask+0x90>)
 800f0c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0c2:	4b10      	ldr	r3, [pc, #64]	@ (800f104 <xTimerCreateTimerTask+0x90>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10b      	bne.n	800f0ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	613b      	str	r3, [r7, #16]
}
 800f0e6:	bf00      	nop
 800f0e8:	bf00      	nop
 800f0ea:	e7fd      	b.n	800f0e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f0ec:	697b      	ldr	r3, [r7, #20]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3718      	adds	r7, #24
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	24001104 	.word	0x24001104
 800f0fc:	08015284 	.word	0x08015284
 800f100:	0800f241 	.word	0x0800f241
 800f104:	24001108 	.word	0x24001108

0800f108 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08a      	sub	sp, #40	@ 0x28
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f116:	2300      	movs	r3, #0
 800f118:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10b      	bne.n	800f138 <xTimerGenericCommand+0x30>
	__asm volatile
 800f120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	623b      	str	r3, [r7, #32]
}
 800f132:	bf00      	nop
 800f134:	bf00      	nop
 800f136:	e7fd      	b.n	800f134 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f138:	4b19      	ldr	r3, [pc, #100]	@ (800f1a0 <xTimerGenericCommand+0x98>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d02a      	beq.n	800f196 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2b05      	cmp	r3, #5
 800f150:	dc18      	bgt.n	800f184 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f152:	f7ff fdad 	bl	800ecb0 <xTaskGetSchedulerState>
 800f156:	4603      	mov	r3, r0
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d109      	bne.n	800f170 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f15c:	4b10      	ldr	r3, [pc, #64]	@ (800f1a0 <xTimerGenericCommand+0x98>)
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	f107 0110 	add.w	r1, r7, #16
 800f164:	2300      	movs	r3, #0
 800f166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f168:	f7fe f87c 	bl	800d264 <xQueueGenericSend>
 800f16c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f16e:	e012      	b.n	800f196 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f170:	4b0b      	ldr	r3, [pc, #44]	@ (800f1a0 <xTimerGenericCommand+0x98>)
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	f107 0110 	add.w	r1, r7, #16
 800f178:	2300      	movs	r3, #0
 800f17a:	2200      	movs	r2, #0
 800f17c:	f7fe f872 	bl	800d264 <xQueueGenericSend>
 800f180:	6278      	str	r0, [r7, #36]	@ 0x24
 800f182:	e008      	b.n	800f196 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f184:	4b06      	ldr	r3, [pc, #24]	@ (800f1a0 <xTimerGenericCommand+0x98>)
 800f186:	6818      	ldr	r0, [r3, #0]
 800f188:	f107 0110 	add.w	r1, r7, #16
 800f18c:	2300      	movs	r3, #0
 800f18e:	683a      	ldr	r2, [r7, #0]
 800f190:	f7fe f96a 	bl	800d468 <xQueueGenericSendFromISR>
 800f194:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3728      	adds	r7, #40	@ 0x28
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	24001104 	.word	0x24001104

0800f1a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ae:	4b23      	ldr	r3, [pc, #140]	@ (800f23c <prvProcessExpiredTimer+0x98>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fd fead 	bl	800cf1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1c8:	f003 0304 	and.w	r3, r3, #4
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d023      	beq.n	800f218 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	699a      	ldr	r2, [r3, #24]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	18d1      	adds	r1, r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	6978      	ldr	r0, [r7, #20]
 800f1de:	f000 f8d5 	bl	800f38c <prvInsertTimerInActiveList>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d020      	beq.n	800f22a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6978      	ldr	r0, [r7, #20]
 800f1f4:	f7ff ff88 	bl	800f108 <xTimerGenericCommand>
 800f1f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d114      	bne.n	800f22a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	60fb      	str	r3, [r7, #12]
}
 800f212:	bf00      	nop
 800f214:	bf00      	nop
 800f216:	e7fd      	b.n	800f214 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f21e:	f023 0301 	bic.w	r3, r3, #1
 800f222:	b2da      	uxtb	r2, r3
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	6978      	ldr	r0, [r7, #20]
 800f230:	4798      	blx	r3
}
 800f232:	bf00      	nop
 800f234:	3718      	adds	r7, #24
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	240010fc 	.word	0x240010fc

0800f240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f248:	f107 0308 	add.w	r3, r7, #8
 800f24c:	4618      	mov	r0, r3
 800f24e:	f000 f859 	bl	800f304 <prvGetNextExpireTime>
 800f252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	4619      	mov	r1, r3
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f000 f805 	bl	800f268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f25e:	f000 f8d7 	bl	800f410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f262:	bf00      	nop
 800f264:	e7f0      	b.n	800f248 <prvTimerTask+0x8>
	...

0800f268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f272:	f7ff f871 	bl	800e358 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f276:	f107 0308 	add.w	r3, r7, #8
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 f866 	bl	800f34c <prvSampleTimeNow>
 800f280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d130      	bne.n	800f2ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10a      	bne.n	800f2a4 <prvProcessTimerOrBlockTask+0x3c>
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	429a      	cmp	r2, r3
 800f294:	d806      	bhi.n	800f2a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f296:	f7ff f8a5 	bl	800e3e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f29a:	68f9      	ldr	r1, [r7, #12]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff ff81 	bl	800f1a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2a2:	e024      	b.n	800f2ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d008      	beq.n	800f2bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2aa:	4b13      	ldr	r3, [pc, #76]	@ (800f2f8 <prvProcessTimerOrBlockTask+0x90>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d101      	bne.n	800f2b8 <prvProcessTimerOrBlockTask+0x50>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e000      	b.n	800f2ba <prvProcessTimerOrBlockTask+0x52>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2bc:	4b0f      	ldr	r3, [pc, #60]	@ (800f2fc <prvProcessTimerOrBlockTask+0x94>)
 800f2be:	6818      	ldr	r0, [r3, #0]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	1ad3      	subs	r3, r2, r3
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f7fe fdad 	bl	800de28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2ce:	f7ff f889 	bl	800e3e4 <xTaskResumeAll>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10a      	bne.n	800f2ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2d8:	4b09      	ldr	r3, [pc, #36]	@ (800f300 <prvProcessTimerOrBlockTask+0x98>)
 800f2da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2de:	601a      	str	r2, [r3, #0]
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	f3bf 8f6f 	isb	sy
}
 800f2e8:	e001      	b.n	800f2ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2ea:	f7ff f87b 	bl	800e3e4 <xTaskResumeAll>
}
 800f2ee:	bf00      	nop
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	24001100 	.word	0x24001100
 800f2fc:	24001104 	.word	0x24001104
 800f300:	e000ed04 	.word	0xe000ed04

0800f304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f30c:	4b0e      	ldr	r3, [pc, #56]	@ (800f348 <prvGetNextExpireTime+0x44>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d101      	bne.n	800f31a <prvGetNextExpireTime+0x16>
 800f316:	2201      	movs	r2, #1
 800f318:	e000      	b.n	800f31c <prvGetNextExpireTime+0x18>
 800f31a:	2200      	movs	r2, #0
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d105      	bne.n	800f334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f328:	4b07      	ldr	r3, [pc, #28]	@ (800f348 <prvGetNextExpireTime+0x44>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	60fb      	str	r3, [r7, #12]
 800f332:	e001      	b.n	800f338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f334:	2300      	movs	r3, #0
 800f336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f338:	68fb      	ldr	r3, [r7, #12]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	240010fc 	.word	0x240010fc

0800f34c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f354:	f7ff f8e4 	bl	800e520 <xTaskGetTickCount>
 800f358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f35a:	4b0b      	ldr	r3, [pc, #44]	@ (800f388 <prvSampleTimeNow+0x3c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	429a      	cmp	r2, r3
 800f362:	d205      	bcs.n	800f370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f364:	f000 f93a 	bl	800f5dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2201      	movs	r2, #1
 800f36c:	601a      	str	r2, [r3, #0]
 800f36e:	e002      	b.n	800f376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f376:	4a04      	ldr	r2, [pc, #16]	@ (800f388 <prvSampleTimeNow+0x3c>)
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f37c:	68fb      	ldr	r3, [r7, #12]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	2400110c 	.word	0x2400110c

0800f38c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f39a:	2300      	movs	r3, #0
 800f39c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d812      	bhi.n	800f3d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	1ad2      	subs	r2, r2, r3
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	699b      	ldr	r3, [r3, #24]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d302      	bcc.n	800f3c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e01b      	b.n	800f3fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3c6:	4b10      	ldr	r3, [pc, #64]	@ (800f408 <prvInsertTimerInActiveList+0x7c>)
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	f7fd fd6a 	bl	800ceaa <vListInsert>
 800f3d6:	e012      	b.n	800f3fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d206      	bcs.n	800f3ee <prvInsertTimerInActiveList+0x62>
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d302      	bcc.n	800f3ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	617b      	str	r3, [r7, #20]
 800f3ec:	e007      	b.n	800f3fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3ee:	4b07      	ldr	r3, [pc, #28]	@ (800f40c <prvInsertTimerInActiveList+0x80>)
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	4610      	mov	r0, r2
 800f3fa:	f7fd fd56 	bl	800ceaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3fe:	697b      	ldr	r3, [r7, #20]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	24001100 	.word	0x24001100
 800f40c:	240010fc 	.word	0x240010fc

0800f410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08e      	sub	sp, #56	@ 0x38
 800f414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f416:	e0ce      	b.n	800f5b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	da19      	bge.n	800f452 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f41e:	1d3b      	adds	r3, r7, #4
 800f420:	3304      	adds	r3, #4
 800f422:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10b      	bne.n	800f442 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f42e:	f383 8811 	msr	BASEPRI, r3
 800f432:	f3bf 8f6f 	isb	sy
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	61fb      	str	r3, [r7, #28]
}
 800f43c:	bf00      	nop
 800f43e:	bf00      	nop
 800f440:	e7fd      	b.n	800f43e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f448:	6850      	ldr	r0, [r2, #4]
 800f44a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f44c:	6892      	ldr	r2, [r2, #8]
 800f44e:	4611      	mov	r1, r2
 800f450:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	f2c0 80ae 	blt.w	800f5b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d004      	beq.n	800f470 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f468:	3304      	adds	r3, #4
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd fd56 	bl	800cf1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f470:	463b      	mov	r3, r7
 800f472:	4618      	mov	r0, r3
 800f474:	f7ff ff6a 	bl	800f34c <prvSampleTimeNow>
 800f478:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b09      	cmp	r3, #9
 800f47e:	f200 8097 	bhi.w	800f5b0 <prvProcessReceivedCommands+0x1a0>
 800f482:	a201      	add	r2, pc, #4	@ (adr r2, 800f488 <prvProcessReceivedCommands+0x78>)
 800f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f488:	0800f4b1 	.word	0x0800f4b1
 800f48c:	0800f4b1 	.word	0x0800f4b1
 800f490:	0800f4b1 	.word	0x0800f4b1
 800f494:	0800f527 	.word	0x0800f527
 800f498:	0800f53b 	.word	0x0800f53b
 800f49c:	0800f587 	.word	0x0800f587
 800f4a0:	0800f4b1 	.word	0x0800f4b1
 800f4a4:	0800f4b1 	.word	0x0800f4b1
 800f4a8:	0800f527 	.word	0x0800f527
 800f4ac:	0800f53b 	.word	0x0800f53b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4b6:	f043 0301 	orr.w	r3, r3, #1
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	18d1      	adds	r1, r2, r3
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4d0:	f7ff ff5c 	bl	800f38c <prvInsertTimerInActiveList>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d06c      	beq.n	800f5b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4e8:	f003 0304 	and.w	r3, r3, #4
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d061      	beq.n	800f5b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4f0:	68ba      	ldr	r2, [r7, #8]
 800f4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f4:	699b      	ldr	r3, [r3, #24]
 800f4f6:	441a      	add	r2, r3
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	2100      	movs	r1, #0
 800f500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f502:	f7ff fe01 	bl	800f108 <xTimerGenericCommand>
 800f506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f508:	6a3b      	ldr	r3, [r7, #32]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d152      	bne.n	800f5b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f512:	f383 8811 	msr	BASEPRI, r3
 800f516:	f3bf 8f6f 	isb	sy
 800f51a:	f3bf 8f4f 	dsb	sy
 800f51e:	61bb      	str	r3, [r7, #24]
}
 800f520:	bf00      	nop
 800f522:	bf00      	nop
 800f524:	e7fd      	b.n	800f522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f52c:	f023 0301 	bic.w	r3, r3, #1
 800f530:	b2da      	uxtb	r2, r3
 800f532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f538:	e03d      	b.n	800f5b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f53c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f540:	f043 0301 	orr.w	r3, r3, #1
 800f544:	b2da      	uxtb	r2, r3
 800f546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f550:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10b      	bne.n	800f572 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55e:	f383 8811 	msr	BASEPRI, r3
 800f562:	f3bf 8f6f 	isb	sy
 800f566:	f3bf 8f4f 	dsb	sy
 800f56a:	617b      	str	r3, [r7, #20]
}
 800f56c:	bf00      	nop
 800f56e:	bf00      	nop
 800f570:	e7fd      	b.n	800f56e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f574:	699a      	ldr	r2, [r3, #24]
 800f576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f578:	18d1      	adds	r1, r2, r3
 800f57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f580:	f7ff ff04 	bl	800f38c <prvInsertTimerInActiveList>
					break;
 800f584:	e017      	b.n	800f5b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f58c:	f003 0302 	and.w	r3, r3, #2
 800f590:	2b00      	cmp	r3, #0
 800f592:	d103      	bne.n	800f59c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f596:	f000 fccb 	bl	800ff30 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f59a:	e00c      	b.n	800f5b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f59e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5a2:	f023 0301 	bic.w	r3, r3, #1
 800f5a6:	b2da      	uxtb	r2, r3
 800f5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f5ae:	e002      	b.n	800f5b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f5b0:	bf00      	nop
 800f5b2:	e000      	b.n	800f5b6 <prvProcessReceivedCommands+0x1a6>
					break;
 800f5b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5b6:	4b08      	ldr	r3, [pc, #32]	@ (800f5d8 <prvProcessReceivedCommands+0x1c8>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	1d39      	adds	r1, r7, #4
 800f5bc:	2200      	movs	r2, #0
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fe f880 	bl	800d6c4 <xQueueReceive>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f47f af26 	bne.w	800f418 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f5cc:	bf00      	nop
 800f5ce:	bf00      	nop
 800f5d0:	3730      	adds	r7, #48	@ 0x30
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	24001104 	.word	0x24001104

0800f5dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b088      	sub	sp, #32
 800f5e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5e2:	e049      	b.n	800f678 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5e4:	4b2e      	ldr	r3, [pc, #184]	@ (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ee:	4b2c      	ldr	r3, [pc, #176]	@ (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fd fc8d 	bl	800cf1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6a1b      	ldr	r3, [r3, #32]
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f610:	f003 0304 	and.w	r3, r3, #4
 800f614:	2b00      	cmp	r3, #0
 800f616:	d02f      	beq.n	800f678 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	699b      	ldr	r3, [r3, #24]
 800f61c:	693a      	ldr	r2, [r7, #16]
 800f61e:	4413      	add	r3, r2
 800f620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	429a      	cmp	r2, r3
 800f628:	d90e      	bls.n	800f648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f636:	4b1a      	ldr	r3, [pc, #104]	@ (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	3304      	adds	r3, #4
 800f63e:	4619      	mov	r1, r3
 800f640:	4610      	mov	r0, r2
 800f642:	f7fd fc32 	bl	800ceaa <vListInsert>
 800f646:	e017      	b.n	800f678 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f648:	2300      	movs	r3, #0
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	2300      	movs	r3, #0
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	2100      	movs	r1, #0
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f7ff fd58 	bl	800f108 <xTimerGenericCommand>
 800f658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d10b      	bne.n	800f678 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	603b      	str	r3, [r7, #0]
}
 800f672:	bf00      	nop
 800f674:	bf00      	nop
 800f676:	e7fd      	b.n	800f674 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f678:	4b09      	ldr	r3, [pc, #36]	@ (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1b0      	bne.n	800f5e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f682:	4b07      	ldr	r3, [pc, #28]	@ (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f688:	4b06      	ldr	r3, [pc, #24]	@ (800f6a4 <prvSwitchTimerLists+0xc8>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a04      	ldr	r2, [pc, #16]	@ (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f68e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f690:	4a04      	ldr	r2, [pc, #16]	@ (800f6a4 <prvSwitchTimerLists+0xc8>)
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	6013      	str	r3, [r2, #0]
}
 800f696:	bf00      	nop
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	240010fc 	.word	0x240010fc
 800f6a4:	24001100 	.word	0x24001100

0800f6a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6ae:	f000 f96b 	bl	800f988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6b2:	4b15      	ldr	r3, [pc, #84]	@ (800f708 <prvCheckForValidListAndQueue+0x60>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d120      	bne.n	800f6fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6ba:	4814      	ldr	r0, [pc, #80]	@ (800f70c <prvCheckForValidListAndQueue+0x64>)
 800f6bc:	f7fd fba4 	bl	800ce08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6c0:	4813      	ldr	r0, [pc, #76]	@ (800f710 <prvCheckForValidListAndQueue+0x68>)
 800f6c2:	f7fd fba1 	bl	800ce08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6c6:	4b13      	ldr	r3, [pc, #76]	@ (800f714 <prvCheckForValidListAndQueue+0x6c>)
 800f6c8:	4a10      	ldr	r2, [pc, #64]	@ (800f70c <prvCheckForValidListAndQueue+0x64>)
 800f6ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6cc:	4b12      	ldr	r3, [pc, #72]	@ (800f718 <prvCheckForValidListAndQueue+0x70>)
 800f6ce:	4a10      	ldr	r2, [pc, #64]	@ (800f710 <prvCheckForValidListAndQueue+0x68>)
 800f6d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9300      	str	r3, [sp, #0]
 800f6d6:	4b11      	ldr	r3, [pc, #68]	@ (800f71c <prvCheckForValidListAndQueue+0x74>)
 800f6d8:	4a11      	ldr	r2, [pc, #68]	@ (800f720 <prvCheckForValidListAndQueue+0x78>)
 800f6da:	2110      	movs	r1, #16
 800f6dc:	200a      	movs	r0, #10
 800f6de:	f7fd fcb1 	bl	800d044 <xQueueGenericCreateStatic>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	4a08      	ldr	r2, [pc, #32]	@ (800f708 <prvCheckForValidListAndQueue+0x60>)
 800f6e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6e8:	4b07      	ldr	r3, [pc, #28]	@ (800f708 <prvCheckForValidListAndQueue+0x60>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d005      	beq.n	800f6fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6f0:	4b05      	ldr	r3, [pc, #20]	@ (800f708 <prvCheckForValidListAndQueue+0x60>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	490b      	ldr	r1, [pc, #44]	@ (800f724 <prvCheckForValidListAndQueue+0x7c>)
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fe fb42 	bl	800dd80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6fc:	f000 f976 	bl	800f9ec <vPortExitCritical>
}
 800f700:	bf00      	nop
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	24001104 	.word	0x24001104
 800f70c:	240010d4 	.word	0x240010d4
 800f710:	240010e8 	.word	0x240010e8
 800f714:	240010fc 	.word	0x240010fc
 800f718:	24001100 	.word	0x24001100
 800f71c:	240011b0 	.word	0x240011b0
 800f720:	24001110 	.word	0x24001110
 800f724:	0801528c 	.word	0x0801528c

0800f728 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3b04      	subs	r3, #4
 800f738:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	3b04      	subs	r3, #4
 800f746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	f023 0201 	bic.w	r2, r3, #1
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3b04      	subs	r3, #4
 800f756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f758:	4a0c      	ldr	r2, [pc, #48]	@ (800f78c <pxPortInitialiseStack+0x64>)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	3b14      	subs	r3, #20
 800f762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	3b04      	subs	r3, #4
 800f76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f06f 0202 	mvn.w	r2, #2
 800f776:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	3b20      	subs	r3, #32
 800f77c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f77e:	68fb      	ldr	r3, [r7, #12]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	0800f791 	.word	0x0800f791

0800f790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f790:	b480      	push	{r7}
 800f792:	b085      	sub	sp, #20
 800f794:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f796:	2300      	movs	r3, #0
 800f798:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f79a:	4b13      	ldr	r3, [pc, #76]	@ (800f7e8 <prvTaskExitError+0x58>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a2:	d00b      	beq.n	800f7bc <prvTaskExitError+0x2c>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	60fb      	str	r3, [r7, #12]
}
 800f7b6:	bf00      	nop
 800f7b8:	bf00      	nop
 800f7ba:	e7fd      	b.n	800f7b8 <prvTaskExitError+0x28>
	__asm volatile
 800f7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	60bb      	str	r3, [r7, #8]
}
 800f7ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7d0:	bf00      	nop
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d0fc      	beq.n	800f7d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	24000010 	.word	0x24000010
 800f7ec:	00000000 	.word	0x00000000

0800f7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7f0:	4b07      	ldr	r3, [pc, #28]	@ (800f810 <pxCurrentTCBConst2>)
 800f7f2:	6819      	ldr	r1, [r3, #0]
 800f7f4:	6808      	ldr	r0, [r1, #0]
 800f7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fa:	f380 8809 	msr	PSP, r0
 800f7fe:	f3bf 8f6f 	isb	sy
 800f802:	f04f 0000 	mov.w	r0, #0
 800f806:	f380 8811 	msr	BASEPRI, r0
 800f80a:	4770      	bx	lr
 800f80c:	f3af 8000 	nop.w

0800f810 <pxCurrentTCBConst2>:
 800f810:	24000bd4 	.word	0x24000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f814:	bf00      	nop
 800f816:	bf00      	nop

0800f818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f818:	4808      	ldr	r0, [pc, #32]	@ (800f83c <prvPortStartFirstTask+0x24>)
 800f81a:	6800      	ldr	r0, [r0, #0]
 800f81c:	6800      	ldr	r0, [r0, #0]
 800f81e:	f380 8808 	msr	MSP, r0
 800f822:	f04f 0000 	mov.w	r0, #0
 800f826:	f380 8814 	msr	CONTROL, r0
 800f82a:	b662      	cpsie	i
 800f82c:	b661      	cpsie	f
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	df00      	svc	0
 800f838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f83a:	bf00      	nop
 800f83c:	e000ed08 	.word	0xe000ed08

0800f840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f846:	4b47      	ldr	r3, [pc, #284]	@ (800f964 <xPortStartScheduler+0x124>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4a47      	ldr	r2, [pc, #284]	@ (800f968 <xPortStartScheduler+0x128>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d10b      	bne.n	800f868 <xPortStartScheduler+0x28>
	__asm volatile
 800f850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f854:	f383 8811 	msr	BASEPRI, r3
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	613b      	str	r3, [r7, #16]
}
 800f862:	bf00      	nop
 800f864:	bf00      	nop
 800f866:	e7fd      	b.n	800f864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f868:	4b3e      	ldr	r3, [pc, #248]	@ (800f964 <xPortStartScheduler+0x124>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a3f      	ldr	r2, [pc, #252]	@ (800f96c <xPortStartScheduler+0x12c>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d10b      	bne.n	800f88a <xPortStartScheduler+0x4a>
	__asm volatile
 800f872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f876:	f383 8811 	msr	BASEPRI, r3
 800f87a:	f3bf 8f6f 	isb	sy
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	60fb      	str	r3, [r7, #12]
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop
 800f888:	e7fd      	b.n	800f886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f88a:	4b39      	ldr	r3, [pc, #228]	@ (800f970 <xPortStartScheduler+0x130>)
 800f88c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	b2db      	uxtb	r3, r3
 800f894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	22ff      	movs	r2, #255	@ 0xff
 800f89a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8a4:	78fb      	ldrb	r3, [r7, #3]
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	4b31      	ldr	r3, [pc, #196]	@ (800f974 <xPortStartScheduler+0x134>)
 800f8b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8b2:	4b31      	ldr	r3, [pc, #196]	@ (800f978 <xPortStartScheduler+0x138>)
 800f8b4:	2207      	movs	r2, #7
 800f8b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8b8:	e009      	b.n	800f8ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f978 <xPortStartScheduler+0x138>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	4a2d      	ldr	r2, [pc, #180]	@ (800f978 <xPortStartScheduler+0x138>)
 800f8c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8c4:	78fb      	ldrb	r3, [r7, #3]
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8ce:	78fb      	ldrb	r3, [r7, #3]
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8d6:	2b80      	cmp	r3, #128	@ 0x80
 800f8d8:	d0ef      	beq.n	800f8ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8da:	4b27      	ldr	r3, [pc, #156]	@ (800f978 <xPortStartScheduler+0x138>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f1c3 0307 	rsb	r3, r3, #7
 800f8e2:	2b04      	cmp	r3, #4
 800f8e4:	d00b      	beq.n	800f8fe <xPortStartScheduler+0xbe>
	__asm volatile
 800f8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ea:	f383 8811 	msr	BASEPRI, r3
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	60bb      	str	r3, [r7, #8]
}
 800f8f8:	bf00      	nop
 800f8fa:	bf00      	nop
 800f8fc:	e7fd      	b.n	800f8fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800f978 <xPortStartScheduler+0x138>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	021b      	lsls	r3, r3, #8
 800f904:	4a1c      	ldr	r2, [pc, #112]	@ (800f978 <xPortStartScheduler+0x138>)
 800f906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f908:	4b1b      	ldr	r3, [pc, #108]	@ (800f978 <xPortStartScheduler+0x138>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f910:	4a19      	ldr	r2, [pc, #100]	@ (800f978 <xPortStartScheduler+0x138>)
 800f912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	b2da      	uxtb	r2, r3
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f91c:	4b17      	ldr	r3, [pc, #92]	@ (800f97c <xPortStartScheduler+0x13c>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a16      	ldr	r2, [pc, #88]	@ (800f97c <xPortStartScheduler+0x13c>)
 800f922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f928:	4b14      	ldr	r3, [pc, #80]	@ (800f97c <xPortStartScheduler+0x13c>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a13      	ldr	r2, [pc, #76]	@ (800f97c <xPortStartScheduler+0x13c>)
 800f92e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f934:	f000 f9a6 	bl	800fc84 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f938:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <xPortStartScheduler+0x140>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f93e:	f000 f9dd 	bl	800fcfc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f942:	4b10      	ldr	r3, [pc, #64]	@ (800f984 <xPortStartScheduler+0x144>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a0f      	ldr	r2, [pc, #60]	@ (800f984 <xPortStartScheduler+0x144>)
 800f948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f94c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f94e:	f7ff ff63 	bl	800f818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f952:	f7fe fed7 	bl	800e704 <vTaskSwitchContext>
	prvTaskExitError();
 800f956:	f7ff ff1b 	bl	800f790 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3718      	adds	r7, #24
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	e000ed00 	.word	0xe000ed00
 800f968:	410fc271 	.word	0x410fc271
 800f96c:	410fc270 	.word	0x410fc270
 800f970:	e000e400 	.word	0xe000e400
 800f974:	2400120c 	.word	0x2400120c
 800f978:	24001210 	.word	0x24001210
 800f97c:	e000ed20 	.word	0xe000ed20
 800f980:	24000010 	.word	0x24000010
 800f984:	e000ef34 	.word	0xe000ef34

0800f988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	607b      	str	r3, [r7, #4]
}
 800f9a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9a2:	4b10      	ldr	r3, [pc, #64]	@ (800f9e4 <vPortEnterCritical+0x5c>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	4a0e      	ldr	r2, [pc, #56]	@ (800f9e4 <vPortEnterCritical+0x5c>)
 800f9aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f9e4 <vPortEnterCritical+0x5c>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d110      	bne.n	800f9d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e8 <vPortEnterCritical+0x60>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00b      	beq.n	800f9d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c2:	f383 8811 	msr	BASEPRI, r3
 800f9c6:	f3bf 8f6f 	isb	sy
 800f9ca:	f3bf 8f4f 	dsb	sy
 800f9ce:	603b      	str	r3, [r7, #0]
}
 800f9d0:	bf00      	nop
 800f9d2:	bf00      	nop
 800f9d4:	e7fd      	b.n	800f9d2 <vPortEnterCritical+0x4a>
	}
}
 800f9d6:	bf00      	nop
 800f9d8:	370c      	adds	r7, #12
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	24000010 	.word	0x24000010
 800f9e8:	e000ed04 	.word	0xe000ed04

0800f9ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9f2:	4b12      	ldr	r3, [pc, #72]	@ (800fa3c <vPortExitCritical+0x50>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10b      	bne.n	800fa12 <vPortExitCritical+0x26>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	607b      	str	r3, [r7, #4]
}
 800fa0c:	bf00      	nop
 800fa0e:	bf00      	nop
 800fa10:	e7fd      	b.n	800fa0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa12:	4b0a      	ldr	r3, [pc, #40]	@ (800fa3c <vPortExitCritical+0x50>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	3b01      	subs	r3, #1
 800fa18:	4a08      	ldr	r2, [pc, #32]	@ (800fa3c <vPortExitCritical+0x50>)
 800fa1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa1c:	4b07      	ldr	r3, [pc, #28]	@ (800fa3c <vPortExitCritical+0x50>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d105      	bne.n	800fa30 <vPortExitCritical+0x44>
 800fa24:	2300      	movs	r3, #0
 800fa26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	f383 8811 	msr	BASEPRI, r3
}
 800fa2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	24000010 	.word	0x24000010

0800fa40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa40:	f3ef 8009 	mrs	r0, PSP
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	4b15      	ldr	r3, [pc, #84]	@ (800faa0 <pxCurrentTCBConst>)
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	f01e 0f10 	tst.w	lr, #16
 800fa50:	bf08      	it	eq
 800fa52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5a:	6010      	str	r0, [r2, #0]
 800fa5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fa64:	f380 8811 	msr	BASEPRI, r0
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f7fe fe48 	bl	800e704 <vTaskSwitchContext>
 800fa74:	f04f 0000 	mov.w	r0, #0
 800fa78:	f380 8811 	msr	BASEPRI, r0
 800fa7c:	bc09      	pop	{r0, r3}
 800fa7e:	6819      	ldr	r1, [r3, #0]
 800fa80:	6808      	ldr	r0, [r1, #0]
 800fa82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa86:	f01e 0f10 	tst.w	lr, #16
 800fa8a:	bf08      	it	eq
 800fa8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa90:	f380 8809 	msr	PSP, r0
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	f3af 8000 	nop.w

0800faa0 <pxCurrentTCBConst>:
 800faa0:	24000bd4 	.word	0x24000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800faa4:	bf00      	nop
 800faa6:	bf00      	nop

0800faa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
	__asm volatile
 800faae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	607b      	str	r3, [r7, #4]
}
 800fac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fac2:	f7fe fd65 	bl	800e590 <xTaskIncrementTick>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d003      	beq.n	800fad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800facc:	4b06      	ldr	r3, [pc, #24]	@ (800fae8 <xPortSysTickHandler+0x40>)
 800face:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fad2:	601a      	str	r2, [r3, #0]
 800fad4:	2300      	movs	r3, #0
 800fad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	f383 8811 	msr	BASEPRI, r3
}
 800fade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fae0:	bf00      	nop
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	e000ed04 	.word	0xe000ed04

0800faec <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800faec:	b580      	push	{r7, lr}
 800faee:	b088      	sub	sp, #32
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800faf4:	4b5d      	ldr	r3, [pc, #372]	@ (800fc6c <vPortSuppressTicksAndSleep+0x180>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d902      	bls.n	800fb04 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800fafe:	4b5b      	ldr	r3, [pc, #364]	@ (800fc6c <vPortSuppressTicksAndSleep+0x180>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800fb04:	4b5a      	ldr	r3, [pc, #360]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a59      	ldr	r2, [pc, #356]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fb0a:	f023 0301 	bic.w	r3, r3, #1
 800fb0e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800fb10:	4b58      	ldr	r3, [pc, #352]	@ (800fc74 <vPortSuppressTicksAndSleep+0x188>)
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	3b01      	subs	r3, #1
 800fb18:	4957      	ldr	r1, [pc, #348]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fb1a:	6809      	ldr	r1, [r1, #0]
 800fb1c:	fb01 f303 	mul.w	r3, r1, r3
 800fb20:	4413      	add	r3, r2
 800fb22:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800fb24:	4b55      	ldr	r3, [pc, #340]	@ (800fc7c <vPortSuppressTicksAndSleep+0x190>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	69fa      	ldr	r2, [r7, #28]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d904      	bls.n	800fb38 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800fb2e:	4b53      	ldr	r3, [pc, #332]	@ (800fc7c <vPortSuppressTicksAndSleep+0x190>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	69fa      	ldr	r2, [r7, #28]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800fb38:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800fb3a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800fb3e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800fb42:	f7fe ffc3 	bl	800eacc <eTaskConfirmSleepModeStatus>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d110      	bne.n	800fb6e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800fb4c:	4b49      	ldr	r3, [pc, #292]	@ (800fc74 <vPortSuppressTicksAndSleep+0x188>)
 800fb4e:	4a4c      	ldr	r2, [pc, #304]	@ (800fc80 <vPortSuppressTicksAndSleep+0x194>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800fb54:	4b46      	ldr	r3, [pc, #280]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a45      	ldr	r2, [pc, #276]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fb5a:	f043 0301 	orr.w	r3, r3, #1
 800fb5e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800fb60:	4b45      	ldr	r3, [pc, #276]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a46      	ldr	r2, [pc, #280]	@ (800fc80 <vPortSuppressTicksAndSleep+0x194>)
 800fb66:	3b01      	subs	r3, #1
 800fb68:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800fb6a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800fb6c:	e079      	b.n	800fc62 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800fb6e:	4a44      	ldr	r2, [pc, #272]	@ (800fc80 <vPortSuppressTicksAndSleep+0x194>)
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb74:	4b3f      	ldr	r3, [pc, #252]	@ (800fc74 <vPortSuppressTicksAndSleep+0x188>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800fb7a:	4b3d      	ldr	r3, [pc, #244]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a3c      	ldr	r2, [pc, #240]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fb80:	f043 0301 	orr.w	r3, r3, #1
 800fb84:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	613b      	str	r3, [r7, #16]
 800fb8e:	6938      	ldr	r0, [r7, #16]
 800fb90:	f7f2 f86e 	bl	8001c70 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d004      	beq.n	800fba4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800fb9a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800fb9e:	bf30      	wfi
				__asm volatile( "isb" );
 800fba0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7f2 f86d 	bl	8001c84 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800fbaa:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800fbac:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800fbb0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800fbb4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800fbb6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800fbba:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800fbbe:	4b2c      	ldr	r3, [pc, #176]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fbc0:	2206      	movs	r2, #6
 800fbc2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800fbc4:	4b2a      	ldr	r3, [pc, #168]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d01d      	beq.n	800fc0c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800fbd0:	4b29      	ldr	r3, [pc, #164]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	4b27      	ldr	r3, [pc, #156]	@ (800fc74 <vPortSuppressTicksAndSleep+0x188>)
 800fbd6:	6819      	ldr	r1, [r3, #0]
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	1acb      	subs	r3, r1, r3
 800fbdc:	4413      	add	r3, r2
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800fbe2:	4b26      	ldr	r3, [pc, #152]	@ (800fc7c <vPortSuppressTicksAndSleep+0x190>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d304      	bcc.n	800fbf6 <vPortSuppressTicksAndSleep+0x10a>
 800fbec:	4b22      	ldr	r3, [pc, #136]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d903      	bls.n	800fbfe <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800fbf6:	4b20      	ldr	r3, [pc, #128]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800fbfe:	4a20      	ldr	r2, [pc, #128]	@ (800fc80 <vPortSuppressTicksAndSleep+0x194>)
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	3b01      	subs	r3, #1
 800fc08:	61bb      	str	r3, [r7, #24]
 800fc0a:	e018      	b.n	800fc3e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800fc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	fb03 f202 	mul.w	r2, r3, r2
 800fc16:	4b17      	ldr	r3, [pc, #92]	@ (800fc74 <vPortSuppressTicksAndSleep+0x188>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800fc1e:	4b16      	ldr	r3, [pc, #88]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc28:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	4a12      	ldr	r2, [pc, #72]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fc30:	6812      	ldr	r2, [r2, #0]
 800fc32:	fb03 f202 	mul.w	r2, r3, r2
 800fc36:	4912      	ldr	r1, [pc, #72]	@ (800fc80 <vPortSuppressTicksAndSleep+0x194>)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc74 <vPortSuppressTicksAndSleep+0x188>)
 800fc40:	2200      	movs	r2, #0
 800fc42:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800fc44:	4b0a      	ldr	r3, [pc, #40]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a09      	ldr	r2, [pc, #36]	@ (800fc70 <vPortSuppressTicksAndSleep+0x184>)
 800fc4a:	f043 0301 	orr.w	r3, r3, #1
 800fc4e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800fc50:	69b8      	ldr	r0, [r7, #24]
 800fc52:	f7fe fc75 	bl	800e540 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800fc56:	4b08      	ldr	r3, [pc, #32]	@ (800fc78 <vPortSuppressTicksAndSleep+0x18c>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4a09      	ldr	r2, [pc, #36]	@ (800fc80 <vPortSuppressTicksAndSleep+0x194>)
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800fc60:	b662      	cpsie	i
	}
 800fc62:	bf00      	nop
 800fc64:	3720      	adds	r7, #32
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	24001204 	.word	0x24001204
 800fc70:	e000e010 	.word	0xe000e010
 800fc74:	e000e018 	.word	0xe000e018
 800fc78:	24001200 	.word	0x24001200
 800fc7c:	24001208 	.word	0x24001208
 800fc80:	e000e014 	.word	0xe000e014

0800fc84 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc84:	b480      	push	{r7}
 800fc86:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800fc88:	4b14      	ldr	r3, [pc, #80]	@ (800fcdc <vPortSetupTimerInterrupt+0x58>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a14      	ldr	r2, [pc, #80]	@ (800fce0 <vPortSetupTimerInterrupt+0x5c>)
 800fc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc92:	099b      	lsrs	r3, r3, #6
 800fc94:	4a13      	ldr	r2, [pc, #76]	@ (800fce4 <vPortSetupTimerInterrupt+0x60>)
 800fc96:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800fc98:	4b12      	ldr	r3, [pc, #72]	@ (800fce4 <vPortSetupTimerInterrupt+0x60>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800fca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fca4:	4a10      	ldr	r2, [pc, #64]	@ (800fce8 <vPortSetupTimerInterrupt+0x64>)
 800fca6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800fca8:	4b10      	ldr	r3, [pc, #64]	@ (800fcec <vPortSetupTimerInterrupt+0x68>)
 800fcaa:	222d      	movs	r2, #45	@ 0x2d
 800fcac:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcae:	4b10      	ldr	r3, [pc, #64]	@ (800fcf0 <vPortSetupTimerInterrupt+0x6c>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fcb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fcf4 <vPortSetupTimerInterrupt+0x70>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fcba:	4b08      	ldr	r3, [pc, #32]	@ (800fcdc <vPortSetupTimerInterrupt+0x58>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a08      	ldr	r2, [pc, #32]	@ (800fce0 <vPortSetupTimerInterrupt+0x5c>)
 800fcc0:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc4:	099b      	lsrs	r3, r3, #6
 800fcc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fcf8 <vPortSetupTimerInterrupt+0x74>)
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fccc:	4b08      	ldr	r3, [pc, #32]	@ (800fcf0 <vPortSetupTimerInterrupt+0x6c>)
 800fcce:	2207      	movs	r2, #7
 800fcd0:	601a      	str	r2, [r3, #0]
}
 800fcd2:	bf00      	nop
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	24000000 	.word	0x24000000
 800fce0:	10624dd3 	.word	0x10624dd3
 800fce4:	24001200 	.word	0x24001200
 800fce8:	24001204 	.word	0x24001204
 800fcec:	24001208 	.word	0x24001208
 800fcf0:	e000e010 	.word	0xe000e010
 800fcf4:	e000e018 	.word	0xe000e018
 800fcf8:	e000e014 	.word	0xe000e014

0800fcfc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fcfc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fd0c <vPortEnableVFP+0x10>
 800fd00:	6801      	ldr	r1, [r0, #0]
 800fd02:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fd06:	6001      	str	r1, [r0, #0]
 800fd08:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd0a:	bf00      	nop
 800fd0c:	e000ed88 	.word	0xe000ed88

0800fd10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd16:	f3ef 8305 	mrs	r3, IPSR
 800fd1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b0f      	cmp	r3, #15
 800fd20:	d915      	bls.n	800fd4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd22:	4a18      	ldr	r2, [pc, #96]	@ (800fd84 <vPortValidateInterruptPriority+0x74>)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4413      	add	r3, r2
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd2c:	4b16      	ldr	r3, [pc, #88]	@ (800fd88 <vPortValidateInterruptPriority+0x78>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	7afa      	ldrb	r2, [r7, #11]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d20b      	bcs.n	800fd4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd3a:	f383 8811 	msr	BASEPRI, r3
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f3bf 8f4f 	dsb	sy
 800fd46:	607b      	str	r3, [r7, #4]
}
 800fd48:	bf00      	nop
 800fd4a:	bf00      	nop
 800fd4c:	e7fd      	b.n	800fd4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd4e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd8c <vPortValidateInterruptPriority+0x7c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fd56:	4b0e      	ldr	r3, [pc, #56]	@ (800fd90 <vPortValidateInterruptPriority+0x80>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d90b      	bls.n	800fd76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	603b      	str	r3, [r7, #0]
}
 800fd70:	bf00      	nop
 800fd72:	bf00      	nop
 800fd74:	e7fd      	b.n	800fd72 <vPortValidateInterruptPriority+0x62>
	}
 800fd76:	bf00      	nop
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	e000e3f0 	.word	0xe000e3f0
 800fd88:	2400120c 	.word	0x2400120c
 800fd8c:	e000ed0c 	.word	0xe000ed0c
 800fd90:	24001210 	.word	0x24001210

0800fd94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08a      	sub	sp, #40	@ 0x28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fda0:	f7fe fada 	bl	800e358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fda4:	4b5c      	ldr	r3, [pc, #368]	@ (800ff18 <pvPortMalloc+0x184>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d101      	bne.n	800fdb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fdac:	f000 f924 	bl	800fff8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fdb0:	4b5a      	ldr	r3, [pc, #360]	@ (800ff1c <pvPortMalloc+0x188>)
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4013      	ands	r3, r2
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f040 8095 	bne.w	800fee8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d01e      	beq.n	800fe02 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fdc4:	2208      	movs	r2, #8
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4413      	add	r3, r2
 800fdca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f003 0307 	and.w	r3, r3, #7
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d015      	beq.n	800fe02 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f023 0307 	bic.w	r3, r3, #7
 800fddc:	3308      	adds	r3, #8
 800fdde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f003 0307 	and.w	r3, r3, #7
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00b      	beq.n	800fe02 <pvPortMalloc+0x6e>
	__asm volatile
 800fdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	617b      	str	r3, [r7, #20]
}
 800fdfc:	bf00      	nop
 800fdfe:	bf00      	nop
 800fe00:	e7fd      	b.n	800fdfe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d06f      	beq.n	800fee8 <pvPortMalloc+0x154>
 800fe08:	4b45      	ldr	r3, [pc, #276]	@ (800ff20 <pvPortMalloc+0x18c>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d86a      	bhi.n	800fee8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe12:	4b44      	ldr	r3, [pc, #272]	@ (800ff24 <pvPortMalloc+0x190>)
 800fe14:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe16:	4b43      	ldr	r3, [pc, #268]	@ (800ff24 <pvPortMalloc+0x190>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe1c:	e004      	b.n	800fe28 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe20:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d903      	bls.n	800fe3a <pvPortMalloc+0xa6>
 800fe32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1f1      	bne.n	800fe1e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe3a:	4b37      	ldr	r3, [pc, #220]	@ (800ff18 <pvPortMalloc+0x184>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d051      	beq.n	800fee8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe44:	6a3b      	ldr	r3, [r7, #32]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2208      	movs	r2, #8
 800fe4a:	4413      	add	r3, r2
 800fe4c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	6a3b      	ldr	r3, [r7, #32]
 800fe54:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe58:	685a      	ldr	r2, [r3, #4]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	1ad2      	subs	r2, r2, r3
 800fe5e:	2308      	movs	r3, #8
 800fe60:	005b      	lsls	r3, r3, #1
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d920      	bls.n	800fea8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	f003 0307 	and.w	r3, r3, #7
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00b      	beq.n	800fe90 <pvPortMalloc+0xfc>
	__asm volatile
 800fe78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7c:	f383 8811 	msr	BASEPRI, r3
 800fe80:	f3bf 8f6f 	isb	sy
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	613b      	str	r3, [r7, #16]
}
 800fe8a:	bf00      	nop
 800fe8c:	bf00      	nop
 800fe8e:	e7fd      	b.n	800fe8c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	1ad2      	subs	r2, r2, r3
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fea2:	69b8      	ldr	r0, [r7, #24]
 800fea4:	f000 f90a 	bl	80100bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fea8:	4b1d      	ldr	r3, [pc, #116]	@ (800ff20 <pvPortMalloc+0x18c>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	4a1b      	ldr	r2, [pc, #108]	@ (800ff20 <pvPortMalloc+0x18c>)
 800feb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800feb6:	4b1a      	ldr	r3, [pc, #104]	@ (800ff20 <pvPortMalloc+0x18c>)
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	4b1b      	ldr	r3, [pc, #108]	@ (800ff28 <pvPortMalloc+0x194>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	d203      	bcs.n	800feca <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fec2:	4b17      	ldr	r3, [pc, #92]	@ (800ff20 <pvPortMalloc+0x18c>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a18      	ldr	r2, [pc, #96]	@ (800ff28 <pvPortMalloc+0x194>)
 800fec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800feca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	4b13      	ldr	r3, [pc, #76]	@ (800ff1c <pvPortMalloc+0x188>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	431a      	orrs	r2, r3
 800fed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fede:	4b13      	ldr	r3, [pc, #76]	@ (800ff2c <pvPortMalloc+0x198>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3301      	adds	r3, #1
 800fee4:	4a11      	ldr	r2, [pc, #68]	@ (800ff2c <pvPortMalloc+0x198>)
 800fee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fee8:	f7fe fa7c 	bl	800e3e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	f003 0307 	and.w	r3, r3, #7
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00b      	beq.n	800ff0e <pvPortMalloc+0x17a>
	__asm volatile
 800fef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefa:	f383 8811 	msr	BASEPRI, r3
 800fefe:	f3bf 8f6f 	isb	sy
 800ff02:	f3bf 8f4f 	dsb	sy
 800ff06:	60fb      	str	r3, [r7, #12]
}
 800ff08:	bf00      	nop
 800ff0a:	bf00      	nop
 800ff0c:	e7fd      	b.n	800ff0a <pvPortMalloc+0x176>
	return pvReturn;
 800ff0e:	69fb      	ldr	r3, [r7, #28]
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3728      	adds	r7, #40	@ 0x28
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	24004e1c 	.word	0x24004e1c
 800ff1c:	24004e30 	.word	0x24004e30
 800ff20:	24004e20 	.word	0x24004e20
 800ff24:	24004e14 	.word	0x24004e14
 800ff28:	24004e24 	.word	0x24004e24
 800ff2c:	24004e28 	.word	0x24004e28

0800ff30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d04f      	beq.n	800ffe2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff42:	2308      	movs	r3, #8
 800ff44:	425b      	negs	r3, r3
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	4413      	add	r3, r2
 800ff4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	685a      	ldr	r2, [r3, #4]
 800ff54:	4b25      	ldr	r3, [pc, #148]	@ (800ffec <vPortFree+0xbc>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4013      	ands	r3, r2
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10b      	bne.n	800ff76 <vPortFree+0x46>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	60fb      	str	r3, [r7, #12]
}
 800ff70:	bf00      	nop
 800ff72:	bf00      	nop
 800ff74:	e7fd      	b.n	800ff72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00b      	beq.n	800ff96 <vPortFree+0x66>
	__asm volatile
 800ff7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff82:	f383 8811 	msr	BASEPRI, r3
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	60bb      	str	r3, [r7, #8]
}
 800ff90:	bf00      	nop
 800ff92:	bf00      	nop
 800ff94:	e7fd      	b.n	800ff92 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	685a      	ldr	r2, [r3, #4]
 800ff9a:	4b14      	ldr	r3, [pc, #80]	@ (800ffec <vPortFree+0xbc>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d01e      	beq.n	800ffe2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d11a      	bne.n	800ffe2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	685a      	ldr	r2, [r3, #4]
 800ffb0:	4b0e      	ldr	r3, [pc, #56]	@ (800ffec <vPortFree+0xbc>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	43db      	mvns	r3, r3
 800ffb6:	401a      	ands	r2, r3
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ffbc:	f7fe f9cc 	bl	800e358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	685a      	ldr	r2, [r3, #4]
 800ffc4:	4b0a      	ldr	r3, [pc, #40]	@ (800fff0 <vPortFree+0xc0>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4413      	add	r3, r2
 800ffca:	4a09      	ldr	r2, [pc, #36]	@ (800fff0 <vPortFree+0xc0>)
 800ffcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffce:	6938      	ldr	r0, [r7, #16]
 800ffd0:	f000 f874 	bl	80100bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ffd4:	4b07      	ldr	r3, [pc, #28]	@ (800fff4 <vPortFree+0xc4>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	4a06      	ldr	r2, [pc, #24]	@ (800fff4 <vPortFree+0xc4>)
 800ffdc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ffde:	f7fe fa01 	bl	800e3e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ffe2:	bf00      	nop
 800ffe4:	3718      	adds	r7, #24
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	24004e30 	.word	0x24004e30
 800fff0:	24004e20 	.word	0x24004e20
 800fff4:	24004e2c 	.word	0x24004e2c

0800fff8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fff8:	b480      	push	{r7}
 800fffa:	b085      	sub	sp, #20
 800fffc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fffe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010002:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010004:	4b27      	ldr	r3, [pc, #156]	@ (80100a4 <prvHeapInit+0xac>)
 8010006:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f003 0307 	and.w	r3, r3, #7
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00c      	beq.n	801002c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	3307      	adds	r3, #7
 8010016:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f023 0307 	bic.w	r3, r3, #7
 801001e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	4a1f      	ldr	r2, [pc, #124]	@ (80100a4 <prvHeapInit+0xac>)
 8010028:	4413      	add	r3, r2
 801002a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010030:	4a1d      	ldr	r2, [pc, #116]	@ (80100a8 <prvHeapInit+0xb0>)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010036:	4b1c      	ldr	r3, [pc, #112]	@ (80100a8 <prvHeapInit+0xb0>)
 8010038:	2200      	movs	r2, #0
 801003a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	68ba      	ldr	r2, [r7, #8]
 8010040:	4413      	add	r3, r2
 8010042:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010044:	2208      	movs	r2, #8
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	1a9b      	subs	r3, r3, r2
 801004a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f023 0307 	bic.w	r3, r3, #7
 8010052:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	4a15      	ldr	r2, [pc, #84]	@ (80100ac <prvHeapInit+0xb4>)
 8010058:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801005a:	4b14      	ldr	r3, [pc, #80]	@ (80100ac <prvHeapInit+0xb4>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2200      	movs	r2, #0
 8010060:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010062:	4b12      	ldr	r3, [pc, #72]	@ (80100ac <prvHeapInit+0xb4>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2200      	movs	r2, #0
 8010068:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	1ad2      	subs	r2, r2, r3
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010078:	4b0c      	ldr	r3, [pc, #48]	@ (80100ac <prvHeapInit+0xb4>)
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	4a0a      	ldr	r2, [pc, #40]	@ (80100b0 <prvHeapInit+0xb8>)
 8010086:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	4a09      	ldr	r2, [pc, #36]	@ (80100b4 <prvHeapInit+0xbc>)
 801008e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010090:	4b09      	ldr	r3, [pc, #36]	@ (80100b8 <prvHeapInit+0xc0>)
 8010092:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010096:	601a      	str	r2, [r3, #0]
}
 8010098:	bf00      	nop
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	24001214 	.word	0x24001214
 80100a8:	24004e14 	.word	0x24004e14
 80100ac:	24004e1c 	.word	0x24004e1c
 80100b0:	24004e24 	.word	0x24004e24
 80100b4:	24004e20 	.word	0x24004e20
 80100b8:	24004e30 	.word	0x24004e30

080100bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100bc:	b480      	push	{r7}
 80100be:	b085      	sub	sp, #20
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100c4:	4b28      	ldr	r3, [pc, #160]	@ (8010168 <prvInsertBlockIntoFreeList+0xac>)
 80100c6:	60fb      	str	r3, [r7, #12]
 80100c8:	e002      	b.n	80100d0 <prvInsertBlockIntoFreeList+0x14>
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d8f7      	bhi.n	80100ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	4413      	add	r3, r2
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d108      	bne.n	80100fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	685a      	ldr	r2, [r3, #4]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	441a      	add	r2, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	441a      	add	r2, r3
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	429a      	cmp	r2, r3
 8010110:	d118      	bne.n	8010144 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	4b15      	ldr	r3, [pc, #84]	@ (801016c <prvInsertBlockIntoFreeList+0xb0>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	d00d      	beq.n	801013a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	685a      	ldr	r2, [r3, #4]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	441a      	add	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	601a      	str	r2, [r3, #0]
 8010138:	e008      	b.n	801014c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801013a:	4b0c      	ldr	r3, [pc, #48]	@ (801016c <prvInsertBlockIntoFreeList+0xb0>)
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	e003      	b.n	801014c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	429a      	cmp	r2, r3
 8010152:	d002      	beq.n	801015a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801015a:	bf00      	nop
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	24004e14 	.word	0x24004e14
 801016c:	24004e1c 	.word	0x24004e1c

08010170 <_ZdlPvj>:
 8010170:	f000 b817 	b.w	80101a2 <_ZdlPv>

08010174 <_ZdaPv>:
 8010174:	f000 b815 	b.w	80101a2 <_ZdlPv>

08010178 <_ZdaPvj>:
 8010178:	f7ff bffc 	b.w	8010174 <_ZdaPv>

0801017c <_Znwj>:
 801017c:	2801      	cmp	r0, #1
 801017e:	bf38      	it	cc
 8010180:	2001      	movcc	r0, #1
 8010182:	b510      	push	{r4, lr}
 8010184:	4604      	mov	r4, r0
 8010186:	4620      	mov	r0, r4
 8010188:	f000 f83c 	bl	8010204 <malloc>
 801018c:	b100      	cbz	r0, 8010190 <_Znwj+0x14>
 801018e:	bd10      	pop	{r4, pc}
 8010190:	f000 f80a 	bl	80101a8 <_ZSt15get_new_handlerv>
 8010194:	b908      	cbnz	r0, 801019a <_Znwj+0x1e>
 8010196:	f000 f80f 	bl	80101b8 <abort>
 801019a:	4780      	blx	r0
 801019c:	e7f3      	b.n	8010186 <_Znwj+0xa>

0801019e <_Znaj>:
 801019e:	f7ff bfed 	b.w	801017c <_Znwj>

080101a2 <_ZdlPv>:
 80101a2:	f000 b837 	b.w	8010214 <free>
	...

080101a8 <_ZSt15get_new_handlerv>:
 80101a8:	4b02      	ldr	r3, [pc, #8]	@ (80101b4 <_ZSt15get_new_handlerv+0xc>)
 80101aa:	6818      	ldr	r0, [r3, #0]
 80101ac:	f3bf 8f5b 	dmb	ish
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	24004e34 	.word	0x24004e34

080101b8 <abort>:
 80101b8:	b508      	push	{r3, lr}
 80101ba:	2006      	movs	r0, #6
 80101bc:	f001 f990 	bl	80114e0 <raise>
 80101c0:	2001      	movs	r0, #1
 80101c2:	f7f2 f8bd 	bl	8002340 <_exit>
	...

080101c8 <__assert_func>:
 80101c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101ca:	4614      	mov	r4, r2
 80101cc:	461a      	mov	r2, r3
 80101ce:	4b09      	ldr	r3, [pc, #36]	@ (80101f4 <__assert_func+0x2c>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4605      	mov	r5, r0
 80101d4:	68d8      	ldr	r0, [r3, #12]
 80101d6:	b954      	cbnz	r4, 80101ee <__assert_func+0x26>
 80101d8:	4b07      	ldr	r3, [pc, #28]	@ (80101f8 <__assert_func+0x30>)
 80101da:	461c      	mov	r4, r3
 80101dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101e0:	9100      	str	r1, [sp, #0]
 80101e2:	462b      	mov	r3, r5
 80101e4:	4905      	ldr	r1, [pc, #20]	@ (80101fc <__assert_func+0x34>)
 80101e6:	f000 ffb3 	bl	8011150 <fiprintf>
 80101ea:	f7ff ffe5 	bl	80101b8 <abort>
 80101ee:	4b04      	ldr	r3, [pc, #16]	@ (8010200 <__assert_func+0x38>)
 80101f0:	e7f4      	b.n	80101dc <__assert_func+0x14>
 80101f2:	bf00      	nop
 80101f4:	24000020 	.word	0x24000020
 80101f8:	08015363 	.word	0x08015363
 80101fc:	08015335 	.word	0x08015335
 8010200:	08015328 	.word	0x08015328

08010204 <malloc>:
 8010204:	4b02      	ldr	r3, [pc, #8]	@ (8010210 <malloc+0xc>)
 8010206:	4601      	mov	r1, r0
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	f000 b82d 	b.w	8010268 <_malloc_r>
 801020e:	bf00      	nop
 8010210:	24000020 	.word	0x24000020

08010214 <free>:
 8010214:	4b02      	ldr	r3, [pc, #8]	@ (8010220 <free+0xc>)
 8010216:	4601      	mov	r1, r0
 8010218:	6818      	ldr	r0, [r3, #0]
 801021a:	f002 b84f 	b.w	80122bc <_free_r>
 801021e:	bf00      	nop
 8010220:	24000020 	.word	0x24000020

08010224 <sbrk_aligned>:
 8010224:	b570      	push	{r4, r5, r6, lr}
 8010226:	4e0f      	ldr	r6, [pc, #60]	@ (8010264 <sbrk_aligned+0x40>)
 8010228:	460c      	mov	r4, r1
 801022a:	6831      	ldr	r1, [r6, #0]
 801022c:	4605      	mov	r5, r0
 801022e:	b911      	cbnz	r1, 8010236 <sbrk_aligned+0x12>
 8010230:	f001 fa00 	bl	8011634 <_sbrk_r>
 8010234:	6030      	str	r0, [r6, #0]
 8010236:	4621      	mov	r1, r4
 8010238:	4628      	mov	r0, r5
 801023a:	f001 f9fb 	bl	8011634 <_sbrk_r>
 801023e:	1c43      	adds	r3, r0, #1
 8010240:	d103      	bne.n	801024a <sbrk_aligned+0x26>
 8010242:	f04f 34ff 	mov.w	r4, #4294967295
 8010246:	4620      	mov	r0, r4
 8010248:	bd70      	pop	{r4, r5, r6, pc}
 801024a:	1cc4      	adds	r4, r0, #3
 801024c:	f024 0403 	bic.w	r4, r4, #3
 8010250:	42a0      	cmp	r0, r4
 8010252:	d0f8      	beq.n	8010246 <sbrk_aligned+0x22>
 8010254:	1a21      	subs	r1, r4, r0
 8010256:	4628      	mov	r0, r5
 8010258:	f001 f9ec 	bl	8011634 <_sbrk_r>
 801025c:	3001      	adds	r0, #1
 801025e:	d1f2      	bne.n	8010246 <sbrk_aligned+0x22>
 8010260:	e7ef      	b.n	8010242 <sbrk_aligned+0x1e>
 8010262:	bf00      	nop
 8010264:	24004e38 	.word	0x24004e38

08010268 <_malloc_r>:
 8010268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801026c:	1ccd      	adds	r5, r1, #3
 801026e:	f025 0503 	bic.w	r5, r5, #3
 8010272:	3508      	adds	r5, #8
 8010274:	2d0c      	cmp	r5, #12
 8010276:	bf38      	it	cc
 8010278:	250c      	movcc	r5, #12
 801027a:	2d00      	cmp	r5, #0
 801027c:	4606      	mov	r6, r0
 801027e:	db01      	blt.n	8010284 <_malloc_r+0x1c>
 8010280:	42a9      	cmp	r1, r5
 8010282:	d904      	bls.n	801028e <_malloc_r+0x26>
 8010284:	230c      	movs	r3, #12
 8010286:	6033      	str	r3, [r6, #0]
 8010288:	2000      	movs	r0, #0
 801028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801028e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010364 <_malloc_r+0xfc>
 8010292:	f000 f869 	bl	8010368 <__malloc_lock>
 8010296:	f8d8 3000 	ldr.w	r3, [r8]
 801029a:	461c      	mov	r4, r3
 801029c:	bb44      	cbnz	r4, 80102f0 <_malloc_r+0x88>
 801029e:	4629      	mov	r1, r5
 80102a0:	4630      	mov	r0, r6
 80102a2:	f7ff ffbf 	bl	8010224 <sbrk_aligned>
 80102a6:	1c43      	adds	r3, r0, #1
 80102a8:	4604      	mov	r4, r0
 80102aa:	d158      	bne.n	801035e <_malloc_r+0xf6>
 80102ac:	f8d8 4000 	ldr.w	r4, [r8]
 80102b0:	4627      	mov	r7, r4
 80102b2:	2f00      	cmp	r7, #0
 80102b4:	d143      	bne.n	801033e <_malloc_r+0xd6>
 80102b6:	2c00      	cmp	r4, #0
 80102b8:	d04b      	beq.n	8010352 <_malloc_r+0xea>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	4639      	mov	r1, r7
 80102be:	4630      	mov	r0, r6
 80102c0:	eb04 0903 	add.w	r9, r4, r3
 80102c4:	f001 f9b6 	bl	8011634 <_sbrk_r>
 80102c8:	4581      	cmp	r9, r0
 80102ca:	d142      	bne.n	8010352 <_malloc_r+0xea>
 80102cc:	6821      	ldr	r1, [r4, #0]
 80102ce:	1a6d      	subs	r5, r5, r1
 80102d0:	4629      	mov	r1, r5
 80102d2:	4630      	mov	r0, r6
 80102d4:	f7ff ffa6 	bl	8010224 <sbrk_aligned>
 80102d8:	3001      	adds	r0, #1
 80102da:	d03a      	beq.n	8010352 <_malloc_r+0xea>
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	442b      	add	r3, r5
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	f8d8 3000 	ldr.w	r3, [r8]
 80102e6:	685a      	ldr	r2, [r3, #4]
 80102e8:	bb62      	cbnz	r2, 8010344 <_malloc_r+0xdc>
 80102ea:	f8c8 7000 	str.w	r7, [r8]
 80102ee:	e00f      	b.n	8010310 <_malloc_r+0xa8>
 80102f0:	6822      	ldr	r2, [r4, #0]
 80102f2:	1b52      	subs	r2, r2, r5
 80102f4:	d420      	bmi.n	8010338 <_malloc_r+0xd0>
 80102f6:	2a0b      	cmp	r2, #11
 80102f8:	d917      	bls.n	801032a <_malloc_r+0xc2>
 80102fa:	1961      	adds	r1, r4, r5
 80102fc:	42a3      	cmp	r3, r4
 80102fe:	6025      	str	r5, [r4, #0]
 8010300:	bf18      	it	ne
 8010302:	6059      	strne	r1, [r3, #4]
 8010304:	6863      	ldr	r3, [r4, #4]
 8010306:	bf08      	it	eq
 8010308:	f8c8 1000 	streq.w	r1, [r8]
 801030c:	5162      	str	r2, [r4, r5]
 801030e:	604b      	str	r3, [r1, #4]
 8010310:	4630      	mov	r0, r6
 8010312:	f000 f82f 	bl	8010374 <__malloc_unlock>
 8010316:	f104 000b 	add.w	r0, r4, #11
 801031a:	1d23      	adds	r3, r4, #4
 801031c:	f020 0007 	bic.w	r0, r0, #7
 8010320:	1ac2      	subs	r2, r0, r3
 8010322:	bf1c      	itt	ne
 8010324:	1a1b      	subne	r3, r3, r0
 8010326:	50a3      	strne	r3, [r4, r2]
 8010328:	e7af      	b.n	801028a <_malloc_r+0x22>
 801032a:	6862      	ldr	r2, [r4, #4]
 801032c:	42a3      	cmp	r3, r4
 801032e:	bf0c      	ite	eq
 8010330:	f8c8 2000 	streq.w	r2, [r8]
 8010334:	605a      	strne	r2, [r3, #4]
 8010336:	e7eb      	b.n	8010310 <_malloc_r+0xa8>
 8010338:	4623      	mov	r3, r4
 801033a:	6864      	ldr	r4, [r4, #4]
 801033c:	e7ae      	b.n	801029c <_malloc_r+0x34>
 801033e:	463c      	mov	r4, r7
 8010340:	687f      	ldr	r7, [r7, #4]
 8010342:	e7b6      	b.n	80102b2 <_malloc_r+0x4a>
 8010344:	461a      	mov	r2, r3
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	42a3      	cmp	r3, r4
 801034a:	d1fb      	bne.n	8010344 <_malloc_r+0xdc>
 801034c:	2300      	movs	r3, #0
 801034e:	6053      	str	r3, [r2, #4]
 8010350:	e7de      	b.n	8010310 <_malloc_r+0xa8>
 8010352:	230c      	movs	r3, #12
 8010354:	6033      	str	r3, [r6, #0]
 8010356:	4630      	mov	r0, r6
 8010358:	f000 f80c 	bl	8010374 <__malloc_unlock>
 801035c:	e794      	b.n	8010288 <_malloc_r+0x20>
 801035e:	6005      	str	r5, [r0, #0]
 8010360:	e7d6      	b.n	8010310 <_malloc_r+0xa8>
 8010362:	bf00      	nop
 8010364:	24004e3c 	.word	0x24004e3c

08010368 <__malloc_lock>:
 8010368:	4801      	ldr	r0, [pc, #4]	@ (8010370 <__malloc_lock+0x8>)
 801036a:	f001 b9b0 	b.w	80116ce <__retarget_lock_acquire_recursive>
 801036e:	bf00      	nop
 8010370:	24004f80 	.word	0x24004f80

08010374 <__malloc_unlock>:
 8010374:	4801      	ldr	r0, [pc, #4]	@ (801037c <__malloc_unlock+0x8>)
 8010376:	f001 b9ab 	b.w	80116d0 <__retarget_lock_release_recursive>
 801037a:	bf00      	nop
 801037c:	24004f80 	.word	0x24004f80

08010380 <__cvt>:
 8010380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010382:	ed2d 8b02 	vpush	{d8}
 8010386:	eeb0 8b40 	vmov.f64	d8, d0
 801038a:	b085      	sub	sp, #20
 801038c:	4617      	mov	r7, r2
 801038e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010390:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010392:	ee18 2a90 	vmov	r2, s17
 8010396:	f025 0520 	bic.w	r5, r5, #32
 801039a:	2a00      	cmp	r2, #0
 801039c:	bfb6      	itet	lt
 801039e:	222d      	movlt	r2, #45	@ 0x2d
 80103a0:	2200      	movge	r2, #0
 80103a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80103a6:	2d46      	cmp	r5, #70	@ 0x46
 80103a8:	460c      	mov	r4, r1
 80103aa:	701a      	strb	r2, [r3, #0]
 80103ac:	d004      	beq.n	80103b8 <__cvt+0x38>
 80103ae:	2d45      	cmp	r5, #69	@ 0x45
 80103b0:	d100      	bne.n	80103b4 <__cvt+0x34>
 80103b2:	3401      	adds	r4, #1
 80103b4:	2102      	movs	r1, #2
 80103b6:	e000      	b.n	80103ba <__cvt+0x3a>
 80103b8:	2103      	movs	r1, #3
 80103ba:	ab03      	add	r3, sp, #12
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	ab02      	add	r3, sp, #8
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	4622      	mov	r2, r4
 80103c4:	4633      	mov	r3, r6
 80103c6:	eeb0 0b48 	vmov.f64	d0, d8
 80103ca:	f001 fa21 	bl	8011810 <_dtoa_r>
 80103ce:	2d47      	cmp	r5, #71	@ 0x47
 80103d0:	d114      	bne.n	80103fc <__cvt+0x7c>
 80103d2:	07fb      	lsls	r3, r7, #31
 80103d4:	d50a      	bpl.n	80103ec <__cvt+0x6c>
 80103d6:	1902      	adds	r2, r0, r4
 80103d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e0:	bf08      	it	eq
 80103e2:	9203      	streq	r2, [sp, #12]
 80103e4:	2130      	movs	r1, #48	@ 0x30
 80103e6:	9b03      	ldr	r3, [sp, #12]
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d319      	bcc.n	8010420 <__cvt+0xa0>
 80103ec:	9b03      	ldr	r3, [sp, #12]
 80103ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103f0:	1a1b      	subs	r3, r3, r0
 80103f2:	6013      	str	r3, [r2, #0]
 80103f4:	b005      	add	sp, #20
 80103f6:	ecbd 8b02 	vpop	{d8}
 80103fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103fc:	2d46      	cmp	r5, #70	@ 0x46
 80103fe:	eb00 0204 	add.w	r2, r0, r4
 8010402:	d1e9      	bne.n	80103d8 <__cvt+0x58>
 8010404:	7803      	ldrb	r3, [r0, #0]
 8010406:	2b30      	cmp	r3, #48	@ 0x30
 8010408:	d107      	bne.n	801041a <__cvt+0x9a>
 801040a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010412:	bf1c      	itt	ne
 8010414:	f1c4 0401 	rsbne	r4, r4, #1
 8010418:	6034      	strne	r4, [r6, #0]
 801041a:	6833      	ldr	r3, [r6, #0]
 801041c:	441a      	add	r2, r3
 801041e:	e7db      	b.n	80103d8 <__cvt+0x58>
 8010420:	1c5c      	adds	r4, r3, #1
 8010422:	9403      	str	r4, [sp, #12]
 8010424:	7019      	strb	r1, [r3, #0]
 8010426:	e7de      	b.n	80103e6 <__cvt+0x66>

08010428 <__exponent>:
 8010428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801042a:	2900      	cmp	r1, #0
 801042c:	bfba      	itte	lt
 801042e:	4249      	neglt	r1, r1
 8010430:	232d      	movlt	r3, #45	@ 0x2d
 8010432:	232b      	movge	r3, #43	@ 0x2b
 8010434:	2909      	cmp	r1, #9
 8010436:	7002      	strb	r2, [r0, #0]
 8010438:	7043      	strb	r3, [r0, #1]
 801043a:	dd29      	ble.n	8010490 <__exponent+0x68>
 801043c:	f10d 0307 	add.w	r3, sp, #7
 8010440:	461d      	mov	r5, r3
 8010442:	270a      	movs	r7, #10
 8010444:	461a      	mov	r2, r3
 8010446:	fbb1 f6f7 	udiv	r6, r1, r7
 801044a:	fb07 1416 	mls	r4, r7, r6, r1
 801044e:	3430      	adds	r4, #48	@ 0x30
 8010450:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010454:	460c      	mov	r4, r1
 8010456:	2c63      	cmp	r4, #99	@ 0x63
 8010458:	f103 33ff 	add.w	r3, r3, #4294967295
 801045c:	4631      	mov	r1, r6
 801045e:	dcf1      	bgt.n	8010444 <__exponent+0x1c>
 8010460:	3130      	adds	r1, #48	@ 0x30
 8010462:	1e94      	subs	r4, r2, #2
 8010464:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010468:	1c41      	adds	r1, r0, #1
 801046a:	4623      	mov	r3, r4
 801046c:	42ab      	cmp	r3, r5
 801046e:	d30a      	bcc.n	8010486 <__exponent+0x5e>
 8010470:	f10d 0309 	add.w	r3, sp, #9
 8010474:	1a9b      	subs	r3, r3, r2
 8010476:	42ac      	cmp	r4, r5
 8010478:	bf88      	it	hi
 801047a:	2300      	movhi	r3, #0
 801047c:	3302      	adds	r3, #2
 801047e:	4403      	add	r3, r0
 8010480:	1a18      	subs	r0, r3, r0
 8010482:	b003      	add	sp, #12
 8010484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010486:	f813 6b01 	ldrb.w	r6, [r3], #1
 801048a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801048e:	e7ed      	b.n	801046c <__exponent+0x44>
 8010490:	2330      	movs	r3, #48	@ 0x30
 8010492:	3130      	adds	r1, #48	@ 0x30
 8010494:	7083      	strb	r3, [r0, #2]
 8010496:	70c1      	strb	r1, [r0, #3]
 8010498:	1d03      	adds	r3, r0, #4
 801049a:	e7f1      	b.n	8010480 <__exponent+0x58>
 801049c:	0000      	movs	r0, r0
	...

080104a0 <_printf_float>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	b08d      	sub	sp, #52	@ 0x34
 80104a6:	460c      	mov	r4, r1
 80104a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80104ac:	4616      	mov	r6, r2
 80104ae:	461f      	mov	r7, r3
 80104b0:	4605      	mov	r5, r0
 80104b2:	f001 f81d 	bl	80114f0 <_localeconv_r>
 80104b6:	f8d0 b000 	ldr.w	fp, [r0]
 80104ba:	4658      	mov	r0, fp
 80104bc:	f7ef ff68 	bl	8000390 <strlen>
 80104c0:	2300      	movs	r3, #0
 80104c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c4:	f8d8 3000 	ldr.w	r3, [r8]
 80104c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80104cc:	6822      	ldr	r2, [r4, #0]
 80104ce:	9005      	str	r0, [sp, #20]
 80104d0:	3307      	adds	r3, #7
 80104d2:	f023 0307 	bic.w	r3, r3, #7
 80104d6:	f103 0108 	add.w	r1, r3, #8
 80104da:	f8c8 1000 	str.w	r1, [r8]
 80104de:	ed93 0b00 	vldr	d0, [r3]
 80104e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8010740 <_printf_float+0x2a0>
 80104e6:	eeb0 7bc0 	vabs.f64	d7, d0
 80104ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80104ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80104f6:	dd24      	ble.n	8010542 <_printf_float+0xa2>
 80104f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80104fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010500:	d502      	bpl.n	8010508 <_printf_float+0x68>
 8010502:	232d      	movs	r3, #45	@ 0x2d
 8010504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010508:	498f      	ldr	r1, [pc, #572]	@ (8010748 <_printf_float+0x2a8>)
 801050a:	4b90      	ldr	r3, [pc, #576]	@ (801074c <_printf_float+0x2ac>)
 801050c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010510:	bf94      	ite	ls
 8010512:	4688      	movls	r8, r1
 8010514:	4698      	movhi	r8, r3
 8010516:	f022 0204 	bic.w	r2, r2, #4
 801051a:	2303      	movs	r3, #3
 801051c:	6123      	str	r3, [r4, #16]
 801051e:	6022      	str	r2, [r4, #0]
 8010520:	f04f 0a00 	mov.w	sl, #0
 8010524:	9700      	str	r7, [sp, #0]
 8010526:	4633      	mov	r3, r6
 8010528:	aa0b      	add	r2, sp, #44	@ 0x2c
 801052a:	4621      	mov	r1, r4
 801052c:	4628      	mov	r0, r5
 801052e:	f000 f9d1 	bl	80108d4 <_printf_common>
 8010532:	3001      	adds	r0, #1
 8010534:	f040 8089 	bne.w	801064a <_printf_float+0x1aa>
 8010538:	f04f 30ff 	mov.w	r0, #4294967295
 801053c:	b00d      	add	sp, #52	@ 0x34
 801053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010542:	eeb4 0b40 	vcmp.f64	d0, d0
 8010546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054a:	d709      	bvc.n	8010560 <_printf_float+0xc0>
 801054c:	ee10 3a90 	vmov	r3, s1
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfbc      	itt	lt
 8010554:	232d      	movlt	r3, #45	@ 0x2d
 8010556:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801055a:	497d      	ldr	r1, [pc, #500]	@ (8010750 <_printf_float+0x2b0>)
 801055c:	4b7d      	ldr	r3, [pc, #500]	@ (8010754 <_printf_float+0x2b4>)
 801055e:	e7d5      	b.n	801050c <_printf_float+0x6c>
 8010560:	6863      	ldr	r3, [r4, #4]
 8010562:	1c59      	adds	r1, r3, #1
 8010564:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010568:	d139      	bne.n	80105de <_printf_float+0x13e>
 801056a:	2306      	movs	r3, #6
 801056c:	6063      	str	r3, [r4, #4]
 801056e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010572:	2300      	movs	r3, #0
 8010574:	6022      	str	r2, [r4, #0]
 8010576:	9303      	str	r3, [sp, #12]
 8010578:	ab0a      	add	r3, sp, #40	@ 0x28
 801057a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801057e:	ab09      	add	r3, sp, #36	@ 0x24
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	6861      	ldr	r1, [r4, #4]
 8010584:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010588:	4628      	mov	r0, r5
 801058a:	f7ff fef9 	bl	8010380 <__cvt>
 801058e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010592:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010594:	4680      	mov	r8, r0
 8010596:	d129      	bne.n	80105ec <_printf_float+0x14c>
 8010598:	1cc8      	adds	r0, r1, #3
 801059a:	db02      	blt.n	80105a2 <_printf_float+0x102>
 801059c:	6863      	ldr	r3, [r4, #4]
 801059e:	4299      	cmp	r1, r3
 80105a0:	dd41      	ble.n	8010626 <_printf_float+0x186>
 80105a2:	f1a9 0902 	sub.w	r9, r9, #2
 80105a6:	fa5f f989 	uxtb.w	r9, r9
 80105aa:	3901      	subs	r1, #1
 80105ac:	464a      	mov	r2, r9
 80105ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80105b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80105b4:	f7ff ff38 	bl	8010428 <__exponent>
 80105b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105ba:	1813      	adds	r3, r2, r0
 80105bc:	2a01      	cmp	r2, #1
 80105be:	4682      	mov	sl, r0
 80105c0:	6123      	str	r3, [r4, #16]
 80105c2:	dc02      	bgt.n	80105ca <_printf_float+0x12a>
 80105c4:	6822      	ldr	r2, [r4, #0]
 80105c6:	07d2      	lsls	r2, r2, #31
 80105c8:	d501      	bpl.n	80105ce <_printf_float+0x12e>
 80105ca:	3301      	adds	r3, #1
 80105cc:	6123      	str	r3, [r4, #16]
 80105ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0a6      	beq.n	8010524 <_printf_float+0x84>
 80105d6:	232d      	movs	r3, #45	@ 0x2d
 80105d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105dc:	e7a2      	b.n	8010524 <_printf_float+0x84>
 80105de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80105e2:	d1c4      	bne.n	801056e <_printf_float+0xce>
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1c2      	bne.n	801056e <_printf_float+0xce>
 80105e8:	2301      	movs	r3, #1
 80105ea:	e7bf      	b.n	801056c <_printf_float+0xcc>
 80105ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80105f0:	d9db      	bls.n	80105aa <_printf_float+0x10a>
 80105f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80105f6:	d118      	bne.n	801062a <_printf_float+0x18a>
 80105f8:	2900      	cmp	r1, #0
 80105fa:	6863      	ldr	r3, [r4, #4]
 80105fc:	dd0b      	ble.n	8010616 <_printf_float+0x176>
 80105fe:	6121      	str	r1, [r4, #16]
 8010600:	b913      	cbnz	r3, 8010608 <_printf_float+0x168>
 8010602:	6822      	ldr	r2, [r4, #0]
 8010604:	07d0      	lsls	r0, r2, #31
 8010606:	d502      	bpl.n	801060e <_printf_float+0x16e>
 8010608:	3301      	adds	r3, #1
 801060a:	440b      	add	r3, r1
 801060c:	6123      	str	r3, [r4, #16]
 801060e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010610:	f04f 0a00 	mov.w	sl, #0
 8010614:	e7db      	b.n	80105ce <_printf_float+0x12e>
 8010616:	b913      	cbnz	r3, 801061e <_printf_float+0x17e>
 8010618:	6822      	ldr	r2, [r4, #0]
 801061a:	07d2      	lsls	r2, r2, #31
 801061c:	d501      	bpl.n	8010622 <_printf_float+0x182>
 801061e:	3302      	adds	r3, #2
 8010620:	e7f4      	b.n	801060c <_printf_float+0x16c>
 8010622:	2301      	movs	r3, #1
 8010624:	e7f2      	b.n	801060c <_printf_float+0x16c>
 8010626:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801062a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801062c:	4299      	cmp	r1, r3
 801062e:	db05      	blt.n	801063c <_printf_float+0x19c>
 8010630:	6823      	ldr	r3, [r4, #0]
 8010632:	6121      	str	r1, [r4, #16]
 8010634:	07d8      	lsls	r0, r3, #31
 8010636:	d5ea      	bpl.n	801060e <_printf_float+0x16e>
 8010638:	1c4b      	adds	r3, r1, #1
 801063a:	e7e7      	b.n	801060c <_printf_float+0x16c>
 801063c:	2900      	cmp	r1, #0
 801063e:	bfd4      	ite	le
 8010640:	f1c1 0202 	rsble	r2, r1, #2
 8010644:	2201      	movgt	r2, #1
 8010646:	4413      	add	r3, r2
 8010648:	e7e0      	b.n	801060c <_printf_float+0x16c>
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	055a      	lsls	r2, r3, #21
 801064e:	d407      	bmi.n	8010660 <_printf_float+0x1c0>
 8010650:	6923      	ldr	r3, [r4, #16]
 8010652:	4642      	mov	r2, r8
 8010654:	4631      	mov	r1, r6
 8010656:	4628      	mov	r0, r5
 8010658:	47b8      	blx	r7
 801065a:	3001      	adds	r0, #1
 801065c:	d12a      	bne.n	80106b4 <_printf_float+0x214>
 801065e:	e76b      	b.n	8010538 <_printf_float+0x98>
 8010660:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010664:	f240 80e0 	bls.w	8010828 <_printf_float+0x388>
 8010668:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801066c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010674:	d133      	bne.n	80106de <_printf_float+0x23e>
 8010676:	4a38      	ldr	r2, [pc, #224]	@ (8010758 <_printf_float+0x2b8>)
 8010678:	2301      	movs	r3, #1
 801067a:	4631      	mov	r1, r6
 801067c:	4628      	mov	r0, r5
 801067e:	47b8      	blx	r7
 8010680:	3001      	adds	r0, #1
 8010682:	f43f af59 	beq.w	8010538 <_printf_float+0x98>
 8010686:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801068a:	4543      	cmp	r3, r8
 801068c:	db02      	blt.n	8010694 <_printf_float+0x1f4>
 801068e:	6823      	ldr	r3, [r4, #0]
 8010690:	07d8      	lsls	r0, r3, #31
 8010692:	d50f      	bpl.n	80106b4 <_printf_float+0x214>
 8010694:	9b05      	ldr	r3, [sp, #20]
 8010696:	465a      	mov	r2, fp
 8010698:	4631      	mov	r1, r6
 801069a:	4628      	mov	r0, r5
 801069c:	47b8      	blx	r7
 801069e:	3001      	adds	r0, #1
 80106a0:	f43f af4a 	beq.w	8010538 <_printf_float+0x98>
 80106a4:	f04f 0900 	mov.w	r9, #0
 80106a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80106ac:	f104 0a1a 	add.w	sl, r4, #26
 80106b0:	45c8      	cmp	r8, r9
 80106b2:	dc09      	bgt.n	80106c8 <_printf_float+0x228>
 80106b4:	6823      	ldr	r3, [r4, #0]
 80106b6:	079b      	lsls	r3, r3, #30
 80106b8:	f100 8107 	bmi.w	80108ca <_printf_float+0x42a>
 80106bc:	68e0      	ldr	r0, [r4, #12]
 80106be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106c0:	4298      	cmp	r0, r3
 80106c2:	bfb8      	it	lt
 80106c4:	4618      	movlt	r0, r3
 80106c6:	e739      	b.n	801053c <_printf_float+0x9c>
 80106c8:	2301      	movs	r3, #1
 80106ca:	4652      	mov	r2, sl
 80106cc:	4631      	mov	r1, r6
 80106ce:	4628      	mov	r0, r5
 80106d0:	47b8      	blx	r7
 80106d2:	3001      	adds	r0, #1
 80106d4:	f43f af30 	beq.w	8010538 <_printf_float+0x98>
 80106d8:	f109 0901 	add.w	r9, r9, #1
 80106dc:	e7e8      	b.n	80106b0 <_printf_float+0x210>
 80106de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	dc3b      	bgt.n	801075c <_printf_float+0x2bc>
 80106e4:	4a1c      	ldr	r2, [pc, #112]	@ (8010758 <_printf_float+0x2b8>)
 80106e6:	2301      	movs	r3, #1
 80106e8:	4631      	mov	r1, r6
 80106ea:	4628      	mov	r0, r5
 80106ec:	47b8      	blx	r7
 80106ee:	3001      	adds	r0, #1
 80106f0:	f43f af22 	beq.w	8010538 <_printf_float+0x98>
 80106f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80106f8:	ea59 0303 	orrs.w	r3, r9, r3
 80106fc:	d102      	bne.n	8010704 <_printf_float+0x264>
 80106fe:	6823      	ldr	r3, [r4, #0]
 8010700:	07d9      	lsls	r1, r3, #31
 8010702:	d5d7      	bpl.n	80106b4 <_printf_float+0x214>
 8010704:	9b05      	ldr	r3, [sp, #20]
 8010706:	465a      	mov	r2, fp
 8010708:	4631      	mov	r1, r6
 801070a:	4628      	mov	r0, r5
 801070c:	47b8      	blx	r7
 801070e:	3001      	adds	r0, #1
 8010710:	f43f af12 	beq.w	8010538 <_printf_float+0x98>
 8010714:	f04f 0a00 	mov.w	sl, #0
 8010718:	f104 0b1a 	add.w	fp, r4, #26
 801071c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801071e:	425b      	negs	r3, r3
 8010720:	4553      	cmp	r3, sl
 8010722:	dc01      	bgt.n	8010728 <_printf_float+0x288>
 8010724:	464b      	mov	r3, r9
 8010726:	e794      	b.n	8010652 <_printf_float+0x1b2>
 8010728:	2301      	movs	r3, #1
 801072a:	465a      	mov	r2, fp
 801072c:	4631      	mov	r1, r6
 801072e:	4628      	mov	r0, r5
 8010730:	47b8      	blx	r7
 8010732:	3001      	adds	r0, #1
 8010734:	f43f af00 	beq.w	8010538 <_printf_float+0x98>
 8010738:	f10a 0a01 	add.w	sl, sl, #1
 801073c:	e7ee      	b.n	801071c <_printf_float+0x27c>
 801073e:	bf00      	nop
 8010740:	ffffffff 	.word	0xffffffff
 8010744:	7fefffff 	.word	0x7fefffff
 8010748:	08015364 	.word	0x08015364
 801074c:	08015368 	.word	0x08015368
 8010750:	0801536c 	.word	0x0801536c
 8010754:	08015370 	.word	0x08015370
 8010758:	08015374 	.word	0x08015374
 801075c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801075e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010762:	4553      	cmp	r3, sl
 8010764:	bfa8      	it	ge
 8010766:	4653      	movge	r3, sl
 8010768:	2b00      	cmp	r3, #0
 801076a:	4699      	mov	r9, r3
 801076c:	dc37      	bgt.n	80107de <_printf_float+0x33e>
 801076e:	2300      	movs	r3, #0
 8010770:	9307      	str	r3, [sp, #28]
 8010772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010776:	f104 021a 	add.w	r2, r4, #26
 801077a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801077c:	9907      	ldr	r1, [sp, #28]
 801077e:	9306      	str	r3, [sp, #24]
 8010780:	eba3 0309 	sub.w	r3, r3, r9
 8010784:	428b      	cmp	r3, r1
 8010786:	dc31      	bgt.n	80107ec <_printf_float+0x34c>
 8010788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801078a:	459a      	cmp	sl, r3
 801078c:	dc3b      	bgt.n	8010806 <_printf_float+0x366>
 801078e:	6823      	ldr	r3, [r4, #0]
 8010790:	07da      	lsls	r2, r3, #31
 8010792:	d438      	bmi.n	8010806 <_printf_float+0x366>
 8010794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010796:	ebaa 0903 	sub.w	r9, sl, r3
 801079a:	9b06      	ldr	r3, [sp, #24]
 801079c:	ebaa 0303 	sub.w	r3, sl, r3
 80107a0:	4599      	cmp	r9, r3
 80107a2:	bfa8      	it	ge
 80107a4:	4699      	movge	r9, r3
 80107a6:	f1b9 0f00 	cmp.w	r9, #0
 80107aa:	dc34      	bgt.n	8010816 <_printf_float+0x376>
 80107ac:	f04f 0800 	mov.w	r8, #0
 80107b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107b4:	f104 0b1a 	add.w	fp, r4, #26
 80107b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ba:	ebaa 0303 	sub.w	r3, sl, r3
 80107be:	eba3 0309 	sub.w	r3, r3, r9
 80107c2:	4543      	cmp	r3, r8
 80107c4:	f77f af76 	ble.w	80106b4 <_printf_float+0x214>
 80107c8:	2301      	movs	r3, #1
 80107ca:	465a      	mov	r2, fp
 80107cc:	4631      	mov	r1, r6
 80107ce:	4628      	mov	r0, r5
 80107d0:	47b8      	blx	r7
 80107d2:	3001      	adds	r0, #1
 80107d4:	f43f aeb0 	beq.w	8010538 <_printf_float+0x98>
 80107d8:	f108 0801 	add.w	r8, r8, #1
 80107dc:	e7ec      	b.n	80107b8 <_printf_float+0x318>
 80107de:	4642      	mov	r2, r8
 80107e0:	4631      	mov	r1, r6
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b8      	blx	r7
 80107e6:	3001      	adds	r0, #1
 80107e8:	d1c1      	bne.n	801076e <_printf_float+0x2ce>
 80107ea:	e6a5      	b.n	8010538 <_printf_float+0x98>
 80107ec:	2301      	movs	r3, #1
 80107ee:	4631      	mov	r1, r6
 80107f0:	4628      	mov	r0, r5
 80107f2:	9206      	str	r2, [sp, #24]
 80107f4:	47b8      	blx	r7
 80107f6:	3001      	adds	r0, #1
 80107f8:	f43f ae9e 	beq.w	8010538 <_printf_float+0x98>
 80107fc:	9b07      	ldr	r3, [sp, #28]
 80107fe:	9a06      	ldr	r2, [sp, #24]
 8010800:	3301      	adds	r3, #1
 8010802:	9307      	str	r3, [sp, #28]
 8010804:	e7b9      	b.n	801077a <_printf_float+0x2da>
 8010806:	9b05      	ldr	r3, [sp, #20]
 8010808:	465a      	mov	r2, fp
 801080a:	4631      	mov	r1, r6
 801080c:	4628      	mov	r0, r5
 801080e:	47b8      	blx	r7
 8010810:	3001      	adds	r0, #1
 8010812:	d1bf      	bne.n	8010794 <_printf_float+0x2f4>
 8010814:	e690      	b.n	8010538 <_printf_float+0x98>
 8010816:	9a06      	ldr	r2, [sp, #24]
 8010818:	464b      	mov	r3, r9
 801081a:	4442      	add	r2, r8
 801081c:	4631      	mov	r1, r6
 801081e:	4628      	mov	r0, r5
 8010820:	47b8      	blx	r7
 8010822:	3001      	adds	r0, #1
 8010824:	d1c2      	bne.n	80107ac <_printf_float+0x30c>
 8010826:	e687      	b.n	8010538 <_printf_float+0x98>
 8010828:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801082c:	f1b9 0f01 	cmp.w	r9, #1
 8010830:	dc01      	bgt.n	8010836 <_printf_float+0x396>
 8010832:	07db      	lsls	r3, r3, #31
 8010834:	d536      	bpl.n	80108a4 <_printf_float+0x404>
 8010836:	2301      	movs	r3, #1
 8010838:	4642      	mov	r2, r8
 801083a:	4631      	mov	r1, r6
 801083c:	4628      	mov	r0, r5
 801083e:	47b8      	blx	r7
 8010840:	3001      	adds	r0, #1
 8010842:	f43f ae79 	beq.w	8010538 <_printf_float+0x98>
 8010846:	9b05      	ldr	r3, [sp, #20]
 8010848:	465a      	mov	r2, fp
 801084a:	4631      	mov	r1, r6
 801084c:	4628      	mov	r0, r5
 801084e:	47b8      	blx	r7
 8010850:	3001      	adds	r0, #1
 8010852:	f43f ae71 	beq.w	8010538 <_printf_float+0x98>
 8010856:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801085a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010862:	f109 39ff 	add.w	r9, r9, #4294967295
 8010866:	d018      	beq.n	801089a <_printf_float+0x3fa>
 8010868:	464b      	mov	r3, r9
 801086a:	f108 0201 	add.w	r2, r8, #1
 801086e:	4631      	mov	r1, r6
 8010870:	4628      	mov	r0, r5
 8010872:	47b8      	blx	r7
 8010874:	3001      	adds	r0, #1
 8010876:	d10c      	bne.n	8010892 <_printf_float+0x3f2>
 8010878:	e65e      	b.n	8010538 <_printf_float+0x98>
 801087a:	2301      	movs	r3, #1
 801087c:	465a      	mov	r2, fp
 801087e:	4631      	mov	r1, r6
 8010880:	4628      	mov	r0, r5
 8010882:	47b8      	blx	r7
 8010884:	3001      	adds	r0, #1
 8010886:	f43f ae57 	beq.w	8010538 <_printf_float+0x98>
 801088a:	f108 0801 	add.w	r8, r8, #1
 801088e:	45c8      	cmp	r8, r9
 8010890:	dbf3      	blt.n	801087a <_printf_float+0x3da>
 8010892:	4653      	mov	r3, sl
 8010894:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010898:	e6dc      	b.n	8010654 <_printf_float+0x1b4>
 801089a:	f04f 0800 	mov.w	r8, #0
 801089e:	f104 0b1a 	add.w	fp, r4, #26
 80108a2:	e7f4      	b.n	801088e <_printf_float+0x3ee>
 80108a4:	2301      	movs	r3, #1
 80108a6:	4642      	mov	r2, r8
 80108a8:	e7e1      	b.n	801086e <_printf_float+0x3ce>
 80108aa:	2301      	movs	r3, #1
 80108ac:	464a      	mov	r2, r9
 80108ae:	4631      	mov	r1, r6
 80108b0:	4628      	mov	r0, r5
 80108b2:	47b8      	blx	r7
 80108b4:	3001      	adds	r0, #1
 80108b6:	f43f ae3f 	beq.w	8010538 <_printf_float+0x98>
 80108ba:	f108 0801 	add.w	r8, r8, #1
 80108be:	68e3      	ldr	r3, [r4, #12]
 80108c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108c2:	1a5b      	subs	r3, r3, r1
 80108c4:	4543      	cmp	r3, r8
 80108c6:	dcf0      	bgt.n	80108aa <_printf_float+0x40a>
 80108c8:	e6f8      	b.n	80106bc <_printf_float+0x21c>
 80108ca:	f04f 0800 	mov.w	r8, #0
 80108ce:	f104 0919 	add.w	r9, r4, #25
 80108d2:	e7f4      	b.n	80108be <_printf_float+0x41e>

080108d4 <_printf_common>:
 80108d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108d8:	4616      	mov	r6, r2
 80108da:	4698      	mov	r8, r3
 80108dc:	688a      	ldr	r2, [r1, #8]
 80108de:	690b      	ldr	r3, [r1, #16]
 80108e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108e4:	4293      	cmp	r3, r2
 80108e6:	bfb8      	it	lt
 80108e8:	4613      	movlt	r3, r2
 80108ea:	6033      	str	r3, [r6, #0]
 80108ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80108f0:	4607      	mov	r7, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	b10a      	cbz	r2, 80108fa <_printf_common+0x26>
 80108f6:	3301      	adds	r3, #1
 80108f8:	6033      	str	r3, [r6, #0]
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	0699      	lsls	r1, r3, #26
 80108fe:	bf42      	ittt	mi
 8010900:	6833      	ldrmi	r3, [r6, #0]
 8010902:	3302      	addmi	r3, #2
 8010904:	6033      	strmi	r3, [r6, #0]
 8010906:	6825      	ldr	r5, [r4, #0]
 8010908:	f015 0506 	ands.w	r5, r5, #6
 801090c:	d106      	bne.n	801091c <_printf_common+0x48>
 801090e:	f104 0a19 	add.w	sl, r4, #25
 8010912:	68e3      	ldr	r3, [r4, #12]
 8010914:	6832      	ldr	r2, [r6, #0]
 8010916:	1a9b      	subs	r3, r3, r2
 8010918:	42ab      	cmp	r3, r5
 801091a:	dc26      	bgt.n	801096a <_printf_common+0x96>
 801091c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010920:	6822      	ldr	r2, [r4, #0]
 8010922:	3b00      	subs	r3, #0
 8010924:	bf18      	it	ne
 8010926:	2301      	movne	r3, #1
 8010928:	0692      	lsls	r2, r2, #26
 801092a:	d42b      	bmi.n	8010984 <_printf_common+0xb0>
 801092c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010930:	4641      	mov	r1, r8
 8010932:	4638      	mov	r0, r7
 8010934:	47c8      	blx	r9
 8010936:	3001      	adds	r0, #1
 8010938:	d01e      	beq.n	8010978 <_printf_common+0xa4>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	6922      	ldr	r2, [r4, #16]
 801093e:	f003 0306 	and.w	r3, r3, #6
 8010942:	2b04      	cmp	r3, #4
 8010944:	bf02      	ittt	eq
 8010946:	68e5      	ldreq	r5, [r4, #12]
 8010948:	6833      	ldreq	r3, [r6, #0]
 801094a:	1aed      	subeq	r5, r5, r3
 801094c:	68a3      	ldr	r3, [r4, #8]
 801094e:	bf0c      	ite	eq
 8010950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010954:	2500      	movne	r5, #0
 8010956:	4293      	cmp	r3, r2
 8010958:	bfc4      	itt	gt
 801095a:	1a9b      	subgt	r3, r3, r2
 801095c:	18ed      	addgt	r5, r5, r3
 801095e:	2600      	movs	r6, #0
 8010960:	341a      	adds	r4, #26
 8010962:	42b5      	cmp	r5, r6
 8010964:	d11a      	bne.n	801099c <_printf_common+0xc8>
 8010966:	2000      	movs	r0, #0
 8010968:	e008      	b.n	801097c <_printf_common+0xa8>
 801096a:	2301      	movs	r3, #1
 801096c:	4652      	mov	r2, sl
 801096e:	4641      	mov	r1, r8
 8010970:	4638      	mov	r0, r7
 8010972:	47c8      	blx	r9
 8010974:	3001      	adds	r0, #1
 8010976:	d103      	bne.n	8010980 <_printf_common+0xac>
 8010978:	f04f 30ff 	mov.w	r0, #4294967295
 801097c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010980:	3501      	adds	r5, #1
 8010982:	e7c6      	b.n	8010912 <_printf_common+0x3e>
 8010984:	18e1      	adds	r1, r4, r3
 8010986:	1c5a      	adds	r2, r3, #1
 8010988:	2030      	movs	r0, #48	@ 0x30
 801098a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801098e:	4422      	add	r2, r4
 8010990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010998:	3302      	adds	r3, #2
 801099a:	e7c7      	b.n	801092c <_printf_common+0x58>
 801099c:	2301      	movs	r3, #1
 801099e:	4622      	mov	r2, r4
 80109a0:	4641      	mov	r1, r8
 80109a2:	4638      	mov	r0, r7
 80109a4:	47c8      	blx	r9
 80109a6:	3001      	adds	r0, #1
 80109a8:	d0e6      	beq.n	8010978 <_printf_common+0xa4>
 80109aa:	3601      	adds	r6, #1
 80109ac:	e7d9      	b.n	8010962 <_printf_common+0x8e>
	...

080109b0 <_printf_i>:
 80109b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109b4:	7e0f      	ldrb	r7, [r1, #24]
 80109b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109b8:	2f78      	cmp	r7, #120	@ 0x78
 80109ba:	4691      	mov	r9, r2
 80109bc:	4680      	mov	r8, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	469a      	mov	sl, r3
 80109c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80109c6:	d807      	bhi.n	80109d8 <_printf_i+0x28>
 80109c8:	2f62      	cmp	r7, #98	@ 0x62
 80109ca:	d80a      	bhi.n	80109e2 <_printf_i+0x32>
 80109cc:	2f00      	cmp	r7, #0
 80109ce:	f000 80d2 	beq.w	8010b76 <_printf_i+0x1c6>
 80109d2:	2f58      	cmp	r7, #88	@ 0x58
 80109d4:	f000 80b9 	beq.w	8010b4a <_printf_i+0x19a>
 80109d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80109e0:	e03a      	b.n	8010a58 <_printf_i+0xa8>
 80109e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80109e6:	2b15      	cmp	r3, #21
 80109e8:	d8f6      	bhi.n	80109d8 <_printf_i+0x28>
 80109ea:	a101      	add	r1, pc, #4	@ (adr r1, 80109f0 <_printf_i+0x40>)
 80109ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109f0:	08010a49 	.word	0x08010a49
 80109f4:	08010a5d 	.word	0x08010a5d
 80109f8:	080109d9 	.word	0x080109d9
 80109fc:	080109d9 	.word	0x080109d9
 8010a00:	080109d9 	.word	0x080109d9
 8010a04:	080109d9 	.word	0x080109d9
 8010a08:	08010a5d 	.word	0x08010a5d
 8010a0c:	080109d9 	.word	0x080109d9
 8010a10:	080109d9 	.word	0x080109d9
 8010a14:	080109d9 	.word	0x080109d9
 8010a18:	080109d9 	.word	0x080109d9
 8010a1c:	08010b5d 	.word	0x08010b5d
 8010a20:	08010a87 	.word	0x08010a87
 8010a24:	08010b17 	.word	0x08010b17
 8010a28:	080109d9 	.word	0x080109d9
 8010a2c:	080109d9 	.word	0x080109d9
 8010a30:	08010b7f 	.word	0x08010b7f
 8010a34:	080109d9 	.word	0x080109d9
 8010a38:	08010a87 	.word	0x08010a87
 8010a3c:	080109d9 	.word	0x080109d9
 8010a40:	080109d9 	.word	0x080109d9
 8010a44:	08010b1f 	.word	0x08010b1f
 8010a48:	6833      	ldr	r3, [r6, #0]
 8010a4a:	1d1a      	adds	r2, r3, #4
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6032      	str	r2, [r6, #0]
 8010a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e09d      	b.n	8010b98 <_printf_i+0x1e8>
 8010a5c:	6833      	ldr	r3, [r6, #0]
 8010a5e:	6820      	ldr	r0, [r4, #0]
 8010a60:	1d19      	adds	r1, r3, #4
 8010a62:	6031      	str	r1, [r6, #0]
 8010a64:	0606      	lsls	r6, r0, #24
 8010a66:	d501      	bpl.n	8010a6c <_printf_i+0xbc>
 8010a68:	681d      	ldr	r5, [r3, #0]
 8010a6a:	e003      	b.n	8010a74 <_printf_i+0xc4>
 8010a6c:	0645      	lsls	r5, r0, #25
 8010a6e:	d5fb      	bpl.n	8010a68 <_printf_i+0xb8>
 8010a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a74:	2d00      	cmp	r5, #0
 8010a76:	da03      	bge.n	8010a80 <_printf_i+0xd0>
 8010a78:	232d      	movs	r3, #45	@ 0x2d
 8010a7a:	426d      	negs	r5, r5
 8010a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a80:	4859      	ldr	r0, [pc, #356]	@ (8010be8 <_printf_i+0x238>)
 8010a82:	230a      	movs	r3, #10
 8010a84:	e011      	b.n	8010aaa <_printf_i+0xfa>
 8010a86:	6821      	ldr	r1, [r4, #0]
 8010a88:	6833      	ldr	r3, [r6, #0]
 8010a8a:	0608      	lsls	r0, r1, #24
 8010a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a90:	d402      	bmi.n	8010a98 <_printf_i+0xe8>
 8010a92:	0649      	lsls	r1, r1, #25
 8010a94:	bf48      	it	mi
 8010a96:	b2ad      	uxthmi	r5, r5
 8010a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a9a:	4853      	ldr	r0, [pc, #332]	@ (8010be8 <_printf_i+0x238>)
 8010a9c:	6033      	str	r3, [r6, #0]
 8010a9e:	bf14      	ite	ne
 8010aa0:	230a      	movne	r3, #10
 8010aa2:	2308      	moveq	r3, #8
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010aaa:	6866      	ldr	r6, [r4, #4]
 8010aac:	60a6      	str	r6, [r4, #8]
 8010aae:	2e00      	cmp	r6, #0
 8010ab0:	bfa2      	ittt	ge
 8010ab2:	6821      	ldrge	r1, [r4, #0]
 8010ab4:	f021 0104 	bicge.w	r1, r1, #4
 8010ab8:	6021      	strge	r1, [r4, #0]
 8010aba:	b90d      	cbnz	r5, 8010ac0 <_printf_i+0x110>
 8010abc:	2e00      	cmp	r6, #0
 8010abe:	d04b      	beq.n	8010b58 <_printf_i+0x1a8>
 8010ac0:	4616      	mov	r6, r2
 8010ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8010aca:	5dc7      	ldrb	r7, [r0, r7]
 8010acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ad0:	462f      	mov	r7, r5
 8010ad2:	42bb      	cmp	r3, r7
 8010ad4:	460d      	mov	r5, r1
 8010ad6:	d9f4      	bls.n	8010ac2 <_printf_i+0x112>
 8010ad8:	2b08      	cmp	r3, #8
 8010ada:	d10b      	bne.n	8010af4 <_printf_i+0x144>
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	07df      	lsls	r7, r3, #31
 8010ae0:	d508      	bpl.n	8010af4 <_printf_i+0x144>
 8010ae2:	6923      	ldr	r3, [r4, #16]
 8010ae4:	6861      	ldr	r1, [r4, #4]
 8010ae6:	4299      	cmp	r1, r3
 8010ae8:	bfde      	ittt	le
 8010aea:	2330      	movle	r3, #48	@ 0x30
 8010aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010af0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010af4:	1b92      	subs	r2, r2, r6
 8010af6:	6122      	str	r2, [r4, #16]
 8010af8:	f8cd a000 	str.w	sl, [sp]
 8010afc:	464b      	mov	r3, r9
 8010afe:	aa03      	add	r2, sp, #12
 8010b00:	4621      	mov	r1, r4
 8010b02:	4640      	mov	r0, r8
 8010b04:	f7ff fee6 	bl	80108d4 <_printf_common>
 8010b08:	3001      	adds	r0, #1
 8010b0a:	d14a      	bne.n	8010ba2 <_printf_i+0x1f2>
 8010b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b10:	b004      	add	sp, #16
 8010b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	f043 0320 	orr.w	r3, r3, #32
 8010b1c:	6023      	str	r3, [r4, #0]
 8010b1e:	4833      	ldr	r0, [pc, #204]	@ (8010bec <_printf_i+0x23c>)
 8010b20:	2778      	movs	r7, #120	@ 0x78
 8010b22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	6831      	ldr	r1, [r6, #0]
 8010b2a:	061f      	lsls	r7, r3, #24
 8010b2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b30:	d402      	bmi.n	8010b38 <_printf_i+0x188>
 8010b32:	065f      	lsls	r7, r3, #25
 8010b34:	bf48      	it	mi
 8010b36:	b2ad      	uxthmi	r5, r5
 8010b38:	6031      	str	r1, [r6, #0]
 8010b3a:	07d9      	lsls	r1, r3, #31
 8010b3c:	bf44      	itt	mi
 8010b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8010b42:	6023      	strmi	r3, [r4, #0]
 8010b44:	b11d      	cbz	r5, 8010b4e <_printf_i+0x19e>
 8010b46:	2310      	movs	r3, #16
 8010b48:	e7ac      	b.n	8010aa4 <_printf_i+0xf4>
 8010b4a:	4827      	ldr	r0, [pc, #156]	@ (8010be8 <_printf_i+0x238>)
 8010b4c:	e7e9      	b.n	8010b22 <_printf_i+0x172>
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	f023 0320 	bic.w	r3, r3, #32
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	e7f6      	b.n	8010b46 <_printf_i+0x196>
 8010b58:	4616      	mov	r6, r2
 8010b5a:	e7bd      	b.n	8010ad8 <_printf_i+0x128>
 8010b5c:	6833      	ldr	r3, [r6, #0]
 8010b5e:	6825      	ldr	r5, [r4, #0]
 8010b60:	6961      	ldr	r1, [r4, #20]
 8010b62:	1d18      	adds	r0, r3, #4
 8010b64:	6030      	str	r0, [r6, #0]
 8010b66:	062e      	lsls	r6, r5, #24
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	d501      	bpl.n	8010b70 <_printf_i+0x1c0>
 8010b6c:	6019      	str	r1, [r3, #0]
 8010b6e:	e002      	b.n	8010b76 <_printf_i+0x1c6>
 8010b70:	0668      	lsls	r0, r5, #25
 8010b72:	d5fb      	bpl.n	8010b6c <_printf_i+0x1bc>
 8010b74:	8019      	strh	r1, [r3, #0]
 8010b76:	2300      	movs	r3, #0
 8010b78:	6123      	str	r3, [r4, #16]
 8010b7a:	4616      	mov	r6, r2
 8010b7c:	e7bc      	b.n	8010af8 <_printf_i+0x148>
 8010b7e:	6833      	ldr	r3, [r6, #0]
 8010b80:	1d1a      	adds	r2, r3, #4
 8010b82:	6032      	str	r2, [r6, #0]
 8010b84:	681e      	ldr	r6, [r3, #0]
 8010b86:	6862      	ldr	r2, [r4, #4]
 8010b88:	2100      	movs	r1, #0
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f7ef fbb0 	bl	80002f0 <memchr>
 8010b90:	b108      	cbz	r0, 8010b96 <_printf_i+0x1e6>
 8010b92:	1b80      	subs	r0, r0, r6
 8010b94:	6060      	str	r0, [r4, #4]
 8010b96:	6863      	ldr	r3, [r4, #4]
 8010b98:	6123      	str	r3, [r4, #16]
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ba0:	e7aa      	b.n	8010af8 <_printf_i+0x148>
 8010ba2:	6923      	ldr	r3, [r4, #16]
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	4649      	mov	r1, r9
 8010ba8:	4640      	mov	r0, r8
 8010baa:	47d0      	blx	sl
 8010bac:	3001      	adds	r0, #1
 8010bae:	d0ad      	beq.n	8010b0c <_printf_i+0x15c>
 8010bb0:	6823      	ldr	r3, [r4, #0]
 8010bb2:	079b      	lsls	r3, r3, #30
 8010bb4:	d413      	bmi.n	8010bde <_printf_i+0x22e>
 8010bb6:	68e0      	ldr	r0, [r4, #12]
 8010bb8:	9b03      	ldr	r3, [sp, #12]
 8010bba:	4298      	cmp	r0, r3
 8010bbc:	bfb8      	it	lt
 8010bbe:	4618      	movlt	r0, r3
 8010bc0:	e7a6      	b.n	8010b10 <_printf_i+0x160>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	4649      	mov	r1, r9
 8010bc8:	4640      	mov	r0, r8
 8010bca:	47d0      	blx	sl
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d09d      	beq.n	8010b0c <_printf_i+0x15c>
 8010bd0:	3501      	adds	r5, #1
 8010bd2:	68e3      	ldr	r3, [r4, #12]
 8010bd4:	9903      	ldr	r1, [sp, #12]
 8010bd6:	1a5b      	subs	r3, r3, r1
 8010bd8:	42ab      	cmp	r3, r5
 8010bda:	dcf2      	bgt.n	8010bc2 <_printf_i+0x212>
 8010bdc:	e7eb      	b.n	8010bb6 <_printf_i+0x206>
 8010bde:	2500      	movs	r5, #0
 8010be0:	f104 0619 	add.w	r6, r4, #25
 8010be4:	e7f5      	b.n	8010bd2 <_printf_i+0x222>
 8010be6:	bf00      	nop
 8010be8:	08015376 	.word	0x08015376
 8010bec:	08015387 	.word	0x08015387

08010bf0 <_scanf_float>:
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	b087      	sub	sp, #28
 8010bf6:	4617      	mov	r7, r2
 8010bf8:	9303      	str	r3, [sp, #12]
 8010bfa:	688b      	ldr	r3, [r1, #8]
 8010bfc:	1e5a      	subs	r2, r3, #1
 8010bfe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010c02:	bf81      	itttt	hi
 8010c04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010c08:	eb03 0b05 	addhi.w	fp, r3, r5
 8010c0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010c10:	608b      	strhi	r3, [r1, #8]
 8010c12:	680b      	ldr	r3, [r1, #0]
 8010c14:	460a      	mov	r2, r1
 8010c16:	f04f 0500 	mov.w	r5, #0
 8010c1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010c1e:	f842 3b1c 	str.w	r3, [r2], #28
 8010c22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010c26:	4680      	mov	r8, r0
 8010c28:	460c      	mov	r4, r1
 8010c2a:	bf98      	it	ls
 8010c2c:	f04f 0b00 	movls.w	fp, #0
 8010c30:	9201      	str	r2, [sp, #4]
 8010c32:	4616      	mov	r6, r2
 8010c34:	46aa      	mov	sl, r5
 8010c36:	46a9      	mov	r9, r5
 8010c38:	9502      	str	r5, [sp, #8]
 8010c3a:	68a2      	ldr	r2, [r4, #8]
 8010c3c:	b152      	cbz	r2, 8010c54 <_scanf_float+0x64>
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	2b4e      	cmp	r3, #78	@ 0x4e
 8010c44:	d864      	bhi.n	8010d10 <_scanf_float+0x120>
 8010c46:	2b40      	cmp	r3, #64	@ 0x40
 8010c48:	d83c      	bhi.n	8010cc4 <_scanf_float+0xd4>
 8010c4a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010c4e:	b2c8      	uxtb	r0, r1
 8010c50:	280e      	cmp	r0, #14
 8010c52:	d93a      	bls.n	8010cca <_scanf_float+0xda>
 8010c54:	f1b9 0f00 	cmp.w	r9, #0
 8010c58:	d003      	beq.n	8010c62 <_scanf_float+0x72>
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c60:	6023      	str	r3, [r4, #0]
 8010c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c66:	f1ba 0f01 	cmp.w	sl, #1
 8010c6a:	f200 8117 	bhi.w	8010e9c <_scanf_float+0x2ac>
 8010c6e:	9b01      	ldr	r3, [sp, #4]
 8010c70:	429e      	cmp	r6, r3
 8010c72:	f200 8108 	bhi.w	8010e86 <_scanf_float+0x296>
 8010c76:	2001      	movs	r0, #1
 8010c78:	b007      	add	sp, #28
 8010c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010c82:	2a0d      	cmp	r2, #13
 8010c84:	d8e6      	bhi.n	8010c54 <_scanf_float+0x64>
 8010c86:	a101      	add	r1, pc, #4	@ (adr r1, 8010c8c <_scanf_float+0x9c>)
 8010c88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c8c:	08010dd3 	.word	0x08010dd3
 8010c90:	08010c55 	.word	0x08010c55
 8010c94:	08010c55 	.word	0x08010c55
 8010c98:	08010c55 	.word	0x08010c55
 8010c9c:	08010e33 	.word	0x08010e33
 8010ca0:	08010e0b 	.word	0x08010e0b
 8010ca4:	08010c55 	.word	0x08010c55
 8010ca8:	08010c55 	.word	0x08010c55
 8010cac:	08010de1 	.word	0x08010de1
 8010cb0:	08010c55 	.word	0x08010c55
 8010cb4:	08010c55 	.word	0x08010c55
 8010cb8:	08010c55 	.word	0x08010c55
 8010cbc:	08010c55 	.word	0x08010c55
 8010cc0:	08010d99 	.word	0x08010d99
 8010cc4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010cc8:	e7db      	b.n	8010c82 <_scanf_float+0x92>
 8010cca:	290e      	cmp	r1, #14
 8010ccc:	d8c2      	bhi.n	8010c54 <_scanf_float+0x64>
 8010cce:	a001      	add	r0, pc, #4	@ (adr r0, 8010cd4 <_scanf_float+0xe4>)
 8010cd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010cd4:	08010d89 	.word	0x08010d89
 8010cd8:	08010c55 	.word	0x08010c55
 8010cdc:	08010d89 	.word	0x08010d89
 8010ce0:	08010e1f 	.word	0x08010e1f
 8010ce4:	08010c55 	.word	0x08010c55
 8010ce8:	08010d31 	.word	0x08010d31
 8010cec:	08010d6f 	.word	0x08010d6f
 8010cf0:	08010d6f 	.word	0x08010d6f
 8010cf4:	08010d6f 	.word	0x08010d6f
 8010cf8:	08010d6f 	.word	0x08010d6f
 8010cfc:	08010d6f 	.word	0x08010d6f
 8010d00:	08010d6f 	.word	0x08010d6f
 8010d04:	08010d6f 	.word	0x08010d6f
 8010d08:	08010d6f 	.word	0x08010d6f
 8010d0c:	08010d6f 	.word	0x08010d6f
 8010d10:	2b6e      	cmp	r3, #110	@ 0x6e
 8010d12:	d809      	bhi.n	8010d28 <_scanf_float+0x138>
 8010d14:	2b60      	cmp	r3, #96	@ 0x60
 8010d16:	d8b2      	bhi.n	8010c7e <_scanf_float+0x8e>
 8010d18:	2b54      	cmp	r3, #84	@ 0x54
 8010d1a:	d07b      	beq.n	8010e14 <_scanf_float+0x224>
 8010d1c:	2b59      	cmp	r3, #89	@ 0x59
 8010d1e:	d199      	bne.n	8010c54 <_scanf_float+0x64>
 8010d20:	2d07      	cmp	r5, #7
 8010d22:	d197      	bne.n	8010c54 <_scanf_float+0x64>
 8010d24:	2508      	movs	r5, #8
 8010d26:	e02c      	b.n	8010d82 <_scanf_float+0x192>
 8010d28:	2b74      	cmp	r3, #116	@ 0x74
 8010d2a:	d073      	beq.n	8010e14 <_scanf_float+0x224>
 8010d2c:	2b79      	cmp	r3, #121	@ 0x79
 8010d2e:	e7f6      	b.n	8010d1e <_scanf_float+0x12e>
 8010d30:	6821      	ldr	r1, [r4, #0]
 8010d32:	05c8      	lsls	r0, r1, #23
 8010d34:	d51b      	bpl.n	8010d6e <_scanf_float+0x17e>
 8010d36:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010d3a:	6021      	str	r1, [r4, #0]
 8010d3c:	f109 0901 	add.w	r9, r9, #1
 8010d40:	f1bb 0f00 	cmp.w	fp, #0
 8010d44:	d003      	beq.n	8010d4e <_scanf_float+0x15e>
 8010d46:	3201      	adds	r2, #1
 8010d48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010d4c:	60a2      	str	r2, [r4, #8]
 8010d4e:	68a3      	ldr	r3, [r4, #8]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	60a3      	str	r3, [r4, #8]
 8010d54:	6923      	ldr	r3, [r4, #16]
 8010d56:	3301      	adds	r3, #1
 8010d58:	6123      	str	r3, [r4, #16]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	607b      	str	r3, [r7, #4]
 8010d62:	f340 8087 	ble.w	8010e74 <_scanf_float+0x284>
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	3301      	adds	r3, #1
 8010d6a:	603b      	str	r3, [r7, #0]
 8010d6c:	e765      	b.n	8010c3a <_scanf_float+0x4a>
 8010d6e:	eb1a 0105 	adds.w	r1, sl, r5
 8010d72:	f47f af6f 	bne.w	8010c54 <_scanf_float+0x64>
 8010d76:	6822      	ldr	r2, [r4, #0]
 8010d78:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010d7c:	6022      	str	r2, [r4, #0]
 8010d7e:	460d      	mov	r5, r1
 8010d80:	468a      	mov	sl, r1
 8010d82:	f806 3b01 	strb.w	r3, [r6], #1
 8010d86:	e7e2      	b.n	8010d4e <_scanf_float+0x15e>
 8010d88:	6822      	ldr	r2, [r4, #0]
 8010d8a:	0610      	lsls	r0, r2, #24
 8010d8c:	f57f af62 	bpl.w	8010c54 <_scanf_float+0x64>
 8010d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010d94:	6022      	str	r2, [r4, #0]
 8010d96:	e7f4      	b.n	8010d82 <_scanf_float+0x192>
 8010d98:	f1ba 0f00 	cmp.w	sl, #0
 8010d9c:	d10e      	bne.n	8010dbc <_scanf_float+0x1cc>
 8010d9e:	f1b9 0f00 	cmp.w	r9, #0
 8010da2:	d10e      	bne.n	8010dc2 <_scanf_float+0x1d2>
 8010da4:	6822      	ldr	r2, [r4, #0]
 8010da6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010daa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010dae:	d108      	bne.n	8010dc2 <_scanf_float+0x1d2>
 8010db0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010db4:	6022      	str	r2, [r4, #0]
 8010db6:	f04f 0a01 	mov.w	sl, #1
 8010dba:	e7e2      	b.n	8010d82 <_scanf_float+0x192>
 8010dbc:	f1ba 0f02 	cmp.w	sl, #2
 8010dc0:	d055      	beq.n	8010e6e <_scanf_float+0x27e>
 8010dc2:	2d01      	cmp	r5, #1
 8010dc4:	d002      	beq.n	8010dcc <_scanf_float+0x1dc>
 8010dc6:	2d04      	cmp	r5, #4
 8010dc8:	f47f af44 	bne.w	8010c54 <_scanf_float+0x64>
 8010dcc:	3501      	adds	r5, #1
 8010dce:	b2ed      	uxtb	r5, r5
 8010dd0:	e7d7      	b.n	8010d82 <_scanf_float+0x192>
 8010dd2:	f1ba 0f01 	cmp.w	sl, #1
 8010dd6:	f47f af3d 	bne.w	8010c54 <_scanf_float+0x64>
 8010dda:	f04f 0a02 	mov.w	sl, #2
 8010dde:	e7d0      	b.n	8010d82 <_scanf_float+0x192>
 8010de0:	b97d      	cbnz	r5, 8010e02 <_scanf_float+0x212>
 8010de2:	f1b9 0f00 	cmp.w	r9, #0
 8010de6:	f47f af38 	bne.w	8010c5a <_scanf_float+0x6a>
 8010dea:	6822      	ldr	r2, [r4, #0]
 8010dec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010df0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010df4:	f040 8101 	bne.w	8010ffa <_scanf_float+0x40a>
 8010df8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010dfc:	6022      	str	r2, [r4, #0]
 8010dfe:	2501      	movs	r5, #1
 8010e00:	e7bf      	b.n	8010d82 <_scanf_float+0x192>
 8010e02:	2d03      	cmp	r5, #3
 8010e04:	d0e2      	beq.n	8010dcc <_scanf_float+0x1dc>
 8010e06:	2d05      	cmp	r5, #5
 8010e08:	e7de      	b.n	8010dc8 <_scanf_float+0x1d8>
 8010e0a:	2d02      	cmp	r5, #2
 8010e0c:	f47f af22 	bne.w	8010c54 <_scanf_float+0x64>
 8010e10:	2503      	movs	r5, #3
 8010e12:	e7b6      	b.n	8010d82 <_scanf_float+0x192>
 8010e14:	2d06      	cmp	r5, #6
 8010e16:	f47f af1d 	bne.w	8010c54 <_scanf_float+0x64>
 8010e1a:	2507      	movs	r5, #7
 8010e1c:	e7b1      	b.n	8010d82 <_scanf_float+0x192>
 8010e1e:	6822      	ldr	r2, [r4, #0]
 8010e20:	0591      	lsls	r1, r2, #22
 8010e22:	f57f af17 	bpl.w	8010c54 <_scanf_float+0x64>
 8010e26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010e2a:	6022      	str	r2, [r4, #0]
 8010e2c:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e30:	e7a7      	b.n	8010d82 <_scanf_float+0x192>
 8010e32:	6822      	ldr	r2, [r4, #0]
 8010e34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010e38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010e3c:	d006      	beq.n	8010e4c <_scanf_float+0x25c>
 8010e3e:	0550      	lsls	r0, r2, #21
 8010e40:	f57f af08 	bpl.w	8010c54 <_scanf_float+0x64>
 8010e44:	f1b9 0f00 	cmp.w	r9, #0
 8010e48:	f000 80d7 	beq.w	8010ffa <_scanf_float+0x40a>
 8010e4c:	0591      	lsls	r1, r2, #22
 8010e4e:	bf58      	it	pl
 8010e50:	9902      	ldrpl	r1, [sp, #8]
 8010e52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010e56:	bf58      	it	pl
 8010e58:	eba9 0101 	subpl.w	r1, r9, r1
 8010e5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010e60:	bf58      	it	pl
 8010e62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010e66:	6022      	str	r2, [r4, #0]
 8010e68:	f04f 0900 	mov.w	r9, #0
 8010e6c:	e789      	b.n	8010d82 <_scanf_float+0x192>
 8010e6e:	f04f 0a03 	mov.w	sl, #3
 8010e72:	e786      	b.n	8010d82 <_scanf_float+0x192>
 8010e74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010e78:	4639      	mov	r1, r7
 8010e7a:	4640      	mov	r0, r8
 8010e7c:	4798      	blx	r3
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	f43f aedb 	beq.w	8010c3a <_scanf_float+0x4a>
 8010e84:	e6e6      	b.n	8010c54 <_scanf_float+0x64>
 8010e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e8e:	463a      	mov	r2, r7
 8010e90:	4640      	mov	r0, r8
 8010e92:	4798      	blx	r3
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	3b01      	subs	r3, #1
 8010e98:	6123      	str	r3, [r4, #16]
 8010e9a:	e6e8      	b.n	8010c6e <_scanf_float+0x7e>
 8010e9c:	1e6b      	subs	r3, r5, #1
 8010e9e:	2b06      	cmp	r3, #6
 8010ea0:	d824      	bhi.n	8010eec <_scanf_float+0x2fc>
 8010ea2:	2d02      	cmp	r5, #2
 8010ea4:	d836      	bhi.n	8010f14 <_scanf_float+0x324>
 8010ea6:	9b01      	ldr	r3, [sp, #4]
 8010ea8:	429e      	cmp	r6, r3
 8010eaa:	f67f aee4 	bls.w	8010c76 <_scanf_float+0x86>
 8010eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010eb6:	463a      	mov	r2, r7
 8010eb8:	4640      	mov	r0, r8
 8010eba:	4798      	blx	r3
 8010ebc:	6923      	ldr	r3, [r4, #16]
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	6123      	str	r3, [r4, #16]
 8010ec2:	e7f0      	b.n	8010ea6 <_scanf_float+0x2b6>
 8010ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ec8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010ecc:	463a      	mov	r2, r7
 8010ece:	4640      	mov	r0, r8
 8010ed0:	4798      	blx	r3
 8010ed2:	6923      	ldr	r3, [r4, #16]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	6123      	str	r3, [r4, #16]
 8010ed8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010edc:	fa5f fa8a 	uxtb.w	sl, sl
 8010ee0:	f1ba 0f02 	cmp.w	sl, #2
 8010ee4:	d1ee      	bne.n	8010ec4 <_scanf_float+0x2d4>
 8010ee6:	3d03      	subs	r5, #3
 8010ee8:	b2ed      	uxtb	r5, r5
 8010eea:	1b76      	subs	r6, r6, r5
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	05da      	lsls	r2, r3, #23
 8010ef0:	d530      	bpl.n	8010f54 <_scanf_float+0x364>
 8010ef2:	055b      	lsls	r3, r3, #21
 8010ef4:	d511      	bpl.n	8010f1a <_scanf_float+0x32a>
 8010ef6:	9b01      	ldr	r3, [sp, #4]
 8010ef8:	429e      	cmp	r6, r3
 8010efa:	f67f aebc 	bls.w	8010c76 <_scanf_float+0x86>
 8010efe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f06:	463a      	mov	r2, r7
 8010f08:	4640      	mov	r0, r8
 8010f0a:	4798      	blx	r3
 8010f0c:	6923      	ldr	r3, [r4, #16]
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	6123      	str	r3, [r4, #16]
 8010f12:	e7f0      	b.n	8010ef6 <_scanf_float+0x306>
 8010f14:	46aa      	mov	sl, r5
 8010f16:	46b3      	mov	fp, r6
 8010f18:	e7de      	b.n	8010ed8 <_scanf_float+0x2e8>
 8010f1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010f1e:	6923      	ldr	r3, [r4, #16]
 8010f20:	2965      	cmp	r1, #101	@ 0x65
 8010f22:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f26:	f106 35ff 	add.w	r5, r6, #4294967295
 8010f2a:	6123      	str	r3, [r4, #16]
 8010f2c:	d00c      	beq.n	8010f48 <_scanf_float+0x358>
 8010f2e:	2945      	cmp	r1, #69	@ 0x45
 8010f30:	d00a      	beq.n	8010f48 <_scanf_float+0x358>
 8010f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f36:	463a      	mov	r2, r7
 8010f38:	4640      	mov	r0, r8
 8010f3a:	4798      	blx	r3
 8010f3c:	6923      	ldr	r3, [r4, #16]
 8010f3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010f42:	3b01      	subs	r3, #1
 8010f44:	1eb5      	subs	r5, r6, #2
 8010f46:	6123      	str	r3, [r4, #16]
 8010f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f4c:	463a      	mov	r2, r7
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4798      	blx	r3
 8010f52:	462e      	mov	r6, r5
 8010f54:	6822      	ldr	r2, [r4, #0]
 8010f56:	f012 0210 	ands.w	r2, r2, #16
 8010f5a:	d001      	beq.n	8010f60 <_scanf_float+0x370>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	e68b      	b.n	8010c78 <_scanf_float+0x88>
 8010f60:	7032      	strb	r2, [r6, #0]
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010f6c:	d11a      	bne.n	8010fa4 <_scanf_float+0x3b4>
 8010f6e:	9b02      	ldr	r3, [sp, #8]
 8010f70:	454b      	cmp	r3, r9
 8010f72:	eba3 0209 	sub.w	r2, r3, r9
 8010f76:	d121      	bne.n	8010fbc <_scanf_float+0x3cc>
 8010f78:	9901      	ldr	r1, [sp, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	4640      	mov	r0, r8
 8010f7e:	f002 fc49 	bl	8013814 <_strtod_r>
 8010f82:	9b03      	ldr	r3, [sp, #12]
 8010f84:	6821      	ldr	r1, [r4, #0]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f011 0f02 	tst.w	r1, #2
 8010f8c:	f103 0204 	add.w	r2, r3, #4
 8010f90:	d01f      	beq.n	8010fd2 <_scanf_float+0x3e2>
 8010f92:	9903      	ldr	r1, [sp, #12]
 8010f94:	600a      	str	r2, [r1, #0]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	ed83 0b00 	vstr	d0, [r3]
 8010f9c:	68e3      	ldr	r3, [r4, #12]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	60e3      	str	r3, [r4, #12]
 8010fa2:	e7db      	b.n	8010f5c <_scanf_float+0x36c>
 8010fa4:	9b04      	ldr	r3, [sp, #16]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d0e6      	beq.n	8010f78 <_scanf_float+0x388>
 8010faa:	9905      	ldr	r1, [sp, #20]
 8010fac:	230a      	movs	r3, #10
 8010fae:	3101      	adds	r1, #1
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	f002 fcaf 	bl	8013914 <_strtol_r>
 8010fb6:	9b04      	ldr	r3, [sp, #16]
 8010fb8:	9e05      	ldr	r6, [sp, #20]
 8010fba:	1ac2      	subs	r2, r0, r3
 8010fbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010fc0:	429e      	cmp	r6, r3
 8010fc2:	bf28      	it	cs
 8010fc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010fc8:	490d      	ldr	r1, [pc, #52]	@ (8011000 <_scanf_float+0x410>)
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f000 f960 	bl	8011290 <siprintf>
 8010fd0:	e7d2      	b.n	8010f78 <_scanf_float+0x388>
 8010fd2:	f011 0f04 	tst.w	r1, #4
 8010fd6:	9903      	ldr	r1, [sp, #12]
 8010fd8:	600a      	str	r2, [r1, #0]
 8010fda:	d1dc      	bne.n	8010f96 <_scanf_float+0x3a6>
 8010fdc:	eeb4 0b40 	vcmp.f64	d0, d0
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	681d      	ldr	r5, [r3, #0]
 8010fe6:	d705      	bvc.n	8010ff4 <_scanf_float+0x404>
 8010fe8:	4806      	ldr	r0, [pc, #24]	@ (8011004 <_scanf_float+0x414>)
 8010fea:	f000 fb81 	bl	80116f0 <nanf>
 8010fee:	ed85 0a00 	vstr	s0, [r5]
 8010ff2:	e7d3      	b.n	8010f9c <_scanf_float+0x3ac>
 8010ff4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010ff8:	e7f9      	b.n	8010fee <_scanf_float+0x3fe>
 8010ffa:	f04f 0900 	mov.w	r9, #0
 8010ffe:	e630      	b.n	8010c62 <_scanf_float+0x72>
 8011000:	08015398 	.word	0x08015398
 8011004:	08015363 	.word	0x08015363

08011008 <std>:
 8011008:	2300      	movs	r3, #0
 801100a:	b510      	push	{r4, lr}
 801100c:	4604      	mov	r4, r0
 801100e:	e9c0 3300 	strd	r3, r3, [r0]
 8011012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011016:	6083      	str	r3, [r0, #8]
 8011018:	8181      	strh	r1, [r0, #12]
 801101a:	6643      	str	r3, [r0, #100]	@ 0x64
 801101c:	81c2      	strh	r2, [r0, #14]
 801101e:	6183      	str	r3, [r0, #24]
 8011020:	4619      	mov	r1, r3
 8011022:	2208      	movs	r2, #8
 8011024:	305c      	adds	r0, #92	@ 0x5c
 8011026:	f000 fa2b 	bl	8011480 <memset>
 801102a:	4b0d      	ldr	r3, [pc, #52]	@ (8011060 <std+0x58>)
 801102c:	6263      	str	r3, [r4, #36]	@ 0x24
 801102e:	4b0d      	ldr	r3, [pc, #52]	@ (8011064 <std+0x5c>)
 8011030:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011032:	4b0d      	ldr	r3, [pc, #52]	@ (8011068 <std+0x60>)
 8011034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011036:	4b0d      	ldr	r3, [pc, #52]	@ (801106c <std+0x64>)
 8011038:	6323      	str	r3, [r4, #48]	@ 0x30
 801103a:	4b0d      	ldr	r3, [pc, #52]	@ (8011070 <std+0x68>)
 801103c:	6224      	str	r4, [r4, #32]
 801103e:	429c      	cmp	r4, r3
 8011040:	d006      	beq.n	8011050 <std+0x48>
 8011042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011046:	4294      	cmp	r4, r2
 8011048:	d002      	beq.n	8011050 <std+0x48>
 801104a:	33d0      	adds	r3, #208	@ 0xd0
 801104c:	429c      	cmp	r4, r3
 801104e:	d105      	bne.n	801105c <std+0x54>
 8011050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011058:	f000 bb38 	b.w	80116cc <__retarget_lock_init_recursive>
 801105c:	bd10      	pop	{r4, pc}
 801105e:	bf00      	nop
 8011060:	080112d1 	.word	0x080112d1
 8011064:	080112f3 	.word	0x080112f3
 8011068:	0801132b 	.word	0x0801132b
 801106c:	0801134f 	.word	0x0801134f
 8011070:	24004e40 	.word	0x24004e40

08011074 <stdio_exit_handler>:
 8011074:	4a02      	ldr	r2, [pc, #8]	@ (8011080 <stdio_exit_handler+0xc>)
 8011076:	4903      	ldr	r1, [pc, #12]	@ (8011084 <stdio_exit_handler+0x10>)
 8011078:	4803      	ldr	r0, [pc, #12]	@ (8011088 <stdio_exit_handler+0x14>)
 801107a:	f000 b87b 	b.w	8011174 <_fwalk_sglue>
 801107e:	bf00      	nop
 8011080:	24000014 	.word	0x24000014
 8011084:	08013f55 	.word	0x08013f55
 8011088:	24000024 	.word	0x24000024

0801108c <cleanup_stdio>:
 801108c:	6841      	ldr	r1, [r0, #4]
 801108e:	4b0c      	ldr	r3, [pc, #48]	@ (80110c0 <cleanup_stdio+0x34>)
 8011090:	4299      	cmp	r1, r3
 8011092:	b510      	push	{r4, lr}
 8011094:	4604      	mov	r4, r0
 8011096:	d001      	beq.n	801109c <cleanup_stdio+0x10>
 8011098:	f002 ff5c 	bl	8013f54 <_fflush_r>
 801109c:	68a1      	ldr	r1, [r4, #8]
 801109e:	4b09      	ldr	r3, [pc, #36]	@ (80110c4 <cleanup_stdio+0x38>)
 80110a0:	4299      	cmp	r1, r3
 80110a2:	d002      	beq.n	80110aa <cleanup_stdio+0x1e>
 80110a4:	4620      	mov	r0, r4
 80110a6:	f002 ff55 	bl	8013f54 <_fflush_r>
 80110aa:	68e1      	ldr	r1, [r4, #12]
 80110ac:	4b06      	ldr	r3, [pc, #24]	@ (80110c8 <cleanup_stdio+0x3c>)
 80110ae:	4299      	cmp	r1, r3
 80110b0:	d004      	beq.n	80110bc <cleanup_stdio+0x30>
 80110b2:	4620      	mov	r0, r4
 80110b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110b8:	f002 bf4c 	b.w	8013f54 <_fflush_r>
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	bf00      	nop
 80110c0:	24004e40 	.word	0x24004e40
 80110c4:	24004ea8 	.word	0x24004ea8
 80110c8:	24004f10 	.word	0x24004f10

080110cc <global_stdio_init.part.0>:
 80110cc:	b510      	push	{r4, lr}
 80110ce:	4b0b      	ldr	r3, [pc, #44]	@ (80110fc <global_stdio_init.part.0+0x30>)
 80110d0:	4c0b      	ldr	r4, [pc, #44]	@ (8011100 <global_stdio_init.part.0+0x34>)
 80110d2:	4a0c      	ldr	r2, [pc, #48]	@ (8011104 <global_stdio_init.part.0+0x38>)
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	4620      	mov	r0, r4
 80110d8:	2200      	movs	r2, #0
 80110da:	2104      	movs	r1, #4
 80110dc:	f7ff ff94 	bl	8011008 <std>
 80110e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80110e4:	2201      	movs	r2, #1
 80110e6:	2109      	movs	r1, #9
 80110e8:	f7ff ff8e 	bl	8011008 <std>
 80110ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80110f0:	2202      	movs	r2, #2
 80110f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110f6:	2112      	movs	r1, #18
 80110f8:	f7ff bf86 	b.w	8011008 <std>
 80110fc:	24004f78 	.word	0x24004f78
 8011100:	24004e40 	.word	0x24004e40
 8011104:	08011075 	.word	0x08011075

08011108 <__sfp_lock_acquire>:
 8011108:	4801      	ldr	r0, [pc, #4]	@ (8011110 <__sfp_lock_acquire+0x8>)
 801110a:	f000 bae0 	b.w	80116ce <__retarget_lock_acquire_recursive>
 801110e:	bf00      	nop
 8011110:	24004f81 	.word	0x24004f81

08011114 <__sfp_lock_release>:
 8011114:	4801      	ldr	r0, [pc, #4]	@ (801111c <__sfp_lock_release+0x8>)
 8011116:	f000 badb 	b.w	80116d0 <__retarget_lock_release_recursive>
 801111a:	bf00      	nop
 801111c:	24004f81 	.word	0x24004f81

08011120 <__sinit>:
 8011120:	b510      	push	{r4, lr}
 8011122:	4604      	mov	r4, r0
 8011124:	f7ff fff0 	bl	8011108 <__sfp_lock_acquire>
 8011128:	6a23      	ldr	r3, [r4, #32]
 801112a:	b11b      	cbz	r3, 8011134 <__sinit+0x14>
 801112c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011130:	f7ff bff0 	b.w	8011114 <__sfp_lock_release>
 8011134:	4b04      	ldr	r3, [pc, #16]	@ (8011148 <__sinit+0x28>)
 8011136:	6223      	str	r3, [r4, #32]
 8011138:	4b04      	ldr	r3, [pc, #16]	@ (801114c <__sinit+0x2c>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1f5      	bne.n	801112c <__sinit+0xc>
 8011140:	f7ff ffc4 	bl	80110cc <global_stdio_init.part.0>
 8011144:	e7f2      	b.n	801112c <__sinit+0xc>
 8011146:	bf00      	nop
 8011148:	0801108d 	.word	0x0801108d
 801114c:	24004f78 	.word	0x24004f78

08011150 <fiprintf>:
 8011150:	b40e      	push	{r1, r2, r3}
 8011152:	b503      	push	{r0, r1, lr}
 8011154:	4601      	mov	r1, r0
 8011156:	ab03      	add	r3, sp, #12
 8011158:	4805      	ldr	r0, [pc, #20]	@ (8011170 <fiprintf+0x20>)
 801115a:	f853 2b04 	ldr.w	r2, [r3], #4
 801115e:	6800      	ldr	r0, [r0, #0]
 8011160:	9301      	str	r3, [sp, #4]
 8011162:	f002 fd5b 	bl	8013c1c <_vfiprintf_r>
 8011166:	b002      	add	sp, #8
 8011168:	f85d eb04 	ldr.w	lr, [sp], #4
 801116c:	b003      	add	sp, #12
 801116e:	4770      	bx	lr
 8011170:	24000020 	.word	0x24000020

08011174 <_fwalk_sglue>:
 8011174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011178:	4607      	mov	r7, r0
 801117a:	4688      	mov	r8, r1
 801117c:	4614      	mov	r4, r2
 801117e:	2600      	movs	r6, #0
 8011180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011184:	f1b9 0901 	subs.w	r9, r9, #1
 8011188:	d505      	bpl.n	8011196 <_fwalk_sglue+0x22>
 801118a:	6824      	ldr	r4, [r4, #0]
 801118c:	2c00      	cmp	r4, #0
 801118e:	d1f7      	bne.n	8011180 <_fwalk_sglue+0xc>
 8011190:	4630      	mov	r0, r6
 8011192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011196:	89ab      	ldrh	r3, [r5, #12]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d907      	bls.n	80111ac <_fwalk_sglue+0x38>
 801119c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111a0:	3301      	adds	r3, #1
 80111a2:	d003      	beq.n	80111ac <_fwalk_sglue+0x38>
 80111a4:	4629      	mov	r1, r5
 80111a6:	4638      	mov	r0, r7
 80111a8:	47c0      	blx	r8
 80111aa:	4306      	orrs	r6, r0
 80111ac:	3568      	adds	r5, #104	@ 0x68
 80111ae:	e7e9      	b.n	8011184 <_fwalk_sglue+0x10>

080111b0 <iprintf>:
 80111b0:	b40f      	push	{r0, r1, r2, r3}
 80111b2:	b507      	push	{r0, r1, r2, lr}
 80111b4:	4906      	ldr	r1, [pc, #24]	@ (80111d0 <iprintf+0x20>)
 80111b6:	ab04      	add	r3, sp, #16
 80111b8:	6808      	ldr	r0, [r1, #0]
 80111ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80111be:	6881      	ldr	r1, [r0, #8]
 80111c0:	9301      	str	r3, [sp, #4]
 80111c2:	f002 fd2b 	bl	8013c1c <_vfiprintf_r>
 80111c6:	b003      	add	sp, #12
 80111c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80111cc:	b004      	add	sp, #16
 80111ce:	4770      	bx	lr
 80111d0:	24000020 	.word	0x24000020

080111d4 <_puts_r>:
 80111d4:	6a03      	ldr	r3, [r0, #32]
 80111d6:	b570      	push	{r4, r5, r6, lr}
 80111d8:	6884      	ldr	r4, [r0, #8]
 80111da:	4605      	mov	r5, r0
 80111dc:	460e      	mov	r6, r1
 80111de:	b90b      	cbnz	r3, 80111e4 <_puts_r+0x10>
 80111e0:	f7ff ff9e 	bl	8011120 <__sinit>
 80111e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111e6:	07db      	lsls	r3, r3, #31
 80111e8:	d405      	bmi.n	80111f6 <_puts_r+0x22>
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	0598      	lsls	r0, r3, #22
 80111ee:	d402      	bmi.n	80111f6 <_puts_r+0x22>
 80111f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111f2:	f000 fa6c 	bl	80116ce <__retarget_lock_acquire_recursive>
 80111f6:	89a3      	ldrh	r3, [r4, #12]
 80111f8:	0719      	lsls	r1, r3, #28
 80111fa:	d502      	bpl.n	8011202 <_puts_r+0x2e>
 80111fc:	6923      	ldr	r3, [r4, #16]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d135      	bne.n	801126e <_puts_r+0x9a>
 8011202:	4621      	mov	r1, r4
 8011204:	4628      	mov	r0, r5
 8011206:	f000 f8e5 	bl	80113d4 <__swsetup_r>
 801120a:	b380      	cbz	r0, 801126e <_puts_r+0x9a>
 801120c:	f04f 35ff 	mov.w	r5, #4294967295
 8011210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011212:	07da      	lsls	r2, r3, #31
 8011214:	d405      	bmi.n	8011222 <_puts_r+0x4e>
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	059b      	lsls	r3, r3, #22
 801121a:	d402      	bmi.n	8011222 <_puts_r+0x4e>
 801121c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801121e:	f000 fa57 	bl	80116d0 <__retarget_lock_release_recursive>
 8011222:	4628      	mov	r0, r5
 8011224:	bd70      	pop	{r4, r5, r6, pc}
 8011226:	2b00      	cmp	r3, #0
 8011228:	da04      	bge.n	8011234 <_puts_r+0x60>
 801122a:	69a2      	ldr	r2, [r4, #24]
 801122c:	429a      	cmp	r2, r3
 801122e:	dc17      	bgt.n	8011260 <_puts_r+0x8c>
 8011230:	290a      	cmp	r1, #10
 8011232:	d015      	beq.n	8011260 <_puts_r+0x8c>
 8011234:	6823      	ldr	r3, [r4, #0]
 8011236:	1c5a      	adds	r2, r3, #1
 8011238:	6022      	str	r2, [r4, #0]
 801123a:	7019      	strb	r1, [r3, #0]
 801123c:	68a3      	ldr	r3, [r4, #8]
 801123e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011242:	3b01      	subs	r3, #1
 8011244:	60a3      	str	r3, [r4, #8]
 8011246:	2900      	cmp	r1, #0
 8011248:	d1ed      	bne.n	8011226 <_puts_r+0x52>
 801124a:	2b00      	cmp	r3, #0
 801124c:	da11      	bge.n	8011272 <_puts_r+0x9e>
 801124e:	4622      	mov	r2, r4
 8011250:	210a      	movs	r1, #10
 8011252:	4628      	mov	r0, r5
 8011254:	f000 f87f 	bl	8011356 <__swbuf_r>
 8011258:	3001      	adds	r0, #1
 801125a:	d0d7      	beq.n	801120c <_puts_r+0x38>
 801125c:	250a      	movs	r5, #10
 801125e:	e7d7      	b.n	8011210 <_puts_r+0x3c>
 8011260:	4622      	mov	r2, r4
 8011262:	4628      	mov	r0, r5
 8011264:	f000 f877 	bl	8011356 <__swbuf_r>
 8011268:	3001      	adds	r0, #1
 801126a:	d1e7      	bne.n	801123c <_puts_r+0x68>
 801126c:	e7ce      	b.n	801120c <_puts_r+0x38>
 801126e:	3e01      	subs	r6, #1
 8011270:	e7e4      	b.n	801123c <_puts_r+0x68>
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	6022      	str	r2, [r4, #0]
 8011278:	220a      	movs	r2, #10
 801127a:	701a      	strb	r2, [r3, #0]
 801127c:	e7ee      	b.n	801125c <_puts_r+0x88>
	...

08011280 <puts>:
 8011280:	4b02      	ldr	r3, [pc, #8]	@ (801128c <puts+0xc>)
 8011282:	4601      	mov	r1, r0
 8011284:	6818      	ldr	r0, [r3, #0]
 8011286:	f7ff bfa5 	b.w	80111d4 <_puts_r>
 801128a:	bf00      	nop
 801128c:	24000020 	.word	0x24000020

08011290 <siprintf>:
 8011290:	b40e      	push	{r1, r2, r3}
 8011292:	b500      	push	{lr}
 8011294:	b09c      	sub	sp, #112	@ 0x70
 8011296:	ab1d      	add	r3, sp, #116	@ 0x74
 8011298:	9002      	str	r0, [sp, #8]
 801129a:	9006      	str	r0, [sp, #24]
 801129c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80112a0:	4809      	ldr	r0, [pc, #36]	@ (80112c8 <siprintf+0x38>)
 80112a2:	9107      	str	r1, [sp, #28]
 80112a4:	9104      	str	r1, [sp, #16]
 80112a6:	4909      	ldr	r1, [pc, #36]	@ (80112cc <siprintf+0x3c>)
 80112a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80112ac:	9105      	str	r1, [sp, #20]
 80112ae:	6800      	ldr	r0, [r0, #0]
 80112b0:	9301      	str	r3, [sp, #4]
 80112b2:	a902      	add	r1, sp, #8
 80112b4:	f002 fb8c 	bl	80139d0 <_svfiprintf_r>
 80112b8:	9b02      	ldr	r3, [sp, #8]
 80112ba:	2200      	movs	r2, #0
 80112bc:	701a      	strb	r2, [r3, #0]
 80112be:	b01c      	add	sp, #112	@ 0x70
 80112c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80112c4:	b003      	add	sp, #12
 80112c6:	4770      	bx	lr
 80112c8:	24000020 	.word	0x24000020
 80112cc:	ffff0208 	.word	0xffff0208

080112d0 <__sread>:
 80112d0:	b510      	push	{r4, lr}
 80112d2:	460c      	mov	r4, r1
 80112d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d8:	f000 f986 	bl	80115e8 <_read_r>
 80112dc:	2800      	cmp	r0, #0
 80112de:	bfab      	itete	ge
 80112e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80112e2:	89a3      	ldrhlt	r3, [r4, #12]
 80112e4:	181b      	addge	r3, r3, r0
 80112e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80112ea:	bfac      	ite	ge
 80112ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80112ee:	81a3      	strhlt	r3, [r4, #12]
 80112f0:	bd10      	pop	{r4, pc}

080112f2 <__swrite>:
 80112f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f6:	461f      	mov	r7, r3
 80112f8:	898b      	ldrh	r3, [r1, #12]
 80112fa:	05db      	lsls	r3, r3, #23
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	4616      	mov	r6, r2
 8011302:	d505      	bpl.n	8011310 <__swrite+0x1e>
 8011304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011308:	2302      	movs	r3, #2
 801130a:	2200      	movs	r2, #0
 801130c:	f000 f95a 	bl	80115c4 <_lseek_r>
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801131a:	81a3      	strh	r3, [r4, #12]
 801131c:	4632      	mov	r2, r6
 801131e:	463b      	mov	r3, r7
 8011320:	4628      	mov	r0, r5
 8011322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011326:	f000 b995 	b.w	8011654 <_write_r>

0801132a <__sseek>:
 801132a:	b510      	push	{r4, lr}
 801132c:	460c      	mov	r4, r1
 801132e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011332:	f000 f947 	bl	80115c4 <_lseek_r>
 8011336:	1c43      	adds	r3, r0, #1
 8011338:	89a3      	ldrh	r3, [r4, #12]
 801133a:	bf15      	itete	ne
 801133c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801133e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011342:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011346:	81a3      	strheq	r3, [r4, #12]
 8011348:	bf18      	it	ne
 801134a:	81a3      	strhne	r3, [r4, #12]
 801134c:	bd10      	pop	{r4, pc}

0801134e <__sclose>:
 801134e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011352:	f000 b8d1 	b.w	80114f8 <_close_r>

08011356 <__swbuf_r>:
 8011356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011358:	460e      	mov	r6, r1
 801135a:	4614      	mov	r4, r2
 801135c:	4605      	mov	r5, r0
 801135e:	b118      	cbz	r0, 8011368 <__swbuf_r+0x12>
 8011360:	6a03      	ldr	r3, [r0, #32]
 8011362:	b90b      	cbnz	r3, 8011368 <__swbuf_r+0x12>
 8011364:	f7ff fedc 	bl	8011120 <__sinit>
 8011368:	69a3      	ldr	r3, [r4, #24]
 801136a:	60a3      	str	r3, [r4, #8]
 801136c:	89a3      	ldrh	r3, [r4, #12]
 801136e:	071a      	lsls	r2, r3, #28
 8011370:	d501      	bpl.n	8011376 <__swbuf_r+0x20>
 8011372:	6923      	ldr	r3, [r4, #16]
 8011374:	b943      	cbnz	r3, 8011388 <__swbuf_r+0x32>
 8011376:	4621      	mov	r1, r4
 8011378:	4628      	mov	r0, r5
 801137a:	f000 f82b 	bl	80113d4 <__swsetup_r>
 801137e:	b118      	cbz	r0, 8011388 <__swbuf_r+0x32>
 8011380:	f04f 37ff 	mov.w	r7, #4294967295
 8011384:	4638      	mov	r0, r7
 8011386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011388:	6823      	ldr	r3, [r4, #0]
 801138a:	6922      	ldr	r2, [r4, #16]
 801138c:	1a98      	subs	r0, r3, r2
 801138e:	6963      	ldr	r3, [r4, #20]
 8011390:	b2f6      	uxtb	r6, r6
 8011392:	4283      	cmp	r3, r0
 8011394:	4637      	mov	r7, r6
 8011396:	dc05      	bgt.n	80113a4 <__swbuf_r+0x4e>
 8011398:	4621      	mov	r1, r4
 801139a:	4628      	mov	r0, r5
 801139c:	f002 fdda 	bl	8013f54 <_fflush_r>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	d1ed      	bne.n	8011380 <__swbuf_r+0x2a>
 80113a4:	68a3      	ldr	r3, [r4, #8]
 80113a6:	3b01      	subs	r3, #1
 80113a8:	60a3      	str	r3, [r4, #8]
 80113aa:	6823      	ldr	r3, [r4, #0]
 80113ac:	1c5a      	adds	r2, r3, #1
 80113ae:	6022      	str	r2, [r4, #0]
 80113b0:	701e      	strb	r6, [r3, #0]
 80113b2:	6962      	ldr	r2, [r4, #20]
 80113b4:	1c43      	adds	r3, r0, #1
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d004      	beq.n	80113c4 <__swbuf_r+0x6e>
 80113ba:	89a3      	ldrh	r3, [r4, #12]
 80113bc:	07db      	lsls	r3, r3, #31
 80113be:	d5e1      	bpl.n	8011384 <__swbuf_r+0x2e>
 80113c0:	2e0a      	cmp	r6, #10
 80113c2:	d1df      	bne.n	8011384 <__swbuf_r+0x2e>
 80113c4:	4621      	mov	r1, r4
 80113c6:	4628      	mov	r0, r5
 80113c8:	f002 fdc4 	bl	8013f54 <_fflush_r>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d0d9      	beq.n	8011384 <__swbuf_r+0x2e>
 80113d0:	e7d6      	b.n	8011380 <__swbuf_r+0x2a>
	...

080113d4 <__swsetup_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4b29      	ldr	r3, [pc, #164]	@ (801147c <__swsetup_r+0xa8>)
 80113d8:	4605      	mov	r5, r0
 80113da:	6818      	ldr	r0, [r3, #0]
 80113dc:	460c      	mov	r4, r1
 80113de:	b118      	cbz	r0, 80113e8 <__swsetup_r+0x14>
 80113e0:	6a03      	ldr	r3, [r0, #32]
 80113e2:	b90b      	cbnz	r3, 80113e8 <__swsetup_r+0x14>
 80113e4:	f7ff fe9c 	bl	8011120 <__sinit>
 80113e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ec:	0719      	lsls	r1, r3, #28
 80113ee:	d422      	bmi.n	8011436 <__swsetup_r+0x62>
 80113f0:	06da      	lsls	r2, r3, #27
 80113f2:	d407      	bmi.n	8011404 <__swsetup_r+0x30>
 80113f4:	2209      	movs	r2, #9
 80113f6:	602a      	str	r2, [r5, #0]
 80113f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113fc:	81a3      	strh	r3, [r4, #12]
 80113fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011402:	e033      	b.n	801146c <__swsetup_r+0x98>
 8011404:	0758      	lsls	r0, r3, #29
 8011406:	d512      	bpl.n	801142e <__swsetup_r+0x5a>
 8011408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801140a:	b141      	cbz	r1, 801141e <__swsetup_r+0x4a>
 801140c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011410:	4299      	cmp	r1, r3
 8011412:	d002      	beq.n	801141a <__swsetup_r+0x46>
 8011414:	4628      	mov	r0, r5
 8011416:	f000 ff51 	bl	80122bc <_free_r>
 801141a:	2300      	movs	r3, #0
 801141c:	6363      	str	r3, [r4, #52]	@ 0x34
 801141e:	89a3      	ldrh	r3, [r4, #12]
 8011420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	2300      	movs	r3, #0
 8011428:	6063      	str	r3, [r4, #4]
 801142a:	6923      	ldr	r3, [r4, #16]
 801142c:	6023      	str	r3, [r4, #0]
 801142e:	89a3      	ldrh	r3, [r4, #12]
 8011430:	f043 0308 	orr.w	r3, r3, #8
 8011434:	81a3      	strh	r3, [r4, #12]
 8011436:	6923      	ldr	r3, [r4, #16]
 8011438:	b94b      	cbnz	r3, 801144e <__swsetup_r+0x7a>
 801143a:	89a3      	ldrh	r3, [r4, #12]
 801143c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011444:	d003      	beq.n	801144e <__swsetup_r+0x7a>
 8011446:	4621      	mov	r1, r4
 8011448:	4628      	mov	r0, r5
 801144a:	f002 fdd1 	bl	8013ff0 <__smakebuf_r>
 801144e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011452:	f013 0201 	ands.w	r2, r3, #1
 8011456:	d00a      	beq.n	801146e <__swsetup_r+0x9a>
 8011458:	2200      	movs	r2, #0
 801145a:	60a2      	str	r2, [r4, #8]
 801145c:	6962      	ldr	r2, [r4, #20]
 801145e:	4252      	negs	r2, r2
 8011460:	61a2      	str	r2, [r4, #24]
 8011462:	6922      	ldr	r2, [r4, #16]
 8011464:	b942      	cbnz	r2, 8011478 <__swsetup_r+0xa4>
 8011466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801146a:	d1c5      	bne.n	80113f8 <__swsetup_r+0x24>
 801146c:	bd38      	pop	{r3, r4, r5, pc}
 801146e:	0799      	lsls	r1, r3, #30
 8011470:	bf58      	it	pl
 8011472:	6962      	ldrpl	r2, [r4, #20]
 8011474:	60a2      	str	r2, [r4, #8]
 8011476:	e7f4      	b.n	8011462 <__swsetup_r+0x8e>
 8011478:	2000      	movs	r0, #0
 801147a:	e7f7      	b.n	801146c <__swsetup_r+0x98>
 801147c:	24000020 	.word	0x24000020

08011480 <memset>:
 8011480:	4402      	add	r2, r0
 8011482:	4603      	mov	r3, r0
 8011484:	4293      	cmp	r3, r2
 8011486:	d100      	bne.n	801148a <memset+0xa>
 8011488:	4770      	bx	lr
 801148a:	f803 1b01 	strb.w	r1, [r3], #1
 801148e:	e7f9      	b.n	8011484 <memset+0x4>

08011490 <_raise_r>:
 8011490:	291f      	cmp	r1, #31
 8011492:	b538      	push	{r3, r4, r5, lr}
 8011494:	4605      	mov	r5, r0
 8011496:	460c      	mov	r4, r1
 8011498:	d904      	bls.n	80114a4 <_raise_r+0x14>
 801149a:	2316      	movs	r3, #22
 801149c:	6003      	str	r3, [r0, #0]
 801149e:	f04f 30ff 	mov.w	r0, #4294967295
 80114a2:	bd38      	pop	{r3, r4, r5, pc}
 80114a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80114a6:	b112      	cbz	r2, 80114ae <_raise_r+0x1e>
 80114a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114ac:	b94b      	cbnz	r3, 80114c2 <_raise_r+0x32>
 80114ae:	4628      	mov	r0, r5
 80114b0:	f000 f8be 	bl	8011630 <_getpid_r>
 80114b4:	4622      	mov	r2, r4
 80114b6:	4601      	mov	r1, r0
 80114b8:	4628      	mov	r0, r5
 80114ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114be:	f000 b8a5 	b.w	801160c <_kill_r>
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d00a      	beq.n	80114dc <_raise_r+0x4c>
 80114c6:	1c59      	adds	r1, r3, #1
 80114c8:	d103      	bne.n	80114d2 <_raise_r+0x42>
 80114ca:	2316      	movs	r3, #22
 80114cc:	6003      	str	r3, [r0, #0]
 80114ce:	2001      	movs	r0, #1
 80114d0:	e7e7      	b.n	80114a2 <_raise_r+0x12>
 80114d2:	2100      	movs	r1, #0
 80114d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80114d8:	4620      	mov	r0, r4
 80114da:	4798      	blx	r3
 80114dc:	2000      	movs	r0, #0
 80114de:	e7e0      	b.n	80114a2 <_raise_r+0x12>

080114e0 <raise>:
 80114e0:	4b02      	ldr	r3, [pc, #8]	@ (80114ec <raise+0xc>)
 80114e2:	4601      	mov	r1, r0
 80114e4:	6818      	ldr	r0, [r3, #0]
 80114e6:	f7ff bfd3 	b.w	8011490 <_raise_r>
 80114ea:	bf00      	nop
 80114ec:	24000020 	.word	0x24000020

080114f0 <_localeconv_r>:
 80114f0:	4800      	ldr	r0, [pc, #0]	@ (80114f4 <_localeconv_r+0x4>)
 80114f2:	4770      	bx	lr
 80114f4:	24000160 	.word	0x24000160

080114f8 <_close_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d06      	ldr	r5, [pc, #24]	@ (8011514 <_close_r+0x1c>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	4604      	mov	r4, r0
 8011500:	4608      	mov	r0, r1
 8011502:	602b      	str	r3, [r5, #0]
 8011504:	f7f0 ff60 	bl	80023c8 <_close>
 8011508:	1c43      	adds	r3, r0, #1
 801150a:	d102      	bne.n	8011512 <_close_r+0x1a>
 801150c:	682b      	ldr	r3, [r5, #0]
 801150e:	b103      	cbz	r3, 8011512 <_close_r+0x1a>
 8011510:	6023      	str	r3, [r4, #0]
 8011512:	bd38      	pop	{r3, r4, r5, pc}
 8011514:	24004f7c 	.word	0x24004f7c

08011518 <_reclaim_reent>:
 8011518:	4b29      	ldr	r3, [pc, #164]	@ (80115c0 <_reclaim_reent+0xa8>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	4283      	cmp	r3, r0
 801151e:	b570      	push	{r4, r5, r6, lr}
 8011520:	4604      	mov	r4, r0
 8011522:	d04b      	beq.n	80115bc <_reclaim_reent+0xa4>
 8011524:	69c3      	ldr	r3, [r0, #28]
 8011526:	b1ab      	cbz	r3, 8011554 <_reclaim_reent+0x3c>
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	b16b      	cbz	r3, 8011548 <_reclaim_reent+0x30>
 801152c:	2500      	movs	r5, #0
 801152e:	69e3      	ldr	r3, [r4, #28]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	5959      	ldr	r1, [r3, r5]
 8011534:	2900      	cmp	r1, #0
 8011536:	d13b      	bne.n	80115b0 <_reclaim_reent+0x98>
 8011538:	3504      	adds	r5, #4
 801153a:	2d80      	cmp	r5, #128	@ 0x80
 801153c:	d1f7      	bne.n	801152e <_reclaim_reent+0x16>
 801153e:	69e3      	ldr	r3, [r4, #28]
 8011540:	4620      	mov	r0, r4
 8011542:	68d9      	ldr	r1, [r3, #12]
 8011544:	f000 feba 	bl	80122bc <_free_r>
 8011548:	69e3      	ldr	r3, [r4, #28]
 801154a:	6819      	ldr	r1, [r3, #0]
 801154c:	b111      	cbz	r1, 8011554 <_reclaim_reent+0x3c>
 801154e:	4620      	mov	r0, r4
 8011550:	f000 feb4 	bl	80122bc <_free_r>
 8011554:	6961      	ldr	r1, [r4, #20]
 8011556:	b111      	cbz	r1, 801155e <_reclaim_reent+0x46>
 8011558:	4620      	mov	r0, r4
 801155a:	f000 feaf 	bl	80122bc <_free_r>
 801155e:	69e1      	ldr	r1, [r4, #28]
 8011560:	b111      	cbz	r1, 8011568 <_reclaim_reent+0x50>
 8011562:	4620      	mov	r0, r4
 8011564:	f000 feaa 	bl	80122bc <_free_r>
 8011568:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801156a:	b111      	cbz	r1, 8011572 <_reclaim_reent+0x5a>
 801156c:	4620      	mov	r0, r4
 801156e:	f000 fea5 	bl	80122bc <_free_r>
 8011572:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011574:	b111      	cbz	r1, 801157c <_reclaim_reent+0x64>
 8011576:	4620      	mov	r0, r4
 8011578:	f000 fea0 	bl	80122bc <_free_r>
 801157c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801157e:	b111      	cbz	r1, 8011586 <_reclaim_reent+0x6e>
 8011580:	4620      	mov	r0, r4
 8011582:	f000 fe9b 	bl	80122bc <_free_r>
 8011586:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011588:	b111      	cbz	r1, 8011590 <_reclaim_reent+0x78>
 801158a:	4620      	mov	r0, r4
 801158c:	f000 fe96 	bl	80122bc <_free_r>
 8011590:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011592:	b111      	cbz	r1, 801159a <_reclaim_reent+0x82>
 8011594:	4620      	mov	r0, r4
 8011596:	f000 fe91 	bl	80122bc <_free_r>
 801159a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801159c:	b111      	cbz	r1, 80115a4 <_reclaim_reent+0x8c>
 801159e:	4620      	mov	r0, r4
 80115a0:	f000 fe8c 	bl	80122bc <_free_r>
 80115a4:	6a23      	ldr	r3, [r4, #32]
 80115a6:	b14b      	cbz	r3, 80115bc <_reclaim_reent+0xa4>
 80115a8:	4620      	mov	r0, r4
 80115aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115ae:	4718      	bx	r3
 80115b0:	680e      	ldr	r6, [r1, #0]
 80115b2:	4620      	mov	r0, r4
 80115b4:	f000 fe82 	bl	80122bc <_free_r>
 80115b8:	4631      	mov	r1, r6
 80115ba:	e7bb      	b.n	8011534 <_reclaim_reent+0x1c>
 80115bc:	bd70      	pop	{r4, r5, r6, pc}
 80115be:	bf00      	nop
 80115c0:	24000020 	.word	0x24000020

080115c4 <_lseek_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4d07      	ldr	r5, [pc, #28]	@ (80115e4 <_lseek_r+0x20>)
 80115c8:	4604      	mov	r4, r0
 80115ca:	4608      	mov	r0, r1
 80115cc:	4611      	mov	r1, r2
 80115ce:	2200      	movs	r2, #0
 80115d0:	602a      	str	r2, [r5, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	f7f0 ff1f 	bl	8002416 <_lseek>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	d102      	bne.n	80115e2 <_lseek_r+0x1e>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	b103      	cbz	r3, 80115e2 <_lseek_r+0x1e>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	24004f7c 	.word	0x24004f7c

080115e8 <_read_r>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4d07      	ldr	r5, [pc, #28]	@ (8011608 <_read_r+0x20>)
 80115ec:	4604      	mov	r4, r0
 80115ee:	4608      	mov	r0, r1
 80115f0:	4611      	mov	r1, r2
 80115f2:	2200      	movs	r2, #0
 80115f4:	602a      	str	r2, [r5, #0]
 80115f6:	461a      	mov	r2, r3
 80115f8:	f7f0 fead 	bl	8002356 <_read>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_read_r+0x1e>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_read_r+0x1e>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	24004f7c 	.word	0x24004f7c

0801160c <_kill_r>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4d07      	ldr	r5, [pc, #28]	@ (801162c <_kill_r+0x20>)
 8011610:	2300      	movs	r3, #0
 8011612:	4604      	mov	r4, r0
 8011614:	4608      	mov	r0, r1
 8011616:	4611      	mov	r1, r2
 8011618:	602b      	str	r3, [r5, #0]
 801161a:	f7f0 fe81 	bl	8002320 <_kill>
 801161e:	1c43      	adds	r3, r0, #1
 8011620:	d102      	bne.n	8011628 <_kill_r+0x1c>
 8011622:	682b      	ldr	r3, [r5, #0]
 8011624:	b103      	cbz	r3, 8011628 <_kill_r+0x1c>
 8011626:	6023      	str	r3, [r4, #0]
 8011628:	bd38      	pop	{r3, r4, r5, pc}
 801162a:	bf00      	nop
 801162c:	24004f7c 	.word	0x24004f7c

08011630 <_getpid_r>:
 8011630:	f7f0 be6e 	b.w	8002310 <_getpid>

08011634 <_sbrk_r>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	4d06      	ldr	r5, [pc, #24]	@ (8011650 <_sbrk_r+0x1c>)
 8011638:	2300      	movs	r3, #0
 801163a:	4604      	mov	r4, r0
 801163c:	4608      	mov	r0, r1
 801163e:	602b      	str	r3, [r5, #0]
 8011640:	f7f0 fef6 	bl	8002430 <_sbrk>
 8011644:	1c43      	adds	r3, r0, #1
 8011646:	d102      	bne.n	801164e <_sbrk_r+0x1a>
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	b103      	cbz	r3, 801164e <_sbrk_r+0x1a>
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	24004f7c 	.word	0x24004f7c

08011654 <_write_r>:
 8011654:	b538      	push	{r3, r4, r5, lr}
 8011656:	4d07      	ldr	r5, [pc, #28]	@ (8011674 <_write_r+0x20>)
 8011658:	4604      	mov	r4, r0
 801165a:	4608      	mov	r0, r1
 801165c:	4611      	mov	r1, r2
 801165e:	2200      	movs	r2, #0
 8011660:	602a      	str	r2, [r5, #0]
 8011662:	461a      	mov	r2, r3
 8011664:	f7f0 fe94 	bl	8002390 <_write>
 8011668:	1c43      	adds	r3, r0, #1
 801166a:	d102      	bne.n	8011672 <_write_r+0x1e>
 801166c:	682b      	ldr	r3, [r5, #0]
 801166e:	b103      	cbz	r3, 8011672 <_write_r+0x1e>
 8011670:	6023      	str	r3, [r4, #0]
 8011672:	bd38      	pop	{r3, r4, r5, pc}
 8011674:	24004f7c 	.word	0x24004f7c

08011678 <__errno>:
 8011678:	4b01      	ldr	r3, [pc, #4]	@ (8011680 <__errno+0x8>)
 801167a:	6818      	ldr	r0, [r3, #0]
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	24000020 	.word	0x24000020

08011684 <__libc_init_array>:
 8011684:	b570      	push	{r4, r5, r6, lr}
 8011686:	4d0d      	ldr	r5, [pc, #52]	@ (80116bc <__libc_init_array+0x38>)
 8011688:	4c0d      	ldr	r4, [pc, #52]	@ (80116c0 <__libc_init_array+0x3c>)
 801168a:	1b64      	subs	r4, r4, r5
 801168c:	10a4      	asrs	r4, r4, #2
 801168e:	2600      	movs	r6, #0
 8011690:	42a6      	cmp	r6, r4
 8011692:	d109      	bne.n	80116a8 <__libc_init_array+0x24>
 8011694:	4d0b      	ldr	r5, [pc, #44]	@ (80116c4 <__libc_init_array+0x40>)
 8011696:	4c0c      	ldr	r4, [pc, #48]	@ (80116c8 <__libc_init_array+0x44>)
 8011698:	f003 f8e0 	bl	801485c <_init>
 801169c:	1b64      	subs	r4, r4, r5
 801169e:	10a4      	asrs	r4, r4, #2
 80116a0:	2600      	movs	r6, #0
 80116a2:	42a6      	cmp	r6, r4
 80116a4:	d105      	bne.n	80116b2 <__libc_init_array+0x2e>
 80116a6:	bd70      	pop	{r4, r5, r6, pc}
 80116a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80116ac:	4798      	blx	r3
 80116ae:	3601      	adds	r6, #1
 80116b0:	e7ee      	b.n	8011690 <__libc_init_array+0xc>
 80116b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80116b6:	4798      	blx	r3
 80116b8:	3601      	adds	r6, #1
 80116ba:	e7f2      	b.n	80116a2 <__libc_init_array+0x1e>
 80116bc:	0801575c 	.word	0x0801575c
 80116c0:	0801575c 	.word	0x0801575c
 80116c4:	0801575c 	.word	0x0801575c
 80116c8:	08015760 	.word	0x08015760

080116cc <__retarget_lock_init_recursive>:
 80116cc:	4770      	bx	lr

080116ce <__retarget_lock_acquire_recursive>:
 80116ce:	4770      	bx	lr

080116d0 <__retarget_lock_release_recursive>:
 80116d0:	4770      	bx	lr

080116d2 <memcpy>:
 80116d2:	440a      	add	r2, r1
 80116d4:	4291      	cmp	r1, r2
 80116d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80116da:	d100      	bne.n	80116de <memcpy+0xc>
 80116dc:	4770      	bx	lr
 80116de:	b510      	push	{r4, lr}
 80116e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116e8:	4291      	cmp	r1, r2
 80116ea:	d1f9      	bne.n	80116e0 <memcpy+0xe>
 80116ec:	bd10      	pop	{r4, pc}
	...

080116f0 <nanf>:
 80116f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80116f8 <nanf+0x8>
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	7fc00000 	.word	0x7fc00000

080116fc <quorem>:
 80116fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011700:	6903      	ldr	r3, [r0, #16]
 8011702:	690c      	ldr	r4, [r1, #16]
 8011704:	42a3      	cmp	r3, r4
 8011706:	4607      	mov	r7, r0
 8011708:	db7e      	blt.n	8011808 <quorem+0x10c>
 801170a:	3c01      	subs	r4, #1
 801170c:	f101 0814 	add.w	r8, r1, #20
 8011710:	00a3      	lsls	r3, r4, #2
 8011712:	f100 0514 	add.w	r5, r0, #20
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011726:	3301      	adds	r3, #1
 8011728:	429a      	cmp	r2, r3
 801172a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801172e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011732:	d32e      	bcc.n	8011792 <quorem+0x96>
 8011734:	f04f 0a00 	mov.w	sl, #0
 8011738:	46c4      	mov	ip, r8
 801173a:	46ae      	mov	lr, r5
 801173c:	46d3      	mov	fp, sl
 801173e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011742:	b298      	uxth	r0, r3
 8011744:	fb06 a000 	mla	r0, r6, r0, sl
 8011748:	0c02      	lsrs	r2, r0, #16
 801174a:	0c1b      	lsrs	r3, r3, #16
 801174c:	fb06 2303 	mla	r3, r6, r3, r2
 8011750:	f8de 2000 	ldr.w	r2, [lr]
 8011754:	b280      	uxth	r0, r0
 8011756:	b292      	uxth	r2, r2
 8011758:	1a12      	subs	r2, r2, r0
 801175a:	445a      	add	r2, fp
 801175c:	f8de 0000 	ldr.w	r0, [lr]
 8011760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011764:	b29b      	uxth	r3, r3
 8011766:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801176a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801176e:	b292      	uxth	r2, r2
 8011770:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011774:	45e1      	cmp	r9, ip
 8011776:	f84e 2b04 	str.w	r2, [lr], #4
 801177a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801177e:	d2de      	bcs.n	801173e <quorem+0x42>
 8011780:	9b00      	ldr	r3, [sp, #0]
 8011782:	58eb      	ldr	r3, [r5, r3]
 8011784:	b92b      	cbnz	r3, 8011792 <quorem+0x96>
 8011786:	9b01      	ldr	r3, [sp, #4]
 8011788:	3b04      	subs	r3, #4
 801178a:	429d      	cmp	r5, r3
 801178c:	461a      	mov	r2, r3
 801178e:	d32f      	bcc.n	80117f0 <quorem+0xf4>
 8011790:	613c      	str	r4, [r7, #16]
 8011792:	4638      	mov	r0, r7
 8011794:	f001 f8a0 	bl	80128d8 <__mcmp>
 8011798:	2800      	cmp	r0, #0
 801179a:	db25      	blt.n	80117e8 <quorem+0xec>
 801179c:	4629      	mov	r1, r5
 801179e:	2000      	movs	r0, #0
 80117a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80117a4:	f8d1 c000 	ldr.w	ip, [r1]
 80117a8:	fa1f fe82 	uxth.w	lr, r2
 80117ac:	fa1f f38c 	uxth.w	r3, ip
 80117b0:	eba3 030e 	sub.w	r3, r3, lr
 80117b4:	4403      	add	r3, r0
 80117b6:	0c12      	lsrs	r2, r2, #16
 80117b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80117bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117c6:	45c1      	cmp	r9, r8
 80117c8:	f841 3b04 	str.w	r3, [r1], #4
 80117cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80117d0:	d2e6      	bcs.n	80117a0 <quorem+0xa4>
 80117d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117da:	b922      	cbnz	r2, 80117e6 <quorem+0xea>
 80117dc:	3b04      	subs	r3, #4
 80117de:	429d      	cmp	r5, r3
 80117e0:	461a      	mov	r2, r3
 80117e2:	d30b      	bcc.n	80117fc <quorem+0x100>
 80117e4:	613c      	str	r4, [r7, #16]
 80117e6:	3601      	adds	r6, #1
 80117e8:	4630      	mov	r0, r6
 80117ea:	b003      	add	sp, #12
 80117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f0:	6812      	ldr	r2, [r2, #0]
 80117f2:	3b04      	subs	r3, #4
 80117f4:	2a00      	cmp	r2, #0
 80117f6:	d1cb      	bne.n	8011790 <quorem+0x94>
 80117f8:	3c01      	subs	r4, #1
 80117fa:	e7c6      	b.n	801178a <quorem+0x8e>
 80117fc:	6812      	ldr	r2, [r2, #0]
 80117fe:	3b04      	subs	r3, #4
 8011800:	2a00      	cmp	r2, #0
 8011802:	d1ef      	bne.n	80117e4 <quorem+0xe8>
 8011804:	3c01      	subs	r4, #1
 8011806:	e7ea      	b.n	80117de <quorem+0xe2>
 8011808:	2000      	movs	r0, #0
 801180a:	e7ee      	b.n	80117ea <quorem+0xee>
 801180c:	0000      	movs	r0, r0
	...

08011810 <_dtoa_r>:
 8011810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011814:	ed2d 8b02 	vpush	{d8}
 8011818:	69c7      	ldr	r7, [r0, #28]
 801181a:	b091      	sub	sp, #68	@ 0x44
 801181c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011820:	ec55 4b10 	vmov	r4, r5, d0
 8011824:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011826:	9107      	str	r1, [sp, #28]
 8011828:	4681      	mov	r9, r0
 801182a:	9209      	str	r2, [sp, #36]	@ 0x24
 801182c:	930d      	str	r3, [sp, #52]	@ 0x34
 801182e:	b97f      	cbnz	r7, 8011850 <_dtoa_r+0x40>
 8011830:	2010      	movs	r0, #16
 8011832:	f7fe fce7 	bl	8010204 <malloc>
 8011836:	4602      	mov	r2, r0
 8011838:	f8c9 001c 	str.w	r0, [r9, #28]
 801183c:	b920      	cbnz	r0, 8011848 <_dtoa_r+0x38>
 801183e:	4ba0      	ldr	r3, [pc, #640]	@ (8011ac0 <_dtoa_r+0x2b0>)
 8011840:	21ef      	movs	r1, #239	@ 0xef
 8011842:	48a0      	ldr	r0, [pc, #640]	@ (8011ac4 <_dtoa_r+0x2b4>)
 8011844:	f7fe fcc0 	bl	80101c8 <__assert_func>
 8011848:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801184c:	6007      	str	r7, [r0, #0]
 801184e:	60c7      	str	r7, [r0, #12]
 8011850:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011854:	6819      	ldr	r1, [r3, #0]
 8011856:	b159      	cbz	r1, 8011870 <_dtoa_r+0x60>
 8011858:	685a      	ldr	r2, [r3, #4]
 801185a:	604a      	str	r2, [r1, #4]
 801185c:	2301      	movs	r3, #1
 801185e:	4093      	lsls	r3, r2
 8011860:	608b      	str	r3, [r1, #8]
 8011862:	4648      	mov	r0, r9
 8011864:	f000 fdb4 	bl	80123d0 <_Bfree>
 8011868:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801186c:	2200      	movs	r2, #0
 801186e:	601a      	str	r2, [r3, #0]
 8011870:	1e2b      	subs	r3, r5, #0
 8011872:	bfbb      	ittet	lt
 8011874:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011878:	9303      	strlt	r3, [sp, #12]
 801187a:	2300      	movge	r3, #0
 801187c:	2201      	movlt	r2, #1
 801187e:	bfac      	ite	ge
 8011880:	6033      	strge	r3, [r6, #0]
 8011882:	6032      	strlt	r2, [r6, #0]
 8011884:	4b90      	ldr	r3, [pc, #576]	@ (8011ac8 <_dtoa_r+0x2b8>)
 8011886:	9e03      	ldr	r6, [sp, #12]
 8011888:	43b3      	bics	r3, r6
 801188a:	d110      	bne.n	80118ae <_dtoa_r+0x9e>
 801188c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801188e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011892:	6013      	str	r3, [r2, #0]
 8011894:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011898:	4323      	orrs	r3, r4
 801189a:	f000 84de 	beq.w	801225a <_dtoa_r+0xa4a>
 801189e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80118a0:	4f8a      	ldr	r7, [pc, #552]	@ (8011acc <_dtoa_r+0x2bc>)
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f000 84e0 	beq.w	8012268 <_dtoa_r+0xa58>
 80118a8:	1cfb      	adds	r3, r7, #3
 80118aa:	f000 bcdb 	b.w	8012264 <_dtoa_r+0xa54>
 80118ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80118b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80118b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ba:	d10a      	bne.n	80118d2 <_dtoa_r+0xc2>
 80118bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118be:	2301      	movs	r3, #1
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80118c4:	b113      	cbz	r3, 80118cc <_dtoa_r+0xbc>
 80118c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80118c8:	4b81      	ldr	r3, [pc, #516]	@ (8011ad0 <_dtoa_r+0x2c0>)
 80118ca:	6013      	str	r3, [r2, #0]
 80118cc:	4f81      	ldr	r7, [pc, #516]	@ (8011ad4 <_dtoa_r+0x2c4>)
 80118ce:	f000 bccb 	b.w	8012268 <_dtoa_r+0xa58>
 80118d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80118d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80118d6:	4648      	mov	r0, r9
 80118d8:	eeb0 0b48 	vmov.f64	d0, d8
 80118dc:	f001 f91c 	bl	8012b18 <__d2b>
 80118e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80118e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118e6:	9001      	str	r0, [sp, #4]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d045      	beq.n	8011978 <_dtoa_r+0x168>
 80118ec:	eeb0 7b48 	vmov.f64	d7, d8
 80118f0:	ee18 1a90 	vmov	r1, s17
 80118f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80118f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80118fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011900:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011904:	2500      	movs	r5, #0
 8011906:	ee07 1a90 	vmov	s15, r1
 801190a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801190e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011aa8 <_dtoa_r+0x298>
 8011912:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011916:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011ab0 <_dtoa_r+0x2a0>
 801191a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801191e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011ab8 <_dtoa_r+0x2a8>
 8011922:	ee07 3a90 	vmov	s15, r3
 8011926:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801192a:	eeb0 7b46 	vmov.f64	d7, d6
 801192e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011932:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011936:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	ee16 8a90 	vmov	r8, s13
 8011942:	d508      	bpl.n	8011956 <_dtoa_r+0x146>
 8011944:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011948:	eeb4 6b47 	vcmp.f64	d6, d7
 801194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011950:	bf18      	it	ne
 8011952:	f108 38ff 	addne.w	r8, r8, #4294967295
 8011956:	f1b8 0f16 	cmp.w	r8, #22
 801195a:	d82b      	bhi.n	80119b4 <_dtoa_r+0x1a4>
 801195c:	495e      	ldr	r1, [pc, #376]	@ (8011ad8 <_dtoa_r+0x2c8>)
 801195e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011962:	ed91 7b00 	vldr	d7, [r1]
 8011966:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	d501      	bpl.n	8011974 <_dtoa_r+0x164>
 8011970:	f108 38ff 	add.w	r8, r8, #4294967295
 8011974:	2100      	movs	r1, #0
 8011976:	e01e      	b.n	80119b6 <_dtoa_r+0x1a6>
 8011978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801197a:	4413      	add	r3, r2
 801197c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011980:	2920      	cmp	r1, #32
 8011982:	bfc1      	itttt	gt
 8011984:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011988:	408e      	lslgt	r6, r1
 801198a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801198e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011992:	bfd6      	itet	le
 8011994:	f1c1 0120 	rsble	r1, r1, #32
 8011998:	4331      	orrgt	r1, r6
 801199a:	fa04 f101 	lslle.w	r1, r4, r1
 801199e:	ee07 1a90 	vmov	s15, r1
 80119a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80119a6:	3b01      	subs	r3, #1
 80119a8:	ee17 1a90 	vmov	r1, s15
 80119ac:	2501      	movs	r5, #1
 80119ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80119b2:	e7a8      	b.n	8011906 <_dtoa_r+0xf6>
 80119b4:	2101      	movs	r1, #1
 80119b6:	1ad2      	subs	r2, r2, r3
 80119b8:	1e53      	subs	r3, r2, #1
 80119ba:	9306      	str	r3, [sp, #24]
 80119bc:	bf45      	ittet	mi
 80119be:	f1c2 0301 	rsbmi	r3, r2, #1
 80119c2:	9305      	strmi	r3, [sp, #20]
 80119c4:	2300      	movpl	r3, #0
 80119c6:	2300      	movmi	r3, #0
 80119c8:	bf4c      	ite	mi
 80119ca:	9306      	strmi	r3, [sp, #24]
 80119cc:	9305      	strpl	r3, [sp, #20]
 80119ce:	f1b8 0f00 	cmp.w	r8, #0
 80119d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80119d4:	db18      	blt.n	8011a08 <_dtoa_r+0x1f8>
 80119d6:	9b06      	ldr	r3, [sp, #24]
 80119d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80119dc:	4443      	add	r3, r8
 80119de:	9306      	str	r3, [sp, #24]
 80119e0:	2300      	movs	r3, #0
 80119e2:	9a07      	ldr	r2, [sp, #28]
 80119e4:	2a09      	cmp	r2, #9
 80119e6:	d849      	bhi.n	8011a7c <_dtoa_r+0x26c>
 80119e8:	2a05      	cmp	r2, #5
 80119ea:	bfc4      	itt	gt
 80119ec:	3a04      	subgt	r2, #4
 80119ee:	9207      	strgt	r2, [sp, #28]
 80119f0:	9a07      	ldr	r2, [sp, #28]
 80119f2:	f1a2 0202 	sub.w	r2, r2, #2
 80119f6:	bfcc      	ite	gt
 80119f8:	2400      	movgt	r4, #0
 80119fa:	2401      	movle	r4, #1
 80119fc:	2a03      	cmp	r2, #3
 80119fe:	d848      	bhi.n	8011a92 <_dtoa_r+0x282>
 8011a00:	e8df f002 	tbb	[pc, r2]
 8011a04:	3a2c2e0b 	.word	0x3a2c2e0b
 8011a08:	9b05      	ldr	r3, [sp, #20]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	eba3 0308 	sub.w	r3, r3, r8
 8011a10:	9305      	str	r3, [sp, #20]
 8011a12:	920a      	str	r2, [sp, #40]	@ 0x28
 8011a14:	f1c8 0300 	rsb	r3, r8, #0
 8011a18:	e7e3      	b.n	80119e2 <_dtoa_r+0x1d2>
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	9208      	str	r2, [sp, #32]
 8011a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a20:	2a00      	cmp	r2, #0
 8011a22:	dc39      	bgt.n	8011a98 <_dtoa_r+0x288>
 8011a24:	f04f 0b01 	mov.w	fp, #1
 8011a28:	46da      	mov	sl, fp
 8011a2a:	465a      	mov	r2, fp
 8011a2c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011a30:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8011a34:	2100      	movs	r1, #0
 8011a36:	2004      	movs	r0, #4
 8011a38:	f100 0614 	add.w	r6, r0, #20
 8011a3c:	4296      	cmp	r6, r2
 8011a3e:	d930      	bls.n	8011aa2 <_dtoa_r+0x292>
 8011a40:	6079      	str	r1, [r7, #4]
 8011a42:	4648      	mov	r0, r9
 8011a44:	9304      	str	r3, [sp, #16]
 8011a46:	f000 fc83 	bl	8012350 <_Balloc>
 8011a4a:	9b04      	ldr	r3, [sp, #16]
 8011a4c:	4607      	mov	r7, r0
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d146      	bne.n	8011ae0 <_dtoa_r+0x2d0>
 8011a52:	4b22      	ldr	r3, [pc, #136]	@ (8011adc <_dtoa_r+0x2cc>)
 8011a54:	4602      	mov	r2, r0
 8011a56:	f240 11af 	movw	r1, #431	@ 0x1af
 8011a5a:	e6f2      	b.n	8011842 <_dtoa_r+0x32>
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	e7dd      	b.n	8011a1c <_dtoa_r+0x20c>
 8011a60:	2200      	movs	r2, #0
 8011a62:	9208      	str	r2, [sp, #32]
 8011a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a66:	eb08 0b02 	add.w	fp, r8, r2
 8011a6a:	f10b 0a01 	add.w	sl, fp, #1
 8011a6e:	4652      	mov	r2, sl
 8011a70:	2a01      	cmp	r2, #1
 8011a72:	bfb8      	it	lt
 8011a74:	2201      	movlt	r2, #1
 8011a76:	e7db      	b.n	8011a30 <_dtoa_r+0x220>
 8011a78:	2201      	movs	r2, #1
 8011a7a:	e7f2      	b.n	8011a62 <_dtoa_r+0x252>
 8011a7c:	2401      	movs	r4, #1
 8011a7e:	2200      	movs	r2, #0
 8011a80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011a84:	f04f 3bff 	mov.w	fp, #4294967295
 8011a88:	2100      	movs	r1, #0
 8011a8a:	46da      	mov	sl, fp
 8011a8c:	2212      	movs	r2, #18
 8011a8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a90:	e7ce      	b.n	8011a30 <_dtoa_r+0x220>
 8011a92:	2201      	movs	r2, #1
 8011a94:	9208      	str	r2, [sp, #32]
 8011a96:	e7f5      	b.n	8011a84 <_dtoa_r+0x274>
 8011a98:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011a9c:	46da      	mov	sl, fp
 8011a9e:	465a      	mov	r2, fp
 8011aa0:	e7c6      	b.n	8011a30 <_dtoa_r+0x220>
 8011aa2:	3101      	adds	r1, #1
 8011aa4:	0040      	lsls	r0, r0, #1
 8011aa6:	e7c7      	b.n	8011a38 <_dtoa_r+0x228>
 8011aa8:	636f4361 	.word	0x636f4361
 8011aac:	3fd287a7 	.word	0x3fd287a7
 8011ab0:	8b60c8b3 	.word	0x8b60c8b3
 8011ab4:	3fc68a28 	.word	0x3fc68a28
 8011ab8:	509f79fb 	.word	0x509f79fb
 8011abc:	3fd34413 	.word	0x3fd34413
 8011ac0:	080153aa 	.word	0x080153aa
 8011ac4:	080153c1 	.word	0x080153c1
 8011ac8:	7ff00000 	.word	0x7ff00000
 8011acc:	080153a6 	.word	0x080153a6
 8011ad0:	08015375 	.word	0x08015375
 8011ad4:	08015374 	.word	0x08015374
 8011ad8:	080154b8 	.word	0x080154b8
 8011adc:	08015419 	.word	0x08015419
 8011ae0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011ae4:	f1ba 0f0e 	cmp.w	sl, #14
 8011ae8:	6010      	str	r0, [r2, #0]
 8011aea:	d86f      	bhi.n	8011bcc <_dtoa_r+0x3bc>
 8011aec:	2c00      	cmp	r4, #0
 8011aee:	d06d      	beq.n	8011bcc <_dtoa_r+0x3bc>
 8011af0:	f1b8 0f00 	cmp.w	r8, #0
 8011af4:	f340 80c2 	ble.w	8011c7c <_dtoa_r+0x46c>
 8011af8:	4aca      	ldr	r2, [pc, #808]	@ (8011e24 <_dtoa_r+0x614>)
 8011afa:	f008 010f 	and.w	r1, r8, #15
 8011afe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011b02:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011b06:	ed92 7b00 	vldr	d7, [r2]
 8011b0a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011b0e:	f000 80a9 	beq.w	8011c64 <_dtoa_r+0x454>
 8011b12:	4ac5      	ldr	r2, [pc, #788]	@ (8011e28 <_dtoa_r+0x618>)
 8011b14:	ed92 6b08 	vldr	d6, [r2, #32]
 8011b18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011b1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011b20:	f001 010f 	and.w	r1, r1, #15
 8011b24:	2203      	movs	r2, #3
 8011b26:	48c0      	ldr	r0, [pc, #768]	@ (8011e28 <_dtoa_r+0x618>)
 8011b28:	2900      	cmp	r1, #0
 8011b2a:	f040 809d 	bne.w	8011c68 <_dtoa_r+0x458>
 8011b2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b40:	2900      	cmp	r1, #0
 8011b42:	f000 80c1 	beq.w	8011cc8 <_dtoa_r+0x4b8>
 8011b46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011b4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b52:	f140 80b9 	bpl.w	8011cc8 <_dtoa_r+0x4b8>
 8011b56:	f1ba 0f00 	cmp.w	sl, #0
 8011b5a:	f000 80b5 	beq.w	8011cc8 <_dtoa_r+0x4b8>
 8011b5e:	f1bb 0f00 	cmp.w	fp, #0
 8011b62:	dd31      	ble.n	8011bc8 <_dtoa_r+0x3b8>
 8011b64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b70:	f108 31ff 	add.w	r1, r8, #4294967295
 8011b74:	9104      	str	r1, [sp, #16]
 8011b76:	3201      	adds	r2, #1
 8011b78:	465c      	mov	r4, fp
 8011b7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b7e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011b82:	ee07 2a90 	vmov	s15, r2
 8011b86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b8a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011b8e:	ee15 2a90 	vmov	r2, s11
 8011b92:	ec51 0b15 	vmov	r0, r1, d5
 8011b96:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011b9a:	2c00      	cmp	r4, #0
 8011b9c:	f040 8098 	bne.w	8011cd0 <_dtoa_r+0x4c0>
 8011ba0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011ba4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011ba8:	ec41 0b17 	vmov	d7, r0, r1
 8011bac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb4:	f300 8261 	bgt.w	801207a <_dtoa_r+0x86a>
 8011bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8011bbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc4:	f100 80f5 	bmi.w	8011db2 <_dtoa_r+0x5a2>
 8011bc8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011bcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011bce:	2a00      	cmp	r2, #0
 8011bd0:	f2c0 812c 	blt.w	8011e2c <_dtoa_r+0x61c>
 8011bd4:	f1b8 0f0e 	cmp.w	r8, #14
 8011bd8:	f300 8128 	bgt.w	8011e2c <_dtoa_r+0x61c>
 8011bdc:	4b91      	ldr	r3, [pc, #580]	@ (8011e24 <_dtoa_r+0x614>)
 8011bde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011be2:	ed93 6b00 	vldr	d6, [r3]
 8011be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	da03      	bge.n	8011bf4 <_dtoa_r+0x3e4>
 8011bec:	f1ba 0f00 	cmp.w	sl, #0
 8011bf0:	f340 80d2 	ble.w	8011d98 <_dtoa_r+0x588>
 8011bf4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011bfc:	463e      	mov	r6, r7
 8011bfe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011c02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011c06:	ee15 3a10 	vmov	r3, s10
 8011c0a:	3330      	adds	r3, #48	@ 0x30
 8011c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8011c10:	1bf3      	subs	r3, r6, r7
 8011c12:	459a      	cmp	sl, r3
 8011c14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011c18:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011c1c:	f040 80f8 	bne.w	8011e10 <_dtoa_r+0x600>
 8011c20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011c24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2c:	f300 80dd 	bgt.w	8011dea <_dtoa_r+0x5da>
 8011c30:	eeb4 7b46 	vcmp.f64	d7, d6
 8011c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c38:	d104      	bne.n	8011c44 <_dtoa_r+0x434>
 8011c3a:	ee15 3a10 	vmov	r3, s10
 8011c3e:	07db      	lsls	r3, r3, #31
 8011c40:	f100 80d3 	bmi.w	8011dea <_dtoa_r+0x5da>
 8011c44:	9901      	ldr	r1, [sp, #4]
 8011c46:	4648      	mov	r0, r9
 8011c48:	f000 fbc2 	bl	80123d0 <_Bfree>
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c50:	7033      	strb	r3, [r6, #0]
 8011c52:	f108 0301 	add.w	r3, r8, #1
 8011c56:	6013      	str	r3, [r2, #0]
 8011c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f000 8304 	beq.w	8012268 <_dtoa_r+0xa58>
 8011c60:	601e      	str	r6, [r3, #0]
 8011c62:	e301      	b.n	8012268 <_dtoa_r+0xa58>
 8011c64:	2202      	movs	r2, #2
 8011c66:	e75e      	b.n	8011b26 <_dtoa_r+0x316>
 8011c68:	07cc      	lsls	r4, r1, #31
 8011c6a:	d504      	bpl.n	8011c76 <_dtoa_r+0x466>
 8011c6c:	ed90 6b00 	vldr	d6, [r0]
 8011c70:	3201      	adds	r2, #1
 8011c72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c76:	1049      	asrs	r1, r1, #1
 8011c78:	3008      	adds	r0, #8
 8011c7a:	e755      	b.n	8011b28 <_dtoa_r+0x318>
 8011c7c:	d022      	beq.n	8011cc4 <_dtoa_r+0x4b4>
 8011c7e:	f1c8 0100 	rsb	r1, r8, #0
 8011c82:	4a68      	ldr	r2, [pc, #416]	@ (8011e24 <_dtoa_r+0x614>)
 8011c84:	f001 000f 	and.w	r0, r1, #15
 8011c88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011c8c:	ed92 7b00 	vldr	d7, [r2]
 8011c90:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011c94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c98:	4863      	ldr	r0, [pc, #396]	@ (8011e28 <_dtoa_r+0x618>)
 8011c9a:	1109      	asrs	r1, r1, #4
 8011c9c:	2400      	movs	r4, #0
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	b929      	cbnz	r1, 8011cae <_dtoa_r+0x49e>
 8011ca2:	2c00      	cmp	r4, #0
 8011ca4:	f43f af49 	beq.w	8011b3a <_dtoa_r+0x32a>
 8011ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cac:	e745      	b.n	8011b3a <_dtoa_r+0x32a>
 8011cae:	07ce      	lsls	r6, r1, #31
 8011cb0:	d505      	bpl.n	8011cbe <_dtoa_r+0x4ae>
 8011cb2:	ed90 6b00 	vldr	d6, [r0]
 8011cb6:	3201      	adds	r2, #1
 8011cb8:	2401      	movs	r4, #1
 8011cba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011cbe:	1049      	asrs	r1, r1, #1
 8011cc0:	3008      	adds	r0, #8
 8011cc2:	e7ed      	b.n	8011ca0 <_dtoa_r+0x490>
 8011cc4:	2202      	movs	r2, #2
 8011cc6:	e738      	b.n	8011b3a <_dtoa_r+0x32a>
 8011cc8:	f8cd 8010 	str.w	r8, [sp, #16]
 8011ccc:	4654      	mov	r4, sl
 8011cce:	e754      	b.n	8011b7a <_dtoa_r+0x36a>
 8011cd0:	4a54      	ldr	r2, [pc, #336]	@ (8011e24 <_dtoa_r+0x614>)
 8011cd2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011cd6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011cda:	9a08      	ldr	r2, [sp, #32]
 8011cdc:	ec41 0b17 	vmov	d7, r0, r1
 8011ce0:	443c      	add	r4, r7
 8011ce2:	b34a      	cbz	r2, 8011d38 <_dtoa_r+0x528>
 8011ce4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011ce8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011cec:	463e      	mov	r6, r7
 8011cee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011cf2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011cf6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011cfa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011cfe:	ee14 2a90 	vmov	r2, s9
 8011d02:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d06:	3230      	adds	r2, #48	@ 0x30
 8011d08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d14:	f806 2b01 	strb.w	r2, [r6], #1
 8011d18:	d438      	bmi.n	8011d8c <_dtoa_r+0x57c>
 8011d1a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011d1e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d26:	d462      	bmi.n	8011dee <_dtoa_r+0x5de>
 8011d28:	42a6      	cmp	r6, r4
 8011d2a:	f43f af4d 	beq.w	8011bc8 <_dtoa_r+0x3b8>
 8011d2e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011d32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d36:	e7e0      	b.n	8011cfa <_dtoa_r+0x4ea>
 8011d38:	4621      	mov	r1, r4
 8011d3a:	463e      	mov	r6, r7
 8011d3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d40:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d48:	ee14 2a90 	vmov	r2, s9
 8011d4c:	3230      	adds	r2, #48	@ 0x30
 8011d4e:	f806 2b01 	strb.w	r2, [r6], #1
 8011d52:	42a6      	cmp	r6, r4
 8011d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d5c:	d119      	bne.n	8011d92 <_dtoa_r+0x582>
 8011d5e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8011d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6e:	dc3e      	bgt.n	8011dee <_dtoa_r+0x5de>
 8011d70:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011d74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7c:	f57f af24 	bpl.w	8011bc8 <_dtoa_r+0x3b8>
 8011d80:	460e      	mov	r6, r1
 8011d82:	3901      	subs	r1, #1
 8011d84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011d88:	2b30      	cmp	r3, #48	@ 0x30
 8011d8a:	d0f9      	beq.n	8011d80 <_dtoa_r+0x570>
 8011d8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011d90:	e758      	b.n	8011c44 <_dtoa_r+0x434>
 8011d92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d96:	e7d5      	b.n	8011d44 <_dtoa_r+0x534>
 8011d98:	d10b      	bne.n	8011db2 <_dtoa_r+0x5a2>
 8011d9a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011d9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011da6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dae:	f2c0 8161 	blt.w	8012074 <_dtoa_r+0x864>
 8011db2:	2400      	movs	r4, #0
 8011db4:	4625      	mov	r5, r4
 8011db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011db8:	43db      	mvns	r3, r3
 8011dba:	9304      	str	r3, [sp, #16]
 8011dbc:	463e      	mov	r6, r7
 8011dbe:	f04f 0800 	mov.w	r8, #0
 8011dc2:	4621      	mov	r1, r4
 8011dc4:	4648      	mov	r0, r9
 8011dc6:	f000 fb03 	bl	80123d0 <_Bfree>
 8011dca:	2d00      	cmp	r5, #0
 8011dcc:	d0de      	beq.n	8011d8c <_dtoa_r+0x57c>
 8011dce:	f1b8 0f00 	cmp.w	r8, #0
 8011dd2:	d005      	beq.n	8011de0 <_dtoa_r+0x5d0>
 8011dd4:	45a8      	cmp	r8, r5
 8011dd6:	d003      	beq.n	8011de0 <_dtoa_r+0x5d0>
 8011dd8:	4641      	mov	r1, r8
 8011dda:	4648      	mov	r0, r9
 8011ddc:	f000 faf8 	bl	80123d0 <_Bfree>
 8011de0:	4629      	mov	r1, r5
 8011de2:	4648      	mov	r0, r9
 8011de4:	f000 faf4 	bl	80123d0 <_Bfree>
 8011de8:	e7d0      	b.n	8011d8c <_dtoa_r+0x57c>
 8011dea:	f8cd 8010 	str.w	r8, [sp, #16]
 8011dee:	4633      	mov	r3, r6
 8011df0:	461e      	mov	r6, r3
 8011df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011df6:	2a39      	cmp	r2, #57	@ 0x39
 8011df8:	d106      	bne.n	8011e08 <_dtoa_r+0x5f8>
 8011dfa:	429f      	cmp	r7, r3
 8011dfc:	d1f8      	bne.n	8011df0 <_dtoa_r+0x5e0>
 8011dfe:	9a04      	ldr	r2, [sp, #16]
 8011e00:	3201      	adds	r2, #1
 8011e02:	9204      	str	r2, [sp, #16]
 8011e04:	2230      	movs	r2, #48	@ 0x30
 8011e06:	703a      	strb	r2, [r7, #0]
 8011e08:	781a      	ldrb	r2, [r3, #0]
 8011e0a:	3201      	adds	r2, #1
 8011e0c:	701a      	strb	r2, [r3, #0]
 8011e0e:	e7bd      	b.n	8011d8c <_dtoa_r+0x57c>
 8011e10:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011e14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e1c:	f47f aeef 	bne.w	8011bfe <_dtoa_r+0x3ee>
 8011e20:	e710      	b.n	8011c44 <_dtoa_r+0x434>
 8011e22:	bf00      	nop
 8011e24:	080154b8 	.word	0x080154b8
 8011e28:	08015490 	.word	0x08015490
 8011e2c:	9908      	ldr	r1, [sp, #32]
 8011e2e:	2900      	cmp	r1, #0
 8011e30:	f000 80e3 	beq.w	8011ffa <_dtoa_r+0x7ea>
 8011e34:	9907      	ldr	r1, [sp, #28]
 8011e36:	2901      	cmp	r1, #1
 8011e38:	f300 80c8 	bgt.w	8011fcc <_dtoa_r+0x7bc>
 8011e3c:	2d00      	cmp	r5, #0
 8011e3e:	f000 80c1 	beq.w	8011fc4 <_dtoa_r+0x7b4>
 8011e42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011e46:	9e05      	ldr	r6, [sp, #20]
 8011e48:	461c      	mov	r4, r3
 8011e4a:	9304      	str	r3, [sp, #16]
 8011e4c:	9b05      	ldr	r3, [sp, #20]
 8011e4e:	4413      	add	r3, r2
 8011e50:	9305      	str	r3, [sp, #20]
 8011e52:	9b06      	ldr	r3, [sp, #24]
 8011e54:	2101      	movs	r1, #1
 8011e56:	4413      	add	r3, r2
 8011e58:	4648      	mov	r0, r9
 8011e5a:	9306      	str	r3, [sp, #24]
 8011e5c:	f000 fbb6 	bl	80125cc <__i2b>
 8011e60:	9b04      	ldr	r3, [sp, #16]
 8011e62:	4605      	mov	r5, r0
 8011e64:	b166      	cbz	r6, 8011e80 <_dtoa_r+0x670>
 8011e66:	9a06      	ldr	r2, [sp, #24]
 8011e68:	2a00      	cmp	r2, #0
 8011e6a:	dd09      	ble.n	8011e80 <_dtoa_r+0x670>
 8011e6c:	42b2      	cmp	r2, r6
 8011e6e:	9905      	ldr	r1, [sp, #20]
 8011e70:	bfa8      	it	ge
 8011e72:	4632      	movge	r2, r6
 8011e74:	1a89      	subs	r1, r1, r2
 8011e76:	9105      	str	r1, [sp, #20]
 8011e78:	9906      	ldr	r1, [sp, #24]
 8011e7a:	1ab6      	subs	r6, r6, r2
 8011e7c:	1a8a      	subs	r2, r1, r2
 8011e7e:	9206      	str	r2, [sp, #24]
 8011e80:	b1fb      	cbz	r3, 8011ec2 <_dtoa_r+0x6b2>
 8011e82:	9a08      	ldr	r2, [sp, #32]
 8011e84:	2a00      	cmp	r2, #0
 8011e86:	f000 80bc 	beq.w	8012002 <_dtoa_r+0x7f2>
 8011e8a:	b19c      	cbz	r4, 8011eb4 <_dtoa_r+0x6a4>
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	4622      	mov	r2, r4
 8011e90:	4648      	mov	r0, r9
 8011e92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e94:	f000 fc5a 	bl	801274c <__pow5mult>
 8011e98:	9a01      	ldr	r2, [sp, #4]
 8011e9a:	4601      	mov	r1, r0
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	4648      	mov	r0, r9
 8011ea0:	f000 fbaa 	bl	80125f8 <__multiply>
 8011ea4:	9901      	ldr	r1, [sp, #4]
 8011ea6:	9004      	str	r0, [sp, #16]
 8011ea8:	4648      	mov	r0, r9
 8011eaa:	f000 fa91 	bl	80123d0 <_Bfree>
 8011eae:	9a04      	ldr	r2, [sp, #16]
 8011eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011eb2:	9201      	str	r2, [sp, #4]
 8011eb4:	1b1a      	subs	r2, r3, r4
 8011eb6:	d004      	beq.n	8011ec2 <_dtoa_r+0x6b2>
 8011eb8:	9901      	ldr	r1, [sp, #4]
 8011eba:	4648      	mov	r0, r9
 8011ebc:	f000 fc46 	bl	801274c <__pow5mult>
 8011ec0:	9001      	str	r0, [sp, #4]
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	4648      	mov	r0, r9
 8011ec6:	f000 fb81 	bl	80125cc <__i2b>
 8011eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ecc:	4604      	mov	r4, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f000 81d0 	beq.w	8012274 <_dtoa_r+0xa64>
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	4648      	mov	r0, r9
 8011eda:	f000 fc37 	bl	801274c <__pow5mult>
 8011ede:	9b07      	ldr	r3, [sp, #28]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	f300 8095 	bgt.w	8012012 <_dtoa_r+0x802>
 8011ee8:	9b02      	ldr	r3, [sp, #8]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	f040 808b 	bne.w	8012006 <_dtoa_r+0x7f6>
 8011ef0:	9b03      	ldr	r3, [sp, #12]
 8011ef2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011ef6:	2a00      	cmp	r2, #0
 8011ef8:	f040 8087 	bne.w	801200a <_dtoa_r+0x7fa>
 8011efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011f00:	0d12      	lsrs	r2, r2, #20
 8011f02:	0512      	lsls	r2, r2, #20
 8011f04:	2a00      	cmp	r2, #0
 8011f06:	f000 8082 	beq.w	801200e <_dtoa_r+0x7fe>
 8011f0a:	9b05      	ldr	r3, [sp, #20]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	9305      	str	r3, [sp, #20]
 8011f10:	9b06      	ldr	r3, [sp, #24]
 8011f12:	3301      	adds	r3, #1
 8011f14:	9306      	str	r3, [sp, #24]
 8011f16:	2301      	movs	r3, #1
 8011f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f000 81af 	beq.w	8012280 <_dtoa_r+0xa70>
 8011f22:	6922      	ldr	r2, [r4, #16]
 8011f24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011f28:	6910      	ldr	r0, [r2, #16]
 8011f2a:	f000 fb03 	bl	8012534 <__hi0bits>
 8011f2e:	f1c0 0020 	rsb	r0, r0, #32
 8011f32:	9b06      	ldr	r3, [sp, #24]
 8011f34:	4418      	add	r0, r3
 8011f36:	f010 001f 	ands.w	r0, r0, #31
 8011f3a:	d076      	beq.n	801202a <_dtoa_r+0x81a>
 8011f3c:	f1c0 0220 	rsb	r2, r0, #32
 8011f40:	2a04      	cmp	r2, #4
 8011f42:	dd69      	ble.n	8012018 <_dtoa_r+0x808>
 8011f44:	9b05      	ldr	r3, [sp, #20]
 8011f46:	f1c0 001c 	rsb	r0, r0, #28
 8011f4a:	4403      	add	r3, r0
 8011f4c:	9305      	str	r3, [sp, #20]
 8011f4e:	9b06      	ldr	r3, [sp, #24]
 8011f50:	4406      	add	r6, r0
 8011f52:	4403      	add	r3, r0
 8011f54:	9306      	str	r3, [sp, #24]
 8011f56:	9b05      	ldr	r3, [sp, #20]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	dd05      	ble.n	8011f68 <_dtoa_r+0x758>
 8011f5c:	9901      	ldr	r1, [sp, #4]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	4648      	mov	r0, r9
 8011f62:	f000 fc4d 	bl	8012800 <__lshift>
 8011f66:	9001      	str	r0, [sp, #4]
 8011f68:	9b06      	ldr	r3, [sp, #24]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	dd05      	ble.n	8011f7a <_dtoa_r+0x76a>
 8011f6e:	4621      	mov	r1, r4
 8011f70:	461a      	mov	r2, r3
 8011f72:	4648      	mov	r0, r9
 8011f74:	f000 fc44 	bl	8012800 <__lshift>
 8011f78:	4604      	mov	r4, r0
 8011f7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d056      	beq.n	801202e <_dtoa_r+0x81e>
 8011f80:	9801      	ldr	r0, [sp, #4]
 8011f82:	4621      	mov	r1, r4
 8011f84:	f000 fca8 	bl	80128d8 <__mcmp>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	da50      	bge.n	801202e <_dtoa_r+0x81e>
 8011f8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f90:	9304      	str	r3, [sp, #16]
 8011f92:	9901      	ldr	r1, [sp, #4]
 8011f94:	2300      	movs	r3, #0
 8011f96:	220a      	movs	r2, #10
 8011f98:	4648      	mov	r0, r9
 8011f9a:	f000 fa3b 	bl	8012414 <__multadd>
 8011f9e:	9b08      	ldr	r3, [sp, #32]
 8011fa0:	9001      	str	r0, [sp, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 816e 	beq.w	8012284 <_dtoa_r+0xa74>
 8011fa8:	4629      	mov	r1, r5
 8011faa:	2300      	movs	r3, #0
 8011fac:	220a      	movs	r2, #10
 8011fae:	4648      	mov	r0, r9
 8011fb0:	f000 fa30 	bl	8012414 <__multadd>
 8011fb4:	f1bb 0f00 	cmp.w	fp, #0
 8011fb8:	4605      	mov	r5, r0
 8011fba:	dc64      	bgt.n	8012086 <_dtoa_r+0x876>
 8011fbc:	9b07      	ldr	r3, [sp, #28]
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	dc3e      	bgt.n	8012040 <_dtoa_r+0x830>
 8011fc2:	e060      	b.n	8012086 <_dtoa_r+0x876>
 8011fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011fc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011fca:	e73c      	b.n	8011e46 <_dtoa_r+0x636>
 8011fcc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011fd0:	42a3      	cmp	r3, r4
 8011fd2:	bfbf      	itttt	lt
 8011fd4:	1ae2      	sublt	r2, r4, r3
 8011fd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011fd8:	189b      	addlt	r3, r3, r2
 8011fda:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011fdc:	bfae      	itee	ge
 8011fde:	1b1c      	subge	r4, r3, r4
 8011fe0:	4623      	movlt	r3, r4
 8011fe2:	2400      	movlt	r4, #0
 8011fe4:	f1ba 0f00 	cmp.w	sl, #0
 8011fe8:	bfb5      	itete	lt
 8011fea:	9a05      	ldrlt	r2, [sp, #20]
 8011fec:	9e05      	ldrge	r6, [sp, #20]
 8011fee:	eba2 060a 	sublt.w	r6, r2, sl
 8011ff2:	4652      	movge	r2, sl
 8011ff4:	bfb8      	it	lt
 8011ff6:	2200      	movlt	r2, #0
 8011ff8:	e727      	b.n	8011e4a <_dtoa_r+0x63a>
 8011ffa:	9e05      	ldr	r6, [sp, #20]
 8011ffc:	9d08      	ldr	r5, [sp, #32]
 8011ffe:	461c      	mov	r4, r3
 8012000:	e730      	b.n	8011e64 <_dtoa_r+0x654>
 8012002:	461a      	mov	r2, r3
 8012004:	e758      	b.n	8011eb8 <_dtoa_r+0x6a8>
 8012006:	2300      	movs	r3, #0
 8012008:	e786      	b.n	8011f18 <_dtoa_r+0x708>
 801200a:	9b02      	ldr	r3, [sp, #8]
 801200c:	e784      	b.n	8011f18 <_dtoa_r+0x708>
 801200e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012010:	e783      	b.n	8011f1a <_dtoa_r+0x70a>
 8012012:	2300      	movs	r3, #0
 8012014:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012016:	e784      	b.n	8011f22 <_dtoa_r+0x712>
 8012018:	d09d      	beq.n	8011f56 <_dtoa_r+0x746>
 801201a:	9b05      	ldr	r3, [sp, #20]
 801201c:	321c      	adds	r2, #28
 801201e:	4413      	add	r3, r2
 8012020:	9305      	str	r3, [sp, #20]
 8012022:	9b06      	ldr	r3, [sp, #24]
 8012024:	4416      	add	r6, r2
 8012026:	4413      	add	r3, r2
 8012028:	e794      	b.n	8011f54 <_dtoa_r+0x744>
 801202a:	4602      	mov	r2, r0
 801202c:	e7f5      	b.n	801201a <_dtoa_r+0x80a>
 801202e:	f1ba 0f00 	cmp.w	sl, #0
 8012032:	f8cd 8010 	str.w	r8, [sp, #16]
 8012036:	46d3      	mov	fp, sl
 8012038:	dc21      	bgt.n	801207e <_dtoa_r+0x86e>
 801203a:	9b07      	ldr	r3, [sp, #28]
 801203c:	2b02      	cmp	r3, #2
 801203e:	dd1e      	ble.n	801207e <_dtoa_r+0x86e>
 8012040:	f1bb 0f00 	cmp.w	fp, #0
 8012044:	f47f aeb7 	bne.w	8011db6 <_dtoa_r+0x5a6>
 8012048:	4621      	mov	r1, r4
 801204a:	465b      	mov	r3, fp
 801204c:	2205      	movs	r2, #5
 801204e:	4648      	mov	r0, r9
 8012050:	f000 f9e0 	bl	8012414 <__multadd>
 8012054:	4601      	mov	r1, r0
 8012056:	4604      	mov	r4, r0
 8012058:	9801      	ldr	r0, [sp, #4]
 801205a:	f000 fc3d 	bl	80128d8 <__mcmp>
 801205e:	2800      	cmp	r0, #0
 8012060:	f77f aea9 	ble.w	8011db6 <_dtoa_r+0x5a6>
 8012064:	463e      	mov	r6, r7
 8012066:	2331      	movs	r3, #49	@ 0x31
 8012068:	f806 3b01 	strb.w	r3, [r6], #1
 801206c:	9b04      	ldr	r3, [sp, #16]
 801206e:	3301      	adds	r3, #1
 8012070:	9304      	str	r3, [sp, #16]
 8012072:	e6a4      	b.n	8011dbe <_dtoa_r+0x5ae>
 8012074:	f8cd 8010 	str.w	r8, [sp, #16]
 8012078:	4654      	mov	r4, sl
 801207a:	4625      	mov	r5, r4
 801207c:	e7f2      	b.n	8012064 <_dtoa_r+0x854>
 801207e:	9b08      	ldr	r3, [sp, #32]
 8012080:	2b00      	cmp	r3, #0
 8012082:	f000 8103 	beq.w	801228c <_dtoa_r+0xa7c>
 8012086:	2e00      	cmp	r6, #0
 8012088:	dd05      	ble.n	8012096 <_dtoa_r+0x886>
 801208a:	4629      	mov	r1, r5
 801208c:	4632      	mov	r2, r6
 801208e:	4648      	mov	r0, r9
 8012090:	f000 fbb6 	bl	8012800 <__lshift>
 8012094:	4605      	mov	r5, r0
 8012096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012098:	2b00      	cmp	r3, #0
 801209a:	d058      	beq.n	801214e <_dtoa_r+0x93e>
 801209c:	6869      	ldr	r1, [r5, #4]
 801209e:	4648      	mov	r0, r9
 80120a0:	f000 f956 	bl	8012350 <_Balloc>
 80120a4:	4606      	mov	r6, r0
 80120a6:	b928      	cbnz	r0, 80120b4 <_dtoa_r+0x8a4>
 80120a8:	4b82      	ldr	r3, [pc, #520]	@ (80122b4 <_dtoa_r+0xaa4>)
 80120aa:	4602      	mov	r2, r0
 80120ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80120b0:	f7ff bbc7 	b.w	8011842 <_dtoa_r+0x32>
 80120b4:	692a      	ldr	r2, [r5, #16]
 80120b6:	3202      	adds	r2, #2
 80120b8:	0092      	lsls	r2, r2, #2
 80120ba:	f105 010c 	add.w	r1, r5, #12
 80120be:	300c      	adds	r0, #12
 80120c0:	f7ff fb07 	bl	80116d2 <memcpy>
 80120c4:	2201      	movs	r2, #1
 80120c6:	4631      	mov	r1, r6
 80120c8:	4648      	mov	r0, r9
 80120ca:	f000 fb99 	bl	8012800 <__lshift>
 80120ce:	1c7b      	adds	r3, r7, #1
 80120d0:	9305      	str	r3, [sp, #20]
 80120d2:	eb07 030b 	add.w	r3, r7, fp
 80120d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80120d8:	9b02      	ldr	r3, [sp, #8]
 80120da:	f003 0301 	and.w	r3, r3, #1
 80120de:	46a8      	mov	r8, r5
 80120e0:	9308      	str	r3, [sp, #32]
 80120e2:	4605      	mov	r5, r0
 80120e4:	9b05      	ldr	r3, [sp, #20]
 80120e6:	9801      	ldr	r0, [sp, #4]
 80120e8:	4621      	mov	r1, r4
 80120ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80120ee:	f7ff fb05 	bl	80116fc <quorem>
 80120f2:	4641      	mov	r1, r8
 80120f4:	9002      	str	r0, [sp, #8]
 80120f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80120fa:	9801      	ldr	r0, [sp, #4]
 80120fc:	f000 fbec 	bl	80128d8 <__mcmp>
 8012100:	462a      	mov	r2, r5
 8012102:	9006      	str	r0, [sp, #24]
 8012104:	4621      	mov	r1, r4
 8012106:	4648      	mov	r0, r9
 8012108:	f000 fc02 	bl	8012910 <__mdiff>
 801210c:	68c2      	ldr	r2, [r0, #12]
 801210e:	4606      	mov	r6, r0
 8012110:	b9fa      	cbnz	r2, 8012152 <_dtoa_r+0x942>
 8012112:	4601      	mov	r1, r0
 8012114:	9801      	ldr	r0, [sp, #4]
 8012116:	f000 fbdf 	bl	80128d8 <__mcmp>
 801211a:	4602      	mov	r2, r0
 801211c:	4631      	mov	r1, r6
 801211e:	4648      	mov	r0, r9
 8012120:	920a      	str	r2, [sp, #40]	@ 0x28
 8012122:	f000 f955 	bl	80123d0 <_Bfree>
 8012126:	9b07      	ldr	r3, [sp, #28]
 8012128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801212a:	9e05      	ldr	r6, [sp, #20]
 801212c:	ea43 0102 	orr.w	r1, r3, r2
 8012130:	9b08      	ldr	r3, [sp, #32]
 8012132:	4319      	orrs	r1, r3
 8012134:	d10f      	bne.n	8012156 <_dtoa_r+0x946>
 8012136:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801213a:	d028      	beq.n	801218e <_dtoa_r+0x97e>
 801213c:	9b06      	ldr	r3, [sp, #24]
 801213e:	2b00      	cmp	r3, #0
 8012140:	dd02      	ble.n	8012148 <_dtoa_r+0x938>
 8012142:	9b02      	ldr	r3, [sp, #8]
 8012144:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012148:	f88b a000 	strb.w	sl, [fp]
 801214c:	e639      	b.n	8011dc2 <_dtoa_r+0x5b2>
 801214e:	4628      	mov	r0, r5
 8012150:	e7bd      	b.n	80120ce <_dtoa_r+0x8be>
 8012152:	2201      	movs	r2, #1
 8012154:	e7e2      	b.n	801211c <_dtoa_r+0x90c>
 8012156:	9b06      	ldr	r3, [sp, #24]
 8012158:	2b00      	cmp	r3, #0
 801215a:	db04      	blt.n	8012166 <_dtoa_r+0x956>
 801215c:	9907      	ldr	r1, [sp, #28]
 801215e:	430b      	orrs	r3, r1
 8012160:	9908      	ldr	r1, [sp, #32]
 8012162:	430b      	orrs	r3, r1
 8012164:	d120      	bne.n	80121a8 <_dtoa_r+0x998>
 8012166:	2a00      	cmp	r2, #0
 8012168:	ddee      	ble.n	8012148 <_dtoa_r+0x938>
 801216a:	9901      	ldr	r1, [sp, #4]
 801216c:	2201      	movs	r2, #1
 801216e:	4648      	mov	r0, r9
 8012170:	f000 fb46 	bl	8012800 <__lshift>
 8012174:	4621      	mov	r1, r4
 8012176:	9001      	str	r0, [sp, #4]
 8012178:	f000 fbae 	bl	80128d8 <__mcmp>
 801217c:	2800      	cmp	r0, #0
 801217e:	dc03      	bgt.n	8012188 <_dtoa_r+0x978>
 8012180:	d1e2      	bne.n	8012148 <_dtoa_r+0x938>
 8012182:	f01a 0f01 	tst.w	sl, #1
 8012186:	d0df      	beq.n	8012148 <_dtoa_r+0x938>
 8012188:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801218c:	d1d9      	bne.n	8012142 <_dtoa_r+0x932>
 801218e:	2339      	movs	r3, #57	@ 0x39
 8012190:	f88b 3000 	strb.w	r3, [fp]
 8012194:	4633      	mov	r3, r6
 8012196:	461e      	mov	r6, r3
 8012198:	3b01      	subs	r3, #1
 801219a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801219e:	2a39      	cmp	r2, #57	@ 0x39
 80121a0:	d053      	beq.n	801224a <_dtoa_r+0xa3a>
 80121a2:	3201      	adds	r2, #1
 80121a4:	701a      	strb	r2, [r3, #0]
 80121a6:	e60c      	b.n	8011dc2 <_dtoa_r+0x5b2>
 80121a8:	2a00      	cmp	r2, #0
 80121aa:	dd07      	ble.n	80121bc <_dtoa_r+0x9ac>
 80121ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80121b0:	d0ed      	beq.n	801218e <_dtoa_r+0x97e>
 80121b2:	f10a 0301 	add.w	r3, sl, #1
 80121b6:	f88b 3000 	strb.w	r3, [fp]
 80121ba:	e602      	b.n	8011dc2 <_dtoa_r+0x5b2>
 80121bc:	9b05      	ldr	r3, [sp, #20]
 80121be:	9a05      	ldr	r2, [sp, #20]
 80121c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80121c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d029      	beq.n	801221e <_dtoa_r+0xa0e>
 80121ca:	9901      	ldr	r1, [sp, #4]
 80121cc:	2300      	movs	r3, #0
 80121ce:	220a      	movs	r2, #10
 80121d0:	4648      	mov	r0, r9
 80121d2:	f000 f91f 	bl	8012414 <__multadd>
 80121d6:	45a8      	cmp	r8, r5
 80121d8:	9001      	str	r0, [sp, #4]
 80121da:	f04f 0300 	mov.w	r3, #0
 80121de:	f04f 020a 	mov.w	r2, #10
 80121e2:	4641      	mov	r1, r8
 80121e4:	4648      	mov	r0, r9
 80121e6:	d107      	bne.n	80121f8 <_dtoa_r+0x9e8>
 80121e8:	f000 f914 	bl	8012414 <__multadd>
 80121ec:	4680      	mov	r8, r0
 80121ee:	4605      	mov	r5, r0
 80121f0:	9b05      	ldr	r3, [sp, #20]
 80121f2:	3301      	adds	r3, #1
 80121f4:	9305      	str	r3, [sp, #20]
 80121f6:	e775      	b.n	80120e4 <_dtoa_r+0x8d4>
 80121f8:	f000 f90c 	bl	8012414 <__multadd>
 80121fc:	4629      	mov	r1, r5
 80121fe:	4680      	mov	r8, r0
 8012200:	2300      	movs	r3, #0
 8012202:	220a      	movs	r2, #10
 8012204:	4648      	mov	r0, r9
 8012206:	f000 f905 	bl	8012414 <__multadd>
 801220a:	4605      	mov	r5, r0
 801220c:	e7f0      	b.n	80121f0 <_dtoa_r+0x9e0>
 801220e:	f1bb 0f00 	cmp.w	fp, #0
 8012212:	bfcc      	ite	gt
 8012214:	465e      	movgt	r6, fp
 8012216:	2601      	movle	r6, #1
 8012218:	443e      	add	r6, r7
 801221a:	f04f 0800 	mov.w	r8, #0
 801221e:	9901      	ldr	r1, [sp, #4]
 8012220:	2201      	movs	r2, #1
 8012222:	4648      	mov	r0, r9
 8012224:	f000 faec 	bl	8012800 <__lshift>
 8012228:	4621      	mov	r1, r4
 801222a:	9001      	str	r0, [sp, #4]
 801222c:	f000 fb54 	bl	80128d8 <__mcmp>
 8012230:	2800      	cmp	r0, #0
 8012232:	dcaf      	bgt.n	8012194 <_dtoa_r+0x984>
 8012234:	d102      	bne.n	801223c <_dtoa_r+0xa2c>
 8012236:	f01a 0f01 	tst.w	sl, #1
 801223a:	d1ab      	bne.n	8012194 <_dtoa_r+0x984>
 801223c:	4633      	mov	r3, r6
 801223e:	461e      	mov	r6, r3
 8012240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012244:	2a30      	cmp	r2, #48	@ 0x30
 8012246:	d0fa      	beq.n	801223e <_dtoa_r+0xa2e>
 8012248:	e5bb      	b.n	8011dc2 <_dtoa_r+0x5b2>
 801224a:	429f      	cmp	r7, r3
 801224c:	d1a3      	bne.n	8012196 <_dtoa_r+0x986>
 801224e:	9b04      	ldr	r3, [sp, #16]
 8012250:	3301      	adds	r3, #1
 8012252:	9304      	str	r3, [sp, #16]
 8012254:	2331      	movs	r3, #49	@ 0x31
 8012256:	703b      	strb	r3, [r7, #0]
 8012258:	e5b3      	b.n	8011dc2 <_dtoa_r+0x5b2>
 801225a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801225c:	4f16      	ldr	r7, [pc, #88]	@ (80122b8 <_dtoa_r+0xaa8>)
 801225e:	b11b      	cbz	r3, 8012268 <_dtoa_r+0xa58>
 8012260:	f107 0308 	add.w	r3, r7, #8
 8012264:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012266:	6013      	str	r3, [r2, #0]
 8012268:	4638      	mov	r0, r7
 801226a:	b011      	add	sp, #68	@ 0x44
 801226c:	ecbd 8b02 	vpop	{d8}
 8012270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012274:	9b07      	ldr	r3, [sp, #28]
 8012276:	2b01      	cmp	r3, #1
 8012278:	f77f ae36 	ble.w	8011ee8 <_dtoa_r+0x6d8>
 801227c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801227e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012280:	2001      	movs	r0, #1
 8012282:	e656      	b.n	8011f32 <_dtoa_r+0x722>
 8012284:	f1bb 0f00 	cmp.w	fp, #0
 8012288:	f77f aed7 	ble.w	801203a <_dtoa_r+0x82a>
 801228c:	463e      	mov	r6, r7
 801228e:	9801      	ldr	r0, [sp, #4]
 8012290:	4621      	mov	r1, r4
 8012292:	f7ff fa33 	bl	80116fc <quorem>
 8012296:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801229a:	f806 ab01 	strb.w	sl, [r6], #1
 801229e:	1bf2      	subs	r2, r6, r7
 80122a0:	4593      	cmp	fp, r2
 80122a2:	ddb4      	ble.n	801220e <_dtoa_r+0x9fe>
 80122a4:	9901      	ldr	r1, [sp, #4]
 80122a6:	2300      	movs	r3, #0
 80122a8:	220a      	movs	r2, #10
 80122aa:	4648      	mov	r0, r9
 80122ac:	f000 f8b2 	bl	8012414 <__multadd>
 80122b0:	9001      	str	r0, [sp, #4]
 80122b2:	e7ec      	b.n	801228e <_dtoa_r+0xa7e>
 80122b4:	08015419 	.word	0x08015419
 80122b8:	0801539d 	.word	0x0801539d

080122bc <_free_r>:
 80122bc:	b538      	push	{r3, r4, r5, lr}
 80122be:	4605      	mov	r5, r0
 80122c0:	2900      	cmp	r1, #0
 80122c2:	d041      	beq.n	8012348 <_free_r+0x8c>
 80122c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122c8:	1f0c      	subs	r4, r1, #4
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	bfb8      	it	lt
 80122ce:	18e4      	addlt	r4, r4, r3
 80122d0:	f7fe f84a 	bl	8010368 <__malloc_lock>
 80122d4:	4a1d      	ldr	r2, [pc, #116]	@ (801234c <_free_r+0x90>)
 80122d6:	6813      	ldr	r3, [r2, #0]
 80122d8:	b933      	cbnz	r3, 80122e8 <_free_r+0x2c>
 80122da:	6063      	str	r3, [r4, #4]
 80122dc:	6014      	str	r4, [r2, #0]
 80122de:	4628      	mov	r0, r5
 80122e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122e4:	f7fe b846 	b.w	8010374 <__malloc_unlock>
 80122e8:	42a3      	cmp	r3, r4
 80122ea:	d908      	bls.n	80122fe <_free_r+0x42>
 80122ec:	6820      	ldr	r0, [r4, #0]
 80122ee:	1821      	adds	r1, r4, r0
 80122f0:	428b      	cmp	r3, r1
 80122f2:	bf01      	itttt	eq
 80122f4:	6819      	ldreq	r1, [r3, #0]
 80122f6:	685b      	ldreq	r3, [r3, #4]
 80122f8:	1809      	addeq	r1, r1, r0
 80122fa:	6021      	streq	r1, [r4, #0]
 80122fc:	e7ed      	b.n	80122da <_free_r+0x1e>
 80122fe:	461a      	mov	r2, r3
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	b10b      	cbz	r3, 8012308 <_free_r+0x4c>
 8012304:	42a3      	cmp	r3, r4
 8012306:	d9fa      	bls.n	80122fe <_free_r+0x42>
 8012308:	6811      	ldr	r1, [r2, #0]
 801230a:	1850      	adds	r0, r2, r1
 801230c:	42a0      	cmp	r0, r4
 801230e:	d10b      	bne.n	8012328 <_free_r+0x6c>
 8012310:	6820      	ldr	r0, [r4, #0]
 8012312:	4401      	add	r1, r0
 8012314:	1850      	adds	r0, r2, r1
 8012316:	4283      	cmp	r3, r0
 8012318:	6011      	str	r1, [r2, #0]
 801231a:	d1e0      	bne.n	80122de <_free_r+0x22>
 801231c:	6818      	ldr	r0, [r3, #0]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	6053      	str	r3, [r2, #4]
 8012322:	4408      	add	r0, r1
 8012324:	6010      	str	r0, [r2, #0]
 8012326:	e7da      	b.n	80122de <_free_r+0x22>
 8012328:	d902      	bls.n	8012330 <_free_r+0x74>
 801232a:	230c      	movs	r3, #12
 801232c:	602b      	str	r3, [r5, #0]
 801232e:	e7d6      	b.n	80122de <_free_r+0x22>
 8012330:	6820      	ldr	r0, [r4, #0]
 8012332:	1821      	adds	r1, r4, r0
 8012334:	428b      	cmp	r3, r1
 8012336:	bf04      	itt	eq
 8012338:	6819      	ldreq	r1, [r3, #0]
 801233a:	685b      	ldreq	r3, [r3, #4]
 801233c:	6063      	str	r3, [r4, #4]
 801233e:	bf04      	itt	eq
 8012340:	1809      	addeq	r1, r1, r0
 8012342:	6021      	streq	r1, [r4, #0]
 8012344:	6054      	str	r4, [r2, #4]
 8012346:	e7ca      	b.n	80122de <_free_r+0x22>
 8012348:	bd38      	pop	{r3, r4, r5, pc}
 801234a:	bf00      	nop
 801234c:	24004e3c 	.word	0x24004e3c

08012350 <_Balloc>:
 8012350:	b570      	push	{r4, r5, r6, lr}
 8012352:	69c6      	ldr	r6, [r0, #28]
 8012354:	4604      	mov	r4, r0
 8012356:	460d      	mov	r5, r1
 8012358:	b976      	cbnz	r6, 8012378 <_Balloc+0x28>
 801235a:	2010      	movs	r0, #16
 801235c:	f7fd ff52 	bl	8010204 <malloc>
 8012360:	4602      	mov	r2, r0
 8012362:	61e0      	str	r0, [r4, #28]
 8012364:	b920      	cbnz	r0, 8012370 <_Balloc+0x20>
 8012366:	4b18      	ldr	r3, [pc, #96]	@ (80123c8 <_Balloc+0x78>)
 8012368:	4818      	ldr	r0, [pc, #96]	@ (80123cc <_Balloc+0x7c>)
 801236a:	216b      	movs	r1, #107	@ 0x6b
 801236c:	f7fd ff2c 	bl	80101c8 <__assert_func>
 8012370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012374:	6006      	str	r6, [r0, #0]
 8012376:	60c6      	str	r6, [r0, #12]
 8012378:	69e6      	ldr	r6, [r4, #28]
 801237a:	68f3      	ldr	r3, [r6, #12]
 801237c:	b183      	cbz	r3, 80123a0 <_Balloc+0x50>
 801237e:	69e3      	ldr	r3, [r4, #28]
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012386:	b9b8      	cbnz	r0, 80123b8 <_Balloc+0x68>
 8012388:	2101      	movs	r1, #1
 801238a:	fa01 f605 	lsl.w	r6, r1, r5
 801238e:	1d72      	adds	r2, r6, #5
 8012390:	0092      	lsls	r2, r2, #2
 8012392:	4620      	mov	r0, r4
 8012394:	f001 fec0 	bl	8014118 <_calloc_r>
 8012398:	b160      	cbz	r0, 80123b4 <_Balloc+0x64>
 801239a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801239e:	e00e      	b.n	80123be <_Balloc+0x6e>
 80123a0:	2221      	movs	r2, #33	@ 0x21
 80123a2:	2104      	movs	r1, #4
 80123a4:	4620      	mov	r0, r4
 80123a6:	f001 feb7 	bl	8014118 <_calloc_r>
 80123aa:	69e3      	ldr	r3, [r4, #28]
 80123ac:	60f0      	str	r0, [r6, #12]
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d1e4      	bne.n	801237e <_Balloc+0x2e>
 80123b4:	2000      	movs	r0, #0
 80123b6:	bd70      	pop	{r4, r5, r6, pc}
 80123b8:	6802      	ldr	r2, [r0, #0]
 80123ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80123be:	2300      	movs	r3, #0
 80123c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123c4:	e7f7      	b.n	80123b6 <_Balloc+0x66>
 80123c6:	bf00      	nop
 80123c8:	080153aa 	.word	0x080153aa
 80123cc:	0801542a 	.word	0x0801542a

080123d0 <_Bfree>:
 80123d0:	b570      	push	{r4, r5, r6, lr}
 80123d2:	69c6      	ldr	r6, [r0, #28]
 80123d4:	4605      	mov	r5, r0
 80123d6:	460c      	mov	r4, r1
 80123d8:	b976      	cbnz	r6, 80123f8 <_Bfree+0x28>
 80123da:	2010      	movs	r0, #16
 80123dc:	f7fd ff12 	bl	8010204 <malloc>
 80123e0:	4602      	mov	r2, r0
 80123e2:	61e8      	str	r0, [r5, #28]
 80123e4:	b920      	cbnz	r0, 80123f0 <_Bfree+0x20>
 80123e6:	4b09      	ldr	r3, [pc, #36]	@ (801240c <_Bfree+0x3c>)
 80123e8:	4809      	ldr	r0, [pc, #36]	@ (8012410 <_Bfree+0x40>)
 80123ea:	218f      	movs	r1, #143	@ 0x8f
 80123ec:	f7fd feec 	bl	80101c8 <__assert_func>
 80123f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80123f4:	6006      	str	r6, [r0, #0]
 80123f6:	60c6      	str	r6, [r0, #12]
 80123f8:	b13c      	cbz	r4, 801240a <_Bfree+0x3a>
 80123fa:	69eb      	ldr	r3, [r5, #28]
 80123fc:	6862      	ldr	r2, [r4, #4]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012404:	6021      	str	r1, [r4, #0]
 8012406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801240a:	bd70      	pop	{r4, r5, r6, pc}
 801240c:	080153aa 	.word	0x080153aa
 8012410:	0801542a 	.word	0x0801542a

08012414 <__multadd>:
 8012414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012418:	690d      	ldr	r5, [r1, #16]
 801241a:	4607      	mov	r7, r0
 801241c:	460c      	mov	r4, r1
 801241e:	461e      	mov	r6, r3
 8012420:	f101 0c14 	add.w	ip, r1, #20
 8012424:	2000      	movs	r0, #0
 8012426:	f8dc 3000 	ldr.w	r3, [ip]
 801242a:	b299      	uxth	r1, r3
 801242c:	fb02 6101 	mla	r1, r2, r1, r6
 8012430:	0c1e      	lsrs	r6, r3, #16
 8012432:	0c0b      	lsrs	r3, r1, #16
 8012434:	fb02 3306 	mla	r3, r2, r6, r3
 8012438:	b289      	uxth	r1, r1
 801243a:	3001      	adds	r0, #1
 801243c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012440:	4285      	cmp	r5, r0
 8012442:	f84c 1b04 	str.w	r1, [ip], #4
 8012446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801244a:	dcec      	bgt.n	8012426 <__multadd+0x12>
 801244c:	b30e      	cbz	r6, 8012492 <__multadd+0x7e>
 801244e:	68a3      	ldr	r3, [r4, #8]
 8012450:	42ab      	cmp	r3, r5
 8012452:	dc19      	bgt.n	8012488 <__multadd+0x74>
 8012454:	6861      	ldr	r1, [r4, #4]
 8012456:	4638      	mov	r0, r7
 8012458:	3101      	adds	r1, #1
 801245a:	f7ff ff79 	bl	8012350 <_Balloc>
 801245e:	4680      	mov	r8, r0
 8012460:	b928      	cbnz	r0, 801246e <__multadd+0x5a>
 8012462:	4602      	mov	r2, r0
 8012464:	4b0c      	ldr	r3, [pc, #48]	@ (8012498 <__multadd+0x84>)
 8012466:	480d      	ldr	r0, [pc, #52]	@ (801249c <__multadd+0x88>)
 8012468:	21ba      	movs	r1, #186	@ 0xba
 801246a:	f7fd fead 	bl	80101c8 <__assert_func>
 801246e:	6922      	ldr	r2, [r4, #16]
 8012470:	3202      	adds	r2, #2
 8012472:	f104 010c 	add.w	r1, r4, #12
 8012476:	0092      	lsls	r2, r2, #2
 8012478:	300c      	adds	r0, #12
 801247a:	f7ff f92a 	bl	80116d2 <memcpy>
 801247e:	4621      	mov	r1, r4
 8012480:	4638      	mov	r0, r7
 8012482:	f7ff ffa5 	bl	80123d0 <_Bfree>
 8012486:	4644      	mov	r4, r8
 8012488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801248c:	3501      	adds	r5, #1
 801248e:	615e      	str	r6, [r3, #20]
 8012490:	6125      	str	r5, [r4, #16]
 8012492:	4620      	mov	r0, r4
 8012494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012498:	08015419 	.word	0x08015419
 801249c:	0801542a 	.word	0x0801542a

080124a0 <__s2b>:
 80124a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a4:	460c      	mov	r4, r1
 80124a6:	4615      	mov	r5, r2
 80124a8:	461f      	mov	r7, r3
 80124aa:	2209      	movs	r2, #9
 80124ac:	3308      	adds	r3, #8
 80124ae:	4606      	mov	r6, r0
 80124b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80124b4:	2100      	movs	r1, #0
 80124b6:	2201      	movs	r2, #1
 80124b8:	429a      	cmp	r2, r3
 80124ba:	db09      	blt.n	80124d0 <__s2b+0x30>
 80124bc:	4630      	mov	r0, r6
 80124be:	f7ff ff47 	bl	8012350 <_Balloc>
 80124c2:	b940      	cbnz	r0, 80124d6 <__s2b+0x36>
 80124c4:	4602      	mov	r2, r0
 80124c6:	4b19      	ldr	r3, [pc, #100]	@ (801252c <__s2b+0x8c>)
 80124c8:	4819      	ldr	r0, [pc, #100]	@ (8012530 <__s2b+0x90>)
 80124ca:	21d3      	movs	r1, #211	@ 0xd3
 80124cc:	f7fd fe7c 	bl	80101c8 <__assert_func>
 80124d0:	0052      	lsls	r2, r2, #1
 80124d2:	3101      	adds	r1, #1
 80124d4:	e7f0      	b.n	80124b8 <__s2b+0x18>
 80124d6:	9b08      	ldr	r3, [sp, #32]
 80124d8:	6143      	str	r3, [r0, #20]
 80124da:	2d09      	cmp	r5, #9
 80124dc:	f04f 0301 	mov.w	r3, #1
 80124e0:	6103      	str	r3, [r0, #16]
 80124e2:	dd16      	ble.n	8012512 <__s2b+0x72>
 80124e4:	f104 0909 	add.w	r9, r4, #9
 80124e8:	46c8      	mov	r8, r9
 80124ea:	442c      	add	r4, r5
 80124ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80124f0:	4601      	mov	r1, r0
 80124f2:	3b30      	subs	r3, #48	@ 0x30
 80124f4:	220a      	movs	r2, #10
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ff ff8c 	bl	8012414 <__multadd>
 80124fc:	45a0      	cmp	r8, r4
 80124fe:	d1f5      	bne.n	80124ec <__s2b+0x4c>
 8012500:	f1a5 0408 	sub.w	r4, r5, #8
 8012504:	444c      	add	r4, r9
 8012506:	1b2d      	subs	r5, r5, r4
 8012508:	1963      	adds	r3, r4, r5
 801250a:	42bb      	cmp	r3, r7
 801250c:	db04      	blt.n	8012518 <__s2b+0x78>
 801250e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012512:	340a      	adds	r4, #10
 8012514:	2509      	movs	r5, #9
 8012516:	e7f6      	b.n	8012506 <__s2b+0x66>
 8012518:	f814 3b01 	ldrb.w	r3, [r4], #1
 801251c:	4601      	mov	r1, r0
 801251e:	3b30      	subs	r3, #48	@ 0x30
 8012520:	220a      	movs	r2, #10
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff ff76 	bl	8012414 <__multadd>
 8012528:	e7ee      	b.n	8012508 <__s2b+0x68>
 801252a:	bf00      	nop
 801252c:	08015419 	.word	0x08015419
 8012530:	0801542a 	.word	0x0801542a

08012534 <__hi0bits>:
 8012534:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012538:	4603      	mov	r3, r0
 801253a:	bf36      	itet	cc
 801253c:	0403      	lslcc	r3, r0, #16
 801253e:	2000      	movcs	r0, #0
 8012540:	2010      	movcc	r0, #16
 8012542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012546:	bf3c      	itt	cc
 8012548:	021b      	lslcc	r3, r3, #8
 801254a:	3008      	addcc	r0, #8
 801254c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012550:	bf3c      	itt	cc
 8012552:	011b      	lslcc	r3, r3, #4
 8012554:	3004      	addcc	r0, #4
 8012556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801255a:	bf3c      	itt	cc
 801255c:	009b      	lslcc	r3, r3, #2
 801255e:	3002      	addcc	r0, #2
 8012560:	2b00      	cmp	r3, #0
 8012562:	db05      	blt.n	8012570 <__hi0bits+0x3c>
 8012564:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012568:	f100 0001 	add.w	r0, r0, #1
 801256c:	bf08      	it	eq
 801256e:	2020      	moveq	r0, #32
 8012570:	4770      	bx	lr

08012572 <__lo0bits>:
 8012572:	6803      	ldr	r3, [r0, #0]
 8012574:	4602      	mov	r2, r0
 8012576:	f013 0007 	ands.w	r0, r3, #7
 801257a:	d00b      	beq.n	8012594 <__lo0bits+0x22>
 801257c:	07d9      	lsls	r1, r3, #31
 801257e:	d421      	bmi.n	80125c4 <__lo0bits+0x52>
 8012580:	0798      	lsls	r0, r3, #30
 8012582:	bf49      	itett	mi
 8012584:	085b      	lsrmi	r3, r3, #1
 8012586:	089b      	lsrpl	r3, r3, #2
 8012588:	2001      	movmi	r0, #1
 801258a:	6013      	strmi	r3, [r2, #0]
 801258c:	bf5c      	itt	pl
 801258e:	6013      	strpl	r3, [r2, #0]
 8012590:	2002      	movpl	r0, #2
 8012592:	4770      	bx	lr
 8012594:	b299      	uxth	r1, r3
 8012596:	b909      	cbnz	r1, 801259c <__lo0bits+0x2a>
 8012598:	0c1b      	lsrs	r3, r3, #16
 801259a:	2010      	movs	r0, #16
 801259c:	b2d9      	uxtb	r1, r3
 801259e:	b909      	cbnz	r1, 80125a4 <__lo0bits+0x32>
 80125a0:	3008      	adds	r0, #8
 80125a2:	0a1b      	lsrs	r3, r3, #8
 80125a4:	0719      	lsls	r1, r3, #28
 80125a6:	bf04      	itt	eq
 80125a8:	091b      	lsreq	r3, r3, #4
 80125aa:	3004      	addeq	r0, #4
 80125ac:	0799      	lsls	r1, r3, #30
 80125ae:	bf04      	itt	eq
 80125b0:	089b      	lsreq	r3, r3, #2
 80125b2:	3002      	addeq	r0, #2
 80125b4:	07d9      	lsls	r1, r3, #31
 80125b6:	d403      	bmi.n	80125c0 <__lo0bits+0x4e>
 80125b8:	085b      	lsrs	r3, r3, #1
 80125ba:	f100 0001 	add.w	r0, r0, #1
 80125be:	d003      	beq.n	80125c8 <__lo0bits+0x56>
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	4770      	bx	lr
 80125c4:	2000      	movs	r0, #0
 80125c6:	4770      	bx	lr
 80125c8:	2020      	movs	r0, #32
 80125ca:	4770      	bx	lr

080125cc <__i2b>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	460c      	mov	r4, r1
 80125d0:	2101      	movs	r1, #1
 80125d2:	f7ff febd 	bl	8012350 <_Balloc>
 80125d6:	4602      	mov	r2, r0
 80125d8:	b928      	cbnz	r0, 80125e6 <__i2b+0x1a>
 80125da:	4b05      	ldr	r3, [pc, #20]	@ (80125f0 <__i2b+0x24>)
 80125dc:	4805      	ldr	r0, [pc, #20]	@ (80125f4 <__i2b+0x28>)
 80125de:	f240 1145 	movw	r1, #325	@ 0x145
 80125e2:	f7fd fdf1 	bl	80101c8 <__assert_func>
 80125e6:	2301      	movs	r3, #1
 80125e8:	6144      	str	r4, [r0, #20]
 80125ea:	6103      	str	r3, [r0, #16]
 80125ec:	bd10      	pop	{r4, pc}
 80125ee:	bf00      	nop
 80125f0:	08015419 	.word	0x08015419
 80125f4:	0801542a 	.word	0x0801542a

080125f8 <__multiply>:
 80125f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125fc:	4614      	mov	r4, r2
 80125fe:	690a      	ldr	r2, [r1, #16]
 8012600:	6923      	ldr	r3, [r4, #16]
 8012602:	429a      	cmp	r2, r3
 8012604:	bfa8      	it	ge
 8012606:	4623      	movge	r3, r4
 8012608:	460f      	mov	r7, r1
 801260a:	bfa4      	itt	ge
 801260c:	460c      	movge	r4, r1
 801260e:	461f      	movge	r7, r3
 8012610:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012614:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012618:	68a3      	ldr	r3, [r4, #8]
 801261a:	6861      	ldr	r1, [r4, #4]
 801261c:	eb0a 0609 	add.w	r6, sl, r9
 8012620:	42b3      	cmp	r3, r6
 8012622:	b085      	sub	sp, #20
 8012624:	bfb8      	it	lt
 8012626:	3101      	addlt	r1, #1
 8012628:	f7ff fe92 	bl	8012350 <_Balloc>
 801262c:	b930      	cbnz	r0, 801263c <__multiply+0x44>
 801262e:	4602      	mov	r2, r0
 8012630:	4b44      	ldr	r3, [pc, #272]	@ (8012744 <__multiply+0x14c>)
 8012632:	4845      	ldr	r0, [pc, #276]	@ (8012748 <__multiply+0x150>)
 8012634:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012638:	f7fd fdc6 	bl	80101c8 <__assert_func>
 801263c:	f100 0514 	add.w	r5, r0, #20
 8012640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012644:	462b      	mov	r3, r5
 8012646:	2200      	movs	r2, #0
 8012648:	4543      	cmp	r3, r8
 801264a:	d321      	bcc.n	8012690 <__multiply+0x98>
 801264c:	f107 0114 	add.w	r1, r7, #20
 8012650:	f104 0214 	add.w	r2, r4, #20
 8012654:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012658:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801265c:	9302      	str	r3, [sp, #8]
 801265e:	1b13      	subs	r3, r2, r4
 8012660:	3b15      	subs	r3, #21
 8012662:	f023 0303 	bic.w	r3, r3, #3
 8012666:	3304      	adds	r3, #4
 8012668:	f104 0715 	add.w	r7, r4, #21
 801266c:	42ba      	cmp	r2, r7
 801266e:	bf38      	it	cc
 8012670:	2304      	movcc	r3, #4
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	9b02      	ldr	r3, [sp, #8]
 8012676:	9103      	str	r1, [sp, #12]
 8012678:	428b      	cmp	r3, r1
 801267a:	d80c      	bhi.n	8012696 <__multiply+0x9e>
 801267c:	2e00      	cmp	r6, #0
 801267e:	dd03      	ble.n	8012688 <__multiply+0x90>
 8012680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012684:	2b00      	cmp	r3, #0
 8012686:	d05b      	beq.n	8012740 <__multiply+0x148>
 8012688:	6106      	str	r6, [r0, #16]
 801268a:	b005      	add	sp, #20
 801268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012690:	f843 2b04 	str.w	r2, [r3], #4
 8012694:	e7d8      	b.n	8012648 <__multiply+0x50>
 8012696:	f8b1 a000 	ldrh.w	sl, [r1]
 801269a:	f1ba 0f00 	cmp.w	sl, #0
 801269e:	d024      	beq.n	80126ea <__multiply+0xf2>
 80126a0:	f104 0e14 	add.w	lr, r4, #20
 80126a4:	46a9      	mov	r9, r5
 80126a6:	f04f 0c00 	mov.w	ip, #0
 80126aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80126ae:	f8d9 3000 	ldr.w	r3, [r9]
 80126b2:	fa1f fb87 	uxth.w	fp, r7
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80126bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80126c0:	f8d9 7000 	ldr.w	r7, [r9]
 80126c4:	4463      	add	r3, ip
 80126c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80126ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80126ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80126d8:	4572      	cmp	r2, lr
 80126da:	f849 3b04 	str.w	r3, [r9], #4
 80126de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80126e2:	d8e2      	bhi.n	80126aa <__multiply+0xb2>
 80126e4:	9b01      	ldr	r3, [sp, #4]
 80126e6:	f845 c003 	str.w	ip, [r5, r3]
 80126ea:	9b03      	ldr	r3, [sp, #12]
 80126ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80126f0:	3104      	adds	r1, #4
 80126f2:	f1b9 0f00 	cmp.w	r9, #0
 80126f6:	d021      	beq.n	801273c <__multiply+0x144>
 80126f8:	682b      	ldr	r3, [r5, #0]
 80126fa:	f104 0c14 	add.w	ip, r4, #20
 80126fe:	46ae      	mov	lr, r5
 8012700:	f04f 0a00 	mov.w	sl, #0
 8012704:	f8bc b000 	ldrh.w	fp, [ip]
 8012708:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801270c:	fb09 770b 	mla	r7, r9, fp, r7
 8012710:	4457      	add	r7, sl
 8012712:	b29b      	uxth	r3, r3
 8012714:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012718:	f84e 3b04 	str.w	r3, [lr], #4
 801271c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012724:	f8be 3000 	ldrh.w	r3, [lr]
 8012728:	fb09 330a 	mla	r3, r9, sl, r3
 801272c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012730:	4562      	cmp	r2, ip
 8012732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012736:	d8e5      	bhi.n	8012704 <__multiply+0x10c>
 8012738:	9f01      	ldr	r7, [sp, #4]
 801273a:	51eb      	str	r3, [r5, r7]
 801273c:	3504      	adds	r5, #4
 801273e:	e799      	b.n	8012674 <__multiply+0x7c>
 8012740:	3e01      	subs	r6, #1
 8012742:	e79b      	b.n	801267c <__multiply+0x84>
 8012744:	08015419 	.word	0x08015419
 8012748:	0801542a 	.word	0x0801542a

0801274c <__pow5mult>:
 801274c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012750:	4615      	mov	r5, r2
 8012752:	f012 0203 	ands.w	r2, r2, #3
 8012756:	4607      	mov	r7, r0
 8012758:	460e      	mov	r6, r1
 801275a:	d007      	beq.n	801276c <__pow5mult+0x20>
 801275c:	4c25      	ldr	r4, [pc, #148]	@ (80127f4 <__pow5mult+0xa8>)
 801275e:	3a01      	subs	r2, #1
 8012760:	2300      	movs	r3, #0
 8012762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012766:	f7ff fe55 	bl	8012414 <__multadd>
 801276a:	4606      	mov	r6, r0
 801276c:	10ad      	asrs	r5, r5, #2
 801276e:	d03d      	beq.n	80127ec <__pow5mult+0xa0>
 8012770:	69fc      	ldr	r4, [r7, #28]
 8012772:	b97c      	cbnz	r4, 8012794 <__pow5mult+0x48>
 8012774:	2010      	movs	r0, #16
 8012776:	f7fd fd45 	bl	8010204 <malloc>
 801277a:	4602      	mov	r2, r0
 801277c:	61f8      	str	r0, [r7, #28]
 801277e:	b928      	cbnz	r0, 801278c <__pow5mult+0x40>
 8012780:	4b1d      	ldr	r3, [pc, #116]	@ (80127f8 <__pow5mult+0xac>)
 8012782:	481e      	ldr	r0, [pc, #120]	@ (80127fc <__pow5mult+0xb0>)
 8012784:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012788:	f7fd fd1e 	bl	80101c8 <__assert_func>
 801278c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012790:	6004      	str	r4, [r0, #0]
 8012792:	60c4      	str	r4, [r0, #12]
 8012794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801279c:	b94c      	cbnz	r4, 80127b2 <__pow5mult+0x66>
 801279e:	f240 2171 	movw	r1, #625	@ 0x271
 80127a2:	4638      	mov	r0, r7
 80127a4:	f7ff ff12 	bl	80125cc <__i2b>
 80127a8:	2300      	movs	r3, #0
 80127aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80127ae:	4604      	mov	r4, r0
 80127b0:	6003      	str	r3, [r0, #0]
 80127b2:	f04f 0900 	mov.w	r9, #0
 80127b6:	07eb      	lsls	r3, r5, #31
 80127b8:	d50a      	bpl.n	80127d0 <__pow5mult+0x84>
 80127ba:	4631      	mov	r1, r6
 80127bc:	4622      	mov	r2, r4
 80127be:	4638      	mov	r0, r7
 80127c0:	f7ff ff1a 	bl	80125f8 <__multiply>
 80127c4:	4631      	mov	r1, r6
 80127c6:	4680      	mov	r8, r0
 80127c8:	4638      	mov	r0, r7
 80127ca:	f7ff fe01 	bl	80123d0 <_Bfree>
 80127ce:	4646      	mov	r6, r8
 80127d0:	106d      	asrs	r5, r5, #1
 80127d2:	d00b      	beq.n	80127ec <__pow5mult+0xa0>
 80127d4:	6820      	ldr	r0, [r4, #0]
 80127d6:	b938      	cbnz	r0, 80127e8 <__pow5mult+0x9c>
 80127d8:	4622      	mov	r2, r4
 80127da:	4621      	mov	r1, r4
 80127dc:	4638      	mov	r0, r7
 80127de:	f7ff ff0b 	bl	80125f8 <__multiply>
 80127e2:	6020      	str	r0, [r4, #0]
 80127e4:	f8c0 9000 	str.w	r9, [r0]
 80127e8:	4604      	mov	r4, r0
 80127ea:	e7e4      	b.n	80127b6 <__pow5mult+0x6a>
 80127ec:	4630      	mov	r0, r6
 80127ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127f2:	bf00      	nop
 80127f4:	08015484 	.word	0x08015484
 80127f8:	080153aa 	.word	0x080153aa
 80127fc:	0801542a 	.word	0x0801542a

08012800 <__lshift>:
 8012800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012804:	460c      	mov	r4, r1
 8012806:	6849      	ldr	r1, [r1, #4]
 8012808:	6923      	ldr	r3, [r4, #16]
 801280a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801280e:	68a3      	ldr	r3, [r4, #8]
 8012810:	4607      	mov	r7, r0
 8012812:	4691      	mov	r9, r2
 8012814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012818:	f108 0601 	add.w	r6, r8, #1
 801281c:	42b3      	cmp	r3, r6
 801281e:	db0b      	blt.n	8012838 <__lshift+0x38>
 8012820:	4638      	mov	r0, r7
 8012822:	f7ff fd95 	bl	8012350 <_Balloc>
 8012826:	4605      	mov	r5, r0
 8012828:	b948      	cbnz	r0, 801283e <__lshift+0x3e>
 801282a:	4602      	mov	r2, r0
 801282c:	4b28      	ldr	r3, [pc, #160]	@ (80128d0 <__lshift+0xd0>)
 801282e:	4829      	ldr	r0, [pc, #164]	@ (80128d4 <__lshift+0xd4>)
 8012830:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012834:	f7fd fcc8 	bl	80101c8 <__assert_func>
 8012838:	3101      	adds	r1, #1
 801283a:	005b      	lsls	r3, r3, #1
 801283c:	e7ee      	b.n	801281c <__lshift+0x1c>
 801283e:	2300      	movs	r3, #0
 8012840:	f100 0114 	add.w	r1, r0, #20
 8012844:	f100 0210 	add.w	r2, r0, #16
 8012848:	4618      	mov	r0, r3
 801284a:	4553      	cmp	r3, sl
 801284c:	db33      	blt.n	80128b6 <__lshift+0xb6>
 801284e:	6920      	ldr	r0, [r4, #16]
 8012850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012854:	f104 0314 	add.w	r3, r4, #20
 8012858:	f019 091f 	ands.w	r9, r9, #31
 801285c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012864:	d02b      	beq.n	80128be <__lshift+0xbe>
 8012866:	f1c9 0e20 	rsb	lr, r9, #32
 801286a:	468a      	mov	sl, r1
 801286c:	2200      	movs	r2, #0
 801286e:	6818      	ldr	r0, [r3, #0]
 8012870:	fa00 f009 	lsl.w	r0, r0, r9
 8012874:	4310      	orrs	r0, r2
 8012876:	f84a 0b04 	str.w	r0, [sl], #4
 801287a:	f853 2b04 	ldr.w	r2, [r3], #4
 801287e:	459c      	cmp	ip, r3
 8012880:	fa22 f20e 	lsr.w	r2, r2, lr
 8012884:	d8f3      	bhi.n	801286e <__lshift+0x6e>
 8012886:	ebac 0304 	sub.w	r3, ip, r4
 801288a:	3b15      	subs	r3, #21
 801288c:	f023 0303 	bic.w	r3, r3, #3
 8012890:	3304      	adds	r3, #4
 8012892:	f104 0015 	add.w	r0, r4, #21
 8012896:	4584      	cmp	ip, r0
 8012898:	bf38      	it	cc
 801289a:	2304      	movcc	r3, #4
 801289c:	50ca      	str	r2, [r1, r3]
 801289e:	b10a      	cbz	r2, 80128a4 <__lshift+0xa4>
 80128a0:	f108 0602 	add.w	r6, r8, #2
 80128a4:	3e01      	subs	r6, #1
 80128a6:	4638      	mov	r0, r7
 80128a8:	612e      	str	r6, [r5, #16]
 80128aa:	4621      	mov	r1, r4
 80128ac:	f7ff fd90 	bl	80123d0 <_Bfree>
 80128b0:	4628      	mov	r0, r5
 80128b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80128ba:	3301      	adds	r3, #1
 80128bc:	e7c5      	b.n	801284a <__lshift+0x4a>
 80128be:	3904      	subs	r1, #4
 80128c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80128c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80128c8:	459c      	cmp	ip, r3
 80128ca:	d8f9      	bhi.n	80128c0 <__lshift+0xc0>
 80128cc:	e7ea      	b.n	80128a4 <__lshift+0xa4>
 80128ce:	bf00      	nop
 80128d0:	08015419 	.word	0x08015419
 80128d4:	0801542a 	.word	0x0801542a

080128d8 <__mcmp>:
 80128d8:	690a      	ldr	r2, [r1, #16]
 80128da:	4603      	mov	r3, r0
 80128dc:	6900      	ldr	r0, [r0, #16]
 80128de:	1a80      	subs	r0, r0, r2
 80128e0:	b530      	push	{r4, r5, lr}
 80128e2:	d10e      	bne.n	8012902 <__mcmp+0x2a>
 80128e4:	3314      	adds	r3, #20
 80128e6:	3114      	adds	r1, #20
 80128e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80128ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80128f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80128f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80128f8:	4295      	cmp	r5, r2
 80128fa:	d003      	beq.n	8012904 <__mcmp+0x2c>
 80128fc:	d205      	bcs.n	801290a <__mcmp+0x32>
 80128fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012902:	bd30      	pop	{r4, r5, pc}
 8012904:	42a3      	cmp	r3, r4
 8012906:	d3f3      	bcc.n	80128f0 <__mcmp+0x18>
 8012908:	e7fb      	b.n	8012902 <__mcmp+0x2a>
 801290a:	2001      	movs	r0, #1
 801290c:	e7f9      	b.n	8012902 <__mcmp+0x2a>
	...

08012910 <__mdiff>:
 8012910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012914:	4689      	mov	r9, r1
 8012916:	4606      	mov	r6, r0
 8012918:	4611      	mov	r1, r2
 801291a:	4648      	mov	r0, r9
 801291c:	4614      	mov	r4, r2
 801291e:	f7ff ffdb 	bl	80128d8 <__mcmp>
 8012922:	1e05      	subs	r5, r0, #0
 8012924:	d112      	bne.n	801294c <__mdiff+0x3c>
 8012926:	4629      	mov	r1, r5
 8012928:	4630      	mov	r0, r6
 801292a:	f7ff fd11 	bl	8012350 <_Balloc>
 801292e:	4602      	mov	r2, r0
 8012930:	b928      	cbnz	r0, 801293e <__mdiff+0x2e>
 8012932:	4b3f      	ldr	r3, [pc, #252]	@ (8012a30 <__mdiff+0x120>)
 8012934:	f240 2137 	movw	r1, #567	@ 0x237
 8012938:	483e      	ldr	r0, [pc, #248]	@ (8012a34 <__mdiff+0x124>)
 801293a:	f7fd fc45 	bl	80101c8 <__assert_func>
 801293e:	2301      	movs	r3, #1
 8012940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012944:	4610      	mov	r0, r2
 8012946:	b003      	add	sp, #12
 8012948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294c:	bfbc      	itt	lt
 801294e:	464b      	movlt	r3, r9
 8012950:	46a1      	movlt	r9, r4
 8012952:	4630      	mov	r0, r6
 8012954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012958:	bfba      	itte	lt
 801295a:	461c      	movlt	r4, r3
 801295c:	2501      	movlt	r5, #1
 801295e:	2500      	movge	r5, #0
 8012960:	f7ff fcf6 	bl	8012350 <_Balloc>
 8012964:	4602      	mov	r2, r0
 8012966:	b918      	cbnz	r0, 8012970 <__mdiff+0x60>
 8012968:	4b31      	ldr	r3, [pc, #196]	@ (8012a30 <__mdiff+0x120>)
 801296a:	f240 2145 	movw	r1, #581	@ 0x245
 801296e:	e7e3      	b.n	8012938 <__mdiff+0x28>
 8012970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012974:	6926      	ldr	r6, [r4, #16]
 8012976:	60c5      	str	r5, [r0, #12]
 8012978:	f109 0310 	add.w	r3, r9, #16
 801297c:	f109 0514 	add.w	r5, r9, #20
 8012980:	f104 0e14 	add.w	lr, r4, #20
 8012984:	f100 0b14 	add.w	fp, r0, #20
 8012988:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801298c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012990:	9301      	str	r3, [sp, #4]
 8012992:	46d9      	mov	r9, fp
 8012994:	f04f 0c00 	mov.w	ip, #0
 8012998:	9b01      	ldr	r3, [sp, #4]
 801299a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801299e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80129a2:	9301      	str	r3, [sp, #4]
 80129a4:	fa1f f38a 	uxth.w	r3, sl
 80129a8:	4619      	mov	r1, r3
 80129aa:	b283      	uxth	r3, r0
 80129ac:	1acb      	subs	r3, r1, r3
 80129ae:	0c00      	lsrs	r0, r0, #16
 80129b0:	4463      	add	r3, ip
 80129b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80129b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80129c0:	4576      	cmp	r6, lr
 80129c2:	f849 3b04 	str.w	r3, [r9], #4
 80129c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80129ca:	d8e5      	bhi.n	8012998 <__mdiff+0x88>
 80129cc:	1b33      	subs	r3, r6, r4
 80129ce:	3b15      	subs	r3, #21
 80129d0:	f023 0303 	bic.w	r3, r3, #3
 80129d4:	3415      	adds	r4, #21
 80129d6:	3304      	adds	r3, #4
 80129d8:	42a6      	cmp	r6, r4
 80129da:	bf38      	it	cc
 80129dc:	2304      	movcc	r3, #4
 80129de:	441d      	add	r5, r3
 80129e0:	445b      	add	r3, fp
 80129e2:	461e      	mov	r6, r3
 80129e4:	462c      	mov	r4, r5
 80129e6:	4544      	cmp	r4, r8
 80129e8:	d30e      	bcc.n	8012a08 <__mdiff+0xf8>
 80129ea:	f108 0103 	add.w	r1, r8, #3
 80129ee:	1b49      	subs	r1, r1, r5
 80129f0:	f021 0103 	bic.w	r1, r1, #3
 80129f4:	3d03      	subs	r5, #3
 80129f6:	45a8      	cmp	r8, r5
 80129f8:	bf38      	it	cc
 80129fa:	2100      	movcc	r1, #0
 80129fc:	440b      	add	r3, r1
 80129fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a02:	b191      	cbz	r1, 8012a2a <__mdiff+0x11a>
 8012a04:	6117      	str	r7, [r2, #16]
 8012a06:	e79d      	b.n	8012944 <__mdiff+0x34>
 8012a08:	f854 1b04 	ldr.w	r1, [r4], #4
 8012a0c:	46e6      	mov	lr, ip
 8012a0e:	0c08      	lsrs	r0, r1, #16
 8012a10:	fa1c fc81 	uxtah	ip, ip, r1
 8012a14:	4471      	add	r1, lr
 8012a16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012a1a:	b289      	uxth	r1, r1
 8012a1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012a20:	f846 1b04 	str.w	r1, [r6], #4
 8012a24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a28:	e7dd      	b.n	80129e6 <__mdiff+0xd6>
 8012a2a:	3f01      	subs	r7, #1
 8012a2c:	e7e7      	b.n	80129fe <__mdiff+0xee>
 8012a2e:	bf00      	nop
 8012a30:	08015419 	.word	0x08015419
 8012a34:	0801542a 	.word	0x0801542a

08012a38 <__ulp>:
 8012a38:	b082      	sub	sp, #8
 8012a3a:	ed8d 0b00 	vstr	d0, [sp]
 8012a3e:	9a01      	ldr	r2, [sp, #4]
 8012a40:	4b0f      	ldr	r3, [pc, #60]	@ (8012a80 <__ulp+0x48>)
 8012a42:	4013      	ands	r3, r2
 8012a44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	dc08      	bgt.n	8012a5e <__ulp+0x26>
 8012a4c:	425b      	negs	r3, r3
 8012a4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012a52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012a56:	da04      	bge.n	8012a62 <__ulp+0x2a>
 8012a58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012a5c:	4113      	asrs	r3, r2
 8012a5e:	2200      	movs	r2, #0
 8012a60:	e008      	b.n	8012a74 <__ulp+0x3c>
 8012a62:	f1a2 0314 	sub.w	r3, r2, #20
 8012a66:	2b1e      	cmp	r3, #30
 8012a68:	bfda      	itte	le
 8012a6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012a6e:	40da      	lsrle	r2, r3
 8012a70:	2201      	movgt	r2, #1
 8012a72:	2300      	movs	r3, #0
 8012a74:	4619      	mov	r1, r3
 8012a76:	4610      	mov	r0, r2
 8012a78:	ec41 0b10 	vmov	d0, r0, r1
 8012a7c:	b002      	add	sp, #8
 8012a7e:	4770      	bx	lr
 8012a80:	7ff00000 	.word	0x7ff00000

08012a84 <__b2d>:
 8012a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a88:	6906      	ldr	r6, [r0, #16]
 8012a8a:	f100 0814 	add.w	r8, r0, #20
 8012a8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012a92:	1f37      	subs	r7, r6, #4
 8012a94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012a98:	4610      	mov	r0, r2
 8012a9a:	f7ff fd4b 	bl	8012534 <__hi0bits>
 8012a9e:	f1c0 0320 	rsb	r3, r0, #32
 8012aa2:	280a      	cmp	r0, #10
 8012aa4:	600b      	str	r3, [r1, #0]
 8012aa6:	491b      	ldr	r1, [pc, #108]	@ (8012b14 <__b2d+0x90>)
 8012aa8:	dc15      	bgt.n	8012ad6 <__b2d+0x52>
 8012aaa:	f1c0 0c0b 	rsb	ip, r0, #11
 8012aae:	fa22 f30c 	lsr.w	r3, r2, ip
 8012ab2:	45b8      	cmp	r8, r7
 8012ab4:	ea43 0501 	orr.w	r5, r3, r1
 8012ab8:	bf34      	ite	cc
 8012aba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012abe:	2300      	movcs	r3, #0
 8012ac0:	3015      	adds	r0, #21
 8012ac2:	fa02 f000 	lsl.w	r0, r2, r0
 8012ac6:	fa23 f30c 	lsr.w	r3, r3, ip
 8012aca:	4303      	orrs	r3, r0
 8012acc:	461c      	mov	r4, r3
 8012ace:	ec45 4b10 	vmov	d0, r4, r5
 8012ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad6:	45b8      	cmp	r8, r7
 8012ad8:	bf3a      	itte	cc
 8012ada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012ade:	f1a6 0708 	subcc.w	r7, r6, #8
 8012ae2:	2300      	movcs	r3, #0
 8012ae4:	380b      	subs	r0, #11
 8012ae6:	d012      	beq.n	8012b0e <__b2d+0x8a>
 8012ae8:	f1c0 0120 	rsb	r1, r0, #32
 8012aec:	fa23 f401 	lsr.w	r4, r3, r1
 8012af0:	4082      	lsls	r2, r0
 8012af2:	4322      	orrs	r2, r4
 8012af4:	4547      	cmp	r7, r8
 8012af6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012afa:	bf8c      	ite	hi
 8012afc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012b00:	2200      	movls	r2, #0
 8012b02:	4083      	lsls	r3, r0
 8012b04:	40ca      	lsrs	r2, r1
 8012b06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	e7de      	b.n	8012acc <__b2d+0x48>
 8012b0e:	ea42 0501 	orr.w	r5, r2, r1
 8012b12:	e7db      	b.n	8012acc <__b2d+0x48>
 8012b14:	3ff00000 	.word	0x3ff00000

08012b18 <__d2b>:
 8012b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b1c:	460f      	mov	r7, r1
 8012b1e:	2101      	movs	r1, #1
 8012b20:	ec59 8b10 	vmov	r8, r9, d0
 8012b24:	4616      	mov	r6, r2
 8012b26:	f7ff fc13 	bl	8012350 <_Balloc>
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	b930      	cbnz	r0, 8012b3c <__d2b+0x24>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	4b23      	ldr	r3, [pc, #140]	@ (8012bc0 <__d2b+0xa8>)
 8012b32:	4824      	ldr	r0, [pc, #144]	@ (8012bc4 <__d2b+0xac>)
 8012b34:	f240 310f 	movw	r1, #783	@ 0x30f
 8012b38:	f7fd fb46 	bl	80101c8 <__assert_func>
 8012b3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b44:	b10d      	cbz	r5, 8012b4a <__d2b+0x32>
 8012b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012b4a:	9301      	str	r3, [sp, #4]
 8012b4c:	f1b8 0300 	subs.w	r3, r8, #0
 8012b50:	d023      	beq.n	8012b9a <__d2b+0x82>
 8012b52:	4668      	mov	r0, sp
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	f7ff fd0c 	bl	8012572 <__lo0bits>
 8012b5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012b5e:	b1d0      	cbz	r0, 8012b96 <__d2b+0x7e>
 8012b60:	f1c0 0320 	rsb	r3, r0, #32
 8012b64:	fa02 f303 	lsl.w	r3, r2, r3
 8012b68:	430b      	orrs	r3, r1
 8012b6a:	40c2      	lsrs	r2, r0
 8012b6c:	6163      	str	r3, [r4, #20]
 8012b6e:	9201      	str	r2, [sp, #4]
 8012b70:	9b01      	ldr	r3, [sp, #4]
 8012b72:	61a3      	str	r3, [r4, #24]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	bf0c      	ite	eq
 8012b78:	2201      	moveq	r2, #1
 8012b7a:	2202      	movne	r2, #2
 8012b7c:	6122      	str	r2, [r4, #16]
 8012b7e:	b1a5      	cbz	r5, 8012baa <__d2b+0x92>
 8012b80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012b84:	4405      	add	r5, r0
 8012b86:	603d      	str	r5, [r7, #0]
 8012b88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012b8c:	6030      	str	r0, [r6, #0]
 8012b8e:	4620      	mov	r0, r4
 8012b90:	b003      	add	sp, #12
 8012b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b96:	6161      	str	r1, [r4, #20]
 8012b98:	e7ea      	b.n	8012b70 <__d2b+0x58>
 8012b9a:	a801      	add	r0, sp, #4
 8012b9c:	f7ff fce9 	bl	8012572 <__lo0bits>
 8012ba0:	9b01      	ldr	r3, [sp, #4]
 8012ba2:	6163      	str	r3, [r4, #20]
 8012ba4:	3020      	adds	r0, #32
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	e7e8      	b.n	8012b7c <__d2b+0x64>
 8012baa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012bae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012bb2:	6038      	str	r0, [r7, #0]
 8012bb4:	6918      	ldr	r0, [r3, #16]
 8012bb6:	f7ff fcbd 	bl	8012534 <__hi0bits>
 8012bba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012bbe:	e7e5      	b.n	8012b8c <__d2b+0x74>
 8012bc0:	08015419 	.word	0x08015419
 8012bc4:	0801542a 	.word	0x0801542a

08012bc8 <__ratio>:
 8012bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bcc:	4688      	mov	r8, r1
 8012bce:	4669      	mov	r1, sp
 8012bd0:	4681      	mov	r9, r0
 8012bd2:	f7ff ff57 	bl	8012a84 <__b2d>
 8012bd6:	a901      	add	r1, sp, #4
 8012bd8:	4640      	mov	r0, r8
 8012bda:	ec55 4b10 	vmov	r4, r5, d0
 8012bde:	f7ff ff51 	bl	8012a84 <__b2d>
 8012be2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012be6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012bea:	1ad2      	subs	r2, r2, r3
 8012bec:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012bf0:	1a5b      	subs	r3, r3, r1
 8012bf2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012bf6:	ec57 6b10 	vmov	r6, r7, d0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	bfd6      	itet	le
 8012bfe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012c02:	462a      	movgt	r2, r5
 8012c04:	463a      	movle	r2, r7
 8012c06:	46ab      	mov	fp, r5
 8012c08:	46a2      	mov	sl, r4
 8012c0a:	bfce      	itee	gt
 8012c0c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012c10:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012c14:	ee00 3a90 	vmovle	s1, r3
 8012c18:	ec4b ab17 	vmov	d7, sl, fp
 8012c1c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8012c20:	b003      	add	sp, #12
 8012c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c26 <__copybits>:
 8012c26:	3901      	subs	r1, #1
 8012c28:	b570      	push	{r4, r5, r6, lr}
 8012c2a:	1149      	asrs	r1, r1, #5
 8012c2c:	6914      	ldr	r4, [r2, #16]
 8012c2e:	3101      	adds	r1, #1
 8012c30:	f102 0314 	add.w	r3, r2, #20
 8012c34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012c38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012c3c:	1f05      	subs	r5, r0, #4
 8012c3e:	42a3      	cmp	r3, r4
 8012c40:	d30c      	bcc.n	8012c5c <__copybits+0x36>
 8012c42:	1aa3      	subs	r3, r4, r2
 8012c44:	3b11      	subs	r3, #17
 8012c46:	f023 0303 	bic.w	r3, r3, #3
 8012c4a:	3211      	adds	r2, #17
 8012c4c:	42a2      	cmp	r2, r4
 8012c4e:	bf88      	it	hi
 8012c50:	2300      	movhi	r3, #0
 8012c52:	4418      	add	r0, r3
 8012c54:	2300      	movs	r3, #0
 8012c56:	4288      	cmp	r0, r1
 8012c58:	d305      	bcc.n	8012c66 <__copybits+0x40>
 8012c5a:	bd70      	pop	{r4, r5, r6, pc}
 8012c5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012c60:	f845 6f04 	str.w	r6, [r5, #4]!
 8012c64:	e7eb      	b.n	8012c3e <__copybits+0x18>
 8012c66:	f840 3b04 	str.w	r3, [r0], #4
 8012c6a:	e7f4      	b.n	8012c56 <__copybits+0x30>

08012c6c <__any_on>:
 8012c6c:	f100 0214 	add.w	r2, r0, #20
 8012c70:	6900      	ldr	r0, [r0, #16]
 8012c72:	114b      	asrs	r3, r1, #5
 8012c74:	4298      	cmp	r0, r3
 8012c76:	b510      	push	{r4, lr}
 8012c78:	db11      	blt.n	8012c9e <__any_on+0x32>
 8012c7a:	dd0a      	ble.n	8012c92 <__any_on+0x26>
 8012c7c:	f011 011f 	ands.w	r1, r1, #31
 8012c80:	d007      	beq.n	8012c92 <__any_on+0x26>
 8012c82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012c86:	fa24 f001 	lsr.w	r0, r4, r1
 8012c8a:	fa00 f101 	lsl.w	r1, r0, r1
 8012c8e:	428c      	cmp	r4, r1
 8012c90:	d10b      	bne.n	8012caa <__any_on+0x3e>
 8012c92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d803      	bhi.n	8012ca2 <__any_on+0x36>
 8012c9a:	2000      	movs	r0, #0
 8012c9c:	bd10      	pop	{r4, pc}
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	e7f7      	b.n	8012c92 <__any_on+0x26>
 8012ca2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ca6:	2900      	cmp	r1, #0
 8012ca8:	d0f5      	beq.n	8012c96 <__any_on+0x2a>
 8012caa:	2001      	movs	r0, #1
 8012cac:	e7f6      	b.n	8012c9c <__any_on+0x30>

08012cae <sulp>:
 8012cae:	b570      	push	{r4, r5, r6, lr}
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	460d      	mov	r5, r1
 8012cb4:	4616      	mov	r6, r2
 8012cb6:	ec45 4b10 	vmov	d0, r4, r5
 8012cba:	f7ff febd 	bl	8012a38 <__ulp>
 8012cbe:	b17e      	cbz	r6, 8012ce0 <sulp+0x32>
 8012cc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012cc4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	dd09      	ble.n	8012ce0 <sulp+0x32>
 8012ccc:	051b      	lsls	r3, r3, #20
 8012cce:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012cd8:	ec41 0b17 	vmov	d7, r0, r1
 8012cdc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012ce0:	bd70      	pop	{r4, r5, r6, pc}
 8012ce2:	0000      	movs	r0, r0
 8012ce4:	0000      	movs	r0, r0
	...

08012ce8 <_strtod_l>:
 8012ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cec:	ed2d 8b0a 	vpush	{d8-d12}
 8012cf0:	b097      	sub	sp, #92	@ 0x5c
 8012cf2:	4688      	mov	r8, r1
 8012cf4:	920e      	str	r2, [sp, #56]	@ 0x38
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	9212      	str	r2, [sp, #72]	@ 0x48
 8012cfa:	9005      	str	r0, [sp, #20]
 8012cfc:	f04f 0a00 	mov.w	sl, #0
 8012d00:	f04f 0b00 	mov.w	fp, #0
 8012d04:	460a      	mov	r2, r1
 8012d06:	9211      	str	r2, [sp, #68]	@ 0x44
 8012d08:	7811      	ldrb	r1, [r2, #0]
 8012d0a:	292b      	cmp	r1, #43	@ 0x2b
 8012d0c:	d04c      	beq.n	8012da8 <_strtod_l+0xc0>
 8012d0e:	d839      	bhi.n	8012d84 <_strtod_l+0x9c>
 8012d10:	290d      	cmp	r1, #13
 8012d12:	d833      	bhi.n	8012d7c <_strtod_l+0x94>
 8012d14:	2908      	cmp	r1, #8
 8012d16:	d833      	bhi.n	8012d80 <_strtod_l+0x98>
 8012d18:	2900      	cmp	r1, #0
 8012d1a:	d03c      	beq.n	8012d96 <_strtod_l+0xae>
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	9208      	str	r2, [sp, #32]
 8012d20:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012d22:	782a      	ldrb	r2, [r5, #0]
 8012d24:	2a30      	cmp	r2, #48	@ 0x30
 8012d26:	f040 80b5 	bne.w	8012e94 <_strtod_l+0x1ac>
 8012d2a:	786a      	ldrb	r2, [r5, #1]
 8012d2c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012d30:	2a58      	cmp	r2, #88	@ 0x58
 8012d32:	d170      	bne.n	8012e16 <_strtod_l+0x12e>
 8012d34:	9302      	str	r3, [sp, #8]
 8012d36:	9b08      	ldr	r3, [sp, #32]
 8012d38:	9301      	str	r3, [sp, #4]
 8012d3a:	ab12      	add	r3, sp, #72	@ 0x48
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	4a8b      	ldr	r2, [pc, #556]	@ (8012f6c <_strtod_l+0x284>)
 8012d40:	9805      	ldr	r0, [sp, #20]
 8012d42:	ab13      	add	r3, sp, #76	@ 0x4c
 8012d44:	a911      	add	r1, sp, #68	@ 0x44
 8012d46:	f001 fa63 	bl	8014210 <__gethex>
 8012d4a:	f010 060f 	ands.w	r6, r0, #15
 8012d4e:	4604      	mov	r4, r0
 8012d50:	d005      	beq.n	8012d5e <_strtod_l+0x76>
 8012d52:	2e06      	cmp	r6, #6
 8012d54:	d12a      	bne.n	8012dac <_strtod_l+0xc4>
 8012d56:	3501      	adds	r5, #1
 8012d58:	2300      	movs	r3, #0
 8012d5a:	9511      	str	r5, [sp, #68]	@ 0x44
 8012d5c:	9308      	str	r3, [sp, #32]
 8012d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	f040 852f 	bne.w	80137c4 <_strtod_l+0xadc>
 8012d66:	9b08      	ldr	r3, [sp, #32]
 8012d68:	ec4b ab10 	vmov	d0, sl, fp
 8012d6c:	b1cb      	cbz	r3, 8012da2 <_strtod_l+0xba>
 8012d6e:	eeb1 0b40 	vneg.f64	d0, d0
 8012d72:	b017      	add	sp, #92	@ 0x5c
 8012d74:	ecbd 8b0a 	vpop	{d8-d12}
 8012d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7c:	2920      	cmp	r1, #32
 8012d7e:	d1cd      	bne.n	8012d1c <_strtod_l+0x34>
 8012d80:	3201      	adds	r2, #1
 8012d82:	e7c0      	b.n	8012d06 <_strtod_l+0x1e>
 8012d84:	292d      	cmp	r1, #45	@ 0x2d
 8012d86:	d1c9      	bne.n	8012d1c <_strtod_l+0x34>
 8012d88:	2101      	movs	r1, #1
 8012d8a:	9108      	str	r1, [sp, #32]
 8012d8c:	1c51      	adds	r1, r2, #1
 8012d8e:	9111      	str	r1, [sp, #68]	@ 0x44
 8012d90:	7852      	ldrb	r2, [r2, #1]
 8012d92:	2a00      	cmp	r2, #0
 8012d94:	d1c4      	bne.n	8012d20 <_strtod_l+0x38>
 8012d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d98:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f040 850f 	bne.w	80137c0 <_strtod_l+0xad8>
 8012da2:	ec4b ab10 	vmov	d0, sl, fp
 8012da6:	e7e4      	b.n	8012d72 <_strtod_l+0x8a>
 8012da8:	2100      	movs	r1, #0
 8012daa:	e7ee      	b.n	8012d8a <_strtod_l+0xa2>
 8012dac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012dae:	b13a      	cbz	r2, 8012dc0 <_strtod_l+0xd8>
 8012db0:	2135      	movs	r1, #53	@ 0x35
 8012db2:	a814      	add	r0, sp, #80	@ 0x50
 8012db4:	f7ff ff37 	bl	8012c26 <__copybits>
 8012db8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012dba:	9805      	ldr	r0, [sp, #20]
 8012dbc:	f7ff fb08 	bl	80123d0 <_Bfree>
 8012dc0:	1e73      	subs	r3, r6, #1
 8012dc2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	d806      	bhi.n	8012dd6 <_strtod_l+0xee>
 8012dc8:	e8df f003 	tbb	[pc, r3]
 8012dcc:	201d0314 	.word	0x201d0314
 8012dd0:	14          	.byte	0x14
 8012dd1:	00          	.byte	0x00
 8012dd2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012dd6:	05e3      	lsls	r3, r4, #23
 8012dd8:	bf48      	it	mi
 8012dda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012dde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012de2:	0d1b      	lsrs	r3, r3, #20
 8012de4:	051b      	lsls	r3, r3, #20
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d1b9      	bne.n	8012d5e <_strtod_l+0x76>
 8012dea:	f7fe fc45 	bl	8011678 <__errno>
 8012dee:	2322      	movs	r3, #34	@ 0x22
 8012df0:	6003      	str	r3, [r0, #0]
 8012df2:	e7b4      	b.n	8012d5e <_strtod_l+0x76>
 8012df4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8012df8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012dfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012e00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012e04:	e7e7      	b.n	8012dd6 <_strtod_l+0xee>
 8012e06:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8012f74 <_strtod_l+0x28c>
 8012e0a:	e7e4      	b.n	8012dd6 <_strtod_l+0xee>
 8012e0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012e10:	f04f 3aff 	mov.w	sl, #4294967295
 8012e14:	e7df      	b.n	8012dd6 <_strtod_l+0xee>
 8012e16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e18:	1c5a      	adds	r2, r3, #1
 8012e1a:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e1c:	785b      	ldrb	r3, [r3, #1]
 8012e1e:	2b30      	cmp	r3, #48	@ 0x30
 8012e20:	d0f9      	beq.n	8012e16 <_strtod_l+0x12e>
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d09b      	beq.n	8012d5e <_strtod_l+0x76>
 8012e26:	2301      	movs	r3, #1
 8012e28:	2600      	movs	r6, #0
 8012e2a:	9307      	str	r3, [sp, #28]
 8012e2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e30:	46b1      	mov	r9, r6
 8012e32:	4635      	mov	r5, r6
 8012e34:	220a      	movs	r2, #10
 8012e36:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012e38:	7804      	ldrb	r4, [r0, #0]
 8012e3a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8012e3e:	b2d9      	uxtb	r1, r3
 8012e40:	2909      	cmp	r1, #9
 8012e42:	d929      	bls.n	8012e98 <_strtod_l+0x1b0>
 8012e44:	494a      	ldr	r1, [pc, #296]	@ (8012f70 <_strtod_l+0x288>)
 8012e46:	2201      	movs	r2, #1
 8012e48:	f001 f928 	bl	801409c <strncmp>
 8012e4c:	b378      	cbz	r0, 8012eae <_strtod_l+0x1c6>
 8012e4e:	2000      	movs	r0, #0
 8012e50:	4622      	mov	r2, r4
 8012e52:	462b      	mov	r3, r5
 8012e54:	4607      	mov	r7, r0
 8012e56:	9006      	str	r0, [sp, #24]
 8012e58:	2a65      	cmp	r2, #101	@ 0x65
 8012e5a:	d001      	beq.n	8012e60 <_strtod_l+0x178>
 8012e5c:	2a45      	cmp	r2, #69	@ 0x45
 8012e5e:	d117      	bne.n	8012e90 <_strtod_l+0x1a8>
 8012e60:	b91b      	cbnz	r3, 8012e6a <_strtod_l+0x182>
 8012e62:	9b07      	ldr	r3, [sp, #28]
 8012e64:	4303      	orrs	r3, r0
 8012e66:	d096      	beq.n	8012d96 <_strtod_l+0xae>
 8012e68:	2300      	movs	r3, #0
 8012e6a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012e6e:	f108 0201 	add.w	r2, r8, #1
 8012e72:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e74:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012e78:	2a2b      	cmp	r2, #43	@ 0x2b
 8012e7a:	d06b      	beq.n	8012f54 <_strtod_l+0x26c>
 8012e7c:	2a2d      	cmp	r2, #45	@ 0x2d
 8012e7e:	d071      	beq.n	8012f64 <_strtod_l+0x27c>
 8012e80:	f04f 0e00 	mov.w	lr, #0
 8012e84:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012e88:	2c09      	cmp	r4, #9
 8012e8a:	d979      	bls.n	8012f80 <_strtod_l+0x298>
 8012e8c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012e90:	2400      	movs	r4, #0
 8012e92:	e094      	b.n	8012fbe <_strtod_l+0x2d6>
 8012e94:	2300      	movs	r3, #0
 8012e96:	e7c7      	b.n	8012e28 <_strtod_l+0x140>
 8012e98:	2d08      	cmp	r5, #8
 8012e9a:	f100 0001 	add.w	r0, r0, #1
 8012e9e:	bfd4      	ite	le
 8012ea0:	fb02 3909 	mlale	r9, r2, r9, r3
 8012ea4:	fb02 3606 	mlagt	r6, r2, r6, r3
 8012ea8:	3501      	adds	r5, #1
 8012eaa:	9011      	str	r0, [sp, #68]	@ 0x44
 8012eac:	e7c3      	b.n	8012e36 <_strtod_l+0x14e>
 8012eae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012eb0:	1c5a      	adds	r2, r3, #1
 8012eb2:	9211      	str	r2, [sp, #68]	@ 0x44
 8012eb4:	785a      	ldrb	r2, [r3, #1]
 8012eb6:	b375      	cbz	r5, 8012f16 <_strtod_l+0x22e>
 8012eb8:	4607      	mov	r7, r0
 8012eba:	462b      	mov	r3, r5
 8012ebc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012ec0:	2909      	cmp	r1, #9
 8012ec2:	d913      	bls.n	8012eec <_strtod_l+0x204>
 8012ec4:	2101      	movs	r1, #1
 8012ec6:	9106      	str	r1, [sp, #24]
 8012ec8:	e7c6      	b.n	8012e58 <_strtod_l+0x170>
 8012eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ecc:	1c5a      	adds	r2, r3, #1
 8012ece:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ed0:	785a      	ldrb	r2, [r3, #1]
 8012ed2:	3001      	adds	r0, #1
 8012ed4:	2a30      	cmp	r2, #48	@ 0x30
 8012ed6:	d0f8      	beq.n	8012eca <_strtod_l+0x1e2>
 8012ed8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012edc:	2b08      	cmp	r3, #8
 8012ede:	f200 8476 	bhi.w	80137ce <_strtod_l+0xae6>
 8012ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ee4:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ee6:	4607      	mov	r7, r0
 8012ee8:	2000      	movs	r0, #0
 8012eea:	4603      	mov	r3, r0
 8012eec:	3a30      	subs	r2, #48	@ 0x30
 8012eee:	f100 0101 	add.w	r1, r0, #1
 8012ef2:	d023      	beq.n	8012f3c <_strtod_l+0x254>
 8012ef4:	440f      	add	r7, r1
 8012ef6:	eb00 0c03 	add.w	ip, r0, r3
 8012efa:	4619      	mov	r1, r3
 8012efc:	240a      	movs	r4, #10
 8012efe:	4561      	cmp	r1, ip
 8012f00:	d10b      	bne.n	8012f1a <_strtod_l+0x232>
 8012f02:	1c5c      	adds	r4, r3, #1
 8012f04:	4403      	add	r3, r0
 8012f06:	2b08      	cmp	r3, #8
 8012f08:	4404      	add	r4, r0
 8012f0a:	dc11      	bgt.n	8012f30 <_strtod_l+0x248>
 8012f0c:	230a      	movs	r3, #10
 8012f0e:	fb03 2909 	mla	r9, r3, r9, r2
 8012f12:	2100      	movs	r1, #0
 8012f14:	e013      	b.n	8012f3e <_strtod_l+0x256>
 8012f16:	4628      	mov	r0, r5
 8012f18:	e7dc      	b.n	8012ed4 <_strtod_l+0x1ec>
 8012f1a:	2908      	cmp	r1, #8
 8012f1c:	f101 0101 	add.w	r1, r1, #1
 8012f20:	dc02      	bgt.n	8012f28 <_strtod_l+0x240>
 8012f22:	fb04 f909 	mul.w	r9, r4, r9
 8012f26:	e7ea      	b.n	8012efe <_strtod_l+0x216>
 8012f28:	2910      	cmp	r1, #16
 8012f2a:	bfd8      	it	le
 8012f2c:	4366      	mulle	r6, r4
 8012f2e:	e7e6      	b.n	8012efe <_strtod_l+0x216>
 8012f30:	2b0f      	cmp	r3, #15
 8012f32:	dcee      	bgt.n	8012f12 <_strtod_l+0x22a>
 8012f34:	230a      	movs	r3, #10
 8012f36:	fb03 2606 	mla	r6, r3, r6, r2
 8012f3a:	e7ea      	b.n	8012f12 <_strtod_l+0x22a>
 8012f3c:	461c      	mov	r4, r3
 8012f3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012f40:	1c5a      	adds	r2, r3, #1
 8012f42:	9211      	str	r2, [sp, #68]	@ 0x44
 8012f44:	785a      	ldrb	r2, [r3, #1]
 8012f46:	4608      	mov	r0, r1
 8012f48:	4623      	mov	r3, r4
 8012f4a:	e7b7      	b.n	8012ebc <_strtod_l+0x1d4>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	2700      	movs	r7, #0
 8012f50:	9306      	str	r3, [sp, #24]
 8012f52:	e786      	b.n	8012e62 <_strtod_l+0x17a>
 8012f54:	f04f 0e00 	mov.w	lr, #0
 8012f58:	f108 0202 	add.w	r2, r8, #2
 8012f5c:	9211      	str	r2, [sp, #68]	@ 0x44
 8012f5e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012f62:	e78f      	b.n	8012e84 <_strtod_l+0x19c>
 8012f64:	f04f 0e01 	mov.w	lr, #1
 8012f68:	e7f6      	b.n	8012f58 <_strtod_l+0x270>
 8012f6a:	bf00      	nop
 8012f6c:	08015598 	.word	0x08015598
 8012f70:	08015580 	.word	0x08015580
 8012f74:	7ff00000 	.word	0x7ff00000
 8012f78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f7a:	1c54      	adds	r4, r2, #1
 8012f7c:	9411      	str	r4, [sp, #68]	@ 0x44
 8012f7e:	7852      	ldrb	r2, [r2, #1]
 8012f80:	2a30      	cmp	r2, #48	@ 0x30
 8012f82:	d0f9      	beq.n	8012f78 <_strtod_l+0x290>
 8012f84:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012f88:	2c08      	cmp	r4, #8
 8012f8a:	d881      	bhi.n	8012e90 <_strtod_l+0x1a8>
 8012f8c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012f90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f96:	1c51      	adds	r1, r2, #1
 8012f98:	9111      	str	r1, [sp, #68]	@ 0x44
 8012f9a:	7852      	ldrb	r2, [r2, #1]
 8012f9c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012fa0:	2c09      	cmp	r4, #9
 8012fa2:	d938      	bls.n	8013016 <_strtod_l+0x32e>
 8012fa4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012fa6:	1b0c      	subs	r4, r1, r4
 8012fa8:	2c08      	cmp	r4, #8
 8012faa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012fae:	dc02      	bgt.n	8012fb6 <_strtod_l+0x2ce>
 8012fb0:	4564      	cmp	r4, ip
 8012fb2:	bfa8      	it	ge
 8012fb4:	4664      	movge	r4, ip
 8012fb6:	f1be 0f00 	cmp.w	lr, #0
 8012fba:	d000      	beq.n	8012fbe <_strtod_l+0x2d6>
 8012fbc:	4264      	negs	r4, r4
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d14e      	bne.n	8013060 <_strtod_l+0x378>
 8012fc2:	9b07      	ldr	r3, [sp, #28]
 8012fc4:	4318      	orrs	r0, r3
 8012fc6:	f47f aeca 	bne.w	8012d5e <_strtod_l+0x76>
 8012fca:	9b06      	ldr	r3, [sp, #24]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f47f aee2 	bne.w	8012d96 <_strtod_l+0xae>
 8012fd2:	2a69      	cmp	r2, #105	@ 0x69
 8012fd4:	d027      	beq.n	8013026 <_strtod_l+0x33e>
 8012fd6:	dc24      	bgt.n	8013022 <_strtod_l+0x33a>
 8012fd8:	2a49      	cmp	r2, #73	@ 0x49
 8012fda:	d024      	beq.n	8013026 <_strtod_l+0x33e>
 8012fdc:	2a4e      	cmp	r2, #78	@ 0x4e
 8012fde:	f47f aeda 	bne.w	8012d96 <_strtod_l+0xae>
 8012fe2:	4997      	ldr	r1, [pc, #604]	@ (8013240 <_strtod_l+0x558>)
 8012fe4:	a811      	add	r0, sp, #68	@ 0x44
 8012fe6:	f001 fb35 	bl	8014654 <__match>
 8012fea:	2800      	cmp	r0, #0
 8012fec:	f43f aed3 	beq.w	8012d96 <_strtod_l+0xae>
 8012ff0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2b28      	cmp	r3, #40	@ 0x28
 8012ff6:	d12d      	bne.n	8013054 <_strtod_l+0x36c>
 8012ff8:	4992      	ldr	r1, [pc, #584]	@ (8013244 <_strtod_l+0x55c>)
 8012ffa:	aa14      	add	r2, sp, #80	@ 0x50
 8012ffc:	a811      	add	r0, sp, #68	@ 0x44
 8012ffe:	f001 fb3d 	bl	801467c <__hexnan>
 8013002:	2805      	cmp	r0, #5
 8013004:	d126      	bne.n	8013054 <_strtod_l+0x36c>
 8013006:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013008:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801300c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013010:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013014:	e6a3      	b.n	8012d5e <_strtod_l+0x76>
 8013016:	240a      	movs	r4, #10
 8013018:	fb04 2c0c 	mla	ip, r4, ip, r2
 801301c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013020:	e7b8      	b.n	8012f94 <_strtod_l+0x2ac>
 8013022:	2a6e      	cmp	r2, #110	@ 0x6e
 8013024:	e7db      	b.n	8012fde <_strtod_l+0x2f6>
 8013026:	4988      	ldr	r1, [pc, #544]	@ (8013248 <_strtod_l+0x560>)
 8013028:	a811      	add	r0, sp, #68	@ 0x44
 801302a:	f001 fb13 	bl	8014654 <__match>
 801302e:	2800      	cmp	r0, #0
 8013030:	f43f aeb1 	beq.w	8012d96 <_strtod_l+0xae>
 8013034:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013036:	4985      	ldr	r1, [pc, #532]	@ (801324c <_strtod_l+0x564>)
 8013038:	3b01      	subs	r3, #1
 801303a:	a811      	add	r0, sp, #68	@ 0x44
 801303c:	9311      	str	r3, [sp, #68]	@ 0x44
 801303e:	f001 fb09 	bl	8014654 <__match>
 8013042:	b910      	cbnz	r0, 801304a <_strtod_l+0x362>
 8013044:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013046:	3301      	adds	r3, #1
 8013048:	9311      	str	r3, [sp, #68]	@ 0x44
 801304a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013260 <_strtod_l+0x578>
 801304e:	f04f 0a00 	mov.w	sl, #0
 8013052:	e684      	b.n	8012d5e <_strtod_l+0x76>
 8013054:	487e      	ldr	r0, [pc, #504]	@ (8013250 <_strtod_l+0x568>)
 8013056:	f001 f857 	bl	8014108 <nan>
 801305a:	ec5b ab10 	vmov	sl, fp, d0
 801305e:	e67e      	b.n	8012d5e <_strtod_l+0x76>
 8013060:	ee07 9a90 	vmov	s15, r9
 8013064:	1be2      	subs	r2, r4, r7
 8013066:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801306a:	2d00      	cmp	r5, #0
 801306c:	bf08      	it	eq
 801306e:	461d      	moveq	r5, r3
 8013070:	2b10      	cmp	r3, #16
 8013072:	9209      	str	r2, [sp, #36]	@ 0x24
 8013074:	461a      	mov	r2, r3
 8013076:	bfa8      	it	ge
 8013078:	2210      	movge	r2, #16
 801307a:	2b09      	cmp	r3, #9
 801307c:	ec5b ab17 	vmov	sl, fp, d7
 8013080:	dc15      	bgt.n	80130ae <_strtod_l+0x3c6>
 8013082:	1be1      	subs	r1, r4, r7
 8013084:	2900      	cmp	r1, #0
 8013086:	f43f ae6a 	beq.w	8012d5e <_strtod_l+0x76>
 801308a:	eba4 0107 	sub.w	r1, r4, r7
 801308e:	dd72      	ble.n	8013176 <_strtod_l+0x48e>
 8013090:	2916      	cmp	r1, #22
 8013092:	dc59      	bgt.n	8013148 <_strtod_l+0x460>
 8013094:	4b6f      	ldr	r3, [pc, #444]	@ (8013254 <_strtod_l+0x56c>)
 8013096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801309c:	ed93 7b00 	vldr	d7, [r3]
 80130a0:	ec4b ab16 	vmov	d6, sl, fp
 80130a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80130a8:	ec5b ab17 	vmov	sl, fp, d7
 80130ac:	e657      	b.n	8012d5e <_strtod_l+0x76>
 80130ae:	4969      	ldr	r1, [pc, #420]	@ (8013254 <_strtod_l+0x56c>)
 80130b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80130b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80130b8:	ee06 6a90 	vmov	s13, r6
 80130bc:	2b0f      	cmp	r3, #15
 80130be:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80130c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80130c6:	ec5b ab16 	vmov	sl, fp, d6
 80130ca:	ddda      	ble.n	8013082 <_strtod_l+0x39a>
 80130cc:	1a9a      	subs	r2, r3, r2
 80130ce:	1be1      	subs	r1, r4, r7
 80130d0:	440a      	add	r2, r1
 80130d2:	2a00      	cmp	r2, #0
 80130d4:	f340 8094 	ble.w	8013200 <_strtod_l+0x518>
 80130d8:	f012 000f 	ands.w	r0, r2, #15
 80130dc:	d00a      	beq.n	80130f4 <_strtod_l+0x40c>
 80130de:	495d      	ldr	r1, [pc, #372]	@ (8013254 <_strtod_l+0x56c>)
 80130e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80130e4:	ed91 7b00 	vldr	d7, [r1]
 80130e8:	ec4b ab16 	vmov	d6, sl, fp
 80130ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80130f0:	ec5b ab17 	vmov	sl, fp, d7
 80130f4:	f032 020f 	bics.w	r2, r2, #15
 80130f8:	d073      	beq.n	80131e2 <_strtod_l+0x4fa>
 80130fa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80130fe:	dd47      	ble.n	8013190 <_strtod_l+0x4a8>
 8013100:	2400      	movs	r4, #0
 8013102:	4625      	mov	r5, r4
 8013104:	9407      	str	r4, [sp, #28]
 8013106:	4626      	mov	r6, r4
 8013108:	9a05      	ldr	r2, [sp, #20]
 801310a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013260 <_strtod_l+0x578>
 801310e:	2322      	movs	r3, #34	@ 0x22
 8013110:	6013      	str	r3, [r2, #0]
 8013112:	f04f 0a00 	mov.w	sl, #0
 8013116:	9b07      	ldr	r3, [sp, #28]
 8013118:	2b00      	cmp	r3, #0
 801311a:	f43f ae20 	beq.w	8012d5e <_strtod_l+0x76>
 801311e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013120:	9805      	ldr	r0, [sp, #20]
 8013122:	f7ff f955 	bl	80123d0 <_Bfree>
 8013126:	9805      	ldr	r0, [sp, #20]
 8013128:	4631      	mov	r1, r6
 801312a:	f7ff f951 	bl	80123d0 <_Bfree>
 801312e:	9805      	ldr	r0, [sp, #20]
 8013130:	4629      	mov	r1, r5
 8013132:	f7ff f94d 	bl	80123d0 <_Bfree>
 8013136:	9907      	ldr	r1, [sp, #28]
 8013138:	9805      	ldr	r0, [sp, #20]
 801313a:	f7ff f949 	bl	80123d0 <_Bfree>
 801313e:	9805      	ldr	r0, [sp, #20]
 8013140:	4621      	mov	r1, r4
 8013142:	f7ff f945 	bl	80123d0 <_Bfree>
 8013146:	e60a      	b.n	8012d5e <_strtod_l+0x76>
 8013148:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801314c:	1be0      	subs	r0, r4, r7
 801314e:	4281      	cmp	r1, r0
 8013150:	dbbc      	blt.n	80130cc <_strtod_l+0x3e4>
 8013152:	4a40      	ldr	r2, [pc, #256]	@ (8013254 <_strtod_l+0x56c>)
 8013154:	f1c3 030f 	rsb	r3, r3, #15
 8013158:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801315c:	ed91 7b00 	vldr	d7, [r1]
 8013160:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013162:	ec4b ab16 	vmov	d6, sl, fp
 8013166:	1acb      	subs	r3, r1, r3
 8013168:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801316c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013170:	ed92 6b00 	vldr	d6, [r2]
 8013174:	e796      	b.n	80130a4 <_strtod_l+0x3bc>
 8013176:	3116      	adds	r1, #22
 8013178:	dba8      	blt.n	80130cc <_strtod_l+0x3e4>
 801317a:	4b36      	ldr	r3, [pc, #216]	@ (8013254 <_strtod_l+0x56c>)
 801317c:	1b3c      	subs	r4, r7, r4
 801317e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013182:	ed94 7b00 	vldr	d7, [r4]
 8013186:	ec4b ab16 	vmov	d6, sl, fp
 801318a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801318e:	e78b      	b.n	80130a8 <_strtod_l+0x3c0>
 8013190:	2000      	movs	r0, #0
 8013192:	ec4b ab17 	vmov	d7, sl, fp
 8013196:	4e30      	ldr	r6, [pc, #192]	@ (8013258 <_strtod_l+0x570>)
 8013198:	1112      	asrs	r2, r2, #4
 801319a:	4601      	mov	r1, r0
 801319c:	2a01      	cmp	r2, #1
 801319e:	dc23      	bgt.n	80131e8 <_strtod_l+0x500>
 80131a0:	b108      	cbz	r0, 80131a6 <_strtod_l+0x4be>
 80131a2:	ec5b ab17 	vmov	sl, fp, d7
 80131a6:	4a2c      	ldr	r2, [pc, #176]	@ (8013258 <_strtod_l+0x570>)
 80131a8:	482c      	ldr	r0, [pc, #176]	@ (801325c <_strtod_l+0x574>)
 80131aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80131ae:	ed92 7b00 	vldr	d7, [r2]
 80131b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80131b6:	ec4b ab16 	vmov	d6, sl, fp
 80131ba:	4a29      	ldr	r2, [pc, #164]	@ (8013260 <_strtod_l+0x578>)
 80131bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131c0:	ee17 1a90 	vmov	r1, s15
 80131c4:	400a      	ands	r2, r1
 80131c6:	4282      	cmp	r2, r0
 80131c8:	ec5b ab17 	vmov	sl, fp, d7
 80131cc:	d898      	bhi.n	8013100 <_strtod_l+0x418>
 80131ce:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80131d2:	4282      	cmp	r2, r0
 80131d4:	bf86      	itte	hi
 80131d6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013264 <_strtod_l+0x57c>
 80131da:	f04f 3aff 	movhi.w	sl, #4294967295
 80131de:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80131e2:	2200      	movs	r2, #0
 80131e4:	9206      	str	r2, [sp, #24]
 80131e6:	e076      	b.n	80132d6 <_strtod_l+0x5ee>
 80131e8:	f012 0f01 	tst.w	r2, #1
 80131ec:	d004      	beq.n	80131f8 <_strtod_l+0x510>
 80131ee:	ed96 6b00 	vldr	d6, [r6]
 80131f2:	2001      	movs	r0, #1
 80131f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131f8:	3101      	adds	r1, #1
 80131fa:	1052      	asrs	r2, r2, #1
 80131fc:	3608      	adds	r6, #8
 80131fe:	e7cd      	b.n	801319c <_strtod_l+0x4b4>
 8013200:	d0ef      	beq.n	80131e2 <_strtod_l+0x4fa>
 8013202:	4252      	negs	r2, r2
 8013204:	f012 000f 	ands.w	r0, r2, #15
 8013208:	d00a      	beq.n	8013220 <_strtod_l+0x538>
 801320a:	4912      	ldr	r1, [pc, #72]	@ (8013254 <_strtod_l+0x56c>)
 801320c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013210:	ed91 7b00 	vldr	d7, [r1]
 8013214:	ec4b ab16 	vmov	d6, sl, fp
 8013218:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801321c:	ec5b ab17 	vmov	sl, fp, d7
 8013220:	1112      	asrs	r2, r2, #4
 8013222:	d0de      	beq.n	80131e2 <_strtod_l+0x4fa>
 8013224:	2a1f      	cmp	r2, #31
 8013226:	dd1f      	ble.n	8013268 <_strtod_l+0x580>
 8013228:	2400      	movs	r4, #0
 801322a:	4625      	mov	r5, r4
 801322c:	9407      	str	r4, [sp, #28]
 801322e:	4626      	mov	r6, r4
 8013230:	9a05      	ldr	r2, [sp, #20]
 8013232:	2322      	movs	r3, #34	@ 0x22
 8013234:	f04f 0a00 	mov.w	sl, #0
 8013238:	f04f 0b00 	mov.w	fp, #0
 801323c:	6013      	str	r3, [r2, #0]
 801323e:	e76a      	b.n	8013116 <_strtod_l+0x42e>
 8013240:	08015371 	.word	0x08015371
 8013244:	08015584 	.word	0x08015584
 8013248:	08015369 	.word	0x08015369
 801324c:	080153a0 	.word	0x080153a0
 8013250:	08015363 	.word	0x08015363
 8013254:	080154b8 	.word	0x080154b8
 8013258:	08015490 	.word	0x08015490
 801325c:	7ca00000 	.word	0x7ca00000
 8013260:	7ff00000 	.word	0x7ff00000
 8013264:	7fefffff 	.word	0x7fefffff
 8013268:	f012 0110 	ands.w	r1, r2, #16
 801326c:	bf18      	it	ne
 801326e:	216a      	movne	r1, #106	@ 0x6a
 8013270:	9106      	str	r1, [sp, #24]
 8013272:	ec4b ab17 	vmov	d7, sl, fp
 8013276:	49b0      	ldr	r1, [pc, #704]	@ (8013538 <_strtod_l+0x850>)
 8013278:	2000      	movs	r0, #0
 801327a:	07d6      	lsls	r6, r2, #31
 801327c:	d504      	bpl.n	8013288 <_strtod_l+0x5a0>
 801327e:	ed91 6b00 	vldr	d6, [r1]
 8013282:	2001      	movs	r0, #1
 8013284:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013288:	1052      	asrs	r2, r2, #1
 801328a:	f101 0108 	add.w	r1, r1, #8
 801328e:	d1f4      	bne.n	801327a <_strtod_l+0x592>
 8013290:	b108      	cbz	r0, 8013296 <_strtod_l+0x5ae>
 8013292:	ec5b ab17 	vmov	sl, fp, d7
 8013296:	9a06      	ldr	r2, [sp, #24]
 8013298:	b1b2      	cbz	r2, 80132c8 <_strtod_l+0x5e0>
 801329a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801329e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80132a2:	2a00      	cmp	r2, #0
 80132a4:	4658      	mov	r0, fp
 80132a6:	dd0f      	ble.n	80132c8 <_strtod_l+0x5e0>
 80132a8:	2a1f      	cmp	r2, #31
 80132aa:	dd55      	ble.n	8013358 <_strtod_l+0x670>
 80132ac:	2a34      	cmp	r2, #52	@ 0x34
 80132ae:	bfde      	ittt	le
 80132b0:	f04f 32ff 	movle.w	r2, #4294967295
 80132b4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80132b8:	408a      	lslle	r2, r1
 80132ba:	f04f 0a00 	mov.w	sl, #0
 80132be:	bfcc      	ite	gt
 80132c0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80132c4:	ea02 0b00 	andle.w	fp, r2, r0
 80132c8:	ec4b ab17 	vmov	d7, sl, fp
 80132cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80132d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d4:	d0a8      	beq.n	8013228 <_strtod_l+0x540>
 80132d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80132d8:	9805      	ldr	r0, [sp, #20]
 80132da:	f8cd 9000 	str.w	r9, [sp]
 80132de:	462a      	mov	r2, r5
 80132e0:	f7ff f8de 	bl	80124a0 <__s2b>
 80132e4:	9007      	str	r0, [sp, #28]
 80132e6:	2800      	cmp	r0, #0
 80132e8:	f43f af0a 	beq.w	8013100 <_strtod_l+0x418>
 80132ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132ee:	1b3f      	subs	r7, r7, r4
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	bfb4      	ite	lt
 80132f4:	463b      	movlt	r3, r7
 80132f6:	2300      	movge	r3, #0
 80132f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80132fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132fc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8013528 <_strtod_l+0x840>
 8013300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013304:	2400      	movs	r4, #0
 8013306:	930d      	str	r3, [sp, #52]	@ 0x34
 8013308:	4625      	mov	r5, r4
 801330a:	9b07      	ldr	r3, [sp, #28]
 801330c:	9805      	ldr	r0, [sp, #20]
 801330e:	6859      	ldr	r1, [r3, #4]
 8013310:	f7ff f81e 	bl	8012350 <_Balloc>
 8013314:	4606      	mov	r6, r0
 8013316:	2800      	cmp	r0, #0
 8013318:	f43f aef6 	beq.w	8013108 <_strtod_l+0x420>
 801331c:	9b07      	ldr	r3, [sp, #28]
 801331e:	691a      	ldr	r2, [r3, #16]
 8013320:	ec4b ab19 	vmov	d9, sl, fp
 8013324:	3202      	adds	r2, #2
 8013326:	f103 010c 	add.w	r1, r3, #12
 801332a:	0092      	lsls	r2, r2, #2
 801332c:	300c      	adds	r0, #12
 801332e:	f7fe f9d0 	bl	80116d2 <memcpy>
 8013332:	eeb0 0b49 	vmov.f64	d0, d9
 8013336:	9805      	ldr	r0, [sp, #20]
 8013338:	aa14      	add	r2, sp, #80	@ 0x50
 801333a:	a913      	add	r1, sp, #76	@ 0x4c
 801333c:	f7ff fbec 	bl	8012b18 <__d2b>
 8013340:	9012      	str	r0, [sp, #72]	@ 0x48
 8013342:	2800      	cmp	r0, #0
 8013344:	f43f aee0 	beq.w	8013108 <_strtod_l+0x420>
 8013348:	9805      	ldr	r0, [sp, #20]
 801334a:	2101      	movs	r1, #1
 801334c:	f7ff f93e 	bl	80125cc <__i2b>
 8013350:	4605      	mov	r5, r0
 8013352:	b940      	cbnz	r0, 8013366 <_strtod_l+0x67e>
 8013354:	2500      	movs	r5, #0
 8013356:	e6d7      	b.n	8013108 <_strtod_l+0x420>
 8013358:	f04f 31ff 	mov.w	r1, #4294967295
 801335c:	fa01 f202 	lsl.w	r2, r1, r2
 8013360:	ea02 0a0a 	and.w	sl, r2, sl
 8013364:	e7b0      	b.n	80132c8 <_strtod_l+0x5e0>
 8013366:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8013368:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801336a:	2f00      	cmp	r7, #0
 801336c:	bfab      	itete	ge
 801336e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013370:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013372:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8013376:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801337a:	bfac      	ite	ge
 801337c:	eb07 0903 	addge.w	r9, r7, r3
 8013380:	eba3 0807 	sublt.w	r8, r3, r7
 8013384:	9b06      	ldr	r3, [sp, #24]
 8013386:	1aff      	subs	r7, r7, r3
 8013388:	4417      	add	r7, r2
 801338a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801338e:	4a6b      	ldr	r2, [pc, #428]	@ (801353c <_strtod_l+0x854>)
 8013390:	3f01      	subs	r7, #1
 8013392:	4297      	cmp	r7, r2
 8013394:	da51      	bge.n	801343a <_strtod_l+0x752>
 8013396:	1bd1      	subs	r1, r2, r7
 8013398:	291f      	cmp	r1, #31
 801339a:	eba3 0301 	sub.w	r3, r3, r1
 801339e:	f04f 0201 	mov.w	r2, #1
 80133a2:	dc3e      	bgt.n	8013422 <_strtod_l+0x73a>
 80133a4:	408a      	lsls	r2, r1
 80133a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80133a8:	2200      	movs	r2, #0
 80133aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80133ac:	eb09 0703 	add.w	r7, r9, r3
 80133b0:	4498      	add	r8, r3
 80133b2:	9b06      	ldr	r3, [sp, #24]
 80133b4:	45b9      	cmp	r9, r7
 80133b6:	4498      	add	r8, r3
 80133b8:	464b      	mov	r3, r9
 80133ba:	bfa8      	it	ge
 80133bc:	463b      	movge	r3, r7
 80133be:	4543      	cmp	r3, r8
 80133c0:	bfa8      	it	ge
 80133c2:	4643      	movge	r3, r8
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	bfc2      	ittt	gt
 80133c8:	1aff      	subgt	r7, r7, r3
 80133ca:	eba8 0803 	subgt.w	r8, r8, r3
 80133ce:	eba9 0903 	subgt.w	r9, r9, r3
 80133d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	dd16      	ble.n	8013406 <_strtod_l+0x71e>
 80133d8:	4629      	mov	r1, r5
 80133da:	9805      	ldr	r0, [sp, #20]
 80133dc:	461a      	mov	r2, r3
 80133de:	f7ff f9b5 	bl	801274c <__pow5mult>
 80133e2:	4605      	mov	r5, r0
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d0b5      	beq.n	8013354 <_strtod_l+0x66c>
 80133e8:	4601      	mov	r1, r0
 80133ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80133ec:	9805      	ldr	r0, [sp, #20]
 80133ee:	f7ff f903 	bl	80125f8 <__multiply>
 80133f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80133f4:	2800      	cmp	r0, #0
 80133f6:	f43f ae87 	beq.w	8013108 <_strtod_l+0x420>
 80133fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80133fc:	9805      	ldr	r0, [sp, #20]
 80133fe:	f7fe ffe7 	bl	80123d0 <_Bfree>
 8013402:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013404:	9312      	str	r3, [sp, #72]	@ 0x48
 8013406:	2f00      	cmp	r7, #0
 8013408:	dc1b      	bgt.n	8013442 <_strtod_l+0x75a>
 801340a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801340c:	2b00      	cmp	r3, #0
 801340e:	dd21      	ble.n	8013454 <_strtod_l+0x76c>
 8013410:	4631      	mov	r1, r6
 8013412:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013414:	9805      	ldr	r0, [sp, #20]
 8013416:	f7ff f999 	bl	801274c <__pow5mult>
 801341a:	4606      	mov	r6, r0
 801341c:	b9d0      	cbnz	r0, 8013454 <_strtod_l+0x76c>
 801341e:	2600      	movs	r6, #0
 8013420:	e672      	b.n	8013108 <_strtod_l+0x420>
 8013422:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8013426:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801342a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801342e:	37e2      	adds	r7, #226	@ 0xe2
 8013430:	fa02 f107 	lsl.w	r1, r2, r7
 8013434:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013436:	920c      	str	r2, [sp, #48]	@ 0x30
 8013438:	e7b8      	b.n	80133ac <_strtod_l+0x6c4>
 801343a:	2200      	movs	r2, #0
 801343c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801343e:	2201      	movs	r2, #1
 8013440:	e7f9      	b.n	8013436 <_strtod_l+0x74e>
 8013442:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013444:	9805      	ldr	r0, [sp, #20]
 8013446:	463a      	mov	r2, r7
 8013448:	f7ff f9da 	bl	8012800 <__lshift>
 801344c:	9012      	str	r0, [sp, #72]	@ 0x48
 801344e:	2800      	cmp	r0, #0
 8013450:	d1db      	bne.n	801340a <_strtod_l+0x722>
 8013452:	e659      	b.n	8013108 <_strtod_l+0x420>
 8013454:	f1b8 0f00 	cmp.w	r8, #0
 8013458:	dd07      	ble.n	801346a <_strtod_l+0x782>
 801345a:	4631      	mov	r1, r6
 801345c:	9805      	ldr	r0, [sp, #20]
 801345e:	4642      	mov	r2, r8
 8013460:	f7ff f9ce 	bl	8012800 <__lshift>
 8013464:	4606      	mov	r6, r0
 8013466:	2800      	cmp	r0, #0
 8013468:	d0d9      	beq.n	801341e <_strtod_l+0x736>
 801346a:	f1b9 0f00 	cmp.w	r9, #0
 801346e:	dd08      	ble.n	8013482 <_strtod_l+0x79a>
 8013470:	4629      	mov	r1, r5
 8013472:	9805      	ldr	r0, [sp, #20]
 8013474:	464a      	mov	r2, r9
 8013476:	f7ff f9c3 	bl	8012800 <__lshift>
 801347a:	4605      	mov	r5, r0
 801347c:	2800      	cmp	r0, #0
 801347e:	f43f ae43 	beq.w	8013108 <_strtod_l+0x420>
 8013482:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013484:	9805      	ldr	r0, [sp, #20]
 8013486:	4632      	mov	r2, r6
 8013488:	f7ff fa42 	bl	8012910 <__mdiff>
 801348c:	4604      	mov	r4, r0
 801348e:	2800      	cmp	r0, #0
 8013490:	f43f ae3a 	beq.w	8013108 <_strtod_l+0x420>
 8013494:	2300      	movs	r3, #0
 8013496:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801349a:	60c3      	str	r3, [r0, #12]
 801349c:	4629      	mov	r1, r5
 801349e:	f7ff fa1b 	bl	80128d8 <__mcmp>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	da4e      	bge.n	8013544 <_strtod_l+0x85c>
 80134a6:	ea58 080a 	orrs.w	r8, r8, sl
 80134aa:	d174      	bne.n	8013596 <_strtod_l+0x8ae>
 80134ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d170      	bne.n	8013596 <_strtod_l+0x8ae>
 80134b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80134b8:	0d1b      	lsrs	r3, r3, #20
 80134ba:	051b      	lsls	r3, r3, #20
 80134bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80134c0:	d969      	bls.n	8013596 <_strtod_l+0x8ae>
 80134c2:	6963      	ldr	r3, [r4, #20]
 80134c4:	b913      	cbnz	r3, 80134cc <_strtod_l+0x7e4>
 80134c6:	6923      	ldr	r3, [r4, #16]
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	dd64      	ble.n	8013596 <_strtod_l+0x8ae>
 80134cc:	4621      	mov	r1, r4
 80134ce:	2201      	movs	r2, #1
 80134d0:	9805      	ldr	r0, [sp, #20]
 80134d2:	f7ff f995 	bl	8012800 <__lshift>
 80134d6:	4629      	mov	r1, r5
 80134d8:	4604      	mov	r4, r0
 80134da:	f7ff f9fd 	bl	80128d8 <__mcmp>
 80134de:	2800      	cmp	r0, #0
 80134e0:	dd59      	ble.n	8013596 <_strtod_l+0x8ae>
 80134e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80134e6:	9a06      	ldr	r2, [sp, #24]
 80134e8:	0d1b      	lsrs	r3, r3, #20
 80134ea:	051b      	lsls	r3, r3, #20
 80134ec:	2a00      	cmp	r2, #0
 80134ee:	d070      	beq.n	80135d2 <_strtod_l+0x8ea>
 80134f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80134f4:	d86d      	bhi.n	80135d2 <_strtod_l+0x8ea>
 80134f6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80134fa:	f67f ae99 	bls.w	8013230 <_strtod_l+0x548>
 80134fe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8013530 <_strtod_l+0x848>
 8013502:	ec4b ab16 	vmov	d6, sl, fp
 8013506:	4b0e      	ldr	r3, [pc, #56]	@ (8013540 <_strtod_l+0x858>)
 8013508:	ee26 7b07 	vmul.f64	d7, d6, d7
 801350c:	ee17 2a90 	vmov	r2, s15
 8013510:	4013      	ands	r3, r2
 8013512:	ec5b ab17 	vmov	sl, fp, d7
 8013516:	2b00      	cmp	r3, #0
 8013518:	f47f ae01 	bne.w	801311e <_strtod_l+0x436>
 801351c:	9a05      	ldr	r2, [sp, #20]
 801351e:	2322      	movs	r3, #34	@ 0x22
 8013520:	6013      	str	r3, [r2, #0]
 8013522:	e5fc      	b.n	801311e <_strtod_l+0x436>
 8013524:	f3af 8000 	nop.w
 8013528:	ffc00000 	.word	0xffc00000
 801352c:	41dfffff 	.word	0x41dfffff
 8013530:	00000000 	.word	0x00000000
 8013534:	39500000 	.word	0x39500000
 8013538:	080155b0 	.word	0x080155b0
 801353c:	fffffc02 	.word	0xfffffc02
 8013540:	7ff00000 	.word	0x7ff00000
 8013544:	46d9      	mov	r9, fp
 8013546:	d15d      	bne.n	8013604 <_strtod_l+0x91c>
 8013548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801354c:	f1b8 0f00 	cmp.w	r8, #0
 8013550:	d02a      	beq.n	80135a8 <_strtod_l+0x8c0>
 8013552:	4aab      	ldr	r2, [pc, #684]	@ (8013800 <_strtod_l+0xb18>)
 8013554:	4293      	cmp	r3, r2
 8013556:	d12a      	bne.n	80135ae <_strtod_l+0x8c6>
 8013558:	9b06      	ldr	r3, [sp, #24]
 801355a:	4652      	mov	r2, sl
 801355c:	b1fb      	cbz	r3, 801359e <_strtod_l+0x8b6>
 801355e:	4ba9      	ldr	r3, [pc, #676]	@ (8013804 <_strtod_l+0xb1c>)
 8013560:	ea0b 0303 	and.w	r3, fp, r3
 8013564:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013568:	f04f 31ff 	mov.w	r1, #4294967295
 801356c:	d81a      	bhi.n	80135a4 <_strtod_l+0x8bc>
 801356e:	0d1b      	lsrs	r3, r3, #20
 8013570:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013574:	fa01 f303 	lsl.w	r3, r1, r3
 8013578:	429a      	cmp	r2, r3
 801357a:	d118      	bne.n	80135ae <_strtod_l+0x8c6>
 801357c:	4ba2      	ldr	r3, [pc, #648]	@ (8013808 <_strtod_l+0xb20>)
 801357e:	4599      	cmp	r9, r3
 8013580:	d102      	bne.n	8013588 <_strtod_l+0x8a0>
 8013582:	3201      	adds	r2, #1
 8013584:	f43f adc0 	beq.w	8013108 <_strtod_l+0x420>
 8013588:	4b9e      	ldr	r3, [pc, #632]	@ (8013804 <_strtod_l+0xb1c>)
 801358a:	ea09 0303 	and.w	r3, r9, r3
 801358e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013592:	f04f 0a00 	mov.w	sl, #0
 8013596:	9b06      	ldr	r3, [sp, #24]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1b0      	bne.n	80134fe <_strtod_l+0x816>
 801359c:	e5bf      	b.n	801311e <_strtod_l+0x436>
 801359e:	f04f 33ff 	mov.w	r3, #4294967295
 80135a2:	e7e9      	b.n	8013578 <_strtod_l+0x890>
 80135a4:	460b      	mov	r3, r1
 80135a6:	e7e7      	b.n	8013578 <_strtod_l+0x890>
 80135a8:	ea53 030a 	orrs.w	r3, r3, sl
 80135ac:	d099      	beq.n	80134e2 <_strtod_l+0x7fa>
 80135ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135b0:	b1c3      	cbz	r3, 80135e4 <_strtod_l+0x8fc>
 80135b2:	ea13 0f09 	tst.w	r3, r9
 80135b6:	d0ee      	beq.n	8013596 <_strtod_l+0x8ae>
 80135b8:	9a06      	ldr	r2, [sp, #24]
 80135ba:	4650      	mov	r0, sl
 80135bc:	4659      	mov	r1, fp
 80135be:	f1b8 0f00 	cmp.w	r8, #0
 80135c2:	d013      	beq.n	80135ec <_strtod_l+0x904>
 80135c4:	f7ff fb73 	bl	8012cae <sulp>
 80135c8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80135cc:	ec5b ab17 	vmov	sl, fp, d7
 80135d0:	e7e1      	b.n	8013596 <_strtod_l+0x8ae>
 80135d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80135d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80135da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80135de:	f04f 3aff 	mov.w	sl, #4294967295
 80135e2:	e7d8      	b.n	8013596 <_strtod_l+0x8ae>
 80135e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135e6:	ea13 0f0a 	tst.w	r3, sl
 80135ea:	e7e4      	b.n	80135b6 <_strtod_l+0x8ce>
 80135ec:	f7ff fb5f 	bl	8012cae <sulp>
 80135f0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80135f4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80135f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fc:	ec5b ab10 	vmov	sl, fp, d0
 8013600:	d1c9      	bne.n	8013596 <_strtod_l+0x8ae>
 8013602:	e615      	b.n	8013230 <_strtod_l+0x548>
 8013604:	4629      	mov	r1, r5
 8013606:	4620      	mov	r0, r4
 8013608:	f7ff fade 	bl	8012bc8 <__ratio>
 801360c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013610:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013618:	d85d      	bhi.n	80136d6 <_strtod_l+0x9ee>
 801361a:	f1b8 0f00 	cmp.w	r8, #0
 801361e:	d164      	bne.n	80136ea <_strtod_l+0xa02>
 8013620:	f1ba 0f00 	cmp.w	sl, #0
 8013624:	d14b      	bne.n	80136be <_strtod_l+0x9d6>
 8013626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801362a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d160      	bne.n	80136f4 <_strtod_l+0xa0c>
 8013632:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013636:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363e:	d401      	bmi.n	8013644 <_strtod_l+0x95c>
 8013640:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013644:	eeb1 ab48 	vneg.f64	d10, d8
 8013648:	486e      	ldr	r0, [pc, #440]	@ (8013804 <_strtod_l+0xb1c>)
 801364a:	4970      	ldr	r1, [pc, #448]	@ (801380c <_strtod_l+0xb24>)
 801364c:	ea09 0700 	and.w	r7, r9, r0
 8013650:	428f      	cmp	r7, r1
 8013652:	ec53 2b1a 	vmov	r2, r3, d10
 8013656:	d17d      	bne.n	8013754 <_strtod_l+0xa6c>
 8013658:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801365c:	ec4b ab1c 	vmov	d12, sl, fp
 8013660:	eeb0 0b4c 	vmov.f64	d0, d12
 8013664:	f7ff f9e8 	bl	8012a38 <__ulp>
 8013668:	4866      	ldr	r0, [pc, #408]	@ (8013804 <_strtod_l+0xb1c>)
 801366a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801366e:	ee1c 3a90 	vmov	r3, s25
 8013672:	4a67      	ldr	r2, [pc, #412]	@ (8013810 <_strtod_l+0xb28>)
 8013674:	ea03 0100 	and.w	r1, r3, r0
 8013678:	4291      	cmp	r1, r2
 801367a:	ec5b ab1c 	vmov	sl, fp, d12
 801367e:	d93c      	bls.n	80136fa <_strtod_l+0xa12>
 8013680:	ee19 2a90 	vmov	r2, s19
 8013684:	4b60      	ldr	r3, [pc, #384]	@ (8013808 <_strtod_l+0xb20>)
 8013686:	429a      	cmp	r2, r3
 8013688:	d104      	bne.n	8013694 <_strtod_l+0x9ac>
 801368a:	ee19 3a10 	vmov	r3, s18
 801368e:	3301      	adds	r3, #1
 8013690:	f43f ad3a 	beq.w	8013108 <_strtod_l+0x420>
 8013694:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8013808 <_strtod_l+0xb20>
 8013698:	f04f 3aff 	mov.w	sl, #4294967295
 801369c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801369e:	9805      	ldr	r0, [sp, #20]
 80136a0:	f7fe fe96 	bl	80123d0 <_Bfree>
 80136a4:	9805      	ldr	r0, [sp, #20]
 80136a6:	4631      	mov	r1, r6
 80136a8:	f7fe fe92 	bl	80123d0 <_Bfree>
 80136ac:	9805      	ldr	r0, [sp, #20]
 80136ae:	4629      	mov	r1, r5
 80136b0:	f7fe fe8e 	bl	80123d0 <_Bfree>
 80136b4:	9805      	ldr	r0, [sp, #20]
 80136b6:	4621      	mov	r1, r4
 80136b8:	f7fe fe8a 	bl	80123d0 <_Bfree>
 80136bc:	e625      	b.n	801330a <_strtod_l+0x622>
 80136be:	f1ba 0f01 	cmp.w	sl, #1
 80136c2:	d103      	bne.n	80136cc <_strtod_l+0x9e4>
 80136c4:	f1bb 0f00 	cmp.w	fp, #0
 80136c8:	f43f adb2 	beq.w	8013230 <_strtod_l+0x548>
 80136cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80136d0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80136d4:	e7b8      	b.n	8013648 <_strtod_l+0x960>
 80136d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80136da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80136de:	f1b8 0f00 	cmp.w	r8, #0
 80136e2:	d0af      	beq.n	8013644 <_strtod_l+0x95c>
 80136e4:	eeb0 ab48 	vmov.f64	d10, d8
 80136e8:	e7ae      	b.n	8013648 <_strtod_l+0x960>
 80136ea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80136ee:	eeb0 8b4a 	vmov.f64	d8, d10
 80136f2:	e7a9      	b.n	8013648 <_strtod_l+0x960>
 80136f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80136f8:	e7a6      	b.n	8013648 <_strtod_l+0x960>
 80136fa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80136fe:	9b06      	ldr	r3, [sp, #24]
 8013700:	46d9      	mov	r9, fp
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1ca      	bne.n	801369c <_strtod_l+0x9b4>
 8013706:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801370a:	0d1b      	lsrs	r3, r3, #20
 801370c:	051b      	lsls	r3, r3, #20
 801370e:	429f      	cmp	r7, r3
 8013710:	d1c4      	bne.n	801369c <_strtod_l+0x9b4>
 8013712:	ec51 0b18 	vmov	r0, r1, d8
 8013716:	f7ed f817 	bl	8000748 <__aeabi_d2lz>
 801371a:	f7ec ffcf 	bl	80006bc <__aeabi_l2d>
 801371e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8013722:	ec41 0b17 	vmov	d7, r0, r1
 8013726:	ea49 090a 	orr.w	r9, r9, sl
 801372a:	ea59 0908 	orrs.w	r9, r9, r8
 801372e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013732:	d03c      	beq.n	80137ae <_strtod_l+0xac6>
 8013734:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80137e8 <_strtod_l+0xb00>
 8013738:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013740:	f53f aced 	bmi.w	801311e <_strtod_l+0x436>
 8013744:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80137f0 <_strtod_l+0xb08>
 8013748:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801374c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013750:	dda4      	ble.n	801369c <_strtod_l+0x9b4>
 8013752:	e4e4      	b.n	801311e <_strtod_l+0x436>
 8013754:	9906      	ldr	r1, [sp, #24]
 8013756:	b1e1      	cbz	r1, 8013792 <_strtod_l+0xaaa>
 8013758:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801375c:	d819      	bhi.n	8013792 <_strtod_l+0xaaa>
 801375e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013766:	d811      	bhi.n	801378c <_strtod_l+0xaa4>
 8013768:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801376c:	ee18 3a10 	vmov	r3, s16
 8013770:	2b01      	cmp	r3, #1
 8013772:	bf38      	it	cc
 8013774:	2301      	movcc	r3, #1
 8013776:	ee08 3a10 	vmov	s16, r3
 801377a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801377e:	f1b8 0f00 	cmp.w	r8, #0
 8013782:	d111      	bne.n	80137a8 <_strtod_l+0xac0>
 8013784:	eeb1 7b48 	vneg.f64	d7, d8
 8013788:	ec53 2b17 	vmov	r2, r3, d7
 801378c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013790:	1bcb      	subs	r3, r1, r7
 8013792:	eeb0 0b49 	vmov.f64	d0, d9
 8013796:	ec43 2b1a 	vmov	d10, r2, r3
 801379a:	f7ff f94d 	bl	8012a38 <__ulp>
 801379e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80137a2:	ec5b ab19 	vmov	sl, fp, d9
 80137a6:	e7aa      	b.n	80136fe <_strtod_l+0xa16>
 80137a8:	eeb0 7b48 	vmov.f64	d7, d8
 80137ac:	e7ec      	b.n	8013788 <_strtod_l+0xaa0>
 80137ae:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80137f8 <_strtod_l+0xb10>
 80137b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80137b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ba:	f57f af6f 	bpl.w	801369c <_strtod_l+0x9b4>
 80137be:	e4ae      	b.n	801311e <_strtod_l+0x436>
 80137c0:	2300      	movs	r3, #0
 80137c2:	9308      	str	r3, [sp, #32]
 80137c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137c8:	6013      	str	r3, [r2, #0]
 80137ca:	f7ff bacc 	b.w	8012d66 <_strtod_l+0x7e>
 80137ce:	2a65      	cmp	r2, #101	@ 0x65
 80137d0:	f43f abbc 	beq.w	8012f4c <_strtod_l+0x264>
 80137d4:	2a45      	cmp	r2, #69	@ 0x45
 80137d6:	f43f abb9 	beq.w	8012f4c <_strtod_l+0x264>
 80137da:	2301      	movs	r3, #1
 80137dc:	9306      	str	r3, [sp, #24]
 80137de:	f7ff bbf0 	b.w	8012fc2 <_strtod_l+0x2da>
 80137e2:	bf00      	nop
 80137e4:	f3af 8000 	nop.w
 80137e8:	94a03595 	.word	0x94a03595
 80137ec:	3fdfffff 	.word	0x3fdfffff
 80137f0:	35afe535 	.word	0x35afe535
 80137f4:	3fe00000 	.word	0x3fe00000
 80137f8:	94a03595 	.word	0x94a03595
 80137fc:	3fcfffff 	.word	0x3fcfffff
 8013800:	000fffff 	.word	0x000fffff
 8013804:	7ff00000 	.word	0x7ff00000
 8013808:	7fefffff 	.word	0x7fefffff
 801380c:	7fe00000 	.word	0x7fe00000
 8013810:	7c9fffff 	.word	0x7c9fffff

08013814 <_strtod_r>:
 8013814:	4b01      	ldr	r3, [pc, #4]	@ (801381c <_strtod_r+0x8>)
 8013816:	f7ff ba67 	b.w	8012ce8 <_strtod_l>
 801381a:	bf00      	nop
 801381c:	24000070 	.word	0x24000070

08013820 <_strtol_l.constprop.0>:
 8013820:	2b24      	cmp	r3, #36	@ 0x24
 8013822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013826:	4686      	mov	lr, r0
 8013828:	4690      	mov	r8, r2
 801382a:	d801      	bhi.n	8013830 <_strtol_l.constprop.0+0x10>
 801382c:	2b01      	cmp	r3, #1
 801382e:	d106      	bne.n	801383e <_strtol_l.constprop.0+0x1e>
 8013830:	f7fd ff22 	bl	8011678 <__errno>
 8013834:	2316      	movs	r3, #22
 8013836:	6003      	str	r3, [r0, #0]
 8013838:	2000      	movs	r0, #0
 801383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801383e:	4834      	ldr	r0, [pc, #208]	@ (8013910 <_strtol_l.constprop.0+0xf0>)
 8013840:	460d      	mov	r5, r1
 8013842:	462a      	mov	r2, r5
 8013844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013848:	5d06      	ldrb	r6, [r0, r4]
 801384a:	f016 0608 	ands.w	r6, r6, #8
 801384e:	d1f8      	bne.n	8013842 <_strtol_l.constprop.0+0x22>
 8013850:	2c2d      	cmp	r4, #45	@ 0x2d
 8013852:	d12d      	bne.n	80138b0 <_strtol_l.constprop.0+0x90>
 8013854:	782c      	ldrb	r4, [r5, #0]
 8013856:	2601      	movs	r6, #1
 8013858:	1c95      	adds	r5, r2, #2
 801385a:	f033 0210 	bics.w	r2, r3, #16
 801385e:	d109      	bne.n	8013874 <_strtol_l.constprop.0+0x54>
 8013860:	2c30      	cmp	r4, #48	@ 0x30
 8013862:	d12a      	bne.n	80138ba <_strtol_l.constprop.0+0x9a>
 8013864:	782a      	ldrb	r2, [r5, #0]
 8013866:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801386a:	2a58      	cmp	r2, #88	@ 0x58
 801386c:	d125      	bne.n	80138ba <_strtol_l.constprop.0+0x9a>
 801386e:	786c      	ldrb	r4, [r5, #1]
 8013870:	2310      	movs	r3, #16
 8013872:	3502      	adds	r5, #2
 8013874:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013878:	f10c 3cff 	add.w	ip, ip, #4294967295
 801387c:	2200      	movs	r2, #0
 801387e:	fbbc f9f3 	udiv	r9, ip, r3
 8013882:	4610      	mov	r0, r2
 8013884:	fb03 ca19 	mls	sl, r3, r9, ip
 8013888:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801388c:	2f09      	cmp	r7, #9
 801388e:	d81b      	bhi.n	80138c8 <_strtol_l.constprop.0+0xa8>
 8013890:	463c      	mov	r4, r7
 8013892:	42a3      	cmp	r3, r4
 8013894:	dd27      	ble.n	80138e6 <_strtol_l.constprop.0+0xc6>
 8013896:	1c57      	adds	r7, r2, #1
 8013898:	d007      	beq.n	80138aa <_strtol_l.constprop.0+0x8a>
 801389a:	4581      	cmp	r9, r0
 801389c:	d320      	bcc.n	80138e0 <_strtol_l.constprop.0+0xc0>
 801389e:	d101      	bne.n	80138a4 <_strtol_l.constprop.0+0x84>
 80138a0:	45a2      	cmp	sl, r4
 80138a2:	db1d      	blt.n	80138e0 <_strtol_l.constprop.0+0xc0>
 80138a4:	fb00 4003 	mla	r0, r0, r3, r4
 80138a8:	2201      	movs	r2, #1
 80138aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138ae:	e7eb      	b.n	8013888 <_strtol_l.constprop.0+0x68>
 80138b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80138b2:	bf04      	itt	eq
 80138b4:	782c      	ldrbeq	r4, [r5, #0]
 80138b6:	1c95      	addeq	r5, r2, #2
 80138b8:	e7cf      	b.n	801385a <_strtol_l.constprop.0+0x3a>
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d1da      	bne.n	8013874 <_strtol_l.constprop.0+0x54>
 80138be:	2c30      	cmp	r4, #48	@ 0x30
 80138c0:	bf0c      	ite	eq
 80138c2:	2308      	moveq	r3, #8
 80138c4:	230a      	movne	r3, #10
 80138c6:	e7d5      	b.n	8013874 <_strtol_l.constprop.0+0x54>
 80138c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80138cc:	2f19      	cmp	r7, #25
 80138ce:	d801      	bhi.n	80138d4 <_strtol_l.constprop.0+0xb4>
 80138d0:	3c37      	subs	r4, #55	@ 0x37
 80138d2:	e7de      	b.n	8013892 <_strtol_l.constprop.0+0x72>
 80138d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80138d8:	2f19      	cmp	r7, #25
 80138da:	d804      	bhi.n	80138e6 <_strtol_l.constprop.0+0xc6>
 80138dc:	3c57      	subs	r4, #87	@ 0x57
 80138de:	e7d8      	b.n	8013892 <_strtol_l.constprop.0+0x72>
 80138e0:	f04f 32ff 	mov.w	r2, #4294967295
 80138e4:	e7e1      	b.n	80138aa <_strtol_l.constprop.0+0x8a>
 80138e6:	1c53      	adds	r3, r2, #1
 80138e8:	d108      	bne.n	80138fc <_strtol_l.constprop.0+0xdc>
 80138ea:	2322      	movs	r3, #34	@ 0x22
 80138ec:	f8ce 3000 	str.w	r3, [lr]
 80138f0:	4660      	mov	r0, ip
 80138f2:	f1b8 0f00 	cmp.w	r8, #0
 80138f6:	d0a0      	beq.n	801383a <_strtol_l.constprop.0+0x1a>
 80138f8:	1e69      	subs	r1, r5, #1
 80138fa:	e006      	b.n	801390a <_strtol_l.constprop.0+0xea>
 80138fc:	b106      	cbz	r6, 8013900 <_strtol_l.constprop.0+0xe0>
 80138fe:	4240      	negs	r0, r0
 8013900:	f1b8 0f00 	cmp.w	r8, #0
 8013904:	d099      	beq.n	801383a <_strtol_l.constprop.0+0x1a>
 8013906:	2a00      	cmp	r2, #0
 8013908:	d1f6      	bne.n	80138f8 <_strtol_l.constprop.0+0xd8>
 801390a:	f8c8 1000 	str.w	r1, [r8]
 801390e:	e794      	b.n	801383a <_strtol_l.constprop.0+0x1a>
 8013910:	080155d9 	.word	0x080155d9

08013914 <_strtol_r>:
 8013914:	f7ff bf84 	b.w	8013820 <_strtol_l.constprop.0>

08013918 <__ssputs_r>:
 8013918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801391c:	688e      	ldr	r6, [r1, #8]
 801391e:	461f      	mov	r7, r3
 8013920:	42be      	cmp	r6, r7
 8013922:	680b      	ldr	r3, [r1, #0]
 8013924:	4682      	mov	sl, r0
 8013926:	460c      	mov	r4, r1
 8013928:	4690      	mov	r8, r2
 801392a:	d82d      	bhi.n	8013988 <__ssputs_r+0x70>
 801392c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013934:	d026      	beq.n	8013984 <__ssputs_r+0x6c>
 8013936:	6965      	ldr	r5, [r4, #20]
 8013938:	6909      	ldr	r1, [r1, #16]
 801393a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801393e:	eba3 0901 	sub.w	r9, r3, r1
 8013942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013946:	1c7b      	adds	r3, r7, #1
 8013948:	444b      	add	r3, r9
 801394a:	106d      	asrs	r5, r5, #1
 801394c:	429d      	cmp	r5, r3
 801394e:	bf38      	it	cc
 8013950:	461d      	movcc	r5, r3
 8013952:	0553      	lsls	r3, r2, #21
 8013954:	d527      	bpl.n	80139a6 <__ssputs_r+0x8e>
 8013956:	4629      	mov	r1, r5
 8013958:	f7fc fc86 	bl	8010268 <_malloc_r>
 801395c:	4606      	mov	r6, r0
 801395e:	b360      	cbz	r0, 80139ba <__ssputs_r+0xa2>
 8013960:	6921      	ldr	r1, [r4, #16]
 8013962:	464a      	mov	r2, r9
 8013964:	f7fd feb5 	bl	80116d2 <memcpy>
 8013968:	89a3      	ldrh	r3, [r4, #12]
 801396a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801396e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013972:	81a3      	strh	r3, [r4, #12]
 8013974:	6126      	str	r6, [r4, #16]
 8013976:	6165      	str	r5, [r4, #20]
 8013978:	444e      	add	r6, r9
 801397a:	eba5 0509 	sub.w	r5, r5, r9
 801397e:	6026      	str	r6, [r4, #0]
 8013980:	60a5      	str	r5, [r4, #8]
 8013982:	463e      	mov	r6, r7
 8013984:	42be      	cmp	r6, r7
 8013986:	d900      	bls.n	801398a <__ssputs_r+0x72>
 8013988:	463e      	mov	r6, r7
 801398a:	6820      	ldr	r0, [r4, #0]
 801398c:	4632      	mov	r2, r6
 801398e:	4641      	mov	r1, r8
 8013990:	f000 fb6a 	bl	8014068 <memmove>
 8013994:	68a3      	ldr	r3, [r4, #8]
 8013996:	1b9b      	subs	r3, r3, r6
 8013998:	60a3      	str	r3, [r4, #8]
 801399a:	6823      	ldr	r3, [r4, #0]
 801399c:	4433      	add	r3, r6
 801399e:	6023      	str	r3, [r4, #0]
 80139a0:	2000      	movs	r0, #0
 80139a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a6:	462a      	mov	r2, r5
 80139a8:	f000 ff15 	bl	80147d6 <_realloc_r>
 80139ac:	4606      	mov	r6, r0
 80139ae:	2800      	cmp	r0, #0
 80139b0:	d1e0      	bne.n	8013974 <__ssputs_r+0x5c>
 80139b2:	6921      	ldr	r1, [r4, #16]
 80139b4:	4650      	mov	r0, sl
 80139b6:	f7fe fc81 	bl	80122bc <_free_r>
 80139ba:	230c      	movs	r3, #12
 80139bc:	f8ca 3000 	str.w	r3, [sl]
 80139c0:	89a3      	ldrh	r3, [r4, #12]
 80139c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139c6:	81a3      	strh	r3, [r4, #12]
 80139c8:	f04f 30ff 	mov.w	r0, #4294967295
 80139cc:	e7e9      	b.n	80139a2 <__ssputs_r+0x8a>
	...

080139d0 <_svfiprintf_r>:
 80139d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d4:	4698      	mov	r8, r3
 80139d6:	898b      	ldrh	r3, [r1, #12]
 80139d8:	061b      	lsls	r3, r3, #24
 80139da:	b09d      	sub	sp, #116	@ 0x74
 80139dc:	4607      	mov	r7, r0
 80139de:	460d      	mov	r5, r1
 80139e0:	4614      	mov	r4, r2
 80139e2:	d510      	bpl.n	8013a06 <_svfiprintf_r+0x36>
 80139e4:	690b      	ldr	r3, [r1, #16]
 80139e6:	b973      	cbnz	r3, 8013a06 <_svfiprintf_r+0x36>
 80139e8:	2140      	movs	r1, #64	@ 0x40
 80139ea:	f7fc fc3d 	bl	8010268 <_malloc_r>
 80139ee:	6028      	str	r0, [r5, #0]
 80139f0:	6128      	str	r0, [r5, #16]
 80139f2:	b930      	cbnz	r0, 8013a02 <_svfiprintf_r+0x32>
 80139f4:	230c      	movs	r3, #12
 80139f6:	603b      	str	r3, [r7, #0]
 80139f8:	f04f 30ff 	mov.w	r0, #4294967295
 80139fc:	b01d      	add	sp, #116	@ 0x74
 80139fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a02:	2340      	movs	r3, #64	@ 0x40
 8013a04:	616b      	str	r3, [r5, #20]
 8013a06:	2300      	movs	r3, #0
 8013a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a0a:	2320      	movs	r3, #32
 8013a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a14:	2330      	movs	r3, #48	@ 0x30
 8013a16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013bb4 <_svfiprintf_r+0x1e4>
 8013a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a1e:	f04f 0901 	mov.w	r9, #1
 8013a22:	4623      	mov	r3, r4
 8013a24:	469a      	mov	sl, r3
 8013a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a2a:	b10a      	cbz	r2, 8013a30 <_svfiprintf_r+0x60>
 8013a2c:	2a25      	cmp	r2, #37	@ 0x25
 8013a2e:	d1f9      	bne.n	8013a24 <_svfiprintf_r+0x54>
 8013a30:	ebba 0b04 	subs.w	fp, sl, r4
 8013a34:	d00b      	beq.n	8013a4e <_svfiprintf_r+0x7e>
 8013a36:	465b      	mov	r3, fp
 8013a38:	4622      	mov	r2, r4
 8013a3a:	4629      	mov	r1, r5
 8013a3c:	4638      	mov	r0, r7
 8013a3e:	f7ff ff6b 	bl	8013918 <__ssputs_r>
 8013a42:	3001      	adds	r0, #1
 8013a44:	f000 80a7 	beq.w	8013b96 <_svfiprintf_r+0x1c6>
 8013a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a4a:	445a      	add	r2, fp
 8013a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	f000 809f 	beq.w	8013b96 <_svfiprintf_r+0x1c6>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a62:	f10a 0a01 	add.w	sl, sl, #1
 8013a66:	9304      	str	r3, [sp, #16]
 8013a68:	9307      	str	r3, [sp, #28]
 8013a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a70:	4654      	mov	r4, sl
 8013a72:	2205      	movs	r2, #5
 8013a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a78:	484e      	ldr	r0, [pc, #312]	@ (8013bb4 <_svfiprintf_r+0x1e4>)
 8013a7a:	f7ec fc39 	bl	80002f0 <memchr>
 8013a7e:	9a04      	ldr	r2, [sp, #16]
 8013a80:	b9d8      	cbnz	r0, 8013aba <_svfiprintf_r+0xea>
 8013a82:	06d0      	lsls	r0, r2, #27
 8013a84:	bf44      	itt	mi
 8013a86:	2320      	movmi	r3, #32
 8013a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a8c:	0711      	lsls	r1, r2, #28
 8013a8e:	bf44      	itt	mi
 8013a90:	232b      	movmi	r3, #43	@ 0x2b
 8013a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a96:	f89a 3000 	ldrb.w	r3, [sl]
 8013a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a9c:	d015      	beq.n	8013aca <_svfiprintf_r+0xfa>
 8013a9e:	9a07      	ldr	r2, [sp, #28]
 8013aa0:	4654      	mov	r4, sl
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	f04f 0c0a 	mov.w	ip, #10
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aae:	3b30      	subs	r3, #48	@ 0x30
 8013ab0:	2b09      	cmp	r3, #9
 8013ab2:	d94b      	bls.n	8013b4c <_svfiprintf_r+0x17c>
 8013ab4:	b1b0      	cbz	r0, 8013ae4 <_svfiprintf_r+0x114>
 8013ab6:	9207      	str	r2, [sp, #28]
 8013ab8:	e014      	b.n	8013ae4 <_svfiprintf_r+0x114>
 8013aba:	eba0 0308 	sub.w	r3, r0, r8
 8013abe:	fa09 f303 	lsl.w	r3, r9, r3
 8013ac2:	4313      	orrs	r3, r2
 8013ac4:	9304      	str	r3, [sp, #16]
 8013ac6:	46a2      	mov	sl, r4
 8013ac8:	e7d2      	b.n	8013a70 <_svfiprintf_r+0xa0>
 8013aca:	9b03      	ldr	r3, [sp, #12]
 8013acc:	1d19      	adds	r1, r3, #4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	9103      	str	r1, [sp, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	bfbb      	ittet	lt
 8013ad6:	425b      	neglt	r3, r3
 8013ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8013adc:	9307      	strge	r3, [sp, #28]
 8013ade:	9307      	strlt	r3, [sp, #28]
 8013ae0:	bfb8      	it	lt
 8013ae2:	9204      	strlt	r2, [sp, #16]
 8013ae4:	7823      	ldrb	r3, [r4, #0]
 8013ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ae8:	d10a      	bne.n	8013b00 <_svfiprintf_r+0x130>
 8013aea:	7863      	ldrb	r3, [r4, #1]
 8013aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8013aee:	d132      	bne.n	8013b56 <_svfiprintf_r+0x186>
 8013af0:	9b03      	ldr	r3, [sp, #12]
 8013af2:	1d1a      	adds	r2, r3, #4
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	9203      	str	r2, [sp, #12]
 8013af8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013afc:	3402      	adds	r4, #2
 8013afe:	9305      	str	r3, [sp, #20]
 8013b00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013bc4 <_svfiprintf_r+0x1f4>
 8013b04:	7821      	ldrb	r1, [r4, #0]
 8013b06:	2203      	movs	r2, #3
 8013b08:	4650      	mov	r0, sl
 8013b0a:	f7ec fbf1 	bl	80002f0 <memchr>
 8013b0e:	b138      	cbz	r0, 8013b20 <_svfiprintf_r+0x150>
 8013b10:	9b04      	ldr	r3, [sp, #16]
 8013b12:	eba0 000a 	sub.w	r0, r0, sl
 8013b16:	2240      	movs	r2, #64	@ 0x40
 8013b18:	4082      	lsls	r2, r0
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	3401      	adds	r4, #1
 8013b1e:	9304      	str	r3, [sp, #16]
 8013b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b24:	4824      	ldr	r0, [pc, #144]	@ (8013bb8 <_svfiprintf_r+0x1e8>)
 8013b26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b2a:	2206      	movs	r2, #6
 8013b2c:	f7ec fbe0 	bl	80002f0 <memchr>
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d036      	beq.n	8013ba2 <_svfiprintf_r+0x1d2>
 8013b34:	4b21      	ldr	r3, [pc, #132]	@ (8013bbc <_svfiprintf_r+0x1ec>)
 8013b36:	bb1b      	cbnz	r3, 8013b80 <_svfiprintf_r+0x1b0>
 8013b38:	9b03      	ldr	r3, [sp, #12]
 8013b3a:	3307      	adds	r3, #7
 8013b3c:	f023 0307 	bic.w	r3, r3, #7
 8013b40:	3308      	adds	r3, #8
 8013b42:	9303      	str	r3, [sp, #12]
 8013b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b46:	4433      	add	r3, r6
 8013b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b4a:	e76a      	b.n	8013a22 <_svfiprintf_r+0x52>
 8013b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b50:	460c      	mov	r4, r1
 8013b52:	2001      	movs	r0, #1
 8013b54:	e7a8      	b.n	8013aa8 <_svfiprintf_r+0xd8>
 8013b56:	2300      	movs	r3, #0
 8013b58:	3401      	adds	r4, #1
 8013b5a:	9305      	str	r3, [sp, #20]
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	f04f 0c0a 	mov.w	ip, #10
 8013b62:	4620      	mov	r0, r4
 8013b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b68:	3a30      	subs	r2, #48	@ 0x30
 8013b6a:	2a09      	cmp	r2, #9
 8013b6c:	d903      	bls.n	8013b76 <_svfiprintf_r+0x1a6>
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d0c6      	beq.n	8013b00 <_svfiprintf_r+0x130>
 8013b72:	9105      	str	r1, [sp, #20]
 8013b74:	e7c4      	b.n	8013b00 <_svfiprintf_r+0x130>
 8013b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e7f0      	b.n	8013b62 <_svfiprintf_r+0x192>
 8013b80:	ab03      	add	r3, sp, #12
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	462a      	mov	r2, r5
 8013b86:	4b0e      	ldr	r3, [pc, #56]	@ (8013bc0 <_svfiprintf_r+0x1f0>)
 8013b88:	a904      	add	r1, sp, #16
 8013b8a:	4638      	mov	r0, r7
 8013b8c:	f7fc fc88 	bl	80104a0 <_printf_float>
 8013b90:	1c42      	adds	r2, r0, #1
 8013b92:	4606      	mov	r6, r0
 8013b94:	d1d6      	bne.n	8013b44 <_svfiprintf_r+0x174>
 8013b96:	89ab      	ldrh	r3, [r5, #12]
 8013b98:	065b      	lsls	r3, r3, #25
 8013b9a:	f53f af2d 	bmi.w	80139f8 <_svfiprintf_r+0x28>
 8013b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ba0:	e72c      	b.n	80139fc <_svfiprintf_r+0x2c>
 8013ba2:	ab03      	add	r3, sp, #12
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	462a      	mov	r2, r5
 8013ba8:	4b05      	ldr	r3, [pc, #20]	@ (8013bc0 <_svfiprintf_r+0x1f0>)
 8013baa:	a904      	add	r1, sp, #16
 8013bac:	4638      	mov	r0, r7
 8013bae:	f7fc feff 	bl	80109b0 <_printf_i>
 8013bb2:	e7ed      	b.n	8013b90 <_svfiprintf_r+0x1c0>
 8013bb4:	080156d9 	.word	0x080156d9
 8013bb8:	080156e3 	.word	0x080156e3
 8013bbc:	080104a1 	.word	0x080104a1
 8013bc0:	08013919 	.word	0x08013919
 8013bc4:	080156df 	.word	0x080156df

08013bc8 <__sfputc_r>:
 8013bc8:	6893      	ldr	r3, [r2, #8]
 8013bca:	3b01      	subs	r3, #1
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	b410      	push	{r4}
 8013bd0:	6093      	str	r3, [r2, #8]
 8013bd2:	da08      	bge.n	8013be6 <__sfputc_r+0x1e>
 8013bd4:	6994      	ldr	r4, [r2, #24]
 8013bd6:	42a3      	cmp	r3, r4
 8013bd8:	db01      	blt.n	8013bde <__sfputc_r+0x16>
 8013bda:	290a      	cmp	r1, #10
 8013bdc:	d103      	bne.n	8013be6 <__sfputc_r+0x1e>
 8013bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013be2:	f7fd bbb8 	b.w	8011356 <__swbuf_r>
 8013be6:	6813      	ldr	r3, [r2, #0]
 8013be8:	1c58      	adds	r0, r3, #1
 8013bea:	6010      	str	r0, [r2, #0]
 8013bec:	7019      	strb	r1, [r3, #0]
 8013bee:	4608      	mov	r0, r1
 8013bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bf4:	4770      	bx	lr

08013bf6 <__sfputs_r>:
 8013bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	460f      	mov	r7, r1
 8013bfc:	4614      	mov	r4, r2
 8013bfe:	18d5      	adds	r5, r2, r3
 8013c00:	42ac      	cmp	r4, r5
 8013c02:	d101      	bne.n	8013c08 <__sfputs_r+0x12>
 8013c04:	2000      	movs	r0, #0
 8013c06:	e007      	b.n	8013c18 <__sfputs_r+0x22>
 8013c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c0c:	463a      	mov	r2, r7
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f7ff ffda 	bl	8013bc8 <__sfputc_r>
 8013c14:	1c43      	adds	r3, r0, #1
 8013c16:	d1f3      	bne.n	8013c00 <__sfputs_r+0xa>
 8013c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c1c <_vfiprintf_r>:
 8013c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c20:	460d      	mov	r5, r1
 8013c22:	b09d      	sub	sp, #116	@ 0x74
 8013c24:	4614      	mov	r4, r2
 8013c26:	4698      	mov	r8, r3
 8013c28:	4606      	mov	r6, r0
 8013c2a:	b118      	cbz	r0, 8013c34 <_vfiprintf_r+0x18>
 8013c2c:	6a03      	ldr	r3, [r0, #32]
 8013c2e:	b90b      	cbnz	r3, 8013c34 <_vfiprintf_r+0x18>
 8013c30:	f7fd fa76 	bl	8011120 <__sinit>
 8013c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c36:	07d9      	lsls	r1, r3, #31
 8013c38:	d405      	bmi.n	8013c46 <_vfiprintf_r+0x2a>
 8013c3a:	89ab      	ldrh	r3, [r5, #12]
 8013c3c:	059a      	lsls	r2, r3, #22
 8013c3e:	d402      	bmi.n	8013c46 <_vfiprintf_r+0x2a>
 8013c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c42:	f7fd fd44 	bl	80116ce <__retarget_lock_acquire_recursive>
 8013c46:	89ab      	ldrh	r3, [r5, #12]
 8013c48:	071b      	lsls	r3, r3, #28
 8013c4a:	d501      	bpl.n	8013c50 <_vfiprintf_r+0x34>
 8013c4c:	692b      	ldr	r3, [r5, #16]
 8013c4e:	b99b      	cbnz	r3, 8013c78 <_vfiprintf_r+0x5c>
 8013c50:	4629      	mov	r1, r5
 8013c52:	4630      	mov	r0, r6
 8013c54:	f7fd fbbe 	bl	80113d4 <__swsetup_r>
 8013c58:	b170      	cbz	r0, 8013c78 <_vfiprintf_r+0x5c>
 8013c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c5c:	07dc      	lsls	r4, r3, #31
 8013c5e:	d504      	bpl.n	8013c6a <_vfiprintf_r+0x4e>
 8013c60:	f04f 30ff 	mov.w	r0, #4294967295
 8013c64:	b01d      	add	sp, #116	@ 0x74
 8013c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c6a:	89ab      	ldrh	r3, [r5, #12]
 8013c6c:	0598      	lsls	r0, r3, #22
 8013c6e:	d4f7      	bmi.n	8013c60 <_vfiprintf_r+0x44>
 8013c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c72:	f7fd fd2d 	bl	80116d0 <__retarget_lock_release_recursive>
 8013c76:	e7f3      	b.n	8013c60 <_vfiprintf_r+0x44>
 8013c78:	2300      	movs	r3, #0
 8013c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c7c:	2320      	movs	r3, #32
 8013c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c86:	2330      	movs	r3, #48	@ 0x30
 8013c88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013e38 <_vfiprintf_r+0x21c>
 8013c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c90:	f04f 0901 	mov.w	r9, #1
 8013c94:	4623      	mov	r3, r4
 8013c96:	469a      	mov	sl, r3
 8013c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c9c:	b10a      	cbz	r2, 8013ca2 <_vfiprintf_r+0x86>
 8013c9e:	2a25      	cmp	r2, #37	@ 0x25
 8013ca0:	d1f9      	bne.n	8013c96 <_vfiprintf_r+0x7a>
 8013ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8013ca6:	d00b      	beq.n	8013cc0 <_vfiprintf_r+0xa4>
 8013ca8:	465b      	mov	r3, fp
 8013caa:	4622      	mov	r2, r4
 8013cac:	4629      	mov	r1, r5
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f7ff ffa1 	bl	8013bf6 <__sfputs_r>
 8013cb4:	3001      	adds	r0, #1
 8013cb6:	f000 80a7 	beq.w	8013e08 <_vfiprintf_r+0x1ec>
 8013cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013cbc:	445a      	add	r2, fp
 8013cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8013cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	f000 809f 	beq.w	8013e08 <_vfiprintf_r+0x1ec>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cd4:	f10a 0a01 	add.w	sl, sl, #1
 8013cd8:	9304      	str	r3, [sp, #16]
 8013cda:	9307      	str	r3, [sp, #28]
 8013cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ce2:	4654      	mov	r4, sl
 8013ce4:	2205      	movs	r2, #5
 8013ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cea:	4853      	ldr	r0, [pc, #332]	@ (8013e38 <_vfiprintf_r+0x21c>)
 8013cec:	f7ec fb00 	bl	80002f0 <memchr>
 8013cf0:	9a04      	ldr	r2, [sp, #16]
 8013cf2:	b9d8      	cbnz	r0, 8013d2c <_vfiprintf_r+0x110>
 8013cf4:	06d1      	lsls	r1, r2, #27
 8013cf6:	bf44      	itt	mi
 8013cf8:	2320      	movmi	r3, #32
 8013cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013cfe:	0713      	lsls	r3, r2, #28
 8013d00:	bf44      	itt	mi
 8013d02:	232b      	movmi	r3, #43	@ 0x2b
 8013d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d08:	f89a 3000 	ldrb.w	r3, [sl]
 8013d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d0e:	d015      	beq.n	8013d3c <_vfiprintf_r+0x120>
 8013d10:	9a07      	ldr	r2, [sp, #28]
 8013d12:	4654      	mov	r4, sl
 8013d14:	2000      	movs	r0, #0
 8013d16:	f04f 0c0a 	mov.w	ip, #10
 8013d1a:	4621      	mov	r1, r4
 8013d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d20:	3b30      	subs	r3, #48	@ 0x30
 8013d22:	2b09      	cmp	r3, #9
 8013d24:	d94b      	bls.n	8013dbe <_vfiprintf_r+0x1a2>
 8013d26:	b1b0      	cbz	r0, 8013d56 <_vfiprintf_r+0x13a>
 8013d28:	9207      	str	r2, [sp, #28]
 8013d2a:	e014      	b.n	8013d56 <_vfiprintf_r+0x13a>
 8013d2c:	eba0 0308 	sub.w	r3, r0, r8
 8013d30:	fa09 f303 	lsl.w	r3, r9, r3
 8013d34:	4313      	orrs	r3, r2
 8013d36:	9304      	str	r3, [sp, #16]
 8013d38:	46a2      	mov	sl, r4
 8013d3a:	e7d2      	b.n	8013ce2 <_vfiprintf_r+0xc6>
 8013d3c:	9b03      	ldr	r3, [sp, #12]
 8013d3e:	1d19      	adds	r1, r3, #4
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	9103      	str	r1, [sp, #12]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	bfbb      	ittet	lt
 8013d48:	425b      	neglt	r3, r3
 8013d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8013d4e:	9307      	strge	r3, [sp, #28]
 8013d50:	9307      	strlt	r3, [sp, #28]
 8013d52:	bfb8      	it	lt
 8013d54:	9204      	strlt	r2, [sp, #16]
 8013d56:	7823      	ldrb	r3, [r4, #0]
 8013d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d5a:	d10a      	bne.n	8013d72 <_vfiprintf_r+0x156>
 8013d5c:	7863      	ldrb	r3, [r4, #1]
 8013d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d60:	d132      	bne.n	8013dc8 <_vfiprintf_r+0x1ac>
 8013d62:	9b03      	ldr	r3, [sp, #12]
 8013d64:	1d1a      	adds	r2, r3, #4
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	9203      	str	r2, [sp, #12]
 8013d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013d6e:	3402      	adds	r4, #2
 8013d70:	9305      	str	r3, [sp, #20]
 8013d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013e48 <_vfiprintf_r+0x22c>
 8013d76:	7821      	ldrb	r1, [r4, #0]
 8013d78:	2203      	movs	r2, #3
 8013d7a:	4650      	mov	r0, sl
 8013d7c:	f7ec fab8 	bl	80002f0 <memchr>
 8013d80:	b138      	cbz	r0, 8013d92 <_vfiprintf_r+0x176>
 8013d82:	9b04      	ldr	r3, [sp, #16]
 8013d84:	eba0 000a 	sub.w	r0, r0, sl
 8013d88:	2240      	movs	r2, #64	@ 0x40
 8013d8a:	4082      	lsls	r2, r0
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	3401      	adds	r4, #1
 8013d90:	9304      	str	r3, [sp, #16]
 8013d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d96:	4829      	ldr	r0, [pc, #164]	@ (8013e3c <_vfiprintf_r+0x220>)
 8013d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d9c:	2206      	movs	r2, #6
 8013d9e:	f7ec faa7 	bl	80002f0 <memchr>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	d03f      	beq.n	8013e26 <_vfiprintf_r+0x20a>
 8013da6:	4b26      	ldr	r3, [pc, #152]	@ (8013e40 <_vfiprintf_r+0x224>)
 8013da8:	bb1b      	cbnz	r3, 8013df2 <_vfiprintf_r+0x1d6>
 8013daa:	9b03      	ldr	r3, [sp, #12]
 8013dac:	3307      	adds	r3, #7
 8013dae:	f023 0307 	bic.w	r3, r3, #7
 8013db2:	3308      	adds	r3, #8
 8013db4:	9303      	str	r3, [sp, #12]
 8013db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013db8:	443b      	add	r3, r7
 8013dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dbc:	e76a      	b.n	8013c94 <_vfiprintf_r+0x78>
 8013dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013dc2:	460c      	mov	r4, r1
 8013dc4:	2001      	movs	r0, #1
 8013dc6:	e7a8      	b.n	8013d1a <_vfiprintf_r+0xfe>
 8013dc8:	2300      	movs	r3, #0
 8013dca:	3401      	adds	r4, #1
 8013dcc:	9305      	str	r3, [sp, #20]
 8013dce:	4619      	mov	r1, r3
 8013dd0:	f04f 0c0a 	mov.w	ip, #10
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dda:	3a30      	subs	r2, #48	@ 0x30
 8013ddc:	2a09      	cmp	r2, #9
 8013dde:	d903      	bls.n	8013de8 <_vfiprintf_r+0x1cc>
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d0c6      	beq.n	8013d72 <_vfiprintf_r+0x156>
 8013de4:	9105      	str	r1, [sp, #20]
 8013de6:	e7c4      	b.n	8013d72 <_vfiprintf_r+0x156>
 8013de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dec:	4604      	mov	r4, r0
 8013dee:	2301      	movs	r3, #1
 8013df0:	e7f0      	b.n	8013dd4 <_vfiprintf_r+0x1b8>
 8013df2:	ab03      	add	r3, sp, #12
 8013df4:	9300      	str	r3, [sp, #0]
 8013df6:	462a      	mov	r2, r5
 8013df8:	4b12      	ldr	r3, [pc, #72]	@ (8013e44 <_vfiprintf_r+0x228>)
 8013dfa:	a904      	add	r1, sp, #16
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f7fc fb4f 	bl	80104a0 <_printf_float>
 8013e02:	4607      	mov	r7, r0
 8013e04:	1c78      	adds	r0, r7, #1
 8013e06:	d1d6      	bne.n	8013db6 <_vfiprintf_r+0x19a>
 8013e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013e0a:	07d9      	lsls	r1, r3, #31
 8013e0c:	d405      	bmi.n	8013e1a <_vfiprintf_r+0x1fe>
 8013e0e:	89ab      	ldrh	r3, [r5, #12]
 8013e10:	059a      	lsls	r2, r3, #22
 8013e12:	d402      	bmi.n	8013e1a <_vfiprintf_r+0x1fe>
 8013e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e16:	f7fd fc5b 	bl	80116d0 <__retarget_lock_release_recursive>
 8013e1a:	89ab      	ldrh	r3, [r5, #12]
 8013e1c:	065b      	lsls	r3, r3, #25
 8013e1e:	f53f af1f 	bmi.w	8013c60 <_vfiprintf_r+0x44>
 8013e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e24:	e71e      	b.n	8013c64 <_vfiprintf_r+0x48>
 8013e26:	ab03      	add	r3, sp, #12
 8013e28:	9300      	str	r3, [sp, #0]
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	4b05      	ldr	r3, [pc, #20]	@ (8013e44 <_vfiprintf_r+0x228>)
 8013e2e:	a904      	add	r1, sp, #16
 8013e30:	4630      	mov	r0, r6
 8013e32:	f7fc fdbd 	bl	80109b0 <_printf_i>
 8013e36:	e7e4      	b.n	8013e02 <_vfiprintf_r+0x1e6>
 8013e38:	080156d9 	.word	0x080156d9
 8013e3c:	080156e3 	.word	0x080156e3
 8013e40:	080104a1 	.word	0x080104a1
 8013e44:	08013bf7 	.word	0x08013bf7
 8013e48:	080156df 	.word	0x080156df

08013e4c <__sflush_r>:
 8013e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e54:	0716      	lsls	r6, r2, #28
 8013e56:	4605      	mov	r5, r0
 8013e58:	460c      	mov	r4, r1
 8013e5a:	d454      	bmi.n	8013f06 <__sflush_r+0xba>
 8013e5c:	684b      	ldr	r3, [r1, #4]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	dc02      	bgt.n	8013e68 <__sflush_r+0x1c>
 8013e62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	dd48      	ble.n	8013efa <__sflush_r+0xae>
 8013e68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e6a:	2e00      	cmp	r6, #0
 8013e6c:	d045      	beq.n	8013efa <__sflush_r+0xae>
 8013e6e:	2300      	movs	r3, #0
 8013e70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013e74:	682f      	ldr	r7, [r5, #0]
 8013e76:	6a21      	ldr	r1, [r4, #32]
 8013e78:	602b      	str	r3, [r5, #0]
 8013e7a:	d030      	beq.n	8013ede <__sflush_r+0x92>
 8013e7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	0759      	lsls	r1, r3, #29
 8013e82:	d505      	bpl.n	8013e90 <__sflush_r+0x44>
 8013e84:	6863      	ldr	r3, [r4, #4]
 8013e86:	1ad2      	subs	r2, r2, r3
 8013e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e8a:	b10b      	cbz	r3, 8013e90 <__sflush_r+0x44>
 8013e8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e8e:	1ad2      	subs	r2, r2, r3
 8013e90:	2300      	movs	r3, #0
 8013e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e94:	6a21      	ldr	r1, [r4, #32]
 8013e96:	4628      	mov	r0, r5
 8013e98:	47b0      	blx	r6
 8013e9a:	1c43      	adds	r3, r0, #1
 8013e9c:	89a3      	ldrh	r3, [r4, #12]
 8013e9e:	d106      	bne.n	8013eae <__sflush_r+0x62>
 8013ea0:	6829      	ldr	r1, [r5, #0]
 8013ea2:	291d      	cmp	r1, #29
 8013ea4:	d82b      	bhi.n	8013efe <__sflush_r+0xb2>
 8013ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8013f50 <__sflush_r+0x104>)
 8013ea8:	410a      	asrs	r2, r1
 8013eaa:	07d6      	lsls	r6, r2, #31
 8013eac:	d427      	bmi.n	8013efe <__sflush_r+0xb2>
 8013eae:	2200      	movs	r2, #0
 8013eb0:	6062      	str	r2, [r4, #4]
 8013eb2:	04d9      	lsls	r1, r3, #19
 8013eb4:	6922      	ldr	r2, [r4, #16]
 8013eb6:	6022      	str	r2, [r4, #0]
 8013eb8:	d504      	bpl.n	8013ec4 <__sflush_r+0x78>
 8013eba:	1c42      	adds	r2, r0, #1
 8013ebc:	d101      	bne.n	8013ec2 <__sflush_r+0x76>
 8013ebe:	682b      	ldr	r3, [r5, #0]
 8013ec0:	b903      	cbnz	r3, 8013ec4 <__sflush_r+0x78>
 8013ec2:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ec6:	602f      	str	r7, [r5, #0]
 8013ec8:	b1b9      	cbz	r1, 8013efa <__sflush_r+0xae>
 8013eca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ece:	4299      	cmp	r1, r3
 8013ed0:	d002      	beq.n	8013ed8 <__sflush_r+0x8c>
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	f7fe f9f2 	bl	80122bc <_free_r>
 8013ed8:	2300      	movs	r3, #0
 8013eda:	6363      	str	r3, [r4, #52]	@ 0x34
 8013edc:	e00d      	b.n	8013efa <__sflush_r+0xae>
 8013ede:	2301      	movs	r3, #1
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	47b0      	blx	r6
 8013ee4:	4602      	mov	r2, r0
 8013ee6:	1c50      	adds	r0, r2, #1
 8013ee8:	d1c9      	bne.n	8013e7e <__sflush_r+0x32>
 8013eea:	682b      	ldr	r3, [r5, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d0c6      	beq.n	8013e7e <__sflush_r+0x32>
 8013ef0:	2b1d      	cmp	r3, #29
 8013ef2:	d001      	beq.n	8013ef8 <__sflush_r+0xac>
 8013ef4:	2b16      	cmp	r3, #22
 8013ef6:	d11e      	bne.n	8013f36 <__sflush_r+0xea>
 8013ef8:	602f      	str	r7, [r5, #0]
 8013efa:	2000      	movs	r0, #0
 8013efc:	e022      	b.n	8013f44 <__sflush_r+0xf8>
 8013efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f02:	b21b      	sxth	r3, r3
 8013f04:	e01b      	b.n	8013f3e <__sflush_r+0xf2>
 8013f06:	690f      	ldr	r7, [r1, #16]
 8013f08:	2f00      	cmp	r7, #0
 8013f0a:	d0f6      	beq.n	8013efa <__sflush_r+0xae>
 8013f0c:	0793      	lsls	r3, r2, #30
 8013f0e:	680e      	ldr	r6, [r1, #0]
 8013f10:	bf08      	it	eq
 8013f12:	694b      	ldreq	r3, [r1, #20]
 8013f14:	600f      	str	r7, [r1, #0]
 8013f16:	bf18      	it	ne
 8013f18:	2300      	movne	r3, #0
 8013f1a:	eba6 0807 	sub.w	r8, r6, r7
 8013f1e:	608b      	str	r3, [r1, #8]
 8013f20:	f1b8 0f00 	cmp.w	r8, #0
 8013f24:	dde9      	ble.n	8013efa <__sflush_r+0xae>
 8013f26:	6a21      	ldr	r1, [r4, #32]
 8013f28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013f2a:	4643      	mov	r3, r8
 8013f2c:	463a      	mov	r2, r7
 8013f2e:	4628      	mov	r0, r5
 8013f30:	47b0      	blx	r6
 8013f32:	2800      	cmp	r0, #0
 8013f34:	dc08      	bgt.n	8013f48 <__sflush_r+0xfc>
 8013f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f3e:	81a3      	strh	r3, [r4, #12]
 8013f40:	f04f 30ff 	mov.w	r0, #4294967295
 8013f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f48:	4407      	add	r7, r0
 8013f4a:	eba8 0800 	sub.w	r8, r8, r0
 8013f4e:	e7e7      	b.n	8013f20 <__sflush_r+0xd4>
 8013f50:	dfbffffe 	.word	0xdfbffffe

08013f54 <_fflush_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	690b      	ldr	r3, [r1, #16]
 8013f58:	4605      	mov	r5, r0
 8013f5a:	460c      	mov	r4, r1
 8013f5c:	b913      	cbnz	r3, 8013f64 <_fflush_r+0x10>
 8013f5e:	2500      	movs	r5, #0
 8013f60:	4628      	mov	r0, r5
 8013f62:	bd38      	pop	{r3, r4, r5, pc}
 8013f64:	b118      	cbz	r0, 8013f6e <_fflush_r+0x1a>
 8013f66:	6a03      	ldr	r3, [r0, #32]
 8013f68:	b90b      	cbnz	r3, 8013f6e <_fflush_r+0x1a>
 8013f6a:	f7fd f8d9 	bl	8011120 <__sinit>
 8013f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d0f3      	beq.n	8013f5e <_fflush_r+0xa>
 8013f76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f78:	07d0      	lsls	r0, r2, #31
 8013f7a:	d404      	bmi.n	8013f86 <_fflush_r+0x32>
 8013f7c:	0599      	lsls	r1, r3, #22
 8013f7e:	d402      	bmi.n	8013f86 <_fflush_r+0x32>
 8013f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f82:	f7fd fba4 	bl	80116ce <__retarget_lock_acquire_recursive>
 8013f86:	4628      	mov	r0, r5
 8013f88:	4621      	mov	r1, r4
 8013f8a:	f7ff ff5f 	bl	8013e4c <__sflush_r>
 8013f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f90:	07da      	lsls	r2, r3, #31
 8013f92:	4605      	mov	r5, r0
 8013f94:	d4e4      	bmi.n	8013f60 <_fflush_r+0xc>
 8013f96:	89a3      	ldrh	r3, [r4, #12]
 8013f98:	059b      	lsls	r3, r3, #22
 8013f9a:	d4e1      	bmi.n	8013f60 <_fflush_r+0xc>
 8013f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f9e:	f7fd fb97 	bl	80116d0 <__retarget_lock_release_recursive>
 8013fa2:	e7dd      	b.n	8013f60 <_fflush_r+0xc>

08013fa4 <__swhatbuf_r>:
 8013fa4:	b570      	push	{r4, r5, r6, lr}
 8013fa6:	460c      	mov	r4, r1
 8013fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fac:	2900      	cmp	r1, #0
 8013fae:	b096      	sub	sp, #88	@ 0x58
 8013fb0:	4615      	mov	r5, r2
 8013fb2:	461e      	mov	r6, r3
 8013fb4:	da0d      	bge.n	8013fd2 <__swhatbuf_r+0x2e>
 8013fb6:	89a3      	ldrh	r3, [r4, #12]
 8013fb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013fbc:	f04f 0100 	mov.w	r1, #0
 8013fc0:	bf14      	ite	ne
 8013fc2:	2340      	movne	r3, #64	@ 0x40
 8013fc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013fc8:	2000      	movs	r0, #0
 8013fca:	6031      	str	r1, [r6, #0]
 8013fcc:	602b      	str	r3, [r5, #0]
 8013fce:	b016      	add	sp, #88	@ 0x58
 8013fd0:	bd70      	pop	{r4, r5, r6, pc}
 8013fd2:	466a      	mov	r2, sp
 8013fd4:	f000 f874 	bl	80140c0 <_fstat_r>
 8013fd8:	2800      	cmp	r0, #0
 8013fda:	dbec      	blt.n	8013fb6 <__swhatbuf_r+0x12>
 8013fdc:	9901      	ldr	r1, [sp, #4]
 8013fde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013fe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013fe6:	4259      	negs	r1, r3
 8013fe8:	4159      	adcs	r1, r3
 8013fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013fee:	e7eb      	b.n	8013fc8 <__swhatbuf_r+0x24>

08013ff0 <__smakebuf_r>:
 8013ff0:	898b      	ldrh	r3, [r1, #12]
 8013ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ff4:	079d      	lsls	r5, r3, #30
 8013ff6:	4606      	mov	r6, r0
 8013ff8:	460c      	mov	r4, r1
 8013ffa:	d507      	bpl.n	801400c <__smakebuf_r+0x1c>
 8013ffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014000:	6023      	str	r3, [r4, #0]
 8014002:	6123      	str	r3, [r4, #16]
 8014004:	2301      	movs	r3, #1
 8014006:	6163      	str	r3, [r4, #20]
 8014008:	b003      	add	sp, #12
 801400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801400c:	ab01      	add	r3, sp, #4
 801400e:	466a      	mov	r2, sp
 8014010:	f7ff ffc8 	bl	8013fa4 <__swhatbuf_r>
 8014014:	9f00      	ldr	r7, [sp, #0]
 8014016:	4605      	mov	r5, r0
 8014018:	4639      	mov	r1, r7
 801401a:	4630      	mov	r0, r6
 801401c:	f7fc f924 	bl	8010268 <_malloc_r>
 8014020:	b948      	cbnz	r0, 8014036 <__smakebuf_r+0x46>
 8014022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014026:	059a      	lsls	r2, r3, #22
 8014028:	d4ee      	bmi.n	8014008 <__smakebuf_r+0x18>
 801402a:	f023 0303 	bic.w	r3, r3, #3
 801402e:	f043 0302 	orr.w	r3, r3, #2
 8014032:	81a3      	strh	r3, [r4, #12]
 8014034:	e7e2      	b.n	8013ffc <__smakebuf_r+0xc>
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	6020      	str	r0, [r4, #0]
 801403a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801403e:	81a3      	strh	r3, [r4, #12]
 8014040:	9b01      	ldr	r3, [sp, #4]
 8014042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014046:	b15b      	cbz	r3, 8014060 <__smakebuf_r+0x70>
 8014048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801404c:	4630      	mov	r0, r6
 801404e:	f000 f849 	bl	80140e4 <_isatty_r>
 8014052:	b128      	cbz	r0, 8014060 <__smakebuf_r+0x70>
 8014054:	89a3      	ldrh	r3, [r4, #12]
 8014056:	f023 0303 	bic.w	r3, r3, #3
 801405a:	f043 0301 	orr.w	r3, r3, #1
 801405e:	81a3      	strh	r3, [r4, #12]
 8014060:	89a3      	ldrh	r3, [r4, #12]
 8014062:	431d      	orrs	r5, r3
 8014064:	81a5      	strh	r5, [r4, #12]
 8014066:	e7cf      	b.n	8014008 <__smakebuf_r+0x18>

08014068 <memmove>:
 8014068:	4288      	cmp	r0, r1
 801406a:	b510      	push	{r4, lr}
 801406c:	eb01 0402 	add.w	r4, r1, r2
 8014070:	d902      	bls.n	8014078 <memmove+0x10>
 8014072:	4284      	cmp	r4, r0
 8014074:	4623      	mov	r3, r4
 8014076:	d807      	bhi.n	8014088 <memmove+0x20>
 8014078:	1e43      	subs	r3, r0, #1
 801407a:	42a1      	cmp	r1, r4
 801407c:	d008      	beq.n	8014090 <memmove+0x28>
 801407e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014086:	e7f8      	b.n	801407a <memmove+0x12>
 8014088:	4402      	add	r2, r0
 801408a:	4601      	mov	r1, r0
 801408c:	428a      	cmp	r2, r1
 801408e:	d100      	bne.n	8014092 <memmove+0x2a>
 8014090:	bd10      	pop	{r4, pc}
 8014092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801409a:	e7f7      	b.n	801408c <memmove+0x24>

0801409c <strncmp>:
 801409c:	b510      	push	{r4, lr}
 801409e:	b16a      	cbz	r2, 80140bc <strncmp+0x20>
 80140a0:	3901      	subs	r1, #1
 80140a2:	1884      	adds	r4, r0, r2
 80140a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d103      	bne.n	80140b8 <strncmp+0x1c>
 80140b0:	42a0      	cmp	r0, r4
 80140b2:	d001      	beq.n	80140b8 <strncmp+0x1c>
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	d1f5      	bne.n	80140a4 <strncmp+0x8>
 80140b8:	1ad0      	subs	r0, r2, r3
 80140ba:	bd10      	pop	{r4, pc}
 80140bc:	4610      	mov	r0, r2
 80140be:	e7fc      	b.n	80140ba <strncmp+0x1e>

080140c0 <_fstat_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4d07      	ldr	r5, [pc, #28]	@ (80140e0 <_fstat_r+0x20>)
 80140c4:	2300      	movs	r3, #0
 80140c6:	4604      	mov	r4, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	4611      	mov	r1, r2
 80140cc:	602b      	str	r3, [r5, #0]
 80140ce:	f7ee f987 	bl	80023e0 <_fstat>
 80140d2:	1c43      	adds	r3, r0, #1
 80140d4:	d102      	bne.n	80140dc <_fstat_r+0x1c>
 80140d6:	682b      	ldr	r3, [r5, #0]
 80140d8:	b103      	cbz	r3, 80140dc <_fstat_r+0x1c>
 80140da:	6023      	str	r3, [r4, #0]
 80140dc:	bd38      	pop	{r3, r4, r5, pc}
 80140de:	bf00      	nop
 80140e0:	24004f7c 	.word	0x24004f7c

080140e4 <_isatty_r>:
 80140e4:	b538      	push	{r3, r4, r5, lr}
 80140e6:	4d06      	ldr	r5, [pc, #24]	@ (8014100 <_isatty_r+0x1c>)
 80140e8:	2300      	movs	r3, #0
 80140ea:	4604      	mov	r4, r0
 80140ec:	4608      	mov	r0, r1
 80140ee:	602b      	str	r3, [r5, #0]
 80140f0:	f7ee f986 	bl	8002400 <_isatty>
 80140f4:	1c43      	adds	r3, r0, #1
 80140f6:	d102      	bne.n	80140fe <_isatty_r+0x1a>
 80140f8:	682b      	ldr	r3, [r5, #0]
 80140fa:	b103      	cbz	r3, 80140fe <_isatty_r+0x1a>
 80140fc:	6023      	str	r3, [r4, #0]
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	24004f7c 	.word	0x24004f7c
 8014104:	00000000 	.word	0x00000000

08014108 <nan>:
 8014108:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014110 <nan+0x8>
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop
 8014110:	00000000 	.word	0x00000000
 8014114:	7ff80000 	.word	0x7ff80000

08014118 <_calloc_r>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	fba1 5402 	umull	r5, r4, r1, r2
 801411e:	b93c      	cbnz	r4, 8014130 <_calloc_r+0x18>
 8014120:	4629      	mov	r1, r5
 8014122:	f7fc f8a1 	bl	8010268 <_malloc_r>
 8014126:	4606      	mov	r6, r0
 8014128:	b928      	cbnz	r0, 8014136 <_calloc_r+0x1e>
 801412a:	2600      	movs	r6, #0
 801412c:	4630      	mov	r0, r6
 801412e:	bd70      	pop	{r4, r5, r6, pc}
 8014130:	220c      	movs	r2, #12
 8014132:	6002      	str	r2, [r0, #0]
 8014134:	e7f9      	b.n	801412a <_calloc_r+0x12>
 8014136:	462a      	mov	r2, r5
 8014138:	4621      	mov	r1, r4
 801413a:	f7fd f9a1 	bl	8011480 <memset>
 801413e:	e7f5      	b.n	801412c <_calloc_r+0x14>

08014140 <rshift>:
 8014140:	6903      	ldr	r3, [r0, #16]
 8014142:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801414a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801414e:	f100 0414 	add.w	r4, r0, #20
 8014152:	dd45      	ble.n	80141e0 <rshift+0xa0>
 8014154:	f011 011f 	ands.w	r1, r1, #31
 8014158:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801415c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014160:	d10c      	bne.n	801417c <rshift+0x3c>
 8014162:	f100 0710 	add.w	r7, r0, #16
 8014166:	4629      	mov	r1, r5
 8014168:	42b1      	cmp	r1, r6
 801416a:	d334      	bcc.n	80141d6 <rshift+0x96>
 801416c:	1a9b      	subs	r3, r3, r2
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	1eea      	subs	r2, r5, #3
 8014172:	4296      	cmp	r6, r2
 8014174:	bf38      	it	cc
 8014176:	2300      	movcc	r3, #0
 8014178:	4423      	add	r3, r4
 801417a:	e015      	b.n	80141a8 <rshift+0x68>
 801417c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014180:	f1c1 0820 	rsb	r8, r1, #32
 8014184:	40cf      	lsrs	r7, r1
 8014186:	f105 0e04 	add.w	lr, r5, #4
 801418a:	46a1      	mov	r9, r4
 801418c:	4576      	cmp	r6, lr
 801418e:	46f4      	mov	ip, lr
 8014190:	d815      	bhi.n	80141be <rshift+0x7e>
 8014192:	1a9a      	subs	r2, r3, r2
 8014194:	0092      	lsls	r2, r2, #2
 8014196:	3a04      	subs	r2, #4
 8014198:	3501      	adds	r5, #1
 801419a:	42ae      	cmp	r6, r5
 801419c:	bf38      	it	cc
 801419e:	2200      	movcc	r2, #0
 80141a0:	18a3      	adds	r3, r4, r2
 80141a2:	50a7      	str	r7, [r4, r2]
 80141a4:	b107      	cbz	r7, 80141a8 <rshift+0x68>
 80141a6:	3304      	adds	r3, #4
 80141a8:	1b1a      	subs	r2, r3, r4
 80141aa:	42a3      	cmp	r3, r4
 80141ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141b0:	bf08      	it	eq
 80141b2:	2300      	moveq	r3, #0
 80141b4:	6102      	str	r2, [r0, #16]
 80141b6:	bf08      	it	eq
 80141b8:	6143      	streq	r3, [r0, #20]
 80141ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141be:	f8dc c000 	ldr.w	ip, [ip]
 80141c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80141c6:	ea4c 0707 	orr.w	r7, ip, r7
 80141ca:	f849 7b04 	str.w	r7, [r9], #4
 80141ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80141d2:	40cf      	lsrs	r7, r1
 80141d4:	e7da      	b.n	801418c <rshift+0x4c>
 80141d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80141da:	f847 cf04 	str.w	ip, [r7, #4]!
 80141de:	e7c3      	b.n	8014168 <rshift+0x28>
 80141e0:	4623      	mov	r3, r4
 80141e2:	e7e1      	b.n	80141a8 <rshift+0x68>

080141e4 <__hexdig_fun>:
 80141e4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80141e8:	2b09      	cmp	r3, #9
 80141ea:	d802      	bhi.n	80141f2 <__hexdig_fun+0xe>
 80141ec:	3820      	subs	r0, #32
 80141ee:	b2c0      	uxtb	r0, r0
 80141f0:	4770      	bx	lr
 80141f2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80141f6:	2b05      	cmp	r3, #5
 80141f8:	d801      	bhi.n	80141fe <__hexdig_fun+0x1a>
 80141fa:	3847      	subs	r0, #71	@ 0x47
 80141fc:	e7f7      	b.n	80141ee <__hexdig_fun+0xa>
 80141fe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014202:	2b05      	cmp	r3, #5
 8014204:	d801      	bhi.n	801420a <__hexdig_fun+0x26>
 8014206:	3827      	subs	r0, #39	@ 0x27
 8014208:	e7f1      	b.n	80141ee <__hexdig_fun+0xa>
 801420a:	2000      	movs	r0, #0
 801420c:	4770      	bx	lr
	...

08014210 <__gethex>:
 8014210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014214:	b085      	sub	sp, #20
 8014216:	468a      	mov	sl, r1
 8014218:	9302      	str	r3, [sp, #8]
 801421a:	680b      	ldr	r3, [r1, #0]
 801421c:	9001      	str	r0, [sp, #4]
 801421e:	4690      	mov	r8, r2
 8014220:	1c9c      	adds	r4, r3, #2
 8014222:	46a1      	mov	r9, r4
 8014224:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014228:	2830      	cmp	r0, #48	@ 0x30
 801422a:	d0fa      	beq.n	8014222 <__gethex+0x12>
 801422c:	eba9 0303 	sub.w	r3, r9, r3
 8014230:	f1a3 0b02 	sub.w	fp, r3, #2
 8014234:	f7ff ffd6 	bl	80141e4 <__hexdig_fun>
 8014238:	4605      	mov	r5, r0
 801423a:	2800      	cmp	r0, #0
 801423c:	d168      	bne.n	8014310 <__gethex+0x100>
 801423e:	49a0      	ldr	r1, [pc, #640]	@ (80144c0 <__gethex+0x2b0>)
 8014240:	2201      	movs	r2, #1
 8014242:	4648      	mov	r0, r9
 8014244:	f7ff ff2a 	bl	801409c <strncmp>
 8014248:	4607      	mov	r7, r0
 801424a:	2800      	cmp	r0, #0
 801424c:	d167      	bne.n	801431e <__gethex+0x10e>
 801424e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014252:	4626      	mov	r6, r4
 8014254:	f7ff ffc6 	bl	80141e4 <__hexdig_fun>
 8014258:	2800      	cmp	r0, #0
 801425a:	d062      	beq.n	8014322 <__gethex+0x112>
 801425c:	4623      	mov	r3, r4
 801425e:	7818      	ldrb	r0, [r3, #0]
 8014260:	2830      	cmp	r0, #48	@ 0x30
 8014262:	4699      	mov	r9, r3
 8014264:	f103 0301 	add.w	r3, r3, #1
 8014268:	d0f9      	beq.n	801425e <__gethex+0x4e>
 801426a:	f7ff ffbb 	bl	80141e4 <__hexdig_fun>
 801426e:	fab0 f580 	clz	r5, r0
 8014272:	096d      	lsrs	r5, r5, #5
 8014274:	f04f 0b01 	mov.w	fp, #1
 8014278:	464a      	mov	r2, r9
 801427a:	4616      	mov	r6, r2
 801427c:	3201      	adds	r2, #1
 801427e:	7830      	ldrb	r0, [r6, #0]
 8014280:	f7ff ffb0 	bl	80141e4 <__hexdig_fun>
 8014284:	2800      	cmp	r0, #0
 8014286:	d1f8      	bne.n	801427a <__gethex+0x6a>
 8014288:	498d      	ldr	r1, [pc, #564]	@ (80144c0 <__gethex+0x2b0>)
 801428a:	2201      	movs	r2, #1
 801428c:	4630      	mov	r0, r6
 801428e:	f7ff ff05 	bl	801409c <strncmp>
 8014292:	2800      	cmp	r0, #0
 8014294:	d13f      	bne.n	8014316 <__gethex+0x106>
 8014296:	b944      	cbnz	r4, 80142aa <__gethex+0x9a>
 8014298:	1c74      	adds	r4, r6, #1
 801429a:	4622      	mov	r2, r4
 801429c:	4616      	mov	r6, r2
 801429e:	3201      	adds	r2, #1
 80142a0:	7830      	ldrb	r0, [r6, #0]
 80142a2:	f7ff ff9f 	bl	80141e4 <__hexdig_fun>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d1f8      	bne.n	801429c <__gethex+0x8c>
 80142aa:	1ba4      	subs	r4, r4, r6
 80142ac:	00a7      	lsls	r7, r4, #2
 80142ae:	7833      	ldrb	r3, [r6, #0]
 80142b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80142b4:	2b50      	cmp	r3, #80	@ 0x50
 80142b6:	d13e      	bne.n	8014336 <__gethex+0x126>
 80142b8:	7873      	ldrb	r3, [r6, #1]
 80142ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80142bc:	d033      	beq.n	8014326 <__gethex+0x116>
 80142be:	2b2d      	cmp	r3, #45	@ 0x2d
 80142c0:	d034      	beq.n	801432c <__gethex+0x11c>
 80142c2:	1c71      	adds	r1, r6, #1
 80142c4:	2400      	movs	r4, #0
 80142c6:	7808      	ldrb	r0, [r1, #0]
 80142c8:	f7ff ff8c 	bl	80141e4 <__hexdig_fun>
 80142cc:	1e43      	subs	r3, r0, #1
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	2b18      	cmp	r3, #24
 80142d2:	d830      	bhi.n	8014336 <__gethex+0x126>
 80142d4:	f1a0 0210 	sub.w	r2, r0, #16
 80142d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80142dc:	f7ff ff82 	bl	80141e4 <__hexdig_fun>
 80142e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80142e4:	fa5f fc8c 	uxtb.w	ip, ip
 80142e8:	f1bc 0f18 	cmp.w	ip, #24
 80142ec:	f04f 030a 	mov.w	r3, #10
 80142f0:	d91e      	bls.n	8014330 <__gethex+0x120>
 80142f2:	b104      	cbz	r4, 80142f6 <__gethex+0xe6>
 80142f4:	4252      	negs	r2, r2
 80142f6:	4417      	add	r7, r2
 80142f8:	f8ca 1000 	str.w	r1, [sl]
 80142fc:	b1ed      	cbz	r5, 801433a <__gethex+0x12a>
 80142fe:	f1bb 0f00 	cmp.w	fp, #0
 8014302:	bf0c      	ite	eq
 8014304:	2506      	moveq	r5, #6
 8014306:	2500      	movne	r5, #0
 8014308:	4628      	mov	r0, r5
 801430a:	b005      	add	sp, #20
 801430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014310:	2500      	movs	r5, #0
 8014312:	462c      	mov	r4, r5
 8014314:	e7b0      	b.n	8014278 <__gethex+0x68>
 8014316:	2c00      	cmp	r4, #0
 8014318:	d1c7      	bne.n	80142aa <__gethex+0x9a>
 801431a:	4627      	mov	r7, r4
 801431c:	e7c7      	b.n	80142ae <__gethex+0x9e>
 801431e:	464e      	mov	r6, r9
 8014320:	462f      	mov	r7, r5
 8014322:	2501      	movs	r5, #1
 8014324:	e7c3      	b.n	80142ae <__gethex+0x9e>
 8014326:	2400      	movs	r4, #0
 8014328:	1cb1      	adds	r1, r6, #2
 801432a:	e7cc      	b.n	80142c6 <__gethex+0xb6>
 801432c:	2401      	movs	r4, #1
 801432e:	e7fb      	b.n	8014328 <__gethex+0x118>
 8014330:	fb03 0002 	mla	r0, r3, r2, r0
 8014334:	e7ce      	b.n	80142d4 <__gethex+0xc4>
 8014336:	4631      	mov	r1, r6
 8014338:	e7de      	b.n	80142f8 <__gethex+0xe8>
 801433a:	eba6 0309 	sub.w	r3, r6, r9
 801433e:	3b01      	subs	r3, #1
 8014340:	4629      	mov	r1, r5
 8014342:	2b07      	cmp	r3, #7
 8014344:	dc0a      	bgt.n	801435c <__gethex+0x14c>
 8014346:	9801      	ldr	r0, [sp, #4]
 8014348:	f7fe f802 	bl	8012350 <_Balloc>
 801434c:	4604      	mov	r4, r0
 801434e:	b940      	cbnz	r0, 8014362 <__gethex+0x152>
 8014350:	4b5c      	ldr	r3, [pc, #368]	@ (80144c4 <__gethex+0x2b4>)
 8014352:	4602      	mov	r2, r0
 8014354:	21e4      	movs	r1, #228	@ 0xe4
 8014356:	485c      	ldr	r0, [pc, #368]	@ (80144c8 <__gethex+0x2b8>)
 8014358:	f7fb ff36 	bl	80101c8 <__assert_func>
 801435c:	3101      	adds	r1, #1
 801435e:	105b      	asrs	r3, r3, #1
 8014360:	e7ef      	b.n	8014342 <__gethex+0x132>
 8014362:	f100 0a14 	add.w	sl, r0, #20
 8014366:	2300      	movs	r3, #0
 8014368:	4655      	mov	r5, sl
 801436a:	469b      	mov	fp, r3
 801436c:	45b1      	cmp	r9, r6
 801436e:	d337      	bcc.n	80143e0 <__gethex+0x1d0>
 8014370:	f845 bb04 	str.w	fp, [r5], #4
 8014374:	eba5 050a 	sub.w	r5, r5, sl
 8014378:	10ad      	asrs	r5, r5, #2
 801437a:	6125      	str	r5, [r4, #16]
 801437c:	4658      	mov	r0, fp
 801437e:	f7fe f8d9 	bl	8012534 <__hi0bits>
 8014382:	016d      	lsls	r5, r5, #5
 8014384:	f8d8 6000 	ldr.w	r6, [r8]
 8014388:	1a2d      	subs	r5, r5, r0
 801438a:	42b5      	cmp	r5, r6
 801438c:	dd54      	ble.n	8014438 <__gethex+0x228>
 801438e:	1bad      	subs	r5, r5, r6
 8014390:	4629      	mov	r1, r5
 8014392:	4620      	mov	r0, r4
 8014394:	f7fe fc6a 	bl	8012c6c <__any_on>
 8014398:	4681      	mov	r9, r0
 801439a:	b178      	cbz	r0, 80143bc <__gethex+0x1ac>
 801439c:	1e6b      	subs	r3, r5, #1
 801439e:	1159      	asrs	r1, r3, #5
 80143a0:	f003 021f 	and.w	r2, r3, #31
 80143a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80143a8:	f04f 0901 	mov.w	r9, #1
 80143ac:	fa09 f202 	lsl.w	r2, r9, r2
 80143b0:	420a      	tst	r2, r1
 80143b2:	d003      	beq.n	80143bc <__gethex+0x1ac>
 80143b4:	454b      	cmp	r3, r9
 80143b6:	dc36      	bgt.n	8014426 <__gethex+0x216>
 80143b8:	f04f 0902 	mov.w	r9, #2
 80143bc:	4629      	mov	r1, r5
 80143be:	4620      	mov	r0, r4
 80143c0:	f7ff febe 	bl	8014140 <rshift>
 80143c4:	442f      	add	r7, r5
 80143c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143ca:	42bb      	cmp	r3, r7
 80143cc:	da42      	bge.n	8014454 <__gethex+0x244>
 80143ce:	9801      	ldr	r0, [sp, #4]
 80143d0:	4621      	mov	r1, r4
 80143d2:	f7fd fffd 	bl	80123d0 <_Bfree>
 80143d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80143d8:	2300      	movs	r3, #0
 80143da:	6013      	str	r3, [r2, #0]
 80143dc:	25a3      	movs	r5, #163	@ 0xa3
 80143de:	e793      	b.n	8014308 <__gethex+0xf8>
 80143e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80143e4:	2a2e      	cmp	r2, #46	@ 0x2e
 80143e6:	d012      	beq.n	801440e <__gethex+0x1fe>
 80143e8:	2b20      	cmp	r3, #32
 80143ea:	d104      	bne.n	80143f6 <__gethex+0x1e6>
 80143ec:	f845 bb04 	str.w	fp, [r5], #4
 80143f0:	f04f 0b00 	mov.w	fp, #0
 80143f4:	465b      	mov	r3, fp
 80143f6:	7830      	ldrb	r0, [r6, #0]
 80143f8:	9303      	str	r3, [sp, #12]
 80143fa:	f7ff fef3 	bl	80141e4 <__hexdig_fun>
 80143fe:	9b03      	ldr	r3, [sp, #12]
 8014400:	f000 000f 	and.w	r0, r0, #15
 8014404:	4098      	lsls	r0, r3
 8014406:	ea4b 0b00 	orr.w	fp, fp, r0
 801440a:	3304      	adds	r3, #4
 801440c:	e7ae      	b.n	801436c <__gethex+0x15c>
 801440e:	45b1      	cmp	r9, r6
 8014410:	d8ea      	bhi.n	80143e8 <__gethex+0x1d8>
 8014412:	492b      	ldr	r1, [pc, #172]	@ (80144c0 <__gethex+0x2b0>)
 8014414:	9303      	str	r3, [sp, #12]
 8014416:	2201      	movs	r2, #1
 8014418:	4630      	mov	r0, r6
 801441a:	f7ff fe3f 	bl	801409c <strncmp>
 801441e:	9b03      	ldr	r3, [sp, #12]
 8014420:	2800      	cmp	r0, #0
 8014422:	d1e1      	bne.n	80143e8 <__gethex+0x1d8>
 8014424:	e7a2      	b.n	801436c <__gethex+0x15c>
 8014426:	1ea9      	subs	r1, r5, #2
 8014428:	4620      	mov	r0, r4
 801442a:	f7fe fc1f 	bl	8012c6c <__any_on>
 801442e:	2800      	cmp	r0, #0
 8014430:	d0c2      	beq.n	80143b8 <__gethex+0x1a8>
 8014432:	f04f 0903 	mov.w	r9, #3
 8014436:	e7c1      	b.n	80143bc <__gethex+0x1ac>
 8014438:	da09      	bge.n	801444e <__gethex+0x23e>
 801443a:	1b75      	subs	r5, r6, r5
 801443c:	4621      	mov	r1, r4
 801443e:	9801      	ldr	r0, [sp, #4]
 8014440:	462a      	mov	r2, r5
 8014442:	f7fe f9dd 	bl	8012800 <__lshift>
 8014446:	1b7f      	subs	r7, r7, r5
 8014448:	4604      	mov	r4, r0
 801444a:	f100 0a14 	add.w	sl, r0, #20
 801444e:	f04f 0900 	mov.w	r9, #0
 8014452:	e7b8      	b.n	80143c6 <__gethex+0x1b6>
 8014454:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014458:	42bd      	cmp	r5, r7
 801445a:	dd6f      	ble.n	801453c <__gethex+0x32c>
 801445c:	1bed      	subs	r5, r5, r7
 801445e:	42ae      	cmp	r6, r5
 8014460:	dc34      	bgt.n	80144cc <__gethex+0x2bc>
 8014462:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014466:	2b02      	cmp	r3, #2
 8014468:	d022      	beq.n	80144b0 <__gethex+0x2a0>
 801446a:	2b03      	cmp	r3, #3
 801446c:	d024      	beq.n	80144b8 <__gethex+0x2a8>
 801446e:	2b01      	cmp	r3, #1
 8014470:	d115      	bne.n	801449e <__gethex+0x28e>
 8014472:	42ae      	cmp	r6, r5
 8014474:	d113      	bne.n	801449e <__gethex+0x28e>
 8014476:	2e01      	cmp	r6, #1
 8014478:	d10b      	bne.n	8014492 <__gethex+0x282>
 801447a:	9a02      	ldr	r2, [sp, #8]
 801447c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014480:	6013      	str	r3, [r2, #0]
 8014482:	2301      	movs	r3, #1
 8014484:	6123      	str	r3, [r4, #16]
 8014486:	f8ca 3000 	str.w	r3, [sl]
 801448a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801448c:	2562      	movs	r5, #98	@ 0x62
 801448e:	601c      	str	r4, [r3, #0]
 8014490:	e73a      	b.n	8014308 <__gethex+0xf8>
 8014492:	1e71      	subs	r1, r6, #1
 8014494:	4620      	mov	r0, r4
 8014496:	f7fe fbe9 	bl	8012c6c <__any_on>
 801449a:	2800      	cmp	r0, #0
 801449c:	d1ed      	bne.n	801447a <__gethex+0x26a>
 801449e:	9801      	ldr	r0, [sp, #4]
 80144a0:	4621      	mov	r1, r4
 80144a2:	f7fd ff95 	bl	80123d0 <_Bfree>
 80144a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80144a8:	2300      	movs	r3, #0
 80144aa:	6013      	str	r3, [r2, #0]
 80144ac:	2550      	movs	r5, #80	@ 0x50
 80144ae:	e72b      	b.n	8014308 <__gethex+0xf8>
 80144b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d1f3      	bne.n	801449e <__gethex+0x28e>
 80144b6:	e7e0      	b.n	801447a <__gethex+0x26a>
 80144b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d1dd      	bne.n	801447a <__gethex+0x26a>
 80144be:	e7ee      	b.n	801449e <__gethex+0x28e>
 80144c0:	08015580 	.word	0x08015580
 80144c4:	08015419 	.word	0x08015419
 80144c8:	080156f2 	.word	0x080156f2
 80144cc:	1e6f      	subs	r7, r5, #1
 80144ce:	f1b9 0f00 	cmp.w	r9, #0
 80144d2:	d130      	bne.n	8014536 <__gethex+0x326>
 80144d4:	b127      	cbz	r7, 80144e0 <__gethex+0x2d0>
 80144d6:	4639      	mov	r1, r7
 80144d8:	4620      	mov	r0, r4
 80144da:	f7fe fbc7 	bl	8012c6c <__any_on>
 80144de:	4681      	mov	r9, r0
 80144e0:	117a      	asrs	r2, r7, #5
 80144e2:	2301      	movs	r3, #1
 80144e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80144e8:	f007 071f 	and.w	r7, r7, #31
 80144ec:	40bb      	lsls	r3, r7
 80144ee:	4213      	tst	r3, r2
 80144f0:	4629      	mov	r1, r5
 80144f2:	4620      	mov	r0, r4
 80144f4:	bf18      	it	ne
 80144f6:	f049 0902 	orrne.w	r9, r9, #2
 80144fa:	f7ff fe21 	bl	8014140 <rshift>
 80144fe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014502:	1b76      	subs	r6, r6, r5
 8014504:	2502      	movs	r5, #2
 8014506:	f1b9 0f00 	cmp.w	r9, #0
 801450a:	d047      	beq.n	801459c <__gethex+0x38c>
 801450c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014510:	2b02      	cmp	r3, #2
 8014512:	d015      	beq.n	8014540 <__gethex+0x330>
 8014514:	2b03      	cmp	r3, #3
 8014516:	d017      	beq.n	8014548 <__gethex+0x338>
 8014518:	2b01      	cmp	r3, #1
 801451a:	d109      	bne.n	8014530 <__gethex+0x320>
 801451c:	f019 0f02 	tst.w	r9, #2
 8014520:	d006      	beq.n	8014530 <__gethex+0x320>
 8014522:	f8da 3000 	ldr.w	r3, [sl]
 8014526:	ea49 0903 	orr.w	r9, r9, r3
 801452a:	f019 0f01 	tst.w	r9, #1
 801452e:	d10e      	bne.n	801454e <__gethex+0x33e>
 8014530:	f045 0510 	orr.w	r5, r5, #16
 8014534:	e032      	b.n	801459c <__gethex+0x38c>
 8014536:	f04f 0901 	mov.w	r9, #1
 801453a:	e7d1      	b.n	80144e0 <__gethex+0x2d0>
 801453c:	2501      	movs	r5, #1
 801453e:	e7e2      	b.n	8014506 <__gethex+0x2f6>
 8014540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014542:	f1c3 0301 	rsb	r3, r3, #1
 8014546:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801454a:	2b00      	cmp	r3, #0
 801454c:	d0f0      	beq.n	8014530 <__gethex+0x320>
 801454e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014552:	f104 0314 	add.w	r3, r4, #20
 8014556:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801455a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801455e:	f04f 0c00 	mov.w	ip, #0
 8014562:	4618      	mov	r0, r3
 8014564:	f853 2b04 	ldr.w	r2, [r3], #4
 8014568:	f1b2 3fff 	cmp.w	r2, #4294967295
 801456c:	d01b      	beq.n	80145a6 <__gethex+0x396>
 801456e:	3201      	adds	r2, #1
 8014570:	6002      	str	r2, [r0, #0]
 8014572:	2d02      	cmp	r5, #2
 8014574:	f104 0314 	add.w	r3, r4, #20
 8014578:	d13c      	bne.n	80145f4 <__gethex+0x3e4>
 801457a:	f8d8 2000 	ldr.w	r2, [r8]
 801457e:	3a01      	subs	r2, #1
 8014580:	42b2      	cmp	r2, r6
 8014582:	d109      	bne.n	8014598 <__gethex+0x388>
 8014584:	1171      	asrs	r1, r6, #5
 8014586:	2201      	movs	r2, #1
 8014588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801458c:	f006 061f 	and.w	r6, r6, #31
 8014590:	fa02 f606 	lsl.w	r6, r2, r6
 8014594:	421e      	tst	r6, r3
 8014596:	d13a      	bne.n	801460e <__gethex+0x3fe>
 8014598:	f045 0520 	orr.w	r5, r5, #32
 801459c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801459e:	601c      	str	r4, [r3, #0]
 80145a0:	9b02      	ldr	r3, [sp, #8]
 80145a2:	601f      	str	r7, [r3, #0]
 80145a4:	e6b0      	b.n	8014308 <__gethex+0xf8>
 80145a6:	4299      	cmp	r1, r3
 80145a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80145ac:	d8d9      	bhi.n	8014562 <__gethex+0x352>
 80145ae:	68a3      	ldr	r3, [r4, #8]
 80145b0:	459b      	cmp	fp, r3
 80145b2:	db17      	blt.n	80145e4 <__gethex+0x3d4>
 80145b4:	6861      	ldr	r1, [r4, #4]
 80145b6:	9801      	ldr	r0, [sp, #4]
 80145b8:	3101      	adds	r1, #1
 80145ba:	f7fd fec9 	bl	8012350 <_Balloc>
 80145be:	4681      	mov	r9, r0
 80145c0:	b918      	cbnz	r0, 80145ca <__gethex+0x3ba>
 80145c2:	4b1a      	ldr	r3, [pc, #104]	@ (801462c <__gethex+0x41c>)
 80145c4:	4602      	mov	r2, r0
 80145c6:	2184      	movs	r1, #132	@ 0x84
 80145c8:	e6c5      	b.n	8014356 <__gethex+0x146>
 80145ca:	6922      	ldr	r2, [r4, #16]
 80145cc:	3202      	adds	r2, #2
 80145ce:	f104 010c 	add.w	r1, r4, #12
 80145d2:	0092      	lsls	r2, r2, #2
 80145d4:	300c      	adds	r0, #12
 80145d6:	f7fd f87c 	bl	80116d2 <memcpy>
 80145da:	4621      	mov	r1, r4
 80145dc:	9801      	ldr	r0, [sp, #4]
 80145de:	f7fd fef7 	bl	80123d0 <_Bfree>
 80145e2:	464c      	mov	r4, r9
 80145e4:	6923      	ldr	r3, [r4, #16]
 80145e6:	1c5a      	adds	r2, r3, #1
 80145e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80145ec:	6122      	str	r2, [r4, #16]
 80145ee:	2201      	movs	r2, #1
 80145f0:	615a      	str	r2, [r3, #20]
 80145f2:	e7be      	b.n	8014572 <__gethex+0x362>
 80145f4:	6922      	ldr	r2, [r4, #16]
 80145f6:	455a      	cmp	r2, fp
 80145f8:	dd0b      	ble.n	8014612 <__gethex+0x402>
 80145fa:	2101      	movs	r1, #1
 80145fc:	4620      	mov	r0, r4
 80145fe:	f7ff fd9f 	bl	8014140 <rshift>
 8014602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014606:	3701      	adds	r7, #1
 8014608:	42bb      	cmp	r3, r7
 801460a:	f6ff aee0 	blt.w	80143ce <__gethex+0x1be>
 801460e:	2501      	movs	r5, #1
 8014610:	e7c2      	b.n	8014598 <__gethex+0x388>
 8014612:	f016 061f 	ands.w	r6, r6, #31
 8014616:	d0fa      	beq.n	801460e <__gethex+0x3fe>
 8014618:	4453      	add	r3, sl
 801461a:	f1c6 0620 	rsb	r6, r6, #32
 801461e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014622:	f7fd ff87 	bl	8012534 <__hi0bits>
 8014626:	42b0      	cmp	r0, r6
 8014628:	dbe7      	blt.n	80145fa <__gethex+0x3ea>
 801462a:	e7f0      	b.n	801460e <__gethex+0x3fe>
 801462c:	08015419 	.word	0x08015419

08014630 <L_shift>:
 8014630:	f1c2 0208 	rsb	r2, r2, #8
 8014634:	0092      	lsls	r2, r2, #2
 8014636:	b570      	push	{r4, r5, r6, lr}
 8014638:	f1c2 0620 	rsb	r6, r2, #32
 801463c:	6843      	ldr	r3, [r0, #4]
 801463e:	6804      	ldr	r4, [r0, #0]
 8014640:	fa03 f506 	lsl.w	r5, r3, r6
 8014644:	432c      	orrs	r4, r5
 8014646:	40d3      	lsrs	r3, r2
 8014648:	6004      	str	r4, [r0, #0]
 801464a:	f840 3f04 	str.w	r3, [r0, #4]!
 801464e:	4288      	cmp	r0, r1
 8014650:	d3f4      	bcc.n	801463c <L_shift+0xc>
 8014652:	bd70      	pop	{r4, r5, r6, pc}

08014654 <__match>:
 8014654:	b530      	push	{r4, r5, lr}
 8014656:	6803      	ldr	r3, [r0, #0]
 8014658:	3301      	adds	r3, #1
 801465a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801465e:	b914      	cbnz	r4, 8014666 <__match+0x12>
 8014660:	6003      	str	r3, [r0, #0]
 8014662:	2001      	movs	r0, #1
 8014664:	bd30      	pop	{r4, r5, pc}
 8014666:	f813 2b01 	ldrb.w	r2, [r3], #1
 801466a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801466e:	2d19      	cmp	r5, #25
 8014670:	bf98      	it	ls
 8014672:	3220      	addls	r2, #32
 8014674:	42a2      	cmp	r2, r4
 8014676:	d0f0      	beq.n	801465a <__match+0x6>
 8014678:	2000      	movs	r0, #0
 801467a:	e7f3      	b.n	8014664 <__match+0x10>

0801467c <__hexnan>:
 801467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014680:	680b      	ldr	r3, [r1, #0]
 8014682:	6801      	ldr	r1, [r0, #0]
 8014684:	115e      	asrs	r6, r3, #5
 8014686:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801468a:	f013 031f 	ands.w	r3, r3, #31
 801468e:	b087      	sub	sp, #28
 8014690:	bf18      	it	ne
 8014692:	3604      	addne	r6, #4
 8014694:	2500      	movs	r5, #0
 8014696:	1f37      	subs	r7, r6, #4
 8014698:	4682      	mov	sl, r0
 801469a:	4690      	mov	r8, r2
 801469c:	9301      	str	r3, [sp, #4]
 801469e:	f846 5c04 	str.w	r5, [r6, #-4]
 80146a2:	46b9      	mov	r9, r7
 80146a4:	463c      	mov	r4, r7
 80146a6:	9502      	str	r5, [sp, #8]
 80146a8:	46ab      	mov	fp, r5
 80146aa:	784a      	ldrb	r2, [r1, #1]
 80146ac:	1c4b      	adds	r3, r1, #1
 80146ae:	9303      	str	r3, [sp, #12]
 80146b0:	b342      	cbz	r2, 8014704 <__hexnan+0x88>
 80146b2:	4610      	mov	r0, r2
 80146b4:	9105      	str	r1, [sp, #20]
 80146b6:	9204      	str	r2, [sp, #16]
 80146b8:	f7ff fd94 	bl	80141e4 <__hexdig_fun>
 80146bc:	2800      	cmp	r0, #0
 80146be:	d151      	bne.n	8014764 <__hexnan+0xe8>
 80146c0:	9a04      	ldr	r2, [sp, #16]
 80146c2:	9905      	ldr	r1, [sp, #20]
 80146c4:	2a20      	cmp	r2, #32
 80146c6:	d818      	bhi.n	80146fa <__hexnan+0x7e>
 80146c8:	9b02      	ldr	r3, [sp, #8]
 80146ca:	459b      	cmp	fp, r3
 80146cc:	dd13      	ble.n	80146f6 <__hexnan+0x7a>
 80146ce:	454c      	cmp	r4, r9
 80146d0:	d206      	bcs.n	80146e0 <__hexnan+0x64>
 80146d2:	2d07      	cmp	r5, #7
 80146d4:	dc04      	bgt.n	80146e0 <__hexnan+0x64>
 80146d6:	462a      	mov	r2, r5
 80146d8:	4649      	mov	r1, r9
 80146da:	4620      	mov	r0, r4
 80146dc:	f7ff ffa8 	bl	8014630 <L_shift>
 80146e0:	4544      	cmp	r4, r8
 80146e2:	d952      	bls.n	801478a <__hexnan+0x10e>
 80146e4:	2300      	movs	r3, #0
 80146e6:	f1a4 0904 	sub.w	r9, r4, #4
 80146ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80146ee:	f8cd b008 	str.w	fp, [sp, #8]
 80146f2:	464c      	mov	r4, r9
 80146f4:	461d      	mov	r5, r3
 80146f6:	9903      	ldr	r1, [sp, #12]
 80146f8:	e7d7      	b.n	80146aa <__hexnan+0x2e>
 80146fa:	2a29      	cmp	r2, #41	@ 0x29
 80146fc:	d157      	bne.n	80147ae <__hexnan+0x132>
 80146fe:	3102      	adds	r1, #2
 8014700:	f8ca 1000 	str.w	r1, [sl]
 8014704:	f1bb 0f00 	cmp.w	fp, #0
 8014708:	d051      	beq.n	80147ae <__hexnan+0x132>
 801470a:	454c      	cmp	r4, r9
 801470c:	d206      	bcs.n	801471c <__hexnan+0xa0>
 801470e:	2d07      	cmp	r5, #7
 8014710:	dc04      	bgt.n	801471c <__hexnan+0xa0>
 8014712:	462a      	mov	r2, r5
 8014714:	4649      	mov	r1, r9
 8014716:	4620      	mov	r0, r4
 8014718:	f7ff ff8a 	bl	8014630 <L_shift>
 801471c:	4544      	cmp	r4, r8
 801471e:	d936      	bls.n	801478e <__hexnan+0x112>
 8014720:	f1a8 0204 	sub.w	r2, r8, #4
 8014724:	4623      	mov	r3, r4
 8014726:	f853 1b04 	ldr.w	r1, [r3], #4
 801472a:	f842 1f04 	str.w	r1, [r2, #4]!
 801472e:	429f      	cmp	r7, r3
 8014730:	d2f9      	bcs.n	8014726 <__hexnan+0xaa>
 8014732:	1b3b      	subs	r3, r7, r4
 8014734:	f023 0303 	bic.w	r3, r3, #3
 8014738:	3304      	adds	r3, #4
 801473a:	3401      	adds	r4, #1
 801473c:	3e03      	subs	r6, #3
 801473e:	42b4      	cmp	r4, r6
 8014740:	bf88      	it	hi
 8014742:	2304      	movhi	r3, #4
 8014744:	4443      	add	r3, r8
 8014746:	2200      	movs	r2, #0
 8014748:	f843 2b04 	str.w	r2, [r3], #4
 801474c:	429f      	cmp	r7, r3
 801474e:	d2fb      	bcs.n	8014748 <__hexnan+0xcc>
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	b91b      	cbnz	r3, 801475c <__hexnan+0xe0>
 8014754:	4547      	cmp	r7, r8
 8014756:	d128      	bne.n	80147aa <__hexnan+0x12e>
 8014758:	2301      	movs	r3, #1
 801475a:	603b      	str	r3, [r7, #0]
 801475c:	2005      	movs	r0, #5
 801475e:	b007      	add	sp, #28
 8014760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	3501      	adds	r5, #1
 8014766:	2d08      	cmp	r5, #8
 8014768:	f10b 0b01 	add.w	fp, fp, #1
 801476c:	dd06      	ble.n	801477c <__hexnan+0x100>
 801476e:	4544      	cmp	r4, r8
 8014770:	d9c1      	bls.n	80146f6 <__hexnan+0x7a>
 8014772:	2300      	movs	r3, #0
 8014774:	f844 3c04 	str.w	r3, [r4, #-4]
 8014778:	2501      	movs	r5, #1
 801477a:	3c04      	subs	r4, #4
 801477c:	6822      	ldr	r2, [r4, #0]
 801477e:	f000 000f 	and.w	r0, r0, #15
 8014782:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014786:	6020      	str	r0, [r4, #0]
 8014788:	e7b5      	b.n	80146f6 <__hexnan+0x7a>
 801478a:	2508      	movs	r5, #8
 801478c:	e7b3      	b.n	80146f6 <__hexnan+0x7a>
 801478e:	9b01      	ldr	r3, [sp, #4]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d0dd      	beq.n	8014750 <__hexnan+0xd4>
 8014794:	f1c3 0320 	rsb	r3, r3, #32
 8014798:	f04f 32ff 	mov.w	r2, #4294967295
 801479c:	40da      	lsrs	r2, r3
 801479e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80147a2:	4013      	ands	r3, r2
 80147a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80147a8:	e7d2      	b.n	8014750 <__hexnan+0xd4>
 80147aa:	3f04      	subs	r7, #4
 80147ac:	e7d0      	b.n	8014750 <__hexnan+0xd4>
 80147ae:	2004      	movs	r0, #4
 80147b0:	e7d5      	b.n	801475e <__hexnan+0xe2>

080147b2 <__ascii_mbtowc>:
 80147b2:	b082      	sub	sp, #8
 80147b4:	b901      	cbnz	r1, 80147b8 <__ascii_mbtowc+0x6>
 80147b6:	a901      	add	r1, sp, #4
 80147b8:	b142      	cbz	r2, 80147cc <__ascii_mbtowc+0x1a>
 80147ba:	b14b      	cbz	r3, 80147d0 <__ascii_mbtowc+0x1e>
 80147bc:	7813      	ldrb	r3, [r2, #0]
 80147be:	600b      	str	r3, [r1, #0]
 80147c0:	7812      	ldrb	r2, [r2, #0]
 80147c2:	1e10      	subs	r0, r2, #0
 80147c4:	bf18      	it	ne
 80147c6:	2001      	movne	r0, #1
 80147c8:	b002      	add	sp, #8
 80147ca:	4770      	bx	lr
 80147cc:	4610      	mov	r0, r2
 80147ce:	e7fb      	b.n	80147c8 <__ascii_mbtowc+0x16>
 80147d0:	f06f 0001 	mvn.w	r0, #1
 80147d4:	e7f8      	b.n	80147c8 <__ascii_mbtowc+0x16>

080147d6 <_realloc_r>:
 80147d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147da:	4680      	mov	r8, r0
 80147dc:	4615      	mov	r5, r2
 80147de:	460c      	mov	r4, r1
 80147e0:	b921      	cbnz	r1, 80147ec <_realloc_r+0x16>
 80147e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147e6:	4611      	mov	r1, r2
 80147e8:	f7fb bd3e 	b.w	8010268 <_malloc_r>
 80147ec:	b92a      	cbnz	r2, 80147fa <_realloc_r+0x24>
 80147ee:	f7fd fd65 	bl	80122bc <_free_r>
 80147f2:	2400      	movs	r4, #0
 80147f4:	4620      	mov	r0, r4
 80147f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147fa:	f000 f827 	bl	801484c <_malloc_usable_size_r>
 80147fe:	4285      	cmp	r5, r0
 8014800:	4606      	mov	r6, r0
 8014802:	d802      	bhi.n	801480a <_realloc_r+0x34>
 8014804:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014808:	d8f4      	bhi.n	80147f4 <_realloc_r+0x1e>
 801480a:	4629      	mov	r1, r5
 801480c:	4640      	mov	r0, r8
 801480e:	f7fb fd2b 	bl	8010268 <_malloc_r>
 8014812:	4607      	mov	r7, r0
 8014814:	2800      	cmp	r0, #0
 8014816:	d0ec      	beq.n	80147f2 <_realloc_r+0x1c>
 8014818:	42b5      	cmp	r5, r6
 801481a:	462a      	mov	r2, r5
 801481c:	4621      	mov	r1, r4
 801481e:	bf28      	it	cs
 8014820:	4632      	movcs	r2, r6
 8014822:	f7fc ff56 	bl	80116d2 <memcpy>
 8014826:	4621      	mov	r1, r4
 8014828:	4640      	mov	r0, r8
 801482a:	f7fd fd47 	bl	80122bc <_free_r>
 801482e:	463c      	mov	r4, r7
 8014830:	e7e0      	b.n	80147f4 <_realloc_r+0x1e>

08014832 <__ascii_wctomb>:
 8014832:	4603      	mov	r3, r0
 8014834:	4608      	mov	r0, r1
 8014836:	b141      	cbz	r1, 801484a <__ascii_wctomb+0x18>
 8014838:	2aff      	cmp	r2, #255	@ 0xff
 801483a:	d904      	bls.n	8014846 <__ascii_wctomb+0x14>
 801483c:	228a      	movs	r2, #138	@ 0x8a
 801483e:	601a      	str	r2, [r3, #0]
 8014840:	f04f 30ff 	mov.w	r0, #4294967295
 8014844:	4770      	bx	lr
 8014846:	700a      	strb	r2, [r1, #0]
 8014848:	2001      	movs	r0, #1
 801484a:	4770      	bx	lr

0801484c <_malloc_usable_size_r>:
 801484c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014850:	1f18      	subs	r0, r3, #4
 8014852:	2b00      	cmp	r3, #0
 8014854:	bfbc      	itt	lt
 8014856:	580b      	ldrlt	r3, [r1, r0]
 8014858:	18c0      	addlt	r0, r0, r3
 801485a:	4770      	bx	lr

0801485c <_init>:
 801485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485e:	bf00      	nop
 8014860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014862:	bc08      	pop	{r3}
 8014864:	469e      	mov	lr, r3
 8014866:	4770      	bx	lr

08014868 <_fini>:
 8014868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486a:	bf00      	nop
 801486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801486e:	bc08      	pop	{r3}
 8014870:	469e      	mov	lr, r3
 8014872:	4770      	bx	lr
