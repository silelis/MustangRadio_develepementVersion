
i2c_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800d768  0800d768  0000e768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d828  0800d828  0000e828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d830  0800d830  0000e830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d834  0800d834  0000e834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800d838  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d8c  24000064  0800d89c  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004df0  0800d89c  0000fdf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027757  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049e6  00000000  00000000  000367e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c98  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164d  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033c37  00000000  00000000  0003e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027458  00000000  00000000  000720ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ae14  00000000  00000000  00099544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e4358  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007be4  00000000  00000000  001e439c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001ebf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d750 	.word	0x0800d750

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800d750 	.word	0x0800d750

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fe6d 	bl	80012e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 fe84 	bl	800131c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2106      	movs	r1, #6
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fe65 	bl	80012e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 fe7c 	bl	800131c <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <MX_FREERTOS_Init+0x18>)
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_FREERTOS_Init+0x1c>)
 8000662:	f009 fe29 	bl	800a2b8 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <MX_FREERTOS_Init+0x20>)
 800066a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800d7c4 	.word	0x0800d7c4
 8000674:	0800067d 	.word	0x0800067d
 8000678:	24000080 	.word	0x24000080

0800067c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f009 fea9 	bl	800a3dc <osDelay>
 800068a:	e7fb      	b.n	8000684 <StartDefaultTask+0x8>

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006a8:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 80006de:	2320      	movs	r3, #32
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x88>)
 80006f4:	f003 f8be 	bl	8003874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	2017      	movs	r0, #23
 80006fe:	f000 fdf3 	bl	80012e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000702:	2017      	movs	r0, #23
 8000704:	f000 fe0a 	bl	800131c <HAL_NVIC_EnableIRQ>

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58024400 	.word	0x58024400
 8000714:	58020400 	.word	0x58020400

08000718 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C1_Init+0x74>)
 800074e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_I2C1_Init+0x74>)
 8000756:	f003 fa57 	bl	8003c08 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa68 	bl	8000c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_I2C1_Init+0x74>)
 8000768:	f004 fcf2 	bl	8005150 <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fa5f 	bl	8000c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_I2C1_Init+0x74>)
 800077a:	f004 fd34 	bl	80051e6 <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fa56 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	24000084 	.word	0x24000084
 8000790:	40005400 	.word	0x40005400
 8000794:	20b0ccff 	.word	0x20b0ccff

08000798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0ba      	sub	sp, #232	@ 0xe8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	22c0      	movs	r2, #192	@ 0xc0
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00c fee1 	bl	800d580 <memset>
  if(i2cHandle->Instance==I2C1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a5c      	ldr	r2, [pc, #368]	@ (8000934 <HAL_I2C_MspInit+0x19c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f040 80b1 	bne.w	800092c <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ca:	f04f 0208 	mov.w	r2, #8
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4618      	mov	r0, r3
 80007e2:	f005 fd87 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80007ec:	f000 fa22 	bl	8000c34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f6:	4a50      	ldr	r2, [pc, #320]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000800:	4b4d      	ldr	r3, [pc, #308]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000828:	2304      	movs	r3, #4
 800082a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000832:	4619      	mov	r1, r3
 8000834:	4841      	ldr	r0, [pc, #260]	@ (800093c <HAL_I2C_MspInit+0x1a4>)
 8000836:	f003 f81d 	bl	8003874 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 800083c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000840:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000846:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 800084c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000858:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800085a:	4a3a      	ldr	r2, [pc, #232]	@ (8000944 <HAL_I2C_MspInit+0x1ac>)
 800085c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800085e:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000860:	2221      	movs	r2, #33	@ 0x21
 8000862:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000864:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800086a:	4b35      	ldr	r3, [pc, #212]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000870:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000876:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087e:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000896:	482a      	ldr	r0, [pc, #168]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000898:	f000 fd4e 	bl	8001338 <HAL_DMA_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80008a2:	f000 f9c7 	bl	8000c34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a25      	ldr	r2, [pc, #148]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ac:	4a24      	ldr	r2, [pc, #144]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80008b2:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008b4:	4a25      	ldr	r2, [pc, #148]	@ (800094c <HAL_I2C_MspInit+0x1b4>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80008b8:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008ba:	2222      	movs	r2, #34	@ 0x22
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008c0:	2240      	movs	r2, #64	@ 0x40
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008f0:	4815      	ldr	r0, [pc, #84]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008f2:	f000 fd21 	bl	8001338 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80008fc:	f000 f99a 	bl	8000c34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
 8000906:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2106      	movs	r1, #6
 8000910:	201f      	movs	r0, #31
 8000912:	f000 fce9 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000916:	201f      	movs	r0, #31
 8000918:	f000 fd00 	bl	800131c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2106      	movs	r1, #6
 8000920:	2020      	movs	r0, #32
 8000922:	f000 fce1 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000926:	2020      	movs	r0, #32
 8000928:	f000 fcf8 	bl	800131c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	37e8      	adds	r7, #232	@ 0xe8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	58024400 	.word	0x58024400
 800093c:	58020400 	.word	0x58020400
 8000940:	240000d8 	.word	0x240000d8
 8000944:	40020010 	.word	0x40020010
 8000948:	24000150 	.word	0x24000150
 800094c:	40020028 	.word	0x40020028

08000950 <HAL_GPIO_EXTI_Callback>:
#define I2C_SLAVE_ADDRESS_ESP32					0x3C

static bool esp32I2cInitialised = false;
SemaphoreHandle_t i2c_semap;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	if(esp32I2cInitialised==false){
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <HAL_GPIO_EXTI_Callback+0x2c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	f083 0301 	eor.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <HAL_GPIO_EXTI_Callback+0x1e>
		esp32I2cInitialised=true;
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <HAL_GPIO_EXTI_Callback+0x2c>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
	}
	else{
		//
	}

}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	240001c8 	.word	0x240001c8

08000980 <taskSendFake>:
static TaskHandle_t taskHandle_taskSendFake;
static TaskHandle_t taskHandle_taskSend;
void taskSendFake(void *nothink){
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <taskSendFake+0x60>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	4618      	mov	r0, r3
 8000992:	f00a f9ef 	bl	800ad74 <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000996:	bf00      	nop
 8000998:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <taskSendFake+0x64>)
 800099a:	f003 fb9e 	bl	80040da <HAL_I2C_GetState>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d1f9      	bne.n	8000998 <taskSendFake+0x18>

		  retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32, "Dawid", 6, 2000);
 80009a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2306      	movs	r3, #6
 80009ac:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <taskSendFake+0x68>)
 80009ae:	213c      	movs	r1, #60	@ 0x3c
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <taskSendFake+0x64>)
 80009b2:	f003 f9c5 	bl	8003d40 <HAL_I2C_Master_Transmit>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "FAKE\r\n", 5, 200);
 80009ba:	23c8      	movs	r3, #200	@ 0xc8
 80009bc:	2205      	movs	r2, #5
 80009be:	490b      	ldr	r1, [pc, #44]	@ (80009ec <taskSendFake+0x6c>)
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <taskSendFake+0x70>)
 80009c2:	f007 fd95 	bl	80084f0 <HAL_UART_Transmit>
		  xSemaphoreGive(i2c_semap);
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <taskSendFake+0x60>)
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	2300      	movs	r3, #0
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	f009 ff4e 	bl	800a870 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(1200));
 80009d4:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80009d8:	f00a fe20 	bl	800b61c <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 80009dc:	e7d4      	b.n	8000988 <taskSendFake+0x8>
 80009de:	bf00      	nop
 80009e0:	240001cc 	.word	0x240001cc
 80009e4:	24000084 	.word	0x24000084
 80009e8:	0800d774 	.word	0x0800d774
 80009ec:	0800d77c 	.word	0x0800d77c
 80009f0:	24000224 	.word	0x24000224

080009f4 <taskSend>:
		  }*/
	}
}


void taskSend(void *nothink){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <taskSend+0x60>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00a f9b5 	bl	800ad74 <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000a0a:	bf00      	nop
 8000a0c:	4812      	ldr	r0, [pc, #72]	@ (8000a58 <taskSend+0x64>)
 8000a0e:	f003 fb64 	bl	80040da <HAL_I2C_GetState>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b20      	cmp	r3, #32
 8000a16:	d1f9      	bne.n	8000a0c <taskSend+0x18>
		  retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6, 2000);
 8000a18:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2306      	movs	r3, #6
 8000a20:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <taskSend+0x68>)
 8000a22:	2178      	movs	r1, #120	@ 0x78
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <taskSend+0x64>)
 8000a26:	f003 f98b 	bl	8003d40 <HAL_I2C_Master_Transmit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "Transmition1\r\n", 14, 200);
 8000a2e:	23c8      	movs	r3, #200	@ 0xc8
 8000a30:	220e      	movs	r2, #14
 8000a32:	490b      	ldr	r1, [pc, #44]	@ (8000a60 <taskSend+0x6c>)
 8000a34:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <taskSend+0x70>)
 8000a36:	f007 fd5b 	bl	80084f0 <HAL_UART_Transmit>
		  xSemaphoreGive(i2c_semap);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <taskSend+0x60>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	f009 ff14 	bl	800a870 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(500));
 8000a48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a4c:	f00a fde6 	bl	800b61c <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000a50:	e7d4      	b.n	80009fc <taskSend+0x8>
 8000a52:	bf00      	nop
 8000a54:	240001cc 	.word	0x240001cc
 8000a58:	24000084 	.word	0x24000084
 8000a5c:	0800d774 	.word	0x0800d774
 8000a60:	0800d784 	.word	0x0800d784
 8000a64:	24000224 	.word	0x24000224

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fb27 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f857 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f7ff fe09 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7a:	f7ff fdb1 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 fa37 	bl	8000ef0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a82:	f7ff fe49 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  while(esp32I2cInitialised!=true){
 8000a86:	e005      	b.n	8000a94 <main+0x2c>
	  HAL_UART_Transmit(&huart1, "1\r\n", 3, 200);
 8000a88:	23c8      	movs	r3, #200	@ 0xc8
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	491b      	ldr	r1, [pc, #108]	@ (8000afc <main+0x94>)
 8000a8e:	481c      	ldr	r0, [pc, #112]	@ (8000b00 <main+0x98>)
 8000a90:	f007 fd2e 	bl	80084f0 <HAL_UART_Transmit>
  while(esp32I2cInitialised!=true){
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <main+0x9c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f083 0301 	eor.w	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f2      	bne.n	8000a88 <main+0x20>
  }
  i2c_semap = xSemaphoreCreateBinary();
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f009 fe83 	bl	800a7b2 <xQueueGenericCreate>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a16      	ldr	r2, [pc, #88]	@ (8000b08 <main+0xa0>)
 8000ab0:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(i2c_semap);
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <main+0xa0>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	f009 fed8 	bl	800a870 <xQueueGenericSend>
  xTaskCreate(taskSend, "i2cSend", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSend);
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <main+0xa4>)
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ace:	4910      	ldr	r1, [pc, #64]	@ (8000b10 <main+0xa8>)
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <main+0xac>)
 8000ad2:	f00a fc45 	bl	800b360 <xTaskCreate>
  xTaskCreate(taskSendFake, "i2cSendFake", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSendFake);
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <main+0xb0>)
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	2305      	movs	r3, #5
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ae4:	490d      	ldr	r1, [pc, #52]	@ (8000b1c <main+0xb4>)
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <main+0xb8>)
 8000ae8:	f00a fc3a 	bl	800b360 <xTaskCreate>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aec:	f009 fb9a 	bl	800a224 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000af0:	f7ff fdb2 	bl	8000658 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000af4:	f009 fbba 	bl	800a26c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <main+0x90>
 8000afc:	0800d794 	.word	0x0800d794
 8000b00:	24000224 	.word	0x24000224
 8000b04:	240001c8 	.word	0x240001c8
 8000b08:	240001cc 	.word	0x240001cc
 8000b0c:	240001d4 	.word	0x240001d4
 8000b10:	0800d798 	.word	0x0800d798
 8000b14:	080009f5 	.word	0x080009f5
 8000b18:	240001d0 	.word	0x240001d0
 8000b1c:	0800d7a0 	.word	0x0800d7a0
 8000b20:	08000981 	.word	0x08000981

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b09c      	sub	sp, #112	@ 0x70
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	224c      	movs	r2, #76	@ 0x4c
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00c fd24 	bl	800d580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00c fd1e 	bl	800d580 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <SystemClock_Config+0xe4>)
 8000b46:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f004 fb96 	bl	8005280 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <SystemClock_Config+0xe8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <SystemClock_Config+0xe8>)
 8000b5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <SystemClock_Config+0xe8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b70:	bf00      	nop
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <SystemClock_Config+0xe8>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b7e:	d1f8      	bne.n	8000b72 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b88:	2340      	movs	r3, #64	@ 0x40
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000b98:	2323      	movs	r3, #35	@ 0x23
 8000b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fb9b 	bl	80052f4 <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000bc4:	f000 f836 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	233f      	movs	r3, #63	@ 0x3f
 8000bca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bd8:	2340      	movs	r3, #64	@ 0x40
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bdc:	2340      	movs	r3, #64	@ 0x40
 8000bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2106      	movs	r1, #6
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 ffb2 	bl	8005b58 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000bfa:	f000 f81b 	bl	8000c34 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3770      	adds	r7, #112	@ 0x70
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58024800 	.word	0x58024800

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 fa89 	bl	8001138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010000 	.word	0x40010000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <Error_Handler+0x8>

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_MspInit+0x38>)
 8000c48:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_MspInit+0x38>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_MspInit+0x38>)
 8000c58:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	210f      	movs	r1, #15
 8000c68:	f06f 0001 	mvn.w	r0, #1
 8000c6c:	f000 fb3c 	bl	80012e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	@ 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d844      	bhi.n	8000d14 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	2019      	movs	r0, #25
 8000c90:	f000 fb2a 	bl	80012e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c94:	2019      	movs	r0, #25
 8000c96:	f000 fb41 	bl	800131c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c9a:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <HAL_InitTick+0xb0>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca0:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <HAL_InitTick+0xb4>)
 8000ca2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ca6:	4a22      	ldr	r2, [pc, #136]	@ (8000d30 <HAL_InitTick+0xb4>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <HAL_InitTick+0xb4>)
 8000cb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbe:	f107 020c 	add.w	r2, r7, #12
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fad1 	bl	8006270 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cce:	f005 fab9 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cda:	4a16      	ldr	r2, [pc, #88]	@ (8000d34 <HAL_InitTick+0xb8>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	0c9b      	lsrs	r3, r3, #18
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <HAL_InitTick+0xc0>)
 8000cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000cee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cf4:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cf8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d06:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000d08:	f007 f8d4 	bl	8007eb4 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d107      	bne.n	8000d22 <HAL_InitTick+0xa6>
 8000d12:	e001      	b.n	8000d18 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e005      	b.n	8000d24 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d18:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <HAL_InitTick+0xbc>)
 8000d1a:	f007 f92d 	bl	8007f78 <HAL_TIM_Base_Start_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3738      	adds	r7, #56	@ 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000008 	.word	0x24000008
 8000d30:	58024400 	.word	0x58024400
 8000d34:	431bde83 	.word	0x431bde83
 8000d38:	240001d8 	.word	0x240001d8
 8000d3c:	40010000 	.word	0x40010000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <NMI_Handler+0x4>

08000d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <MemManage_Handler+0x4>

08000d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <DMA1_Stream0_IRQHandler+0x10>)
 8000d7e:	f001 fbcd 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	240000d8 	.word	0x240000d8

08000d8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <DMA1_Stream1_IRQHandler+0x10>)
 8000d92:	f001 fbc3 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000150 	.word	0x24000150

08000da0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000da4:	2020      	movs	r0, #32
 8000da6:	f002 ff15 	bl	8003bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <TIM1_UP_IRQHandler+0x10>)
 8000db6:	f007 f957 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	240001d8 	.word	0x240001d8

08000dc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <I2C1_EV_IRQHandler+0x10>)
 8000dca:	f003 f8d1 	bl	8003f70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	24000084 	.word	0x24000084

08000dd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <I2C1_ER_IRQHandler+0x10>)
 8000dde:	f003 f8e1 	bl	8003fa4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000084 	.word	0x24000084

08000dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <USART1_IRQHandler+0x10>)
 8000df2:	f007 fc0b 	bl	800860c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000224 	.word	0x24000224

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e04:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <SystemInit+0xd0>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a31      	ldr	r2, [pc, #196]	@ (8000ed0 <SystemInit+0xd0>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e14:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <SystemInit+0xd4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d807      	bhi.n	8000e30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <SystemInit+0xd4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 030f 	bic.w	r3, r3, #15
 8000e28:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed4 <SystemInit+0xd4>)
 8000e2a:	f043 0303 	orr.w	r3, r3, #3
 8000e2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e30:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <SystemInit+0xd8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a28      	ldr	r2, [pc, #160]	@ (8000ed8 <SystemInit+0xd8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <SystemInit+0xd8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e42:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <SystemInit+0xd8>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4924      	ldr	r1, [pc, #144]	@ (8000ed8 <SystemInit+0xd8>)
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <SystemInit+0xdc>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <SystemInit+0xd4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <SystemInit+0xd4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 030f 	bic.w	r3, r3, #15
 8000e62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <SystemInit+0xd4>)
 8000e64:	f043 0303 	orr.w	r3, r3, #3
 8000e68:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <SystemInit+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <SystemInit+0xd8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <SystemInit+0xd8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <SystemInit+0xd8>)
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <SystemInit+0xe0>)
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <SystemInit+0xd8>)
 8000e84:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <SystemInit+0xe4>)
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e88:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <SystemInit+0xd8>)
 8000e8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <SystemInit+0xe8>)
 8000e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <SystemInit+0xd8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <SystemInit+0xd8>)
 8000e96:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <SystemInit+0xe8>)
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <SystemInit+0xd8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <SystemInit+0xd8>)
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <SystemInit+0xe8>)
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <SystemInit+0xd8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <SystemInit+0xd8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <SystemInit+0xd8>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <SystemInit+0xd8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <SystemInit+0xec>)
 8000ec0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ec4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	52002000 	.word	0x52002000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ee0:	02020200 	.word	0x02020200
 8000ee4:	01ff0000 	.word	0x01ff0000
 8000ee8:	01010280 	.word	0x01010280
 8000eec:	52004000 	.word	0x52004000

08000ef0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000ef6:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <MX_USART1_UART_Init+0x94>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f38:	4811      	ldr	r0, [pc, #68]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f3a:	f007 fa89 	bl	8008450 <HAL_UART_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f44:	f7ff fe76 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f4c:	f009 f85c 	bl	800a008 <HAL_UARTEx_SetTxFifoThreshold>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f56:	f7ff fe6d 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f5e:	f009 f891 	bl	800a084 <HAL_UARTEx_SetRxFifoThreshold>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f7ff fe64 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_USART1_UART_Init+0x90>)
 8000f6e:	f009 f812 	bl	8009f96 <HAL_UARTEx_DisableFifoMode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f7ff fe5c 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	24000224 	.word	0x24000224
 8000f84:	40011000 	.word	0x40011000

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	22c0      	movs	r2, #192	@ 0xc0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f00c fae9 	bl	800d580 <memset>
  if(uartHandle->Instance==USART1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8001060 <HAL_UART_MspInit+0xd8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d14e      	bne.n	8001056 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fb8:	f04f 0201 	mov.w	r2, #1
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 f990 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fda:	f7ff fe2b 	bl	8000c34 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <HAL_UART_MspInit+0xdc>)
 8000fe0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8001064 <HAL_UART_MspInit+0xdc>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_UART_MspInit+0xdc>)
 8000ff0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_UART_MspInit+0xdc>)
 8000ffe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001002:	4a18      	ldr	r2, [pc, #96]	@ (8001064 <HAL_UART_MspInit+0xdc>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_UART_MspInit+0xdc>)
 800100e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800101a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800101e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001034:	2304      	movs	r3, #4
 8001036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800103e:	4619      	mov	r1, r3
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <HAL_UART_MspInit+0xe0>)
 8001042:	f002 fc17 	bl	8003874 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2107      	movs	r1, #7
 800104a:	2025      	movs	r0, #37	@ 0x25
 800104c:	f000 f94c 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001050:	2025      	movs	r0, #37	@ 0x25
 8001052:	f000 f963 	bl	800131c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	37e8      	adds	r7, #232	@ 0xe8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40011000 	.word	0x40011000
 8001064:	58024400 	.word	0x58024400
 8001068:	58020400 	.word	0x58020400

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001070:	f7ff fec6 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f00c facf 	bl	800d63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fce3 	bl	8000a68 <main>
  bx  lr
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010ac:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80010b0:	0800d838 	.word	0x0800d838
  ldr r2, =_sbss
 80010b4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80010b8:	24004df0 	.word	0x24004df0

080010bc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f000 f903 	bl	80012d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010cc:	f004 fefa 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	4913      	ldr	r1, [pc, #76]	@ (800112c <HAL_Init+0x6c>)
 80010de:	5ccb      	ldrb	r3, [r1, r3]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_Init+0x68>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <HAL_Init+0x6c>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <HAL_Init+0x70>)
 8001102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <HAL_Init+0x74>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff fdb6 	bl	8000c7c <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e002      	b.n	8001120 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800111a:	f7ff fd91 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58024400 	.word	0x58024400
 800112c:	0800d7e8 	.word	0x0800d7e8
 8001130:	24000004 	.word	0x24000004
 8001134:	24000000 	.word	0x24000000

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2400000c 	.word	0x2400000c
 800115c:	240002b8 	.word	0x240002b8

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	240002b8 	.word	0x240002b8

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <__NVIC_SetPriorityGrouping+0x40>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	05fa0000 	.word	0x05fa0000

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff4c 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f6:	f7ff ff63 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 80012fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	6978      	ldr	r0, [r7, #20]
 8001302:	f7ff ffb3 	bl	800126c <NVIC_EncodePriority>
 8001306:	4602      	mov	r2, r0
 8001308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff82 	bl	8001218 <__NVIC_SetPriority>
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff56 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ff0e 	bl	8001160 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e37d      	b.n	8001a4c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a66      	ldr	r2, [pc, #408]	@ (80014f0 <HAL_DMA_Init+0x1b8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d04a      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a65      	ldr	r2, [pc, #404]	@ (80014f4 <HAL_DMA_Init+0x1bc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d045      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a63      	ldr	r2, [pc, #396]	@ (80014f8 <HAL_DMA_Init+0x1c0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d040      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a62      	ldr	r2, [pc, #392]	@ (80014fc <HAL_DMA_Init+0x1c4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d03b      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a60      	ldr	r2, [pc, #384]	@ (8001500 <HAL_DMA_Init+0x1c8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d036      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a5f      	ldr	r2, [pc, #380]	@ (8001504 <HAL_DMA_Init+0x1cc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d031      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a5d      	ldr	r2, [pc, #372]	@ (8001508 <HAL_DMA_Init+0x1d0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02c      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a5c      	ldr	r2, [pc, #368]	@ (800150c <HAL_DMA_Init+0x1d4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d027      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001510 <HAL_DMA_Init+0x1d8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d022      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a59      	ldr	r2, [pc, #356]	@ (8001514 <HAL_DMA_Init+0x1dc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d01d      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <HAL_DMA_Init+0x1e0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d018      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a56      	ldr	r2, [pc, #344]	@ (800151c <HAL_DMA_Init+0x1e4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d013      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a54      	ldr	r2, [pc, #336]	@ (8001520 <HAL_DMA_Init+0x1e8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00e      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a53      	ldr	r2, [pc, #332]	@ (8001524 <HAL_DMA_Init+0x1ec>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d009      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a51      	ldr	r2, [pc, #324]	@ (8001528 <HAL_DMA_Init+0x1f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d004      	beq.n	80013f0 <HAL_DMA_Init+0xb8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a50      	ldr	r2, [pc, #320]	@ (800152c <HAL_DMA_Init+0x1f4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_DMA_Init+0xbc>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_DMA_Init+0xbe>
 80013f4:	2300      	movs	r3, #0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 813c 	beq.w	8001674 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a37      	ldr	r2, [pc, #220]	@ (80014f0 <HAL_DMA_Init+0x1b8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d04a      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a36      	ldr	r2, [pc, #216]	@ (80014f4 <HAL_DMA_Init+0x1bc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d045      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a34      	ldr	r2, [pc, #208]	@ (80014f8 <HAL_DMA_Init+0x1c0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d040      	beq.n	80014ac <HAL_DMA_Init+0x174>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a33      	ldr	r2, [pc, #204]	@ (80014fc <HAL_DMA_Init+0x1c4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d03b      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a31      	ldr	r2, [pc, #196]	@ (8001500 <HAL_DMA_Init+0x1c8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d036      	beq.n	80014ac <HAL_DMA_Init+0x174>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a30      	ldr	r2, [pc, #192]	@ (8001504 <HAL_DMA_Init+0x1cc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d031      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2e      	ldr	r2, [pc, #184]	@ (8001508 <HAL_DMA_Init+0x1d0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02c      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2d      	ldr	r2, [pc, #180]	@ (800150c <HAL_DMA_Init+0x1d4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d027      	beq.n	80014ac <HAL_DMA_Init+0x174>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <HAL_DMA_Init+0x1d8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d022      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <HAL_DMA_Init+0x1dc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d01d      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <HAL_DMA_Init+0x1e0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d018      	beq.n	80014ac <HAL_DMA_Init+0x174>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a27      	ldr	r2, [pc, #156]	@ (800151c <HAL_DMA_Init+0x1e4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d013      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <HAL_DMA_Init+0x1e8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00e      	beq.n	80014ac <HAL_DMA_Init+0x174>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <HAL_DMA_Init+0x1ec>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d009      	beq.n	80014ac <HAL_DMA_Init+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a22      	ldr	r2, [pc, #136]	@ (8001528 <HAL_DMA_Init+0x1f0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d004      	beq.n	80014ac <HAL_DMA_Init+0x174>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a21      	ldr	r2, [pc, #132]	@ (800152c <HAL_DMA_Init+0x1f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d108      	bne.n	80014be <HAL_DMA_Init+0x186>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e007      	b.n	80014ce <HAL_DMA_Init+0x196>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014ce:	e02f      	b.n	8001530 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d0:	f7ff fe46 	bl	8001160 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d928      	bls.n	8001530 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e2ad      	b.n	8001a4c <HAL_DMA_Init+0x714>
 80014f0:	40020010 	.word	0x40020010
 80014f4:	40020028 	.word	0x40020028
 80014f8:	40020040 	.word	0x40020040
 80014fc:	40020058 	.word	0x40020058
 8001500:	40020070 	.word	0x40020070
 8001504:	40020088 	.word	0x40020088
 8001508:	400200a0 	.word	0x400200a0
 800150c:	400200b8 	.word	0x400200b8
 8001510:	40020410 	.word	0x40020410
 8001514:	40020428 	.word	0x40020428
 8001518:	40020440 	.word	0x40020440
 800151c:	40020458 	.word	0x40020458
 8001520:	40020470 	.word	0x40020470
 8001524:	40020488 	.word	0x40020488
 8001528:	400204a0 	.word	0x400204a0
 800152c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1c8      	bne.n	80014d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4b73      	ldr	r3, [pc, #460]	@ (8001718 <HAL_DMA_Init+0x3e0>)
 800154a:	4013      	ands	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001556:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001562:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	2b04      	cmp	r3, #4
 8001582:	d107      	bne.n	8001594 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4313      	orrs	r3, r2
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4313      	orrs	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b28      	cmp	r3, #40	@ 0x28
 800159a:	d903      	bls.n	80015a4 <HAL_DMA_Init+0x26c>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015a2:	d91f      	bls.n	80015e4 <HAL_DMA_Init+0x2ac>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80015aa:	d903      	bls.n	80015b4 <HAL_DMA_Init+0x27c>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b42      	cmp	r3, #66	@ 0x42
 80015b2:	d917      	bls.n	80015e4 <HAL_DMA_Init+0x2ac>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b46      	cmp	r3, #70	@ 0x46
 80015ba:	d903      	bls.n	80015c4 <HAL_DMA_Init+0x28c>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b48      	cmp	r3, #72	@ 0x48
 80015c2:	d90f      	bls.n	80015e4 <HAL_DMA_Init+0x2ac>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80015ca:	d903      	bls.n	80015d4 <HAL_DMA_Init+0x29c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b52      	cmp	r3, #82	@ 0x52
 80015d2:	d907      	bls.n	80015e4 <HAL_DMA_Init+0x2ac>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b73      	cmp	r3, #115	@ 0x73
 80015da:	d905      	bls.n	80015e8 <HAL_DMA_Init+0x2b0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b77      	cmp	r3, #119	@ 0x77
 80015e2:	d801      	bhi.n	80015e8 <HAL_DMA_Init+0x2b0>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_DMA_Init+0x2b2>
 80015e8:	2300      	movs	r3, #0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f023 0307 	bic.w	r3, r3, #7
 800160c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	2b04      	cmp	r3, #4
 800161e:	d117      	bne.n	8001650 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4313      	orrs	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00e      	beq.n	8001650 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 ff94 	bl	8003560 <DMA_CheckFifoParam>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2240      	movs	r2, #64	@ 0x40
 8001642:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e1fd      	b.n	8001a4c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f001 fecf 	bl	80033fc <DMA_CalcBaseAndBitshift>
 800165e:	4603      	mov	r3, r0
 8001660:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	223f      	movs	r2, #63	@ 0x3f
 800166c:	409a      	lsls	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	e0fd      	b.n	8001870 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a28      	ldr	r2, [pc, #160]	@ (800171c <HAL_DMA_Init+0x3e4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d04a      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a27      	ldr	r2, [pc, #156]	@ (8001720 <HAL_DMA_Init+0x3e8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d045      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <HAL_DMA_Init+0x3ec>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d040      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a24      	ldr	r2, [pc, #144]	@ (8001728 <HAL_DMA_Init+0x3f0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d03b      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a22      	ldr	r2, [pc, #136]	@ (800172c <HAL_DMA_Init+0x3f4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d036      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <HAL_DMA_Init+0x3f8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d031      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <HAL_DMA_Init+0x3fc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02c      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_DMA_Init+0x400>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d027      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <HAL_DMA_Init+0x404>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d022      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <HAL_DMA_Init+0x408>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d01d      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <HAL_DMA_Init+0x40c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d018      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a18      	ldr	r2, [pc, #96]	@ (8001748 <HAL_DMA_Init+0x410>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a16      	ldr	r2, [pc, #88]	@ (800174c <HAL_DMA_Init+0x414>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00e      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_DMA_Init+0x418>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d009      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <HAL_DMA_Init+0x41c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d004      	beq.n	8001714 <HAL_DMA_Init+0x3dc>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <HAL_DMA_Init+0x420>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d123      	bne.n	800175c <HAL_DMA_Init+0x424>
 8001714:	2301      	movs	r3, #1
 8001716:	e022      	b.n	800175e <HAL_DMA_Init+0x426>
 8001718:	fe10803f 	.word	0xfe10803f
 800171c:	48022c08 	.word	0x48022c08
 8001720:	48022c1c 	.word	0x48022c1c
 8001724:	48022c30 	.word	0x48022c30
 8001728:	48022c44 	.word	0x48022c44
 800172c:	48022c58 	.word	0x48022c58
 8001730:	48022c6c 	.word	0x48022c6c
 8001734:	48022c80 	.word	0x48022c80
 8001738:	48022c94 	.word	0x48022c94
 800173c:	58025408 	.word	0x58025408
 8001740:	5802541c 	.word	0x5802541c
 8001744:	58025430 	.word	0x58025430
 8001748:	58025444 	.word	0x58025444
 800174c:	58025458 	.word	0x58025458
 8001750:	5802546c 	.word	0x5802546c
 8001754:	58025480 	.word	0x58025480
 8001758:	58025494 	.word	0x58025494
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d07d      	beq.n	800185e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7f      	ldr	r2, [pc, #508]	@ (8001964 <HAL_DMA_Init+0x62c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d021      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a7d      	ldr	r2, [pc, #500]	@ (8001968 <HAL_DMA_Init+0x630>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01c      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7c      	ldr	r2, [pc, #496]	@ (800196c <HAL_DMA_Init+0x634>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d017      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a7a      	ldr	r2, [pc, #488]	@ (8001970 <HAL_DMA_Init+0x638>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d012      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a79      	ldr	r2, [pc, #484]	@ (8001974 <HAL_DMA_Init+0x63c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a77      	ldr	r2, [pc, #476]	@ (8001978 <HAL_DMA_Init+0x640>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d008      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a76      	ldr	r2, [pc, #472]	@ (800197c <HAL_DMA_Init+0x644>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d003      	beq.n	80017b0 <HAL_DMA_Init+0x478>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a74      	ldr	r2, [pc, #464]	@ (8001980 <HAL_DMA_Init+0x648>)
 80017ae:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001984 <HAL_DMA_Init+0x64c>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b40      	cmp	r3, #64	@ 0x40
 80017d6:	d008      	beq.n	80017ea <HAL_DMA_Init+0x4b2>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b80      	cmp	r3, #128	@ 0x80
 80017de:	d102      	bne.n	80017e6 <HAL_DMA_Init+0x4ae>
 80017e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017e4:	e002      	b.n	80017ec <HAL_DMA_Init+0x4b4>
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_DMA_Init+0x4b4>
 80017ea:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68d2      	ldr	r2, [r2, #12]
 80017f0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017f2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001802:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800180a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001812:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800181a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b55      	ldr	r3, [pc, #340]	@ (8001988 <HAL_DMA_Init+0x650>)
 8001832:	4413      	add	r3, r2
 8001834:	4a55      	ldr	r2, [pc, #340]	@ (800198c <HAL_DMA_Init+0x654>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	009a      	lsls	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f001 fdda 	bl	80033fc <DMA_CalcBaseAndBitshift>
 8001848:	4603      	mov	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2201      	movs	r2, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	e008      	b.n	8001870 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2240      	movs	r2, #64	@ 0x40
 8001862:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2203      	movs	r2, #3
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0ed      	b.n	8001a4c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a46      	ldr	r2, [pc, #280]	@ (8001990 <HAL_DMA_Init+0x658>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d072      	beq.n	8001960 <HAL_DMA_Init+0x628>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a45      	ldr	r2, [pc, #276]	@ (8001994 <HAL_DMA_Init+0x65c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d06d      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a43      	ldr	r2, [pc, #268]	@ (8001998 <HAL_DMA_Init+0x660>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d068      	beq.n	8001960 <HAL_DMA_Init+0x628>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a42      	ldr	r2, [pc, #264]	@ (800199c <HAL_DMA_Init+0x664>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d063      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a40      	ldr	r2, [pc, #256]	@ (80019a0 <HAL_DMA_Init+0x668>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d05e      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	@ (80019a4 <HAL_DMA_Init+0x66c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d059      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3d      	ldr	r2, [pc, #244]	@ (80019a8 <HAL_DMA_Init+0x670>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d054      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a3c      	ldr	r2, [pc, #240]	@ (80019ac <HAL_DMA_Init+0x674>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04f      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3a      	ldr	r2, [pc, #232]	@ (80019b0 <HAL_DMA_Init+0x678>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d04a      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a39      	ldr	r2, [pc, #228]	@ (80019b4 <HAL_DMA_Init+0x67c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d045      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a37      	ldr	r2, [pc, #220]	@ (80019b8 <HAL_DMA_Init+0x680>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d040      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a36      	ldr	r2, [pc, #216]	@ (80019bc <HAL_DMA_Init+0x684>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d03b      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a34      	ldr	r2, [pc, #208]	@ (80019c0 <HAL_DMA_Init+0x688>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d036      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a33      	ldr	r2, [pc, #204]	@ (80019c4 <HAL_DMA_Init+0x68c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d031      	beq.n	8001960 <HAL_DMA_Init+0x628>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a31      	ldr	r2, [pc, #196]	@ (80019c8 <HAL_DMA_Init+0x690>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d02c      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a30      	ldr	r2, [pc, #192]	@ (80019cc <HAL_DMA_Init+0x694>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d027      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a13      	ldr	r2, [pc, #76]	@ (8001964 <HAL_DMA_Init+0x62c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d022      	beq.n	8001960 <HAL_DMA_Init+0x628>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <HAL_DMA_Init+0x630>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d01d      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a10      	ldr	r2, [pc, #64]	@ (800196c <HAL_DMA_Init+0x634>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d018      	beq.n	8001960 <HAL_DMA_Init+0x628>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_DMA_Init+0x638>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_DMA_Init+0x63c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00e      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <HAL_DMA_Init+0x640>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d009      	beq.n	8001960 <HAL_DMA_Init+0x628>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_DMA_Init+0x644>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_DMA_Init+0x628>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <HAL_DMA_Init+0x648>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d137      	bne.n	80019d0 <HAL_DMA_Init+0x698>
 8001960:	2301      	movs	r3, #1
 8001962:	e036      	b.n	80019d2 <HAL_DMA_Init+0x69a>
 8001964:	58025408 	.word	0x58025408
 8001968:	5802541c 	.word	0x5802541c
 800196c:	58025430 	.word	0x58025430
 8001970:	58025444 	.word	0x58025444
 8001974:	58025458 	.word	0x58025458
 8001978:	5802546c 	.word	0x5802546c
 800197c:	58025480 	.word	0x58025480
 8001980:	58025494 	.word	0x58025494
 8001984:	fffe000f 	.word	0xfffe000f
 8001988:	a7fdabf8 	.word	0xa7fdabf8
 800198c:	cccccccd 	.word	0xcccccccd
 8001990:	40020010 	.word	0x40020010
 8001994:	40020028 	.word	0x40020028
 8001998:	40020040 	.word	0x40020040
 800199c:	40020058 	.word	0x40020058
 80019a0:	40020070 	.word	0x40020070
 80019a4:	40020088 	.word	0x40020088
 80019a8:	400200a0 	.word	0x400200a0
 80019ac:	400200b8 	.word	0x400200b8
 80019b0:	40020410 	.word	0x40020410
 80019b4:	40020428 	.word	0x40020428
 80019b8:	40020440 	.word	0x40020440
 80019bc:	40020458 	.word	0x40020458
 80019c0:	40020470 	.word	0x40020470
 80019c4:	40020488 	.word	0x40020488
 80019c8:	400204a0 	.word	0x400204a0
 80019cc:	400204b8 	.word	0x400204b8
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d032      	beq.n	8001a3c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f001 fe3e 	bl	8003658 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b80      	cmp	r3, #128	@ 0x80
 80019e2:	d102      	bne.n	80019ea <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019fe:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_DMA_Init+0x6f2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d80c      	bhi.n	8001a2a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f001 febb 	bl	800378c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	e008      	b.n	8001a3c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff fb80 	bl	8001160 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e2dc      	b.n	8002026 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2280      	movs	r2, #128	@ 0x80
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e2cd      	b.n	8002026 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a76      	ldr	r2, [pc, #472]	@ (8001c68 <HAL_DMA_Abort+0x214>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d04a      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a74      	ldr	r2, [pc, #464]	@ (8001c6c <HAL_DMA_Abort+0x218>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d045      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a73      	ldr	r2, [pc, #460]	@ (8001c70 <HAL_DMA_Abort+0x21c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d040      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a71      	ldr	r2, [pc, #452]	@ (8001c74 <HAL_DMA_Abort+0x220>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d03b      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a70      	ldr	r2, [pc, #448]	@ (8001c78 <HAL_DMA_Abort+0x224>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d036      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c7c <HAL_DMA_Abort+0x228>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6d      	ldr	r2, [pc, #436]	@ (8001c80 <HAL_DMA_Abort+0x22c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d02c      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8001c84 <HAL_DMA_Abort+0x230>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d027      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6a      	ldr	r2, [pc, #424]	@ (8001c88 <HAL_DMA_Abort+0x234>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a68      	ldr	r2, [pc, #416]	@ (8001c8c <HAL_DMA_Abort+0x238>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a67      	ldr	r2, [pc, #412]	@ (8001c90 <HAL_DMA_Abort+0x23c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d018      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a65      	ldr	r2, [pc, #404]	@ (8001c94 <HAL_DMA_Abort+0x240>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a64      	ldr	r2, [pc, #400]	@ (8001c98 <HAL_DMA_Abort+0x244>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a62      	ldr	r2, [pc, #392]	@ (8001c9c <HAL_DMA_Abort+0x248>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a61      	ldr	r2, [pc, #388]	@ (8001ca0 <HAL_DMA_Abort+0x24c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Abort+0xd6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca4 <HAL_DMA_Abort+0x250>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_DMA_Abort+0xda>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_DMA_Abort+0xdc>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 021e 	bic.w	r2, r2, #30
 8001b42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e00a      	b.n	8001b72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 020e 	bic.w	r2, r2, #14
 8001b6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a3c      	ldr	r2, [pc, #240]	@ (8001c68 <HAL_DMA_Abort+0x214>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d072      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a3a      	ldr	r2, [pc, #232]	@ (8001c6c <HAL_DMA_Abort+0x218>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d06d      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a39      	ldr	r2, [pc, #228]	@ (8001c70 <HAL_DMA_Abort+0x21c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d068      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a37      	ldr	r2, [pc, #220]	@ (8001c74 <HAL_DMA_Abort+0x220>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d063      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a36      	ldr	r2, [pc, #216]	@ (8001c78 <HAL_DMA_Abort+0x224>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d05e      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a34      	ldr	r2, [pc, #208]	@ (8001c7c <HAL_DMA_Abort+0x228>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d059      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a33      	ldr	r2, [pc, #204]	@ (8001c80 <HAL_DMA_Abort+0x22c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d054      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a31      	ldr	r2, [pc, #196]	@ (8001c84 <HAL_DMA_Abort+0x230>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d04f      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <HAL_DMA_Abort+0x234>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d04a      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c8c <HAL_DMA_Abort+0x238>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d045      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2d      	ldr	r2, [pc, #180]	@ (8001c90 <HAL_DMA_Abort+0x23c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d040      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c94 <HAL_DMA_Abort+0x240>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d03b      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2a      	ldr	r2, [pc, #168]	@ (8001c98 <HAL_DMA_Abort+0x244>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d036      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <HAL_DMA_Abort+0x248>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d031      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a27      	ldr	r2, [pc, #156]	@ (8001ca0 <HAL_DMA_Abort+0x24c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d02c      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a25      	ldr	r2, [pc, #148]	@ (8001ca4 <HAL_DMA_Abort+0x250>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d027      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a24      	ldr	r2, [pc, #144]	@ (8001ca8 <HAL_DMA_Abort+0x254>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a22      	ldr	r2, [pc, #136]	@ (8001cac <HAL_DMA_Abort+0x258>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_DMA_Abort+0x25c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_DMA_Abort+0x260>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <HAL_DMA_Abort+0x264>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_DMA_Abort+0x268>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <HAL_DMA_Abort+0x26c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Abort+0x20e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_DMA_Abort+0x270>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d132      	bne.n	8001cc8 <HAL_DMA_Abort+0x274>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e031      	b.n	8001cca <HAL_DMA_Abort+0x276>
 8001c66:	bf00      	nop
 8001c68:	40020010 	.word	0x40020010
 8001c6c:	40020028 	.word	0x40020028
 8001c70:	40020040 	.word	0x40020040
 8001c74:	40020058 	.word	0x40020058
 8001c78:	40020070 	.word	0x40020070
 8001c7c:	40020088 	.word	0x40020088
 8001c80:	400200a0 	.word	0x400200a0
 8001c84:	400200b8 	.word	0x400200b8
 8001c88:	40020410 	.word	0x40020410
 8001c8c:	40020428 	.word	0x40020428
 8001c90:	40020440 	.word	0x40020440
 8001c94:	40020458 	.word	0x40020458
 8001c98:	40020470 	.word	0x40020470
 8001c9c:	40020488 	.word	0x40020488
 8001ca0:	400204a0 	.word	0x400204a0
 8001ca4:	400204b8 	.word	0x400204b8
 8001ca8:	58025408 	.word	0x58025408
 8001cac:	5802541c 	.word	0x5802541c
 8001cb0:	58025430 	.word	0x58025430
 8001cb4:	58025444 	.word	0x58025444
 8001cb8:	58025458 	.word	0x58025458
 8001cbc:	5802546c 	.word	0x5802546c
 8001cc0:	58025480 	.word	0x58025480
 8001cc4:	58025494 	.word	0x58025494
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6d      	ldr	r2, [pc, #436]	@ (8001e98 <HAL_DMA_Abort+0x444>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04a      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6b      	ldr	r2, [pc, #428]	@ (8001e9c <HAL_DMA_Abort+0x448>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d045      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea0 <HAL_DMA_Abort+0x44c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d040      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a68      	ldr	r2, [pc, #416]	@ (8001ea4 <HAL_DMA_Abort+0x450>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d03b      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a67      	ldr	r2, [pc, #412]	@ (8001ea8 <HAL_DMA_Abort+0x454>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d036      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a65      	ldr	r2, [pc, #404]	@ (8001eac <HAL_DMA_Abort+0x458>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d031      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a64      	ldr	r2, [pc, #400]	@ (8001eb0 <HAL_DMA_Abort+0x45c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d02c      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a62      	ldr	r2, [pc, #392]	@ (8001eb4 <HAL_DMA_Abort+0x460>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d027      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a61      	ldr	r2, [pc, #388]	@ (8001eb8 <HAL_DMA_Abort+0x464>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8001ebc <HAL_DMA_Abort+0x468>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01d      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5e      	ldr	r2, [pc, #376]	@ (8001ec0 <HAL_DMA_Abort+0x46c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d018      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec4 <HAL_DMA_Abort+0x470>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ec8 <HAL_DMA_Abort+0x474>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a59      	ldr	r2, [pc, #356]	@ (8001ecc <HAL_DMA_Abort+0x478>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a58      	ldr	r2, [pc, #352]	@ (8001ed0 <HAL_DMA_Abort+0x47c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_DMA_Abort+0x32a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a56      	ldr	r2, [pc, #344]	@ (8001ed4 <HAL_DMA_Abort+0x480>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d108      	bne.n	8001d90 <HAL_DMA_Abort+0x33c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e007      	b.n	8001da0 <HAL_DMA_Abort+0x34c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001da0:	e013      	b.n	8001dca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da2:	f7ff f9dd 	bl	8001160 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d90c      	bls.n	8001dca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2203      	movs	r2, #3
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e12d      	b.n	8002026 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e5      	bne.n	8001da2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_DMA_Abort+0x444>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d04a      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2d      	ldr	r2, [pc, #180]	@ (8001e9c <HAL_DMA_Abort+0x448>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d045      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea0 <HAL_DMA_Abort+0x44c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d040      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea4 <HAL_DMA_Abort+0x450>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d03b      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a29      	ldr	r2, [pc, #164]	@ (8001ea8 <HAL_DMA_Abort+0x454>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d036      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a27      	ldr	r2, [pc, #156]	@ (8001eac <HAL_DMA_Abort+0x458>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d031      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_DMA_Abort+0x45c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d02c      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a24      	ldr	r2, [pc, #144]	@ (8001eb4 <HAL_DMA_Abort+0x460>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d027      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <HAL_DMA_Abort+0x464>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <HAL_DMA_Abort+0x468>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01d      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a20      	ldr	r2, [pc, #128]	@ (8001ec0 <HAL_DMA_Abort+0x46c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_DMA_Abort+0x470>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <HAL_DMA_Abort+0x474>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00e      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <HAL_DMA_Abort+0x478>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d009      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed0 <HAL_DMA_Abort+0x47c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d004      	beq.n	8001e76 <HAL_DMA_Abort+0x422>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_DMA_Abort+0x480>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_DMA_Abort+0x426>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_DMA_Abort+0x428>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02b      	beq.n	8001ed8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	223f      	movs	r2, #63	@ 0x3f
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e02a      	b.n	8001eee <HAL_DMA_Abort+0x49a>
 8001e98:	40020010 	.word	0x40020010
 8001e9c:	40020028 	.word	0x40020028
 8001ea0:	40020040 	.word	0x40020040
 8001ea4:	40020058 	.word	0x40020058
 8001ea8:	40020070 	.word	0x40020070
 8001eac:	40020088 	.word	0x40020088
 8001eb0:	400200a0 	.word	0x400200a0
 8001eb4:	400200b8 	.word	0x400200b8
 8001eb8:	40020410 	.word	0x40020410
 8001ebc:	40020428 	.word	0x40020428
 8001ec0:	40020440 	.word	0x40020440
 8001ec4:	40020458 	.word	0x40020458
 8001ec8:	40020470 	.word	0x40020470
 8001ecc:	40020488 	.word	0x40020488
 8001ed0:	400204a0 	.word	0x400204a0
 8001ed4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_DMA_Abort+0x5dc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d072      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4d      	ldr	r2, [pc, #308]	@ (8002034 <HAL_DMA_Abort+0x5e0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d06d      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4c      	ldr	r2, [pc, #304]	@ (8002038 <HAL_DMA_Abort+0x5e4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d068      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4a      	ldr	r2, [pc, #296]	@ (800203c <HAL_DMA_Abort+0x5e8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d063      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a49      	ldr	r2, [pc, #292]	@ (8002040 <HAL_DMA_Abort+0x5ec>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d05e      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a47      	ldr	r2, [pc, #284]	@ (8002044 <HAL_DMA_Abort+0x5f0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d059      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <HAL_DMA_Abort+0x5f4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d054      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a44      	ldr	r2, [pc, #272]	@ (800204c <HAL_DMA_Abort+0x5f8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d04f      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a43      	ldr	r2, [pc, #268]	@ (8002050 <HAL_DMA_Abort+0x5fc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d04a      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a41      	ldr	r2, [pc, #260]	@ (8002054 <HAL_DMA_Abort+0x600>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d045      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <HAL_DMA_Abort+0x604>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d040      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3e      	ldr	r2, [pc, #248]	@ (800205c <HAL_DMA_Abort+0x608>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d03b      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002060 <HAL_DMA_Abort+0x60c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d036      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a3b      	ldr	r2, [pc, #236]	@ (8002064 <HAL_DMA_Abort+0x610>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d031      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_DMA_Abort+0x614>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d02c      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a38      	ldr	r2, [pc, #224]	@ (800206c <HAL_DMA_Abort+0x618>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d027      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a37      	ldr	r2, [pc, #220]	@ (8002070 <HAL_DMA_Abort+0x61c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a35      	ldr	r2, [pc, #212]	@ (8002074 <HAL_DMA_Abort+0x620>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01d      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a34      	ldr	r2, [pc, #208]	@ (8002078 <HAL_DMA_Abort+0x624>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d018      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a32      	ldr	r2, [pc, #200]	@ (800207c <HAL_DMA_Abort+0x628>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a31      	ldr	r2, [pc, #196]	@ (8002080 <HAL_DMA_Abort+0x62c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00e      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002084 <HAL_DMA_Abort+0x630>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2e      	ldr	r2, [pc, #184]	@ (8002088 <HAL_DMA_Abort+0x634>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_DMA_Abort+0x58a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800208c <HAL_DMA_Abort+0x638>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Abort+0x58e>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_Abort+0x590>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ff0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002008:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002012:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020010 	.word	0x40020010
 8002034:	40020028 	.word	0x40020028
 8002038:	40020040 	.word	0x40020040
 800203c:	40020058 	.word	0x40020058
 8002040:	40020070 	.word	0x40020070
 8002044:	40020088 	.word	0x40020088
 8002048:	400200a0 	.word	0x400200a0
 800204c:	400200b8 	.word	0x400200b8
 8002050:	40020410 	.word	0x40020410
 8002054:	40020428 	.word	0x40020428
 8002058:	40020440 	.word	0x40020440
 800205c:	40020458 	.word	0x40020458
 8002060:	40020470 	.word	0x40020470
 8002064:	40020488 	.word	0x40020488
 8002068:	400204a0 	.word	0x400204a0
 800206c:	400204b8 	.word	0x400204b8
 8002070:	58025408 	.word	0x58025408
 8002074:	5802541c 	.word	0x5802541c
 8002078:	58025430 	.word	0x58025430
 800207c:	58025444 	.word	0x58025444
 8002080:	58025458 	.word	0x58025458
 8002084:	5802546c 	.word	0x5802546c
 8002088:	58025480 	.word	0x58025480
 800208c:	58025494 	.word	0x58025494

08002090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e237      	b.n	8002512 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d004      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2280      	movs	r2, #128	@ 0x80
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e22c      	b.n	8002512 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5c      	ldr	r2, [pc, #368]	@ (8002230 <HAL_DMA_Abort_IT+0x1a0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002234 <HAL_DMA_Abort_IT+0x1a4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a59      	ldr	r2, [pc, #356]	@ (8002238 <HAL_DMA_Abort_IT+0x1a8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a58      	ldr	r2, [pc, #352]	@ (800223c <HAL_DMA_Abort_IT+0x1ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a56      	ldr	r2, [pc, #344]	@ (8002240 <HAL_DMA_Abort_IT+0x1b0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a55      	ldr	r2, [pc, #340]	@ (8002244 <HAL_DMA_Abort_IT+0x1b4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a53      	ldr	r2, [pc, #332]	@ (8002248 <HAL_DMA_Abort_IT+0x1b8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a52      	ldr	r2, [pc, #328]	@ (800224c <HAL_DMA_Abort_IT+0x1bc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a50      	ldr	r2, [pc, #320]	@ (8002250 <HAL_DMA_Abort_IT+0x1c0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4f      	ldr	r2, [pc, #316]	@ (8002254 <HAL_DMA_Abort_IT+0x1c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a4d      	ldr	r2, [pc, #308]	@ (8002258 <HAL_DMA_Abort_IT+0x1c8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <HAL_DMA_Abort_IT+0x1cc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4a      	ldr	r2, [pc, #296]	@ (8002260 <HAL_DMA_Abort_IT+0x1d0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a49      	ldr	r2, [pc, #292]	@ (8002264 <HAL_DMA_Abort_IT+0x1d4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a47      	ldr	r2, [pc, #284]	@ (8002268 <HAL_DMA_Abort_IT+0x1d8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Abort_IT+0xc8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a46      	ldr	r2, [pc, #280]	@ (800226c <HAL_DMA_Abort_IT+0x1dc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_DMA_Abort_IT+0xcc>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_DMA_Abort_IT+0xce>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8086 	beq.w	8002270 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2204      	movs	r2, #4
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <HAL_DMA_Abort_IT+0x1a0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d04a      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2e      	ldr	r2, [pc, #184]	@ (8002234 <HAL_DMA_Abort_IT+0x1a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d045      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2c      	ldr	r2, [pc, #176]	@ (8002238 <HAL_DMA_Abort_IT+0x1a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d040      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2b      	ldr	r2, [pc, #172]	@ (800223c <HAL_DMA_Abort_IT+0x1ac>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d03b      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <HAL_DMA_Abort_IT+0x1b0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d036      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_DMA_Abort_IT+0x1b4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d031      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a26      	ldr	r2, [pc, #152]	@ (8002248 <HAL_DMA_Abort_IT+0x1b8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02c      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a25      	ldr	r2, [pc, #148]	@ (800224c <HAL_DMA_Abort_IT+0x1bc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d027      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <HAL_DMA_Abort_IT+0x1c0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d022      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_DMA_Abort_IT+0x1c4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01d      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a20      	ldr	r2, [pc, #128]	@ (8002258 <HAL_DMA_Abort_IT+0x1c8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d018      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1f      	ldr	r2, [pc, #124]	@ (800225c <HAL_DMA_Abort_IT+0x1cc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <HAL_DMA_Abort_IT+0x1d0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00e      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <HAL_DMA_Abort_IT+0x1d4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002268 <HAL_DMA_Abort_IT+0x1d8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_DMA_Abort_IT+0x17c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_DMA_Abort_IT+0x1dc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d108      	bne.n	800221e <HAL_DMA_Abort_IT+0x18e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e178      	b.n	8002510 <HAL_DMA_Abort_IT+0x480>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e16f      	b.n	8002510 <HAL_DMA_Abort_IT+0x480>
 8002230:	40020010 	.word	0x40020010
 8002234:	40020028 	.word	0x40020028
 8002238:	40020040 	.word	0x40020040
 800223c:	40020058 	.word	0x40020058
 8002240:	40020070 	.word	0x40020070
 8002244:	40020088 	.word	0x40020088
 8002248:	400200a0 	.word	0x400200a0
 800224c:	400200b8 	.word	0x400200b8
 8002250:	40020410 	.word	0x40020410
 8002254:	40020428 	.word	0x40020428
 8002258:	40020440 	.word	0x40020440
 800225c:	40020458 	.word	0x40020458
 8002260:	40020470 	.word	0x40020470
 8002264:	40020488 	.word	0x40020488
 8002268:	400204a0 	.word	0x400204a0
 800226c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 020e 	bic.w	r2, r2, #14
 800227e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6c      	ldr	r2, [pc, #432]	@ (8002438 <HAL_DMA_Abort_IT+0x3a8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d04a      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6b      	ldr	r2, [pc, #428]	@ (800243c <HAL_DMA_Abort_IT+0x3ac>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d045      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a69      	ldr	r2, [pc, #420]	@ (8002440 <HAL_DMA_Abort_IT+0x3b0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d040      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a68      	ldr	r2, [pc, #416]	@ (8002444 <HAL_DMA_Abort_IT+0x3b4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d03b      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a66      	ldr	r2, [pc, #408]	@ (8002448 <HAL_DMA_Abort_IT+0x3b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d036      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a65      	ldr	r2, [pc, #404]	@ (800244c <HAL_DMA_Abort_IT+0x3bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d031      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a63      	ldr	r2, [pc, #396]	@ (8002450 <HAL_DMA_Abort_IT+0x3c0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02c      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a62      	ldr	r2, [pc, #392]	@ (8002454 <HAL_DMA_Abort_IT+0x3c4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d027      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a60      	ldr	r2, [pc, #384]	@ (8002458 <HAL_DMA_Abort_IT+0x3c8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d022      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5f      	ldr	r2, [pc, #380]	@ (800245c <HAL_DMA_Abort_IT+0x3cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d01d      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002460 <HAL_DMA_Abort_IT+0x3d0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d018      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002464 <HAL_DMA_Abort_IT+0x3d4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002468 <HAL_DMA_Abort_IT+0x3d8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00e      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a59      	ldr	r2, [pc, #356]	@ (800246c <HAL_DMA_Abort_IT+0x3dc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a57      	ldr	r2, [pc, #348]	@ (8002470 <HAL_DMA_Abort_IT+0x3e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_DMA_Abort_IT+0x290>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a56      	ldr	r2, [pc, #344]	@ (8002474 <HAL_DMA_Abort_IT+0x3e4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <HAL_DMA_Abort_IT+0x2a2>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e007      	b.n	8002342 <HAL_DMA_Abort_IT+0x2b2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3c      	ldr	r2, [pc, #240]	@ (8002438 <HAL_DMA_Abort_IT+0x3a8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d072      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	@ (800243c <HAL_DMA_Abort_IT+0x3ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d06d      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_DMA_Abort_IT+0x3b0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d068      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_DMA_Abort_IT+0x3b4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d063      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_DMA_Abort_IT+0x3b8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d05e      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	@ (800244c <HAL_DMA_Abort_IT+0x3bc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d059      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	@ (8002450 <HAL_DMA_Abort_IT+0x3c0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d054      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <HAL_DMA_Abort_IT+0x3c4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04f      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <HAL_DMA_Abort_IT+0x3c8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04a      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	@ (800245c <HAL_DMA_Abort_IT+0x3cc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d045      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002460 <HAL_DMA_Abort_IT+0x3d0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d040      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002464 <HAL_DMA_Abort_IT+0x3d4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d03b      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	@ (8002468 <HAL_DMA_Abort_IT+0x3d8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d036      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	@ (800246c <HAL_DMA_Abort_IT+0x3dc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_DMA_Abort_IT+0x3e0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02c      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	@ (8002474 <HAL_DMA_Abort_IT+0x3e4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d027      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <HAL_DMA_Abort_IT+0x3e8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <HAL_DMA_Abort_IT+0x3ec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_DMA_Abort_IT+0x3f0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d018      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	@ (8002484 <HAL_DMA_Abort_IT+0x3f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	@ (8002488 <HAL_DMA_Abort_IT+0x3f8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <HAL_DMA_Abort_IT+0x3fc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1b      	ldr	r2, [pc, #108]	@ (8002490 <HAL_DMA_Abort_IT+0x400>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort_IT+0x3a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <HAL_DMA_Abort_IT+0x404>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d132      	bne.n	8002498 <HAL_DMA_Abort_IT+0x408>
 8002432:	2301      	movs	r3, #1
 8002434:	e031      	b.n	800249a <HAL_DMA_Abort_IT+0x40a>
 8002436:	bf00      	nop
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
 8002478:	58025408 	.word	0x58025408
 800247c:	5802541c 	.word	0x5802541c
 8002480:	58025430 	.word	0x58025430
 8002484:	58025444 	.word	0x58025444
 8002488:	58025458 	.word	0x58025458
 800248c:	5802546c 	.word	0x5802546c
 8002490:	58025480 	.word	0x58025480
 8002494:	58025494 	.word	0x58025494
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d028      	beq.n	80024f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2201      	movs	r2, #1
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop

0800251c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002528:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_DMA_IRQHandler+0x1ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a67      	ldr	r2, [pc, #412]	@ (80026cc <HAL_DMA_IRQHandler+0x1b0>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a9b      	lsrs	r3, r3, #10
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a5f      	ldr	r2, [pc, #380]	@ (80026d0 <HAL_DMA_IRQHandler+0x1b4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04a      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5d      	ldr	r2, [pc, #372]	@ (80026d4 <HAL_DMA_IRQHandler+0x1b8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d045      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5c      	ldr	r2, [pc, #368]	@ (80026d8 <HAL_DMA_IRQHandler+0x1bc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d040      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5a      	ldr	r2, [pc, #360]	@ (80026dc <HAL_DMA_IRQHandler+0x1c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d03b      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a59      	ldr	r2, [pc, #356]	@ (80026e0 <HAL_DMA_IRQHandler+0x1c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d036      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a57      	ldr	r2, [pc, #348]	@ (80026e4 <HAL_DMA_IRQHandler+0x1c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a56      	ldr	r2, [pc, #344]	@ (80026e8 <HAL_DMA_IRQHandler+0x1cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a54      	ldr	r2, [pc, #336]	@ (80026ec <HAL_DMA_IRQHandler+0x1d0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d027      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a53      	ldr	r2, [pc, #332]	@ (80026f0 <HAL_DMA_IRQHandler+0x1d4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a51      	ldr	r2, [pc, #324]	@ (80026f4 <HAL_DMA_IRQHandler+0x1d8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <HAL_DMA_IRQHandler+0x1dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4e      	ldr	r2, [pc, #312]	@ (80026fc <HAL_DMA_IRQHandler+0x1e0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002700 <HAL_DMA_IRQHandler+0x1e4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002704 <HAL_DMA_IRQHandler+0x1e8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_DMA_IRQHandler+0x1ec>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_DMA_IRQHandler+0xd2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a48      	ldr	r2, [pc, #288]	@ (800270c <HAL_DMA_IRQHandler+0x1f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_IRQHandler+0xd6>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_IRQHandler+0xd8>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 842b 	beq.w	8002e50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2208      	movs	r2, #8
 8002604:	409a      	lsls	r2, r3
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80a2 	beq.w	8002754 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2e      	ldr	r2, [pc, #184]	@ (80026d0 <HAL_DMA_IRQHandler+0x1b4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d04a      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <HAL_DMA_IRQHandler+0x1b8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d045      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <HAL_DMA_IRQHandler+0x1bc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d040      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2a      	ldr	r2, [pc, #168]	@ (80026dc <HAL_DMA_IRQHandler+0x1c0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d03b      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a28      	ldr	r2, [pc, #160]	@ (80026e0 <HAL_DMA_IRQHandler+0x1c4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d036      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a27      	ldr	r2, [pc, #156]	@ (80026e4 <HAL_DMA_IRQHandler+0x1c8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d031      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a25      	ldr	r2, [pc, #148]	@ (80026e8 <HAL_DMA_IRQHandler+0x1cc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02c      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a24      	ldr	r2, [pc, #144]	@ (80026ec <HAL_DMA_IRQHandler+0x1d0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d027      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a22      	ldr	r2, [pc, #136]	@ (80026f0 <HAL_DMA_IRQHandler+0x1d4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d022      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a21      	ldr	r2, [pc, #132]	@ (80026f4 <HAL_DMA_IRQHandler+0x1d8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d01d      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <HAL_DMA_IRQHandler+0x1dc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d018      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <HAL_DMA_IRQHandler+0x1e0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d013      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <HAL_DMA_IRQHandler+0x1e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00e      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1b      	ldr	r2, [pc, #108]	@ (8002704 <HAL_DMA_IRQHandler+0x1e8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d009      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <HAL_DMA_IRQHandler+0x1ec>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x194>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a18      	ldr	r2, [pc, #96]	@ (800270c <HAL_DMA_IRQHandler+0x1f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12f      	bne.n	8002710 <HAL_DMA_IRQHandler+0x1f4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e02e      	b.n	8002724 <HAL_DMA_IRQHandler+0x208>
 80026c6:	bf00      	nop
 80026c8:	24000000 	.word	0x24000000
 80026cc:	1b4e81b5 	.word	0x1b4e81b5
 80026d0:	40020010 	.word	0x40020010
 80026d4:	40020028 	.word	0x40020028
 80026d8:	40020040 	.word	0x40020040
 80026dc:	40020058 	.word	0x40020058
 80026e0:	40020070 	.word	0x40020070
 80026e4:	40020088 	.word	0x40020088
 80026e8:	400200a0 	.word	0x400200a0
 80026ec:	400200b8 	.word	0x400200b8
 80026f0:	40020410 	.word	0x40020410
 80026f4:	40020428 	.word	0x40020428
 80026f8:	40020440 	.word	0x40020440
 80026fc:	40020458 	.word	0x40020458
 8002700:	40020470 	.word	0x40020470
 8002704:	40020488 	.word	0x40020488
 8002708:	400204a0 	.word	0x400204a0
 800270c:	400204b8 	.word	0x400204b8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2208      	movs	r2, #8
 8002742:	409a      	lsls	r2, r3
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06e      	beq.n	8002848 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <HAL_DMA_IRQHandler+0x3f8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a67      	ldr	r2, [pc, #412]	@ (8002918 <HAL_DMA_IRQHandler+0x3fc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a66      	ldr	r2, [pc, #408]	@ (800291c <HAL_DMA_IRQHandler+0x400>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a64      	ldr	r2, [pc, #400]	@ (8002920 <HAL_DMA_IRQHandler+0x404>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a63      	ldr	r2, [pc, #396]	@ (8002924 <HAL_DMA_IRQHandler+0x408>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a61      	ldr	r2, [pc, #388]	@ (8002928 <HAL_DMA_IRQHandler+0x40c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a60      	ldr	r2, [pc, #384]	@ (800292c <HAL_DMA_IRQHandler+0x410>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002930 <HAL_DMA_IRQHandler+0x414>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_DMA_IRQHandler+0x418>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5b      	ldr	r2, [pc, #364]	@ (8002938 <HAL_DMA_IRQHandler+0x41c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5a      	ldr	r2, [pc, #360]	@ (800293c <HAL_DMA_IRQHandler+0x420>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a58      	ldr	r2, [pc, #352]	@ (8002940 <HAL_DMA_IRQHandler+0x424>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_DMA_IRQHandler+0x428>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a55      	ldr	r2, [pc, #340]	@ (8002948 <HAL_DMA_IRQHandler+0x42c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a54      	ldr	r2, [pc, #336]	@ (800294c <HAL_DMA_IRQHandler+0x430>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_IRQHandler+0x2ee>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a52      	ldr	r2, [pc, #328]	@ (8002950 <HAL_DMA_IRQHandler+0x434>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10a      	bne.n	8002820 <HAL_DMA_IRQHandler+0x304>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e003      	b.n	8002828 <HAL_DMA_IRQHandler+0x30c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2201      	movs	r2, #1
 8002836:	409a      	lsls	r2, r3
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f043 0202 	orr.w	r2, r3, #2
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2204      	movs	r2, #4
 8002852:	409a      	lsls	r2, r3
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 808f 	beq.w	800297c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2c      	ldr	r2, [pc, #176]	@ (8002914 <HAL_DMA_IRQHandler+0x3f8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d04a      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	@ (8002918 <HAL_DMA_IRQHandler+0x3fc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d045      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a29      	ldr	r2, [pc, #164]	@ (800291c <HAL_DMA_IRQHandler+0x400>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d040      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a27      	ldr	r2, [pc, #156]	@ (8002920 <HAL_DMA_IRQHandler+0x404>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d03b      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <HAL_DMA_IRQHandler+0x408>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d036      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <HAL_DMA_IRQHandler+0x40c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a23      	ldr	r2, [pc, #140]	@ (800292c <HAL_DMA_IRQHandler+0x410>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d02c      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_DMA_IRQHandler+0x414>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d027      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a20      	ldr	r2, [pc, #128]	@ (8002934 <HAL_DMA_IRQHandler+0x418>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_DMA_IRQHandler+0x41c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01d      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1d      	ldr	r2, [pc, #116]	@ (800293c <HAL_DMA_IRQHandler+0x420>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <HAL_DMA_IRQHandler+0x424>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1a      	ldr	r2, [pc, #104]	@ (8002944 <HAL_DMA_IRQHandler+0x428>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	@ (8002948 <HAL_DMA_IRQHandler+0x42c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a17      	ldr	r2, [pc, #92]	@ (800294c <HAL_DMA_IRQHandler+0x430>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_IRQHandler+0x3e2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	@ (8002950 <HAL_DMA_IRQHandler+0x434>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12a      	bne.n	8002954 <HAL_DMA_IRQHandler+0x438>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	e023      	b.n	800295c <HAL_DMA_IRQHandler+0x440>
 8002914:	40020010 	.word	0x40020010
 8002918:	40020028 	.word	0x40020028
 800291c:	40020040 	.word	0x40020040
 8002920:	40020058 	.word	0x40020058
 8002924:	40020070 	.word	0x40020070
 8002928:	40020088 	.word	0x40020088
 800292c:	400200a0 	.word	0x400200a0
 8002930:	400200b8 	.word	0x400200b8
 8002934:	40020410 	.word	0x40020410
 8002938:	40020428 	.word	0x40020428
 800293c:	40020440 	.word	0x40020440
 8002940:	40020458 	.word	0x40020458
 8002944:	40020470 	.word	0x40020470
 8002948:	40020488 	.word	0x40020488
 800294c:	400204a0 	.word	0x400204a0
 8002950:	400204b8 	.word	0x400204b8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00d      	beq.n	800297c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2204      	movs	r2, #4
 800296a:	409a      	lsls	r2, r3
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80a6 	beq.w	8002ade <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a85      	ldr	r2, [pc, #532]	@ (8002bac <HAL_DMA_IRQHandler+0x690>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d04a      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a83      	ldr	r2, [pc, #524]	@ (8002bb0 <HAL_DMA_IRQHandler+0x694>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d045      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a82      	ldr	r2, [pc, #520]	@ (8002bb4 <HAL_DMA_IRQHandler+0x698>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d040      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a80      	ldr	r2, [pc, #512]	@ (8002bb8 <HAL_DMA_IRQHandler+0x69c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d03b      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7f      	ldr	r2, [pc, #508]	@ (8002bbc <HAL_DMA_IRQHandler+0x6a0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d036      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7d      	ldr	r2, [pc, #500]	@ (8002bc0 <HAL_DMA_IRQHandler+0x6a4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d031      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bc4 <HAL_DMA_IRQHandler+0x6a8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d02c      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a7a      	ldr	r2, [pc, #488]	@ (8002bc8 <HAL_DMA_IRQHandler+0x6ac>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d027      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a79      	ldr	r2, [pc, #484]	@ (8002bcc <HAL_DMA_IRQHandler+0x6b0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a77      	ldr	r2, [pc, #476]	@ (8002bd0 <HAL_DMA_IRQHandler+0x6b4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01d      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a76      	ldr	r2, [pc, #472]	@ (8002bd4 <HAL_DMA_IRQHandler+0x6b8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a74      	ldr	r2, [pc, #464]	@ (8002bd8 <HAL_DMA_IRQHandler+0x6bc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a73      	ldr	r2, [pc, #460]	@ (8002bdc <HAL_DMA_IRQHandler+0x6c0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00e      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a71      	ldr	r2, [pc, #452]	@ (8002be0 <HAL_DMA_IRQHandler+0x6c4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a70      	ldr	r2, [pc, #448]	@ (8002be4 <HAL_DMA_IRQHandler+0x6c8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x516>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002be8 <HAL_DMA_IRQHandler+0x6cc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10a      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x52c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e009      	b.n	8002a5c <HAL_DMA_IRQHandler+0x540>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03e      	beq.n	8002ade <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2210      	movs	r2, #16
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d024      	beq.n	8002ade <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e01f      	b.n	8002ade <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01b      	beq.n	8002ade <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e016      	b.n	8002ade <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0208 	bic.w	r2, r2, #8
 8002acc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8110 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2c      	ldr	r2, [pc, #176]	@ (8002bac <HAL_DMA_IRQHandler+0x690>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb0 <HAL_DMA_IRQHandler+0x694>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d045      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a29      	ldr	r2, [pc, #164]	@ (8002bb4 <HAL_DMA_IRQHandler+0x698>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d040      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a28      	ldr	r2, [pc, #160]	@ (8002bb8 <HAL_DMA_IRQHandler+0x69c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d03b      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a26      	ldr	r2, [pc, #152]	@ (8002bbc <HAL_DMA_IRQHandler+0x6a0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d036      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	@ (8002bc0 <HAL_DMA_IRQHandler+0x6a4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d031      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a23      	ldr	r2, [pc, #140]	@ (8002bc4 <HAL_DMA_IRQHandler+0x6a8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02c      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_DMA_IRQHandler+0x6ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d027      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a20      	ldr	r2, [pc, #128]	@ (8002bcc <HAL_DMA_IRQHandler+0x6b0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d022      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_DMA_IRQHandler+0x6b4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d01d      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_DMA_IRQHandler+0x6b8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_DMA_IRQHandler+0x6bc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1a      	ldr	r2, [pc, #104]	@ (8002bdc <HAL_DMA_IRQHandler+0x6c0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00e      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a19      	ldr	r2, [pc, #100]	@ (8002be0 <HAL_DMA_IRQHandler+0x6c4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <HAL_DMA_IRQHandler+0x6c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x678>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a16      	ldr	r2, [pc, #88]	@ (8002be8 <HAL_DMA_IRQHandler+0x6cc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d12b      	bne.n	8002bec <HAL_DMA_IRQHandler+0x6d0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	e02a      	b.n	8002c00 <HAL_DMA_IRQHandler+0x6e4>
 8002baa:	bf00      	nop
 8002bac:	40020010 	.word	0x40020010
 8002bb0:	40020028 	.word	0x40020028
 8002bb4:	40020040 	.word	0x40020040
 8002bb8:	40020058 	.word	0x40020058
 8002bbc:	40020070 	.word	0x40020070
 8002bc0:	40020088 	.word	0x40020088
 8002bc4:	400200a0 	.word	0x400200a0
 8002bc8:	400200b8 	.word	0x400200b8
 8002bcc:	40020410 	.word	0x40020410
 8002bd0:	40020428 	.word	0x40020428
 8002bd4:	40020440 	.word	0x40020440
 8002bd8:	40020458 	.word	0x40020458
 8002bdc:	40020470 	.word	0x40020470
 8002be0:	40020488 	.word	0x40020488
 8002be4:	400204a0 	.word	0x400204a0
 8002be8:	400204b8 	.word	0x400204b8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8087 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2220      	movs	r2, #32
 8002c10:	409a      	lsls	r2, r3
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d139      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0216 	bic.w	r2, r2, #22
 8002c30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x736>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0208 	bic.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	223f      	movs	r2, #63	@ 0x3f
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8382 	beq.w	8003390 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
          }
          return;
 8002c94:	e37c      	b.n	8003390 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02c      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	4798      	blx	r3
 8002cc2:	e027      	b.n	8002d14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
 8002cd4:	e01e      	b.n	8002d14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 833e 	beq.w	800339a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8088 	beq.w	8002e3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a89      	ldr	r2, [pc, #548]	@ (8002f60 <HAL_DMA_IRQHandler+0xa44>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a88      	ldr	r2, [pc, #544]	@ (8002f64 <HAL_DMA_IRQHandler+0xa48>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d045      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a86      	ldr	r2, [pc, #536]	@ (8002f68 <HAL_DMA_IRQHandler+0xa4c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d040      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a85      	ldr	r2, [pc, #532]	@ (8002f6c <HAL_DMA_IRQHandler+0xa50>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d03b      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a83      	ldr	r2, [pc, #524]	@ (8002f70 <HAL_DMA_IRQHandler+0xa54>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d036      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a82      	ldr	r2, [pc, #520]	@ (8002f74 <HAL_DMA_IRQHandler+0xa58>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d031      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a80      	ldr	r2, [pc, #512]	@ (8002f78 <HAL_DMA_IRQHandler+0xa5c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02c      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f7c <HAL_DMA_IRQHandler+0xa60>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d027      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a7d      	ldr	r2, [pc, #500]	@ (8002f80 <HAL_DMA_IRQHandler+0xa64>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d022      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7c      	ldr	r2, [pc, #496]	@ (8002f84 <HAL_DMA_IRQHandler+0xa68>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d01d      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f88 <HAL_DMA_IRQHandler+0xa6c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a79      	ldr	r2, [pc, #484]	@ (8002f8c <HAL_DMA_IRQHandler+0xa70>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a77      	ldr	r2, [pc, #476]	@ (8002f90 <HAL_DMA_IRQHandler+0xa74>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a76      	ldr	r2, [pc, #472]	@ (8002f94 <HAL_DMA_IRQHandler+0xa78>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a74      	ldr	r2, [pc, #464]	@ (8002f98 <HAL_DMA_IRQHandler+0xa7c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x8b8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a73      	ldr	r2, [pc, #460]	@ (8002f9c <HAL_DMA_IRQHandler+0xa80>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x8ca>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e007      	b.n	8002df6 <HAL_DMA_IRQHandler+0x8da>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d307      	bcc.n	8002e12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f2      	bne.n	8002df6 <HAL_DMA_IRQHandler+0x8da>
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2203      	movs	r2, #3
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002e2a:	e003      	b.n	8002e34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 82aa 	beq.w	800339a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
 8002e4e:	e2a4      	b.n	800339a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a52      	ldr	r2, [pc, #328]	@ (8002fa0 <HAL_DMA_IRQHandler+0xa84>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a51      	ldr	r2, [pc, #324]	@ (8002fa4 <HAL_DMA_IRQHandler+0xa88>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d045      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa8 <HAL_DMA_IRQHandler+0xa8c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d040      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4e      	ldr	r2, [pc, #312]	@ (8002fac <HAL_DMA_IRQHandler+0xa90>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb0 <HAL_DMA_IRQHandler+0xa94>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d036      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb4 <HAL_DMA_IRQHandler+0xa98>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a49      	ldr	r2, [pc, #292]	@ (8002fb8 <HAL_DMA_IRQHandler+0xa9c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02c      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a48      	ldr	r2, [pc, #288]	@ (8002fbc <HAL_DMA_IRQHandler+0xaa0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d027      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a46      	ldr	r2, [pc, #280]	@ (8002fc0 <HAL_DMA_IRQHandler+0xaa4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <HAL_DMA_IRQHandler+0xaa8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a43      	ldr	r2, [pc, #268]	@ (8002fc8 <HAL_DMA_IRQHandler+0xaac>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a42      	ldr	r2, [pc, #264]	@ (8002fcc <HAL_DMA_IRQHandler+0xab0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a40      	ldr	r2, [pc, #256]	@ (8002fd0 <HAL_DMA_IRQHandler+0xab4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd4 <HAL_DMA_IRQHandler+0xab8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd8 <HAL_DMA_IRQHandler+0xabc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x9d4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3c      	ldr	r2, [pc, #240]	@ (8002fdc <HAL_DMA_IRQHandler+0xac0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x9d8>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_DMA_IRQHandler+0x9da>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 824f 	beq.w	800339a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80dd 	beq.w	80030d4 <HAL_DMA_IRQHandler+0xbb8>
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80d7 	beq.w	80030d4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2204      	movs	r2, #4
 8002f30:	409a      	lsls	r2, r3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d059      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14a      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8220 	beq.w	8003394 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f5c:	e21a      	b.n	8003394 <HAL_DMA_IRQHandler+0xe78>
 8002f5e:	bf00      	nop
 8002f60:	40020010 	.word	0x40020010
 8002f64:	40020028 	.word	0x40020028
 8002f68:	40020040 	.word	0x40020040
 8002f6c:	40020058 	.word	0x40020058
 8002f70:	40020070 	.word	0x40020070
 8002f74:	40020088 	.word	0x40020088
 8002f78:	400200a0 	.word	0x400200a0
 8002f7c:	400200b8 	.word	0x400200b8
 8002f80:	40020410 	.word	0x40020410
 8002f84:	40020428 	.word	0x40020428
 8002f88:	40020440 	.word	0x40020440
 8002f8c:	40020458 	.word	0x40020458
 8002f90:	40020470 	.word	0x40020470
 8002f94:	40020488 	.word	0x40020488
 8002f98:	400204a0 	.word	0x400204a0
 8002f9c:	400204b8 	.word	0x400204b8
 8002fa0:	48022c08 	.word	0x48022c08
 8002fa4:	48022c1c 	.word	0x48022c1c
 8002fa8:	48022c30 	.word	0x48022c30
 8002fac:	48022c44 	.word	0x48022c44
 8002fb0:	48022c58 	.word	0x48022c58
 8002fb4:	48022c6c 	.word	0x48022c6c
 8002fb8:	48022c80 	.word	0x48022c80
 8002fbc:	48022c94 	.word	0x48022c94
 8002fc0:	58025408 	.word	0x58025408
 8002fc4:	5802541c 	.word	0x5802541c
 8002fc8:	58025430 	.word	0x58025430
 8002fcc:	58025444 	.word	0x58025444
 8002fd0:	58025458 	.word	0x58025458
 8002fd4:	5802546c 	.word	0x5802546c
 8002fd8:	58025480 	.word	0x58025480
 8002fdc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 81d5 	beq.w	8003394 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ff2:	e1cf      	b.n	8003394 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d160      	bne.n	80030c0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7f      	ldr	r2, [pc, #508]	@ (8003200 <HAL_DMA_IRQHandler+0xce4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d04a      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7d      	ldr	r2, [pc, #500]	@ (8003204 <HAL_DMA_IRQHandler+0xce8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d045      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7c      	ldr	r2, [pc, #496]	@ (8003208 <HAL_DMA_IRQHandler+0xcec>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d040      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7a      	ldr	r2, [pc, #488]	@ (800320c <HAL_DMA_IRQHandler+0xcf0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d03b      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a79      	ldr	r2, [pc, #484]	@ (8003210 <HAL_DMA_IRQHandler+0xcf4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d036      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a77      	ldr	r2, [pc, #476]	@ (8003214 <HAL_DMA_IRQHandler+0xcf8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d031      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a76      	ldr	r2, [pc, #472]	@ (8003218 <HAL_DMA_IRQHandler+0xcfc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d02c      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a74      	ldr	r2, [pc, #464]	@ (800321c <HAL_DMA_IRQHandler+0xd00>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d027      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a73      	ldr	r2, [pc, #460]	@ (8003220 <HAL_DMA_IRQHandler+0xd04>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a71      	ldr	r2, [pc, #452]	@ (8003224 <HAL_DMA_IRQHandler+0xd08>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01d      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a70      	ldr	r2, [pc, #448]	@ (8003228 <HAL_DMA_IRQHandler+0xd0c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a6e      	ldr	r2, [pc, #440]	@ (800322c <HAL_DMA_IRQHandler+0xd10>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6d      	ldr	r2, [pc, #436]	@ (8003230 <HAL_DMA_IRQHandler+0xd14>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6b      	ldr	r2, [pc, #428]	@ (8003234 <HAL_DMA_IRQHandler+0xd18>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6a      	ldr	r2, [pc, #424]	@ (8003238 <HAL_DMA_IRQHandler+0xd1c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_DMA_IRQHandler+0xb82>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a68      	ldr	r2, [pc, #416]	@ (800323c <HAL_DMA_IRQHandler+0xd20>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d108      	bne.n	80030b0 <HAL_DMA_IRQHandler+0xb94>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e007      	b.n	80030c0 <HAL_DMA_IRQHandler+0xba4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8165 	beq.w	8003394 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d2:	e15f      	b.n	8003394 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2202      	movs	r2, #2
 80030de:	409a      	lsls	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80c5 	beq.w	8003274 <HAL_DMA_IRQHandler+0xd58>
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80bf 	beq.w	8003274 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	2202      	movs	r2, #2
 8003100:	409a      	lsls	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d018      	beq.n	8003142 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 813a 	beq.w	8003398 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800312c:	e134      	b.n	8003398 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8130 	beq.w	8003398 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003140:	e12a      	b.n	8003398 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	f040 8089 	bne.w	8003260 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2b      	ldr	r2, [pc, #172]	@ (8003200 <HAL_DMA_IRQHandler+0xce4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a29      	ldr	r2, [pc, #164]	@ (8003204 <HAL_DMA_IRQHandler+0xce8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a28      	ldr	r2, [pc, #160]	@ (8003208 <HAL_DMA_IRQHandler+0xcec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a26      	ldr	r2, [pc, #152]	@ (800320c <HAL_DMA_IRQHandler+0xcf0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a25      	ldr	r2, [pc, #148]	@ (8003210 <HAL_DMA_IRQHandler+0xcf4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <HAL_DMA_IRQHandler+0xcf8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a22      	ldr	r2, [pc, #136]	@ (8003218 <HAL_DMA_IRQHandler+0xcfc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a20      	ldr	r2, [pc, #128]	@ (800321c <HAL_DMA_IRQHandler+0xd00>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003220 <HAL_DMA_IRQHandler+0xd04>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <HAL_DMA_IRQHandler+0xd08>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_DMA_IRQHandler+0xd0c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <HAL_DMA_IRQHandler+0xd10>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <HAL_DMA_IRQHandler+0xd14>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a17      	ldr	r2, [pc, #92]	@ (8003234 <HAL_DMA_IRQHandler+0xd18>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <HAL_DMA_IRQHandler+0xd1c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0xcd2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a14      	ldr	r2, [pc, #80]	@ (800323c <HAL_DMA_IRQHandler+0xd20>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d128      	bne.n	8003240 <HAL_DMA_IRQHandler+0xd24>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0214 	bic.w	r2, r2, #20
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e027      	b.n	8003250 <HAL_DMA_IRQHandler+0xd34>
 8003200:	40020010 	.word	0x40020010
 8003204:	40020028 	.word	0x40020028
 8003208:	40020040 	.word	0x40020040
 800320c:	40020058 	.word	0x40020058
 8003210:	40020070 	.word	0x40020070
 8003214:	40020088 	.word	0x40020088
 8003218:	400200a0 	.word	0x400200a0
 800321c:	400200b8 	.word	0x400200b8
 8003220:	40020410 	.word	0x40020410
 8003224:	40020428 	.word	0x40020428
 8003228:	40020440 	.word	0x40020440
 800322c:	40020458 	.word	0x40020458
 8003230:	40020470 	.word	0x40020470
 8003234:	40020488 	.word	0x40020488
 8003238:	400204a0 	.word	0x400204a0
 800323c:	400204b8 	.word	0x400204b8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 020a 	bic.w	r2, r2, #10
 800324e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8097 	beq.w	8003398 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003272:	e091      	b.n	8003398 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2208      	movs	r2, #8
 800327e:	409a      	lsls	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8088 	beq.w	800339a <HAL_DMA_IRQHandler+0xe7e>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8082 	beq.w	800339a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a41      	ldr	r2, [pc, #260]	@ (80033a0 <HAL_DMA_IRQHandler+0xe84>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3f      	ldr	r2, [pc, #252]	@ (80033a4 <HAL_DMA_IRQHandler+0xe88>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3e      	ldr	r2, [pc, #248]	@ (80033a8 <HAL_DMA_IRQHandler+0xe8c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3c      	ldr	r2, [pc, #240]	@ (80033ac <HAL_DMA_IRQHandler+0xe90>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	@ (80033b0 <HAL_DMA_IRQHandler+0xe94>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a39      	ldr	r2, [pc, #228]	@ (80033b4 <HAL_DMA_IRQHandler+0xe98>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a38      	ldr	r2, [pc, #224]	@ (80033b8 <HAL_DMA_IRQHandler+0xe9c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a36      	ldr	r2, [pc, #216]	@ (80033bc <HAL_DMA_IRQHandler+0xea0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a35      	ldr	r2, [pc, #212]	@ (80033c0 <HAL_DMA_IRQHandler+0xea4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a33      	ldr	r2, [pc, #204]	@ (80033c4 <HAL_DMA_IRQHandler+0xea8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a32      	ldr	r2, [pc, #200]	@ (80033c8 <HAL_DMA_IRQHandler+0xeac>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a30      	ldr	r2, [pc, #192]	@ (80033cc <HAL_DMA_IRQHandler+0xeb0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2f      	ldr	r2, [pc, #188]	@ (80033d0 <HAL_DMA_IRQHandler+0xeb4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2d      	ldr	r2, [pc, #180]	@ (80033d4 <HAL_DMA_IRQHandler+0xeb8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2c      	ldr	r2, [pc, #176]	@ (80033d8 <HAL_DMA_IRQHandler+0xebc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_IRQHandler+0xe1a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2a      	ldr	r2, [pc, #168]	@ (80033dc <HAL_DMA_IRQHandler+0xec0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <HAL_DMA_IRQHandler+0xe2c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 021c 	bic.w	r2, r2, #28
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e007      	b.n	8003358 <HAL_DMA_IRQHandler+0xe3c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020e 	bic.w	r2, r2, #14
 8003356:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e004      	b.n	800339a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003398:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800339a:	3728      	adds	r7, #40	@ 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8

080033e0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a42      	ldr	r2, [pc, #264]	@ (8003514 <DMA_CalcBaseAndBitshift+0x118>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d04a      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a41      	ldr	r2, [pc, #260]	@ (8003518 <DMA_CalcBaseAndBitshift+0x11c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d045      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3f      	ldr	r2, [pc, #252]	@ (800351c <DMA_CalcBaseAndBitshift+0x120>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d040      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a3e      	ldr	r2, [pc, #248]	@ (8003520 <DMA_CalcBaseAndBitshift+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d03b      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3c      	ldr	r2, [pc, #240]	@ (8003524 <DMA_CalcBaseAndBitshift+0x128>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d036      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a3b      	ldr	r2, [pc, #236]	@ (8003528 <DMA_CalcBaseAndBitshift+0x12c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d031      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a39      	ldr	r2, [pc, #228]	@ (800352c <DMA_CalcBaseAndBitshift+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02c      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a38      	ldr	r2, [pc, #224]	@ (8003530 <DMA_CalcBaseAndBitshift+0x134>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d027      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a36      	ldr	r2, [pc, #216]	@ (8003534 <DMA_CalcBaseAndBitshift+0x138>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d022      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a35      	ldr	r2, [pc, #212]	@ (8003538 <DMA_CalcBaseAndBitshift+0x13c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d01d      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a33      	ldr	r2, [pc, #204]	@ (800353c <DMA_CalcBaseAndBitshift+0x140>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a32      	ldr	r2, [pc, #200]	@ (8003540 <DMA_CalcBaseAndBitshift+0x144>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a30      	ldr	r2, [pc, #192]	@ (8003544 <DMA_CalcBaseAndBitshift+0x148>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2f      	ldr	r2, [pc, #188]	@ (8003548 <DMA_CalcBaseAndBitshift+0x14c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2d      	ldr	r2, [pc, #180]	@ (800354c <DMA_CalcBaseAndBitshift+0x150>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <DMA_CalcBaseAndBitshift+0xa8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2c      	ldr	r2, [pc, #176]	@ (8003550 <DMA_CalcBaseAndBitshift+0x154>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <DMA_CalcBaseAndBitshift+0xac>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <DMA_CalcBaseAndBitshift+0xae>
 80034a8:	2300      	movs	r3, #0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d024      	beq.n	80034f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3b10      	subs	r3, #16
 80034b6:	4a27      	ldr	r2, [pc, #156]	@ (8003554 <DMA_CalcBaseAndBitshift+0x158>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <DMA_CalcBaseAndBitshift+0x15c>)
 80034c8:	5cd3      	ldrb	r3, [r2, r3]
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d908      	bls.n	80034e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b1f      	ldr	r3, [pc, #124]	@ (800355c <DMA_CalcBaseAndBitshift+0x160>)
 80034de:	4013      	ands	r3, r2
 80034e0:	1d1a      	adds	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80034e6:	e00d      	b.n	8003504 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <DMA_CalcBaseAndBitshift+0x160>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f6:	e005      	b.n	8003504 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40020010 	.word	0x40020010
 8003518:	40020028 	.word	0x40020028
 800351c:	40020040 	.word	0x40020040
 8003520:	40020058 	.word	0x40020058
 8003524:	40020070 	.word	0x40020070
 8003528:	40020088 	.word	0x40020088
 800352c:	400200a0 	.word	0x400200a0
 8003530:	400200b8 	.word	0x400200b8
 8003534:	40020410 	.word	0x40020410
 8003538:	40020428 	.word	0x40020428
 800353c:	40020440 	.word	0x40020440
 8003540:	40020458 	.word	0x40020458
 8003544:	40020470 	.word	0x40020470
 8003548:	40020488 	.word	0x40020488
 800354c:	400204a0 	.word	0x400204a0
 8003550:	400204b8 	.word	0x400204b8
 8003554:	aaaaaaab 	.word	0xaaaaaaab
 8003558:	0800d7f8 	.word	0x0800d7f8
 800355c:	fffffc00 	.word	0xfffffc00

08003560 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d120      	bne.n	80035b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	2b03      	cmp	r3, #3
 800357a:	d858      	bhi.n	800362e <DMA_CheckFifoParam+0xce>
 800357c:	a201      	add	r2, pc, #4	@ (adr r2, 8003584 <DMA_CheckFifoParam+0x24>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a7 	.word	0x080035a7
 800358c:	08003595 	.word	0x08003595
 8003590:	0800362f 	.word	0x0800362f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d048      	beq.n	8003632 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035a4:	e045      	b.n	8003632 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035ae:	d142      	bne.n	8003636 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035b4:	e03f      	b.n	8003636 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035be:	d123      	bne.n	8003608 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d838      	bhi.n	800363a <DMA_CheckFifoParam+0xda>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <DMA_CheckFifoParam+0x70>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035e7 	.word	0x080035e7
 80035d8:	080035e1 	.word	0x080035e1
 80035dc:	080035f9 	.word	0x080035f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
        break;
 80035e4:	e030      	b.n	8003648 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d025      	beq.n	800363e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035f6:	e022      	b.n	800363e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003600:	d11f      	bne.n	8003642 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003606:	e01c      	b.n	8003642 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	2b02      	cmp	r3, #2
 800360e:	d902      	bls.n	8003616 <DMA_CheckFifoParam+0xb6>
 8003610:	2b03      	cmp	r3, #3
 8003612:	d003      	beq.n	800361c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003614:	e018      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
        break;
 800361a:	e015      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
    break;
 800362c:	e00b      	b.n	8003646 <DMA_CheckFifoParam+0xe6>
        break;
 800362e:	bf00      	nop
 8003630:	e00a      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        break;
 8003632:	bf00      	nop
 8003634:	e008      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        break;
 8003636:	bf00      	nop
 8003638:	e006      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        break;
 800363a:	bf00      	nop
 800363c:	e004      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
        break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <DMA_CheckFifoParam+0xe8>
    break;
 8003646:	bf00      	nop
    }
  }

  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop

08003658 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a38      	ldr	r2, [pc, #224]	@ (800374c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a36      	ldr	r2, [pc, #216]	@ (8003750 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a35      	ldr	r2, [pc, #212]	@ (8003754 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a33      	ldr	r2, [pc, #204]	@ (8003758 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	@ (800375c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a30      	ldr	r2, [pc, #192]	@ (8003760 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003764 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01a      	beq.n	80036f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	3b08      	subs	r3, #8
 80036c8:	4a28      	ldr	r2, [pc, #160]	@ (800376c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4b26      	ldr	r3, [pc, #152]	@ (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a24      	ldr	r2, [pc, #144]	@ (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80036e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2201      	movs	r2, #1
 80036ee:	409a      	lsls	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80036f4:	e024      	b.n	8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	3b10      	subs	r3, #16
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d806      	bhi.n	800371e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d902      	bls.n	800371e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3308      	adds	r3, #8
 800371c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a16      	ldr	r2, [pc, #88]	@ (8003788 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003730:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2201      	movs	r2, #1
 800373a:	409a      	lsls	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	58025408 	.word	0x58025408
 8003750:	5802541c 	.word	0x5802541c
 8003754:	58025430 	.word	0x58025430
 8003758:	58025444 	.word	0x58025444
 800375c:	58025458 	.word	0x58025458
 8003760:	5802546c 	.word	0x5802546c
 8003764:	58025480 	.word	0x58025480
 8003768:	58025494 	.word	0x58025494
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	16009600 	.word	0x16009600
 8003774:	58025880 	.word	0x58025880
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	400204b8 	.word	0x400204b8
 8003780:	4002040f 	.word	0x4002040f
 8003784:	10008200 	.word	0x10008200
 8003788:	40020880 	.word	0x40020880

0800378c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04a      	beq.n	8003838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d847      	bhi.n	8003838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a25      	ldr	r2, [pc, #148]	@ (8003844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d022      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a24      	ldr	r2, [pc, #144]	@ (8003848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01d      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1e      	ldr	r2, [pc, #120]	@ (8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	@ (800385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	461a      	mov	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003814:	671a      	str	r2, [r3, #112]	@ 0x70
 8003816:	e009      	b.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4b14      	ldr	r3, [pc, #80]	@ (800386c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	461a      	mov	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a11      	ldr	r2, [pc, #68]	@ (8003870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800382a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3b01      	subs	r3, #1
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	58025408 	.word	0x58025408
 8003848:	5802541c 	.word	0x5802541c
 800384c:	58025430 	.word	0x58025430
 8003850:	58025444 	.word	0x58025444
 8003854:	58025458 	.word	0x58025458
 8003858:	5802546c 	.word	0x5802546c
 800385c:	58025480 	.word	0x58025480
 8003860:	58025494 	.word	0x58025494
 8003864:	1600963f 	.word	0x1600963f
 8003868:	58025940 	.word	0x58025940
 800386c:	1000823f 	.word	0x1000823f
 8003870:	40020940 	.word	0x40020940

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003882:	4b89      	ldr	r3, [pc, #548]	@ (8003aa8 <HAL_GPIO_Init+0x234>)
 8003884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003886:	e194      	b.n	8003bb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8186 	beq.w	8003bac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d005      	beq.n	80038b8 <HAL_GPIO_Init+0x44>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d130      	bne.n	800391a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ee:	2201      	movs	r2, #1
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0201 	and.w	r2, r3, #1
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b03      	cmp	r3, #3
 8003924:	d017      	beq.n	8003956 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d123      	bne.n	80039aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80e0 	beq.w	8003bac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ec:	4b2f      	ldr	r3, [pc, #188]	@ (8003aac <HAL_GPIO_Init+0x238>)
 80039ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80039f2:	4a2e      	ldr	r2, [pc, #184]	@ (8003aac <HAL_GPIO_Init+0x238>)
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80039fc:	4b2b      	ldr	r3, [pc, #172]	@ (8003aac <HAL_GPIO_Init+0x238>)
 80039fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0a:	4a29      	ldr	r2, [pc, #164]	@ (8003ab0 <HAL_GPIO_Init+0x23c>)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a20      	ldr	r2, [pc, #128]	@ (8003ab4 <HAL_GPIO_Init+0x240>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d052      	beq.n	8003adc <HAL_GPIO_Init+0x268>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab8 <HAL_GPIO_Init+0x244>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d031      	beq.n	8003aa2 <HAL_GPIO_Init+0x22e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1e      	ldr	r2, [pc, #120]	@ (8003abc <HAL_GPIO_Init+0x248>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02b      	beq.n	8003a9e <HAL_GPIO_Init+0x22a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_GPIO_Init+0x24c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d025      	beq.n	8003a9a <HAL_GPIO_Init+0x226>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <HAL_GPIO_Init+0x250>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01f      	beq.n	8003a96 <HAL_GPIO_Init+0x222>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <HAL_GPIO_Init+0x254>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d019      	beq.n	8003a92 <HAL_GPIO_Init+0x21e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1a      	ldr	r2, [pc, #104]	@ (8003acc <HAL_GPIO_Init+0x258>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x21a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <HAL_GPIO_Init+0x25c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x216>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_GPIO_Init+0x260>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x212>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_GPIO_Init+0x264>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x20e>
 8003a7e:	2309      	movs	r3, #9
 8003a80:	e02d      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a82:	230a      	movs	r3, #10
 8003a84:	e02b      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a86:	2308      	movs	r3, #8
 8003a88:	e029      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	e027      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a8e:	2306      	movs	r3, #6
 8003a90:	e025      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a92:	2305      	movs	r3, #5
 8003a94:	e023      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a96:	2304      	movs	r3, #4
 8003a98:	e021      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e01f      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e01d      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e01b      	b.n	8003ade <HAL_GPIO_Init+0x26a>
 8003aa6:	bf00      	nop
 8003aa8:	58000080 	.word	0x58000080
 8003aac:	58024400 	.word	0x58024400
 8003ab0:	58000400 	.word	0x58000400
 8003ab4:	58020000 	.word	0x58020000
 8003ab8:	58020400 	.word	0x58020400
 8003abc:	58020800 	.word	0x58020800
 8003ac0:	58020c00 	.word	0x58020c00
 8003ac4:	58021000 	.word	0x58021000
 8003ac8:	58021400 	.word	0x58021400
 8003acc:	58021800 	.word	0x58021800
 8003ad0:	58021c00 	.word	0x58021c00
 8003ad4:	58022000 	.word	0x58022000
 8003ad8:	58022400 	.word	0x58022400
 8003adc:	2300      	movs	r3, #0
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	f002 0203 	and.w	r2, r2, #3
 8003ae4:	0092      	lsls	r2, r2, #2
 8003ae6:	4093      	lsls	r3, r2
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aee:	4938      	ldr	r1, [pc, #224]	@ (8003bd0 <HAL_GPIO_Init+0x35c>)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	3302      	adds	r3, #2
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f ae63 	bne.w	8003888 <HAL_GPIO_Init+0x14>
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	3724      	adds	r7, #36	@ 0x24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	58000400 	.word	0x58000400

08003bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fea8 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e08b      	b.n	8003d32 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fc fdb2 	bl	8000798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	@ 0x24
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	e006      	b.n	8003c90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d108      	bne.n	8003caa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	e007      	b.n	8003cba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <HAL_I2C_Init+0x134>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	02008000 	.word	0x02008000

08003d40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	817b      	strh	r3, [r7, #10]
 8003d50:	4613      	mov	r3, r2
 8003d52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	f040 80fd 	bne.w	8003f5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2C_Master_Transmit+0x30>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0f6      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x21e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d78:	f7fd f9f2 	bl	8001160 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2319      	movs	r3, #25
 8003d84:	2201      	movs	r2, #1
 8003d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 ff8d 	bl	8004caa <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0e1      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2221      	movs	r2, #33	@ 0x21
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2210      	movs	r2, #16
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	893a      	ldrh	r2, [r7, #8]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2bff      	cmp	r3, #255	@ 0xff
 8003dca:	d906      	bls.n	8003dda <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	@ 0xff
 8003dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e007      	b.n	8003dea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003de4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003de8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d024      	beq.n	8003e3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3301      	adds	r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f68 <HAL_I2C_Master_Transmit+0x228>)
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f001 f8fb 	bl	8005030 <I2C_TransferConfig>
 8003e3a:	e066      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	8979      	ldrh	r1, [r7, #10]
 8003e44:	4b48      	ldr	r3, [pc, #288]	@ (8003f68 <HAL_I2C_Master_Transmit+0x228>)
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f001 f8f0 	bl	8005030 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e50:	e05b      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	6a39      	ldr	r1, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 ff80 	bl	8004d5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07b      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d034      	beq.n	8003f0a <HAL_I2C_Master_Transmit+0x1ca>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d130      	bne.n	8003f0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2180      	movs	r1, #128	@ 0x80
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fef9 	bl	8004caa <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e04d      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2bff      	cmp	r3, #255	@ 0xff
 8003eca:	d90e      	bls.n	8003eea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	@ 0xff
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	8979      	ldrh	r1, [r7, #10]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f001 f8a4 	bl	8005030 <I2C_TransferConfig>
 8003ee8:	e00f      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	2300      	movs	r3, #0
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f001 f893 	bl	8005030 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d19e      	bne.n	8003e52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	6a39      	ldr	r1, [r7, #32]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 ff66 	bl	8004dea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e01a      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <HAL_I2C_Master_Transmit+0x22c>)
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	80002000 	.word	0x80002000
 8003f6c:	fe00e800 	.word	0xfe00e800

08003f70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00f      	beq.n	8003fe6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	f043 0201 	orr.w	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fe4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00f      	beq.n	8004010 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f043 0208 	orr.w	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800400e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00f      	beq.n	800403a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004028:	f043 0202 	orr.w	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004038:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 030b 	and.w	r3, r3, #11
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fcd3 	bl	80049f8 <I2C_ITError>
  }
}
 8004052:	bf00      	nop
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	70fb      	strb	r3, [r7, #3]
 800408e:	4613      	mov	r3, r2
 8004090:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e8:	b2db      	uxtb	r3, r3
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <I2C_Slave_ISR_IT+0x24>
 8004116:	2302      	movs	r3, #2
 8004118:	e0e2      	b.n	80042e0 <I2C_Slave_ISR_IT+0x1ea>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004136:	6939      	ldr	r1, [r7, #16]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f9b5 	bl	80044a8 <I2C_ITSlaveCplt>
 800413e:	e0ca      	b.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d04b      	beq.n	80041e2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004150:	2b00      	cmp	r3, #0
 8004152:	d046      	beq.n	80041e2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d128      	bne.n	80041b0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b28      	cmp	r3, #40	@ 0x28
 8004168:	d108      	bne.n	800417c <I2C_Slave_ISR_IT+0x86>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004170:	d104      	bne.n	800417c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004172:	6939      	ldr	r1, [r7, #16]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fbeb 	bl	8004950 <I2C_ITListenCplt>
 800417a:	e031      	b.n	80041e0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b29      	cmp	r3, #41	@ 0x29
 8004186:	d10e      	bne.n	80041a6 <I2C_Slave_ISR_IT+0xb0>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800418e:	d00a      	beq.n	80041a6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fd44 	bl	8004c26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f926 	bl	80043f0 <I2C_ITSlaveSeqCplt>
 80041a4:	e01c      	b.n	80041e0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2210      	movs	r2, #16
 80041ac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80041ae:	e08f      	b.n	80042d0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2210      	movs	r2, #16
 80041b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	f043 0204 	orr.w	r2, r3, #4
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <I2C_Slave_ISR_IT+0xdc>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d0:	d17e      	bne.n	80042d0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	4619      	mov	r1, r3
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fc0d 	bl	80049f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80041de:	e077      	b.n	80042d0 <I2C_Slave_ISR_IT+0x1da>
 80041e0:	e076      	b.n	80042d0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02f      	beq.n	800424c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d02a      	beq.n	800424c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d018      	beq.n	8004232 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d14b      	bne.n	80042d4 <I2C_Slave_ISR_IT+0x1de>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004242:	d047      	beq.n	80042d4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f8d3 	bl	80043f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800424a:	e043      	b.n	80042d4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f840 	bl	80042e8 <I2C_ITAddrCplt>
 8004268:	e035      	b.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d030      	beq.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02b      	beq.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d018      	beq.n	80042ba <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80042b8:	e00d      	b.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c0:	d002      	beq.n	80042c8 <I2C_Slave_ISR_IT+0x1d2>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f891 	bl	80043f0 <I2C_ITSlaveSeqCplt>
 80042ce:	e002      	b.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80042d0:	bf00      	nop
 80042d2:	e000      	b.n	80042d6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80042d4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042fe:	2b28      	cmp	r3, #40	@ 0x28
 8004300:	d16a      	bne.n	80043d8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	b29b      	uxth	r3, r3
 800431c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004320:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800433c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d138      	bne.n	80043b8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004346:	897b      	ldrh	r3, [r7, #10]
 8004348:	09db      	lsrs	r3, r3, #7
 800434a:	b29a      	uxth	r2, r3
 800434c:	89bb      	ldrh	r3, [r7, #12]
 800434e:	4053      	eors	r3, r2
 8004350:	b29b      	uxth	r3, r3
 8004352:	f003 0306 	and.w	r3, r3, #6
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11c      	bne.n	8004394 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436c:	2b02      	cmp	r3, #2
 800436e:	d13b      	bne.n	80043e8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2208      	movs	r2, #8
 800437c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004386:	89ba      	ldrh	r2, [r7, #12]
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fe78 	bl	8004082 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004392:	e029      	b.n	80043e8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fe79 	bl	8005094 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043aa:	89ba      	ldrh	r2, [r7, #12]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fe66 	bl	8004082 <HAL_I2C_AddrCallback>
}
 80043b6:	e017      	b.n	80043e8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fe69 	bl	8005094 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043ca:	89ba      	ldrh	r2, [r7, #12]
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fe56 	bl	8004082 <HAL_I2C_AddrCallback>
}
 80043d6:	e007      	b.n	80043e8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2208      	movs	r2, #8
 80043de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e00c      	b.n	800443e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800443c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b29      	cmp	r3, #41	@ 0x29
 8004448:	d112      	bne.n	8004470 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2228      	movs	r2, #40	@ 0x28
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2221      	movs	r2, #33	@ 0x21
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004458:	2101      	movs	r1, #1
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fe1a 	bl	8005094 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fdf6 	bl	800405a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800446e:	e017      	b.n	80044a0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b2a      	cmp	r3, #42	@ 0x2a
 800447a:	d111      	bne.n	80044a0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2228      	movs	r2, #40	@ 0x28
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2222      	movs	r2, #34	@ 0x22
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800448a:	2102      	movs	r1, #2
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fe01 	bl	8005094 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fde7 	bl	800406e <HAL_I2C_SlaveRxCpltCallback>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ca:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044d4:	7afb      	ldrb	r3, [r7, #11]
 80044d6:	2b21      	cmp	r3, #33	@ 0x21
 80044d8:	d002      	beq.n	80044e0 <I2C_ITSlaveCplt+0x38>
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	2b29      	cmp	r3, #41	@ 0x29
 80044de:	d108      	bne.n	80044f2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80044e0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fdd5 	bl	8005094 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2221      	movs	r2, #33	@ 0x21
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80044f0:	e019      	b.n	8004526 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044f2:	7afb      	ldrb	r3, [r7, #11]
 80044f4:	2b22      	cmp	r3, #34	@ 0x22
 80044f6:	d002      	beq.n	80044fe <I2C_ITSlaveCplt+0x56>
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80044fc:	d108      	bne.n	8004510 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80044fe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fdc6 	bl	8005094 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2222      	movs	r2, #34	@ 0x22
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
 800450e:	e00a      	b.n	8004526 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	2b28      	cmp	r3, #40	@ 0x28
 8004514:	d107      	bne.n	8004526 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004516:	f248 0103 	movw	r1, #32771	@ 0x8003
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fdba 	bl	8005094 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004534:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b7f      	ldr	r3, [pc, #508]	@ (8004740 <I2C_ITSlaveCplt+0x298>)
 8004542:	400b      	ands	r3, r1
 8004544:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb6d 	bl	8004c26 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d07a      	beq.n	800464c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004564:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8111 	beq.w	8004792 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a73      	ldr	r2, [pc, #460]	@ (8004744 <I2C_ITSlaveCplt+0x29c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d059      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a71      	ldr	r2, [pc, #452]	@ (8004748 <I2C_ITSlaveCplt+0x2a0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d053      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6f      	ldr	r2, [pc, #444]	@ (800474c <I2C_ITSlaveCplt+0x2a4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d04d      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6d      	ldr	r2, [pc, #436]	@ (8004750 <I2C_ITSlaveCplt+0x2a8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d047      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004754 <I2C_ITSlaveCplt+0x2ac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d041      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a69      	ldr	r2, [pc, #420]	@ (8004758 <I2C_ITSlaveCplt+0x2b0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d03b      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a67      	ldr	r2, [pc, #412]	@ (800475c <I2C_ITSlaveCplt+0x2b4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d035      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a65      	ldr	r2, [pc, #404]	@ (8004760 <I2C_ITSlaveCplt+0x2b8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d02f      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a63      	ldr	r2, [pc, #396]	@ (8004764 <I2C_ITSlaveCplt+0x2bc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d029      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a61      	ldr	r2, [pc, #388]	@ (8004768 <I2C_ITSlaveCplt+0x2c0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d023      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a5f      	ldr	r2, [pc, #380]	@ (800476c <I2C_ITSlaveCplt+0x2c4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d01d      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5d      	ldr	r2, [pc, #372]	@ (8004770 <I2C_ITSlaveCplt+0x2c8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d017      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a5b      	ldr	r2, [pc, #364]	@ (8004774 <I2C_ITSlaveCplt+0x2cc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d011      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a59      	ldr	r2, [pc, #356]	@ (8004778 <I2C_ITSlaveCplt+0x2d0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00b      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a57      	ldr	r2, [pc, #348]	@ (800477c <I2C_ITSlaveCplt+0x2d4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d005      	beq.n	8004630 <I2C_ITSlaveCplt+0x188>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a55      	ldr	r2, [pc, #340]	@ (8004780 <I2C_ITSlaveCplt+0x2d8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d105      	bne.n	800463c <I2C_ITSlaveCplt+0x194>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	b29b      	uxth	r3, r3
 800463a:	e004      	b.n	8004646 <I2C_ITSlaveCplt+0x19e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	b29b      	uxth	r3, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800464a:	e0a2      	b.n	8004792 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 809d 	beq.w	8004792 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004666:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8090 	beq.w	8004792 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <I2C_ITSlaveCplt+0x29c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d059      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <I2C_ITSlaveCplt+0x2a0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d053      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2e      	ldr	r2, [pc, #184]	@ (800474c <I2C_ITSlaveCplt+0x2a4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04d      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2c      	ldr	r2, [pc, #176]	@ (8004750 <I2C_ITSlaveCplt+0x2a8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d047      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004754 <I2C_ITSlaveCplt+0x2ac>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d041      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a28      	ldr	r2, [pc, #160]	@ (8004758 <I2C_ITSlaveCplt+0x2b0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d03b      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <I2C_ITSlaveCplt+0x2b4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d035      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a24      	ldr	r2, [pc, #144]	@ (8004760 <I2C_ITSlaveCplt+0x2b8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02f      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a22      	ldr	r2, [pc, #136]	@ (8004764 <I2C_ITSlaveCplt+0x2bc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d029      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a20      	ldr	r2, [pc, #128]	@ (8004768 <I2C_ITSlaveCplt+0x2c0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d023      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1e      	ldr	r2, [pc, #120]	@ (800476c <I2C_ITSlaveCplt+0x2c4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01d      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <I2C_ITSlaveCplt+0x2c8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d017      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <I2C_ITSlaveCplt+0x2cc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d011      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <I2C_ITSlaveCplt+0x2d0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a16      	ldr	r2, [pc, #88]	@ (800477c <I2C_ITSlaveCplt+0x2d4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d005      	beq.n	8004732 <I2C_ITSlaveCplt+0x28a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a14      	ldr	r2, [pc, #80]	@ (8004780 <I2C_ITSlaveCplt+0x2d8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d128      	bne.n	8004784 <I2C_ITSlaveCplt+0x2dc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b29b      	uxth	r3, r3
 800473c:	e027      	b.n	800478e <I2C_ITSlaveCplt+0x2e6>
 800473e:	bf00      	nop
 8004740:	fe00e800 	.word	0xfe00e800
 8004744:	40020010 	.word	0x40020010
 8004748:	40020028 	.word	0x40020028
 800474c:	40020040 	.word	0x40020040
 8004750:	40020058 	.word	0x40020058
 8004754:	40020070 	.word	0x40020070
 8004758:	40020088 	.word	0x40020088
 800475c:	400200a0 	.word	0x400200a0
 8004760:	400200b8 	.word	0x400200b8
 8004764:	40020410 	.word	0x40020410
 8004768:	40020428 	.word	0x40020428
 800476c:	40020440 	.word	0x40020440
 8004770:	40020458 	.word	0x40020458
 8004774:	40020470 	.word	0x40020470
 8004778:	40020488 	.word	0x40020488
 800477c:	400204a0 	.word	0x400204a0
 8004780:	400204b8 	.word	0x400204b8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	b29b      	uxth	r3, r3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ec:	f043 0204 	orr.w	r2, r3, #4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d049      	beq.n	8004892 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004804:	2b00      	cmp	r3, #0
 8004806:	d044      	beq.n	8004892 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d128      	bne.n	8004864 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b28      	cmp	r3, #40	@ 0x28
 800481c:	d108      	bne.n	8004830 <I2C_ITSlaveCplt+0x388>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004824:	d104      	bne.n	8004830 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004826:	6979      	ldr	r1, [r7, #20]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f891 	bl	8004950 <I2C_ITListenCplt>
 800482e:	e030      	b.n	8004892 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b29      	cmp	r3, #41	@ 0x29
 800483a:	d10e      	bne.n	800485a <I2C_ITSlaveCplt+0x3b2>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004842:	d00a      	beq.n	800485a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2210      	movs	r2, #16
 800484a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f9ea 	bl	8004c26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fdcc 	bl	80043f0 <I2C_ITSlaveSeqCplt>
 8004858:	e01b      	b.n	8004892 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2210      	movs	r2, #16
 8004860:	61da      	str	r2, [r3, #28]
 8004862:	e016      	b.n	8004892 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2210      	movs	r2, #16
 800486a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004870:	f043 0204 	orr.w	r2, r3, #4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <I2C_ITSlaveCplt+0x3de>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004884:	d105      	bne.n	8004892 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8b3 	bl	80049f8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d010      	beq.n	80048ca <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8a2 	bl	80049f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b28      	cmp	r3, #40	@ 0x28
 80048be:	d141      	bne.n	8004944 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f844 	bl	8004950 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048c8:	e03c      	b.n	8004944 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d2:	d014      	beq.n	80048fe <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fd8b 	bl	80043f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1b      	ldr	r2, [pc, #108]	@ (800494c <I2C_ITSlaveCplt+0x4a4>)
 80048de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fbd1 	bl	800409e <HAL_I2C_ListenCpltCallback>
}
 80048fc:	e022      	b.n	8004944 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b22      	cmp	r3, #34	@ 0x22
 8004908:	d10e      	bne.n	8004928 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fba4 	bl	800406e <HAL_I2C_SlaveRxCpltCallback>
}
 8004926:	e00d      	b.n	8004944 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fb8b 	bl	800405a <HAL_I2C_SlaveTxCpltCallback>
}
 8004944:	bf00      	nop
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	ffff0000 	.word	0xffff0000

08004950 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a25      	ldr	r2, [pc, #148]	@ (80049f4 <I2C_ITListenCplt+0xa4>)
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d022      	beq.n	80049cc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049cc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb5f 	bl	8005094 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2210      	movs	r2, #16
 80049dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fb59 	bl	800409e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	ffff0000 	.word	0xffff0000

080049f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a6d      	ldr	r2, [pc, #436]	@ (8004bcc <I2C_ITError+0x1d4>)
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b28      	cmp	r3, #40	@ 0x28
 8004a2e:	d005      	beq.n	8004a3c <I2C_ITError+0x44>
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b29      	cmp	r3, #41	@ 0x29
 8004a34:	d002      	beq.n	8004a3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a3a:	d10b      	bne.n	8004a54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a3c:	2103      	movs	r1, #3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fb28 	bl	8005094 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2228      	movs	r2, #40	@ 0x28
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a60      	ldr	r2, [pc, #384]	@ (8004bd0 <I2C_ITError+0x1d8>)
 8004a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a52:	e030      	b.n	8004ab6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a54:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb1b 	bl	8005094 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8e1 	bl	8004c26 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b60      	cmp	r3, #96	@ 0x60
 8004a6e:	d01f      	beq.n	8004ab0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d114      	bne.n	8004ab0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d109      	bne.n	8004aa8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa0:	f043 0204 	orr.w	r2, r3, #4
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2220      	movs	r2, #32
 8004aae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d039      	beq.n	8004b38 <I2C_ITError+0x140>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b11      	cmp	r3, #17
 8004ac8:	d002      	beq.n	8004ad0 <I2C_ITError+0xd8>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b21      	cmp	r3, #33	@ 0x21
 8004ace:	d133      	bne.n	8004b38 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ade:	d107      	bne.n	8004af0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004aee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fc73 	bl	80033e0 <HAL_DMA_GetState>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d017      	beq.n	8004b30 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	4a33      	ldr	r2, [pc, #204]	@ (8004bd4 <I2C_ITError+0x1dc>)
 8004b06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fabb 	bl	8002090 <HAL_DMA_Abort_IT>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d04d      	beq.n	8004bbc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b2e:	e045      	b.n	8004bbc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f851 	bl	8004bd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b36:	e041      	b.n	8004bbc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d039      	beq.n	8004bb4 <I2C_ITError+0x1bc>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b12      	cmp	r3, #18
 8004b44:	d002      	beq.n	8004b4c <I2C_ITError+0x154>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b22      	cmp	r3, #34	@ 0x22
 8004b4a:	d133      	bne.n	8004bb4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b5a:	d107      	bne.n	8004b6c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fc35 	bl	80033e0 <HAL_DMA_GetState>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d017      	beq.n	8004bac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	4a14      	ldr	r2, [pc, #80]	@ (8004bd4 <I2C_ITError+0x1dc>)
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fa7d 	bl	8002090 <HAL_DMA_Abort_IT>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d011      	beq.n	8004bc0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004baa:	e009      	b.n	8004bc0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f813 	bl	8004bd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bb2:	e005      	b.n	8004bc0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f80f 	bl	8004bd8 <I2C_TreatErrorCallback>
  }
}
 8004bba:	e002      	b.n	8004bc2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc0:	bf00      	nop
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	ffff0000 	.word	0xffff0000
 8004bd0:	080040f7 	.word	0x080040f7
 8004bd4:	08004c6f 	.word	0x08004c6f

08004bd8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b60      	cmp	r3, #96	@ 0x60
 8004bea:	d10e      	bne.n	8004c0a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fa5f 	bl	80040c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c08:	e009      	b.n	8004c1e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fa4a 	bl	80040b2 <HAL_I2C_ErrorCallback>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d103      	bne.n	8004c44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d007      	beq.n	8004c62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	619a      	str	r2, [r3, #24]
  }
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	2200      	movs	r2, #0
 8004c8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	2200      	movs	r2, #0
 8004c9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f7ff ff9b 	bl	8004bd8 <I2C_TreatErrorCallback>
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cba:	e03b      	b.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8d5 	bl	8004e70 <I2C_IsErrorOccurred>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e041      	b.n	8004d54 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d02d      	beq.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd8:	f7fc fa42 	bl	8001160 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d122      	bne.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d113      	bne.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d10:	f043 0220 	orr.w	r2, r3, #32
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e00f      	b.n	8004d54 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d0b4      	beq.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d68:	e033      	b.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f87e 	bl	8004e70 <I2C_IsErrorOccurred>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e031      	b.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d025      	beq.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fc f9eb 	bl	8001160 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11a      	bne.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d013      	beq.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e007      	b.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d1c4      	bne.n	8004d6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df6:	e02f      	b.n	8004e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f837 	bl	8004e70 <I2C_IsErrorOccurred>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e02d      	b.n	8004e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fc f9a8 	bl	8001160 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11a      	bne.n	8004e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d013      	beq.n	8004e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e007      	b.n	8004e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d1c8      	bne.n	8004df8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	@ 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d068      	beq.n	8004f6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ea4:	e049      	b.n	8004f3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d045      	beq.n	8004f3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004eae:	f7fc f957 	bl	8001160 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d302      	bcc.n	8004ec4 <I2C_IsErrorOccurred+0x54>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d13a      	bne.n	8004f3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ece:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ed6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee6:	d121      	bne.n	8004f2c <I2C_IsErrorOccurred+0xbc>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eee:	d01d      	beq.n	8004f2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d01a      	beq.n	8004f2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f06:	f7fc f92b 	bl	8001160 <HAL_GetTick>
 8004f0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f0c:	e00e      	b.n	8004f2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f0e:	f7fc f927 	bl	8001160 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b19      	cmp	r3, #25
 8004f1a:	d907      	bls.n	8004f2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f043 0320 	orr.w	r3, r3, #32
 8004f22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004f2a:	e006      	b.n	8004f3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d1e9      	bne.n	8004f0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d003      	beq.n	8004f50 <I2C_IsErrorOccurred+0xe0>
 8004f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0aa      	beq.n	8004ea6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d103      	bne.n	8004f60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	f043 0304 	orr.w	r3, r3, #4
 8004f66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f043 0308 	orr.w	r3, r3, #8
 8004fa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01c      	beq.n	800501e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff fe1e 	bl	8004c26 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <I2C_IsErrorOccurred+0x1bc>)
 8004ff6:	400b      	ands	r3, r1
 8004ff8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800501e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005022:	4618      	mov	r0, r3
 8005024:	3728      	adds	r7, #40	@ 0x28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	fe00e800 	.word	0xfe00e800

08005030 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	4613      	mov	r3, r2
 8005040:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005048:	7a7b      	ldrb	r3, [r7, #9]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005050:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	4313      	orrs	r3, r2
 800505a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800505e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	0d5b      	lsrs	r3, r3, #21
 800506a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800506e:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <I2C_TransferConfig+0x60>)
 8005070:	430b      	orrs	r3, r1
 8005072:	43db      	mvns	r3, r3
 8005074:	ea02 0103 	and.w	r1, r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	03ff63ff 	.word	0x03ff63ff

08005094 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00f      	beq.n	80050ce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80050b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050c2:	2b28      	cmp	r3, #40	@ 0x28
 80050c4:	d003      	beq.n	80050ce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80050cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00f      	beq.n	80050f8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80050de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050ec:	2b28      	cmp	r3, #40	@ 0x28
 80050ee:	d003      	beq.n	80050f8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80050f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	da03      	bge.n	8005108 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005106:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005108:	887b      	ldrh	r3, [r7, #2]
 800510a:	2b10      	cmp	r3, #16
 800510c:	d103      	bne.n	8005116 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	2b20      	cmp	r3, #32
 800511a:	d103      	bne.n	8005124 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f043 0320 	orr.w	r3, r3, #32
 8005122:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005124:	887b      	ldrh	r3, [r7, #2]
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d103      	bne.n	8005132 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005130:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	43da      	mvns	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	400a      	ands	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b20      	cmp	r3, #32
 8005164:	d138      	bne.n	80051d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005170:	2302      	movs	r3, #2
 8005172:	e032      	b.n	80051da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	@ 0x24
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d139      	bne.n	8005270 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005206:	2302      	movs	r3, #2
 8005208:	e033      	b.n	8005272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2224      	movs	r2, #36	@ 0x24
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005238:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	e000      	b.n	8005272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
  }
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005288:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d00a      	beq.n	80052aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005294:	4b16      	ldr	r3, [pc, #88]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01f      	b.n	80052e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e01d      	b.n	80052e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052aa:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	490f      	ldr	r1, [pc, #60]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052ba:	f7fb ff51 	bl	8001160 <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c0:	e009      	b.n	80052d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052c2:	f7fb ff4d 	bl	8001160 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052d0:	d901      	bls.n	80052d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e007      	b.n	80052e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_PWREx_ConfigSupply+0x70>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d1ee      	bne.n	80052c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	58024800 	.word	0x58024800

080052f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08c      	sub	sp, #48	@ 0x30
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f000 bc1f 	b.w	8005b46 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80b3 	beq.w	800547c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4b95      	ldr	r3, [pc, #596]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800531e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005320:	4b92      	ldr	r3, [pc, #584]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	2b10      	cmp	r3, #16
 800532a:	d007      	beq.n	800533c <HAL_RCC_OscConfig+0x48>
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	2b18      	cmp	r3, #24
 8005330:	d112      	bne.n	8005358 <HAL_RCC_OscConfig+0x64>
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d10d      	bne.n	8005358 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533c:	4b8b      	ldr	r3, [pc, #556]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8098 	beq.w	800547a <HAL_RCC_OscConfig+0x186>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f040 8093 	bne.w	800547a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e3f6      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005360:	d106      	bne.n	8005370 <HAL_RCC_OscConfig+0x7c>
 8005362:	4b82      	ldr	r3, [pc, #520]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a81      	ldr	r2, [pc, #516]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e058      	b.n	8005422 <HAL_RCC_OscConfig+0x12e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d112      	bne.n	800539e <HAL_RCC_OscConfig+0xaa>
 8005378:	4b7c      	ldr	r3, [pc, #496]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a7b      	ldr	r2, [pc, #492]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800537e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4b79      	ldr	r3, [pc, #484]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a78      	ldr	r2, [pc, #480]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800538a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	4b76      	ldr	r3, [pc, #472]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a75      	ldr	r2, [pc, #468]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e041      	b.n	8005422 <HAL_RCC_OscConfig+0x12e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053a6:	d112      	bne.n	80053ce <HAL_RCC_OscConfig+0xda>
 80053a8:	4b70      	ldr	r3, [pc, #448]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6f      	ldr	r2, [pc, #444]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b6d      	ldr	r3, [pc, #436]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a6c      	ldr	r2, [pc, #432]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b6a      	ldr	r3, [pc, #424]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a69      	ldr	r2, [pc, #420]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e029      	b.n	8005422 <HAL_RCC_OscConfig+0x12e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80053d6:	d112      	bne.n	80053fe <HAL_RCC_OscConfig+0x10a>
 80053d8:	4b64      	ldr	r3, [pc, #400]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a63      	ldr	r2, [pc, #396]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b61      	ldr	r3, [pc, #388]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a60      	ldr	r2, [pc, #384]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	4b5e      	ldr	r3, [pc, #376]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5d      	ldr	r2, [pc, #372]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80053f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e011      	b.n	8005422 <HAL_RCC_OscConfig+0x12e>
 80053fe:	4b5b      	ldr	r3, [pc, #364]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5a      	ldr	r2, [pc, #360]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b58      	ldr	r3, [pc, #352]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a57      	ldr	r2, [pc, #348]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b55      	ldr	r3, [pc, #340]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a54      	ldr	r2, [pc, #336]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800541c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005420:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d013      	beq.n	8005452 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fb fe99 	bl	8001160 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005432:	f7fb fe95 	bl	8001160 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b64      	cmp	r3, #100	@ 0x64
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e380      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005444:	4b49      	ldr	r3, [pc, #292]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x13e>
 8005450:	e014      	b.n	800547c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fb fe85 	bl	8001160 <HAL_GetTick>
 8005456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545a:	f7fb fe81 	bl	8001160 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b64      	cmp	r3, #100	@ 0x64
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e36c      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800546c:	4b3f      	ldr	r3, [pc, #252]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0x166>
 8005478:	e000      	b.n	800547c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 808c 	beq.w	80055a2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548a:	4b38      	ldr	r3, [pc, #224]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005492:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005494:	4b35      	ldr	r3, [pc, #212]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_RCC_OscConfig+0x1bc>
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2b18      	cmp	r3, #24
 80054a4:	d137      	bne.n	8005516 <HAL_RCC_OscConfig+0x222>
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d132      	bne.n	8005516 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b0:	4b2e      	ldr	r3, [pc, #184]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_OscConfig+0x1d4>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e33e      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054c8:	4b28      	ldr	r3, [pc, #160]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 0219 	bic.w	r2, r3, #25
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4925      	ldr	r1, [pc, #148]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fb fe41 	bl	8001160 <HAL_GetTick>
 80054de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e2:	f7fb fe3d 	bl	8001160 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e328      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054f4:	4b1d      	ldr	r3, [pc, #116]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b1a      	ldr	r3, [pc, #104]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	4917      	ldr	r1, [pc, #92]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005514:	e045      	b.n	80055a2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d028      	beq.n	8005570 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800551e:	4b13      	ldr	r3, [pc, #76]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 0219 	bic.w	r2, r3, #25
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4910      	ldr	r1, [pc, #64]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fb fe16 	bl	8001160 <HAL_GetTick>
 8005534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fb fe12 	bl	8001160 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e2fd      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554a:	4b08      	ldr	r3, [pc, #32]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	061b      	lsls	r3, r3, #24
 8005564:	4901      	ldr	r1, [pc, #4]	@ (800556c <HAL_RCC_OscConfig+0x278>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
 800556a:	e01a      	b.n	80055a2 <HAL_RCC_OscConfig+0x2ae>
 800556c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005570:	4b97      	ldr	r3, [pc, #604]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a96      	ldr	r2, [pc, #600]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fb fdf0 	bl	8001160 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005584:	f7fb fdec 	bl	8001160 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e2d7      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005596:	4b8e      	ldr	r3, [pc, #568]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d06a      	beq.n	8005684 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ae:	4b88      	ldr	r3, [pc, #544]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055b8:	4b85      	ldr	r3, [pc, #532]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d007      	beq.n	80055d4 <HAL_RCC_OscConfig+0x2e0>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b18      	cmp	r3, #24
 80055c8:	d11b      	bne.n	8005602 <HAL_RCC_OscConfig+0x30e>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d116      	bne.n	8005602 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d4:	4b7e      	ldr	r3, [pc, #504]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_OscConfig+0x2f8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b80      	cmp	r3, #128	@ 0x80
 80055e6:	d001      	beq.n	80055ec <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e2ac      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ec:	4b78      	ldr	r3, [pc, #480]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	4975      	ldr	r1, [pc, #468]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005600:	e040      	b.n	8005684 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d023      	beq.n	8005652 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800560a:	4b71      	ldr	r3, [pc, #452]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a70      	ldr	r2, [pc, #448]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fb fda3 	bl	8001160 <HAL_GetTick>
 800561a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800561e:	f7fb fd9f 	bl	8001160 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e28a      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005630:	4b67      	ldr	r3, [pc, #412]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800563c:	4b64      	ldr	r3, [pc, #400]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	061b      	lsls	r3, r3, #24
 800564a:	4961      	ldr	r1, [pc, #388]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800564c:	4313      	orrs	r3, r2
 800564e:	60cb      	str	r3, [r1, #12]
 8005650:	e018      	b.n	8005684 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005652:	4b5f      	ldr	r3, [pc, #380]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5e      	ldr	r2, [pc, #376]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fb fd7f 	bl	8001160 <HAL_GetTick>
 8005662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005666:	f7fb fd7b 	bl	8001160 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e266      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005678:	4b55      	ldr	r3, [pc, #340]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d036      	beq.n	80056fe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d019      	beq.n	80056cc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005698:	4b4d      	ldr	r3, [pc, #308]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800569a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569c:	4a4c      	ldr	r2, [pc, #304]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fb fd5c 	bl	8001160 <HAL_GetTick>
 80056a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ac:	f7fb fd58 	bl	8001160 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e243      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056be:	4b44      	ldr	r3, [pc, #272]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80056c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x3b8>
 80056ca:	e018      	b.n	80056fe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056cc:	4b40      	ldr	r3, [pc, #256]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80056ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d0:	4a3f      	ldr	r2, [pc, #252]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d8:	f7fb fd42 	bl	8001160 <HAL_GetTick>
 80056dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e0:	f7fb fd3e 	bl	8001160 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e229      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056f2:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80056f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d036      	beq.n	8005778 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005712:	4b2f      	ldr	r3, [pc, #188]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2e      	ldr	r2, [pc, #184]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005718:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800571c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800571e:	f7fb fd1f 	bl	8001160 <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005726:	f7fb fd1b 	bl	8001160 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e206      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005738:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x432>
 8005744:	e018      	b.n	8005778 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005746:	4b22      	ldr	r3, [pc, #136]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800574c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005750:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005752:	f7fb fd05 	bl	8001160 <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800575a:	f7fb fd01 	bl	8001160 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e1ec      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800576c:	4b18      	ldr	r3, [pc, #96]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80af 	beq.w	80058e4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005786:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <HAL_RCC_OscConfig+0x4e0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a12      	ldr	r2, [pc, #72]	@ (80057d4 <HAL_RCC_OscConfig+0x4e0>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005790:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005792:	f7fb fce5 	bl	8001160 <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579a:	f7fb fce1 	bl	8001160 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b64      	cmp	r3, #100	@ 0x64
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e1cc      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ac:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <HAL_RCC_OscConfig+0x4e0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10b      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4e4>
 80057c0:	4b03      	ldr	r3, [pc, #12]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	4a02      	ldr	r2, [pc, #8]	@ (80057d0 <HAL_RCC_OscConfig+0x4dc>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80057cc:	e05b      	b.n	8005886 <HAL_RCC_OscConfig+0x592>
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	58024800 	.word	0x58024800
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d112      	bne.n	8005806 <HAL_RCC_OscConfig+0x512>
 80057e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80057e6:	f023 0301 	bic.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ec:	4b9a      	ldr	r3, [pc, #616]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	4a99      	ldr	r2, [pc, #612]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80057f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f8:	4b97      	ldr	r3, [pc, #604]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fc:	4a96      	ldr	r2, [pc, #600]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80057fe:	f023 0304 	bic.w	r3, r3, #4
 8005802:	6713      	str	r3, [r2, #112]	@ 0x70
 8005804:	e03f      	b.n	8005886 <HAL_RCC_OscConfig+0x592>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b05      	cmp	r3, #5
 800580c:	d112      	bne.n	8005834 <HAL_RCC_OscConfig+0x540>
 800580e:	4b92      	ldr	r3, [pc, #584]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005812:	4a91      	ldr	r2, [pc, #580]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005814:	f043 0304 	orr.w	r3, r3, #4
 8005818:	6713      	str	r3, [r2, #112]	@ 0x70
 800581a:	4b8f      	ldr	r3, [pc, #572]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581e:	4a8e      	ldr	r2, [pc, #568]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005824:	6713      	str	r3, [r2, #112]	@ 0x70
 8005826:	4b8c      	ldr	r3, [pc, #560]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582a:	4a8b      	ldr	r2, [pc, #556]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6713      	str	r3, [r2, #112]	@ 0x70
 8005832:	e028      	b.n	8005886 <HAL_RCC_OscConfig+0x592>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b85      	cmp	r3, #133	@ 0x85
 800583a:	d112      	bne.n	8005862 <HAL_RCC_OscConfig+0x56e>
 800583c:	4b86      	ldr	r3, [pc, #536]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005840:	4a85      	ldr	r2, [pc, #532]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	6713      	str	r3, [r2, #112]	@ 0x70
 8005848:	4b83      	ldr	r3, [pc, #524]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584c:	4a82      	ldr	r2, [pc, #520]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800584e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005852:	6713      	str	r3, [r2, #112]	@ 0x70
 8005854:	4b80      	ldr	r3, [pc, #512]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005858:	4a7f      	ldr	r2, [pc, #508]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005860:	e011      	b.n	8005886 <HAL_RCC_OscConfig+0x592>
 8005862:	4b7d      	ldr	r3, [pc, #500]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005866:	4a7c      	ldr	r2, [pc, #496]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	6713      	str	r3, [r2, #112]	@ 0x70
 800586e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	4a79      	ldr	r2, [pc, #484]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005874:	f023 0304 	bic.w	r3, r3, #4
 8005878:	6713      	str	r3, [r2, #112]	@ 0x70
 800587a:	4b77      	ldr	r3, [pc, #476]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	4a76      	ldr	r2, [pc, #472]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005884:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d015      	beq.n	80058ba <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588e:	f7fb fc67 	bl	8001160 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fb fc63 	bl	8001160 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e14c      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ee      	beq.n	8005896 <HAL_RCC_OscConfig+0x5a2>
 80058b8:	e014      	b.n	80058e4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fb fc51 	bl	8001160 <HAL_GetTick>
 80058be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fb fc4d 	bl	8001160 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e136      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ee      	bne.n	80058c2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 812b 	beq.w	8005b44 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058f6:	2b18      	cmp	r3, #24
 80058f8:	f000 80bb 	beq.w	8005a72 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	2b02      	cmp	r3, #2
 8005902:	f040 8095 	bne.w	8005a30 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005906:	4b54      	ldr	r3, [pc, #336]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a53      	ldr	r2, [pc, #332]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800590c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005912:	f7fb fc25 	bl	8001160 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fb fc21 	bl	8001160 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e10c      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800592c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005938:	4b47      	ldr	r3, [pc, #284]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800593a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800593c:	4b47      	ldr	r3, [pc, #284]	@ (8005a5c <HAL_RCC_OscConfig+0x768>)
 800593e:	4013      	ands	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005948:	0112      	lsls	r2, r2, #4
 800594a:	430a      	orrs	r2, r1
 800594c:	4942      	ldr	r1, [pc, #264]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800594e:	4313      	orrs	r3, r2
 8005950:	628b      	str	r3, [r1, #40]	@ 0x28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005956:	3b01      	subs	r3, #1
 8005958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005960:	3b01      	subs	r3, #1
 8005962:	025b      	lsls	r3, r3, #9
 8005964:	b29b      	uxth	r3, r3
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	3b01      	subs	r3, #1
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597a:	3b01      	subs	r3, #1
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005982:	4935      	ldr	r1, [pc, #212]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005984:	4313      	orrs	r3, r2
 8005986:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005988:	4b33      	ldr	r3, [pc, #204]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4a32      	ldr	r2, [pc, #200]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005994:	4b30      	ldr	r3, [pc, #192]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005998:	4b31      	ldr	r3, [pc, #196]	@ (8005a60 <HAL_RCC_OscConfig+0x76c>)
 800599a:	4013      	ands	r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059a0:	00d2      	lsls	r2, r2, #3
 80059a2:	492d      	ldr	r1, [pc, #180]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ac:	f023 020c 	bic.w	r2, r3, #12
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	4928      	ldr	r1, [pc, #160]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059ba:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059be:	f023 0202 	bic.w	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c6:	4924      	ldr	r1, [pc, #144]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059cc:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	4a21      	ldr	r2, [pc, #132]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80059f0:	4b19      	ldr	r3, [pc, #100]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059fc:	4b16      	ldr	r3, [pc, #88]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fb fbaa 	bl	8001160 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fb fba6 	bl	8001160 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e091      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x71c>
 8005a2e:	e089      	b.n	8005b44 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <HAL_RCC_OscConfig+0x764>)
 8005a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fb fb90 	bl	8001160 <HAL_GetTick>
 8005a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a42:	e00f      	b.n	8005a64 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fb fb8c 	bl	8001160 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d908      	bls.n	8005a64 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e077      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	fffffc0c 	.word	0xfffffc0c
 8005a60:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a64:	4b3a      	ldr	r3, [pc, #232]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e9      	bne.n	8005a44 <HAL_RCC_OscConfig+0x750>
 8005a70:	e068      	b.n	8005b44 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a72:	4b37      	ldr	r3, [pc, #220]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a78:	4b35      	ldr	r3, [pc, #212]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d031      	beq.n	8005aea <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f003 0203 	and.w	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d12a      	bne.n	8005aea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d122      	bne.n	8005aea <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aae:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d11a      	bne.n	8005aea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	0a5b      	lsrs	r3, r3, #9
 8005ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d111      	bne.n	8005aea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d108      	bne.n	8005aea <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	0e1b      	lsrs	r3, r3, #24
 8005adc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d001      	beq.n	8005aee <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e02b      	b.n	8005b46 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005aee:	4b18      	ldr	r3, [pc, #96]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d01f      	beq.n	8005b44 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b04:	4b12      	ldr	r3, [pc, #72]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4a11      	ldr	r2, [pc, #68]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b10:	f7fb fb26 	bl	8001160 <HAL_GetTick>
 8005b14:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b16:	bf00      	nop
 8005b18:	f7fb fb22 	bl	8001160 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d0f9      	beq.n	8005b18 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b24:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b28:	4b0a      	ldr	r3, [pc, #40]	@ (8005b54 <HAL_RCC_OscConfig+0x860>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b30:	00d2      	lsls	r2, r2, #3
 8005b32:	4907      	ldr	r1, [pc, #28]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b38:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	4a04      	ldr	r2, [pc, #16]	@ (8005b50 <HAL_RCC_OscConfig+0x85c>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3730      	adds	r7, #48	@ 0x30
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400
 8005b54:	ffff0007 	.word	0xffff0007

08005b58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e19c      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d910      	bls.n	8005b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b87      	ldr	r3, [pc, #540]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 020f 	bic.w	r2, r3, #15
 8005b82:	4985      	ldr	r1, [pc, #532]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	4b83      	ldr	r3, [pc, #524]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e184      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d010      	beq.n	8005bca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	4b7b      	ldr	r3, [pc, #492]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d908      	bls.n	8005bca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bb8:	4b78      	ldr	r3, [pc, #480]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	4975      	ldr	r1, [pc, #468]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	4b70      	ldr	r3, [pc, #448]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d908      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005be6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	496a      	ldr	r1, [pc, #424]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	4b64      	ldr	r3, [pc, #400]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d908      	bls.n	8005c26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c14:	4b61      	ldr	r3, [pc, #388]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	495e      	ldr	r1, [pc, #376]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d010      	beq.n	8005c54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	4b59      	ldr	r3, [pc, #356]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d908      	bls.n	8005c54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c42:	4b56      	ldr	r3, [pc, #344]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4953      	ldr	r1, [pc, #332]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	4b4d      	ldr	r3, [pc, #308]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d908      	bls.n	8005c82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c70:	4b4a      	ldr	r3, [pc, #296]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f023 020f 	bic.w	r2, r3, #15
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4947      	ldr	r1, [pc, #284]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d055      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c8e:	4b43      	ldr	r3, [pc, #268]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4940      	ldr	r1, [pc, #256]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d121      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0f6      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cc0:	4b36      	ldr	r3, [pc, #216]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d115      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0ea      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cd8:	4b30      	ldr	r3, [pc, #192]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0de      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0d6      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cf8:	4b28      	ldr	r3, [pc, #160]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f023 0207 	bic.w	r2, r3, #7
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4925      	ldr	r1, [pc, #148]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fb fa29 	bl	8001160 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d10:	e00a      	b.n	8005d28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d12:	f7fb fa25 	bl	8001160 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0be      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d28:	4b1c      	ldr	r3, [pc, #112]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d1eb      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d010      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d208      	bcs.n	8005d68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d56:	4b11      	ldr	r3, [pc, #68]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f023 020f 	bic.w	r2, r3, #15
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	490e      	ldr	r1, [pc, #56]	@ (8005d9c <HAL_RCC_ClockConfig+0x244>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d68:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d214      	bcs.n	8005da0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 020f 	bic.w	r2, r3, #15
 8005d7e:	4906      	ldr	r1, [pc, #24]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b04      	ldr	r3, [pc, #16]	@ (8005d98 <HAL_RCC_ClockConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e086      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x34e>
 8005d98:	52002000 	.word	0x52002000
 8005d9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d208      	bcs.n	8005dce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4939      	ldr	r1, [pc, #228]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	4b34      	ldr	r3, [pc, #208]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d208      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dea:	4b31      	ldr	r3, [pc, #196]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	492e      	ldr	r1, [pc, #184]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	4b28      	ldr	r3, [pc, #160]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d208      	bcs.n	8005e2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e18:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	4922      	ldr	r1, [pc, #136]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d208      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e46:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	4917      	ldr	r1, [pc, #92]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005e58:	f000 f834 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b14      	ldr	r3, [pc, #80]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	4912      	ldr	r1, [pc, #72]	@ (8005eb4 <HAL_RCC_ClockConfig+0x35c>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005e76:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb0 <HAL_RCC_ClockConfig+0x358>)
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb4 <HAL_RCC_ClockConfig+0x35c>)
 8005e80:	5cd3      	ldrb	r3, [r2, r3]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb8 <HAL_RCC_ClockConfig+0x360>)
 8005e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e90:	4a0a      	ldr	r2, [pc, #40]	@ (8005ebc <HAL_RCC_ClockConfig+0x364>)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <HAL_RCC_ClockConfig+0x368>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa feee 	bl	8000c7c <HAL_InitTick>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	0800d7e8 	.word	0x0800d7e8
 8005eb8:	24000004 	.word	0x24000004
 8005ebc:	24000000 	.word	0x24000000
 8005ec0:	24000008 	.word	0x24000008

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b089      	sub	sp, #36	@ 0x24
 8005ec8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eca:	4bb3      	ldr	r3, [pc, #716]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed2:	2b18      	cmp	r3, #24
 8005ed4:	f200 8155 	bhi.w	8006182 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f45 	.word	0x08005f45
 8005ee4:	08006183 	.word	0x08006183
 8005ee8:	08006183 	.word	0x08006183
 8005eec:	08006183 	.word	0x08006183
 8005ef0:	08006183 	.word	0x08006183
 8005ef4:	08006183 	.word	0x08006183
 8005ef8:	08006183 	.word	0x08006183
 8005efc:	08006183 	.word	0x08006183
 8005f00:	08005f6b 	.word	0x08005f6b
 8005f04:	08006183 	.word	0x08006183
 8005f08:	08006183 	.word	0x08006183
 8005f0c:	08006183 	.word	0x08006183
 8005f10:	08006183 	.word	0x08006183
 8005f14:	08006183 	.word	0x08006183
 8005f18:	08006183 	.word	0x08006183
 8005f1c:	08006183 	.word	0x08006183
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08006183 	.word	0x08006183
 8005f28:	08006183 	.word	0x08006183
 8005f2c:	08006183 	.word	0x08006183
 8005f30:	08006183 	.word	0x08006183
 8005f34:	08006183 	.word	0x08006183
 8005f38:	08006183 	.word	0x08006183
 8005f3c:	08006183 	.word	0x08006183
 8005f40:	08005f77 	.word	0x08005f77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f44:	4b94      	ldr	r3, [pc, #592]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f50:	4b91      	ldr	r3, [pc, #580]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	4a90      	ldr	r2, [pc, #576]	@ (800619c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f62:	e111      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f64:	4b8d      	ldr	r3, [pc, #564]	@ (800619c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f66:	61bb      	str	r3, [r7, #24]
      break;
 8005f68:	e10e      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f6c:	61bb      	str	r3, [r7, #24]
      break;
 8005f6e:	e10b      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f70:	4b8c      	ldr	r3, [pc, #560]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f72:	61bb      	str	r3, [r7, #24]
      break;
 8005f74:	e108      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f76:	4b88      	ldr	r3, [pc, #544]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f80:	4b85      	ldr	r3, [pc, #532]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f8c:	4b82      	ldr	r3, [pc, #520]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f96:	4b80      	ldr	r3, [pc, #512]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9a:	08db      	lsrs	r3, r3, #3
 8005f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80e1 	beq.w	800617c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	f000 8083 	beq.w	80060c8 <HAL_RCC_GetSysClockFreq+0x204>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	f200 80a1 	bhi.w	800610c <HAL_RCC_GetSysClockFreq+0x248>
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x114>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d056      	beq.n	8006084 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005fd6:	e099      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d02d      	beq.n	8006040 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	08db      	lsrs	r3, r3, #3
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	4a6b      	ldr	r2, [pc, #428]	@ (800619c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b62      	ldr	r3, [pc, #392]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006022:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800603e:	e087      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80061ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b51      	ldr	r3, [pc, #324]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a02 	vldr	s12, [r7, #8]
 8006066:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006082:	e065      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80061b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b40      	ldr	r3, [pc, #256]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060c6:	e043      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80061b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060da:	4b2f      	ldr	r3, [pc, #188]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800610a:	e021      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80061b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b1e      	ldr	r3, [pc, #120]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006132:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800614e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006150:	4b11      	ldr	r3, [pc, #68]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006154:	0a5b      	lsrs	r3, r3, #9
 8006156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800615a:	3301      	adds	r3, #1
 800615c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006168:	edd7 6a07 	vldr	s13, [r7, #28]
 800616c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006174:	ee17 3a90 	vmov	r3, s15
 8006178:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800617a:	e005      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
      break;
 8006180:	e002      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006182:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006184:	61bb      	str	r3, [r7, #24]
      break;
 8006186:	bf00      	nop
  }

  return sysclockfreq;
 8006188:	69bb      	ldr	r3, [r7, #24]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3724      	adds	r7, #36	@ 0x24
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	58024400 	.word	0x58024400
 800619c:	03d09000 	.word	0x03d09000
 80061a0:	003d0900 	.word	0x003d0900
 80061a4:	016e3600 	.word	0x016e3600
 80061a8:	46000000 	.word	0x46000000
 80061ac:	4c742400 	.word	0x4c742400
 80061b0:	4a742400 	.word	0x4a742400
 80061b4:	4bb71b00 	.word	0x4bb71b00

080061b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80061be:	f7ff fe81 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80061c2:	4602      	mov	r2, r0
 80061c4:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <HAL_RCC_GetHCLKFreq+0x50>)
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	490f      	ldr	r1, [pc, #60]	@ (800620c <HAL_RCC_GetHCLKFreq+0x54>)
 80061d0:	5ccb      	ldrb	r3, [r1, r3]
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	fa22 f303 	lsr.w	r3, r2, r3
 80061da:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80061dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <HAL_RCC_GetHCLKFreq+0x50>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	4a09      	ldr	r2, [pc, #36]	@ (800620c <HAL_RCC_GetHCLKFreq+0x54>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	4a07      	ldr	r2, [pc, #28]	@ (8006210 <HAL_RCC_GetHCLKFreq+0x58>)
 80061f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061f6:	4a07      	ldr	r2, [pc, #28]	@ (8006214 <HAL_RCC_GetHCLKFreq+0x5c>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061fc:	4b04      	ldr	r3, [pc, #16]	@ (8006210 <HAL_RCC_GetHCLKFreq+0x58>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	58024400 	.word	0x58024400
 800620c:	0800d7e8 	.word	0x0800d7e8
 8006210:	24000004 	.word	0x24000004
 8006214:	24000000 	.word	0x24000000

08006218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800621c:	f7ff ffcc 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 8006220:	4602      	mov	r2, r0
 8006222:	4b06      	ldr	r3, [pc, #24]	@ (800623c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	4904      	ldr	r1, [pc, #16]	@ (8006240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800622e:	5ccb      	ldrb	r3, [r1, r3]
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	58024400 	.word	0x58024400
 8006240:	0800d7e8 	.word	0x0800d7e8

08006244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006248:	f7ff ffb6 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 800624c:	4602      	mov	r2, r0
 800624e:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4904      	ldr	r1, [pc, #16]	@ (800626c <HAL_RCC_GetPCLK2Freq+0x28>)
 800625a:	5ccb      	ldrb	r3, [r1, r3]
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	58024400 	.word	0x58024400
 800626c:	0800d7e8 	.word	0x0800d7e8

08006270 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	223f      	movs	r2, #63	@ 0x3f
 800627e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006280:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0207 	and.w	r2, r3, #7
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800628c:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8006298:	4b14      	ldr	r3, [pc, #80]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80062a4:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80062b0:	4b0e      	ldr	r3, [pc, #56]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80062c8:	4b08      	ldr	r3, [pc, #32]	@ (80062ec <HAL_RCC_GetClockConfig+0x7c>)
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062d4:	4b06      	ldr	r3, [pc, #24]	@ (80062f0 <HAL_RCC_GetClockConfig+0x80>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	601a      	str	r2, [r3, #0]
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	58024400 	.word	0x58024400
 80062f0:	52002000 	.word	0x52002000

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f8:	b0c8      	sub	sp, #288	@ 0x120
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006300:	2300      	movs	r3, #0
 8006302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006306:	2300      	movs	r3, #0
 8006308:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006318:	2500      	movs	r5, #0
 800631a:	ea54 0305 	orrs.w	r3, r4, r5
 800631e:	d049      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006326:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800632a:	d02f      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800632c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006330:	d828      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006336:	d01a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006338:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800633c:	d822      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006346:	d007      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006348:	e01c      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4ba7      	ldr	r3, [pc, #668]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	4aa6      	ldr	r2, [pc, #664]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006356:	e01a      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800635c:	3308      	adds	r3, #8
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f001 fc43 	bl	8007bec <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800636c:	e00f      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800636e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006372:	3328      	adds	r3, #40	@ 0x28
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fcea 	bl	8007d50 <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006396:	4b94      	ldr	r3, [pc, #592]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800639e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a4:	4a90      	ldr	r2, [pc, #576]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063a6:	430b      	orrs	r3, r1
 80063a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80063aa:	e003      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80063c0:	f04f 0900 	mov.w	r9, #0
 80063c4:	ea58 0309 	orrs.w	r3, r8, r9
 80063c8:	d047      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d82a      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063f1 	.word	0x080063f1
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	08006415 	.word	0x08006415
 80063e8:	08006433 	.word	0x08006433
 80063ec:	08006433 	.word	0x08006433
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f0:	4b7d      	ldr	r3, [pc, #500]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	4a7c      	ldr	r2, [pc, #496]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063fc:	e01a      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006402:	3308      	adds	r3, #8
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fbf0 	bl	8007bec <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006412:	e00f      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006418:	3328      	adds	r3, #40	@ 0x28
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 fc97 	bl	8007d50 <RCCEx_PLL3_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006428:	e004      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006430:	e000      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800643c:	4b6a      	ldr	r3, [pc, #424]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006440:	f023 0107 	bic.w	r1, r3, #7
 8006444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644a:	4a67      	ldr	r2, [pc, #412]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800644c:	430b      	orrs	r3, r1
 800644e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006450:	e003      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006456:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800645a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006466:	f04f 0b00 	mov.w	fp, #0
 800646a:	ea5a 030b 	orrs.w	r3, sl, fp
 800646e:	d054      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006476:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800647a:	d036      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800647c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006480:	d82f      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006486:	d032      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800648c:	d829      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800648e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006490:	d02f      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006492:	2bc0      	cmp	r3, #192	@ 0xc0
 8006494:	d825      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006496:	2b80      	cmp	r3, #128	@ 0x80
 8006498:	d018      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800649a:	2b80      	cmp	r3, #128	@ 0x80
 800649c:	d821      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80064a2:	2b40      	cmp	r3, #64	@ 0x40
 80064a4:	d007      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80064a6:	e01c      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a8:	4b4f      	ldr	r3, [pc, #316]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	4a4e      	ldr	r2, [pc, #312]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80064b4:	e01e      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ba:	3308      	adds	r3, #8
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fb94 	bl	8007bec <RCCEx_PLL2_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80064ca:	e013      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064d0:	3328      	adds	r3, #40	@ 0x28
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fc3b 	bl	8007d50 <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80064e0:	e008      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e8:	e004      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80064ea:	bf00      	nop
 80064ec:	e002      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80064ee:	bf00      	nop
 80064f0:	e000      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80064f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80064fc:	4b3a      	ldr	r3, [pc, #232]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006500:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800650a:	4a37      	ldr	r2, [pc, #220]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650c:	430b      	orrs	r3, r1
 800650e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006516:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006526:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006530:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d05c      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800653a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800653e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006540:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006544:	d03b      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006546:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800654a:	d834      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006550:	d037      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006556:	d82e      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006558:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800655c:	d033      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800655e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006562:	d828      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006568:	d01a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800656a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656e:	d822      	bhi.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006578:	d007      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800657a:	e01c      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657c:	4b1a      	ldr	r3, [pc, #104]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006588:	e01e      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800658a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800658e:	3308      	adds	r3, #8
 8006590:	2100      	movs	r1, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fb2a 	bl	8007bec <RCCEx_PLL2_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800659e:	e013      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a4:	3328      	adds	r3, #40	@ 0x28
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 fbd1 	bl	8007d50 <RCCEx_PLL3_Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80065b4:	e008      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065bc:	e004      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80065be:	bf00      	nop
 80065c0:	e002      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80065c2:	bf00      	nop
 80065c4:	e000      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80065c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10d      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065de:	4a02      	ldr	r2, [pc, #8]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006600:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800660a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800660e:	460b      	mov	r3, r1
 8006610:	4313      	orrs	r3, r2
 8006612:	d03a      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661a:	2b30      	cmp	r3, #48	@ 0x30
 800661c:	d01f      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800661e:	2b30      	cmp	r3, #48	@ 0x30
 8006620:	d819      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006622:	2b20      	cmp	r3, #32
 8006624:	d00c      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006626:	2b20      	cmp	r3, #32
 8006628:	d815      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d019      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800662e:	2b10      	cmp	r3, #16
 8006630:	d111      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006632:	4bae      	ldr	r3, [pc, #696]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006636:	4aad      	ldr	r2, [pc, #692]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800663c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800663e:	e011      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006644:	3308      	adds	r3, #8
 8006646:	2102      	movs	r1, #2
 8006648:	4618      	mov	r0, r3
 800664a:	f001 facf 	bl	8007bec <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006654:	e006      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800665c:	e002      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800665e:	bf00      	nop
 8006660:	e000      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800666c:	4b9f      	ldr	r3, [pc, #636]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800666e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006670:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667a:	4a9c      	ldr	r2, [pc, #624]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800667c:	430b      	orrs	r3, r1
 800667e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006686:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800668a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006696:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d051      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80066aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b4:	d035      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ba:	d82e      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80066bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066c0:	d031      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80066c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066c6:	d828      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80066c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066cc:	d01a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80066ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d2:	d822      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066dc:	d007      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80066de:	e01c      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e0:	4b82      	ldr	r3, [pc, #520]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	4a81      	ldr	r2, [pc, #516]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80066ec:	e01c      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f2:	3308      	adds	r3, #8
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 fa78 	bl	8007bec <RCCEx_PLL2_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006708:	3328      	adds	r3, #40	@ 0x28
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f001 fb1f 	bl	8007d50 <RCCEx_PLL3_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006730:	4b6e      	ldr	r3, [pc, #440]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800673e:	4a6b      	ldr	r2, [pc, #428]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6513      	str	r3, [r2, #80]	@ 0x50
 8006744:	e003      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006746:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800674a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800674e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800675a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006764:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006768:	460b      	mov	r3, r1
 800676a:	4313      	orrs	r3, r2
 800676c:	d053      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006778:	d033      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800677a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800677e:	d82c      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006784:	d02f      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006786:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800678a:	d826      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800678c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006790:	d02b      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006796:	d820      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800679c:	d012      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800679e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a2:	d81a      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d022      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ac:	d115      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067b2:	3308      	adds	r3, #8
 80067b4:	2101      	movs	r1, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 fa18 	bl	8007bec <RCCEx_PLL2_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067c2:	e015      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	3328      	adds	r3, #40	@ 0x28
 80067ca:	2101      	movs	r1, #1
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fabf 	bl	8007d50 <RCCEx_PLL3_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067d8:	e00a      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80067e2:	bf00      	nop
 80067e4:	e004      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80067ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80067f8:	4b3c      	ldr	r3, [pc, #240]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006806:	4a39      	ldr	r2, [pc, #228]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006808:	430b      	orrs	r3, r1
 800680a:	6513      	str	r3, [r2, #80]	@ 0x50
 800680c:	e003      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006812:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006822:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800682c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006830:	460b      	mov	r3, r1
 8006832:	4313      	orrs	r3, r2
 8006834:	d060      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800683a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800683e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006842:	d039      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006844:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006848:	d832      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800684a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800684e:	d035      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006854:	d82c      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685a:	d031      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006860:	d826      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006866:	d02d      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006868:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800686c:	d820      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800686e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006872:	d012      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006878:	d81a      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d024      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800687e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006882:	d115      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006888:	3308      	adds	r3, #8
 800688a:	2101      	movs	r1, #1
 800688c:	4618      	mov	r0, r3
 800688e:	f001 f9ad 	bl	8007bec <RCCEx_PLL2_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006898:	e017      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800689a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689e:	3328      	adds	r3, #40	@ 0x28
 80068a0:	2101      	movs	r1, #1
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fa54 	bl	8007d50 <RCCEx_PLL3_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068ae:	e00c      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068b6:	e008      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80068b8:	bf00      	nop
 80068ba:	e006      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80068bc:	bf00      	nop
 80068be:	e004      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80068c0:	bf00      	nop
 80068c2:	e002      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80068c4:	bf00      	nop
 80068c6:	e000      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80068c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10e      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068e2:	4a02      	ldr	r2, [pc, #8]	@ (80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e8:	e006      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80068ea:	bf00      	nop
 80068ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800690e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d037      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800691c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800691e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006922:	d00e      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006928:	d816      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d018      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800692e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006932:	d111      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006934:	4bc4      	ldr	r3, [pc, #784]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	4ac3      	ldr	r2, [pc, #780]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800693a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800693e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006940:	e00f      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006946:	3308      	adds	r3, #8
 8006948:	2101      	movs	r1, #1
 800694a:	4618      	mov	r0, r3
 800694c:	f001 f94e 	bl	8007bec <RCCEx_PLL2_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006956:	e004      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006962:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800696a:	4bb7      	ldr	r3, [pc, #732]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800696c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006978:	4ab3      	ldr	r2, [pc, #716]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697a:	430b      	orrs	r3, r1
 800697c:	6513      	str	r3, [r2, #80]	@ 0x50
 800697e:	e003      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006984:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800699e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d039      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80069a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d81c      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80069b2:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069c9 	.word	0x080069c9
 80069c0:	080069d7 	.word	0x080069d7
 80069c4:	080069f5 	.word	0x080069f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b9f      	ldr	r3, [pc, #636]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4a9e      	ldr	r2, [pc, #632]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069d4:	e00f      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069da:	3308      	adds	r3, #8
 80069dc:	2102      	movs	r1, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 f904 	bl	8007bec <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069ea:	e004      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069f2:	e000      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80069f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069fe:	4b92      	ldr	r3, [pc, #584]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a02:	f023 0103 	bic.w	r1, r3, #3
 8006a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a0c:	4a8e      	ldr	r2, [pc, #568]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f000 8099 	beq.w	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a3e:	4b83      	ldr	r3, [pc, #524]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a82      	ldr	r2, [pc, #520]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a4a:	f7fa fb89 	bl	8001160 <HAL_GetTick>
 8006a4e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a52:	e00b      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a54:	f7fa fb84 	bl	8001160 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b64      	cmp	r3, #100	@ 0x64
 8006a62:	d903      	bls.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a6a:	e005      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a6c:	4b77      	ldr	r3, [pc, #476]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0ed      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006a78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d173      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a80:	4b71      	ldr	r3, [pc, #452]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a8c:	4053      	eors	r3, r2
 8006a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d015      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a96:	4b6c      	ldr	r3, [pc, #432]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a9e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aa2:	4b69      	ldr	r3, [pc, #420]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa6:	4a68      	ldr	r2, [pc, #416]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aae:	4b66      	ldr	r3, [pc, #408]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab2:	4a65      	ldr	r2, [pc, #404]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006aba:	4a63      	ldr	r2, [pc, #396]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ace:	d118      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fa fb46 	bl	8001160 <HAL_GetTick>
 8006ad4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ad8:	e00d      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ada:	f7fa fb41 	bl	8001160 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006ae4:	1ad2      	subs	r2, r2, r3
 8006ae6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d903      	bls.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006af4:	e005      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006af6:	4b54      	ldr	r3, [pc, #336]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0eb      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006b02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d129      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b1a:	d10e      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b2c:	091a      	lsrs	r2, r3, #4
 8006b2e:	4b48      	ldr	r3, [pc, #288]	@ (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	4a45      	ldr	r2, [pc, #276]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6113      	str	r3, [r2, #16]
 8006b38:	e005      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006b3a:	4b43      	ldr	r3, [pc, #268]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	4a42      	ldr	r2, [pc, #264]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b44:	6113      	str	r3, [r2, #16]
 8006b46:	4b40      	ldr	r3, [pc, #256]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b56:	4a3c      	ldr	r2, [pc, #240]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b5c:	e008      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006b66:	e003      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f002 0301 	and.w	r3, r2, #1
 8006b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f000 8090 	beq.w	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b9a:	2b28      	cmp	r3, #40	@ 0x28
 8006b9c:	d870      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006c89 	.word	0x08006c89
 8006ba8:	08006c81 	.word	0x08006c81
 8006bac:	08006c81 	.word	0x08006c81
 8006bb0:	08006c81 	.word	0x08006c81
 8006bb4:	08006c81 	.word	0x08006c81
 8006bb8:	08006c81 	.word	0x08006c81
 8006bbc:	08006c81 	.word	0x08006c81
 8006bc0:	08006c81 	.word	0x08006c81
 8006bc4:	08006c55 	.word	0x08006c55
 8006bc8:	08006c81 	.word	0x08006c81
 8006bcc:	08006c81 	.word	0x08006c81
 8006bd0:	08006c81 	.word	0x08006c81
 8006bd4:	08006c81 	.word	0x08006c81
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006c81 	.word	0x08006c81
 8006be4:	08006c6b 	.word	0x08006c6b
 8006be8:	08006c81 	.word	0x08006c81
 8006bec:	08006c81 	.word	0x08006c81
 8006bf0:	08006c81 	.word	0x08006c81
 8006bf4:	08006c81 	.word	0x08006c81
 8006bf8:	08006c81 	.word	0x08006c81
 8006bfc:	08006c81 	.word	0x08006c81
 8006c00:	08006c81 	.word	0x08006c81
 8006c04:	08006c89 	.word	0x08006c89
 8006c08:	08006c81 	.word	0x08006c81
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006c81 	.word	0x08006c81
 8006c14:	08006c81 	.word	0x08006c81
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006c81 	.word	0x08006c81
 8006c24:	08006c89 	.word	0x08006c89
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006c81 	.word	0x08006c81
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c89 	.word	0x08006c89
 8006c48:	58024400 	.word	0x58024400
 8006c4c:	58024800 	.word	0x58024800
 8006c50:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c58:	3308      	adds	r3, #8
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 ffc5 	bl	8007bec <RCCEx_PLL2_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c68:	e00f      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6e:	3328      	adds	r3, #40	@ 0x28
 8006c70:	2101      	movs	r1, #1
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f86c 	bl	8007d50 <RCCEx_PLL3_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c92:	4bc0      	ldr	r3, [pc, #768]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ca2:	4abc      	ldr	r2, [pc, #752]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ca8:	e003      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006caa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f002 0302 	and.w	r3, r2, #2
 8006cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006cc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d043      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d824      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006cde:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d31 	.word	0x08006d31
 8006ce8:	08006cfd 	.word	0x08006cfd
 8006cec:	08006d13 	.word	0x08006d13
 8006cf0:	08006d31 	.word	0x08006d31
 8006cf4:	08006d31 	.word	0x08006d31
 8006cf8:	08006d31 	.word	0x08006d31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d00:	3308      	adds	r3, #8
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 ff71 	bl	8007bec <RCCEx_PLL2_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d10:	e00f      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d16:	3328      	adds	r3, #40	@ 0x28
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 f818 	bl	8007d50 <RCCEx_PLL3_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d26:	e004      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d2e:	e000      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10b      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d3a:	4b96      	ldr	r3, [pc, #600]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d3e:	f023 0107 	bic.w	r1, r3, #7
 8006d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4a:	4a92      	ldr	r2, [pc, #584]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d50:	e003      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f002 0304 	and.w	r3, r2, #4
 8006d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4313      	orrs	r3, r2
 8006d78:	d043      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d824      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006dd9 	.word	0x08006dd9
 8006d90:	08006da5 	.word	0x08006da5
 8006d94:	08006dbb 	.word	0x08006dbb
 8006d98:	08006dd9 	.word	0x08006dd9
 8006d9c:	08006dd9 	.word	0x08006dd9
 8006da0:	08006dd9 	.word	0x08006dd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da8:	3308      	adds	r3, #8
 8006daa:	2101      	movs	r1, #1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 ff1d 	bl	8007bec <RCCEx_PLL2_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006db8:	e00f      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dbe:	3328      	adds	r3, #40	@ 0x28
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 ffc4 	bl	8007d50 <RCCEx_PLL3_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dce:	e004      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006de2:	4b6c      	ldr	r3, [pc, #432]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	f023 0107 	bic.w	r1, r3, #7
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006df2:	4a68      	ldr	r2, [pc, #416]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df8:	e003      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f002 0320 	and.w	r3, r2, #32
 8006e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e12:	2300      	movs	r3, #0
 8006e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	d055      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e2e:	d033      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e34:	d82c      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3a:	d02f      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e40:	d826      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e46:	d02b      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006e48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e4c:	d820      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e52:	d012      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e58:	d81a      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d022      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e62:	d115      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e68:	3308      	adds	r3, #8
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 febd 	bl	8007bec <RCCEx_PLL2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e78:	e015      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e7e:	3328      	adds	r3, #40	@ 0x28
 8006e80:	2102      	movs	r1, #2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 ff64 	bl	8007d50 <RCCEx_PLL3_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e8e:	e00a      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e96:	e006      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006e98:	bf00      	nop
 8006e9a:	e004      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006e9c:	bf00      	nop
 8006e9e:	e002      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eae:	4b39      	ldr	r3, [pc, #228]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ebe:	4a35      	ldr	r2, [pc, #212]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ee4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4313      	orrs	r3, r2
 8006eec:	d058      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ef2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ef6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006efa:	d033      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006efc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f00:	d82c      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f06:	d02f      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0c:	d826      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f12:	d02b      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006f14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f18:	d820      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f1e:	d012      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f24:	d81a      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d022      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2e:	d115      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f34:	3308      	adds	r3, #8
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fe57 	bl	8007bec <RCCEx_PLL2_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f44:	e015      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f4a:	3328      	adds	r3, #40	@ 0x28
 8006f4c:	2102      	movs	r1, #2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fefe 	bl	8007d50 <RCCEx_PLL3_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f5a:	e00a      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f62:	e006      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006f64:	bf00      	nop
 8006f66:	e004      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006f68:	bf00      	nop
 8006f6a:	e002      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10e      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f7a:	4b06      	ldr	r3, [pc, #24]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f8a:	4a02      	ldr	r2, [pc, #8]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f90:	e006      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fb6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d055      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fcc:	d033      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006fce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fd2:	d82c      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd8:	d02f      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fde:	d826      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006fe0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006fe4:	d02b      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006fe6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006fea:	d820      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ff0:	d012      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ff6:	d81a      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d022      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007000:	d115      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007006:	3308      	adds	r3, #8
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fdee 	bl	8007bec <RCCEx_PLL2_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007016:	e015      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800701c:	3328      	adds	r3, #40	@ 0x28
 800701e:	2102      	movs	r1, #2
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fe95 	bl	8007d50 <RCCEx_PLL3_Config>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800702c:	e00a      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007034:	e006      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007036:	bf00      	nop
 8007038:	e004      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800703a:	bf00      	nop
 800703c:	e002      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800703e:	bf00      	nop
 8007040:	e000      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007044:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800704c:	4ba1      	ldr	r3, [pc, #644]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007050:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007058:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800705c:	4a9d      	ldr	r2, [pc, #628]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800705e:	430b      	orrs	r3, r1
 8007060:	6593      	str	r3, [r2, #88]	@ 0x58
 8007062:	e003      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007068:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 0308 	and.w	r3, r2, #8
 8007078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007082:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007086:	460b      	mov	r3, r1
 8007088:	4313      	orrs	r3, r2
 800708a:	d01e      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007098:	d10c      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800709a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800709e:	3328      	adds	r3, #40	@ 0x28
 80070a0:	2102      	movs	r1, #2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fe54 	bl	8007d50 <RCCEx_PLL3_Config>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070b4:	4b87      	ldr	r3, [pc, #540]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070c4:	4a83      	ldr	r2, [pc, #524]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070c6:	430b      	orrs	r3, r1
 80070c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f002 0310 	and.w	r3, r2, #16
 80070d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070da:	2300      	movs	r3, #0
 80070dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d01e      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f6:	d10c      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070fc:	3328      	adds	r3, #40	@ 0x28
 80070fe:	2102      	movs	r1, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fe25 	bl	8007d50 <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007112:	4b70      	ldr	r3, [pc, #448]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800711a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800711e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007122:	4a6c      	ldr	r2, [pc, #432]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007134:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007138:	2300      	movs	r3, #0
 800713a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800713e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007142:	460b      	mov	r3, r1
 8007144:	4313      	orrs	r3, r2
 8007146:	d03e      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800714c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007154:	d022      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800715a:	d81b      	bhi.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007164:	d00b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007166:	e015      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800716c:	3308      	adds	r3, #8
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fd3b 	bl	8007bec <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007182:	3328      	adds	r3, #40	@ 0x28
 8007184:	2102      	movs	r1, #2
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fde2 	bl	8007d50 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007192:	e004      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071a6:	4b4b      	ldr	r3, [pc, #300]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071b6:	4a47      	ldr	r2, [pc, #284]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80071d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071d4:	2300      	movs	r3, #0
 80071d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80071dc:	460b      	mov	r3, r1
 80071de:	4313      	orrs	r3, r2
 80071e0:	d03b      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80071e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ee:	d01f      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80071f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071f4:	d818      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80071f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fa:	d003      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80071fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007200:	d007      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007202:	e011      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007204:	4b33      	ldr	r3, [pc, #204]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	4a32      	ldr	r2, [pc, #200]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800720a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800720e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007210:	e00f      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007216:	3328      	adds	r3, #40	@ 0x28
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fd98 	bl	8007d50 <RCCEx_PLL3_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007226:	e004      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800722e:	e000      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007232:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10b      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800723a:	4b26      	ldr	r3, [pc, #152]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800723c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724a:	4a22      	ldr	r2, [pc, #136]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800724c:	430b      	orrs	r3, r1
 800724e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007250:	e003      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007252:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007256:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800725a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007266:	673b      	str	r3, [r7, #112]	@ 0x70
 8007268:	2300      	movs	r3, #0
 800726a:	677b      	str	r3, [r7, #116]	@ 0x74
 800726c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007270:	460b      	mov	r3, r1
 8007272:	4313      	orrs	r3, r2
 8007274:	d034      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800727a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007284:	d007      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007286:	e011      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007288:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	4a11      	ldr	r2, [pc, #68]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800728e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007294:	e00e      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729a:	3308      	adds	r3, #8
 800729c:	2102      	movs	r1, #2
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fca4 	bl	8007bec <RCCEx_PLL2_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072aa:	e003      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80072b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10d      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ca:	4a02      	ldr	r2, [pc, #8]	@ (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072d0:	e006      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80072d2:	bf00      	nop
 80072d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80072ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072ee:	2300      	movs	r3, #0
 80072f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80072f6:	460b      	mov	r3, r1
 80072f8:	4313      	orrs	r3, r2
 80072fa:	d00c      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007300:	3328      	adds	r3, #40	@ 0x28
 8007302:	2102      	movs	r1, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fd23 	bl	8007d50 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007322:	663b      	str	r3, [r7, #96]	@ 0x60
 8007324:	2300      	movs	r3, #0
 8007326:	667b      	str	r3, [r7, #100]	@ 0x64
 8007328:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800732c:	460b      	mov	r3, r1
 800732e:	4313      	orrs	r3, r2
 8007330:	d038      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800733e:	d018      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007344:	d811      	bhi.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800734a:	d014      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800734c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007350:	d80b      	bhi.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d011      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800735a:	d106      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735c:	4bc3      	ldr	r3, [pc, #780]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800735e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007360:	4ac2      	ldr	r2, [pc, #776]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007368:	e008      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007370:	e004      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007372:	bf00      	nop
 8007374:	e002      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007376:	bf00      	nop
 8007378:	e000      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800737a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007384:	4bb9      	ldr	r3, [pc, #740]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007388:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800738c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007394:	4ab5      	ldr	r2, [pc, #724]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007396:	430b      	orrs	r3, r1
 8007398:	6553      	str	r3, [r2, #84]	@ 0x54
 800739a:	e003      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80073b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073b2:	2300      	movs	r3, #0
 80073b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073ba:	460b      	mov	r3, r1
 80073bc:	4313      	orrs	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073c0:	4baa      	ldr	r3, [pc, #680]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ce:	4aa7      	ldr	r2, [pc, #668]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80073e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e2:	2300      	movs	r3, #0
 80073e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80073e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073ea:	460b      	mov	r3, r1
 80073ec:	4313      	orrs	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073f0:	4b9e      	ldr	r3, [pc, #632]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80073f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fe:	4a9b      	ldr	r2, [pc, #620]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007400:	430b      	orrs	r3, r1
 8007402:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007412:	2300      	movs	r3, #0
 8007414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007416:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800741a:	460b      	mov	r3, r1
 800741c:	4313      	orrs	r3, r2
 800741e:	d009      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007420:	4b92      	ldr	r3, [pc, #584]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007424:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800742c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800742e:	4a8f      	ldr	r2, [pc, #572]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007430:	430b      	orrs	r3, r1
 8007432:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007440:	643b      	str	r3, [r7, #64]	@ 0x40
 8007442:	2300      	movs	r3, #0
 8007444:	647b      	str	r3, [r7, #68]	@ 0x44
 8007446:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d00e      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007450:	4b86      	ldr	r3, [pc, #536]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	4a85      	ldr	r2, [pc, #532]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007456:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800745a:	6113      	str	r3, [r2, #16]
 800745c:	4b83      	ldr	r3, [pc, #524]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800745e:	6919      	ldr	r1, [r3, #16]
 8007460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007464:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007468:	4a80      	ldr	r2, [pc, #512]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800746a:	430b      	orrs	r3, r1
 800746c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800746e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800747a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007480:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007484:	460b      	mov	r3, r1
 8007486:	4313      	orrs	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800748a:	4b78      	ldr	r3, [pc, #480]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007498:	4a74      	ldr	r2, [pc, #464]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800749a:	430b      	orrs	r3, r1
 800749c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800749e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80074aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ac:	2300      	movs	r3, #0
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80074b4:	460b      	mov	r3, r1
 80074b6:	4313      	orrs	r3, r2
 80074b8:	d00a      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074ba:	4b6c      	ldr	r3, [pc, #432]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074be:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80074c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ca:	4a68      	ldr	r2, [pc, #416]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80074d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	2100      	movs	r1, #0
 80074da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80074e6:	460b      	mov	r3, r1
 80074e8:	4313      	orrs	r3, r2
 80074ea:	d011      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f0:	3308      	adds	r3, #8
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fb79 	bl	8007bec <RCCEx_PLL2_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800750c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	2100      	movs	r1, #0
 800751a:	6239      	str	r1, [r7, #32]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
 8007522:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d011      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800752c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007530:	3308      	adds	r3, #8
 8007532:	2101      	movs	r1, #1
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fb59 	bl	8007bec <RCCEx_PLL2_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007540:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800754c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	2100      	movs	r1, #0
 800755a:	61b9      	str	r1, [r7, #24]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d011      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800756c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007570:	3308      	adds	r3, #8
 8007572:	2102      	movs	r1, #2
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fb39 	bl	8007bec <RCCEx_PLL2_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800758c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	2100      	movs	r1, #0
 800759a:	6139      	str	r1, [r7, #16]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075a6:	460b      	mov	r3, r1
 80075a8:	4313      	orrs	r3, r2
 80075aa:	d011      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b0:	3328      	adds	r3, #40	@ 0x28
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fbcb 	bl	8007d50 <RCCEx_PLL3_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80075c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	2100      	movs	r1, #0
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80075e6:	460b      	mov	r3, r1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	d011      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f0:	3328      	adds	r3, #40	@ 0x28
 80075f2:	2101      	movs	r1, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fbab 	bl	8007d50 <RCCEx_PLL3_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800760c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	2100      	movs	r1, #0
 800761a:	6039      	str	r1, [r7, #0]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007626:	460b      	mov	r3, r1
 8007628:	4313      	orrs	r3, r2
 800762a:	d011      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800762c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007630:	3328      	adds	r3, #40	@ 0x28
 8007632:	2102      	movs	r1, #2
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fb8b 	bl	8007d50 <RCCEx_PLL3_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800764c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007650:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	e000      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
}
 800765e:	4618      	mov	r0, r3
 8007660:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007664:	46bd      	mov	sp, r7
 8007666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800766a:	bf00      	nop
 800766c:	58024400 	.word	0x58024400

08007670 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007674:	f7fe fda0 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 8007678:	4602      	mov	r2, r0
 800767a:	4b06      	ldr	r3, [pc, #24]	@ (8007694 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	091b      	lsrs	r3, r3, #4
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	4904      	ldr	r1, [pc, #16]	@ (8007698 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007686:	5ccb      	ldrb	r3, [r1, r3]
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007690:	4618      	mov	r0, r3
 8007692:	bd80      	pop	{r7, pc}
 8007694:	58024400 	.word	0x58024400
 8007698:	0800d7e8 	.word	0x0800d7e8

0800769c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800769c:	b480      	push	{r7}
 800769e:	b089      	sub	sp, #36	@ 0x24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076a4:	4ba1      	ldr	r3, [pc, #644]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80076ae:	4b9f      	ldr	r3, [pc, #636]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	0b1b      	lsrs	r3, r3, #12
 80076b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076ba:	4b9c      	ldr	r3, [pc, #624]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	091b      	lsrs	r3, r3, #4
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80076c6:	4b99      	ldr	r3, [pc, #612]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8111 	beq.w	800790c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f000 8083 	beq.w	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	f200 80a1 	bhi.w	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d056      	beq.n	80077b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007706:	e099      	b.n	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007708:	4b88      	ldr	r3, [pc, #544]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02d      	beq.n	8007770 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007714:	4b85      	ldr	r3, [pc, #532]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	08db      	lsrs	r3, r3, #3
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	4a84      	ldr	r2, [pc, #528]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
 8007724:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b7b      	ldr	r3, [pc, #492]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007752:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800776e:	e087      	b.n	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b6a      	ldr	r3, [pc, #424]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b2:	e065      	b.n	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800793c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b59      	ldr	r3, [pc, #356]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f6:	e043      	b.n	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b48      	ldr	r3, [pc, #288]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a03 	vldr	s12, [r7, #12]
 800781e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783a:	e021      	b.n	8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800793c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b37      	ldr	r3, [pc, #220]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007880:	4b2a      	ldr	r3, [pc, #168]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007884:	0a5b      	lsrs	r3, r3, #9
 8007886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800789a:	edd7 6a07 	vldr	s13, [r7, #28]
 800789e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a6:	ee17 2a90 	vmov	r2, s15
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80078ae:	4b1f      	ldr	r3, [pc, #124]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d4:	ee17 2a90 	vmov	r2, s15
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80078dc:	4b13      	ldr	r3, [pc, #76]	@ (800792c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	0e1b      	lsrs	r3, r3, #24
 80078e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007902:	ee17 2a90 	vmov	r2, s15
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800790a:	e008      	b.n	800791e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	609a      	str	r2, [r3, #8]
}
 800791e:	bf00      	nop
 8007920:	3724      	adds	r7, #36	@ 0x24
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	03d09000 	.word	0x03d09000
 8007934:	46000000 	.word	0x46000000
 8007938:	4c742400 	.word	0x4c742400
 800793c:	4a742400 	.word	0x4a742400
 8007940:	4bb71b00 	.word	0x4bb71b00

08007944 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007944:	b480      	push	{r7}
 8007946:	b089      	sub	sp, #36	@ 0x24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800794c:	4ba1      	ldr	r3, [pc, #644]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007956:	4b9f      	ldr	r3, [pc, #636]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	0d1b      	lsrs	r3, r3, #20
 800795c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007960:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007962:	4b9c      	ldr	r3, [pc, #624]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800796e:	4b99      	ldr	r3, [pc, #612]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007972:	08db      	lsrs	r3, r3, #3
 8007974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	fb02 f303 	mul.w	r3, r2, r3
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8111 	beq.w	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b02      	cmp	r3, #2
 8007996:	f000 8083 	beq.w	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b02      	cmp	r3, #2
 800799e:	f200 80a1 	bhi.w	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d056      	beq.n	8007a5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079ae:	e099      	b.n	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b0:	4b88      	ldr	r3, [pc, #544]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d02d      	beq.n	8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079bc:	4b85      	ldr	r3, [pc, #532]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	08db      	lsrs	r3, r3, #3
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	4a84      	ldr	r2, [pc, #528]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
 80079cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	ee07 3a90 	vmov	s15, r3
 80079d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e6:	4b7b      	ldr	r3, [pc, #492]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a16:	e087      	b.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5a:	e065      	b.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6e:	4b59      	ldr	r3, [pc, #356]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9e:	e043      	b.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab2:	4b48      	ldr	r3, [pc, #288]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae2:	e021      	b.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af6:	4b37      	ldr	r3, [pc, #220]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007b28:	4b2a      	ldr	r3, [pc, #168]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2c:	0a5b      	lsrs	r3, r3, #9
 8007b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b4e:	ee17 2a90 	vmov	r2, s15
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007b56:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7c:	ee17 2a90 	vmov	r2, s15
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b84:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b88:	0e1b      	lsrs	r3, r3, #24
 8007b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007baa:	ee17 2a90 	vmov	r2, s15
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	609a      	str	r2, [r3, #8]
}
 8007bc6:	bf00      	nop
 8007bc8:	3724      	adds	r7, #36	@ 0x24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	03d09000 	.word	0x03d09000
 8007bdc:	46000000 	.word	0x46000000
 8007be0:	4c742400 	.word	0x4c742400
 8007be4:	4a742400 	.word	0x4a742400
 8007be8:	4bb71b00 	.word	0x4bb71b00

08007bec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bfa:	4b53      	ldr	r3, [pc, #332]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d101      	bne.n	8007c0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e099      	b.n	8007d3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c16:	f7f9 faa3 	bl	8001160 <HAL_GetTick>
 8007c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c1c:	e008      	b.n	8007c30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c1e:	f7f9 fa9f 	bl	8001160 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e086      	b.n	8007d3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c30:	4b45      	ldr	r3, [pc, #276]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c3c:	4b42      	ldr	r3, [pc, #264]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	031b      	lsls	r3, r3, #12
 8007c4a:	493f      	ldr	r1, [pc, #252]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	025b      	lsls	r3, r3, #9
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	041b      	lsls	r3, r3, #16
 8007c6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	061b      	lsls	r3, r3, #24
 8007c7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c80:	4931      	ldr	r1, [pc, #196]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c86:	4b30      	ldr	r3, [pc, #192]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	492d      	ldr	r1, [pc, #180]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c98:	4b2b      	ldr	r3, [pc, #172]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	f023 0220 	bic.w	r2, r3, #32
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	4928      	ldr	r1, [pc, #160]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007caa:	4b27      	ldr	r3, [pc, #156]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	4a26      	ldr	r2, [pc, #152]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cb0:	f023 0310 	bic.w	r3, r3, #16
 8007cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cb6:	4b24      	ldr	r3, [pc, #144]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cba:	4b24      	ldr	r3, [pc, #144]	@ (8007d4c <RCCEx_PLL2_Config+0x160>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	69d2      	ldr	r2, [r2, #28]
 8007cc2:	00d2      	lsls	r2, r2, #3
 8007cc4:	4920      	ldr	r1, [pc, #128]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cca:	4b1f      	ldr	r3, [pc, #124]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	4a1e      	ldr	r2, [pc, #120]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	f043 0310 	orr.w	r3, r3, #16
 8007cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d106      	bne.n	8007cea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	4a19      	ldr	r2, [pc, #100]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ce8:	e00f      	b.n	8007d0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d106      	bne.n	8007cfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cf0:	4b15      	ldr	r3, [pc, #84]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	4a14      	ldr	r2, [pc, #80]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cfc:	e005      	b.n	8007d0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cfe:	4b12      	ldr	r3, [pc, #72]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d02:	4a11      	ldr	r2, [pc, #68]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d16:	f7f9 fa23 	bl	8001160 <HAL_GetTick>
 8007d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d1c:	e008      	b.n	8007d30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d1e:	f7f9 fa1f 	bl	8001160 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e006      	b.n	8007d3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d30:	4b05      	ldr	r3, [pc, #20]	@ (8007d48 <RCCEx_PLL2_Config+0x15c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0f0      	beq.n	8007d1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	ffff0007 	.word	0xffff0007

08007d50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d5e:	4b53      	ldr	r3, [pc, #332]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d101      	bne.n	8007d6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e099      	b.n	8007ea2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4e      	ldr	r2, [pc, #312]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7a:	f7f9 f9f1 	bl	8001160 <HAL_GetTick>
 8007d7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d80:	e008      	b.n	8007d94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d82:	f7f9 f9ed 	bl	8001160 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e086      	b.n	8007ea2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d94:	4b45      	ldr	r3, [pc, #276]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f0      	bne.n	8007d82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007da0:	4b42      	ldr	r3, [pc, #264]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	051b      	lsls	r3, r3, #20
 8007dae:	493f      	ldr	r1, [pc, #252]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	025b      	lsls	r3, r3, #9
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	041b      	lsls	r3, r3, #16
 8007dd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	061b      	lsls	r3, r3, #24
 8007de0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007de4:	4931      	ldr	r1, [pc, #196]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dea:	4b30      	ldr	r3, [pc, #192]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	492d      	ldr	r1, [pc, #180]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	4928      	ldr	r1, [pc, #160]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e0e:	4b27      	ldr	r3, [pc, #156]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	4a26      	ldr	r2, [pc, #152]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e1a:	4b24      	ldr	r3, [pc, #144]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e1e:	4b24      	ldr	r3, [pc, #144]	@ (8007eb0 <RCCEx_PLL3_Config+0x160>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	69d2      	ldr	r2, [r2, #28]
 8007e26:	00d2      	lsls	r2, r2, #3
 8007e28:	4920      	ldr	r1, [pc, #128]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e32:	4a1e      	ldr	r2, [pc, #120]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e40:	4b1a      	ldr	r3, [pc, #104]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	4a19      	ldr	r2, [pc, #100]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e4c:	e00f      	b.n	8007e6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d106      	bne.n	8007e62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e54:	4b15      	ldr	r3, [pc, #84]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e58:	4a14      	ldr	r2, [pc, #80]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e60:	e005      	b.n	8007e6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e62:	4b12      	ldr	r3, [pc, #72]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e66:	4a11      	ldr	r2, [pc, #68]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a0e      	ldr	r2, [pc, #56]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7a:	f7f9 f971 	bl	8001160 <HAL_GetTick>
 8007e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e80:	e008      	b.n	8007e94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e82:	f7f9 f96d 	bl	8001160 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d901      	bls.n	8007e94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e006      	b.n	8007ea2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e94:	4b05      	ldr	r3, [pc, #20]	@ (8007eac <RCCEx_PLL3_Config+0x15c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0f0      	beq.n	8007e82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	58024400 	.word	0x58024400
 8007eb0:	ffff0007 	.word	0xffff0007

08007eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e049      	b.n	8007f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f841 	bl	8007f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f000 f9e8 	bl	80082c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
	...

08007f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d001      	beq.n	8007f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e054      	b.n	800803a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a26      	ldr	r2, [pc, #152]	@ (8008048 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d022      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fba:	d01d      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a22      	ldr	r2, [pc, #136]	@ (800804c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d018      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a21      	ldr	r2, [pc, #132]	@ (8008050 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d013      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8008054 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1e      	ldr	r2, [pc, #120]	@ (8008058 <HAL_TIM_Base_Start_IT+0xe0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d009      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800805c <HAL_TIM_Base_Start_IT+0xe4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <HAL_TIM_Base_Start_IT+0x80>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8008060 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d115      	bne.n	8008024 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	4b19      	ldr	r3, [pc, #100]	@ (8008064 <HAL_TIM_Base_Start_IT+0xec>)
 8008000:	4013      	ands	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b06      	cmp	r3, #6
 8008008:	d015      	beq.n	8008036 <HAL_TIM_Base_Start_IT+0xbe>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008010:	d011      	beq.n	8008036 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0201 	orr.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008022:	e008      	b.n	8008036 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e000      	b.n	8008038 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	40000c00 	.word	0x40000c00
 8008058:	40010400 	.word	0x40010400
 800805c:	40001800 	.word	0x40001800
 8008060:	40014000 	.word	0x40014000
 8008064:	00010007 	.word	0x00010007

08008068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01b      	beq.n	80080cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0202 	mvn.w	r2, #2
 800809c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8e9 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f8db 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f8ec 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d020      	beq.n	8008118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01b      	beq.n	8008118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0204 	mvn.w	r2, #4
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8c3 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f8b5 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f8c6 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d020      	beq.n	8008164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01b      	beq.n	8008164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0208 	mvn.w	r2, #8
 8008134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2204      	movs	r2, #4
 800813a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f89d 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 8008150:	e005      	b.n	800815e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f88f 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f8a0 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b00      	cmp	r3, #0
 800816c:	d020      	beq.n	80081b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01b      	beq.n	80081b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0210 	mvn.w	r2, #16
 8008180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2208      	movs	r2, #8
 8008186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f877 	bl	800828a <HAL_TIM_IC_CaptureCallback>
 800819c:	e005      	b.n	80081aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f869 	bl	8008276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f87a 	bl	800829e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00c      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 0201 	mvn.w	r2, #1
 80081cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7f8 fd1e 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f913 	bl	8008428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00c      	beq.n	8008226 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800821e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f90b 	bl	800843c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00c      	beq.n	800824a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f834 	bl	80082b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00c      	beq.n	800826e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f06f 0220 	mvn.w	r2, #32
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8d3 	bl	8008414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a46      	ldr	r2, [pc, #280]	@ (80083f4 <TIM_Base_SetConfig+0x12c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e6:	d00f      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a43      	ldr	r2, [pc, #268]	@ (80083f8 <TIM_Base_SetConfig+0x130>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a42      	ldr	r2, [pc, #264]	@ (80083fc <TIM_Base_SetConfig+0x134>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a41      	ldr	r2, [pc, #260]	@ (8008400 <TIM_Base_SetConfig+0x138>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a40      	ldr	r2, [pc, #256]	@ (8008404 <TIM_Base_SetConfig+0x13c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d108      	bne.n	800831a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a35      	ldr	r2, [pc, #212]	@ (80083f4 <TIM_Base_SetConfig+0x12c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01f      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008328:	d01b      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a32      	ldr	r2, [pc, #200]	@ (80083f8 <TIM_Base_SetConfig+0x130>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d017      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a31      	ldr	r2, [pc, #196]	@ (80083fc <TIM_Base_SetConfig+0x134>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d013      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a30      	ldr	r2, [pc, #192]	@ (8008400 <TIM_Base_SetConfig+0x138>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00f      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a2f      	ldr	r2, [pc, #188]	@ (8008404 <TIM_Base_SetConfig+0x13c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00b      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2e      	ldr	r2, [pc, #184]	@ (8008408 <TIM_Base_SetConfig+0x140>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d007      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a2d      	ldr	r2, [pc, #180]	@ (800840c <TIM_Base_SetConfig+0x144>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_Base_SetConfig+0x9a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2c      	ldr	r2, [pc, #176]	@ (8008410 <TIM_Base_SetConfig+0x148>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d108      	bne.n	8008374 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a16      	ldr	r2, [pc, #88]	@ (80083f4 <TIM_Base_SetConfig+0x12c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00f      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a18      	ldr	r2, [pc, #96]	@ (8008404 <TIM_Base_SetConfig+0x13c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a17      	ldr	r2, [pc, #92]	@ (8008408 <TIM_Base_SetConfig+0x140>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a16      	ldr	r2, [pc, #88]	@ (800840c <TIM_Base_SetConfig+0x144>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0xf8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <TIM_Base_SetConfig+0x148>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d103      	bne.n	80083c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d105      	bne.n	80083e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	611a      	str	r2, [r3, #16]
  }
}
 80083e6:	bf00      	nop
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	40010000 	.word	0x40010000
 80083f8:	40000400 	.word	0x40000400
 80083fc:	40000800 	.word	0x40000800
 8008400:	40000c00 	.word	0x40000c00
 8008404:	40010400 	.word	0x40010400
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400
 8008410:	40014800 	.word	0x40014800

08008414 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e042      	b.n	80084e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008468:	2b00      	cmp	r3, #0
 800846a:	d106      	bne.n	800847a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7f8 fd87 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2224      	movs	r2, #36	@ 0x24
 800847e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0201 	bic.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fafc 	bl	8009a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fc8d 	bl	8008dc0 <UART_SetConfig>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e01b      	b.n	80084e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0201 	orr.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 fb7b 	bl	8009bdc <UART_CheckIdleState>
 80084e6:	4603      	mov	r3, r0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	@ 0x28
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008506:	2b20      	cmp	r3, #32
 8008508:	d17b      	bne.n	8008602 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_UART_Transmit+0x26>
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e074      	b.n	8008604 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2221      	movs	r2, #33	@ 0x21
 8008526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800852a:	f7f8 fe19 	bl	8001160 <HAL_GetTick>
 800852e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	88fa      	ldrh	r2, [r7, #6]
 800853c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008548:	d108      	bne.n	800855c <HAL_UART_Transmit+0x6c>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	e003      	b.n	8008564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008560:	2300      	movs	r3, #0
 8008562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008564:	e030      	b.n	80085c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	2180      	movs	r1, #128	@ 0x80
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f001 fbdd 	bl	8009d30 <UART_WaitOnFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e03d      	b.n	8008604 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800859c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	3302      	adds	r3, #2
 80085a2:	61bb      	str	r3, [r7, #24]
 80085a4:	e007      	b.n	80085b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	3301      	adds	r3, #1
 80085b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1c8      	bne.n	8008566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2200      	movs	r2, #0
 80085dc:	2140      	movs	r1, #64	@ 0x40
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f001 fba6 	bl	8009d30 <UART_WaitOnFlagUntilTimeout>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e006      	b.n	8008604 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	e000      	b.n	8008604 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008602:	2302      	movs	r3, #2
  }
}
 8008604:	4618      	mov	r0, r3
 8008606:	3720      	adds	r7, #32
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b0ba      	sub	sp, #232	@ 0xe8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800863a:	4013      	ands	r3, r2
 800863c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d11b      	bne.n	8008680 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b00      	cmp	r3, #0
 8008652:	d015      	beq.n	8008680 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d105      	bne.n	800866c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d009      	beq.n	8008680 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8377 	beq.w	8008d64 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
      }
      return;
 800867e:	e371      	b.n	8008d64 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8123 	beq.w	80088d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800868a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800868e:	4b8d      	ldr	r3, [pc, #564]	@ (80088c4 <HAL_UART_IRQHandler+0x2b8>)
 8008690:	4013      	ands	r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800869a:	4b8b      	ldr	r3, [pc, #556]	@ (80088c8 <HAL_UART_IRQHandler+0x2bc>)
 800869c:	4013      	ands	r3, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8116 	beq.w	80088d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d011      	beq.n	80086d4 <HAL_UART_IRQHandler+0xc8>
 80086b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2201      	movs	r2, #1
 80086c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ca:	f043 0201 	orr.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d011      	beq.n	8008704 <HAL_UART_IRQHandler+0xf8>
 80086e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2202      	movs	r2, #2
 80086f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fa:	f043 0204 	orr.w	r2, r3, #4
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d011      	beq.n	8008734 <HAL_UART_IRQHandler+0x128>
 8008710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2204      	movs	r2, #4
 8008722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872a:	f043 0202 	orr.w	r2, r3, #2
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008738:	f003 0308 	and.w	r3, r3, #8
 800873c:	2b00      	cmp	r3, #0
 800873e:	d017      	beq.n	8008770 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800874c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008750:	4b5c      	ldr	r3, [pc, #368]	@ (80088c4 <HAL_UART_IRQHandler+0x2b8>)
 8008752:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2208      	movs	r2, #8
 800875e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008766:	f043 0208 	orr.w	r2, r3, #8
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008778:	2b00      	cmp	r3, #0
 800877a:	d012      	beq.n	80087a2 <HAL_UART_IRQHandler+0x196>
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00c      	beq.n	80087a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 82dd 	beq.w	8008d68 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d013      	beq.n	80087e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d105      	bne.n	80087d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d007      	beq.n	80087e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f6:	2b40      	cmp	r3, #64	@ 0x40
 80087f8:	d005      	beq.n	8008806 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008802:	2b00      	cmp	r3, #0
 8008804:	d054      	beq.n	80088b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 fb00 	bl	8009e0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008816:	2b40      	cmp	r3, #64	@ 0x40
 8008818:	d146      	bne.n	80088a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800884a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800885e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1d9      	bne.n	800881a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886c:	2b00      	cmp	r3, #0
 800886e:	d017      	beq.n	80088a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008876:	4a15      	ldr	r2, [pc, #84]	@ (80088cc <HAL_UART_IRQHandler+0x2c0>)
 8008878:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008880:	4618      	mov	r0, r3
 8008882:	f7f9 fc05 	bl	8002090 <HAL_DMA_Abort_IT>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d019      	beq.n	80088c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800889a:	4610      	mov	r0, r2
 800889c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889e:	e00f      	b.n	80088c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fa77 	bl	8008d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a6:	e00b      	b.n	80088c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fa73 	bl	8008d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ae:	e007      	b.n	80088c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fa6f 	bl	8008d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80088be:	e253      	b.n	8008d68 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c0:	bf00      	nop
    return;
 80088c2:	e251      	b.n	8008d68 <HAL_UART_IRQHandler+0x75c>
 80088c4:	10000001 	.word	0x10000001
 80088c8:	04000120 	.word	0x04000120
 80088cc:	08009ed9 	.word	0x08009ed9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	f040 81e7 	bne.w	8008ca8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 81e0 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 81d9 	beq.w	8008ca8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2210      	movs	r2, #16
 80088fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008908:	2b40      	cmp	r3, #64	@ 0x40
 800890a:	f040 8151 	bne.w	8008bb0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a96      	ldr	r2, [pc, #600]	@ (8008b70 <HAL_UART_IRQHandler+0x564>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d068      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a93      	ldr	r2, [pc, #588]	@ (8008b74 <HAL_UART_IRQHandler+0x568>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d061      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a91      	ldr	r2, [pc, #580]	@ (8008b78 <HAL_UART_IRQHandler+0x56c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d05a      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a8e      	ldr	r2, [pc, #568]	@ (8008b7c <HAL_UART_IRQHandler+0x570>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d053      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a8c      	ldr	r2, [pc, #560]	@ (8008b80 <HAL_UART_IRQHandler+0x574>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d04c      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a89      	ldr	r2, [pc, #548]	@ (8008b84 <HAL_UART_IRQHandler+0x578>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d045      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a87      	ldr	r2, [pc, #540]	@ (8008b88 <HAL_UART_IRQHandler+0x57c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d03e      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a84      	ldr	r2, [pc, #528]	@ (8008b8c <HAL_UART_IRQHandler+0x580>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d037      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a82      	ldr	r2, [pc, #520]	@ (8008b90 <HAL_UART_IRQHandler+0x584>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d030      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a7f      	ldr	r2, [pc, #508]	@ (8008b94 <HAL_UART_IRQHandler+0x588>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d029      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a7d      	ldr	r2, [pc, #500]	@ (8008b98 <HAL_UART_IRQHandler+0x58c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d022      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a7a      	ldr	r2, [pc, #488]	@ (8008b9c <HAL_UART_IRQHandler+0x590>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d01b      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a78      	ldr	r2, [pc, #480]	@ (8008ba0 <HAL_UART_IRQHandler+0x594>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d014      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a75      	ldr	r2, [pc, #468]	@ (8008ba4 <HAL_UART_IRQHandler+0x598>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00d      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a73      	ldr	r2, [pc, #460]	@ (8008ba8 <HAL_UART_IRQHandler+0x59c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d006      	beq.n	80089ee <HAL_UART_IRQHandler+0x3e2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a70      	ldr	r2, [pc, #448]	@ (8008bac <HAL_UART_IRQHandler+0x5a0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d106      	bne.n	80089fc <HAL_UART_IRQHandler+0x3f0>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	e005      	b.n	8008a08 <HAL_UART_IRQHandler+0x3fc>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 81ab 	beq.w	8008d6c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a20:	429a      	cmp	r2, r3
 8008a22:	f080 81a3 	bcs.w	8008d6c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a3c:	f000 8087 	beq.w	8008b4e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	461a      	mov	r2, r3
 8008a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1da      	bne.n	8008a40 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008aae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e1      	bne.n	8008a8a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008aea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008aec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008af0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e3      	bne.n	8008ac6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b1c:	f023 0310 	bic.w	r3, r3, #16
 8008b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e4      	bne.n	8008b0c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f8 ff83 	bl	8001a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f91d 	bl	8008da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b6e:	e0fd      	b.n	8008d6c <HAL_UART_IRQHandler+0x760>
 8008b70:	40020010 	.word	0x40020010
 8008b74:	40020028 	.word	0x40020028
 8008b78:	40020040 	.word	0x40020040
 8008b7c:	40020058 	.word	0x40020058
 8008b80:	40020070 	.word	0x40020070
 8008b84:	40020088 	.word	0x40020088
 8008b88:	400200a0 	.word	0x400200a0
 8008b8c:	400200b8 	.word	0x400200b8
 8008b90:	40020410 	.word	0x40020410
 8008b94:	40020428 	.word	0x40020428
 8008b98:	40020440 	.word	0x40020440
 8008b9c:	40020458 	.word	0x40020458
 8008ba0:	40020470 	.word	0x40020470
 8008ba4:	40020488 	.word	0x40020488
 8008ba8:	400204a0 	.word	0x400204a0
 8008bac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80cf 	beq.w	8008d70 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80ca 	beq.w	8008d70 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c00:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e4      	bne.n	8008bdc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	623b      	str	r3, [r7, #32]
   return(result);
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	4b55      	ldr	r3, [pc, #340]	@ (8008d7c <HAL_UART_IRQHandler+0x770>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3308      	adds	r3, #8
 8008c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e3      	bne.n	8008c12 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c80:	61fb      	str	r3, [r7, #28]
 8008c82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	69b9      	ldr	r1, [r7, #24]
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e4      	bne.n	8008c5e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f881 	bl	8008da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ca6:	e063      	b.n	8008d70 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x6c6>
 8008cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f001 f945 	bl	8009f5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cd0:	e051      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d014      	beq.n	8008d08 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03a      	beq.n	8008d74 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	4798      	blx	r3
    }
    return;
 8008d06:	e035      	b.n	8008d74 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <HAL_UART_IRQHandler+0x71c>
 8008d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 f8ef 	bl	8009f04 <UART_EndTransmit_IT>
    return;
 8008d26:	e026      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <HAL_UART_IRQHandler+0x73c>
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f91e 	bl	8009f82 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d46:	e016      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d010      	beq.n	8008d76 <HAL_UART_IRQHandler+0x76a>
 8008d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da0c      	bge.n	8008d76 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 f906 	bl	8009f6e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d62:	e008      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
      return;
 8008d64:	bf00      	nop
 8008d66:	e006      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
    return;
 8008d68:	bf00      	nop
 8008d6a:	e004      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
      return;
 8008d6c:	bf00      	nop
 8008d6e:	e002      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
      return;
 8008d70:	bf00      	nop
 8008d72:	e000      	b.n	8008d76 <HAL_UART_IRQHandler+0x76a>
    return;
 8008d74:	bf00      	nop
  }
}
 8008d76:	37e8      	adds	r7, #232	@ 0xe8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	effffffe 	.word	0xeffffffe

08008d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dc4:	b092      	sub	sp, #72	@ 0x48
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	431a      	orrs	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4bbe      	ldr	r3, [pc, #760]	@ (80090e8 <UART_SetConfig+0x328>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4ab3      	ldr	r2, [pc, #716]	@ (80090ec <UART_SetConfig+0x32c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	4baf      	ldr	r3, [pc, #700]	@ (80090f0 <UART_SetConfig+0x330>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	6812      	ldr	r2, [r2, #0]
 8008e3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	f023 010f 	bic.w	r1, r3, #15
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4aa6      	ldr	r2, [pc, #664]	@ (80090f4 <UART_SetConfig+0x334>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d177      	bne.n	8008f50 <UART_SetConfig+0x190>
 8008e60:	4ba5      	ldr	r3, [pc, #660]	@ (80090f8 <UART_SetConfig+0x338>)
 8008e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e68:	2b28      	cmp	r3, #40	@ 0x28
 8008e6a:	d86d      	bhi.n	8008f48 <UART_SetConfig+0x188>
 8008e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <UART_SetConfig+0xb4>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008f19 	.word	0x08008f19
 8008e78:	08008f49 	.word	0x08008f49
 8008e7c:	08008f49 	.word	0x08008f49
 8008e80:	08008f49 	.word	0x08008f49
 8008e84:	08008f49 	.word	0x08008f49
 8008e88:	08008f49 	.word	0x08008f49
 8008e8c:	08008f49 	.word	0x08008f49
 8008e90:	08008f49 	.word	0x08008f49
 8008e94:	08008f21 	.word	0x08008f21
 8008e98:	08008f49 	.word	0x08008f49
 8008e9c:	08008f49 	.word	0x08008f49
 8008ea0:	08008f49 	.word	0x08008f49
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f49 	.word	0x08008f49
 8008eb0:	08008f49 	.word	0x08008f49
 8008eb4:	08008f29 	.word	0x08008f29
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f49 	.word	0x08008f49
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	08008f49 	.word	0x08008f49
 8008ecc:	08008f49 	.word	0x08008f49
 8008ed0:	08008f49 	.word	0x08008f49
 8008ed4:	08008f31 	.word	0x08008f31
 8008ed8:	08008f49 	.word	0x08008f49
 8008edc:	08008f49 	.word	0x08008f49
 8008ee0:	08008f49 	.word	0x08008f49
 8008ee4:	08008f49 	.word	0x08008f49
 8008ee8:	08008f49 	.word	0x08008f49
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f39 	.word	0x08008f39
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008f49 	.word	0x08008f49
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f49 	.word	0x08008f49
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f41 	.word	0x08008f41
 8008f18:	2301      	movs	r3, #1
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e326      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f20:	2304      	movs	r3, #4
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e322      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f28:	2308      	movs	r3, #8
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e31e      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f30:	2310      	movs	r3, #16
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e31a      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f38:	2320      	movs	r3, #32
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e316      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f40:	2340      	movs	r3, #64	@ 0x40
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e312      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f48:	2380      	movs	r3, #128	@ 0x80
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e30e      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a69      	ldr	r2, [pc, #420]	@ (80090fc <UART_SetConfig+0x33c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d130      	bne.n	8008fbc <UART_SetConfig+0x1fc>
 8008f5a:	4b67      	ldr	r3, [pc, #412]	@ (80090f8 <UART_SetConfig+0x338>)
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b05      	cmp	r3, #5
 8008f64:	d826      	bhi.n	8008fb4 <UART_SetConfig+0x1f4>
 8008f66:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <UART_SetConfig+0x1ac>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008f85 	.word	0x08008f85
 8008f70:	08008f8d 	.word	0x08008f8d
 8008f74:	08008f95 	.word	0x08008f95
 8008f78:	08008f9d 	.word	0x08008f9d
 8008f7c:	08008fa5 	.word	0x08008fa5
 8008f80:	08008fad 	.word	0x08008fad
 8008f84:	2300      	movs	r3, #0
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e2f0      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e2ec      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f94:	2308      	movs	r3, #8
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e2e8      	b.n	800956e <UART_SetConfig+0x7ae>
 8008f9c:	2310      	movs	r3, #16
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e2e4      	b.n	800956e <UART_SetConfig+0x7ae>
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e2e0      	b.n	800956e <UART_SetConfig+0x7ae>
 8008fac:	2340      	movs	r3, #64	@ 0x40
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e2dc      	b.n	800956e <UART_SetConfig+0x7ae>
 8008fb4:	2380      	movs	r3, #128	@ 0x80
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e2d8      	b.n	800956e <UART_SetConfig+0x7ae>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8009100 <UART_SetConfig+0x340>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d130      	bne.n	8009028 <UART_SetConfig+0x268>
 8008fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80090f8 <UART_SetConfig+0x338>)
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d826      	bhi.n	8009020 <UART_SetConfig+0x260>
 8008fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd8 <UART_SetConfig+0x218>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff9 	.word	0x08008ff9
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009009 	.word	0x08009009
 8008fe8:	08009011 	.word	0x08009011
 8008fec:	08009019 	.word	0x08009019
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e2ba      	b.n	800956e <UART_SetConfig+0x7ae>
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e2b6      	b.n	800956e <UART_SetConfig+0x7ae>
 8009000:	2308      	movs	r3, #8
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e2b2      	b.n	800956e <UART_SetConfig+0x7ae>
 8009008:	2310      	movs	r3, #16
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e2ae      	b.n	800956e <UART_SetConfig+0x7ae>
 8009010:	2320      	movs	r3, #32
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e2aa      	b.n	800956e <UART_SetConfig+0x7ae>
 8009018:	2340      	movs	r3, #64	@ 0x40
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e2a6      	b.n	800956e <UART_SetConfig+0x7ae>
 8009020:	2380      	movs	r3, #128	@ 0x80
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e2a2      	b.n	800956e <UART_SetConfig+0x7ae>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a35      	ldr	r2, [pc, #212]	@ (8009104 <UART_SetConfig+0x344>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d130      	bne.n	8009094 <UART_SetConfig+0x2d4>
 8009032:	4b31      	ldr	r3, [pc, #196]	@ (80090f8 <UART_SetConfig+0x338>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b05      	cmp	r3, #5
 800903c:	d826      	bhi.n	800908c <UART_SetConfig+0x2cc>
 800903e:	a201      	add	r2, pc, #4	@ (adr r2, 8009044 <UART_SetConfig+0x284>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	0800905d 	.word	0x0800905d
 8009048:	08009065 	.word	0x08009065
 800904c:	0800906d 	.word	0x0800906d
 8009050:	08009075 	.word	0x08009075
 8009054:	0800907d 	.word	0x0800907d
 8009058:	08009085 	.word	0x08009085
 800905c:	2300      	movs	r3, #0
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e284      	b.n	800956e <UART_SetConfig+0x7ae>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e280      	b.n	800956e <UART_SetConfig+0x7ae>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e27c      	b.n	800956e <UART_SetConfig+0x7ae>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e278      	b.n	800956e <UART_SetConfig+0x7ae>
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e274      	b.n	800956e <UART_SetConfig+0x7ae>
 8009084:	2340      	movs	r3, #64	@ 0x40
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e270      	b.n	800956e <UART_SetConfig+0x7ae>
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e26c      	b.n	800956e <UART_SetConfig+0x7ae>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <UART_SetConfig+0x348>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d142      	bne.n	8009124 <UART_SetConfig+0x364>
 800909e:	4b16      	ldr	r3, [pc, #88]	@ (80090f8 <UART_SetConfig+0x338>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d838      	bhi.n	800911c <UART_SetConfig+0x35c>
 80090aa:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <UART_SetConfig+0x2f0>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	0800910d 	.word	0x0800910d
 80090c4:	08009115 	.word	0x08009115
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e24e      	b.n	800956e <UART_SetConfig+0x7ae>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e24a      	b.n	800956e <UART_SetConfig+0x7ae>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e246      	b.n	800956e <UART_SetConfig+0x7ae>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e242      	b.n	800956e <UART_SetConfig+0x7ae>
 80090e8:	cfff69f3 	.word	0xcfff69f3
 80090ec:	58000c00 	.word	0x58000c00
 80090f0:	11fff4ff 	.word	0x11fff4ff
 80090f4:	40011000 	.word	0x40011000
 80090f8:	58024400 	.word	0x58024400
 80090fc:	40004400 	.word	0x40004400
 8009100:	40004800 	.word	0x40004800
 8009104:	40004c00 	.word	0x40004c00
 8009108:	40005000 	.word	0x40005000
 800910c:	2320      	movs	r3, #32
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009112:	e22c      	b.n	800956e <UART_SetConfig+0x7ae>
 8009114:	2340      	movs	r3, #64	@ 0x40
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911a:	e228      	b.n	800956e <UART_SetConfig+0x7ae>
 800911c:	2380      	movs	r3, #128	@ 0x80
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e224      	b.n	800956e <UART_SetConfig+0x7ae>
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4ab1      	ldr	r2, [pc, #708]	@ (80093f0 <UART_SetConfig+0x630>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d176      	bne.n	800921c <UART_SetConfig+0x45c>
 800912e:	4bb1      	ldr	r3, [pc, #708]	@ (80093f4 <UART_SetConfig+0x634>)
 8009130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009132:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009136:	2b28      	cmp	r3, #40	@ 0x28
 8009138:	d86c      	bhi.n	8009214 <UART_SetConfig+0x454>
 800913a:	a201      	add	r2, pc, #4	@ (adr r2, 8009140 <UART_SetConfig+0x380>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	080091e5 	.word	0x080091e5
 8009144:	08009215 	.word	0x08009215
 8009148:	08009215 	.word	0x08009215
 800914c:	08009215 	.word	0x08009215
 8009150:	08009215 	.word	0x08009215
 8009154:	08009215 	.word	0x08009215
 8009158:	08009215 	.word	0x08009215
 800915c:	08009215 	.word	0x08009215
 8009160:	080091ed 	.word	0x080091ed
 8009164:	08009215 	.word	0x08009215
 8009168:	08009215 	.word	0x08009215
 800916c:	08009215 	.word	0x08009215
 8009170:	08009215 	.word	0x08009215
 8009174:	08009215 	.word	0x08009215
 8009178:	08009215 	.word	0x08009215
 800917c:	08009215 	.word	0x08009215
 8009180:	080091f5 	.word	0x080091f5
 8009184:	08009215 	.word	0x08009215
 8009188:	08009215 	.word	0x08009215
 800918c:	08009215 	.word	0x08009215
 8009190:	08009215 	.word	0x08009215
 8009194:	08009215 	.word	0x08009215
 8009198:	08009215 	.word	0x08009215
 800919c:	08009215 	.word	0x08009215
 80091a0:	080091fd 	.word	0x080091fd
 80091a4:	08009215 	.word	0x08009215
 80091a8:	08009215 	.word	0x08009215
 80091ac:	08009215 	.word	0x08009215
 80091b0:	08009215 	.word	0x08009215
 80091b4:	08009215 	.word	0x08009215
 80091b8:	08009215 	.word	0x08009215
 80091bc:	08009215 	.word	0x08009215
 80091c0:	08009205 	.word	0x08009205
 80091c4:	08009215 	.word	0x08009215
 80091c8:	08009215 	.word	0x08009215
 80091cc:	08009215 	.word	0x08009215
 80091d0:	08009215 	.word	0x08009215
 80091d4:	08009215 	.word	0x08009215
 80091d8:	08009215 	.word	0x08009215
 80091dc:	08009215 	.word	0x08009215
 80091e0:	0800920d 	.word	0x0800920d
 80091e4:	2301      	movs	r3, #1
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ea:	e1c0      	b.n	800956e <UART_SetConfig+0x7ae>
 80091ec:	2304      	movs	r3, #4
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e1bc      	b.n	800956e <UART_SetConfig+0x7ae>
 80091f4:	2308      	movs	r3, #8
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e1b8      	b.n	800956e <UART_SetConfig+0x7ae>
 80091fc:	2310      	movs	r3, #16
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e1b4      	b.n	800956e <UART_SetConfig+0x7ae>
 8009204:	2320      	movs	r3, #32
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e1b0      	b.n	800956e <UART_SetConfig+0x7ae>
 800920c:	2340      	movs	r3, #64	@ 0x40
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e1ac      	b.n	800956e <UART_SetConfig+0x7ae>
 8009214:	2380      	movs	r3, #128	@ 0x80
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e1a8      	b.n	800956e <UART_SetConfig+0x7ae>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a75      	ldr	r2, [pc, #468]	@ (80093f8 <UART_SetConfig+0x638>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d130      	bne.n	8009288 <UART_SetConfig+0x4c8>
 8009226:	4b73      	ldr	r3, [pc, #460]	@ (80093f4 <UART_SetConfig+0x634>)
 8009228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	2b05      	cmp	r3, #5
 8009230:	d826      	bhi.n	8009280 <UART_SetConfig+0x4c0>
 8009232:	a201      	add	r2, pc, #4	@ (adr r2, 8009238 <UART_SetConfig+0x478>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009251 	.word	0x08009251
 800923c:	08009259 	.word	0x08009259
 8009240:	08009261 	.word	0x08009261
 8009244:	08009269 	.word	0x08009269
 8009248:	08009271 	.word	0x08009271
 800924c:	08009279 	.word	0x08009279
 8009250:	2300      	movs	r3, #0
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009256:	e18a      	b.n	800956e <UART_SetConfig+0x7ae>
 8009258:	2304      	movs	r3, #4
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e186      	b.n	800956e <UART_SetConfig+0x7ae>
 8009260:	2308      	movs	r3, #8
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e182      	b.n	800956e <UART_SetConfig+0x7ae>
 8009268:	2310      	movs	r3, #16
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e17e      	b.n	800956e <UART_SetConfig+0x7ae>
 8009270:	2320      	movs	r3, #32
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e17a      	b.n	800956e <UART_SetConfig+0x7ae>
 8009278:	2340      	movs	r3, #64	@ 0x40
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e176      	b.n	800956e <UART_SetConfig+0x7ae>
 8009280:	2380      	movs	r3, #128	@ 0x80
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e172      	b.n	800956e <UART_SetConfig+0x7ae>
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a5b      	ldr	r2, [pc, #364]	@ (80093fc <UART_SetConfig+0x63c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d130      	bne.n	80092f4 <UART_SetConfig+0x534>
 8009292:	4b58      	ldr	r3, [pc, #352]	@ (80093f4 <UART_SetConfig+0x634>)
 8009294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b05      	cmp	r3, #5
 800929c:	d826      	bhi.n	80092ec <UART_SetConfig+0x52c>
 800929e:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <UART_SetConfig+0x4e4>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092bd 	.word	0x080092bd
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	080092cd 	.word	0x080092cd
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092dd 	.word	0x080092dd
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e154      	b.n	800956e <UART_SetConfig+0x7ae>
 80092c4:	2304      	movs	r3, #4
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e150      	b.n	800956e <UART_SetConfig+0x7ae>
 80092cc:	2308      	movs	r3, #8
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d2:	e14c      	b.n	800956e <UART_SetConfig+0x7ae>
 80092d4:	2310      	movs	r3, #16
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e148      	b.n	800956e <UART_SetConfig+0x7ae>
 80092dc:	2320      	movs	r3, #32
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e144      	b.n	800956e <UART_SetConfig+0x7ae>
 80092e4:	2340      	movs	r3, #64	@ 0x40
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e140      	b.n	800956e <UART_SetConfig+0x7ae>
 80092ec:	2380      	movs	r3, #128	@ 0x80
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e13c      	b.n	800956e <UART_SetConfig+0x7ae>
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a41      	ldr	r2, [pc, #260]	@ (8009400 <UART_SetConfig+0x640>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f040 8082 	bne.w	8009404 <UART_SetConfig+0x644>
 8009300:	4b3c      	ldr	r3, [pc, #240]	@ (80093f4 <UART_SetConfig+0x634>)
 8009302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009308:	2b28      	cmp	r3, #40	@ 0x28
 800930a:	d86d      	bhi.n	80093e8 <UART_SetConfig+0x628>
 800930c:	a201      	add	r2, pc, #4	@ (adr r2, 8009314 <UART_SetConfig+0x554>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	080093b9 	.word	0x080093b9
 8009318:	080093e9 	.word	0x080093e9
 800931c:	080093e9 	.word	0x080093e9
 8009320:	080093e9 	.word	0x080093e9
 8009324:	080093e9 	.word	0x080093e9
 8009328:	080093e9 	.word	0x080093e9
 800932c:	080093e9 	.word	0x080093e9
 8009330:	080093e9 	.word	0x080093e9
 8009334:	080093c1 	.word	0x080093c1
 8009338:	080093e9 	.word	0x080093e9
 800933c:	080093e9 	.word	0x080093e9
 8009340:	080093e9 	.word	0x080093e9
 8009344:	080093e9 	.word	0x080093e9
 8009348:	080093e9 	.word	0x080093e9
 800934c:	080093e9 	.word	0x080093e9
 8009350:	080093e9 	.word	0x080093e9
 8009354:	080093c9 	.word	0x080093c9
 8009358:	080093e9 	.word	0x080093e9
 800935c:	080093e9 	.word	0x080093e9
 8009360:	080093e9 	.word	0x080093e9
 8009364:	080093e9 	.word	0x080093e9
 8009368:	080093e9 	.word	0x080093e9
 800936c:	080093e9 	.word	0x080093e9
 8009370:	080093e9 	.word	0x080093e9
 8009374:	080093d1 	.word	0x080093d1
 8009378:	080093e9 	.word	0x080093e9
 800937c:	080093e9 	.word	0x080093e9
 8009380:	080093e9 	.word	0x080093e9
 8009384:	080093e9 	.word	0x080093e9
 8009388:	080093e9 	.word	0x080093e9
 800938c:	080093e9 	.word	0x080093e9
 8009390:	080093e9 	.word	0x080093e9
 8009394:	080093d9 	.word	0x080093d9
 8009398:	080093e9 	.word	0x080093e9
 800939c:	080093e9 	.word	0x080093e9
 80093a0:	080093e9 	.word	0x080093e9
 80093a4:	080093e9 	.word	0x080093e9
 80093a8:	080093e9 	.word	0x080093e9
 80093ac:	080093e9 	.word	0x080093e9
 80093b0:	080093e9 	.word	0x080093e9
 80093b4:	080093e1 	.word	0x080093e1
 80093b8:	2301      	movs	r3, #1
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e0d6      	b.n	800956e <UART_SetConfig+0x7ae>
 80093c0:	2304      	movs	r3, #4
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e0d2      	b.n	800956e <UART_SetConfig+0x7ae>
 80093c8:	2308      	movs	r3, #8
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e0ce      	b.n	800956e <UART_SetConfig+0x7ae>
 80093d0:	2310      	movs	r3, #16
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e0ca      	b.n	800956e <UART_SetConfig+0x7ae>
 80093d8:	2320      	movs	r3, #32
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e0c6      	b.n	800956e <UART_SetConfig+0x7ae>
 80093e0:	2340      	movs	r3, #64	@ 0x40
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e0c2      	b.n	800956e <UART_SetConfig+0x7ae>
 80093e8:	2380      	movs	r3, #128	@ 0x80
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e0be      	b.n	800956e <UART_SetConfig+0x7ae>
 80093f0:	40011400 	.word	0x40011400
 80093f4:	58024400 	.word	0x58024400
 80093f8:	40007800 	.word	0x40007800
 80093fc:	40007c00 	.word	0x40007c00
 8009400:	40011800 	.word	0x40011800
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4aad      	ldr	r2, [pc, #692]	@ (80096c0 <UART_SetConfig+0x900>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d176      	bne.n	80094fc <UART_SetConfig+0x73c>
 800940e:	4bad      	ldr	r3, [pc, #692]	@ (80096c4 <UART_SetConfig+0x904>)
 8009410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009416:	2b28      	cmp	r3, #40	@ 0x28
 8009418:	d86c      	bhi.n	80094f4 <UART_SetConfig+0x734>
 800941a:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <UART_SetConfig+0x660>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	080094c5 	.word	0x080094c5
 8009424:	080094f5 	.word	0x080094f5
 8009428:	080094f5 	.word	0x080094f5
 800942c:	080094f5 	.word	0x080094f5
 8009430:	080094f5 	.word	0x080094f5
 8009434:	080094f5 	.word	0x080094f5
 8009438:	080094f5 	.word	0x080094f5
 800943c:	080094f5 	.word	0x080094f5
 8009440:	080094cd 	.word	0x080094cd
 8009444:	080094f5 	.word	0x080094f5
 8009448:	080094f5 	.word	0x080094f5
 800944c:	080094f5 	.word	0x080094f5
 8009450:	080094f5 	.word	0x080094f5
 8009454:	080094f5 	.word	0x080094f5
 8009458:	080094f5 	.word	0x080094f5
 800945c:	080094f5 	.word	0x080094f5
 8009460:	080094d5 	.word	0x080094d5
 8009464:	080094f5 	.word	0x080094f5
 8009468:	080094f5 	.word	0x080094f5
 800946c:	080094f5 	.word	0x080094f5
 8009470:	080094f5 	.word	0x080094f5
 8009474:	080094f5 	.word	0x080094f5
 8009478:	080094f5 	.word	0x080094f5
 800947c:	080094f5 	.word	0x080094f5
 8009480:	080094dd 	.word	0x080094dd
 8009484:	080094f5 	.word	0x080094f5
 8009488:	080094f5 	.word	0x080094f5
 800948c:	080094f5 	.word	0x080094f5
 8009490:	080094f5 	.word	0x080094f5
 8009494:	080094f5 	.word	0x080094f5
 8009498:	080094f5 	.word	0x080094f5
 800949c:	080094f5 	.word	0x080094f5
 80094a0:	080094e5 	.word	0x080094e5
 80094a4:	080094f5 	.word	0x080094f5
 80094a8:	080094f5 	.word	0x080094f5
 80094ac:	080094f5 	.word	0x080094f5
 80094b0:	080094f5 	.word	0x080094f5
 80094b4:	080094f5 	.word	0x080094f5
 80094b8:	080094f5 	.word	0x080094f5
 80094bc:	080094f5 	.word	0x080094f5
 80094c0:	080094ed 	.word	0x080094ed
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e050      	b.n	800956e <UART_SetConfig+0x7ae>
 80094cc:	2304      	movs	r3, #4
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e04c      	b.n	800956e <UART_SetConfig+0x7ae>
 80094d4:	2308      	movs	r3, #8
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e048      	b.n	800956e <UART_SetConfig+0x7ae>
 80094dc:	2310      	movs	r3, #16
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e044      	b.n	800956e <UART_SetConfig+0x7ae>
 80094e4:	2320      	movs	r3, #32
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ea:	e040      	b.n	800956e <UART_SetConfig+0x7ae>
 80094ec:	2340      	movs	r3, #64	@ 0x40
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e03c      	b.n	800956e <UART_SetConfig+0x7ae>
 80094f4:	2380      	movs	r3, #128	@ 0x80
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e038      	b.n	800956e <UART_SetConfig+0x7ae>
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a71      	ldr	r2, [pc, #452]	@ (80096c8 <UART_SetConfig+0x908>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d130      	bne.n	8009568 <UART_SetConfig+0x7a8>
 8009506:	4b6f      	ldr	r3, [pc, #444]	@ (80096c4 <UART_SetConfig+0x904>)
 8009508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800950a:	f003 0307 	and.w	r3, r3, #7
 800950e:	2b05      	cmp	r3, #5
 8009510:	d826      	bhi.n	8009560 <UART_SetConfig+0x7a0>
 8009512:	a201      	add	r2, pc, #4	@ (adr r2, 8009518 <UART_SetConfig+0x758>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	08009531 	.word	0x08009531
 800951c:	08009539 	.word	0x08009539
 8009520:	08009541 	.word	0x08009541
 8009524:	08009549 	.word	0x08009549
 8009528:	08009551 	.word	0x08009551
 800952c:	08009559 	.word	0x08009559
 8009530:	2302      	movs	r3, #2
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009536:	e01a      	b.n	800956e <UART_SetConfig+0x7ae>
 8009538:	2304      	movs	r3, #4
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953e:	e016      	b.n	800956e <UART_SetConfig+0x7ae>
 8009540:	2308      	movs	r3, #8
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009546:	e012      	b.n	800956e <UART_SetConfig+0x7ae>
 8009548:	2310      	movs	r3, #16
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954e:	e00e      	b.n	800956e <UART_SetConfig+0x7ae>
 8009550:	2320      	movs	r3, #32
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e00a      	b.n	800956e <UART_SetConfig+0x7ae>
 8009558:	2340      	movs	r3, #64	@ 0x40
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e006      	b.n	800956e <UART_SetConfig+0x7ae>
 8009560:	2380      	movs	r3, #128	@ 0x80
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e002      	b.n	800956e <UART_SetConfig+0x7ae>
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a55      	ldr	r2, [pc, #340]	@ (80096c8 <UART_SetConfig+0x908>)
 8009574:	4293      	cmp	r3, r2
 8009576:	f040 80f8 	bne.w	800976a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800957a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800957e:	2b20      	cmp	r3, #32
 8009580:	dc46      	bgt.n	8009610 <UART_SetConfig+0x850>
 8009582:	2b02      	cmp	r3, #2
 8009584:	db75      	blt.n	8009672 <UART_SetConfig+0x8b2>
 8009586:	3b02      	subs	r3, #2
 8009588:	2b1e      	cmp	r3, #30
 800958a:	d872      	bhi.n	8009672 <UART_SetConfig+0x8b2>
 800958c:	a201      	add	r2, pc, #4	@ (adr r2, 8009594 <UART_SetConfig+0x7d4>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	08009617 	.word	0x08009617
 8009598:	08009673 	.word	0x08009673
 800959c:	0800961f 	.word	0x0800961f
 80095a0:	08009673 	.word	0x08009673
 80095a4:	08009673 	.word	0x08009673
 80095a8:	08009673 	.word	0x08009673
 80095ac:	0800962f 	.word	0x0800962f
 80095b0:	08009673 	.word	0x08009673
 80095b4:	08009673 	.word	0x08009673
 80095b8:	08009673 	.word	0x08009673
 80095bc:	08009673 	.word	0x08009673
 80095c0:	08009673 	.word	0x08009673
 80095c4:	08009673 	.word	0x08009673
 80095c8:	08009673 	.word	0x08009673
 80095cc:	0800963f 	.word	0x0800963f
 80095d0:	08009673 	.word	0x08009673
 80095d4:	08009673 	.word	0x08009673
 80095d8:	08009673 	.word	0x08009673
 80095dc:	08009673 	.word	0x08009673
 80095e0:	08009673 	.word	0x08009673
 80095e4:	08009673 	.word	0x08009673
 80095e8:	08009673 	.word	0x08009673
 80095ec:	08009673 	.word	0x08009673
 80095f0:	08009673 	.word	0x08009673
 80095f4:	08009673 	.word	0x08009673
 80095f8:	08009673 	.word	0x08009673
 80095fc:	08009673 	.word	0x08009673
 8009600:	08009673 	.word	0x08009673
 8009604:	08009673 	.word	0x08009673
 8009608:	08009673 	.word	0x08009673
 800960c:	08009665 	.word	0x08009665
 8009610:	2b40      	cmp	r3, #64	@ 0x40
 8009612:	d02a      	beq.n	800966a <UART_SetConfig+0x8aa>
 8009614:	e02d      	b.n	8009672 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009616:	f7fe f82b 	bl	8007670 <HAL_RCCEx_GetD3PCLK1Freq>
 800961a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800961c:	e02f      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800961e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe f83a 	bl	800769c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	e027      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800962e:	f107 0318 	add.w	r3, r7, #24
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe f986 	bl	8007944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800963c:	e01f      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800963e:	4b21      	ldr	r3, [pc, #132]	@ (80096c4 <UART_SetConfig+0x904>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800964a:	4b1e      	ldr	r3, [pc, #120]	@ (80096c4 <UART_SetConfig+0x904>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	f003 0303 	and.w	r3, r3, #3
 8009654:	4a1d      	ldr	r2, [pc, #116]	@ (80096cc <UART_SetConfig+0x90c>)
 8009656:	fa22 f303 	lsr.w	r3, r2, r3
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800965c:	e00f      	b.n	800967e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800965e:	4b1b      	ldr	r3, [pc, #108]	@ (80096cc <UART_SetConfig+0x90c>)
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009662:	e00c      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009664:	4b1a      	ldr	r3, [pc, #104]	@ (80096d0 <UART_SetConfig+0x910>)
 8009666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009668:	e009      	b.n	800967e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800966a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009670:	e005      	b.n	800967e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800967c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800967e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 81ee 	beq.w	8009a62 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	4a12      	ldr	r2, [pc, #72]	@ (80096d4 <UART_SetConfig+0x914>)
 800968c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009690:	461a      	mov	r2, r3
 8009692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009694:	fbb3 f3f2 	udiv	r3, r3, r2
 8009698:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	4413      	add	r3, r2
 80096a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d305      	bcc.n	80096b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80096b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d910      	bls.n	80096d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096bc:	e1d1      	b.n	8009a62 <UART_SetConfig+0xca2>
 80096be:	bf00      	nop
 80096c0:	40011c00 	.word	0x40011c00
 80096c4:	58024400 	.word	0x58024400
 80096c8:	58000c00 	.word	0x58000c00
 80096cc:	03d09000 	.word	0x03d09000
 80096d0:	003d0900 	.word	0x003d0900
 80096d4:	0800d800 	.word	0x0800d800
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096da:	2200      	movs	r2, #0
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	60fa      	str	r2, [r7, #12]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e4:	4ac0      	ldr	r2, [pc, #768]	@ (80099e8 <UART_SetConfig+0xc28>)
 80096e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	2200      	movs	r2, #0
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096fa:	f7f6 fdf9 	bl	80002f0 <__aeabi_uldivmod>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4610      	mov	r0, r2
 8009704:	4619      	mov	r1, r3
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	f04f 0300 	mov.w	r3, #0
 800970e:	020b      	lsls	r3, r1, #8
 8009710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009714:	0202      	lsls	r2, r0, #8
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	6849      	ldr	r1, [r1, #4]
 800971a:	0849      	lsrs	r1, r1, #1
 800971c:	2000      	movs	r0, #0
 800971e:	460c      	mov	r4, r1
 8009720:	4605      	mov	r5, r0
 8009722:	eb12 0804 	adds.w	r8, r2, r4
 8009726:	eb43 0905 	adc.w	r9, r3, r5
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	469a      	mov	sl, r3
 8009732:	4693      	mov	fp, r2
 8009734:	4652      	mov	r2, sl
 8009736:	465b      	mov	r3, fp
 8009738:	4640      	mov	r0, r8
 800973a:	4649      	mov	r1, r9
 800973c:	f7f6 fdd8 	bl	80002f0 <__aeabi_uldivmod>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4613      	mov	r3, r2
 8009746:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800974e:	d308      	bcc.n	8009762 <UART_SetConfig+0x9a2>
 8009750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009756:	d204      	bcs.n	8009762 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800975e:	60da      	str	r2, [r3, #12]
 8009760:	e17f      	b.n	8009a62 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009768:	e17b      	b.n	8009a62 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009772:	f040 80bd 	bne.w	80098f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009776:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800977a:	2b20      	cmp	r3, #32
 800977c:	dc48      	bgt.n	8009810 <UART_SetConfig+0xa50>
 800977e:	2b00      	cmp	r3, #0
 8009780:	db7b      	blt.n	800987a <UART_SetConfig+0xaba>
 8009782:	2b20      	cmp	r3, #32
 8009784:	d879      	bhi.n	800987a <UART_SetConfig+0xaba>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <UART_SetConfig+0x9cc>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	08009817 	.word	0x08009817
 8009790:	0800981f 	.word	0x0800981f
 8009794:	0800987b 	.word	0x0800987b
 8009798:	0800987b 	.word	0x0800987b
 800979c:	08009827 	.word	0x08009827
 80097a0:	0800987b 	.word	0x0800987b
 80097a4:	0800987b 	.word	0x0800987b
 80097a8:	0800987b 	.word	0x0800987b
 80097ac:	08009837 	.word	0x08009837
 80097b0:	0800987b 	.word	0x0800987b
 80097b4:	0800987b 	.word	0x0800987b
 80097b8:	0800987b 	.word	0x0800987b
 80097bc:	0800987b 	.word	0x0800987b
 80097c0:	0800987b 	.word	0x0800987b
 80097c4:	0800987b 	.word	0x0800987b
 80097c8:	0800987b 	.word	0x0800987b
 80097cc:	08009847 	.word	0x08009847
 80097d0:	0800987b 	.word	0x0800987b
 80097d4:	0800987b 	.word	0x0800987b
 80097d8:	0800987b 	.word	0x0800987b
 80097dc:	0800987b 	.word	0x0800987b
 80097e0:	0800987b 	.word	0x0800987b
 80097e4:	0800987b 	.word	0x0800987b
 80097e8:	0800987b 	.word	0x0800987b
 80097ec:	0800987b 	.word	0x0800987b
 80097f0:	0800987b 	.word	0x0800987b
 80097f4:	0800987b 	.word	0x0800987b
 80097f8:	0800987b 	.word	0x0800987b
 80097fc:	0800987b 	.word	0x0800987b
 8009800:	0800987b 	.word	0x0800987b
 8009804:	0800987b 	.word	0x0800987b
 8009808:	0800987b 	.word	0x0800987b
 800980c:	0800986d 	.word	0x0800986d
 8009810:	2b40      	cmp	r3, #64	@ 0x40
 8009812:	d02e      	beq.n	8009872 <UART_SetConfig+0xab2>
 8009814:	e031      	b.n	800987a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009816:	f7fc fcff 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800981a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800981c:	e033      	b.n	8009886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800981e:	f7fc fd11 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 8009822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009824:	e02f      	b.n	8009886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800982a:	4618      	mov	r0, r3
 800982c:	f7fd ff36 	bl	800769c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009834:	e027      	b.n	8009886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe f882 	bl	8007944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009844:	e01f      	b.n	8009886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009846:	4b69      	ldr	r3, [pc, #420]	@ (80099ec <UART_SetConfig+0xc2c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0320 	and.w	r3, r3, #32
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009852:	4b66      	ldr	r3, [pc, #408]	@ (80099ec <UART_SetConfig+0xc2c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	08db      	lsrs	r3, r3, #3
 8009858:	f003 0303 	and.w	r3, r3, #3
 800985c:	4a64      	ldr	r2, [pc, #400]	@ (80099f0 <UART_SetConfig+0xc30>)
 800985e:	fa22 f303 	lsr.w	r3, r2, r3
 8009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009864:	e00f      	b.n	8009886 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009866:	4b62      	ldr	r3, [pc, #392]	@ (80099f0 <UART_SetConfig+0xc30>)
 8009868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800986a:	e00c      	b.n	8009886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800986c:	4b61      	ldr	r3, [pc, #388]	@ (80099f4 <UART_SetConfig+0xc34>)
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009870:	e009      	b.n	8009886 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009878:	e005      	b.n	8009886 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80ea 	beq.w	8009a62 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009892:	4a55      	ldr	r2, [pc, #340]	@ (80099e8 <UART_SetConfig+0xc28>)
 8009894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009898:	461a      	mov	r2, r3
 800989a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800989c:	fbb3 f3f2 	udiv	r3, r3, r2
 80098a0:	005a      	lsls	r2, r3, #1
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	085b      	lsrs	r3, r3, #1
 80098a8:	441a      	add	r2, r3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d916      	bls.n	80098e8 <UART_SetConfig+0xb28>
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c0:	d212      	bcs.n	80098e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	f023 030f 	bic.w	r3, r3, #15
 80098ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	085b      	lsrs	r3, r3, #1
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80098da:	4313      	orrs	r3, r2
 80098dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80098e4:	60da      	str	r2, [r3, #12]
 80098e6:	e0bc      	b.n	8009a62 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80098ee:	e0b8      	b.n	8009a62 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	dc4b      	bgt.n	8009990 <UART_SetConfig+0xbd0>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f2c0 8087 	blt.w	8009a0c <UART_SetConfig+0xc4c>
 80098fe:	2b20      	cmp	r3, #32
 8009900:	f200 8084 	bhi.w	8009a0c <UART_SetConfig+0xc4c>
 8009904:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <UART_SetConfig+0xb4c>)
 8009906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990a:	bf00      	nop
 800990c:	08009997 	.word	0x08009997
 8009910:	0800999f 	.word	0x0800999f
 8009914:	08009a0d 	.word	0x08009a0d
 8009918:	08009a0d 	.word	0x08009a0d
 800991c:	080099a7 	.word	0x080099a7
 8009920:	08009a0d 	.word	0x08009a0d
 8009924:	08009a0d 	.word	0x08009a0d
 8009928:	08009a0d 	.word	0x08009a0d
 800992c:	080099b7 	.word	0x080099b7
 8009930:	08009a0d 	.word	0x08009a0d
 8009934:	08009a0d 	.word	0x08009a0d
 8009938:	08009a0d 	.word	0x08009a0d
 800993c:	08009a0d 	.word	0x08009a0d
 8009940:	08009a0d 	.word	0x08009a0d
 8009944:	08009a0d 	.word	0x08009a0d
 8009948:	08009a0d 	.word	0x08009a0d
 800994c:	080099c7 	.word	0x080099c7
 8009950:	08009a0d 	.word	0x08009a0d
 8009954:	08009a0d 	.word	0x08009a0d
 8009958:	08009a0d 	.word	0x08009a0d
 800995c:	08009a0d 	.word	0x08009a0d
 8009960:	08009a0d 	.word	0x08009a0d
 8009964:	08009a0d 	.word	0x08009a0d
 8009968:	08009a0d 	.word	0x08009a0d
 800996c:	08009a0d 	.word	0x08009a0d
 8009970:	08009a0d 	.word	0x08009a0d
 8009974:	08009a0d 	.word	0x08009a0d
 8009978:	08009a0d 	.word	0x08009a0d
 800997c:	08009a0d 	.word	0x08009a0d
 8009980:	08009a0d 	.word	0x08009a0d
 8009984:	08009a0d 	.word	0x08009a0d
 8009988:	08009a0d 	.word	0x08009a0d
 800998c:	080099ff 	.word	0x080099ff
 8009990:	2b40      	cmp	r3, #64	@ 0x40
 8009992:	d037      	beq.n	8009a04 <UART_SetConfig+0xc44>
 8009994:	e03a      	b.n	8009a0c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009996:	f7fc fc3f 	bl	8006218 <HAL_RCC_GetPCLK1Freq>
 800999a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800999c:	e03c      	b.n	8009a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800999e:	f7fc fc51 	bl	8006244 <HAL_RCC_GetPCLK2Freq>
 80099a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099a4:	e038      	b.n	8009a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fd fe76 	bl	800769c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099b4:	e030      	b.n	8009a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b6:	f107 0318 	add.w	r3, r7, #24
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fd ffc2 	bl	8007944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c4:	e028      	b.n	8009a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c6:	4b09      	ldr	r3, [pc, #36]	@ (80099ec <UART_SetConfig+0xc2c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0320 	and.w	r3, r3, #32
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d012      	beq.n	80099f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099d2:	4b06      	ldr	r3, [pc, #24]	@ (80099ec <UART_SetConfig+0xc2c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	08db      	lsrs	r3, r3, #3
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	4a04      	ldr	r2, [pc, #16]	@ (80099f0 <UART_SetConfig+0xc30>)
 80099de:	fa22 f303 	lsr.w	r3, r2, r3
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099e4:	e018      	b.n	8009a18 <UART_SetConfig+0xc58>
 80099e6:	bf00      	nop
 80099e8:	0800d800 	.word	0x0800d800
 80099ec:	58024400 	.word	0x58024400
 80099f0:	03d09000 	.word	0x03d09000
 80099f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80099f8:	4b24      	ldr	r3, [pc, #144]	@ (8009a8c <UART_SetConfig+0xccc>)
 80099fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099fc:	e00c      	b.n	8009a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099fe:	4b24      	ldr	r3, [pc, #144]	@ (8009a90 <UART_SetConfig+0xcd0>)
 8009a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a02:	e009      	b.n	8009a18 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a0a:	e005      	b.n	8009a18 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a16:	bf00      	nop
    }

    if (pclk != 0U)
 8009a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d021      	beq.n	8009a62 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a22:	4a1c      	ldr	r2, [pc, #112]	@ (8009a94 <UART_SetConfig+0xcd4>)
 8009a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	441a      	add	r2, r3
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a40:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a44:	2b0f      	cmp	r3, #15
 8009a46:	d909      	bls.n	8009a5c <UART_SetConfig+0xc9c>
 8009a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a4e:	d205      	bcs.n	8009a5c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	60da      	str	r2, [r3, #12]
 8009a5a:	e002      	b.n	8009a62 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2200      	movs	r2, #0
 8009a76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a7e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3748      	adds	r7, #72	@ 0x48
 8009a86:	46bd      	mov	sp, r7
 8009a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a8c:	03d09000 	.word	0x03d09000
 8009a90:	003d0900 	.word	0x003d0900
 8009a94:	0800d800 	.word	0x0800d800

08009a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00a      	beq.n	8009ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2c:	f003 0310 	and.w	r3, r3, #16
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01a      	beq.n	8009bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b96:	d10a      	bne.n	8009bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	605a      	str	r2, [r3, #4]
  }
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b098      	sub	sp, #96	@ 0x60
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bec:	f7f7 fab8 	bl	8001160 <HAL_GetTick>
 8009bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d12f      	bne.n	8009c60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f88e 	bl	8009d30 <UART_WaitOnFlagUntilTimeout>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d022      	beq.n	8009c60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	e853 3f00 	ldrex	r3, [r3]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	461a      	mov	r2, r3
 8009c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c40:	e841 2300 	strex	r3, r2, [r1]
 8009c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e6      	bne.n	8009c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e063      	b.n	8009d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0304 	and.w	r3, r3, #4
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d149      	bne.n	8009d02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c76:	2200      	movs	r2, #0
 8009c78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f857 	bl	8009d30 <UART_WaitOnFlagUntilTimeout>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d03c      	beq.n	8009d02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	623b      	str	r3, [r7, #32]
   return(result);
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e6      	bne.n	8009c88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cda:	61fa      	str	r2, [r7, #28]
 8009cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	69b9      	ldr	r1, [r7, #24]
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e5      	bne.n	8009cba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e012      	b.n	8009d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2220      	movs	r2, #32
 8009d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3758      	adds	r7, #88	@ 0x58
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d40:	e04f      	b.n	8009de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d04b      	beq.n	8009de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7f7 fa09 	bl	8001160 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e04e      	b.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d037      	beq.n	8009de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b80      	cmp	r3, #128	@ 0x80
 8009d76:	d034      	beq.n	8009de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b40      	cmp	r3, #64	@ 0x40
 8009d7c:	d031      	beq.n	8009de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d110      	bne.n	8009dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2208      	movs	r2, #8
 8009d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f839 	bl	8009e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e029      	b.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dbc:	d111      	bne.n	8009de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 f81f 	bl	8009e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e00f      	b.n	8009e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69da      	ldr	r2, [r3, #28]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4013      	ands	r3, r2
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	bf0c      	ite	eq
 8009df2:	2301      	moveq	r3, #1
 8009df4:	2300      	movne	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d0a0      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b095      	sub	sp, #84	@ 0x54
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e6      	bne.n	8009e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	e853 3f00 	ldrex	r3, [r3]
 8009e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed4 <UART_EndRxTransfer+0xc8>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3308      	adds	r3, #8
 8009e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e5      	bne.n	8009e46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d118      	bne.n	8009eb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f023 0310 	bic.w	r3, r3, #16
 8009e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ea0:	61bb      	str	r3, [r7, #24]
 8009ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	6979      	ldr	r1, [r7, #20]
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	613b      	str	r3, [r7, #16]
   return(result);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e6      	bne.n	8009e82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ec8:	bf00      	nop
 8009eca:	3754      	adds	r7, #84	@ 0x54
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	effffffe 	.word	0xeffffffe

08009ed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f7fe ff4c 	bl	8008d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009efc:	bf00      	nop
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f20:	61fb      	str	r3, [r7, #28]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	61bb      	str	r3, [r7, #24]
 8009f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6979      	ldr	r1, [r7, #20]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	613b      	str	r3, [r7, #16]
   return(result);
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e6      	bne.n	8009f0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2220      	movs	r2, #32
 8009f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7fe ff17 	bl	8008d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f52:	bf00      	nop
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b083      	sub	sp, #12
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f62:	bf00      	nop
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d101      	bne.n	8009fac <HAL_UARTEx_DisableFifoMode+0x16>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e027      	b.n	8009ffc <HAL_UARTEx_DisableFifoMode+0x66>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2224      	movs	r2, #36	@ 0x24
 8009fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0201 	bic.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e02d      	b.n	800a07c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2224      	movs	r2, #36	@ 0x24
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0201 	bic.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	430a      	orrs	r2, r1
 800a05a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f84f 	bl	800a100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a098:	2302      	movs	r3, #2
 800a09a:	e02d      	b.n	800a0f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2224      	movs	r2, #36	@ 0x24
 800a0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0201 	bic.w	r2, r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f811 	bl	800a100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d108      	bne.n	800a122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a120:	e031      	b.n	800a186 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a122:	2310      	movs	r3, #16
 800a124:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a126:	2310      	movs	r3, #16
 800a128:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	0e5b      	lsrs	r3, r3, #25
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0307 	and.w	r3, r3, #7
 800a138:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	0f5b      	lsrs	r3, r3, #29
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f003 0307 	and.w	r3, r3, #7
 800a148:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	7b3a      	ldrb	r2, [r7, #12]
 800a14e:	4911      	ldr	r1, [pc, #68]	@ (800a194 <UARTEx_SetNbDataToProcess+0x94>)
 800a150:	5c8a      	ldrb	r2, [r1, r2]
 800a152:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a156:	7b3a      	ldrb	r2, [r7, #12]
 800a158:	490f      	ldr	r1, [pc, #60]	@ (800a198 <UARTEx_SetNbDataToProcess+0x98>)
 800a15a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a15c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a160:	b29a      	uxth	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	7b7a      	ldrb	r2, [r7, #13]
 800a16c:	4909      	ldr	r1, [pc, #36]	@ (800a194 <UARTEx_SetNbDataToProcess+0x94>)
 800a16e:	5c8a      	ldrb	r2, [r1, r2]
 800a170:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a174:	7b7a      	ldrb	r2, [r7, #13]
 800a176:	4908      	ldr	r1, [pc, #32]	@ (800a198 <UARTEx_SetNbDataToProcess+0x98>)
 800a178:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	0800d818 	.word	0x0800d818
 800a198:	0800d820 	.word	0x0800d820

0800a19c <__NVIC_SetPriority>:
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a1a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	db0a      	blt.n	800a1c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	490c      	ldr	r1, [pc, #48]	@ (800a1e8 <__NVIC_SetPriority+0x4c>)
 800a1b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1ba:	0112      	lsls	r2, r2, #4
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	440b      	add	r3, r1
 800a1c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a1c4:	e00a      	b.n	800a1dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	4908      	ldr	r1, [pc, #32]	@ (800a1ec <__NVIC_SetPriority+0x50>)
 800a1cc:	88fb      	ldrh	r3, [r7, #6]
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	3b04      	subs	r3, #4
 800a1d4:	0112      	lsls	r2, r2, #4
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	440b      	add	r3, r1
 800a1da:	761a      	strb	r2, [r3, #24]
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	e000e100 	.word	0xe000e100
 800a1ec:	e000ed00 	.word	0xe000ed00

0800a1f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a1f4:	4b05      	ldr	r3, [pc, #20]	@ (800a20c <SysTick_Handler+0x1c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a1f8:	f001 ff62 	bl	800c0c0 <xTaskGetSchedulerState>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d001      	beq.n	800a206 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a202:	f002 fe59 	bl	800ceb8 <xPortSysTickHandler>
  }
}
 800a206:	bf00      	nop
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	e000e010 	.word	0xe000e010

0800a210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a214:	2100      	movs	r1, #0
 800a216:	f06f 0004 	mvn.w	r0, #4
 800a21a:	f7ff ffbf 	bl	800a19c <__NVIC_SetPriority>
#endif
}
 800a21e:	bf00      	nop
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22a:	f3ef 8305 	mrs	r3, IPSR
 800a22e:	603b      	str	r3, [r7, #0]
  return(result);
 800a230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a236:	f06f 0305 	mvn.w	r3, #5
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e00c      	b.n	800a258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a23e:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <osKernelInitialize+0x44>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a246:	4b08      	ldr	r3, [pc, #32]	@ (800a268 <osKernelInitialize+0x44>)
 800a248:	2201      	movs	r2, #1
 800a24a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	607b      	str	r3, [r7, #4]
 800a250:	e002      	b.n	800a258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a252:	f04f 33ff 	mov.w	r3, #4294967295
 800a256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a258:	687b      	ldr	r3, [r7, #4]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	240002bc 	.word	0x240002bc

0800a26c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a272:	f3ef 8305 	mrs	r3, IPSR
 800a276:	603b      	str	r3, [r7, #0]
  return(result);
 800a278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a27e:	f06f 0305 	mvn.w	r3, #5
 800a282:	607b      	str	r3, [r7, #4]
 800a284:	e010      	b.n	800a2a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a286:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b4 <osKernelStart+0x48>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d109      	bne.n	800a2a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a28e:	f7ff ffbf 	bl	800a210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a292:	4b08      	ldr	r3, [pc, #32]	@ (800a2b4 <osKernelStart+0x48>)
 800a294:	2202      	movs	r2, #2
 800a296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a298:	f001 f9f6 	bl	800b688 <vTaskStartScheduler>
      stat = osOK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	607b      	str	r3, [r7, #4]
 800a2a0:	e002      	b.n	800a2a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2a8:	687b      	ldr	r3, [r7, #4]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	240002bc 	.word	0x240002bc

0800a2b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08e      	sub	sp, #56	@ 0x38
 800a2bc:	af04      	add	r7, sp, #16
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2c8:	f3ef 8305 	mrs	r3, IPSR
 800a2cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a2ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d17e      	bne.n	800a3d2 <osThreadNew+0x11a>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d07b      	beq.n	800a3d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2da:	2380      	movs	r3, #128	@ 0x80
 800a2dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2de:	2318      	movs	r3, #24
 800a2e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d045      	beq.n	800a37e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d002      	beq.n	800a300 <osThreadNew+0x48>
        name = attr->name;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d008      	beq.n	800a326 <osThreadNew+0x6e>
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2b38      	cmp	r3, #56	@ 0x38
 800a318:	d805      	bhi.n	800a326 <osThreadNew+0x6e>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <osThreadNew+0x72>
        return (NULL);
 800a326:	2300      	movs	r3, #0
 800a328:	e054      	b.n	800a3d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	089b      	lsrs	r3, r3, #2
 800a338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00e      	beq.n	800a360 <osThreadNew+0xa8>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	2ba7      	cmp	r3, #167	@ 0xa7
 800a348:	d90a      	bls.n	800a360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d006      	beq.n	800a360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <osThreadNew+0xa8>
        mem = 1;
 800a35a:	2301      	movs	r3, #1
 800a35c:	61bb      	str	r3, [r7, #24]
 800a35e:	e010      	b.n	800a382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10c      	bne.n	800a382 <osThreadNew+0xca>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d108      	bne.n	800a382 <osThreadNew+0xca>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <osThreadNew+0xca>
          mem = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	61bb      	str	r3, [r7, #24]
 800a37c:	e001      	b.n	800a382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d110      	bne.n	800a3aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a390:	9202      	str	r2, [sp, #8]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	6a3a      	ldr	r2, [r7, #32]
 800a39c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 ff7e 	bl	800b2a0 <xTaskCreateStatic>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	e013      	b.n	800a3d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d110      	bne.n	800a3d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	f107 0310 	add.w	r3, r7, #16
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 ffcc 	bl	800b360 <xTaskCreate>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d001      	beq.n	800a3d2 <osThreadNew+0x11a>
            hTask = NULL;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3d2:	693b      	ldr	r3, [r7, #16]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3728      	adds	r7, #40	@ 0x28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3e4:	f3ef 8305 	mrs	r3, IPSR
 800a3e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <osDelay+0x1c>
    stat = osErrorISR;
 800a3f0:	f06f 0305 	mvn.w	r3, #5
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	e007      	b.n	800a408 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f001 f90a 	bl	800b61c <vTaskDelay>
    }
  }

  return (stat);
 800a408:	68fb      	ldr	r3, [r7, #12]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a07      	ldr	r2, [pc, #28]	@ (800a440 <vApplicationGetIdleTaskMemory+0x2c>)
 800a424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a06      	ldr	r2, [pc, #24]	@ (800a444 <vApplicationGetIdleTaskMemory+0x30>)
 800a42a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2280      	movs	r2, #128	@ 0x80
 800a430:	601a      	str	r2, [r3, #0]
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	240002c0 	.word	0x240002c0
 800a444:	24000368 	.word	0x24000368

0800a448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4a07      	ldr	r2, [pc, #28]	@ (800a474 <vApplicationGetTimerTaskMemory+0x2c>)
 800a458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	4a06      	ldr	r2, [pc, #24]	@ (800a478 <vApplicationGetTimerTaskMemory+0x30>)
 800a45e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a466:	601a      	str	r2, [r3, #0]
}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	24000568 	.word	0x24000568
 800a478:	24000610 	.word	0x24000610

0800a47c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f103 0208 	add.w	r2, r3, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f04f 32ff 	mov.w	r2, #4294967295
 800a494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f103 0208 	add.w	r2, r3, #8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f103 0208 	add.w	r2, r3, #8
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d103      	bne.n	800a53e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e00c      	b.n	800a558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3308      	adds	r3, #8
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	e002      	b.n	800a54c <vListInsert+0x2e>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	d2f6      	bcs.n	800a546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6892      	ldr	r2, [r2, #8]
 800a5a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6852      	ldr	r2, [r2, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d103      	bne.n	800a5c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	1e5a      	subs	r2, r3, #1
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10b      	bne.n	800a610 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a610:	f002 fbc2 	bl	800cd98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61c:	68f9      	ldr	r1, [r7, #12]
 800a61e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a620:	fb01 f303 	mul.w	r3, r1, r3
 800a624:	441a      	add	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a640:	3b01      	subs	r3, #1
 800a642:	68f9      	ldr	r1, [r7, #12]
 800a644:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	441a      	add	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	22ff      	movs	r2, #255	@ 0xff
 800a654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	22ff      	movs	r2, #255	@ 0xff
 800a65c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d114      	bne.n	800a690 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01a      	beq.n	800a6a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f001 fb06 	bl	800bc84 <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d012      	beq.n	800a6a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <xQueueGenericReset+0xd0>)
 800a680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	e009      	b.n	800a6a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3310      	adds	r3, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fef1 	bl	800a47c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3324      	adds	r3, #36	@ 0x24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff feec 	bl	800a47c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6a4:	f002 fbaa 	bl	800cdfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6a8:	2301      	movs	r3, #1
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08e      	sub	sp, #56	@ 0x38
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	e7fd      	b.n	800a6fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <xQueueGenericCreateStatic+0x56>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <xQueueGenericCreateStatic+0x5a>
 800a70e:	2301      	movs	r3, #1
 800a710:	e000      	b.n	800a714 <xQueueGenericCreateStatic+0x5c>
 800a712:	2300      	movs	r3, #0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10b      	bne.n	800a730 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	623b      	str	r3, [r7, #32]
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	e7fd      	b.n	800a72c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <xQueueGenericCreateStatic+0x84>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <xQueueGenericCreateStatic+0x88>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e000      	b.n	800a742 <xQueueGenericCreateStatic+0x8a>
 800a740:	2300      	movs	r3, #0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10b      	bne.n	800a75e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	61fb      	str	r3, [r7, #28]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a75e:	2350      	movs	r3, #80	@ 0x50
 800a760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b50      	cmp	r3, #80	@ 0x50
 800a766:	d00b      	beq.n	800a780 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	61bb      	str	r3, [r7, #24]
}
 800a77a:	bf00      	nop
 800a77c:	bf00      	nop
 800a77e:	e7fd      	b.n	800a77c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a780:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00d      	beq.n	800a7a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a794:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 f840 	bl	800a828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3730      	adds	r7, #48	@ 0x30
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b08a      	sub	sp, #40	@ 0x28
 800a7b6:	af02      	add	r7, sp, #8
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <xQueueGenericCreate+0x2c>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	613b      	str	r3, [r7, #16]
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	e7fd      	b.n	800a7da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	fb02 f303 	mul.w	r3, r2, r3
 800a7e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	3350      	adds	r3, #80	@ 0x50
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f002 fcd9 	bl	800d1a4 <pvPortMalloc>
 800a7f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d011      	beq.n	800a81e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	3350      	adds	r3, #80	@ 0x50
 800a802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a80c:	79fa      	ldrb	r2, [r7, #7]
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	4613      	mov	r3, r2
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f805 	bl	800a828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a81e:	69bb      	ldr	r3, [r7, #24]
	}
 800a820:	4618      	mov	r0, r3
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d103      	bne.n	800a844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	e002      	b.n	800a84a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a856:	2101      	movs	r1, #1
 800a858:	69b8      	ldr	r0, [r7, #24]
 800a85a:	f7ff fec3 	bl	800a5e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	78fa      	ldrb	r2, [r7, #3]
 800a862:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08e      	sub	sp, #56	@ 0x38
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a87e:	2300      	movs	r3, #0
 800a880:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10b      	bne.n	800a8a4 <xQueueGenericSend+0x34>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a89e:	bf00      	nop
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <xQueueGenericSend+0x42>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <xQueueGenericSend+0x46>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <xQueueGenericSend+0x48>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10b      	bne.n	800a8d4 <xQueueGenericSend+0x64>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	e7fd      	b.n	800a8d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d103      	bne.n	800a8e2 <xQueueGenericSend+0x72>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d101      	bne.n	800a8e6 <xQueueGenericSend+0x76>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <xQueueGenericSend+0x78>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <xQueueGenericSend+0x94>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	623b      	str	r3, [r7, #32]
}
 800a8fe:	bf00      	nop
 800a900:	bf00      	nop
 800a902:	e7fd      	b.n	800a900 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a904:	f001 fbdc 	bl	800c0c0 <xTaskGetSchedulerState>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <xQueueGenericSend+0xa4>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <xQueueGenericSend+0xa8>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <xQueueGenericSend+0xaa>
 800a918:	2300      	movs	r3, #0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10b      	bne.n	800a936 <xQueueGenericSend+0xc6>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61fb      	str	r3, [r7, #28]
}
 800a930:	bf00      	nop
 800a932:	bf00      	nop
 800a934:	e7fd      	b.n	800a932 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a936:	f002 fa2f 	bl	800cd98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a942:	429a      	cmp	r2, r3
 800a944:	d302      	bcc.n	800a94c <xQueueGenericSend+0xdc>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d129      	bne.n	800a9a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a952:	f000 fb37 	bl	800afc4 <prvCopyDataToQueue>
 800a956:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d010      	beq.n	800a982 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a962:	3324      	adds	r3, #36	@ 0x24
 800a964:	4618      	mov	r0, r3
 800a966:	f001 f98d 	bl	800bc84 <xTaskRemoveFromEventList>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d013      	beq.n	800a998 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a970:	4b3f      	ldr	r3, [pc, #252]	@ (800aa70 <xQueueGenericSend+0x200>)
 800a972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	e00a      	b.n	800a998 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a988:	4b39      	ldr	r3, [pc, #228]	@ (800aa70 <xQueueGenericSend+0x200>)
 800a98a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a998:	f002 fa30 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e063      	b.n	800aa68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d103      	bne.n	800a9ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9a6:	f002 fa29 	bl	800cdfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e05c      	b.n	800aa68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d106      	bne.n	800a9c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9b4:	f107 0314 	add.w	r3, r7, #20
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f001 f9c9 	bl	800bd50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9c2:	f002 fa1b 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9c6:	f000 fecf 	bl	800b768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ca:	f002 f9e5 	bl	800cd98 <vPortEnterCritical>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9d4:	b25b      	sxtb	r3, r3
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d103      	bne.n	800a9e4 <xQueueGenericSend+0x174>
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9ea:	b25b      	sxtb	r3, r3
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d103      	bne.n	800a9fa <xQueueGenericSend+0x18a>
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9fa:	f002 f9ff 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9fe:	1d3a      	adds	r2, r7, #4
 800aa00:	f107 0314 	add.w	r3, r7, #20
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 f9b8 	bl	800bd7c <xTaskCheckForTimeOut>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d124      	bne.n	800aa5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa14:	f000 fbce 	bl	800b1b4 <prvIsQueueFull>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d018      	beq.n	800aa50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	3310      	adds	r3, #16
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 f8da 	bl	800bbe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa2e:	f000 fb59 	bl	800b0e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa32:	f000 fedf 	bl	800b7f4 <xTaskResumeAll>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f47f af7c 	bne.w	800a936 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aa3e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa70 <xQueueGenericSend+0x200>)
 800aa40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	e772      	b.n	800a936 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa52:	f000 fb47 	bl	800b0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa56:	f000 fecd 	bl	800b7f4 <xTaskResumeAll>
 800aa5a:	e76c      	b.n	800a936 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa5e:	f000 fb41 	bl	800b0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa62:	f000 fec7 	bl	800b7f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3738      	adds	r7, #56	@ 0x38
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	e000ed04 	.word	0xe000ed04

0800aa74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b090      	sub	sp, #64	@ 0x40
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10b      	bne.n	800aaa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa9e:	bf00      	nop
 800aaa0:	bf00      	nop
 800aaa2:	e7fd      	b.n	800aaa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d103      	bne.n	800aab2 <xQueueGenericSendFromISR+0x3e>
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <xQueueGenericSendFromISR+0x42>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e000      	b.n	800aab8 <xQueueGenericSendFromISR+0x44>
 800aab6:	2300      	movs	r3, #0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10b      	bne.n	800aad4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aace:	bf00      	nop
 800aad0:	bf00      	nop
 800aad2:	e7fd      	b.n	800aad0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d103      	bne.n	800aae2 <xQueueGenericSendFromISR+0x6e>
 800aada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <xQueueGenericSendFromISR+0x72>
 800aae2:	2301      	movs	r3, #1
 800aae4:	e000      	b.n	800aae8 <xQueueGenericSendFromISR+0x74>
 800aae6:	2300      	movs	r3, #0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10b      	bne.n	800ab04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	623b      	str	r3, [r7, #32]
}
 800aafe:	bf00      	nop
 800ab00:	bf00      	nop
 800ab02:	e7fd      	b.n	800ab00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab04:	f002 fb0c 	bl	800d120 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab08:	f3ef 8211 	mrs	r2, BASEPRI
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	61fa      	str	r2, [r7, #28]
 800ab1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d302      	bcc.n	800ab36 <xQueueGenericSendFromISR+0xc2>
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d12f      	bne.n	800ab96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab4c:	f000 fa3a 	bl	800afc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d112      	bne.n	800ab80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d016      	beq.n	800ab90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	3324      	adds	r3, #36	@ 0x24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 f88c 	bl	800bc84 <xTaskRemoveFromEventList>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e007      	b.n	800ab90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab84:	3301      	adds	r3, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	b25a      	sxtb	r2, r3
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab90:	2301      	movs	r3, #1
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ab94:	e001      	b.n	800ab9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aba4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3740      	adds	r7, #64	@ 0x40
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08c      	sub	sp, #48	@ 0x30
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abbc:	2300      	movs	r3, #0
 800abbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10b      	bne.n	800abe2 <xQueueReceive+0x32>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	623b      	str	r3, [r7, #32]
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	e7fd      	b.n	800abde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d103      	bne.n	800abf0 <xQueueReceive+0x40>
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <xQueueReceive+0x44>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <xQueueReceive+0x46>
 800abf4:	2300      	movs	r3, #0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10b      	bne.n	800ac12 <xQueueReceive+0x62>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	61fb      	str	r3, [r7, #28]
}
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac12:	f001 fa55 	bl	800c0c0 <xTaskGetSchedulerState>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <xQueueReceive+0x72>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <xQueueReceive+0x76>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <xQueueReceive+0x78>
 800ac26:	2300      	movs	r3, #0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10b      	bne.n	800ac44 <xQueueReceive+0x94>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	61bb      	str	r3, [r7, #24]
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	e7fd      	b.n	800ac40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac44:	f002 f8a8 	bl	800cd98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01f      	beq.n	800ac94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac54:	68b9      	ldr	r1, [r7, #8]
 800ac56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac58:	f000 fa1e 	bl	800b098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	1e5a      	subs	r2, r3, #1
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00f      	beq.n	800ac8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6e:	3310      	adds	r3, #16
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 f807 	bl	800bc84 <xTaskRemoveFromEventList>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d007      	beq.n	800ac8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ad70 <xQueueReceive+0x1c0>)
 800ac7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac8c:	f002 f8b6 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e069      	b.n	800ad68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac9a:	f002 f8af 	bl	800cdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e062      	b.n	800ad68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d106      	bne.n	800acb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aca8:	f107 0310 	add.w	r3, r7, #16
 800acac:	4618      	mov	r0, r3
 800acae:	f001 f84f 	bl	800bd50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acb2:	2301      	movs	r3, #1
 800acb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acb6:	f002 f8a1 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acba:	f000 fd55 	bl	800b768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acbe:	f002 f86b 	bl	800cd98 <vPortEnterCritical>
 800acc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acc8:	b25b      	sxtb	r3, r3
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d103      	bne.n	800acd8 <xQueueReceive+0x128>
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acde:	b25b      	sxtb	r3, r3
 800ace0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace4:	d103      	bne.n	800acee <xQueueReceive+0x13e>
 800ace6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acee:	f002 f885 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acf2:	1d3a      	adds	r2, r7, #4
 800acf4:	f107 0310 	add.w	r3, r7, #16
 800acf8:	4611      	mov	r1, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f001 f83e 	bl	800bd7c <xTaskCheckForTimeOut>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d123      	bne.n	800ad4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad08:	f000 fa3e 	bl	800b188 <prvIsQueueEmpty>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d017      	beq.n	800ad42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad14:	3324      	adds	r3, #36	@ 0x24
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	4611      	mov	r1, r2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 ff60 	bl	800bbe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad22:	f000 f9df 	bl	800b0e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad26:	f000 fd65 	bl	800b7f4 <xTaskResumeAll>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d189      	bne.n	800ac44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ad30:	4b0f      	ldr	r3, [pc, #60]	@ (800ad70 <xQueueReceive+0x1c0>)
 800ad32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	e780      	b.n	800ac44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad44:	f000 f9ce 	bl	800b0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad48:	f000 fd54 	bl	800b7f4 <xTaskResumeAll>
 800ad4c:	e77a      	b.n	800ac44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad50:	f000 f9c8 	bl	800b0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad54:	f000 fd4e 	bl	800b7f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad5a:	f000 fa15 	bl	800b188 <prvIsQueueEmpty>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f43f af6f 	beq.w	800ac44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3730      	adds	r7, #48	@ 0x30
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08e      	sub	sp, #56	@ 0x38
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10b      	bne.n	800ada8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	623b      	str	r3, [r7, #32]
}
 800ada2:	bf00      	nop
 800ada4:	bf00      	nop
 800ada6:	e7fd      	b.n	800ada4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ada8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	61fb      	str	r3, [r7, #28]
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	e7fd      	b.n	800adc4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adc8:	f001 f97a 	bl	800c0c0 <xTaskGetSchedulerState>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d102      	bne.n	800add8 <xQueueSemaphoreTake+0x64>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <xQueueSemaphoreTake+0x68>
 800add8:	2301      	movs	r3, #1
 800adda:	e000      	b.n	800adde <xQueueSemaphoreTake+0x6a>
 800addc:	2300      	movs	r3, #0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10b      	bne.n	800adfa <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	61bb      	str	r3, [r7, #24]
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	e7fd      	b.n	800adf6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adfa:	f001 ffcd 	bl	800cd98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d024      	beq.n	800ae54 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d104      	bne.n	800ae24 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae1a:	f001 facb 	bl	800c3b4 <pvTaskIncrementMutexHeldCount>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00f      	beq.n	800ae4c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2e:	3310      	adds	r3, #16
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 ff27 	bl	800bc84 <xTaskRemoveFromEventList>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae3c:	4b54      	ldr	r3, [pc, #336]	@ (800af90 <xQueueSemaphoreTake+0x21c>)
 800ae3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae4c:	f001 ffd6 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e098      	b.n	800af86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d112      	bne.n	800ae80 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00b      	beq.n	800ae78 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	617b      	str	r3, [r7, #20]
}
 800ae72:	bf00      	nop
 800ae74:	bf00      	nop
 800ae76:	e7fd      	b.n	800ae74 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae78:	f001 ffc0 	bl	800cdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e082      	b.n	800af86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae86:	f107 030c 	add.w	r3, r7, #12
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 ff60 	bl	800bd50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae94:	f001 ffb2 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae98:	f000 fc66 	bl	800b768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae9c:	f001 ff7c 	bl	800cd98 <vPortEnterCritical>
 800aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d103      	bne.n	800aeb6 <xQueueSemaphoreTake+0x142>
 800aeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aebc:	b25b      	sxtb	r3, r3
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d103      	bne.n	800aecc <xQueueSemaphoreTake+0x158>
 800aec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aecc:	f001 ff96 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aed0:	463a      	mov	r2, r7
 800aed2:	f107 030c 	add.w	r3, r7, #12
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 ff4f 	bl	800bd7c <xTaskCheckForTimeOut>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d132      	bne.n	800af4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aee4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aee6:	f000 f94f 	bl	800b188 <prvIsQueueEmpty>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d026      	beq.n	800af3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aef8:	f001 ff4e 	bl	800cd98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	4618      	mov	r0, r3
 800af02:	f001 f8fb 	bl	800c0fc <xTaskPriorityInherit>
 800af06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800af08:	f001 ff78 	bl	800cdfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	3324      	adds	r3, #36	@ 0x24
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	4611      	mov	r1, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fe63 	bl	800bbe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af1c:	f000 f8e2 	bl	800b0e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af20:	f000 fc68 	bl	800b7f4 <xTaskResumeAll>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	f47f af67 	bne.w	800adfa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800af2c:	4b18      	ldr	r3, [pc, #96]	@ (800af90 <xQueueSemaphoreTake+0x21c>)
 800af2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	e75d      	b.n	800adfa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af40:	f000 f8d0 	bl	800b0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af44:	f000 fc56 	bl	800b7f4 <xTaskResumeAll>
 800af48:	e757      	b.n	800adfa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af4c:	f000 f8ca 	bl	800b0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af50:	f000 fc50 	bl	800b7f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af56:	f000 f917 	bl	800b188 <prvIsQueueEmpty>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f43f af4c 	beq.w	800adfa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00d      	beq.n	800af84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800af68:	f001 ff16 	bl	800cd98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af6e:	f000 f811 	bl	800af94 <prvGetDisinheritPriorityAfterTimeout>
 800af72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af7a:	4618      	mov	r0, r3
 800af7c:	f001 f996 	bl	800c2ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af80:	f001 ff3c 	bl	800cdfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af86:	4618      	mov	r0, r3
 800af88:	3738      	adds	r7, #56	@ 0x38
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	e000ed04 	.word	0xe000ed04

0800af94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	e001      	b.n	800afb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afb6:	68fb      	ldr	r3, [r7, #12]
	}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afd0:	2300      	movs	r3, #0
 800afd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10d      	bne.n	800affe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d14d      	bne.n	800b086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 f8ec 	bl	800c1cc <xTaskPriorityDisinherit>
 800aff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	609a      	str	r2, [r3, #8]
 800affc:	e043      	b.n	800b086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d119      	bne.n	800b038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6858      	ldr	r0, [r3, #4]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00c:	461a      	mov	r2, r3
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	f002 fb3a 	bl	800d688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b01c:	441a      	add	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d32b      	bcc.n	800b086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	605a      	str	r2, [r3, #4]
 800b036:	e026      	b.n	800b086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	68d8      	ldr	r0, [r3, #12]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b040:	461a      	mov	r2, r3
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	f002 fb20 	bl	800d688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b050:	425b      	negs	r3, r3
 800b052:	441a      	add	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	68da      	ldr	r2, [r3, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d207      	bcs.n	800b074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06c:	425b      	negs	r3, r3
 800b06e:	441a      	add	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b02      	cmp	r3, #2
 800b078:	d105      	bne.n	800b086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	3b01      	subs	r3, #1
 800b084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b08e:	697b      	ldr	r3, [r7, #20]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d018      	beq.n	800b0dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68da      	ldr	r2, [r3, #12]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b2:	441a      	add	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d303      	bcc.n	800b0cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68d9      	ldr	r1, [r3, #12]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6838      	ldr	r0, [r7, #0]
 800b0d8:	f002 fad6 	bl	800d688 <memcpy>
	}
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0ec:	f001 fe54 	bl	800cd98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0f8:	e011      	b.n	800b11e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d012      	beq.n	800b128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3324      	adds	r3, #36	@ 0x24
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fdbc 	bl	800bc84 <xTaskRemoveFromEventList>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b112:	f000 fe97 	bl	800be44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	3b01      	subs	r3, #1
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	dce9      	bgt.n	800b0fa <prvUnlockQueue+0x16>
 800b126:	e000      	b.n	800b12a <prvUnlockQueue+0x46>
					break;
 800b128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	22ff      	movs	r2, #255	@ 0xff
 800b12e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b132:	f001 fe63 	bl	800cdfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b136:	f001 fe2f 	bl	800cd98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b142:	e011      	b.n	800b168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d012      	beq.n	800b172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3310      	adds	r3, #16
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fd97 	bl	800bc84 <xTaskRemoveFromEventList>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b15c:	f000 fe72 	bl	800be44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	3b01      	subs	r3, #1
 800b164:	b2db      	uxtb	r3, r3
 800b166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dce9      	bgt.n	800b144 <prvUnlockQueue+0x60>
 800b170:	e000      	b.n	800b174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	22ff      	movs	r2, #255	@ 0xff
 800b178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b17c:	f001 fe3e 	bl	800cdfc <vPortExitCritical>
}
 800b180:	bf00      	nop
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b190:	f001 fe02 	bl	800cd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e001      	b.n	800b1a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1a6:	f001 fe29 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1bc:	f001 fdec 	bl	800cd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d102      	bne.n	800b1d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	e001      	b.n	800b1d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1d6:	f001 fe11 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800b1da:	68fb      	ldr	r3, [r7, #12]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	e014      	b.n	800b21e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1f4:	4a0f      	ldr	r2, [pc, #60]	@ (800b234 <vQueueAddToRegistry+0x50>)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b200:	490c      	ldr	r1, [pc, #48]	@ (800b234 <vQueueAddToRegistry+0x50>)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b20a:	4a0a      	ldr	r2, [pc, #40]	@ (800b234 <vQueueAddToRegistry+0x50>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	4413      	add	r3, r2
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b216:	e006      	b.n	800b226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3301      	adds	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b07      	cmp	r3, #7
 800b222:	d9e7      	bls.n	800b1f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b224:	bf00      	nop
 800b226:	bf00      	nop
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	24000a10 	.word	0x24000a10

0800b238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b248:	f001 fda6 	bl	800cd98 <vPortEnterCritical>
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b252:	b25b      	sxtb	r3, r3
 800b254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b258:	d103      	bne.n	800b262 <vQueueWaitForMessageRestricted+0x2a>
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b268:	b25b      	sxtb	r3, r3
 800b26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26e:	d103      	bne.n	800b278 <vQueueWaitForMessageRestricted+0x40>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b278:	f001 fdc0 	bl	800cdfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	3324      	adds	r3, #36	@ 0x24
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fccd 	bl	800bc2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b292:	6978      	ldr	r0, [r7, #20]
 800b294:	f7ff ff26 	bl	800b0e4 <prvUnlockQueue>
	}
 800b298:	bf00      	nop
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08e      	sub	sp, #56	@ 0x38
 800b2a4:	af04      	add	r7, sp, #16
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10b      	bne.n	800b2cc <xTaskCreateStatic+0x2c>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	623b      	str	r3, [r7, #32]
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	e7fd      	b.n	800b2c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10b      	bne.n	800b2ea <xTaskCreateStatic+0x4a>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	61fb      	str	r3, [r7, #28]
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop
 800b2e8:	e7fd      	b.n	800b2e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2ea:	23a8      	movs	r3, #168	@ 0xa8
 800b2ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	2ba8      	cmp	r3, #168	@ 0xa8
 800b2f2:	d00b      	beq.n	800b30c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	61bb      	str	r3, [r7, #24]
}
 800b306:	bf00      	nop
 800b308:	bf00      	nop
 800b30a:	e7fd      	b.n	800b308 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b30c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b310:	2b00      	cmp	r3, #0
 800b312:	d01e      	beq.n	800b352 <xTaskCreateStatic+0xb2>
 800b314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b316:	2b00      	cmp	r3, #0
 800b318:	d01b      	beq.n	800b352 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b322:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b326:	2202      	movs	r2, #2
 800b328:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b32c:	2300      	movs	r3, #0
 800b32e:	9303      	str	r3, [sp, #12]
 800b330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b332:	9302      	str	r3, [sp, #8]
 800b334:	f107 0314 	add.w	r3, r7, #20
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	68b9      	ldr	r1, [r7, #8]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f851 	bl	800b3ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b34a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b34c:	f000 f8f6 	bl	800b53c <prvAddNewTaskToReadyList>
 800b350:	e001      	b.n	800b356 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b356:	697b      	ldr	r3, [r7, #20]
	}
 800b358:	4618      	mov	r0, r3
 800b35a:	3728      	adds	r7, #40	@ 0x28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08c      	sub	sp, #48	@ 0x30
 800b364:	af04      	add	r7, sp, #16
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	603b      	str	r3, [r7, #0]
 800b36c:	4613      	mov	r3, r2
 800b36e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b370:	88fb      	ldrh	r3, [r7, #6]
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4618      	mov	r0, r3
 800b376:	f001 ff15 	bl	800d1a4 <pvPortMalloc>
 800b37a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00e      	beq.n	800b3a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b382:	20a8      	movs	r0, #168	@ 0xa8
 800b384:	f001 ff0e 	bl	800d1a4 <pvPortMalloc>
 800b388:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	631a      	str	r2, [r3, #48]	@ 0x30
 800b396:	e005      	b.n	800b3a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b398:	6978      	ldr	r0, [r7, #20]
 800b39a:	f001 ffd1 	bl	800d340 <vPortFree>
 800b39e:	e001      	b.n	800b3a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d017      	beq.n	800b3da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3b2:	88fa      	ldrh	r2, [r7, #6]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9303      	str	r3, [sp, #12]
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	9302      	str	r3, [sp, #8]
 800b3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	68b9      	ldr	r1, [r7, #8]
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 f80f 	bl	800b3ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3ce:	69f8      	ldr	r0, [r7, #28]
 800b3d0:	f000 f8b4 	bl	800b53c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	61bb      	str	r3, [r7, #24]
 800b3d8:	e002      	b.n	800b3e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3da:	f04f 33ff 	mov.w	r3, #4294967295
 800b3de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3e0:	69bb      	ldr	r3, [r7, #24]
	}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3720      	adds	r7, #32
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	461a      	mov	r2, r3
 800b404:	21a5      	movs	r1, #165	@ 0xa5
 800b406:	f002 f8bb 	bl	800d580 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b414:	440b      	add	r3, r1
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	f023 0307 	bic.w	r3, r3, #7
 800b422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00b      	beq.n	800b446 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	617b      	str	r3, [r7, #20]
}
 800b440:	bf00      	nop
 800b442:	bf00      	nop
 800b444:	e7fd      	b.n	800b442 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01f      	beq.n	800b48c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b44c:	2300      	movs	r3, #0
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	e012      	b.n	800b478 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	4413      	add	r3, r2
 800b458:	7819      	ldrb	r1, [r3, #0]
 800b45a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	3334      	adds	r3, #52	@ 0x34
 800b462:	460a      	mov	r2, r1
 800b464:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	4413      	add	r3, r2
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d006      	beq.n	800b480 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	3301      	adds	r3, #1
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	2b0f      	cmp	r3, #15
 800b47c:	d9e9      	bls.n	800b452 <prvInitialiseNewTask+0x66>
 800b47e:	e000      	b.n	800b482 <prvInitialiseNewTask+0x96>
			{
				break;
 800b480:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b48a:	e003      	b.n	800b494 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b496:	2b37      	cmp	r3, #55	@ 0x37
 800b498:	d901      	bls.n	800b49e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b49a:	2337      	movs	r3, #55	@ 0x37
 800b49c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7ff f801 	bl	800a4bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	3318      	adds	r3, #24
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fffc 	bl	800a4bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	3354      	adds	r3, #84	@ 0x54
 800b4ee:	224c      	movs	r2, #76	@ 0x4c
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f002 f844 	bl	800d580 <memset>
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b530 <prvInitialiseNewTask+0x144>)
 800b4fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b500:	4a0c      	ldr	r2, [pc, #48]	@ (800b534 <prvInitialiseNewTask+0x148>)
 800b502:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	4a0c      	ldr	r2, [pc, #48]	@ (800b538 <prvInitialiseNewTask+0x14c>)
 800b508:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	68f9      	ldr	r1, [r7, #12]
 800b50e:	69b8      	ldr	r0, [r7, #24]
 800b510:	f001 fb12 	bl	800cb38 <pxPortInitialiseStack>
 800b514:	4602      	mov	r2, r0
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b526:	bf00      	nop
 800b528:	3720      	adds	r7, #32
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	24004cb0 	.word	0x24004cb0
 800b534:	24004d18 	.word	0x24004d18
 800b538:	24004d80 	.word	0x24004d80

0800b53c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b544:	f001 fc28 	bl	800cd98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b548:	4b2d      	ldr	r3, [pc, #180]	@ (800b600 <prvAddNewTaskToReadyList+0xc4>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3301      	adds	r3, #1
 800b54e:	4a2c      	ldr	r2, [pc, #176]	@ (800b600 <prvAddNewTaskToReadyList+0xc4>)
 800b550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b552:	4b2c      	ldr	r3, [pc, #176]	@ (800b604 <prvAddNewTaskToReadyList+0xc8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b55a:	4a2a      	ldr	r2, [pc, #168]	@ (800b604 <prvAddNewTaskToReadyList+0xc8>)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b560:	4b27      	ldr	r3, [pc, #156]	@ (800b600 <prvAddNewTaskToReadyList+0xc4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d110      	bne.n	800b58a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b568:	f000 fce6 	bl	800bf38 <prvInitialiseTaskLists>
 800b56c:	e00d      	b.n	800b58a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b56e:	4b26      	ldr	r3, [pc, #152]	@ (800b608 <prvAddNewTaskToReadyList+0xcc>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b576:	4b23      	ldr	r3, [pc, #140]	@ (800b604 <prvAddNewTaskToReadyList+0xc8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b580:	429a      	cmp	r2, r3
 800b582:	d802      	bhi.n	800b58a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b584:	4a1f      	ldr	r2, [pc, #124]	@ (800b604 <prvAddNewTaskToReadyList+0xc8>)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b58a:	4b20      	ldr	r3, [pc, #128]	@ (800b60c <prvAddNewTaskToReadyList+0xd0>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3301      	adds	r3, #1
 800b590:	4a1e      	ldr	r2, [pc, #120]	@ (800b60c <prvAddNewTaskToReadyList+0xd0>)
 800b592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b594:	4b1d      	ldr	r3, [pc, #116]	@ (800b60c <prvAddNewTaskToReadyList+0xd0>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a0:	4b1b      	ldr	r3, [pc, #108]	@ (800b610 <prvAddNewTaskToReadyList+0xd4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d903      	bls.n	800b5b0 <prvAddNewTaskToReadyList+0x74>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ac:	4a18      	ldr	r2, [pc, #96]	@ (800b610 <prvAddNewTaskToReadyList+0xd4>)
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4a15      	ldr	r2, [pc, #84]	@ (800b614 <prvAddNewTaskToReadyList+0xd8>)
 800b5be:	441a      	add	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7fe ff85 	bl	800a4d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5cc:	f001 fc16 	bl	800cdfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b608 <prvAddNewTaskToReadyList+0xcc>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00e      	beq.n	800b5f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b604 <prvAddNewTaskToReadyList+0xc8>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d207      	bcs.n	800b5f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b618 <prvAddNewTaskToReadyList+0xdc>)
 800b5e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	24000f24 	.word	0x24000f24
 800b604:	24000a50 	.word	0x24000a50
 800b608:	24000f30 	.word	0x24000f30
 800b60c:	24000f40 	.word	0x24000f40
 800b610:	24000f2c 	.word	0x24000f2c
 800b614:	24000a54 	.word	0x24000a54
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b624:	2300      	movs	r3, #0
 800b626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d018      	beq.n	800b660 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b62e:	4b14      	ldr	r3, [pc, #80]	@ (800b680 <vTaskDelay+0x64>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <vTaskDelay+0x32>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	60bb      	str	r3, [r7, #8]
}
 800b648:	bf00      	nop
 800b64a:	bf00      	nop
 800b64c:	e7fd      	b.n	800b64a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b64e:	f000 f88b 	bl	800b768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b652:	2100      	movs	r1, #0
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fec1 	bl	800c3dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b65a:	f000 f8cb 	bl	800b7f4 <xTaskResumeAll>
 800b65e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d107      	bne.n	800b676 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b666:	4b07      	ldr	r3, [pc, #28]	@ (800b684 <vTaskDelay+0x68>)
 800b668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b676:	bf00      	nop
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	24000f4c 	.word	0x24000f4c
 800b684:	e000ed04 	.word	0xe000ed04

0800b688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	@ 0x28
 800b68c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b68e:	2300      	movs	r3, #0
 800b690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b696:	463a      	mov	r2, r7
 800b698:	1d39      	adds	r1, r7, #4
 800b69a:	f107 0308 	add.w	r3, r7, #8
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe feb8 	bl	800a414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	9202      	str	r2, [sp, #8]
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	460a      	mov	r2, r1
 800b6b6:	4924      	ldr	r1, [pc, #144]	@ (800b748 <vTaskStartScheduler+0xc0>)
 800b6b8:	4824      	ldr	r0, [pc, #144]	@ (800b74c <vTaskStartScheduler+0xc4>)
 800b6ba:	f7ff fdf1 	bl	800b2a0 <xTaskCreateStatic>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4a23      	ldr	r2, [pc, #140]	@ (800b750 <vTaskStartScheduler+0xc8>)
 800b6c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6c4:	4b22      	ldr	r3, [pc, #136]	@ (800b750 <vTaskStartScheduler+0xc8>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	617b      	str	r3, [r7, #20]
 800b6d0:	e001      	b.n	800b6d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d102      	bne.n	800b6e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b6dc:	f000 fed2 	bl	800c484 <xTimerCreateTimerTask>
 800b6e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d11b      	bne.n	800b720 <vTaskStartScheduler+0x98>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	613b      	str	r3, [r7, #16]
}
 800b6fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6fc:	4b15      	ldr	r3, [pc, #84]	@ (800b754 <vTaskStartScheduler+0xcc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3354      	adds	r3, #84	@ 0x54
 800b702:	4a15      	ldr	r2, [pc, #84]	@ (800b758 <vTaskStartScheduler+0xd0>)
 800b704:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b706:	4b15      	ldr	r3, [pc, #84]	@ (800b75c <vTaskStartScheduler+0xd4>)
 800b708:	f04f 32ff 	mov.w	r2, #4294967295
 800b70c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b70e:	4b14      	ldr	r3, [pc, #80]	@ (800b760 <vTaskStartScheduler+0xd8>)
 800b710:	2201      	movs	r2, #1
 800b712:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b714:	4b13      	ldr	r3, [pc, #76]	@ (800b764 <vTaskStartScheduler+0xdc>)
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b71a:	f001 fa99 	bl	800cc50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b71e:	e00f      	b.n	800b740 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b726:	d10b      	bne.n	800b740 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	60fb      	str	r3, [r7, #12]
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	e7fd      	b.n	800b73c <vTaskStartScheduler+0xb4>
}
 800b740:	bf00      	nop
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	0800d7ac 	.word	0x0800d7ac
 800b74c:	0800be5d 	.word	0x0800be5d
 800b750:	24000f48 	.word	0x24000f48
 800b754:	24000a50 	.word	0x24000a50
 800b758:	24000014 	.word	0x24000014
 800b75c:	24000f44 	.word	0x24000f44
 800b760:	24000f30 	.word	0x24000f30
 800b764:	24000f28 	.word	0x24000f28

0800b768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b76c:	4b04      	ldr	r3, [pc, #16]	@ (800b780 <vTaskSuspendAll+0x18>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3301      	adds	r3, #1
 800b772:	4a03      	ldr	r2, [pc, #12]	@ (800b780 <vTaskSuspendAll+0x18>)
 800b774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b776:	bf00      	nop
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	24000f4c 	.word	0x24000f4c

0800b784 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b78a:	2300      	movs	r3, #0
 800b78c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800b78e:	4b14      	ldr	r3, [pc, #80]	@ (800b7e0 <prvGetExpectedIdleTime+0x5c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800b796:	2301      	movs	r3, #1
 800b798:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b79a:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <prvGetExpectedIdleTime+0x60>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	607b      	str	r3, [r7, #4]
 800b7a8:	e012      	b.n	800b7d0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b7aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e8 <prvGetExpectedIdleTime+0x64>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d902      	bls.n	800b7b8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	607b      	str	r3, [r7, #4]
 800b7b6:	e00b      	b.n	800b7d0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	607b      	str	r3, [r7, #4]
 800b7c2:	e005      	b.n	800b7d0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b7c4:	4b09      	ldr	r3, [pc, #36]	@ (800b7ec <prvGetExpectedIdleTime+0x68>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	4b09      	ldr	r3, [pc, #36]	@ (800b7f0 <prvGetExpectedIdleTime+0x6c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800b7d0:	687b      	ldr	r3, [r7, #4]
	}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	24000f2c 	.word	0x24000f2c
 800b7e4:	24000a50 	.word	0x24000a50
 800b7e8:	24000a54 	.word	0x24000a54
 800b7ec:	24000f44 	.word	0x24000f44
 800b7f0:	24000f28 	.word	0x24000f28

0800b7f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b802:	4b42      	ldr	r3, [pc, #264]	@ (800b90c <xTaskResumeAll+0x118>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10b      	bne.n	800b822 <xTaskResumeAll+0x2e>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	603b      	str	r3, [r7, #0]
}
 800b81c:	bf00      	nop
 800b81e:	bf00      	nop
 800b820:	e7fd      	b.n	800b81e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b822:	f001 fab9 	bl	800cd98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b826:	4b39      	ldr	r3, [pc, #228]	@ (800b90c <xTaskResumeAll+0x118>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	4a37      	ldr	r2, [pc, #220]	@ (800b90c <xTaskResumeAll+0x118>)
 800b82e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b830:	4b36      	ldr	r3, [pc, #216]	@ (800b90c <xTaskResumeAll+0x118>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d162      	bne.n	800b8fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b838:	4b35      	ldr	r3, [pc, #212]	@ (800b910 <xTaskResumeAll+0x11c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d05e      	beq.n	800b8fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b840:	e02f      	b.n	800b8a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b842:	4b34      	ldr	r3, [pc, #208]	@ (800b914 <xTaskResumeAll+0x120>)
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3318      	adds	r3, #24
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fe9e 	bl	800a590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3304      	adds	r3, #4
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe fe99 	bl	800a590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b862:	4b2d      	ldr	r3, [pc, #180]	@ (800b918 <xTaskResumeAll+0x124>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d903      	bls.n	800b872 <xTaskResumeAll+0x7e>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	4a2a      	ldr	r2, [pc, #168]	@ (800b918 <xTaskResumeAll+0x124>)
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b876:	4613      	mov	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4a27      	ldr	r2, [pc, #156]	@ (800b91c <xTaskResumeAll+0x128>)
 800b880:	441a      	add	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fe fe24 	bl	800a4d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b892:	4b23      	ldr	r3, [pc, #140]	@ (800b920 <xTaskResumeAll+0x12c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b898:	429a      	cmp	r2, r3
 800b89a:	d302      	bcc.n	800b8a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b89c:	4b21      	ldr	r3, [pc, #132]	@ (800b924 <xTaskResumeAll+0x130>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b914 <xTaskResumeAll+0x120>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1cb      	bne.n	800b842 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8b0:	f000 fbe6 	bl	800c080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b928 <xTaskResumeAll+0x134>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d010      	beq.n	800b8e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8c0:	f000 f86e 	bl	800b9a0 <xTaskIncrementTick>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b8ca:	4b16      	ldr	r3, [pc, #88]	@ (800b924 <xTaskResumeAll+0x130>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1f1      	bne.n	800b8c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b8dc:	4b12      	ldr	r3, [pc, #72]	@ (800b928 <xTaskResumeAll+0x134>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8e2:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <xTaskResumeAll+0x130>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d009      	beq.n	800b8fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b92c <xTaskResumeAll+0x138>)
 800b8f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8fe:	f001 fa7d 	bl	800cdfc <vPortExitCritical>

	return xAlreadyYielded;
 800b902:	68bb      	ldr	r3, [r7, #8]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	24000f4c 	.word	0x24000f4c
 800b910:	24000f24 	.word	0x24000f24
 800b914:	24000ee4 	.word	0x24000ee4
 800b918:	24000f2c 	.word	0x24000f2c
 800b91c:	24000a54 	.word	0x24000a54
 800b920:	24000a50 	.word	0x24000a50
 800b924:	24000f38 	.word	0x24000f38
 800b928:	24000f34 	.word	0x24000f34
 800b92c:	e000ed04 	.word	0xe000ed04

0800b930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b936:	4b05      	ldr	r3, [pc, #20]	@ (800b94c <xTaskGetTickCount+0x1c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b93c:	687b      	ldr	r3, [r7, #4]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	24000f28 	.word	0x24000f28

0800b950 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800b958:	4b0f      	ldr	r3, [pc, #60]	@ (800b998 <vTaskStepTick+0x48>)
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	441a      	add	r2, r3
 800b960:	4b0e      	ldr	r3, [pc, #56]	@ (800b99c <vTaskStepTick+0x4c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d90b      	bls.n	800b980 <vTaskStepTick+0x30>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	60fb      	str	r3, [r7, #12]
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	e7fd      	b.n	800b97c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800b980:	4b05      	ldr	r3, [pc, #20]	@ (800b998 <vTaskStepTick+0x48>)
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4413      	add	r3, r2
 800b988:	4a03      	ldr	r2, [pc, #12]	@ (800b998 <vTaskStepTick+0x48>)
 800b98a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	24000f28 	.word	0x24000f28
 800b99c:	24000f44 	.word	0x24000f44

0800b9a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9aa:	4b4f      	ldr	r3, [pc, #316]	@ (800bae8 <xTaskIncrementTick+0x148>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f040 8090 	bne.w	800bad4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9b4:	4b4d      	ldr	r3, [pc, #308]	@ (800baec <xTaskIncrementTick+0x14c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9bc:	4a4b      	ldr	r2, [pc, #300]	@ (800baec <xTaskIncrementTick+0x14c>)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d121      	bne.n	800ba0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9c8:	4b49      	ldr	r3, [pc, #292]	@ (800baf0 <xTaskIncrementTick+0x150>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00b      	beq.n	800b9ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	603b      	str	r3, [r7, #0]
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
 800b9e8:	e7fd      	b.n	800b9e6 <xTaskIncrementTick+0x46>
 800b9ea:	4b41      	ldr	r3, [pc, #260]	@ (800baf0 <xTaskIncrementTick+0x150>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	4b40      	ldr	r3, [pc, #256]	@ (800baf4 <xTaskIncrementTick+0x154>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a3e      	ldr	r2, [pc, #248]	@ (800baf0 <xTaskIncrementTick+0x150>)
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	4a3e      	ldr	r2, [pc, #248]	@ (800baf4 <xTaskIncrementTick+0x154>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	4b3e      	ldr	r3, [pc, #248]	@ (800baf8 <xTaskIncrementTick+0x158>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	4a3c      	ldr	r2, [pc, #240]	@ (800baf8 <xTaskIncrementTick+0x158>)
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	f000 fb3a 	bl	800c080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba0c:	4b3b      	ldr	r3, [pc, #236]	@ (800bafc <xTaskIncrementTick+0x15c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d349      	bcc.n	800baaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba16:	4b36      	ldr	r3, [pc, #216]	@ (800baf0 <xTaskIncrementTick+0x150>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d104      	bne.n	800ba2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba20:	4b36      	ldr	r3, [pc, #216]	@ (800bafc <xTaskIncrementTick+0x15c>)
 800ba22:	f04f 32ff 	mov.w	r2, #4294967295
 800ba26:	601a      	str	r2, [r3, #0]
					break;
 800ba28:	e03f      	b.n	800baaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2a:	4b31      	ldr	r3, [pc, #196]	@ (800baf0 <xTaskIncrementTick+0x150>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d203      	bcs.n	800ba4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba42:	4a2e      	ldr	r2, [pc, #184]	@ (800bafc <xTaskIncrementTick+0x15c>)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba48:	e02f      	b.n	800baaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fd9e 	bl	800a590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3318      	adds	r3, #24
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fd95 	bl	800a590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba6a:	4b25      	ldr	r3, [pc, #148]	@ (800bb00 <xTaskIncrementTick+0x160>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d903      	bls.n	800ba7a <xTaskIncrementTick+0xda>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba76:	4a22      	ldr	r2, [pc, #136]	@ (800bb00 <xTaskIncrementTick+0x160>)
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4a1f      	ldr	r2, [pc, #124]	@ (800bb04 <xTaskIncrementTick+0x164>)
 800ba88:	441a      	add	r2, r3
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	f7fe fd20 	bl	800a4d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	@ (800bb08 <xTaskIncrementTick+0x168>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d3b8      	bcc.n	800ba16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800baa4:	2301      	movs	r3, #1
 800baa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baa8:	e7b5      	b.n	800ba16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800baaa:	4b17      	ldr	r3, [pc, #92]	@ (800bb08 <xTaskIncrementTick+0x168>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab0:	4914      	ldr	r1, [pc, #80]	@ (800bb04 <xTaskIncrementTick+0x164>)
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	440b      	add	r3, r1
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d901      	bls.n	800bac6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bac6:	4b11      	ldr	r3, [pc, #68]	@ (800bb0c <xTaskIncrementTick+0x16c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bace:	2301      	movs	r3, #1
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	e004      	b.n	800bade <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bad4:	4b0e      	ldr	r3, [pc, #56]	@ (800bb10 <xTaskIncrementTick+0x170>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	4a0d      	ldr	r2, [pc, #52]	@ (800bb10 <xTaskIncrementTick+0x170>)
 800badc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bade:	697b      	ldr	r3, [r7, #20]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	24000f4c 	.word	0x24000f4c
 800baec:	24000f28 	.word	0x24000f28
 800baf0:	24000edc 	.word	0x24000edc
 800baf4:	24000ee0 	.word	0x24000ee0
 800baf8:	24000f3c 	.word	0x24000f3c
 800bafc:	24000f44 	.word	0x24000f44
 800bb00:	24000f2c 	.word	0x24000f2c
 800bb04:	24000a54 	.word	0x24000a54
 800bb08:	24000a50 	.word	0x24000a50
 800bb0c:	24000f38 	.word	0x24000f38
 800bb10:	24000f34 	.word	0x24000f34

0800bb14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb1a:	4b2b      	ldr	r3, [pc, #172]	@ (800bbc8 <vTaskSwitchContext+0xb4>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb22:	4b2a      	ldr	r3, [pc, #168]	@ (800bbcc <vTaskSwitchContext+0xb8>)
 800bb24:	2201      	movs	r2, #1
 800bb26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb28:	e047      	b.n	800bbba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bb2a:	4b28      	ldr	r3, [pc, #160]	@ (800bbcc <vTaskSwitchContext+0xb8>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb30:	4b27      	ldr	r3, [pc, #156]	@ (800bbd0 <vTaskSwitchContext+0xbc>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	e011      	b.n	800bb5c <vTaskSwitchContext+0x48>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10b      	bne.n	800bb56 <vTaskSwitchContext+0x42>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	607b      	str	r3, [r7, #4]
}
 800bb50:	bf00      	nop
 800bb52:	bf00      	nop
 800bb54:	e7fd      	b.n	800bb52 <vTaskSwitchContext+0x3e>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	491d      	ldr	r1, [pc, #116]	@ (800bbd4 <vTaskSwitchContext+0xc0>)
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4613      	mov	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	440b      	add	r3, r1
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0e3      	beq.n	800bb38 <vTaskSwitchContext+0x24>
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4613      	mov	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4a16      	ldr	r2, [pc, #88]	@ (800bbd4 <vTaskSwitchContext+0xc0>)
 800bb7c:	4413      	add	r3, r2
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	605a      	str	r2, [r3, #4]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	3308      	adds	r3, #8
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d104      	bne.n	800bba0 <vTaskSwitchContext+0x8c>
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	605a      	str	r2, [r3, #4]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	4a0c      	ldr	r2, [pc, #48]	@ (800bbd8 <vTaskSwitchContext+0xc4>)
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	4a09      	ldr	r2, [pc, #36]	@ (800bbd0 <vTaskSwitchContext+0xbc>)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbb0:	4b09      	ldr	r3, [pc, #36]	@ (800bbd8 <vTaskSwitchContext+0xc4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3354      	adds	r3, #84	@ 0x54
 800bbb6:	4a09      	ldr	r2, [pc, #36]	@ (800bbdc <vTaskSwitchContext+0xc8>)
 800bbb8:	6013      	str	r3, [r2, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	24000f4c 	.word	0x24000f4c
 800bbcc:	24000f38 	.word	0x24000f38
 800bbd0:	24000f2c 	.word	0x24000f2c
 800bbd4:	24000a54 	.word	0x24000a54
 800bbd8:	24000a50 	.word	0x24000a50
 800bbdc:	24000014 	.word	0x24000014

0800bbe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10b      	bne.n	800bc08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	60fb      	str	r3, [r7, #12]
}
 800bc02:	bf00      	nop
 800bc04:	bf00      	nop
 800bc06:	e7fd      	b.n	800bc04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc08:	4b07      	ldr	r3, [pc, #28]	@ (800bc28 <vTaskPlaceOnEventList+0x48>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3318      	adds	r3, #24
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7fe fc84 	bl	800a51e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc16:	2101      	movs	r1, #1
 800bc18:	6838      	ldr	r0, [r7, #0]
 800bc1a:	f000 fbdf 	bl	800c3dc <prvAddCurrentTaskToDelayedList>
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	24000a50 	.word	0x24000a50

0800bc2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10b      	bne.n	800bc56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	617b      	str	r3, [r7, #20]
}
 800bc50:	bf00      	nop
 800bc52:	bf00      	nop
 800bc54:	e7fd      	b.n	800bc52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc56:	4b0a      	ldr	r3, [pc, #40]	@ (800bc80 <vTaskPlaceOnEventListRestricted+0x54>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3318      	adds	r3, #24
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7fe fc39 	bl	800a4d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	68b8      	ldr	r0, [r7, #8]
 800bc74:	f000 fbb2 	bl	800c3dc <prvAddCurrentTaskToDelayedList>
	}
 800bc78:	bf00      	nop
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	24000a50 	.word	0x24000a50

0800bc84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10b      	bne.n	800bcb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	60fb      	str	r3, [r7, #12]
}
 800bcac:	bf00      	nop
 800bcae:	bf00      	nop
 800bcb0:	e7fd      	b.n	800bcae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	3318      	adds	r3, #24
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe fc6a 	bl	800a590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcbc:	4b1e      	ldr	r3, [pc, #120]	@ (800bd38 <xTaskRemoveFromEventList+0xb4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d11f      	bne.n	800bd04 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fc61 	bl	800a590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd3c <xTaskRemoveFromEventList+0xb8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d903      	bls.n	800bce2 <xTaskRemoveFromEventList+0x5e>
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcde:	4a17      	ldr	r2, [pc, #92]	@ (800bd3c <xTaskRemoveFromEventList+0xb8>)
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4a14      	ldr	r2, [pc, #80]	@ (800bd40 <xTaskRemoveFromEventList+0xbc>)
 800bcf0:	441a      	add	r2, r3
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7fe fbec 	bl	800a4d6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800bcfe:	f000 f9bf 	bl	800c080 <prvResetNextTaskUnblockTime>
 800bd02:	e005      	b.n	800bd10 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	3318      	adds	r3, #24
 800bd08:	4619      	mov	r1, r3
 800bd0a:	480e      	ldr	r0, [pc, #56]	@ (800bd44 <xTaskRemoveFromEventList+0xc0>)
 800bd0c:	f7fe fbe3 	bl	800a4d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd14:	4b0c      	ldr	r3, [pc, #48]	@ (800bd48 <xTaskRemoveFromEventList+0xc4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d905      	bls.n	800bd2a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd22:	4b0a      	ldr	r3, [pc, #40]	@ (800bd4c <xTaskRemoveFromEventList+0xc8>)
 800bd24:	2201      	movs	r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	e001      	b.n	800bd2e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd2e:	697b      	ldr	r3, [r7, #20]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	24000f4c 	.word	0x24000f4c
 800bd3c:	24000f2c 	.word	0x24000f2c
 800bd40:	24000a54 	.word	0x24000a54
 800bd44:	24000ee4 	.word	0x24000ee4
 800bd48:	24000a50 	.word	0x24000a50
 800bd4c:	24000f38 	.word	0x24000f38

0800bd50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd58:	4b06      	ldr	r3, [pc, #24]	@ (800bd74 <vTaskInternalSetTimeOutState+0x24>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd60:	4b05      	ldr	r3, [pc, #20]	@ (800bd78 <vTaskInternalSetTimeOutState+0x28>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	605a      	str	r2, [r3, #4]
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	24000f3c 	.word	0x24000f3c
 800bd78:	24000f28 	.word	0x24000f28

0800bd7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10b      	bne.n	800bda4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	613b      	str	r3, [r7, #16]
}
 800bd9e:	bf00      	nop
 800bda0:	bf00      	nop
 800bda2:	e7fd      	b.n	800bda0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10b      	bne.n	800bdc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	60fb      	str	r3, [r7, #12]
}
 800bdbc:	bf00      	nop
 800bdbe:	bf00      	nop
 800bdc0:	e7fd      	b.n	800bdbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bdc2:	f000 ffe9 	bl	800cd98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdc6:	4b1d      	ldr	r3, [pc, #116]	@ (800be3c <xTaskCheckForTimeOut+0xc0>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	69ba      	ldr	r2, [r7, #24]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdde:	d102      	bne.n	800bde6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bde0:	2300      	movs	r3, #0
 800bde2:	61fb      	str	r3, [r7, #28]
 800bde4:	e023      	b.n	800be2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	4b15      	ldr	r3, [pc, #84]	@ (800be40 <xTaskCheckForTimeOut+0xc4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d007      	beq.n	800be02 <xTaskCheckForTimeOut+0x86>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	69ba      	ldr	r2, [r7, #24]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d302      	bcc.n	800be02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e015      	b.n	800be2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d20b      	bcs.n	800be24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ff99 	bl	800bd50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be1e:	2300      	movs	r3, #0
 800be20:	61fb      	str	r3, [r7, #28]
 800be22:	e004      	b.n	800be2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be2a:	2301      	movs	r3, #1
 800be2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be2e:	f000 ffe5 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800be32:	69fb      	ldr	r3, [r7, #28]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	24000f28 	.word	0x24000f28
 800be40:	24000f3c 	.word	0x24000f3c

0800be44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be48:	4b03      	ldr	r3, [pc, #12]	@ (800be58 <vTaskMissedYield+0x14>)
 800be4a:	2201      	movs	r2, #1
 800be4c:	601a      	str	r2, [r3, #0]
}
 800be4e:	bf00      	nop
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	24000f38 	.word	0x24000f38

0800be5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be64:	f000 f8a8 	bl	800bfb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be68:	4b18      	ldr	r3, [pc, #96]	@ (800becc <prvIdleTask+0x70>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d907      	bls.n	800be80 <prvIdleTask+0x24>
			{
				taskYIELD();
 800be70:	4b17      	ldr	r3, [pc, #92]	@ (800bed0 <prvIdleTask+0x74>)
 800be72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800be80:	f7ff fc80 	bl	800b784 <prvGetExpectedIdleTime>
 800be84:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d9eb      	bls.n	800be64 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800be8c:	f7ff fc6c 	bl	800b768 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800be90:	4b10      	ldr	r3, [pc, #64]	@ (800bed4 <prvIdleTask+0x78>)
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	4b10      	ldr	r3, [pc, #64]	@ (800bed8 <prvIdleTask+0x7c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d20b      	bcs.n	800beb4 <prvIdleTask+0x58>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	60bb      	str	r3, [r7, #8]
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800beb4:	f7ff fc66 	bl	800b784 <prvGetExpectedIdleTime>
 800beb8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d902      	bls.n	800bec6 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f001 f81b 	bl	800cefc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800bec6:	f7ff fc95 	bl	800b7f4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800beca:	e7cb      	b.n	800be64 <prvIdleTask+0x8>
 800becc:	24000a54 	.word	0x24000a54
 800bed0:	e000ed04 	.word	0xe000ed04
 800bed4:	24000f44 	.word	0x24000f44
 800bed8:	24000f28 	.word	0x24000f28

0800bedc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800bee2:	2301      	movs	r3, #1
 800bee4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800bee6:	2301      	movs	r3, #1
 800bee8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800beea:	4b0f      	ldr	r3, [pc, #60]	@ (800bf28 <eTaskConfirmSleepModeStatus+0x4c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d002      	beq.n	800bef8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800bef2:	2300      	movs	r3, #0
 800bef4:	71fb      	strb	r3, [r7, #7]
 800bef6:	e010      	b.n	800bf1a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800bef8:	4b0c      	ldr	r3, [pc, #48]	@ (800bf2c <eTaskConfirmSleepModeStatus+0x50>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d002      	beq.n	800bf06 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800bf00:	2300      	movs	r3, #0
 800bf02:	71fb      	strb	r3, [r7, #7]
 800bf04:	e009      	b.n	800bf1a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800bf06:	4b0a      	ldr	r3, [pc, #40]	@ (800bf30 <eTaskConfirmSleepModeStatus+0x54>)
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf34 <eTaskConfirmSleepModeStatus+0x58>)
 800bf0c:	6819      	ldr	r1, [r3, #0]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	1acb      	subs	r3, r1, r3
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d101      	bne.n	800bf1a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800bf16:	2302      	movs	r3, #2
 800bf18:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800bf1a:	79fb      	ldrb	r3, [r7, #7]
	}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	24000ee4 	.word	0x24000ee4
 800bf2c:	24000f38 	.word	0x24000f38
 800bf30:	24000f10 	.word	0x24000f10
 800bf34:	24000f24 	.word	0x24000f24

0800bf38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf3e:	2300      	movs	r3, #0
 800bf40:	607b      	str	r3, [r7, #4]
 800bf42:	e00c      	b.n	800bf5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4a12      	ldr	r2, [pc, #72]	@ (800bf98 <prvInitialiseTaskLists+0x60>)
 800bf50:	4413      	add	r3, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe fa92 	bl	800a47c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	607b      	str	r3, [r7, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b37      	cmp	r3, #55	@ 0x37
 800bf62:	d9ef      	bls.n	800bf44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf64:	480d      	ldr	r0, [pc, #52]	@ (800bf9c <prvInitialiseTaskLists+0x64>)
 800bf66:	f7fe fa89 	bl	800a47c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf6a:	480d      	ldr	r0, [pc, #52]	@ (800bfa0 <prvInitialiseTaskLists+0x68>)
 800bf6c:	f7fe fa86 	bl	800a47c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf70:	480c      	ldr	r0, [pc, #48]	@ (800bfa4 <prvInitialiseTaskLists+0x6c>)
 800bf72:	f7fe fa83 	bl	800a47c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf76:	480c      	ldr	r0, [pc, #48]	@ (800bfa8 <prvInitialiseTaskLists+0x70>)
 800bf78:	f7fe fa80 	bl	800a47c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf7c:	480b      	ldr	r0, [pc, #44]	@ (800bfac <prvInitialiseTaskLists+0x74>)
 800bf7e:	f7fe fa7d 	bl	800a47c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf82:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb0 <prvInitialiseTaskLists+0x78>)
 800bf84:	4a05      	ldr	r2, [pc, #20]	@ (800bf9c <prvInitialiseTaskLists+0x64>)
 800bf86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <prvInitialiseTaskLists+0x7c>)
 800bf8a:	4a05      	ldr	r2, [pc, #20]	@ (800bfa0 <prvInitialiseTaskLists+0x68>)
 800bf8c:	601a      	str	r2, [r3, #0]
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	24000a54 	.word	0x24000a54
 800bf9c:	24000eb4 	.word	0x24000eb4
 800bfa0:	24000ec8 	.word	0x24000ec8
 800bfa4:	24000ee4 	.word	0x24000ee4
 800bfa8:	24000ef8 	.word	0x24000ef8
 800bfac:	24000f10 	.word	0x24000f10
 800bfb0:	24000edc 	.word	0x24000edc
 800bfb4:	24000ee0 	.word	0x24000ee0

0800bfb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfbe:	e019      	b.n	800bff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfc0:	f000 feea 	bl	800cd98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc4:	4b10      	ldr	r3, [pc, #64]	@ (800c008 <prvCheckTasksWaitingTermination+0x50>)
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe fadd 	bl	800a590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfd6:	4b0d      	ldr	r3, [pc, #52]	@ (800c00c <prvCheckTasksWaitingTermination+0x54>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	4a0b      	ldr	r2, [pc, #44]	@ (800c00c <prvCheckTasksWaitingTermination+0x54>)
 800bfde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <prvCheckTasksWaitingTermination+0x58>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	4a0a      	ldr	r2, [pc, #40]	@ (800c010 <prvCheckTasksWaitingTermination+0x58>)
 800bfe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfea:	f000 ff07 	bl	800cdfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f810 	bl	800c014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bff4:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <prvCheckTasksWaitingTermination+0x58>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e1      	bne.n	800bfc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	24000ef8 	.word	0x24000ef8
 800c00c:	24000f24 	.word	0x24000f24
 800c010:	24000f0c 	.word	0x24000f0c

0800c014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3354      	adds	r3, #84	@ 0x54
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fab5 	bl	800d590 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d108      	bne.n	800c042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c034:	4618      	mov	r0, r3
 800c036:	f001 f983 	bl	800d340 <vPortFree>
				vPortFree( pxTCB );
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f001 f980 	bl	800d340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c040:	e019      	b.n	800c076 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d103      	bne.n	800c054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f001 f977 	bl	800d340 <vPortFree>
	}
 800c052:	e010      	b.n	800c076 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d00b      	beq.n	800c076 <prvDeleteTCB+0x62>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	60fb      	str	r3, [r7, #12]
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	e7fd      	b.n	800c072 <prvDeleteTCB+0x5e>
	}
 800c076:	bf00      	nop
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c086:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <prvResetNextTaskUnblockTime+0x38>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d104      	bne.n	800c09a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <prvResetNextTaskUnblockTime+0x3c>)
 800c092:	f04f 32ff 	mov.w	r2, #4294967295
 800c096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c098:	e008      	b.n	800c0ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09a:	4b07      	ldr	r3, [pc, #28]	@ (800c0b8 <prvResetNextTaskUnblockTime+0x38>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	4a04      	ldr	r2, [pc, #16]	@ (800c0bc <prvResetNextTaskUnblockTime+0x3c>)
 800c0aa:	6013      	str	r3, [r2, #0]
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	24000edc 	.word	0x24000edc
 800c0bc:	24000f44 	.word	0x24000f44

0800c0c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f4 <xTaskGetSchedulerState+0x34>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	e008      	b.n	800c0e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0d4:	4b08      	ldr	r3, [pc, #32]	@ (800c0f8 <xTaskGetSchedulerState+0x38>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	607b      	str	r3, [r7, #4]
 800c0e0:	e001      	b.n	800c0e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0e6:	687b      	ldr	r3, [r7, #4]
	}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	24000f30 	.word	0x24000f30
 800c0f8:	24000f4c 	.word	0x24000f4c

0800c0fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d051      	beq.n	800c1b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c116:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d241      	bcs.n	800c1a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	db06      	blt.n	800c136 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c128:	4b25      	ldr	r3, [pc, #148]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	6959      	ldr	r1, [r3, #20]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4a1f      	ldr	r2, [pc, #124]	@ (800c1c4 <xTaskPriorityInherit+0xc8>)
 800c148:	4413      	add	r3, r2
 800c14a:	4299      	cmp	r1, r3
 800c14c:	d122      	bne.n	800c194 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	3304      	adds	r3, #4
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fa1c 	bl	800a590 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c158:	4b19      	ldr	r3, [pc, #100]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c166:	4b18      	ldr	r3, [pc, #96]	@ (800c1c8 <xTaskPriorityInherit+0xcc>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d903      	bls.n	800c176 <xTaskPriorityInherit+0x7a>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c172:	4a15      	ldr	r2, [pc, #84]	@ (800c1c8 <xTaskPriorityInherit+0xcc>)
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4a10      	ldr	r2, [pc, #64]	@ (800c1c4 <xTaskPriorityInherit+0xc8>)
 800c184:	441a      	add	r2, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	3304      	adds	r3, #4
 800c18a:	4619      	mov	r1, r3
 800c18c:	4610      	mov	r0, r2
 800c18e:	f7fe f9a2 	bl	800a4d6 <vListInsertEnd>
 800c192:	e004      	b.n	800c19e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c194:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	e008      	b.n	800c1b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1a8:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <xTaskPriorityInherit+0xc4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d201      	bcs.n	800c1b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
	}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	24000a50 	.word	0x24000a50
 800c1c4:	24000a54 	.word	0x24000a54
 800c1c8:	24000f2c 	.word	0x24000f2c

0800c1cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d058      	beq.n	800c294 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1e2:	4b2f      	ldr	r3, [pc, #188]	@ (800c2a0 <xTaskPriorityDisinherit+0xd4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d00b      	beq.n	800c204 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	60fb      	str	r3, [r7, #12]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10b      	bne.n	800c224 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	60bb      	str	r3, [r7, #8]
}
 800c21e:	bf00      	nop
 800c220:	bf00      	nop
 800c222:	e7fd      	b.n	800c220 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c228:	1e5a      	subs	r2, r3, #1
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c236:	429a      	cmp	r2, r3
 800c238:	d02c      	beq.n	800c294 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d128      	bne.n	800c294 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe f9a2 	bl	800a590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c264:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a4 <xTaskPriorityDisinherit+0xd8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d903      	bls.n	800c274 <xTaskPriorityDisinherit+0xa8>
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c270:	4a0c      	ldr	r2, [pc, #48]	@ (800c2a4 <xTaskPriorityDisinherit+0xd8>)
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4a09      	ldr	r2, [pc, #36]	@ (800c2a8 <xTaskPriorityDisinherit+0xdc>)
 800c282:	441a      	add	r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3304      	adds	r3, #4
 800c288:	4619      	mov	r1, r3
 800c28a:	4610      	mov	r0, r2
 800c28c:	f7fe f923 	bl	800a4d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c290:	2301      	movs	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c294:	697b      	ldr	r3, [r7, #20]
	}
 800c296:	4618      	mov	r0, r3
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	24000a50 	.word	0x24000a50
 800c2a4:	24000f2c 	.word	0x24000f2c
 800c2a8:	24000a54 	.word	0x24000a54

0800c2ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d06c      	beq.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10b      	bne.n	800c2e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60fb      	str	r3, [r7, #12]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d902      	bls.n	800c2f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	61fb      	str	r3, [r7, #28]
 800c2f2:	e002      	b.n	800c2fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	429a      	cmp	r2, r3
 800c302:	d04c      	beq.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d147      	bne.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c30e:	4b26      	ldr	r3, [pc, #152]	@ (800c3a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	429a      	cmp	r2, r3
 800c316:	d10b      	bne.n	800c330 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	60bb      	str	r3, [r7, #8]
}
 800c32a:	bf00      	nop
 800c32c:	bf00      	nop
 800c32e:	e7fd      	b.n	800c32c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c334:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	db04      	blt.n	800c34e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	6959      	ldr	r1, [r3, #20]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	4613      	mov	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4a13      	ldr	r2, [pc, #76]	@ (800c3ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c35e:	4413      	add	r3, r2
 800c360:	4299      	cmp	r1, r3
 800c362:	d11c      	bne.n	800c39e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	3304      	adds	r3, #4
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe f911 	bl	800a590 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c372:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d903      	bls.n	800c382 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37e:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c386:	4613      	mov	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4a07      	ldr	r2, [pc, #28]	@ (800c3ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c390:	441a      	add	r2, r3
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	3304      	adds	r3, #4
 800c396:	4619      	mov	r1, r3
 800c398:	4610      	mov	r0, r2
 800c39a:	f7fe f89c 	bl	800a4d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c39e:	bf00      	nop
 800c3a0:	3720      	adds	r7, #32
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	24000a50 	.word	0x24000a50
 800c3ac:	24000a54 	.word	0x24000a54
 800c3b0:	24000f2c 	.word	0x24000f2c

0800c3b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c3b4:	b480      	push	{r7}
 800c3b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c3b8:	4b07      	ldr	r3, [pc, #28]	@ (800c3d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c3c0:	4b05      	ldr	r3, [pc, #20]	@ (800c3d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3c6:	3201      	adds	r2, #1
 800c3c8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c3ca:	4b03      	ldr	r3, [pc, #12]	@ (800c3d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
	}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	24000a50 	.word	0x24000a50

0800c3dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3e6:	4b21      	ldr	r3, [pc, #132]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x90>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3ec:	4b20      	ldr	r3, [pc, #128]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe f8cc 	bl	800a590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fe:	d10a      	bne.n	800c416 <prvAddCurrentTaskToDelayedList+0x3a>
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d007      	beq.n	800c416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c406:	4b1a      	ldr	r3, [pc, #104]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x94>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3304      	adds	r3, #4
 800c40c:	4619      	mov	r1, r3
 800c40e:	4819      	ldr	r0, [pc, #100]	@ (800c474 <prvAddCurrentTaskToDelayedList+0x98>)
 800c410:	f7fe f861 	bl	800a4d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c414:	e026      	b.n	800c464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4413      	add	r3, r2
 800c41c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c41e:	4b14      	ldr	r3, [pc, #80]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x94>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d209      	bcs.n	800c442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c42e:	4b12      	ldr	r3, [pc, #72]	@ (800c478 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	4b0f      	ldr	r3, [pc, #60]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x94>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3304      	adds	r3, #4
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f7fe f86f 	bl	800a51e <vListInsert>
}
 800c440:	e010      	b.n	800c464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c442:	4b0e      	ldr	r3, [pc, #56]	@ (800c47c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b0a      	ldr	r3, [pc, #40]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x94>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3304      	adds	r3, #4
 800c44c:	4619      	mov	r1, r3
 800c44e:	4610      	mov	r0, r2
 800c450:	f7fe f865 	bl	800a51e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c454:	4b0a      	ldr	r3, [pc, #40]	@ (800c480 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d202      	bcs.n	800c464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c45e:	4a08      	ldr	r2, [pc, #32]	@ (800c480 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	6013      	str	r3, [r2, #0]
}
 800c464:	bf00      	nop
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	24000f28 	.word	0x24000f28
 800c470:	24000a50 	.word	0x24000a50
 800c474:	24000f10 	.word	0x24000f10
 800c478:	24000ee0 	.word	0x24000ee0
 800c47c:	24000edc 	.word	0x24000edc
 800c480:	24000f44 	.word	0x24000f44

0800c484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08a      	sub	sp, #40	@ 0x28
 800c488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c48e:	f000 fb13 	bl	800cab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c492:	4b1d      	ldr	r3, [pc, #116]	@ (800c508 <xTimerCreateTimerTask+0x84>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d021      	beq.n	800c4de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4a2:	1d3a      	adds	r2, r7, #4
 800c4a4:	f107 0108 	add.w	r1, r7, #8
 800c4a8:	f107 030c 	add.w	r3, r7, #12
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fd ffcb 	bl	800a448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	9202      	str	r2, [sp, #8]
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	2302      	movs	r3, #2
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	460a      	mov	r2, r1
 800c4c4:	4911      	ldr	r1, [pc, #68]	@ (800c50c <xTimerCreateTimerTask+0x88>)
 800c4c6:	4812      	ldr	r0, [pc, #72]	@ (800c510 <xTimerCreateTimerTask+0x8c>)
 800c4c8:	f7fe feea 	bl	800b2a0 <xTaskCreateStatic>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	4a11      	ldr	r2, [pc, #68]	@ (800c514 <xTimerCreateTimerTask+0x90>)
 800c4d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4d2:	4b10      	ldr	r3, [pc, #64]	@ (800c514 <xTimerCreateTimerTask+0x90>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	613b      	str	r3, [r7, #16]
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	e7fd      	b.n	800c4f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	24000f80 	.word	0x24000f80
 800c50c:	0800d7b4 	.word	0x0800d7b4
 800c510:	0800c651 	.word	0x0800c651
 800c514:	24000f84 	.word	0x24000f84

0800c518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	@ 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c526:	2300      	movs	r3, #0
 800c528:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10b      	bne.n	800c548 <xTimerGenericCommand+0x30>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	623b      	str	r3, [r7, #32]
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	e7fd      	b.n	800c544 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c548:	4b19      	ldr	r3, [pc, #100]	@ (800c5b0 <xTimerGenericCommand+0x98>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d02a      	beq.n	800c5a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b05      	cmp	r3, #5
 800c560:	dc18      	bgt.n	800c594 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c562:	f7ff fdad 	bl	800c0c0 <xTaskGetSchedulerState>
 800c566:	4603      	mov	r3, r0
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d109      	bne.n	800c580 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c56c:	4b10      	ldr	r3, [pc, #64]	@ (800c5b0 <xTimerGenericCommand+0x98>)
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	f107 0110 	add.w	r1, r7, #16
 800c574:	2300      	movs	r3, #0
 800c576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c578:	f7fe f97a 	bl	800a870 <xQueueGenericSend>
 800c57c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c57e:	e012      	b.n	800c5a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c580:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b0 <xTimerGenericCommand+0x98>)
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	f107 0110 	add.w	r1, r7, #16
 800c588:	2300      	movs	r3, #0
 800c58a:	2200      	movs	r2, #0
 800c58c:	f7fe f970 	bl	800a870 <xQueueGenericSend>
 800c590:	6278      	str	r0, [r7, #36]	@ 0x24
 800c592:	e008      	b.n	800c5a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <xTimerGenericCommand+0x98>)
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	f107 0110 	add.w	r1, r7, #16
 800c59c:	2300      	movs	r3, #0
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	f7fe fa68 	bl	800aa74 <xQueueGenericSendFromISR>
 800c5a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3728      	adds	r7, #40	@ 0x28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	24000f80 	.word	0x24000f80

0800c5b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5be:	4b23      	ldr	r3, [pc, #140]	@ (800c64c <prvProcessExpiredTimer+0x98>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd ffdf 	bl	800a590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d023      	beq.n	800c628 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	699a      	ldr	r2, [r3, #24]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	18d1      	adds	r1, r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	6978      	ldr	r0, [r7, #20]
 800c5ee:	f000 f8d5 	bl	800c79c <prvInsertTimerInActiveList>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d020      	beq.n	800c63a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	2100      	movs	r1, #0
 800c602:	6978      	ldr	r0, [r7, #20]
 800c604:	f7ff ff88 	bl	800c518 <xTimerGenericCommand>
 800c608:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d114      	bne.n	800c63a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	60fb      	str	r3, [r7, #12]
}
 800c622:	bf00      	nop
 800c624:	bf00      	nop
 800c626:	e7fd      	b.n	800c624 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c62e:	f023 0301 	bic.w	r3, r3, #1
 800c632:	b2da      	uxtb	r2, r3
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	6978      	ldr	r0, [r7, #20]
 800c640:	4798      	blx	r3
}
 800c642:	bf00      	nop
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	24000f78 	.word	0x24000f78

0800c650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c658:	f107 0308 	add.w	r3, r7, #8
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 f859 	bl	800c714 <prvGetNextExpireTime>
 800c662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	4619      	mov	r1, r3
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f805 	bl	800c678 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c66e:	f000 f8d7 	bl	800c820 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c672:	bf00      	nop
 800c674:	e7f0      	b.n	800c658 <prvTimerTask+0x8>
	...

0800c678 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c682:	f7ff f871 	bl	800b768 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c686:	f107 0308 	add.w	r3, r7, #8
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f866 	bl	800c75c <prvSampleTimeNow>
 800c690:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d130      	bne.n	800c6fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10a      	bne.n	800c6b4 <prvProcessTimerOrBlockTask+0x3c>
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d806      	bhi.n	800c6b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6a6:	f7ff f8a5 	bl	800b7f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6aa:	68f9      	ldr	r1, [r7, #12]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff ff81 	bl	800c5b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6b2:	e024      	b.n	800c6fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d008      	beq.n	800c6cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c6ba:	4b13      	ldr	r3, [pc, #76]	@ (800c708 <prvProcessTimerOrBlockTask+0x90>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <prvProcessTimerOrBlockTask+0x50>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e000      	b.n	800c6ca <prvProcessTimerOrBlockTask+0x52>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c70c <prvProcessTimerOrBlockTask+0x94>)
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	f7fe fdad 	bl	800b238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6de:	f7ff f889 	bl	800b7f4 <xTaskResumeAll>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6e8:	4b09      	ldr	r3, [pc, #36]	@ (800c710 <prvProcessTimerOrBlockTask+0x98>)
 800c6ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ee:	601a      	str	r2, [r3, #0]
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	f3bf 8f6f 	isb	sy
}
 800c6f8:	e001      	b.n	800c6fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6fa:	f7ff f87b 	bl	800b7f4 <xTaskResumeAll>
}
 800c6fe:	bf00      	nop
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	24000f7c 	.word	0x24000f7c
 800c70c:	24000f80 	.word	0x24000f80
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c71c:	4b0e      	ldr	r3, [pc, #56]	@ (800c758 <prvGetNextExpireTime+0x44>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <prvGetNextExpireTime+0x16>
 800c726:	2201      	movs	r2, #1
 800c728:	e000      	b.n	800c72c <prvGetNextExpireTime+0x18>
 800c72a:	2200      	movs	r2, #0
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d105      	bne.n	800c744 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c738:	4b07      	ldr	r3, [pc, #28]	@ (800c758 <prvGetNextExpireTime+0x44>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60fb      	str	r3, [r7, #12]
 800c742:	e001      	b.n	800c748 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c748:	68fb      	ldr	r3, [r7, #12]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	24000f78 	.word	0x24000f78

0800c75c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c764:	f7ff f8e4 	bl	800b930 <xTaskGetTickCount>
 800c768:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c76a:	4b0b      	ldr	r3, [pc, #44]	@ (800c798 <prvSampleTimeNow+0x3c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	429a      	cmp	r2, r3
 800c772:	d205      	bcs.n	800c780 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c774:	f000 f93a 	bl	800c9ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	e002      	b.n	800c786 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c786:	4a04      	ldr	r2, [pc, #16]	@ (800c798 <prvSampleTimeNow+0x3c>)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c78c:	68fb      	ldr	r3, [r7, #12]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	24000f88 	.word	0x24000f88

0800c79c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d812      	bhi.n	800c7e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d302      	bcc.n	800c7d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	617b      	str	r3, [r7, #20]
 800c7d4:	e01b      	b.n	800c80e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7d6:	4b10      	ldr	r3, [pc, #64]	@ (800c818 <prvInsertTimerInActiveList+0x7c>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f7fd fe9c 	bl	800a51e <vListInsert>
 800c7e6:	e012      	b.n	800c80e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d206      	bcs.n	800c7fe <prvInsertTimerInActiveList+0x62>
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d302      	bcc.n	800c7fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	617b      	str	r3, [r7, #20]
 800c7fc:	e007      	b.n	800c80e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7fe:	4b07      	ldr	r3, [pc, #28]	@ (800c81c <prvInsertTimerInActiveList+0x80>)
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3304      	adds	r3, #4
 800c806:	4619      	mov	r1, r3
 800c808:	4610      	mov	r0, r2
 800c80a:	f7fd fe88 	bl	800a51e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c80e:	697b      	ldr	r3, [r7, #20]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3718      	adds	r7, #24
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	24000f7c 	.word	0x24000f7c
 800c81c:	24000f78 	.word	0x24000f78

0800c820 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08e      	sub	sp, #56	@ 0x38
 800c824:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c826:	e0ce      	b.n	800c9c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	da19      	bge.n	800c862 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c82e:	1d3b      	adds	r3, r7, #4
 800c830:	3304      	adds	r3, #4
 800c832:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10b      	bne.n	800c852 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	61fb      	str	r3, [r7, #28]
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	e7fd      	b.n	800c84e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c858:	6850      	ldr	r0, [r2, #4]
 800c85a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c85c:	6892      	ldr	r2, [r2, #8]
 800c85e:	4611      	mov	r1, r2
 800c860:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f2c0 80ae 	blt.w	800c9c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d004      	beq.n	800c880 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c878:	3304      	adds	r3, #4
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fd fe88 	bl	800a590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c880:	463b      	mov	r3, r7
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff ff6a 	bl	800c75c <prvSampleTimeNow>
 800c888:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b09      	cmp	r3, #9
 800c88e:	f200 8097 	bhi.w	800c9c0 <prvProcessReceivedCommands+0x1a0>
 800c892:	a201      	add	r2, pc, #4	@ (adr r2, 800c898 <prvProcessReceivedCommands+0x78>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8c1 	.word	0x0800c8c1
 800c89c:	0800c8c1 	.word	0x0800c8c1
 800c8a0:	0800c8c1 	.word	0x0800c8c1
 800c8a4:	0800c937 	.word	0x0800c937
 800c8a8:	0800c94b 	.word	0x0800c94b
 800c8ac:	0800c997 	.word	0x0800c997
 800c8b0:	0800c8c1 	.word	0x0800c8c1
 800c8b4:	0800c8c1 	.word	0x0800c8c1
 800c8b8:	0800c937 	.word	0x0800c937
 800c8bc:	0800c94b 	.word	0x0800c94b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8c6:	f043 0301 	orr.w	r3, r3, #1
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	18d1      	adds	r1, r2, r3
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8e0:	f7ff ff5c 	bl	800c79c <prvInsertTimerInActiveList>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d06c      	beq.n	800c9c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8f8:	f003 0304 	and.w	r3, r3, #4
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d061      	beq.n	800c9c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	441a      	add	r2, r3
 800c908:	2300      	movs	r3, #0
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	2300      	movs	r3, #0
 800c90e:	2100      	movs	r1, #0
 800c910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c912:	f7ff fe01 	bl	800c518 <xTimerGenericCommand>
 800c916:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d152      	bne.n	800c9c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	61bb      	str	r3, [r7, #24]
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	e7fd      	b.n	800c932 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c93c:	f023 0301 	bic.w	r3, r3, #1
 800c940:	b2da      	uxtb	r2, r3
 800c942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c944:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c948:	e03d      	b.n	800c9c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c950:	f043 0301 	orr.w	r3, r3, #1
 800c954:	b2da      	uxtb	r2, r3
 800c956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c960:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10b      	bne.n	800c982 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96e:	f383 8811 	msr	BASEPRI, r3
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	617b      	str	r3, [r7, #20]
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	e7fd      	b.n	800c97e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c984:	699a      	ldr	r2, [r3, #24]
 800c986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c988:	18d1      	adds	r1, r2, r3
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c98e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c990:	f7ff ff04 	bl	800c79c <prvInsertTimerInActiveList>
					break;
 800c994:	e017      	b.n	800c9c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d103      	bne.n	800c9ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c9a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9a6:	f000 fccb 	bl	800d340 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c9aa:	e00c      	b.n	800c9c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9b2:	f023 0301 	bic.w	r3, r3, #1
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c9be:	e002      	b.n	800c9c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c9c0:	bf00      	nop
 800c9c2:	e000      	b.n	800c9c6 <prvProcessReceivedCommands+0x1a6>
					break;
 800c9c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9c6:	4b08      	ldr	r3, [pc, #32]	@ (800c9e8 <prvProcessReceivedCommands+0x1c8>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	1d39      	adds	r1, r7, #4
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe f8ee 	bl	800abb0 <xQueueReceive>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f47f af26 	bne.w	800c828 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
 800c9e0:	3730      	adds	r7, #48	@ 0x30
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	24000f80 	.word	0x24000f80

0800c9ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9f2:	e049      	b.n	800ca88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9f4:	4b2e      	ldr	r3, [pc, #184]	@ (800cab0 <prvSwitchTimerLists+0xc4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9fe:	4b2c      	ldr	r3, [pc, #176]	@ (800cab0 <prvSwitchTimerLists+0xc4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fd fdbf 	bl	800a590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca20:	f003 0304 	and.w	r3, r3, #4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02f      	beq.n	800ca88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	4413      	add	r3, r2
 800ca30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d90e      	bls.n	800ca58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca46:	4b1a      	ldr	r3, [pc, #104]	@ (800cab0 <prvSwitchTimerLists+0xc4>)
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4619      	mov	r1, r3
 800ca50:	4610      	mov	r0, r2
 800ca52:	f7fd fd64 	bl	800a51e <vListInsert>
 800ca56:	e017      	b.n	800ca88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca58:	2300      	movs	r3, #0
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	2100      	movs	r1, #0
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f7ff fd58 	bl	800c518 <xTimerGenericCommand>
 800ca68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10b      	bne.n	800ca88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	603b      	str	r3, [r7, #0]
}
 800ca82:	bf00      	nop
 800ca84:	bf00      	nop
 800ca86:	e7fd      	b.n	800ca84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca88:	4b09      	ldr	r3, [pc, #36]	@ (800cab0 <prvSwitchTimerLists+0xc4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1b0      	bne.n	800c9f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca92:	4b07      	ldr	r3, [pc, #28]	@ (800cab0 <prvSwitchTimerLists+0xc4>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca98:	4b06      	ldr	r3, [pc, #24]	@ (800cab4 <prvSwitchTimerLists+0xc8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a04      	ldr	r2, [pc, #16]	@ (800cab0 <prvSwitchTimerLists+0xc4>)
 800ca9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800caa0:	4a04      	ldr	r2, [pc, #16]	@ (800cab4 <prvSwitchTimerLists+0xc8>)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	6013      	str	r3, [r2, #0]
}
 800caa6:	bf00      	nop
 800caa8:	3718      	adds	r7, #24
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	24000f78 	.word	0x24000f78
 800cab4:	24000f7c 	.word	0x24000f7c

0800cab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cabe:	f000 f96b 	bl	800cd98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cac2:	4b15      	ldr	r3, [pc, #84]	@ (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d120      	bne.n	800cb0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800caca:	4814      	ldr	r0, [pc, #80]	@ (800cb1c <prvCheckForValidListAndQueue+0x64>)
 800cacc:	f7fd fcd6 	bl	800a47c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cad0:	4813      	ldr	r0, [pc, #76]	@ (800cb20 <prvCheckForValidListAndQueue+0x68>)
 800cad2:	f7fd fcd3 	bl	800a47c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cad6:	4b13      	ldr	r3, [pc, #76]	@ (800cb24 <prvCheckForValidListAndQueue+0x6c>)
 800cad8:	4a10      	ldr	r2, [pc, #64]	@ (800cb1c <prvCheckForValidListAndQueue+0x64>)
 800cada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cadc:	4b12      	ldr	r3, [pc, #72]	@ (800cb28 <prvCheckForValidListAndQueue+0x70>)
 800cade:	4a10      	ldr	r2, [pc, #64]	@ (800cb20 <prvCheckForValidListAndQueue+0x68>)
 800cae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cae2:	2300      	movs	r3, #0
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4b11      	ldr	r3, [pc, #68]	@ (800cb2c <prvCheckForValidListAndQueue+0x74>)
 800cae8:	4a11      	ldr	r2, [pc, #68]	@ (800cb30 <prvCheckForValidListAndQueue+0x78>)
 800caea:	2110      	movs	r1, #16
 800caec:	200a      	movs	r0, #10
 800caee:	f7fd fde3 	bl	800a6b8 <xQueueGenericCreateStatic>
 800caf2:	4603      	mov	r3, r0
 800caf4:	4a08      	ldr	r2, [pc, #32]	@ (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800caf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb00:	4b05      	ldr	r3, [pc, #20]	@ (800cb18 <prvCheckForValidListAndQueue+0x60>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	490b      	ldr	r1, [pc, #44]	@ (800cb34 <prvCheckForValidListAndQueue+0x7c>)
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fb6c 	bl	800b1e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb0c:	f000 f976 	bl	800cdfc <vPortExitCritical>
}
 800cb10:	bf00      	nop
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	24000f80 	.word	0x24000f80
 800cb1c:	24000f50 	.word	0x24000f50
 800cb20:	24000f64 	.word	0x24000f64
 800cb24:	24000f78 	.word	0x24000f78
 800cb28:	24000f7c 	.word	0x24000f7c
 800cb2c:	2400102c 	.word	0x2400102c
 800cb30:	24000f8c 	.word	0x24000f8c
 800cb34:	0800d7bc 	.word	0x0800d7bc

0800cb38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3b04      	subs	r3, #4
 800cb48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3b04      	subs	r3, #4
 800cb56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f023 0201 	bic.w	r2, r3, #1
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3b04      	subs	r3, #4
 800cb66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb68:	4a0c      	ldr	r2, [pc, #48]	@ (800cb9c <pxPortInitialiseStack+0x64>)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3b14      	subs	r3, #20
 800cb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3b04      	subs	r3, #4
 800cb7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f06f 0202 	mvn.w	r2, #2
 800cb86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3b20      	subs	r3, #32
 800cb8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	0800cba1 	.word	0x0800cba1

0800cba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbaa:	4b13      	ldr	r3, [pc, #76]	@ (800cbf8 <prvTaskExitError+0x58>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb2:	d00b      	beq.n	800cbcc <prvTaskExitError+0x2c>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	60fb      	str	r3, [r7, #12]
}
 800cbc6:	bf00      	nop
 800cbc8:	bf00      	nop
 800cbca:	e7fd      	b.n	800cbc8 <prvTaskExitError+0x28>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	60bb      	str	r3, [r7, #8]
}
 800cbde:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbe0:	bf00      	nop
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0fc      	beq.n	800cbe2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbe8:	bf00      	nop
 800cbea:	bf00      	nop
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	24000010 	.word	0x24000010
 800cbfc:	00000000 	.word	0x00000000

0800cc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc00:	4b07      	ldr	r3, [pc, #28]	@ (800cc20 <pxCurrentTCBConst2>)
 800cc02:	6819      	ldr	r1, [r3, #0]
 800cc04:	6808      	ldr	r0, [r1, #0]
 800cc06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0a:	f380 8809 	msr	PSP, r0
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f04f 0000 	mov.w	r0, #0
 800cc16:	f380 8811 	msr	BASEPRI, r0
 800cc1a:	4770      	bx	lr
 800cc1c:	f3af 8000 	nop.w

0800cc20 <pxCurrentTCBConst2>:
 800cc20:	24000a50 	.word	0x24000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc28:	4808      	ldr	r0, [pc, #32]	@ (800cc4c <prvPortStartFirstTask+0x24>)
 800cc2a:	6800      	ldr	r0, [r0, #0]
 800cc2c:	6800      	ldr	r0, [r0, #0]
 800cc2e:	f380 8808 	msr	MSP, r0
 800cc32:	f04f 0000 	mov.w	r0, #0
 800cc36:	f380 8814 	msr	CONTROL, r0
 800cc3a:	b662      	cpsie	i
 800cc3c:	b661      	cpsie	f
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	df00      	svc	0
 800cc48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc4a:	bf00      	nop
 800cc4c:	e000ed08 	.word	0xe000ed08

0800cc50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc56:	4b47      	ldr	r3, [pc, #284]	@ (800cd74 <xPortStartScheduler+0x124>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a47      	ldr	r2, [pc, #284]	@ (800cd78 <xPortStartScheduler+0x128>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d10b      	bne.n	800cc78 <xPortStartScheduler+0x28>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	613b      	str	r3, [r7, #16]
}
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	e7fd      	b.n	800cc74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc78:	4b3e      	ldr	r3, [pc, #248]	@ (800cd74 <xPortStartScheduler+0x124>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd7c <xPortStartScheduler+0x12c>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d10b      	bne.n	800cc9a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60fb      	str	r3, [r7, #12]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc9a:	4b39      	ldr	r3, [pc, #228]	@ (800cd80 <xPortStartScheduler+0x130>)
 800cc9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	22ff      	movs	r2, #255	@ 0xff
 800ccaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccb4:	78fb      	ldrb	r3, [r7, #3]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	4b31      	ldr	r3, [pc, #196]	@ (800cd84 <xPortStartScheduler+0x134>)
 800ccc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccc2:	4b31      	ldr	r3, [pc, #196]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccc4:	2207      	movs	r2, #7
 800ccc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccc8:	e009      	b.n	800ccde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ccca:	4b2f      	ldr	r3, [pc, #188]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	4a2d      	ldr	r2, [pc, #180]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccd4:	78fb      	ldrb	r3, [r7, #3]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cce6:	2b80      	cmp	r3, #128	@ 0x80
 800cce8:	d0ef      	beq.n	800ccca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccea:	4b27      	ldr	r3, [pc, #156]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f1c3 0307 	rsb	r3, r3, #7
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d00b      	beq.n	800cd0e <xPortStartScheduler+0xbe>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	60bb      	str	r3, [r7, #8]
}
 800cd08:	bf00      	nop
 800cd0a:	bf00      	nop
 800cd0c:	e7fd      	b.n	800cd0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	4a1c      	ldr	r2, [pc, #112]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd18:	4b1b      	ldr	r3, [pc, #108]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd20:	4a19      	ldr	r2, [pc, #100]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd2c:	4b17      	ldr	r3, [pc, #92]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a16      	ldr	r2, [pc, #88]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cd36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd38:	4b14      	ldr	r3, [pc, #80]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a13      	ldr	r2, [pc, #76]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cd42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd44:	f000 f9a6 	bl	800d094 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd48:	4b11      	ldr	r3, [pc, #68]	@ (800cd90 <xPortStartScheduler+0x140>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd4e:	f000 f9dd 	bl	800d10c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd52:	4b10      	ldr	r3, [pc, #64]	@ (800cd94 <xPortStartScheduler+0x144>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a0f      	ldr	r2, [pc, #60]	@ (800cd94 <xPortStartScheduler+0x144>)
 800cd58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cd5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd5e:	f7ff ff63 	bl	800cc28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd62:	f7fe fed7 	bl	800bb14 <vTaskSwitchContext>
	prvTaskExitError();
 800cd66:	f7ff ff1b 	bl	800cba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	e000ed00 	.word	0xe000ed00
 800cd78:	410fc271 	.word	0x410fc271
 800cd7c:	410fc270 	.word	0x410fc270
 800cd80:	e000e400 	.word	0xe000e400
 800cd84:	24001088 	.word	0x24001088
 800cd88:	2400108c 	.word	0x2400108c
 800cd8c:	e000ed20 	.word	0xe000ed20
 800cd90:	24000010 	.word	0x24000010
 800cd94:	e000ef34 	.word	0xe000ef34

0800cd98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	607b      	str	r3, [r7, #4]
}
 800cdb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdb2:	4b10      	ldr	r3, [pc, #64]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	4a0e      	ldr	r2, [pc, #56]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d110      	bne.n	800cde6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <vPortEnterCritical+0x60>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00b      	beq.n	800cde6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	603b      	str	r3, [r7, #0]
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	e7fd      	b.n	800cde2 <vPortEnterCritical+0x4a>
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	24000010 	.word	0x24000010
 800cdf8:	e000ed04 	.word	0xe000ed04

0800cdfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce02:	4b12      	ldr	r3, [pc, #72]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10b      	bne.n	800ce22 <vPortExitCritical+0x26>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	607b      	str	r3, [r7, #4]
}
 800ce1c:	bf00      	nop
 800ce1e:	bf00      	nop
 800ce20:	e7fd      	b.n	800ce1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce22:	4b0a      	ldr	r3, [pc, #40]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	4a08      	ldr	r2, [pc, #32]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce2c:	4b07      	ldr	r3, [pc, #28]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d105      	bne.n	800ce40 <vPortExitCritical+0x44>
 800ce34:	2300      	movs	r3, #0
 800ce36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	f383 8811 	msr	BASEPRI, r3
}
 800ce3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	24000010 	.word	0x24000010

0800ce50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce50:	f3ef 8009 	mrs	r0, PSP
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4b15      	ldr	r3, [pc, #84]	@ (800ceb0 <pxCurrentTCBConst>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	f01e 0f10 	tst.w	lr, #16
 800ce60:	bf08      	it	eq
 800ce62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	6010      	str	r0, [r2, #0]
 800ce6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce74:	f380 8811 	msr	BASEPRI, r0
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f7fe fe48 	bl	800bb14 <vTaskSwitchContext>
 800ce84:	f04f 0000 	mov.w	r0, #0
 800ce88:	f380 8811 	msr	BASEPRI, r0
 800ce8c:	bc09      	pop	{r0, r3}
 800ce8e:	6819      	ldr	r1, [r3, #0]
 800ce90:	6808      	ldr	r0, [r1, #0]
 800ce92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce96:	f01e 0f10 	tst.w	lr, #16
 800ce9a:	bf08      	it	eq
 800ce9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cea0:	f380 8809 	msr	PSP, r0
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w

0800ceb0 <pxCurrentTCBConst>:
 800ceb0:	24000a50 	.word	0x24000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop

0800ceb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	607b      	str	r3, [r7, #4]
}
 800ced0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ced2:	f7fe fd65 	bl	800b9a0 <xTaskIncrementTick>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d003      	beq.n	800cee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cedc:	4b06      	ldr	r3, [pc, #24]	@ (800cef8 <xPortSysTickHandler+0x40>)
 800cede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	2300      	movs	r3, #0
 800cee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	f383 8811 	msr	BASEPRI, r3
}
 800ceee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800cf04:	4b5d      	ldr	r3, [pc, #372]	@ (800d07c <vPortSuppressTicksAndSleep+0x180>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d902      	bls.n	800cf14 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800cf0e:	4b5b      	ldr	r3, [pc, #364]	@ (800d07c <vPortSuppressTicksAndSleep+0x180>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800cf14:	4b5a      	ldr	r3, [pc, #360]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a59      	ldr	r2, [pc, #356]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cf1a:	f023 0301 	bic.w	r3, r3, #1
 800cf1e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800cf20:	4b58      	ldr	r3, [pc, #352]	@ (800d084 <vPortSuppressTicksAndSleep+0x188>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	3b01      	subs	r3, #1
 800cf28:	4957      	ldr	r1, [pc, #348]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800cf2a:	6809      	ldr	r1, [r1, #0]
 800cf2c:	fb01 f303 	mul.w	r3, r1, r3
 800cf30:	4413      	add	r3, r2
 800cf32:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800cf34:	4b55      	ldr	r3, [pc, #340]	@ (800d08c <vPortSuppressTicksAndSleep+0x190>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	69fa      	ldr	r2, [r7, #28]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d904      	bls.n	800cf48 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800cf3e:	4b53      	ldr	r3, [pc, #332]	@ (800d08c <vPortSuppressTicksAndSleep+0x190>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69fa      	ldr	r2, [r7, #28]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800cf48:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800cf4a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800cf4e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800cf52:	f7fe ffc3 	bl	800bedc <eTaskConfirmSleepModeStatus>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d110      	bne.n	800cf7e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800cf5c:	4b49      	ldr	r3, [pc, #292]	@ (800d084 <vPortSuppressTicksAndSleep+0x188>)
 800cf5e:	4a4c      	ldr	r2, [pc, #304]	@ (800d090 <vPortSuppressTicksAndSleep+0x194>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cf64:	4b46      	ldr	r3, [pc, #280]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a45      	ldr	r2, [pc, #276]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800cf70:	4b45      	ldr	r3, [pc, #276]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a46      	ldr	r2, [pc, #280]	@ (800d090 <vPortSuppressTicksAndSleep+0x194>)
 800cf76:	3b01      	subs	r3, #1
 800cf78:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800cf7a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800cf7c:	e079      	b.n	800d072 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800cf7e:	4a44      	ldr	r2, [pc, #272]	@ (800d090 <vPortSuppressTicksAndSleep+0x194>)
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf84:	4b3f      	ldr	r3, [pc, #252]	@ (800d084 <vPortSuppressTicksAndSleep+0x188>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cf8a:	4b3d      	ldr	r3, [pc, #244]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a3c      	ldr	r2, [pc, #240]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cf90:	f043 0301 	orr.w	r3, r3, #1
 800cf94:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	613b      	str	r3, [r7, #16]
 800cf9e:	6938      	ldr	r0, [r7, #16]
 800cfa0:	f7f3 fb46 	bl	8000630 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d004      	beq.n	800cfb4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800cfaa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800cfae:	bf30      	wfi
				__asm volatile( "isb" );
 800cfb0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7f3 fb45 	bl	8000644 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800cfba:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800cfbc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800cfc0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800cfc4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800cfc6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800cfca:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800cfce:	4b2c      	ldr	r3, [pc, #176]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cfd0:	2206      	movs	r2, #6
 800cfd2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800cfd4:	4b2a      	ldr	r3, [pc, #168]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d01d      	beq.n	800d01c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800cfe0:	4b29      	ldr	r3, [pc, #164]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	4b27      	ldr	r3, [pc, #156]	@ (800d084 <vPortSuppressTicksAndSleep+0x188>)
 800cfe6:	6819      	ldr	r1, [r3, #0]
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	1acb      	subs	r3, r1, r3
 800cfec:	4413      	add	r3, r2
 800cfee:	3b01      	subs	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800cff2:	4b26      	ldr	r3, [pc, #152]	@ (800d08c <vPortSuppressTicksAndSleep+0x190>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d304      	bcc.n	800d006 <vPortSuppressTicksAndSleep+0x10a>
 800cffc:	4b22      	ldr	r3, [pc, #136]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	429a      	cmp	r2, r3
 800d004:	d903      	bls.n	800d00e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800d006:	4b20      	ldr	r3, [pc, #128]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	3b01      	subs	r3, #1
 800d00c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800d00e:	4a20      	ldr	r2, [pc, #128]	@ (800d090 <vPortSuppressTicksAndSleep+0x194>)
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3b01      	subs	r3, #1
 800d018:	61bb      	str	r3, [r7, #24]
 800d01a:	e018      	b.n	800d04e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d01c:	4b1a      	ldr	r3, [pc, #104]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	fb03 f202 	mul.w	r2, r3, r2
 800d026:	4b17      	ldr	r3, [pc, #92]	@ (800d084 <vPortSuppressTicksAndSleep+0x188>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800d02e:	4b16      	ldr	r3, [pc, #88]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	fbb2 f3f3 	udiv	r3, r2, r3
 800d038:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	3301      	adds	r3, #1
 800d03e:	4a12      	ldr	r2, [pc, #72]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800d040:	6812      	ldr	r2, [r2, #0]
 800d042:	fb03 f202 	mul.w	r2, r3, r2
 800d046:	4912      	ldr	r1, [pc, #72]	@ (800d090 <vPortSuppressTicksAndSleep+0x194>)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d04e:	4b0d      	ldr	r3, [pc, #52]	@ (800d084 <vPortSuppressTicksAndSleep+0x188>)
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d054:	4b0a      	ldr	r3, [pc, #40]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a09      	ldr	r2, [pc, #36]	@ (800d080 <vPortSuppressTicksAndSleep+0x184>)
 800d05a:	f043 0301 	orr.w	r3, r3, #1
 800d05e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800d060:	69b8      	ldr	r0, [r7, #24]
 800d062:	f7fe fc75 	bl	800b950 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d066:	4b08      	ldr	r3, [pc, #32]	@ (800d088 <vPortSuppressTicksAndSleep+0x18c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a09      	ldr	r2, [pc, #36]	@ (800d090 <vPortSuppressTicksAndSleep+0x194>)
 800d06c:	3b01      	subs	r3, #1
 800d06e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800d070:	b662      	cpsie	i
	}
 800d072:	bf00      	nop
 800d074:	3720      	adds	r7, #32
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	24001080 	.word	0x24001080
 800d080:	e000e010 	.word	0xe000e010
 800d084:	e000e018 	.word	0xe000e018
 800d088:	2400107c 	.word	0x2400107c
 800d08c:	24001084 	.word	0x24001084
 800d090:	e000e014 	.word	0xe000e014

0800d094 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800d098:	4b14      	ldr	r3, [pc, #80]	@ (800d0ec <vPortSetupTimerInterrupt+0x58>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a14      	ldr	r2, [pc, #80]	@ (800d0f0 <vPortSetupTimerInterrupt+0x5c>)
 800d09e:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a2:	099b      	lsrs	r3, r3, #6
 800d0a4:	4a13      	ldr	r2, [pc, #76]	@ (800d0f4 <vPortSetupTimerInterrupt+0x60>)
 800d0a6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800d0a8:	4b12      	ldr	r3, [pc, #72]	@ (800d0f4 <vPortSetupTimerInterrupt+0x60>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800d0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0b4:	4a10      	ldr	r2, [pc, #64]	@ (800d0f8 <vPortSetupTimerInterrupt+0x64>)
 800d0b6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800d0b8:	4b10      	ldr	r3, [pc, #64]	@ (800d0fc <vPortSetupTimerInterrupt+0x68>)
 800d0ba:	222d      	movs	r2, #45	@ 0x2d
 800d0bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0be:	4b10      	ldr	r3, [pc, #64]	@ (800d100 <vPortSetupTimerInterrupt+0x6c>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d104 <vPortSetupTimerInterrupt+0x70>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0ca:	4b08      	ldr	r3, [pc, #32]	@ (800d0ec <vPortSetupTimerInterrupt+0x58>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a08      	ldr	r2, [pc, #32]	@ (800d0f0 <vPortSetupTimerInterrupt+0x5c>)
 800d0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d4:	099b      	lsrs	r3, r3, #6
 800d0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800d108 <vPortSetupTimerInterrupt+0x74>)
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0dc:	4b08      	ldr	r3, [pc, #32]	@ (800d100 <vPortSetupTimerInterrupt+0x6c>)
 800d0de:	2207      	movs	r2, #7
 800d0e0:	601a      	str	r2, [r3, #0]
}
 800d0e2:	bf00      	nop
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	24000000 	.word	0x24000000
 800d0f0:	10624dd3 	.word	0x10624dd3
 800d0f4:	2400107c 	.word	0x2400107c
 800d0f8:	24001080 	.word	0x24001080
 800d0fc:	24001084 	.word	0x24001084
 800d100:	e000e010 	.word	0xe000e010
 800d104:	e000e018 	.word	0xe000e018
 800d108:	e000e014 	.word	0xe000e014

0800d10c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d10c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d11c <vPortEnableVFP+0x10>
 800d110:	6801      	ldr	r1, [r0, #0]
 800d112:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d116:	6001      	str	r1, [r0, #0]
 800d118:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d11a:	bf00      	nop
 800d11c:	e000ed88 	.word	0xe000ed88

0800d120 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d126:	f3ef 8305 	mrs	r3, IPSR
 800d12a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b0f      	cmp	r3, #15
 800d130:	d915      	bls.n	800d15e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d132:	4a18      	ldr	r2, [pc, #96]	@ (800d194 <vPortValidateInterruptPriority+0x74>)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	4413      	add	r3, r2
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d13c:	4b16      	ldr	r3, [pc, #88]	@ (800d198 <vPortValidateInterruptPriority+0x78>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	7afa      	ldrb	r2, [r7, #11]
 800d142:	429a      	cmp	r2, r3
 800d144:	d20b      	bcs.n	800d15e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	607b      	str	r3, [r7, #4]
}
 800d158:	bf00      	nop
 800d15a:	bf00      	nop
 800d15c:	e7fd      	b.n	800d15a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d15e:	4b0f      	ldr	r3, [pc, #60]	@ (800d19c <vPortValidateInterruptPriority+0x7c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d166:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a0 <vPortValidateInterruptPriority+0x80>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d90b      	bls.n	800d186 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	603b      	str	r3, [r7, #0]
}
 800d180:	bf00      	nop
 800d182:	bf00      	nop
 800d184:	e7fd      	b.n	800d182 <vPortValidateInterruptPriority+0x62>
	}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	e000e3f0 	.word	0xe000e3f0
 800d198:	24001088 	.word	0x24001088
 800d19c:	e000ed0c 	.word	0xe000ed0c
 800d1a0:	2400108c 	.word	0x2400108c

0800d1a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08a      	sub	sp, #40	@ 0x28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1b0:	f7fe fada 	bl	800b768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1b4:	4b5c      	ldr	r3, [pc, #368]	@ (800d328 <pvPortMalloc+0x184>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1bc:	f000 f924 	bl	800d408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1c0:	4b5a      	ldr	r3, [pc, #360]	@ (800d32c <pvPortMalloc+0x188>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f040 8095 	bne.w	800d2f8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01e      	beq.n	800d212 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d1d4:	2208      	movs	r2, #8
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4413      	add	r3, r2
 800d1da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f003 0307 	and.w	r3, r3, #7
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d015      	beq.n	800d212 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f023 0307 	bic.w	r3, r3, #7
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00b      	beq.n	800d212 <pvPortMalloc+0x6e>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	617b      	str	r3, [r7, #20]
}
 800d20c:	bf00      	nop
 800d20e:	bf00      	nop
 800d210:	e7fd      	b.n	800d20e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d06f      	beq.n	800d2f8 <pvPortMalloc+0x154>
 800d218:	4b45      	ldr	r3, [pc, #276]	@ (800d330 <pvPortMalloc+0x18c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d86a      	bhi.n	800d2f8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d222:	4b44      	ldr	r3, [pc, #272]	@ (800d334 <pvPortMalloc+0x190>)
 800d224:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d226:	4b43      	ldr	r3, [pc, #268]	@ (800d334 <pvPortMalloc+0x190>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d22c:	e004      	b.n	800d238 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d230:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d903      	bls.n	800d24a <pvPortMalloc+0xa6>
 800d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1f1      	bne.n	800d22e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d24a:	4b37      	ldr	r3, [pc, #220]	@ (800d328 <pvPortMalloc+0x184>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d250:	429a      	cmp	r2, r3
 800d252:	d051      	beq.n	800d2f8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2208      	movs	r2, #8
 800d25a:	4413      	add	r3, r2
 800d25c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	1ad2      	subs	r2, r2, r3
 800d26e:	2308      	movs	r3, #8
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	429a      	cmp	r2, r3
 800d274:	d920      	bls.n	800d2b8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4413      	add	r3, r2
 800d27c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	f003 0307 	and.w	r3, r3, #7
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <pvPortMalloc+0xfc>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	613b      	str	r3, [r7, #16]
}
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
 800d29e:	e7fd      	b.n	800d29c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	1ad2      	subs	r2, r2, r3
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2b2:	69b8      	ldr	r0, [r7, #24]
 800d2b4:	f000 f90a 	bl	800d4cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d330 <pvPortMalloc+0x18c>)
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	4a1b      	ldr	r2, [pc, #108]	@ (800d330 <pvPortMalloc+0x18c>)
 800d2c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d330 <pvPortMalloc+0x18c>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	4b1b      	ldr	r3, [pc, #108]	@ (800d338 <pvPortMalloc+0x194>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d203      	bcs.n	800d2da <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2d2:	4b17      	ldr	r3, [pc, #92]	@ (800d330 <pvPortMalloc+0x18c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a18      	ldr	r2, [pc, #96]	@ (800d338 <pvPortMalloc+0x194>)
 800d2d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	4b13      	ldr	r3, [pc, #76]	@ (800d32c <pvPortMalloc+0x188>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d2ee:	4b13      	ldr	r3, [pc, #76]	@ (800d33c <pvPortMalloc+0x198>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	4a11      	ldr	r2, [pc, #68]	@ (800d33c <pvPortMalloc+0x198>)
 800d2f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2f8:	f7fe fa7c 	bl	800b7f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	f003 0307 	and.w	r3, r3, #7
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00b      	beq.n	800d31e <pvPortMalloc+0x17a>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	60fb      	str	r3, [r7, #12]
}
 800d318:	bf00      	nop
 800d31a:	bf00      	nop
 800d31c:	e7fd      	b.n	800d31a <pvPortMalloc+0x176>
	return pvReturn;
 800d31e:	69fb      	ldr	r3, [r7, #28]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3728      	adds	r7, #40	@ 0x28
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	24004c98 	.word	0x24004c98
 800d32c:	24004cac 	.word	0x24004cac
 800d330:	24004c9c 	.word	0x24004c9c
 800d334:	24004c90 	.word	0x24004c90
 800d338:	24004ca0 	.word	0x24004ca0
 800d33c:	24004ca4 	.word	0x24004ca4

0800d340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d04f      	beq.n	800d3f2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d352:	2308      	movs	r3, #8
 800d354:	425b      	negs	r3, r3
 800d356:	697a      	ldr	r2, [r7, #20]
 800d358:	4413      	add	r3, r2
 800d35a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	685a      	ldr	r2, [r3, #4]
 800d364:	4b25      	ldr	r3, [pc, #148]	@ (800d3fc <vPortFree+0xbc>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4013      	ands	r3, r2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10b      	bne.n	800d386 <vPortFree+0x46>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	60fb      	str	r3, [r7, #12]
}
 800d380:	bf00      	nop
 800d382:	bf00      	nop
 800d384:	e7fd      	b.n	800d382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00b      	beq.n	800d3a6 <vPortFree+0x66>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	60bb      	str	r3, [r7, #8]
}
 800d3a0:	bf00      	nop
 800d3a2:	bf00      	nop
 800d3a4:	e7fd      	b.n	800d3a2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	4b14      	ldr	r3, [pc, #80]	@ (800d3fc <vPortFree+0xbc>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d01e      	beq.n	800d3f2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d11a      	bne.n	800d3f2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d3fc <vPortFree+0xbc>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	43db      	mvns	r3, r3
 800d3c6:	401a      	ands	r2, r3
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3cc:	f7fe f9cc 	bl	800b768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d400 <vPortFree+0xc0>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4413      	add	r3, r2
 800d3da:	4a09      	ldr	r2, [pc, #36]	@ (800d400 <vPortFree+0xc0>)
 800d3dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3de:	6938      	ldr	r0, [r7, #16]
 800d3e0:	f000 f874 	bl	800d4cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d3e4:	4b07      	ldr	r3, [pc, #28]	@ (800d404 <vPortFree+0xc4>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	4a06      	ldr	r2, [pc, #24]	@ (800d404 <vPortFree+0xc4>)
 800d3ec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d3ee:	f7fe fa01 	bl	800b7f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3f2:	bf00      	nop
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	24004cac 	.word	0x24004cac
 800d400:	24004c9c 	.word	0x24004c9c
 800d404:	24004ca8 	.word	0x24004ca8

0800d408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d40e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d414:	4b27      	ldr	r3, [pc, #156]	@ (800d4b4 <prvHeapInit+0xac>)
 800d416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f003 0307 	and.w	r3, r3, #7
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00c      	beq.n	800d43c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3307      	adds	r3, #7
 800d426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f023 0307 	bic.w	r3, r3, #7
 800d42e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	4a1f      	ldr	r2, [pc, #124]	@ (800d4b4 <prvHeapInit+0xac>)
 800d438:	4413      	add	r3, r2
 800d43a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d440:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b8 <prvHeapInit+0xb0>)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d446:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b8 <prvHeapInit+0xb0>)
 800d448:	2200      	movs	r2, #0
 800d44a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	4413      	add	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d454:	2208      	movs	r2, #8
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	1a9b      	subs	r3, r3, r2
 800d45a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f023 0307 	bic.w	r3, r3, #7
 800d462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4a15      	ldr	r2, [pc, #84]	@ (800d4bc <prvHeapInit+0xb4>)
 800d468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d46a:	4b14      	ldr	r3, [pc, #80]	@ (800d4bc <prvHeapInit+0xb4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2200      	movs	r2, #0
 800d470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d472:	4b12      	ldr	r3, [pc, #72]	@ (800d4bc <prvHeapInit+0xb4>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	1ad2      	subs	r2, r2, r3
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d488:	4b0c      	ldr	r3, [pc, #48]	@ (800d4bc <prvHeapInit+0xb4>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	4a0a      	ldr	r2, [pc, #40]	@ (800d4c0 <prvHeapInit+0xb8>)
 800d496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	4a09      	ldr	r2, [pc, #36]	@ (800d4c4 <prvHeapInit+0xbc>)
 800d49e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4a0:	4b09      	ldr	r3, [pc, #36]	@ (800d4c8 <prvHeapInit+0xc0>)
 800d4a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d4a6:	601a      	str	r2, [r3, #0]
}
 800d4a8:	bf00      	nop
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr
 800d4b4:	24001090 	.word	0x24001090
 800d4b8:	24004c90 	.word	0x24004c90
 800d4bc:	24004c98 	.word	0x24004c98
 800d4c0:	24004ca0 	.word	0x24004ca0
 800d4c4:	24004c9c 	.word	0x24004c9c
 800d4c8:	24004cac 	.word	0x24004cac

0800d4cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4d4:	4b28      	ldr	r3, [pc, #160]	@ (800d578 <prvInsertBlockIntoFreeList+0xac>)
 800d4d6:	60fb      	str	r3, [r7, #12]
 800d4d8:	e002      	b.n	800d4e0 <prvInsertBlockIntoFreeList+0x14>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60fb      	str	r3, [r7, #12]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d8f7      	bhi.n	800d4da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d108      	bne.n	800d50e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	441a      	add	r2, r3
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	441a      	add	r2, r3
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d118      	bne.n	800d554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	4b15      	ldr	r3, [pc, #84]	@ (800d57c <prvInsertBlockIntoFreeList+0xb0>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d00d      	beq.n	800d54a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685a      	ldr	r2, [r3, #4]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	441a      	add	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	e008      	b.n	800d55c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d54a:	4b0c      	ldr	r3, [pc, #48]	@ (800d57c <prvInsertBlockIntoFreeList+0xb0>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	e003      	b.n	800d55c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	d002      	beq.n	800d56a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d56a:	bf00      	nop
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	24004c90 	.word	0x24004c90
 800d57c:	24004c98 	.word	0x24004c98

0800d580 <memset>:
 800d580:	4402      	add	r2, r0
 800d582:	4603      	mov	r3, r0
 800d584:	4293      	cmp	r3, r2
 800d586:	d100      	bne.n	800d58a <memset+0xa>
 800d588:	4770      	bx	lr
 800d58a:	f803 1b01 	strb.w	r1, [r3], #1
 800d58e:	e7f9      	b.n	800d584 <memset+0x4>

0800d590 <_reclaim_reent>:
 800d590:	4b29      	ldr	r3, [pc, #164]	@ (800d638 <_reclaim_reent+0xa8>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4283      	cmp	r3, r0
 800d596:	b570      	push	{r4, r5, r6, lr}
 800d598:	4604      	mov	r4, r0
 800d59a:	d04b      	beq.n	800d634 <_reclaim_reent+0xa4>
 800d59c:	69c3      	ldr	r3, [r0, #28]
 800d59e:	b1ab      	cbz	r3, 800d5cc <_reclaim_reent+0x3c>
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	b16b      	cbz	r3, 800d5c0 <_reclaim_reent+0x30>
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	69e3      	ldr	r3, [r4, #28]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	5959      	ldr	r1, [r3, r5]
 800d5ac:	2900      	cmp	r1, #0
 800d5ae:	d13b      	bne.n	800d628 <_reclaim_reent+0x98>
 800d5b0:	3504      	adds	r5, #4
 800d5b2:	2d80      	cmp	r5, #128	@ 0x80
 800d5b4:	d1f7      	bne.n	800d5a6 <_reclaim_reent+0x16>
 800d5b6:	69e3      	ldr	r3, [r4, #28]
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	68d9      	ldr	r1, [r3, #12]
 800d5bc:	f000 f872 	bl	800d6a4 <_free_r>
 800d5c0:	69e3      	ldr	r3, [r4, #28]
 800d5c2:	6819      	ldr	r1, [r3, #0]
 800d5c4:	b111      	cbz	r1, 800d5cc <_reclaim_reent+0x3c>
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f000 f86c 	bl	800d6a4 <_free_r>
 800d5cc:	6961      	ldr	r1, [r4, #20]
 800d5ce:	b111      	cbz	r1, 800d5d6 <_reclaim_reent+0x46>
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 f867 	bl	800d6a4 <_free_r>
 800d5d6:	69e1      	ldr	r1, [r4, #28]
 800d5d8:	b111      	cbz	r1, 800d5e0 <_reclaim_reent+0x50>
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f000 f862 	bl	800d6a4 <_free_r>
 800d5e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d5e2:	b111      	cbz	r1, 800d5ea <_reclaim_reent+0x5a>
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 f85d 	bl	800d6a4 <_free_r>
 800d5ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5ec:	b111      	cbz	r1, 800d5f4 <_reclaim_reent+0x64>
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f000 f858 	bl	800d6a4 <_free_r>
 800d5f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d5f6:	b111      	cbz	r1, 800d5fe <_reclaim_reent+0x6e>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 f853 	bl	800d6a4 <_free_r>
 800d5fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d600:	b111      	cbz	r1, 800d608 <_reclaim_reent+0x78>
 800d602:	4620      	mov	r0, r4
 800d604:	f000 f84e 	bl	800d6a4 <_free_r>
 800d608:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d60a:	b111      	cbz	r1, 800d612 <_reclaim_reent+0x82>
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 f849 	bl	800d6a4 <_free_r>
 800d612:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d614:	b111      	cbz	r1, 800d61c <_reclaim_reent+0x8c>
 800d616:	4620      	mov	r0, r4
 800d618:	f000 f844 	bl	800d6a4 <_free_r>
 800d61c:	6a23      	ldr	r3, [r4, #32]
 800d61e:	b14b      	cbz	r3, 800d634 <_reclaim_reent+0xa4>
 800d620:	4620      	mov	r0, r4
 800d622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d626:	4718      	bx	r3
 800d628:	680e      	ldr	r6, [r1, #0]
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 f83a 	bl	800d6a4 <_free_r>
 800d630:	4631      	mov	r1, r6
 800d632:	e7bb      	b.n	800d5ac <_reclaim_reent+0x1c>
 800d634:	bd70      	pop	{r4, r5, r6, pc}
 800d636:	bf00      	nop
 800d638:	24000014 	.word	0x24000014

0800d63c <__libc_init_array>:
 800d63c:	b570      	push	{r4, r5, r6, lr}
 800d63e:	4d0d      	ldr	r5, [pc, #52]	@ (800d674 <__libc_init_array+0x38>)
 800d640:	4c0d      	ldr	r4, [pc, #52]	@ (800d678 <__libc_init_array+0x3c>)
 800d642:	1b64      	subs	r4, r4, r5
 800d644:	10a4      	asrs	r4, r4, #2
 800d646:	2600      	movs	r6, #0
 800d648:	42a6      	cmp	r6, r4
 800d64a:	d109      	bne.n	800d660 <__libc_init_array+0x24>
 800d64c:	4d0b      	ldr	r5, [pc, #44]	@ (800d67c <__libc_init_array+0x40>)
 800d64e:	4c0c      	ldr	r4, [pc, #48]	@ (800d680 <__libc_init_array+0x44>)
 800d650:	f000 f87e 	bl	800d750 <_init>
 800d654:	1b64      	subs	r4, r4, r5
 800d656:	10a4      	asrs	r4, r4, #2
 800d658:	2600      	movs	r6, #0
 800d65a:	42a6      	cmp	r6, r4
 800d65c:	d105      	bne.n	800d66a <__libc_init_array+0x2e>
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	f855 3b04 	ldr.w	r3, [r5], #4
 800d664:	4798      	blx	r3
 800d666:	3601      	adds	r6, #1
 800d668:	e7ee      	b.n	800d648 <__libc_init_array+0xc>
 800d66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d66e:	4798      	blx	r3
 800d670:	3601      	adds	r6, #1
 800d672:	e7f2      	b.n	800d65a <__libc_init_array+0x1e>
 800d674:	0800d830 	.word	0x0800d830
 800d678:	0800d830 	.word	0x0800d830
 800d67c:	0800d830 	.word	0x0800d830
 800d680:	0800d834 	.word	0x0800d834

0800d684 <__retarget_lock_acquire_recursive>:
 800d684:	4770      	bx	lr

0800d686 <__retarget_lock_release_recursive>:
 800d686:	4770      	bx	lr

0800d688 <memcpy>:
 800d688:	440a      	add	r2, r1
 800d68a:	4291      	cmp	r1, r2
 800d68c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d690:	d100      	bne.n	800d694 <memcpy+0xc>
 800d692:	4770      	bx	lr
 800d694:	b510      	push	{r4, lr}
 800d696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d69e:	4291      	cmp	r1, r2
 800d6a0:	d1f9      	bne.n	800d696 <memcpy+0xe>
 800d6a2:	bd10      	pop	{r4, pc}

0800d6a4 <_free_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	d041      	beq.n	800d730 <_free_r+0x8c>
 800d6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b0:	1f0c      	subs	r4, r1, #4
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	bfb8      	it	lt
 800d6b6:	18e4      	addlt	r4, r4, r3
 800d6b8:	f000 f83e 	bl	800d738 <__malloc_lock>
 800d6bc:	4a1d      	ldr	r2, [pc, #116]	@ (800d734 <_free_r+0x90>)
 800d6be:	6813      	ldr	r3, [r2, #0]
 800d6c0:	b933      	cbnz	r3, 800d6d0 <_free_r+0x2c>
 800d6c2:	6063      	str	r3, [r4, #4]
 800d6c4:	6014      	str	r4, [r2, #0]
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6cc:	f000 b83a 	b.w	800d744 <__malloc_unlock>
 800d6d0:	42a3      	cmp	r3, r4
 800d6d2:	d908      	bls.n	800d6e6 <_free_r+0x42>
 800d6d4:	6820      	ldr	r0, [r4, #0]
 800d6d6:	1821      	adds	r1, r4, r0
 800d6d8:	428b      	cmp	r3, r1
 800d6da:	bf01      	itttt	eq
 800d6dc:	6819      	ldreq	r1, [r3, #0]
 800d6de:	685b      	ldreq	r3, [r3, #4]
 800d6e0:	1809      	addeq	r1, r1, r0
 800d6e2:	6021      	streq	r1, [r4, #0]
 800d6e4:	e7ed      	b.n	800d6c2 <_free_r+0x1e>
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	b10b      	cbz	r3, 800d6f0 <_free_r+0x4c>
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	d9fa      	bls.n	800d6e6 <_free_r+0x42>
 800d6f0:	6811      	ldr	r1, [r2, #0]
 800d6f2:	1850      	adds	r0, r2, r1
 800d6f4:	42a0      	cmp	r0, r4
 800d6f6:	d10b      	bne.n	800d710 <_free_r+0x6c>
 800d6f8:	6820      	ldr	r0, [r4, #0]
 800d6fa:	4401      	add	r1, r0
 800d6fc:	1850      	adds	r0, r2, r1
 800d6fe:	4283      	cmp	r3, r0
 800d700:	6011      	str	r1, [r2, #0]
 800d702:	d1e0      	bne.n	800d6c6 <_free_r+0x22>
 800d704:	6818      	ldr	r0, [r3, #0]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	6053      	str	r3, [r2, #4]
 800d70a:	4408      	add	r0, r1
 800d70c:	6010      	str	r0, [r2, #0]
 800d70e:	e7da      	b.n	800d6c6 <_free_r+0x22>
 800d710:	d902      	bls.n	800d718 <_free_r+0x74>
 800d712:	230c      	movs	r3, #12
 800d714:	602b      	str	r3, [r5, #0]
 800d716:	e7d6      	b.n	800d6c6 <_free_r+0x22>
 800d718:	6820      	ldr	r0, [r4, #0]
 800d71a:	1821      	adds	r1, r4, r0
 800d71c:	428b      	cmp	r3, r1
 800d71e:	bf04      	itt	eq
 800d720:	6819      	ldreq	r1, [r3, #0]
 800d722:	685b      	ldreq	r3, [r3, #4]
 800d724:	6063      	str	r3, [r4, #4]
 800d726:	bf04      	itt	eq
 800d728:	1809      	addeq	r1, r1, r0
 800d72a:	6021      	streq	r1, [r4, #0]
 800d72c:	6054      	str	r4, [r2, #4]
 800d72e:	e7ca      	b.n	800d6c6 <_free_r+0x22>
 800d730:	bd38      	pop	{r3, r4, r5, pc}
 800d732:	bf00      	nop
 800d734:	24004dec 	.word	0x24004dec

0800d738 <__malloc_lock>:
 800d738:	4801      	ldr	r0, [pc, #4]	@ (800d740 <__malloc_lock+0x8>)
 800d73a:	f7ff bfa3 	b.w	800d684 <__retarget_lock_acquire_recursive>
 800d73e:	bf00      	nop
 800d740:	24004de8 	.word	0x24004de8

0800d744 <__malloc_unlock>:
 800d744:	4801      	ldr	r0, [pc, #4]	@ (800d74c <__malloc_unlock+0x8>)
 800d746:	f7ff bf9e 	b.w	800d686 <__retarget_lock_release_recursive>
 800d74a:	bf00      	nop
 800d74c:	24004de8 	.word	0x24004de8

0800d750 <_init>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	bf00      	nop
 800d754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d756:	bc08      	pop	{r3}
 800d758:	469e      	mov	lr, r3
 800d75a:	4770      	bx	lr

0800d75c <_fini>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	bf00      	nop
 800d760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d762:	bc08      	pop	{r3}
 800d764:	469e      	mov	lr, r3
 800d766:	4770      	bx	lr
