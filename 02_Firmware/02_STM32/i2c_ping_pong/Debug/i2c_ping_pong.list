
i2c_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea98  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800ed48  0800ed48  0000fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee08  0800ee08  0000fe08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee10  0800ee10  0000fe10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ee14  0800ee14  0000fe14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ee18  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d8c  24000064  0800ee7c  00010064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004df0  0800ee7c  00010df0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027752  00000000  00000000  00010092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049e6  00000000  00000000  000377e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c98  00000000  00000000  0003c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164f  00000000  00000000  0003de68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033c37  00000000  00000000  0003f4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027488  00000000  00000000  000730ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ae14  00000000  00000000  0009a576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e538a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007be4  00000000  00000000  001e53d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001ecfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ed30 	.word	0x0800ed30

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800ed30 	.word	0x0800ed30

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fe81 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 fe98 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2106      	movs	r1, #6
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fe79 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 fe90 	bl	8001344 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <MX_FREERTOS_Init+0x18>)
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_FREERTOS_Init+0x1c>)
 8000662:	f00b f919 	bl	800b898 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <MX_FREERTOS_Init+0x20>)
 800066a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800eda4 	.word	0x0800eda4
 8000674:	0800067d 	.word	0x0800067d
 8000678:	24000080 	.word	0x24000080

0800067c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f00b f999 	bl	800b9bc <osDelay>
 800068a:	e7fb      	b.n	8000684 <StartDefaultTask+0x8>

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006a8:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 80006de:	2320      	movs	r3, #32
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x88>)
 80006f4:	f003 fd2c 	bl	8004150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	2017      	movs	r0, #23
 80006fe:	f000 fe07 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000702:	2017      	movs	r0, #23
 8000704:	f000 fe1e 	bl	8001344 <HAL_NVIC_EnableIRQ>

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58024400 	.word	0x58024400
 8000714:	58020400 	.word	0x58020400

08000718 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C1_Init+0x74>)
 800074e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_I2C1_Init+0x74>)
 8000756:	f003 fec5 	bl	80044e4 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa7c 	bl	8000c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_I2C1_Init+0x74>)
 8000768:	f005 ffe2 	bl	8006730 <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fa73 	bl	8000c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_I2C1_Init+0x74>)
 800077a:	f006 f824 	bl	80067c6 <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fa6a 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	24000084 	.word	0x24000084
 8000790:	40005400 	.word	0x40005400
 8000794:	20b0ccff 	.word	0x20b0ccff

08000798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0ba      	sub	sp, #232	@ 0xe8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	22c0      	movs	r2, #192	@ 0xc0
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00e f9d1 	bl	800eb60 <memset>
  if(i2cHandle->Instance==I2C1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a5c      	ldr	r2, [pc, #368]	@ (8000934 <HAL_I2C_MspInit+0x19c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f040 80b1 	bne.w	800092c <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ca:	f04f 0208 	mov.w	r2, #8
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 f877 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80007ec:	f000 fa36 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f6:	4a50      	ldr	r2, [pc, #320]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000800:	4b4d      	ldr	r3, [pc, #308]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000828:	2304      	movs	r3, #4
 800082a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000832:	4619      	mov	r1, r3
 8000834:	4841      	ldr	r0, [pc, #260]	@ (800093c <HAL_I2C_MspInit+0x1a4>)
 8000836:	f003 fc8b 	bl	8004150 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 800083c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000840:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000846:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 800084c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000858:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800085a:	4a3a      	ldr	r2, [pc, #232]	@ (8000944 <HAL_I2C_MspInit+0x1ac>)
 800085c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800085e:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000860:	2221      	movs	r2, #33	@ 0x21
 8000862:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000864:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800086a:	4b35      	ldr	r3, [pc, #212]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000870:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000876:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087e:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000896:	482a      	ldr	r0, [pc, #168]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000898:	f000 fd62 	bl	8001360 <HAL_DMA_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80008a2:	f000 f9db 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a25      	ldr	r2, [pc, #148]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ac:	4a24      	ldr	r2, [pc, #144]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80008b2:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008b4:	4a25      	ldr	r2, [pc, #148]	@ (800094c <HAL_I2C_MspInit+0x1b4>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80008b8:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008ba:	2222      	movs	r2, #34	@ 0x22
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008c0:	2240      	movs	r2, #64	@ 0x40
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008f0:	4815      	ldr	r0, [pc, #84]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008f2:	f000 fd35 	bl	8001360 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80008fc:	f000 f9ae 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
 8000906:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2106      	movs	r1, #6
 8000910:	201f      	movs	r0, #31
 8000912:	f000 fcfd 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000916:	201f      	movs	r0, #31
 8000918:	f000 fd14 	bl	8001344 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2106      	movs	r1, #6
 8000920:	2020      	movs	r0, #32
 8000922:	f000 fcf5 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000926:	2020      	movs	r0, #32
 8000928:	f000 fd0c 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	37e8      	adds	r7, #232	@ 0xe8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	58024400 	.word	0x58024400
 800093c:	58020400 	.word	0x58020400
 8000940:	240000d8 	.word	0x240000d8
 8000944:	40020010 	.word	0x40020010
 8000948:	24000150 	.word	0x24000150
 800094c:	40020028 	.word	0x40020028

08000950 <HAL_GPIO_EXTI_Callback>:
#define I2C_SLAVE_ADDRESS_ESP32					0x3C

static bool esp32I2cInitialised = false;
SemaphoreHandle_t i2c_semap;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	if(esp32I2cInitialised==false){
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <HAL_GPIO_EXTI_Callback+0x2c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	f083 0301 	eor.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <HAL_GPIO_EXTI_Callback+0x1e>
		esp32I2cInitialised=true;
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <HAL_GPIO_EXTI_Callback+0x2c>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
	}
	else{
		//
	}

}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	240001c8 	.word	0x240001c8

08000980 <taskSendFake>:
static TaskHandle_t taskHandle_taskSendFake;
static TaskHandle_t taskHandle_taskSend;
void taskSendFake(void *nothink){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000988:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <taskSendFake+0x74>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	4618      	mov	r0, r3
 8000992:	f00b fcdf 	bl	800c354 <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000996:	bf00      	nop
 8000998:	4817      	ldr	r0, [pc, #92]	@ (80009f8 <taskSendFake+0x78>)
 800099a:	f004 f830 	bl	80049fe <HAL_I2C_GetState>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d1f9      	bne.n	8000998 <taskSendFake+0x18>
		vTaskDelay(pdMS_TO_TICKS(35));
 80009a4:	2023      	movs	r0, #35	@ 0x23
 80009a6:	f00c f929 	bl	800cbfc <vTaskDelay>
		  //retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32, "Dawid", 6, 2000);
		  retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32, "Dawid", 6);
 80009aa:	2306      	movs	r3, #6
 80009ac:	4a13      	ldr	r2, [pc, #76]	@ (80009fc <taskSendFake+0x7c>)
 80009ae:	213c      	movs	r1, #60	@ 0x3c
 80009b0:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <taskSendFake+0x78>)
 80009b2:	f003 fe33 	bl	800461c <HAL_I2C_Master_Transmit_DMA>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "FAKE\r\n", 6, 200);
 80009ba:	23c8      	movs	r3, #200	@ 0xc8
 80009bc:	2206      	movs	r2, #6
 80009be:	4910      	ldr	r1, [pc, #64]	@ (8000a00 <taskSendFake+0x80>)
 80009c0:	4810      	ldr	r0, [pc, #64]	@ (8000a04 <taskSendFake+0x84>)
 80009c2:	f009 f885 	bl	8009ad0 <HAL_UART_Transmit>
		  vTaskDelay(pdMS_TO_TICKS(35));
 80009c6:	2023      	movs	r0, #35	@ 0x23
 80009c8:	f00c f918 	bl	800cbfc <vTaskDelay>
		  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 80009cc:	bf00      	nop
 80009ce:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <taskSendFake+0x78>)
 80009d0:	f004 f815 	bl	80049fe <HAL_I2C_GetState>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b20      	cmp	r3, #32
 80009d8:	d1f9      	bne.n	80009ce <taskSendFake+0x4e>
		  xSemaphoreGive(i2c_semap);
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <taskSendFake+0x74>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	f00b fa34 	bl	800be50 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(1200));
 80009e8:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80009ec:	f00c f906 	bl	800cbfc <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 80009f0:	e7ca      	b.n	8000988 <taskSendFake+0x8>
 80009f2:	bf00      	nop
 80009f4:	240001cc 	.word	0x240001cc
 80009f8:	24000084 	.word	0x24000084
 80009fc:	0800ed54 	.word	0x0800ed54
 8000a00:	0800ed5c 	.word	0x0800ed5c
 8000a04:	24000224 	.word	0x24000224

08000a08 <taskSend>:
		  }*/
	}
}


void taskSend(void *nothink){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <taskSend+0x74>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00b fc9b 	bl	800c354 <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000a1e:	bf00      	nop
 8000a20:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <taskSend+0x78>)
 8000a22:	f003 ffec 	bl	80049fe <HAL_I2C_GetState>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d1f9      	bne.n	8000a20 <taskSend+0x18>
		vTaskDelay(pdMS_TO_TICKS(35));
 8000a2c:	2023      	movs	r0, #35	@ 0x23
 8000a2e:	f00c f8e5 	bl	800cbfc <vTaskDelay>
		  //retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6, 2000);
		  retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6);
 8000a32:	2306      	movs	r3, #6
 8000a34:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <taskSend+0x7c>)
 8000a36:	2178      	movs	r1, #120	@ 0x78
 8000a38:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <taskSend+0x78>)
 8000a3a:	f003 fdef 	bl	800461c <HAL_I2C_Master_Transmit_DMA>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "Transmition1\r\n", 14, 200);
 8000a42:	23c8      	movs	r3, #200	@ 0xc8
 8000a44:	220e      	movs	r2, #14
 8000a46:	4910      	ldr	r1, [pc, #64]	@ (8000a88 <taskSend+0x80>)
 8000a48:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <taskSend+0x84>)
 8000a4a:	f009 f841 	bl	8009ad0 <HAL_UART_Transmit>
		  vTaskDelay(pdMS_TO_TICKS(35));
 8000a4e:	2023      	movs	r0, #35	@ 0x23
 8000a50:	f00c f8d4 	bl	800cbfc <vTaskDelay>
		  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000a54:	bf00      	nop
 8000a56:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <taskSend+0x78>)
 8000a58:	f003 ffd1 	bl	80049fe <HAL_I2C_GetState>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b20      	cmp	r3, #32
 8000a60:	d1f9      	bne.n	8000a56 <taskSend+0x4e>
		  xSemaphoreGive(i2c_semap);
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <taskSend+0x74>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f00b f9f0 	bl	800be50 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(500));
 8000a70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a74:	f00c f8c2 	bl	800cbfc <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000a78:	e7ca      	b.n	8000a10 <taskSend+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	240001cc 	.word	0x240001cc
 8000a80:	24000084 	.word	0x24000084
 8000a84:	0800ed54 	.word	0x0800ed54
 8000a88:	0800ed64 	.word	0x0800ed64
 8000a8c:	24000224 	.word	0x24000224

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a96:	f000 fb27 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f000 f857 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f7ff fdf5 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa2:	f7ff fd9d 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000aa6:	f000 fa37 	bl	8000f18 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000aaa:	f7ff fe35 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  while(esp32I2cInitialised!=true){
 8000aae:	e005      	b.n	8000abc <main+0x2c>
	  HAL_UART_Transmit(&huart1, "1\r\n", 3, 200);
 8000ab0:	23c8      	movs	r3, #200	@ 0xc8
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	491b      	ldr	r1, [pc, #108]	@ (8000b24 <main+0x94>)
 8000ab6:	481c      	ldr	r0, [pc, #112]	@ (8000b28 <main+0x98>)
 8000ab8:	f009 f80a 	bl	8009ad0 <HAL_UART_Transmit>
  while(esp32I2cInitialised!=true){
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <main+0x9c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f2      	bne.n	8000ab0 <main+0x20>
  }
  i2c_semap = xSemaphoreCreateBinary();
 8000aca:	2203      	movs	r2, #3
 8000acc:	2100      	movs	r1, #0
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f00b f95f 	bl	800bd92 <xQueueGenericCreate>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <main+0xa0>)
 8000ad8:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(i2c_semap);
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <main+0xa0>)
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f00b f9b4 	bl	800be50 <xQueueGenericSend>
  xTaskCreate(taskSend, "i2cSend", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSend);
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <main+0xa4>)
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	2305      	movs	r3, #5
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2300      	movs	r3, #0
 8000af2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000af6:	4910      	ldr	r1, [pc, #64]	@ (8000b38 <main+0xa8>)
 8000af8:	4810      	ldr	r0, [pc, #64]	@ (8000b3c <main+0xac>)
 8000afa:	f00b ff21 	bl	800c940 <xTaskCreate>
  xTaskCreate(taskSendFake, "i2cSendFake", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSendFake);
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <main+0xb0>)
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	2305      	movs	r3, #5
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000b0c:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <main+0xb4>)
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <main+0xb8>)
 8000b10:	f00b ff16 	bl	800c940 <xTaskCreate>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b14:	f00a fe76 	bl	800b804 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b18:	f7ff fd9e 	bl	8000658 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b1c:	f00a fe96 	bl	800b84c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <main+0x90>
 8000b24:	0800ed74 	.word	0x0800ed74
 8000b28:	24000224 	.word	0x24000224
 8000b2c:	240001c8 	.word	0x240001c8
 8000b30:	240001cc 	.word	0x240001cc
 8000b34:	240001d4 	.word	0x240001d4
 8000b38:	0800ed78 	.word	0x0800ed78
 8000b3c:	08000a09 	.word	0x08000a09
 8000b40:	240001d0 	.word	0x240001d0
 8000b44:	0800ed80 	.word	0x0800ed80
 8000b48:	08000981 	.word	0x08000981

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	@ 0x70
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	224c      	movs	r2, #76	@ 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00e f800 	bl	800eb60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2220      	movs	r2, #32
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00d fffa 	bl	800eb60 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <SystemClock_Config+0xe4>)
 8000b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b76:	2002      	movs	r0, #2
 8000b78:	f005 fe72 	bl	8006860 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <SystemClock_Config+0xe8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a2b      	ldr	r2, [pc, #172]	@ (8000c34 <SystemClock_Config+0xe8>)
 8000b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <SystemClock_Config+0xe8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b98:	bf00      	nop
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <SystemClock_Config+0xe8>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba6:	d1f8      	bne.n	8000b9a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000bb0:	2340      	movs	r3, #64	@ 0x40
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000bc0:	2323      	movs	r3, #35	@ 0x23
 8000bc2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 fe77 	bl	80068d4 <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000bec:	f000 f836 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	233f      	movs	r3, #63	@ 0x3f
 8000bf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c00:	2340      	movs	r3, #64	@ 0x40
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c04:	2340      	movs	r3, #64	@ 0x40
 8000c06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c0e:	2340      	movs	r3, #64	@ 0x40
 8000c10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2106      	movs	r1, #6
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 fa8e 	bl	8007138 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c22:	f000 f81b 	bl	8000c5c <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3770      	adds	r7, #112	@ 0x70
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58024800 	.word	0x58024800

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4a:	f000 fa89 	bl	8001160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010000 	.word	0x40010000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_MspInit+0x38>)
 8000c70:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_MspInit+0x38>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_MspInit+0x38>)
 8000c80:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f06f 0001 	mvn.w	r0, #1
 8000c94:	f000 fb3c 	bl	8001310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	58024400 	.word	0x58024400

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	@ 0x38
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d844      	bhi.n	8000d3c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f000 fb2a 	bl	8001310 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cbc:	2019      	movs	r0, #25
 8000cbe:	f000 fb41 	bl	8001344 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cc2:	4a24      	ldr	r2, [pc, #144]	@ (8000d54 <HAL_InitTick+0xb0>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <HAL_InitTick+0xb4>)
 8000cca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000cce:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <HAL_InitTick+0xb4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <HAL_InitTick+0xb4>)
 8000cda:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f006 fdad 	bl	8007850 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cf6:	f006 fd95 	bl	8007824 <HAL_RCC_GetPCLK2Freq>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d02:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <HAL_InitTick+0xb8>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	0c9b      	lsrs	r3, r3, #18
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <HAL_InitTick+0xc0>)
 8000d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d1c:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d20:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d2e:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d30:	f008 fbb0 	bl	8009494 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d107      	bne.n	8000d4a <HAL_InitTick+0xa6>
 8000d3a:	e001      	b.n	8000d40 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e005      	b.n	8000d4c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <HAL_InitTick+0xbc>)
 8000d42:	f008 fc09 	bl	8009558 <HAL_TIM_Base_Start_IT>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3738      	adds	r7, #56	@ 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	24000008 	.word	0x24000008
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	431bde83 	.word	0x431bde83
 8000d60:	240001d8 	.word	0x240001d8
 8000d64:	40010000 	.word	0x40010000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA1_Stream0_IRQHandler+0x10>)
 8000da6:	f001 fe37 	bl	8002a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	240000d8 	.word	0x240000d8

08000db4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <DMA1_Stream1_IRQHandler+0x10>)
 8000dba:	f001 fe2d 	bl	8002a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000150 	.word	0x24000150

08000dc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000dcc:	2020      	movs	r0, #32
 8000dce:	f003 fb6f 	bl	80044b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <TIM1_UP_IRQHandler+0x10>)
 8000dde:	f008 fc33 	bl	8009648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	240001d8 	.word	0x240001d8

08000dec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <I2C1_EV_IRQHandler+0x10>)
 8000df2:	f003 fd27 	bl	8004844 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000084 	.word	0x24000084

08000e00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <I2C1_ER_IRQHandler+0x10>)
 8000e06:	f003 fd37 	bl	8004878 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	24000084 	.word	0x24000084

08000e14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <USART1_IRQHandler+0x10>)
 8000e1a:	f008 fee7 	bl	8009bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000224 	.word	0x24000224

08000e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <SystemInit+0xd0>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e32:	4a31      	ldr	r2, [pc, #196]	@ (8000ef8 <SystemInit+0xd0>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <SystemInit+0xd4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d807      	bhi.n	8000e58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e48:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <SystemInit+0xd4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f023 030f 	bic.w	r3, r3, #15
 8000e50:	4a2a      	ldr	r2, [pc, #168]	@ (8000efc <SystemInit+0xd4>)
 8000e52:	f043 0303 	orr.w	r3, r3, #3
 8000e56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e58:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <SystemInit+0xd8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a28      	ldr	r2, [pc, #160]	@ (8000f00 <SystemInit+0xd8>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e64:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <SystemInit+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <SystemInit+0xd8>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4924      	ldr	r1, [pc, #144]	@ (8000f00 <SystemInit+0xd8>)
 8000e70:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <SystemInit+0xdc>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <SystemInit+0xd4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <SystemInit+0xd4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 030f 	bic.w	r3, r3, #15
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <SystemInit+0xd4>)
 8000e8c:	f043 0303 	orr.w	r3, r3, #3
 8000e90:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <SystemInit+0xd8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <SystemInit+0xd8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <SystemInit+0xd8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <SystemInit+0xd8>)
 8000ea6:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <SystemInit+0xe0>)
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <SystemInit+0xd8>)
 8000eac:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <SystemInit+0xe4>)
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <SystemInit+0xd8>)
 8000eb2:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <SystemInit+0xe8>)
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <SystemInit+0xd8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <SystemInit+0xd8>)
 8000ebe:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <SystemInit+0xe8>)
 8000ec0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <SystemInit+0xd8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <SystemInit+0xd8>)
 8000eca:	4a11      	ldr	r2, [pc, #68]	@ (8000f10 <SystemInit+0xe8>)
 8000ecc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <SystemInit+0xd8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <SystemInit+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <SystemInit+0xd8>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ede:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <SystemInit+0xd8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <SystemInit+0xec>)
 8000ee8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000eec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	52002000 	.word	0x52002000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f08:	02020200 	.word	0x02020200
 8000f0c:	01ff0000 	.word	0x01ff0000
 8000f10:	01010280 	.word	0x01010280
 8000f14:	52004000 	.word	0x52004000

08000f18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f1e:	4a23      	ldr	r2, [pc, #140]	@ (8000fac <MX_USART1_UART_Init+0x94>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f60:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f62:	f008 fd65 	bl	8009a30 <HAL_UART_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f7ff fe76 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f74:	f00a fb38 	bl	800b5e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f7ff fe6d 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4808      	ldr	r0, [pc, #32]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f86:	f00a fb6d 	bl	800b664 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f7ff fe64 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_USART1_UART_Init+0x90>)
 8000f96:	f00a faee 	bl	800b576 <HAL_UARTEx_DisableFifoMode>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f7ff fe5c 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	24000224 	.word	0x24000224
 8000fac:	40011000 	.word	0x40011000

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	22c0      	movs	r2, #192	@ 0xc0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00d fdc5 	bl	800eb60 <memset>
  if(uartHandle->Instance==USART1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2b      	ldr	r2, [pc, #172]	@ (8001088 <HAL_UART_MspInit+0xd8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d14e      	bne.n	800107e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe0:	f04f 0201 	mov.w	r2, #1
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fc6c 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001002:	f7ff fe2b 	bl	8000c5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001008:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800100c:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <HAL_UART_MspInit+0xdc>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001018:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001026:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800102a:	4a18      	ldr	r2, [pc, #96]	@ (800108c <HAL_UART_MspInit+0xdc>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_UART_MspInit+0xdc>)
 8001036:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8001042:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800105c:	2304      	movs	r3, #4
 800105e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001066:	4619      	mov	r1, r3
 8001068:	4809      	ldr	r0, [pc, #36]	@ (8001090 <HAL_UART_MspInit+0xe0>)
 800106a:	f003 f871 	bl	8004150 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2107      	movs	r1, #7
 8001072:	2025      	movs	r0, #37	@ 0x25
 8001074:	f000 f94c 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001078:	2025      	movs	r0, #37	@ 0x25
 800107a:	f000 f963 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	37e8      	adds	r7, #232	@ 0xe8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40011000 	.word	0x40011000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001098:	f7ff fec6 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f00d fdab 	bl	800ec1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fce3 	bl	8000a90 <main>
  bx  lr
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80010d8:	0800ee18 	.word	0x0800ee18
  ldr r2, =_sbss
 80010dc:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80010e0:	24004df0 	.word	0x24004df0

080010e4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 f903 	bl	80012fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010f4:	f006 f9d6 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_Init+0x68>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	4913      	ldr	r1, [pc, #76]	@ (8001154 <HAL_Init+0x6c>)
 8001106:	5ccb      	ldrb	r3, [r1, r3]
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_Init+0x68>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_Init+0x6c>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_Init+0x70>)
 800112a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <HAL_Init+0x74>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	200f      	movs	r0, #15
 8001134:	f7ff fdb6 	bl	8000ca4 <HAL_InitTick>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e002      	b.n	8001148 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001142:	f7ff fd91 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024400 	.word	0x58024400
 8001154:	0800edc8 	.word	0x0800edc8
 8001158:	24000004 	.word	0x24000004
 800115c:	24000000 	.word	0x24000000

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2400000c 	.word	0x2400000c
 8001184:	240002b8 	.word	0x240002b8

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	240002b8 	.word	0x240002b8

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x40>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	05fa0000 	.word	0x05fa0000

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff4c 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131e:	f7ff ff63 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001322:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff ffb3 	bl	8001294 <NVIC_EncodePriority>
 800132e:	4602      	mov	r2, r0
 8001330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff82 	bl	8001240 <__NVIC_SetPriority>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff56 	bl	8001204 <__NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ff0e 	bl	8001188 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e37d      	b.n	8001a74 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a66      	ldr	r2, [pc, #408]	@ (8001518 <HAL_DMA_Init+0x1b8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d04a      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a65      	ldr	r2, [pc, #404]	@ (800151c <HAL_DMA_Init+0x1bc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d045      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a63      	ldr	r2, [pc, #396]	@ (8001520 <HAL_DMA_Init+0x1c0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d040      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a62      	ldr	r2, [pc, #392]	@ (8001524 <HAL_DMA_Init+0x1c4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d03b      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a60      	ldr	r2, [pc, #384]	@ (8001528 <HAL_DMA_Init+0x1c8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d036      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a5f      	ldr	r2, [pc, #380]	@ (800152c <HAL_DMA_Init+0x1cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d031      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001530 <HAL_DMA_Init+0x1d0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d02c      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001534 <HAL_DMA_Init+0x1d4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d027      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001538 <HAL_DMA_Init+0x1d8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d022      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a59      	ldr	r2, [pc, #356]	@ (800153c <HAL_DMA_Init+0x1dc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d01d      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a57      	ldr	r2, [pc, #348]	@ (8001540 <HAL_DMA_Init+0x1e0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d018      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a56      	ldr	r2, [pc, #344]	@ (8001544 <HAL_DMA_Init+0x1e4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d013      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a54      	ldr	r2, [pc, #336]	@ (8001548 <HAL_DMA_Init+0x1e8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00e      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a53      	ldr	r2, [pc, #332]	@ (800154c <HAL_DMA_Init+0x1ec>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d009      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a51      	ldr	r2, [pc, #324]	@ (8001550 <HAL_DMA_Init+0x1f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d004      	beq.n	8001418 <HAL_DMA_Init+0xb8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a50      	ldr	r2, [pc, #320]	@ (8001554 <HAL_DMA_Init+0x1f4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_DMA_Init+0xbc>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_DMA_Init+0xbe>
 800141c:	2300      	movs	r3, #0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 813c 	beq.w	800169c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a37      	ldr	r2, [pc, #220]	@ (8001518 <HAL_DMA_Init+0x1b8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d04a      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a36      	ldr	r2, [pc, #216]	@ (800151c <HAL_DMA_Init+0x1bc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d045      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a34      	ldr	r2, [pc, #208]	@ (8001520 <HAL_DMA_Init+0x1c0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d040      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a33      	ldr	r2, [pc, #204]	@ (8001524 <HAL_DMA_Init+0x1c4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d03b      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a31      	ldr	r2, [pc, #196]	@ (8001528 <HAL_DMA_Init+0x1c8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d036      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a30      	ldr	r2, [pc, #192]	@ (800152c <HAL_DMA_Init+0x1cc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d031      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2e      	ldr	r2, [pc, #184]	@ (8001530 <HAL_DMA_Init+0x1d0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02c      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a2d      	ldr	r2, [pc, #180]	@ (8001534 <HAL_DMA_Init+0x1d4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d027      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2b      	ldr	r2, [pc, #172]	@ (8001538 <HAL_DMA_Init+0x1d8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d022      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <HAL_DMA_Init+0x1dc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d01d      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <HAL_DMA_Init+0x1e0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d018      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a27      	ldr	r2, [pc, #156]	@ (8001544 <HAL_DMA_Init+0x1e4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d013      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a25      	ldr	r2, [pc, #148]	@ (8001548 <HAL_DMA_Init+0x1e8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00e      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a24      	ldr	r2, [pc, #144]	@ (800154c <HAL_DMA_Init+0x1ec>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d009      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a22      	ldr	r2, [pc, #136]	@ (8001550 <HAL_DMA_Init+0x1f0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d004      	beq.n	80014d4 <HAL_DMA_Init+0x174>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <HAL_DMA_Init+0x1f4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d108      	bne.n	80014e6 <HAL_DMA_Init+0x186>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e007      	b.n	80014f6 <HAL_DMA_Init+0x196>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014f6:	e02f      	b.n	8001558 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f8:	f7ff fe46 	bl	8001188 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b05      	cmp	r3, #5
 8001504:	d928      	bls.n	8001558 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2220      	movs	r2, #32
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e2ad      	b.n	8001a74 <HAL_DMA_Init+0x714>
 8001518:	40020010 	.word	0x40020010
 800151c:	40020028 	.word	0x40020028
 8001520:	40020040 	.word	0x40020040
 8001524:	40020058 	.word	0x40020058
 8001528:	40020070 	.word	0x40020070
 800152c:	40020088 	.word	0x40020088
 8001530:	400200a0 	.word	0x400200a0
 8001534:	400200b8 	.word	0x400200b8
 8001538:	40020410 	.word	0x40020410
 800153c:	40020428 	.word	0x40020428
 8001540:	40020440 	.word	0x40020440
 8001544:	40020458 	.word	0x40020458
 8001548:	40020470 	.word	0x40020470
 800154c:	40020488 	.word	0x40020488
 8001550:	400204a0 	.word	0x400204a0
 8001554:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1c8      	bne.n	80014f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4b73      	ldr	r3, [pc, #460]	@ (8001740 <HAL_DMA_Init+0x3e0>)
 8001572:	4013      	ands	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800157e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001596:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	4313      	orrs	r3, r2
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b28      	cmp	r3, #40	@ 0x28
 80015c2:	d903      	bls.n	80015cc <HAL_DMA_Init+0x26c>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80015ca:	d91f      	bls.n	800160c <HAL_DMA_Init+0x2ac>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80015d2:	d903      	bls.n	80015dc <HAL_DMA_Init+0x27c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b42      	cmp	r3, #66	@ 0x42
 80015da:	d917      	bls.n	800160c <HAL_DMA_Init+0x2ac>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b46      	cmp	r3, #70	@ 0x46
 80015e2:	d903      	bls.n	80015ec <HAL_DMA_Init+0x28c>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b48      	cmp	r3, #72	@ 0x48
 80015ea:	d90f      	bls.n	800160c <HAL_DMA_Init+0x2ac>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80015f2:	d903      	bls.n	80015fc <HAL_DMA_Init+0x29c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b52      	cmp	r3, #82	@ 0x52
 80015fa:	d907      	bls.n	800160c <HAL_DMA_Init+0x2ac>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b73      	cmp	r3, #115	@ 0x73
 8001602:	d905      	bls.n	8001610 <HAL_DMA_Init+0x2b0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b77      	cmp	r3, #119	@ 0x77
 800160a:	d801      	bhi.n	8001610 <HAL_DMA_Init+0x2b0>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_DMA_Init+0x2b2>
 8001610:	2300      	movs	r3, #0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800161c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f023 0307 	bic.w	r3, r3, #7
 8001634:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	2b04      	cmp	r3, #4
 8001646:	d117      	bne.n	8001678 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00e      	beq.n	8001678 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f002 fbee 	bl	8003e3c <DMA_CheckFifoParam>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2240      	movs	r2, #64	@ 0x40
 800166a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e1fd      	b.n	8001a74 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f002 fb29 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 8001686:	4603      	mov	r3, r0
 8001688:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	223f      	movs	r2, #63	@ 0x3f
 8001694:	409a      	lsls	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	e0fd      	b.n	8001898 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <HAL_DMA_Init+0x3e4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d04a      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <HAL_DMA_Init+0x3e8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d045      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a25      	ldr	r2, [pc, #148]	@ (800174c <HAL_DMA_Init+0x3ec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d040      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a24      	ldr	r2, [pc, #144]	@ (8001750 <HAL_DMA_Init+0x3f0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d03b      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <HAL_DMA_Init+0x3f4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d036      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <HAL_DMA_Init+0x3f8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d031      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <HAL_DMA_Init+0x3fc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d02c      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_DMA_Init+0x400>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d027      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <HAL_DMA_Init+0x404>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d022      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001768 <HAL_DMA_Init+0x408>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d01d      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_DMA_Init+0x40c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d018      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a18      	ldr	r2, [pc, #96]	@ (8001770 <HAL_DMA_Init+0x410>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a16      	ldr	r2, [pc, #88]	@ (8001774 <HAL_DMA_Init+0x414>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00e      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <HAL_DMA_Init+0x418>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d009      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a13      	ldr	r2, [pc, #76]	@ (800177c <HAL_DMA_Init+0x41c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d004      	beq.n	800173c <HAL_DMA_Init+0x3dc>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a12      	ldr	r2, [pc, #72]	@ (8001780 <HAL_DMA_Init+0x420>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d123      	bne.n	8001784 <HAL_DMA_Init+0x424>
 800173c:	2301      	movs	r3, #1
 800173e:	e022      	b.n	8001786 <HAL_DMA_Init+0x426>
 8001740:	fe10803f 	.word	0xfe10803f
 8001744:	48022c08 	.word	0x48022c08
 8001748:	48022c1c 	.word	0x48022c1c
 800174c:	48022c30 	.word	0x48022c30
 8001750:	48022c44 	.word	0x48022c44
 8001754:	48022c58 	.word	0x48022c58
 8001758:	48022c6c 	.word	0x48022c6c
 800175c:	48022c80 	.word	0x48022c80
 8001760:	48022c94 	.word	0x48022c94
 8001764:	58025408 	.word	0x58025408
 8001768:	5802541c 	.word	0x5802541c
 800176c:	58025430 	.word	0x58025430
 8001770:	58025444 	.word	0x58025444
 8001774:	58025458 	.word	0x58025458
 8001778:	5802546c 	.word	0x5802546c
 800177c:	58025480 	.word	0x58025480
 8001780:	58025494 	.word	0x58025494
 8001784:	2300      	movs	r3, #0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d07d      	beq.n	8001886 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a7f      	ldr	r2, [pc, #508]	@ (800198c <HAL_DMA_Init+0x62c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d021      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7d      	ldr	r2, [pc, #500]	@ (8001990 <HAL_DMA_Init+0x630>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01c      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001994 <HAL_DMA_Init+0x634>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d017      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a7a      	ldr	r2, [pc, #488]	@ (8001998 <HAL_DMA_Init+0x638>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d012      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a79      	ldr	r2, [pc, #484]	@ (800199c <HAL_DMA_Init+0x63c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a77      	ldr	r2, [pc, #476]	@ (80019a0 <HAL_DMA_Init+0x640>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d008      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a76      	ldr	r2, [pc, #472]	@ (80019a4 <HAL_DMA_Init+0x644>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d003      	beq.n	80017d8 <HAL_DMA_Init+0x478>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a74      	ldr	r2, [pc, #464]	@ (80019a8 <HAL_DMA_Init+0x648>)
 80017d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	4b6e      	ldr	r3, [pc, #440]	@ (80019ac <HAL_DMA_Init+0x64c>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b40      	cmp	r3, #64	@ 0x40
 80017fe:	d008      	beq.n	8001812 <HAL_DMA_Init+0x4b2>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b80      	cmp	r3, #128	@ 0x80
 8001806:	d102      	bne.n	800180e <HAL_DMA_Init+0x4ae>
 8001808:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800180c:	e002      	b.n	8001814 <HAL_DMA_Init+0x4b4>
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_DMA_Init+0x4b4>
 8001812:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68d2      	ldr	r2, [r2, #12]
 8001818:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800181a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001822:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800182a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001832:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800183a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001842:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4313      	orrs	r3, r2
 8001848:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	4b55      	ldr	r3, [pc, #340]	@ (80019b0 <HAL_DMA_Init+0x650>)
 800185a:	4413      	add	r3, r2
 800185c:	4a55      	ldr	r2, [pc, #340]	@ (80019b4 <HAL_DMA_Init+0x654>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	009a      	lsls	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f002 fa34 	bl	8003cd8 <DMA_CalcBaseAndBitshift>
 8001870:	4603      	mov	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	e008      	b.n	8001898 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2240      	movs	r2, #64	@ 0x40
 800188a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0ed      	b.n	8001a74 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a46      	ldr	r2, [pc, #280]	@ (80019b8 <HAL_DMA_Init+0x658>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d072      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a45      	ldr	r2, [pc, #276]	@ (80019bc <HAL_DMA_Init+0x65c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d06d      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a43      	ldr	r2, [pc, #268]	@ (80019c0 <HAL_DMA_Init+0x660>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d068      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a42      	ldr	r2, [pc, #264]	@ (80019c4 <HAL_DMA_Init+0x664>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d063      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a40      	ldr	r2, [pc, #256]	@ (80019c8 <HAL_DMA_Init+0x668>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d05e      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a3f      	ldr	r2, [pc, #252]	@ (80019cc <HAL_DMA_Init+0x66c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d059      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a3d      	ldr	r2, [pc, #244]	@ (80019d0 <HAL_DMA_Init+0x670>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d054      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_DMA_Init+0x674>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04f      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3a      	ldr	r2, [pc, #232]	@ (80019d8 <HAL_DMA_Init+0x678>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d04a      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a39      	ldr	r2, [pc, #228]	@ (80019dc <HAL_DMA_Init+0x67c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d045      	beq.n	8001988 <HAL_DMA_Init+0x628>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a37      	ldr	r2, [pc, #220]	@ (80019e0 <HAL_DMA_Init+0x680>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d040      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <HAL_DMA_Init+0x684>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d03b      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a34      	ldr	r2, [pc, #208]	@ (80019e8 <HAL_DMA_Init+0x688>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d036      	beq.n	8001988 <HAL_DMA_Init+0x628>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a33      	ldr	r2, [pc, #204]	@ (80019ec <HAL_DMA_Init+0x68c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d031      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a31      	ldr	r2, [pc, #196]	@ (80019f0 <HAL_DMA_Init+0x690>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02c      	beq.n	8001988 <HAL_DMA_Init+0x628>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_DMA_Init+0x694>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d027      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a13      	ldr	r2, [pc, #76]	@ (800198c <HAL_DMA_Init+0x62c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d022      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <HAL_DMA_Init+0x630>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d01d      	beq.n	8001988 <HAL_DMA_Init+0x628>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_DMA_Init+0x634>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d018      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <HAL_DMA_Init+0x638>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d013      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <HAL_DMA_Init+0x63c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00e      	beq.n	8001988 <HAL_DMA_Init+0x628>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_DMA_Init+0x640>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d009      	beq.n	8001988 <HAL_DMA_Init+0x628>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_DMA_Init+0x644>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d004      	beq.n	8001988 <HAL_DMA_Init+0x628>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <HAL_DMA_Init+0x648>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d137      	bne.n	80019f8 <HAL_DMA_Init+0x698>
 8001988:	2301      	movs	r3, #1
 800198a:	e036      	b.n	80019fa <HAL_DMA_Init+0x69a>
 800198c:	58025408 	.word	0x58025408
 8001990:	5802541c 	.word	0x5802541c
 8001994:	58025430 	.word	0x58025430
 8001998:	58025444 	.word	0x58025444
 800199c:	58025458 	.word	0x58025458
 80019a0:	5802546c 	.word	0x5802546c
 80019a4:	58025480 	.word	0x58025480
 80019a8:	58025494 	.word	0x58025494
 80019ac:	fffe000f 	.word	0xfffe000f
 80019b0:	a7fdabf8 	.word	0xa7fdabf8
 80019b4:	cccccccd 	.word	0xcccccccd
 80019b8:	40020010 	.word	0x40020010
 80019bc:	40020028 	.word	0x40020028
 80019c0:	40020040 	.word	0x40020040
 80019c4:	40020058 	.word	0x40020058
 80019c8:	40020070 	.word	0x40020070
 80019cc:	40020088 	.word	0x40020088
 80019d0:	400200a0 	.word	0x400200a0
 80019d4:	400200b8 	.word	0x400200b8
 80019d8:	40020410 	.word	0x40020410
 80019dc:	40020428 	.word	0x40020428
 80019e0:	40020440 	.word	0x40020440
 80019e4:	40020458 	.word	0x40020458
 80019e8:	40020470 	.word	0x40020470
 80019ec:	40020488 	.word	0x40020488
 80019f0:	400204a0 	.word	0x400204a0
 80019f4:	400204b8 	.word	0x400204b8
 80019f8:	2300      	movs	r3, #0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d032      	beq.n	8001a64 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f002 fa98 	bl	8003f34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b80      	cmp	r3, #128	@ 0x80
 8001a0a:	d102      	bne.n	8001a12 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a26:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_DMA_Init+0x6f2>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d80c      	bhi.n	8001a52 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f002 fb15 	bl	8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	e008      	b.n	8001a64 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e226      	b.n	8001ee6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_DMA_Start_IT+0x2a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e21f      	b.n	8001ee6 <HAL_DMA_Start_IT+0x46a>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	f040 820a 	bne.w	8001ed0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a68      	ldr	r2, [pc, #416]	@ (8001c70 <HAL_DMA_Start_IT+0x1f4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04a      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a66      	ldr	r2, [pc, #408]	@ (8001c74 <HAL_DMA_Start_IT+0x1f8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d045      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a65      	ldr	r2, [pc, #404]	@ (8001c78 <HAL_DMA_Start_IT+0x1fc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d040      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a63      	ldr	r2, [pc, #396]	@ (8001c7c <HAL_DMA_Start_IT+0x200>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d03b      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a62      	ldr	r2, [pc, #392]	@ (8001c80 <HAL_DMA_Start_IT+0x204>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d036      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a60      	ldr	r2, [pc, #384]	@ (8001c84 <HAL_DMA_Start_IT+0x208>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d031      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001c88 <HAL_DMA_Start_IT+0x20c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d02c      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a5d      	ldr	r2, [pc, #372]	@ (8001c8c <HAL_DMA_Start_IT+0x210>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d027      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c90 <HAL_DMA_Start_IT+0x214>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d022      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5a      	ldr	r2, [pc, #360]	@ (8001c94 <HAL_DMA_Start_IT+0x218>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01d      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a59      	ldr	r2, [pc, #356]	@ (8001c98 <HAL_DMA_Start_IT+0x21c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a57      	ldr	r2, [pc, #348]	@ (8001c9c <HAL_DMA_Start_IT+0x220>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a56      	ldr	r2, [pc, #344]	@ (8001ca0 <HAL_DMA_Start_IT+0x224>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a54      	ldr	r2, [pc, #336]	@ (8001ca4 <HAL_DMA_Start_IT+0x228>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d009      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ca8 <HAL_DMA_Start_IT+0x22c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d004      	beq.n	8001b6a <HAL_DMA_Start_IT+0xee>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a51      	ldr	r2, [pc, #324]	@ (8001cac <HAL_DMA_Start_IT+0x230>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d108      	bne.n	8001b7c <HAL_DMA_Start_IT+0x100>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e007      	b.n	8001b8c <HAL_DMA_Start_IT+0x110>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f001 febc 	bl	8003910 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a34      	ldr	r2, [pc, #208]	@ (8001c70 <HAL_DMA_Start_IT+0x1f4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04a      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	@ (8001c74 <HAL_DMA_Start_IT+0x1f8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d045      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a31      	ldr	r2, [pc, #196]	@ (8001c78 <HAL_DMA_Start_IT+0x1fc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d040      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a30      	ldr	r2, [pc, #192]	@ (8001c7c <HAL_DMA_Start_IT+0x200>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d03b      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001c80 <HAL_DMA_Start_IT+0x204>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d036      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2d      	ldr	r2, [pc, #180]	@ (8001c84 <HAL_DMA_Start_IT+0x208>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d031      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c88 <HAL_DMA_Start_IT+0x20c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02c      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c8c <HAL_DMA_Start_IT+0x210>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d027      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a28      	ldr	r2, [pc, #160]	@ (8001c90 <HAL_DMA_Start_IT+0x214>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d022      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a27      	ldr	r2, [pc, #156]	@ (8001c94 <HAL_DMA_Start_IT+0x218>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01d      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a25      	ldr	r2, [pc, #148]	@ (8001c98 <HAL_DMA_Start_IT+0x21c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d018      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a24      	ldr	r2, [pc, #144]	@ (8001c9c <HAL_DMA_Start_IT+0x220>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <HAL_DMA_Start_IT+0x224>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00e      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ca4 <HAL_DMA_Start_IT+0x228>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca8 <HAL_DMA_Start_IT+0x22c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_DMA_Start_IT+0x1bc>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	@ (8001cac <HAL_DMA_Start_IT+0x230>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA_Start_IT+0x1c0>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_DMA_Start_IT+0x1c2>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d036      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 021e 	bic.w	r2, r3, #30
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0216 	orr.w	r2, r2, #22
 8001c54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03e      	beq.n	8001cdc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0208 	orr.w	r2, r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e035      	b.n	8001cdc <HAL_DMA_Start_IT+0x260>
 8001c70:	40020010 	.word	0x40020010
 8001c74:	40020028 	.word	0x40020028
 8001c78:	40020040 	.word	0x40020040
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	40020070 	.word	0x40020070
 8001c84:	40020088 	.word	0x40020088
 8001c88:	400200a0 	.word	0x400200a0
 8001c8c:	400200b8 	.word	0x400200b8
 8001c90:	40020410 	.word	0x40020410
 8001c94:	40020428 	.word	0x40020428
 8001c98:	40020440 	.word	0x40020440
 8001c9c:	40020458 	.word	0x40020458
 8001ca0:	40020470 	.word	0x40020470
 8001ca4:	40020488 	.word	0x40020488
 8001ca8:	400204a0 	.word	0x400204a0
 8001cac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 020e 	bic.w	r2, r3, #14
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 020a 	orr.w	r2, r2, #10
 8001cc2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0204 	orr.w	r2, r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a83      	ldr	r2, [pc, #524]	@ (8001ef0 <HAL_DMA_Start_IT+0x474>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d072      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a82      	ldr	r2, [pc, #520]	@ (8001ef4 <HAL_DMA_Start_IT+0x478>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d06d      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a80      	ldr	r2, [pc, #512]	@ (8001ef8 <HAL_DMA_Start_IT+0x47c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d068      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001efc <HAL_DMA_Start_IT+0x480>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d063      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7d      	ldr	r2, [pc, #500]	@ (8001f00 <HAL_DMA_Start_IT+0x484>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d05e      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <HAL_DMA_Start_IT+0x488>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d059      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7a      	ldr	r2, [pc, #488]	@ (8001f08 <HAL_DMA_Start_IT+0x48c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d054      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a79      	ldr	r2, [pc, #484]	@ (8001f0c <HAL_DMA_Start_IT+0x490>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d04f      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a77      	ldr	r2, [pc, #476]	@ (8001f10 <HAL_DMA_Start_IT+0x494>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d04a      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a76      	ldr	r2, [pc, #472]	@ (8001f14 <HAL_DMA_Start_IT+0x498>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d045      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a74      	ldr	r2, [pc, #464]	@ (8001f18 <HAL_DMA_Start_IT+0x49c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d040      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a73      	ldr	r2, [pc, #460]	@ (8001f1c <HAL_DMA_Start_IT+0x4a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d03b      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a71      	ldr	r2, [pc, #452]	@ (8001f20 <HAL_DMA_Start_IT+0x4a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d036      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a70      	ldr	r2, [pc, #448]	@ (8001f24 <HAL_DMA_Start_IT+0x4a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d031      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_DMA_Start_IT+0x4ac>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02c      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6d      	ldr	r2, [pc, #436]	@ (8001f2c <HAL_DMA_Start_IT+0x4b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d027      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6b      	ldr	r2, [pc, #428]	@ (8001f30 <HAL_DMA_Start_IT+0x4b4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d022      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6a      	ldr	r2, [pc, #424]	@ (8001f34 <HAL_DMA_Start_IT+0x4b8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d01d      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a68      	ldr	r2, [pc, #416]	@ (8001f38 <HAL_DMA_Start_IT+0x4bc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a67      	ldr	r2, [pc, #412]	@ (8001f3c <HAL_DMA_Start_IT+0x4c0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a65      	ldr	r2, [pc, #404]	@ (8001f40 <HAL_DMA_Start_IT+0x4c4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a64      	ldr	r2, [pc, #400]	@ (8001f44 <HAL_DMA_Start_IT+0x4c8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a62      	ldr	r2, [pc, #392]	@ (8001f48 <HAL_DMA_Start_IT+0x4cc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_DMA_Start_IT+0x350>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a61      	ldr	r2, [pc, #388]	@ (8001f4c <HAL_DMA_Start_IT+0x4d0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_DMA_Start_IT+0x354>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_DMA_Start_IT+0x356>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01a      	beq.n	8001e0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a37      	ldr	r2, [pc, #220]	@ (8001ef0 <HAL_DMA_Start_IT+0x474>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d04a      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a36      	ldr	r2, [pc, #216]	@ (8001ef4 <HAL_DMA_Start_IT+0x478>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d045      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a34      	ldr	r2, [pc, #208]	@ (8001ef8 <HAL_DMA_Start_IT+0x47c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d040      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a33      	ldr	r2, [pc, #204]	@ (8001efc <HAL_DMA_Start_IT+0x480>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d03b      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a31      	ldr	r2, [pc, #196]	@ (8001f00 <HAL_DMA_Start_IT+0x484>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d036      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a30      	ldr	r2, [pc, #192]	@ (8001f04 <HAL_DMA_Start_IT+0x488>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d031      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f08 <HAL_DMA_Start_IT+0x48c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02c      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <HAL_DMA_Start_IT+0x490>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d027      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2b      	ldr	r2, [pc, #172]	@ (8001f10 <HAL_DMA_Start_IT+0x494>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f14 <HAL_DMA_Start_IT+0x498>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d01d      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a28      	ldr	r2, [pc, #160]	@ (8001f18 <HAL_DMA_Start_IT+0x49c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a27      	ldr	r2, [pc, #156]	@ (8001f1c <HAL_DMA_Start_IT+0x4a0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a25      	ldr	r2, [pc, #148]	@ (8001f20 <HAL_DMA_Start_IT+0x4a4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a24      	ldr	r2, [pc, #144]	@ (8001f24 <HAL_DMA_Start_IT+0x4a8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a22      	ldr	r2, [pc, #136]	@ (8001f28 <HAL_DMA_Start_IT+0x4ac>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_DMA_Start_IT+0x430>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a21      	ldr	r2, [pc, #132]	@ (8001f2c <HAL_DMA_Start_IT+0x4b0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d108      	bne.n	8001ebe <HAL_DMA_Start_IT+0x442>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e012      	b.n	8001ee4 <HAL_DMA_Start_IT+0x468>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e009      	b.n	8001ee4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ed6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020010 	.word	0x40020010
 8001ef4:	40020028 	.word	0x40020028
 8001ef8:	40020040 	.word	0x40020040
 8001efc:	40020058 	.word	0x40020058
 8001f00:	40020070 	.word	0x40020070
 8001f04:	40020088 	.word	0x40020088
 8001f08:	400200a0 	.word	0x400200a0
 8001f0c:	400200b8 	.word	0x400200b8
 8001f10:	40020410 	.word	0x40020410
 8001f14:	40020428 	.word	0x40020428
 8001f18:	40020440 	.word	0x40020440
 8001f1c:	40020458 	.word	0x40020458
 8001f20:	40020470 	.word	0x40020470
 8001f24:	40020488 	.word	0x40020488
 8001f28:	400204a0 	.word	0x400204a0
 8001f2c:	400204b8 	.word	0x400204b8
 8001f30:	58025408 	.word	0x58025408
 8001f34:	5802541c 	.word	0x5802541c
 8001f38:	58025430 	.word	0x58025430
 8001f3c:	58025444 	.word	0x58025444
 8001f40:	58025458 	.word	0x58025458
 8001f44:	5802546c 	.word	0x5802546c
 8001f48:	58025480 	.word	0x58025480
 8001f4c:	58025494 	.word	0x58025494

08001f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff f916 	bl	8001188 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2dc      	b.n	8002522 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2280      	movs	r2, #128	@ 0x80
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e2cd      	b.n	8002522 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a76      	ldr	r2, [pc, #472]	@ (8002164 <HAL_DMA_Abort+0x214>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a74      	ldr	r2, [pc, #464]	@ (8002168 <HAL_DMA_Abort+0x218>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	@ (800216c <HAL_DMA_Abort+0x21c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a71      	ldr	r2, [pc, #452]	@ (8002170 <HAL_DMA_Abort+0x220>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a70      	ldr	r2, [pc, #448]	@ (8002174 <HAL_DMA_Abort+0x224>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002178 <HAL_DMA_Abort+0x228>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6d      	ldr	r2, [pc, #436]	@ (800217c <HAL_DMA_Abort+0x22c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002180 <HAL_DMA_Abort+0x230>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_DMA_Abort+0x234>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	@ (8002188 <HAL_DMA_Abort+0x238>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a67      	ldr	r2, [pc, #412]	@ (800218c <HAL_DMA_Abort+0x23c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a65      	ldr	r2, [pc, #404]	@ (8002190 <HAL_DMA_Abort+0x240>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a64      	ldr	r2, [pc, #400]	@ (8002194 <HAL_DMA_Abort+0x244>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a62      	ldr	r2, [pc, #392]	@ (8002198 <HAL_DMA_Abort+0x248>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a61      	ldr	r2, [pc, #388]	@ (800219c <HAL_DMA_Abort+0x24c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5f      	ldr	r2, [pc, #380]	@ (80021a0 <HAL_DMA_Abort+0x250>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_DMA_Abort+0xda>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_DMA_Abort+0xdc>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 021e 	bic.w	r2, r2, #30
 800203e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800204e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e00a      	b.n	800206e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020e 	bic.w	r2, r2, #14
 8002066:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a3c      	ldr	r2, [pc, #240]	@ (8002164 <HAL_DMA_Abort+0x214>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d072      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3a      	ldr	r2, [pc, #232]	@ (8002168 <HAL_DMA_Abort+0x218>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d06d      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a39      	ldr	r2, [pc, #228]	@ (800216c <HAL_DMA_Abort+0x21c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d068      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a37      	ldr	r2, [pc, #220]	@ (8002170 <HAL_DMA_Abort+0x220>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d063      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a36      	ldr	r2, [pc, #216]	@ (8002174 <HAL_DMA_Abort+0x224>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d05e      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a34      	ldr	r2, [pc, #208]	@ (8002178 <HAL_DMA_Abort+0x228>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d059      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a33      	ldr	r2, [pc, #204]	@ (800217c <HAL_DMA_Abort+0x22c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d054      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a31      	ldr	r2, [pc, #196]	@ (8002180 <HAL_DMA_Abort+0x230>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d04f      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a30      	ldr	r2, [pc, #192]	@ (8002184 <HAL_DMA_Abort+0x234>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04a      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002188 <HAL_DMA_Abort+0x238>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d045      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <HAL_DMA_Abort+0x23c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d040      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002190 <HAL_DMA_Abort+0x240>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d03b      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002194 <HAL_DMA_Abort+0x244>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d036      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <HAL_DMA_Abort+0x248>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_DMA_Abort+0x24c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d02c      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a25      	ldr	r2, [pc, #148]	@ (80021a0 <HAL_DMA_Abort+0x250>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d027      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a24      	ldr	r2, [pc, #144]	@ (80021a4 <HAL_DMA_Abort+0x254>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	@ (80021a8 <HAL_DMA_Abort+0x258>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01d      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a21      	ldr	r2, [pc, #132]	@ (80021ac <HAL_DMA_Abort+0x25c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d018      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_DMA_Abort+0x260>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <HAL_DMA_Abort+0x264>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1c      	ldr	r2, [pc, #112]	@ (80021b8 <HAL_DMA_Abort+0x268>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <HAL_DMA_Abort+0x26c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_DMA_Abort+0x270>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d132      	bne.n	80021c4 <HAL_DMA_Abort+0x274>
 800215e:	2301      	movs	r3, #1
 8002160:	e031      	b.n	80021c6 <HAL_DMA_Abort+0x276>
 8002162:	bf00      	nop
 8002164:	40020010 	.word	0x40020010
 8002168:	40020028 	.word	0x40020028
 800216c:	40020040 	.word	0x40020040
 8002170:	40020058 	.word	0x40020058
 8002174:	40020070 	.word	0x40020070
 8002178:	40020088 	.word	0x40020088
 800217c:	400200a0 	.word	0x400200a0
 8002180:	400200b8 	.word	0x400200b8
 8002184:	40020410 	.word	0x40020410
 8002188:	40020428 	.word	0x40020428
 800218c:	40020440 	.word	0x40020440
 8002190:	40020458 	.word	0x40020458
 8002194:	40020470 	.word	0x40020470
 8002198:	40020488 	.word	0x40020488
 800219c:	400204a0 	.word	0x400204a0
 80021a0:	400204b8 	.word	0x400204b8
 80021a4:	58025408 	.word	0x58025408
 80021a8:	5802541c 	.word	0x5802541c
 80021ac:	58025430 	.word	0x58025430
 80021b0:	58025444 	.word	0x58025444
 80021b4:	58025458 	.word	0x58025458
 80021b8:	5802546c 	.word	0x5802546c
 80021bc:	58025480 	.word	0x58025480
 80021c0:	58025494 	.word	0x58025494
 80021c4:	2300      	movs	r3, #0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6d      	ldr	r2, [pc, #436]	@ (8002394 <HAL_DMA_Abort+0x444>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002398 <HAL_DMA_Abort+0x448>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_DMA_Abort+0x44c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a68      	ldr	r2, [pc, #416]	@ (80023a0 <HAL_DMA_Abort+0x450>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a67      	ldr	r2, [pc, #412]	@ (80023a4 <HAL_DMA_Abort+0x454>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a65      	ldr	r2, [pc, #404]	@ (80023a8 <HAL_DMA_Abort+0x458>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a64      	ldr	r2, [pc, #400]	@ (80023ac <HAL_DMA_Abort+0x45c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a62      	ldr	r2, [pc, #392]	@ (80023b0 <HAL_DMA_Abort+0x460>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a61      	ldr	r2, [pc, #388]	@ (80023b4 <HAL_DMA_Abort+0x464>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5f      	ldr	r2, [pc, #380]	@ (80023b8 <HAL_DMA_Abort+0x468>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5e      	ldr	r2, [pc, #376]	@ (80023bc <HAL_DMA_Abort+0x46c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a5c      	ldr	r2, [pc, #368]	@ (80023c0 <HAL_DMA_Abort+0x470>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5b      	ldr	r2, [pc, #364]	@ (80023c4 <HAL_DMA_Abort+0x474>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a59      	ldr	r2, [pc, #356]	@ (80023c8 <HAL_DMA_Abort+0x478>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_DMA_Abort+0x47c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a56      	ldr	r2, [pc, #344]	@ (80023d0 <HAL_DMA_Abort+0x480>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <HAL_DMA_Abort+0x33c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <HAL_DMA_Abort+0x34c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800229c:	e013      	b.n	80022c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800229e:	f7fe ff73 	bl	8001188 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d90c      	bls.n	80022c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e12d      	b.n	8002522 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <HAL_DMA_Abort+0x444>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d04a      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <HAL_DMA_Abort+0x448>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d045      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <HAL_DMA_Abort+0x44c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d040      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	@ (80023a0 <HAL_DMA_Abort+0x450>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d03b      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a29      	ldr	r2, [pc, #164]	@ (80023a4 <HAL_DMA_Abort+0x454>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d036      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <HAL_DMA_Abort+0x458>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <HAL_DMA_Abort+0x45c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d02c      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a24      	ldr	r2, [pc, #144]	@ (80023b0 <HAL_DMA_Abort+0x460>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d027      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a23      	ldr	r2, [pc, #140]	@ (80023b4 <HAL_DMA_Abort+0x464>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a21      	ldr	r2, [pc, #132]	@ (80023b8 <HAL_DMA_Abort+0x468>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a20      	ldr	r2, [pc, #128]	@ (80023bc <HAL_DMA_Abort+0x46c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d018      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1e      	ldr	r2, [pc, #120]	@ (80023c0 <HAL_DMA_Abort+0x470>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_DMA_Abort+0x474>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <HAL_DMA_Abort+0x478>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_DMA_Abort+0x47c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a18      	ldr	r2, [pc, #96]	@ (80023d0 <HAL_DMA_Abort+0x480>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Abort+0x426>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_DMA_Abort+0x428>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02b      	beq.n	80023d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	223f      	movs	r2, #63	@ 0x3f
 800238c:	409a      	lsls	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	e02a      	b.n	80023ea <HAL_DMA_Abort+0x49a>
 8002394:	40020010 	.word	0x40020010
 8002398:	40020028 	.word	0x40020028
 800239c:	40020040 	.word	0x40020040
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40020070 	.word	0x40020070
 80023a8:	40020088 	.word	0x40020088
 80023ac:	400200a0 	.word	0x400200a0
 80023b0:	400200b8 	.word	0x400200b8
 80023b4:	40020410 	.word	0x40020410
 80023b8:	40020428 	.word	0x40020428
 80023bc:	40020440 	.word	0x40020440
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40020470 	.word	0x40020470
 80023c8:	40020488 	.word	0x40020488
 80023cc:	400204a0 	.word	0x400204a0
 80023d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_DMA_Abort+0x5dc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d072      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_DMA_Abort+0x5e0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d06d      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <HAL_DMA_Abort+0x5e4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d068      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4a      	ldr	r2, [pc, #296]	@ (8002538 <HAL_DMA_Abort+0x5e8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d063      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a49      	ldr	r2, [pc, #292]	@ (800253c <HAL_DMA_Abort+0x5ec>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d05e      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a47      	ldr	r2, [pc, #284]	@ (8002540 <HAL_DMA_Abort+0x5f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d059      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a46      	ldr	r2, [pc, #280]	@ (8002544 <HAL_DMA_Abort+0x5f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d054      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a44      	ldr	r2, [pc, #272]	@ (8002548 <HAL_DMA_Abort+0x5f8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04f      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a43      	ldr	r2, [pc, #268]	@ (800254c <HAL_DMA_Abort+0x5fc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d04a      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a41      	ldr	r2, [pc, #260]	@ (8002550 <HAL_DMA_Abort+0x600>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d045      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a40      	ldr	r2, [pc, #256]	@ (8002554 <HAL_DMA_Abort+0x604>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d040      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3e      	ldr	r2, [pc, #248]	@ (8002558 <HAL_DMA_Abort+0x608>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d03b      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a3d      	ldr	r2, [pc, #244]	@ (800255c <HAL_DMA_Abort+0x60c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d036      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_DMA_Abort+0x610>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3a      	ldr	r2, [pc, #232]	@ (8002564 <HAL_DMA_Abort+0x614>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d02c      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a38      	ldr	r2, [pc, #224]	@ (8002568 <HAL_DMA_Abort+0x618>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d027      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a37      	ldr	r2, [pc, #220]	@ (800256c <HAL_DMA_Abort+0x61c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a35      	ldr	r2, [pc, #212]	@ (8002570 <HAL_DMA_Abort+0x620>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01d      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a34      	ldr	r2, [pc, #208]	@ (8002574 <HAL_DMA_Abort+0x624>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d018      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a32      	ldr	r2, [pc, #200]	@ (8002578 <HAL_DMA_Abort+0x628>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a31      	ldr	r2, [pc, #196]	@ (800257c <HAL_DMA_Abort+0x62c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002580 <HAL_DMA_Abort+0x630>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002584 <HAL_DMA_Abort+0x634>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002588 <HAL_DMA_Abort+0x638>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Abort+0x58e>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_DMA_Abort+0x590>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002504:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800250e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
 800256c:	58025408 	.word	0x58025408
 8002570:	5802541c 	.word	0x5802541c
 8002574:	58025430 	.word	0x58025430
 8002578:	58025444 	.word	0x58025444
 800257c:	58025458 	.word	0x58025458
 8002580:	5802546c 	.word	0x5802546c
 8002584:	58025480 	.word	0x58025480
 8002588:	58025494 	.word	0x58025494

0800258c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e237      	b.n	8002a0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d004      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2280      	movs	r2, #128	@ 0x80
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e22c      	b.n	8002a0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_DMA_Abort_IT+0x1a0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002730 <HAL_DMA_Abort_IT+0x1a4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a59      	ldr	r2, [pc, #356]	@ (8002734 <HAL_DMA_Abort_IT+0x1a8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a58      	ldr	r2, [pc, #352]	@ (8002738 <HAL_DMA_Abort_IT+0x1ac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a56      	ldr	r2, [pc, #344]	@ (800273c <HAL_DMA_Abort_IT+0x1b0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a55      	ldr	r2, [pc, #340]	@ (8002740 <HAL_DMA_Abort_IT+0x1b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a53      	ldr	r2, [pc, #332]	@ (8002744 <HAL_DMA_Abort_IT+0x1b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a52      	ldr	r2, [pc, #328]	@ (8002748 <HAL_DMA_Abort_IT+0x1bc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a50      	ldr	r2, [pc, #320]	@ (800274c <HAL_DMA_Abort_IT+0x1c0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4f      	ldr	r2, [pc, #316]	@ (8002750 <HAL_DMA_Abort_IT+0x1c4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4d      	ldr	r2, [pc, #308]	@ (8002754 <HAL_DMA_Abort_IT+0x1c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4c      	ldr	r2, [pc, #304]	@ (8002758 <HAL_DMA_Abort_IT+0x1cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a4a      	ldr	r2, [pc, #296]	@ (800275c <HAL_DMA_Abort_IT+0x1d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a49      	ldr	r2, [pc, #292]	@ (8002760 <HAL_DMA_Abort_IT+0x1d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a47      	ldr	r2, [pc, #284]	@ (8002764 <HAL_DMA_Abort_IT+0x1d8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a46      	ldr	r2, [pc, #280]	@ (8002768 <HAL_DMA_Abort_IT+0x1dc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Abort_IT+0xcc>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_DMA_Abort_IT+0xce>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8086 	beq.w	800276c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2204      	movs	r2, #4
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2f      	ldr	r2, [pc, #188]	@ (800272c <HAL_DMA_Abort_IT+0x1a0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2e      	ldr	r2, [pc, #184]	@ (8002730 <HAL_DMA_Abort_IT+0x1a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2c      	ldr	r2, [pc, #176]	@ (8002734 <HAL_DMA_Abort_IT+0x1a8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2b      	ldr	r2, [pc, #172]	@ (8002738 <HAL_DMA_Abort_IT+0x1ac>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a29      	ldr	r2, [pc, #164]	@ (800273c <HAL_DMA_Abort_IT+0x1b0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <HAL_DMA_Abort_IT+0x1b4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a26      	ldr	r2, [pc, #152]	@ (8002744 <HAL_DMA_Abort_IT+0x1b8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a25      	ldr	r2, [pc, #148]	@ (8002748 <HAL_DMA_Abort_IT+0x1bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a23      	ldr	r2, [pc, #140]	@ (800274c <HAL_DMA_Abort_IT+0x1c0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a22      	ldr	r2, [pc, #136]	@ (8002750 <HAL_DMA_Abort_IT+0x1c4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a20      	ldr	r2, [pc, #128]	@ (8002754 <HAL_DMA_Abort_IT+0x1c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <HAL_DMA_Abort_IT+0x1cc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_DMA_Abort_IT+0x1d0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <HAL_DMA_Abort_IT+0x1d4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <HAL_DMA_Abort_IT+0x1d8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a19      	ldr	r2, [pc, #100]	@ (8002768 <HAL_DMA_Abort_IT+0x1dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <HAL_DMA_Abort_IT+0x18e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e178      	b.n	8002a0c <HAL_DMA_Abort_IT+0x480>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e16f      	b.n	8002a0c <HAL_DMA_Abort_IT+0x480>
 800272c:	40020010 	.word	0x40020010
 8002730:	40020028 	.word	0x40020028
 8002734:	40020040 	.word	0x40020040
 8002738:	40020058 	.word	0x40020058
 800273c:	40020070 	.word	0x40020070
 8002740:	40020088 	.word	0x40020088
 8002744:	400200a0 	.word	0x400200a0
 8002748:	400200b8 	.word	0x400200b8
 800274c:	40020410 	.word	0x40020410
 8002750:	40020428 	.word	0x40020428
 8002754:	40020440 	.word	0x40020440
 8002758:	40020458 	.word	0x40020458
 800275c:	40020470 	.word	0x40020470
 8002760:	40020488 	.word	0x40020488
 8002764:	400204a0 	.word	0x400204a0
 8002768:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020e 	bic.w	r2, r2, #14
 800277a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6c      	ldr	r2, [pc, #432]	@ (8002934 <HAL_DMA_Abort_IT+0x3a8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04a      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6b      	ldr	r2, [pc, #428]	@ (8002938 <HAL_DMA_Abort_IT+0x3ac>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d045      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a69      	ldr	r2, [pc, #420]	@ (800293c <HAL_DMA_Abort_IT+0x3b0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d040      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a68      	ldr	r2, [pc, #416]	@ (8002940 <HAL_DMA_Abort_IT+0x3b4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d03b      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a66      	ldr	r2, [pc, #408]	@ (8002944 <HAL_DMA_Abort_IT+0x3b8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d036      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a65      	ldr	r2, [pc, #404]	@ (8002948 <HAL_DMA_Abort_IT+0x3bc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d031      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a63      	ldr	r2, [pc, #396]	@ (800294c <HAL_DMA_Abort_IT+0x3c0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02c      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a62      	ldr	r2, [pc, #392]	@ (8002950 <HAL_DMA_Abort_IT+0x3c4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d027      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a60      	ldr	r2, [pc, #384]	@ (8002954 <HAL_DMA_Abort_IT+0x3c8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d022      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5f      	ldr	r2, [pc, #380]	@ (8002958 <HAL_DMA_Abort_IT+0x3cc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d01d      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5d      	ldr	r2, [pc, #372]	@ (800295c <HAL_DMA_Abort_IT+0x3d0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d018      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002960 <HAL_DMA_Abort_IT+0x3d4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002964 <HAL_DMA_Abort_IT+0x3d8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00e      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a59      	ldr	r2, [pc, #356]	@ (8002968 <HAL_DMA_Abort_IT+0x3dc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a57      	ldr	r2, [pc, #348]	@ (800296c <HAL_DMA_Abort_IT+0x3e0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a56      	ldr	r2, [pc, #344]	@ (8002970 <HAL_DMA_Abort_IT+0x3e4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <HAL_DMA_Abort_IT+0x2a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e007      	b.n	800283e <HAL_DMA_Abort_IT+0x2b2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3c      	ldr	r2, [pc, #240]	@ (8002934 <HAL_DMA_Abort_IT+0x3a8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d072      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <HAL_DMA_Abort_IT+0x3ac>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d06d      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a39      	ldr	r2, [pc, #228]	@ (800293c <HAL_DMA_Abort_IT+0x3b0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d068      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a37      	ldr	r2, [pc, #220]	@ (8002940 <HAL_DMA_Abort_IT+0x3b4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d063      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a36      	ldr	r2, [pc, #216]	@ (8002944 <HAL_DMA_Abort_IT+0x3b8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_DMA_Abort_IT+0x3bc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d059      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	@ (800294c <HAL_DMA_Abort_IT+0x3c0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d054      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <HAL_DMA_Abort_IT+0x3c4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04f      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_DMA_Abort_IT+0x3c8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <HAL_DMA_Abort_IT+0x3cc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	@ (800295c <HAL_DMA_Abort_IT+0x3d0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <HAL_DMA_Abort_IT+0x3d4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_DMA_Abort_IT+0x3d8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <HAL_DMA_Abort_IT+0x3dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	@ (800296c <HAL_DMA_Abort_IT+0x3e0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	@ (8002970 <HAL_DMA_Abort_IT+0x3e4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	@ (8002974 <HAL_DMA_Abort_IT+0x3e8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <HAL_DMA_Abort_IT+0x3ec>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	@ (800297c <HAL_DMA_Abort_IT+0x3f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_DMA_Abort_IT+0x3f4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <HAL_DMA_Abort_IT+0x3f8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	@ (8002988 <HAL_DMA_Abort_IT+0x3fc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <HAL_DMA_Abort_IT+0x400>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	@ (8002990 <HAL_DMA_Abort_IT+0x404>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d132      	bne.n	8002994 <HAL_DMA_Abort_IT+0x408>
 800292e:	2301      	movs	r3, #1
 8002930:	e031      	b.n	8002996 <HAL_DMA_Abort_IT+0x40a>
 8002932:	bf00      	nop
 8002934:	40020010 	.word	0x40020010
 8002938:	40020028 	.word	0x40020028
 800293c:	40020040 	.word	0x40020040
 8002940:	40020058 	.word	0x40020058
 8002944:	40020070 	.word	0x40020070
 8002948:	40020088 	.word	0x40020088
 800294c:	400200a0 	.word	0x400200a0
 8002950:	400200b8 	.word	0x400200b8
 8002954:	40020410 	.word	0x40020410
 8002958:	40020428 	.word	0x40020428
 800295c:	40020440 	.word	0x40020440
 8002960:	40020458 	.word	0x40020458
 8002964:	40020470 	.word	0x40020470
 8002968:	40020488 	.word	0x40020488
 800296c:	400204a0 	.word	0x400204a0
 8002970:	400204b8 	.word	0x400204b8
 8002974:	58025408 	.word	0x58025408
 8002978:	5802541c 	.word	0x5802541c
 800297c:	58025430 	.word	0x58025430
 8002980:	58025444 	.word	0x58025444
 8002984:	58025458 	.word	0x58025458
 8002988:	5802546c 	.word	0x5802546c
 800298c:	58025480 	.word	0x58025480
 8002990:	58025494 	.word	0x58025494
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d028      	beq.n	80029ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2201      	movs	r2, #1
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a24:	4b67      	ldr	r3, [pc, #412]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a67      	ldr	r2, [pc, #412]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1b0>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bcc <HAL_DMA_IRQHandler+0x1b4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd0 <HAL_DMA_IRQHandler+0x1b8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <HAL_DMA_IRQHandler+0x1bc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd8 <HAL_DMA_IRQHandler+0x1c0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a59      	ldr	r2, [pc, #356]	@ (8002bdc <HAL_DMA_IRQHandler+0x1c4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_DMA_IRQHandler+0x1c8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a56      	ldr	r2, [pc, #344]	@ (8002be4 <HAL_DMA_IRQHandler+0x1cc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a54      	ldr	r2, [pc, #336]	@ (8002be8 <HAL_DMA_IRQHandler+0x1d0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a53      	ldr	r2, [pc, #332]	@ (8002bec <HAL_DMA_IRQHandler+0x1d4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a51      	ldr	r2, [pc, #324]	@ (8002bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a50      	ldr	r2, [pc, #320]	@ (8002bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a4e      	ldr	r2, [pc, #312]	@ (8002bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8002bfc <HAL_DMA_IRQHandler+0x1e4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c00 <HAL_DMA_IRQHandler+0x1e8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_DMA_IRQHandler+0x1ec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_IRQHandler+0xd2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a48      	ldr	r2, [pc, #288]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_DMA_IRQHandler+0xd6>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_IRQHandler+0xd8>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 842b 	beq.w	800334c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2208      	movs	r2, #8
 8002b00:	409a      	lsls	r2, r3
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80a2 	beq.w	8002c50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2e      	ldr	r2, [pc, #184]	@ (8002bcc <HAL_DMA_IRQHandler+0x1b4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d04a      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_DMA_IRQHandler+0x1b8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d045      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <HAL_DMA_IRQHandler+0x1bc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d040      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd8 <HAL_DMA_IRQHandler+0x1c0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d03b      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a28      	ldr	r2, [pc, #160]	@ (8002bdc <HAL_DMA_IRQHandler+0x1c4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d036      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a27      	ldr	r2, [pc, #156]	@ (8002be0 <HAL_DMA_IRQHandler+0x1c8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a25      	ldr	r2, [pc, #148]	@ (8002be4 <HAL_DMA_IRQHandler+0x1cc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02c      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a24      	ldr	r2, [pc, #144]	@ (8002be8 <HAL_DMA_IRQHandler+0x1d0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d027      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <HAL_DMA_IRQHandler+0x1d4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01d      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d018      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	@ (8002bfc <HAL_DMA_IRQHandler+0x1e4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1b      	ldr	r2, [pc, #108]	@ (8002c00 <HAL_DMA_IRQHandler+0x1e8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	@ (8002c04 <HAL_DMA_IRQHandler+0x1ec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_IRQHandler+0x194>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d12f      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x1f4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e02e      	b.n	8002c20 <HAL_DMA_IRQHandler+0x208>
 8002bc2:	bf00      	nop
 8002bc4:	24000000 	.word	0x24000000
 8002bc8:	1b4e81b5 	.word	0x1b4e81b5
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d06e      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a69      	ldr	r2, [pc, #420]	@ (8002e10 <HAL_DMA_IRQHandler+0x3f8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d04a      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a67      	ldr	r2, [pc, #412]	@ (8002e14 <HAL_DMA_IRQHandler+0x3fc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d045      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a66      	ldr	r2, [pc, #408]	@ (8002e18 <HAL_DMA_IRQHandler+0x400>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d040      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a64      	ldr	r2, [pc, #400]	@ (8002e1c <HAL_DMA_IRQHandler+0x404>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a63      	ldr	r2, [pc, #396]	@ (8002e20 <HAL_DMA_IRQHandler+0x408>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d036      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a61      	ldr	r2, [pc, #388]	@ (8002e24 <HAL_DMA_IRQHandler+0x40c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a60      	ldr	r2, [pc, #384]	@ (8002e28 <HAL_DMA_IRQHandler+0x410>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d02c      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5e      	ldr	r2, [pc, #376]	@ (8002e2c <HAL_DMA_IRQHandler+0x414>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5d      	ldr	r2, [pc, #372]	@ (8002e30 <HAL_DMA_IRQHandler+0x418>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5b      	ldr	r2, [pc, #364]	@ (8002e34 <HAL_DMA_IRQHandler+0x41c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5a      	ldr	r2, [pc, #360]	@ (8002e38 <HAL_DMA_IRQHandler+0x420>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a58      	ldr	r2, [pc, #352]	@ (8002e3c <HAL_DMA_IRQHandler+0x424>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a57      	ldr	r2, [pc, #348]	@ (8002e40 <HAL_DMA_IRQHandler+0x428>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a55      	ldr	r2, [pc, #340]	@ (8002e44 <HAL_DMA_IRQHandler+0x42c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a54      	ldr	r2, [pc, #336]	@ (8002e48 <HAL_DMA_IRQHandler+0x430>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2ee>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a52      	ldr	r2, [pc, #328]	@ (8002e4c <HAL_DMA_IRQHandler+0x434>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10a      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x304>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e003      	b.n	8002d24 <HAL_DMA_IRQHandler+0x30c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2201      	movs	r2, #1
 8002d32:	409a      	lsls	r2, r3
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	f043 0202 	orr.w	r2, r3, #2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 808f 	beq.w	8002e78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e10 <HAL_DMA_IRQHandler+0x3f8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04a      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2a      	ldr	r2, [pc, #168]	@ (8002e14 <HAL_DMA_IRQHandler+0x3fc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d045      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a29      	ldr	r2, [pc, #164]	@ (8002e18 <HAL_DMA_IRQHandler+0x400>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d040      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <HAL_DMA_IRQHandler+0x404>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d03b      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <HAL_DMA_IRQHandler+0x408>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d036      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a24      	ldr	r2, [pc, #144]	@ (8002e24 <HAL_DMA_IRQHandler+0x40c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <HAL_DMA_IRQHandler+0x410>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d02c      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a21      	ldr	r2, [pc, #132]	@ (8002e2c <HAL_DMA_IRQHandler+0x414>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <HAL_DMA_IRQHandler+0x418>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <HAL_DMA_IRQHandler+0x41c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e38 <HAL_DMA_IRQHandler+0x420>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <HAL_DMA_IRQHandler+0x424>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e40 <HAL_DMA_IRQHandler+0x428>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a18      	ldr	r2, [pc, #96]	@ (8002e44 <HAL_DMA_IRQHandler+0x42c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a17      	ldr	r2, [pc, #92]	@ (8002e48 <HAL_DMA_IRQHandler+0x430>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x3e2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a15      	ldr	r2, [pc, #84]	@ (8002e4c <HAL_DMA_IRQHandler+0x434>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d12a      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x438>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e023      	b.n	8002e58 <HAL_DMA_IRQHandler+0x440>
 8002e10:	40020010 	.word	0x40020010
 8002e14:	40020028 	.word	0x40020028
 8002e18:	40020040 	.word	0x40020040
 8002e1c:	40020058 	.word	0x40020058
 8002e20:	40020070 	.word	0x40020070
 8002e24:	40020088 	.word	0x40020088
 8002e28:	400200a0 	.word	0x400200a0
 8002e2c:	400200b8 	.word	0x400200b8
 8002e30:	40020410 	.word	0x40020410
 8002e34:	40020428 	.word	0x40020428
 8002e38:	40020440 	.word	0x40020440
 8002e3c:	40020458 	.word	0x40020458
 8002e40:	40020470 	.word	0x40020470
 8002e44:	40020488 	.word	0x40020488
 8002e48:	400204a0 	.word	0x400204a0
 8002e4c:	400204b8 	.word	0x400204b8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	2210      	movs	r2, #16
 8002e82:	409a      	lsls	r2, r3
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a6 	beq.w	8002fda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a85      	ldr	r2, [pc, #532]	@ (80030a8 <HAL_DMA_IRQHandler+0x690>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04a      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a83      	ldr	r2, [pc, #524]	@ (80030ac <HAL_DMA_IRQHandler+0x694>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d045      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a82      	ldr	r2, [pc, #520]	@ (80030b0 <HAL_DMA_IRQHandler+0x698>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d040      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a80      	ldr	r2, [pc, #512]	@ (80030b4 <HAL_DMA_IRQHandler+0x69c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03b      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7f      	ldr	r2, [pc, #508]	@ (80030b8 <HAL_DMA_IRQHandler+0x6a0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d036      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7d      	ldr	r2, [pc, #500]	@ (80030bc <HAL_DMA_IRQHandler+0x6a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7c      	ldr	r2, [pc, #496]	@ (80030c0 <HAL_DMA_IRQHandler+0x6a8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d02c      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7a      	ldr	r2, [pc, #488]	@ (80030c4 <HAL_DMA_IRQHandler+0x6ac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d027      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a79      	ldr	r2, [pc, #484]	@ (80030c8 <HAL_DMA_IRQHandler+0x6b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a77      	ldr	r2, [pc, #476]	@ (80030cc <HAL_DMA_IRQHandler+0x6b4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a76      	ldr	r2, [pc, #472]	@ (80030d0 <HAL_DMA_IRQHandler+0x6b8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a74      	ldr	r2, [pc, #464]	@ (80030d4 <HAL_DMA_IRQHandler+0x6bc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a73      	ldr	r2, [pc, #460]	@ (80030d8 <HAL_DMA_IRQHandler+0x6c0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a71      	ldr	r2, [pc, #452]	@ (80030dc <HAL_DMA_IRQHandler+0x6c4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a70      	ldr	r2, [pc, #448]	@ (80030e0 <HAL_DMA_IRQHandler+0x6c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x516>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	@ (80030e4 <HAL_DMA_IRQHandler+0x6cc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10a      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x52c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e009      	b.n	8002f58 <HAL_DMA_IRQHandler+0x540>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03e      	beq.n	8002fda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2210      	movs	r2, #16
 8002f66:	409a      	lsls	r2, r3
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d024      	beq.n	8002fda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
 8002f98:	e01f      	b.n	8002fda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01b      	beq.n	8002fda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e016      	b.n	8002fda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0208 	bic.w	r2, r2, #8
 8002fc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8110 	beq.w	8003210 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80030a8 <HAL_DMA_IRQHandler+0x690>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d04a      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <HAL_DMA_IRQHandler+0x694>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d045      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a29      	ldr	r2, [pc, #164]	@ (80030b0 <HAL_DMA_IRQHandler+0x698>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d040      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_DMA_IRQHandler+0x69c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03b      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a26      	ldr	r2, [pc, #152]	@ (80030b8 <HAL_DMA_IRQHandler+0x6a0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d036      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <HAL_DMA_IRQHandler+0x6a4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d031      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <HAL_DMA_IRQHandler+0x6a8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02c      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_DMA_IRQHandler+0x6ac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d027      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <HAL_DMA_IRQHandler+0x6b0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d022      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <HAL_DMA_IRQHandler+0x6b4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d01d      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	@ (80030d0 <HAL_DMA_IRQHandler+0x6b8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <HAL_DMA_IRQHandler+0x6bc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_DMA_IRQHandler+0x6c0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_DMA_IRQHandler+0x6c4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_DMA_IRQHandler+0x6c8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_DMA_IRQHandler+0x678>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <HAL_DMA_IRQHandler+0x6cc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d12b      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x6d0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e02a      	b.n	80030fc <HAL_DMA_IRQHandler+0x6e4>
 80030a6:	bf00      	nop
 80030a8:	40020010 	.word	0x40020010
 80030ac:	40020028 	.word	0x40020028
 80030b0:	40020040 	.word	0x40020040
 80030b4:	40020058 	.word	0x40020058
 80030b8:	40020070 	.word	0x40020070
 80030bc:	40020088 	.word	0x40020088
 80030c0:	400200a0 	.word	0x400200a0
 80030c4:	400200b8 	.word	0x400200b8
 80030c8:	40020410 	.word	0x40020410
 80030cc:	40020428 	.word	0x40020428
 80030d0:	40020440 	.word	0x40020440
 80030d4:	40020458 	.word	0x40020458
 80030d8:	40020470 	.word	0x40020470
 80030dc:	40020488 	.word	0x40020488
 80030e0:	400204a0 	.word	0x400204a0
 80030e4:	400204b8 	.word	0x400204b8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8087 	beq.w	8003210 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2220      	movs	r2, #32
 800310c:	409a      	lsls	r2, r3
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b04      	cmp	r3, #4
 800311c:	d139      	bne.n	8003192 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0216 	bic.w	r2, r2, #22
 800312c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800313c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HAL_DMA_IRQHandler+0x736>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0208 	bic.w	r2, r2, #8
 800315c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	223f      	movs	r2, #63	@ 0x3f
 8003168:	409a      	lsls	r2, r3
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8382 	beq.w	800388c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
          }
          return;
 8003190:	e37c      	b.n	800388c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d018      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02c      	beq.n	8003210 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
 80031be:	e027      	b.n	8003210 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d023      	beq.n	8003210 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
 80031d0:	e01e      	b.n	8003210 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0210 	bic.w	r2, r2, #16
 80031ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 833e 	beq.w	8003896 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8088 	beq.w	8003338 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2204      	movs	r2, #4
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a89      	ldr	r2, [pc, #548]	@ (800345c <HAL_DMA_IRQHandler+0xa44>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d04a      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a88      	ldr	r2, [pc, #544]	@ (8003460 <HAL_DMA_IRQHandler+0xa48>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d045      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a86      	ldr	r2, [pc, #536]	@ (8003464 <HAL_DMA_IRQHandler+0xa4c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d040      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a85      	ldr	r2, [pc, #532]	@ (8003468 <HAL_DMA_IRQHandler+0xa50>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d03b      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a83      	ldr	r2, [pc, #524]	@ (800346c <HAL_DMA_IRQHandler+0xa54>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d036      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a82      	ldr	r2, [pc, #520]	@ (8003470 <HAL_DMA_IRQHandler+0xa58>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d031      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a80      	ldr	r2, [pc, #512]	@ (8003474 <HAL_DMA_IRQHandler+0xa5c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02c      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7f      	ldr	r2, [pc, #508]	@ (8003478 <HAL_DMA_IRQHandler+0xa60>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d027      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a7d      	ldr	r2, [pc, #500]	@ (800347c <HAL_DMA_IRQHandler+0xa64>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a7c      	ldr	r2, [pc, #496]	@ (8003480 <HAL_DMA_IRQHandler+0xa68>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01d      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a7a      	ldr	r2, [pc, #488]	@ (8003484 <HAL_DMA_IRQHandler+0xa6c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d018      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a79      	ldr	r2, [pc, #484]	@ (8003488 <HAL_DMA_IRQHandler+0xa70>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a77      	ldr	r2, [pc, #476]	@ (800348c <HAL_DMA_IRQHandler+0xa74>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a76      	ldr	r2, [pc, #472]	@ (8003490 <HAL_DMA_IRQHandler+0xa78>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d009      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a74      	ldr	r2, [pc, #464]	@ (8003494 <HAL_DMA_IRQHandler+0xa7c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x8b8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a73      	ldr	r2, [pc, #460]	@ (8003498 <HAL_DMA_IRQHandler+0xa80>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <HAL_DMA_IRQHandler+0x8ca>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e007      	b.n	80032f2 <HAL_DMA_IRQHandler+0x8da>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d307      	bcc.n	800330e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f2      	bne.n	80032f2 <HAL_DMA_IRQHandler+0x8da>
 800330c:	e000      	b.n	8003310 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800330e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2203      	movs	r2, #3
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003326:	e003      	b.n	8003330 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 82aa 	beq.w	8003896 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
 800334a:	e2a4      	b.n	8003896 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a52      	ldr	r2, [pc, #328]	@ (800349c <HAL_DMA_IRQHandler+0xa84>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a51      	ldr	r2, [pc, #324]	@ (80034a0 <HAL_DMA_IRQHandler+0xa88>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4f      	ldr	r2, [pc, #316]	@ (80034a4 <HAL_DMA_IRQHandler+0xa8c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a4e      	ldr	r2, [pc, #312]	@ (80034a8 <HAL_DMA_IRQHandler+0xa90>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a4c      	ldr	r2, [pc, #304]	@ (80034ac <HAL_DMA_IRQHandler+0xa94>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a4b      	ldr	r2, [pc, #300]	@ (80034b0 <HAL_DMA_IRQHandler+0xa98>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a49      	ldr	r2, [pc, #292]	@ (80034b4 <HAL_DMA_IRQHandler+0xa9c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a48      	ldr	r2, [pc, #288]	@ (80034b8 <HAL_DMA_IRQHandler+0xaa0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a46      	ldr	r2, [pc, #280]	@ (80034bc <HAL_DMA_IRQHandler+0xaa4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a45      	ldr	r2, [pc, #276]	@ (80034c0 <HAL_DMA_IRQHandler+0xaa8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a43      	ldr	r2, [pc, #268]	@ (80034c4 <HAL_DMA_IRQHandler+0xaac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a42      	ldr	r2, [pc, #264]	@ (80034c8 <HAL_DMA_IRQHandler+0xab0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a40      	ldr	r2, [pc, #256]	@ (80034cc <HAL_DMA_IRQHandler+0xab4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3f      	ldr	r2, [pc, #252]	@ (80034d0 <HAL_DMA_IRQHandler+0xab8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3d      	ldr	r2, [pc, #244]	@ (80034d4 <HAL_DMA_IRQHandler+0xabc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_IRQHandler+0x9d4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3c      	ldr	r2, [pc, #240]	@ (80034d8 <HAL_DMA_IRQHandler+0xac0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x9d8>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_DMA_IRQHandler+0x9da>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 824f 	beq.w	8003896 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80dd 	beq.w	80035d0 <HAL_DMA_IRQHandler+0xbb8>
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80d7 	beq.w	80035d0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2204      	movs	r2, #4
 800342c:	409a      	lsls	r2, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d059      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d14a      	bne.n	80034dc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8220 	beq.w	8003890 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003458:	e21a      	b.n	8003890 <HAL_DMA_IRQHandler+0xe78>
 800345a:	bf00      	nop
 800345c:	40020010 	.word	0x40020010
 8003460:	40020028 	.word	0x40020028
 8003464:	40020040 	.word	0x40020040
 8003468:	40020058 	.word	0x40020058
 800346c:	40020070 	.word	0x40020070
 8003470:	40020088 	.word	0x40020088
 8003474:	400200a0 	.word	0x400200a0
 8003478:	400200b8 	.word	0x400200b8
 800347c:	40020410 	.word	0x40020410
 8003480:	40020428 	.word	0x40020428
 8003484:	40020440 	.word	0x40020440
 8003488:	40020458 	.word	0x40020458
 800348c:	40020470 	.word	0x40020470
 8003490:	40020488 	.word	0x40020488
 8003494:	400204a0 	.word	0x400204a0
 8003498:	400204b8 	.word	0x400204b8
 800349c:	48022c08 	.word	0x48022c08
 80034a0:	48022c1c 	.word	0x48022c1c
 80034a4:	48022c30 	.word	0x48022c30
 80034a8:	48022c44 	.word	0x48022c44
 80034ac:	48022c58 	.word	0x48022c58
 80034b0:	48022c6c 	.word	0x48022c6c
 80034b4:	48022c80 	.word	0x48022c80
 80034b8:	48022c94 	.word	0x48022c94
 80034bc:	58025408 	.word	0x58025408
 80034c0:	5802541c 	.word	0x5802541c
 80034c4:	58025430 	.word	0x58025430
 80034c8:	58025444 	.word	0x58025444
 80034cc:	58025458 	.word	0x58025458
 80034d0:	5802546c 	.word	0x5802546c
 80034d4:	58025480 	.word	0x58025480
 80034d8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 81d5 	beq.w	8003890 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ee:	e1cf      	b.n	8003890 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d160      	bne.n	80035bc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7f      	ldr	r2, [pc, #508]	@ (80036fc <HAL_DMA_IRQHandler+0xce4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7d      	ldr	r2, [pc, #500]	@ (8003700 <HAL_DMA_IRQHandler+0xce8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7c      	ldr	r2, [pc, #496]	@ (8003704 <HAL_DMA_IRQHandler+0xcec>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7a      	ldr	r2, [pc, #488]	@ (8003708 <HAL_DMA_IRQHandler+0xcf0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a79      	ldr	r2, [pc, #484]	@ (800370c <HAL_DMA_IRQHandler+0xcf4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a77      	ldr	r2, [pc, #476]	@ (8003710 <HAL_DMA_IRQHandler+0xcf8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a76      	ldr	r2, [pc, #472]	@ (8003714 <HAL_DMA_IRQHandler+0xcfc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a74      	ldr	r2, [pc, #464]	@ (8003718 <HAL_DMA_IRQHandler+0xd00>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a73      	ldr	r2, [pc, #460]	@ (800371c <HAL_DMA_IRQHandler+0xd04>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a71      	ldr	r2, [pc, #452]	@ (8003720 <HAL_DMA_IRQHandler+0xd08>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a70      	ldr	r2, [pc, #448]	@ (8003724 <HAL_DMA_IRQHandler+0xd0c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6e      	ldr	r2, [pc, #440]	@ (8003728 <HAL_DMA_IRQHandler+0xd10>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6d      	ldr	r2, [pc, #436]	@ (800372c <HAL_DMA_IRQHandler+0xd14>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6b      	ldr	r2, [pc, #428]	@ (8003730 <HAL_DMA_IRQHandler+0xd18>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6a      	ldr	r2, [pc, #424]	@ (8003734 <HAL_DMA_IRQHandler+0xd1c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_IRQHandler+0xb82>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	@ (8003738 <HAL_DMA_IRQHandler+0xd20>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <HAL_DMA_IRQHandler+0xb94>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0208 	bic.w	r2, r2, #8
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e007      	b.n	80035bc <HAL_DMA_IRQHandler+0xba4>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8165 	beq.w	8003890 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ce:	e15f      	b.n	8003890 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2202      	movs	r2, #2
 80035da:	409a      	lsls	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80c5 	beq.w	8003770 <HAL_DMA_IRQHandler+0xd58>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80bf 	beq.w	8003770 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2202      	movs	r2, #2
 80035fc:	409a      	lsls	r2, r3
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d018      	beq.n	800363e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 813a 	beq.w	8003894 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003628:	e134      	b.n	8003894 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8130 	beq.w	8003894 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800363c:	e12a      	b.n	8003894 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	f040 8089 	bne.w	800375c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <HAL_DMA_IRQHandler+0xce4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a29      	ldr	r2, [pc, #164]	@ (8003700 <HAL_DMA_IRQHandler+0xce8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <HAL_DMA_IRQHandler+0xcec>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a26      	ldr	r2, [pc, #152]	@ (8003708 <HAL_DMA_IRQHandler+0xcf0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a25      	ldr	r2, [pc, #148]	@ (800370c <HAL_DMA_IRQHandler+0xcf4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a23      	ldr	r2, [pc, #140]	@ (8003710 <HAL_DMA_IRQHandler+0xcf8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a22      	ldr	r2, [pc, #136]	@ (8003714 <HAL_DMA_IRQHandler+0xcfc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a20      	ldr	r2, [pc, #128]	@ (8003718 <HAL_DMA_IRQHandler+0xd00>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1f      	ldr	r2, [pc, #124]	@ (800371c <HAL_DMA_IRQHandler+0xd04>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <HAL_DMA_IRQHandler+0xd08>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003724 <HAL_DMA_IRQHandler+0xd0c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003728 <HAL_DMA_IRQHandler+0xd10>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a19      	ldr	r2, [pc, #100]	@ (800372c <HAL_DMA_IRQHandler+0xd14>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_DMA_IRQHandler+0xd18>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a16      	ldr	r2, [pc, #88]	@ (8003734 <HAL_DMA_IRQHandler+0xd1c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_IRQHandler+0xcd2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <HAL_DMA_IRQHandler+0xd20>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d128      	bne.n	800373c <HAL_DMA_IRQHandler+0xd24>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0214 	bic.w	r2, r2, #20
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e027      	b.n	800374c <HAL_DMA_IRQHandler+0xd34>
 80036fc:	40020010 	.word	0x40020010
 8003700:	40020028 	.word	0x40020028
 8003704:	40020040 	.word	0x40020040
 8003708:	40020058 	.word	0x40020058
 800370c:	40020070 	.word	0x40020070
 8003710:	40020088 	.word	0x40020088
 8003714:	400200a0 	.word	0x400200a0
 8003718:	400200b8 	.word	0x400200b8
 800371c:	40020410 	.word	0x40020410
 8003720:	40020428 	.word	0x40020428
 8003724:	40020440 	.word	0x40020440
 8003728:	40020458 	.word	0x40020458
 800372c:	40020470 	.word	0x40020470
 8003730:	40020488 	.word	0x40020488
 8003734:	400204a0 	.word	0x400204a0
 8003738:	400204b8 	.word	0x400204b8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020a 	bic.w	r2, r2, #10
 800374a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8097 	beq.w	8003894 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800376e:	e091      	b.n	8003894 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2208      	movs	r2, #8
 800377a:	409a      	lsls	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8088 	beq.w	8003896 <HAL_DMA_IRQHandler+0xe7e>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8082 	beq.w	8003896 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a41      	ldr	r2, [pc, #260]	@ (800389c <HAL_DMA_IRQHandler+0xe84>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d04a      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a3f      	ldr	r2, [pc, #252]	@ (80038a0 <HAL_DMA_IRQHandler+0xe88>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d045      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a3e      	ldr	r2, [pc, #248]	@ (80038a4 <HAL_DMA_IRQHandler+0xe8c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d040      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a3c      	ldr	r2, [pc, #240]	@ (80038a8 <HAL_DMA_IRQHandler+0xe90>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d03b      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a3b      	ldr	r2, [pc, #236]	@ (80038ac <HAL_DMA_IRQHandler+0xe94>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d036      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a39      	ldr	r2, [pc, #228]	@ (80038b0 <HAL_DMA_IRQHandler+0xe98>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d031      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a38      	ldr	r2, [pc, #224]	@ (80038b4 <HAL_DMA_IRQHandler+0xe9c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d02c      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a36      	ldr	r2, [pc, #216]	@ (80038b8 <HAL_DMA_IRQHandler+0xea0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d027      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a35      	ldr	r2, [pc, #212]	@ (80038bc <HAL_DMA_IRQHandler+0xea4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a33      	ldr	r2, [pc, #204]	@ (80038c0 <HAL_DMA_IRQHandler+0xea8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01d      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a32      	ldr	r2, [pc, #200]	@ (80038c4 <HAL_DMA_IRQHandler+0xeac>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a30      	ldr	r2, [pc, #192]	@ (80038c8 <HAL_DMA_IRQHandler+0xeb0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2f      	ldr	r2, [pc, #188]	@ (80038cc <HAL_DMA_IRQHandler+0xeb4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2d      	ldr	r2, [pc, #180]	@ (80038d0 <HAL_DMA_IRQHandler+0xeb8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <HAL_DMA_IRQHandler+0xebc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe1a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2a      	ldr	r2, [pc, #168]	@ (80038d8 <HAL_DMA_IRQHandler+0xec0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d108      	bne.n	8003844 <HAL_DMA_IRQHandler+0xe2c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 021c 	bic.w	r2, r2, #28
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e007      	b.n	8003854 <HAL_DMA_IRQHandler+0xe3c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 020e 	bic.w	r2, r2, #14
 8003852:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
 800388a:	e004      	b.n	8003896 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800388c:	bf00      	nop
 800388e:	e002      	b.n	8003896 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003894:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40020010 	.word	0x40020010
 80038a0:	40020028 	.word	0x40020028
 80038a4:	40020040 	.word	0x40020040
 80038a8:	40020058 	.word	0x40020058
 80038ac:	40020070 	.word	0x40020070
 80038b0:	40020088 	.word	0x40020088
 80038b4:	400200a0 	.word	0x400200a0
 80038b8:	400200b8 	.word	0x400200b8
 80038bc:	40020410 	.word	0x40020410
 80038c0:	40020428 	.word	0x40020428
 80038c4:	40020440 	.word	0x40020440
 80038c8:	40020458 	.word	0x40020458
 80038cc:	40020470 	.word	0x40020470
 80038d0:	40020488 	.word	0x40020488
 80038d4:	400204a0 	.word	0x400204a0
 80038d8:	400204b8 	.word	0x400204b8

080038dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a7f      	ldr	r2, [pc, #508]	@ (8003b2c <DMA_SetConfig+0x21c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d072      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a7d      	ldr	r2, [pc, #500]	@ (8003b30 <DMA_SetConfig+0x220>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d06d      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7c      	ldr	r2, [pc, #496]	@ (8003b34 <DMA_SetConfig+0x224>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d068      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7a      	ldr	r2, [pc, #488]	@ (8003b38 <DMA_SetConfig+0x228>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d063      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a79      	ldr	r2, [pc, #484]	@ (8003b3c <DMA_SetConfig+0x22c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d05e      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a77      	ldr	r2, [pc, #476]	@ (8003b40 <DMA_SetConfig+0x230>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d059      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a76      	ldr	r2, [pc, #472]	@ (8003b44 <DMA_SetConfig+0x234>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d054      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a74      	ldr	r2, [pc, #464]	@ (8003b48 <DMA_SetConfig+0x238>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04f      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a73      	ldr	r2, [pc, #460]	@ (8003b4c <DMA_SetConfig+0x23c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d04a      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a71      	ldr	r2, [pc, #452]	@ (8003b50 <DMA_SetConfig+0x240>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d045      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a70      	ldr	r2, [pc, #448]	@ (8003b54 <DMA_SetConfig+0x244>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d040      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b58 <DMA_SetConfig+0x248>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d03b      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b5c <DMA_SetConfig+0x24c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d036      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b60 <DMA_SetConfig+0x250>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d031      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003b64 <DMA_SetConfig+0x254>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d02c      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a68      	ldr	r2, [pc, #416]	@ (8003b68 <DMA_SetConfig+0x258>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d027      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a67      	ldr	r2, [pc, #412]	@ (8003b6c <DMA_SetConfig+0x25c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a65      	ldr	r2, [pc, #404]	@ (8003b70 <DMA_SetConfig+0x260>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01d      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a64      	ldr	r2, [pc, #400]	@ (8003b74 <DMA_SetConfig+0x264>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a62      	ldr	r2, [pc, #392]	@ (8003b78 <DMA_SetConfig+0x268>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a61      	ldr	r2, [pc, #388]	@ (8003b7c <DMA_SetConfig+0x26c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5f      	ldr	r2, [pc, #380]	@ (8003b80 <DMA_SetConfig+0x270>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b84 <DMA_SetConfig+0x274>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <DMA_SetConfig+0x10a>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5c      	ldr	r2, [pc, #368]	@ (8003b88 <DMA_SetConfig+0x278>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <DMA_SetConfig+0x10e>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <DMA_SetConfig+0x110>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a39      	ldr	r2, [pc, #228]	@ (8003b2c <DMA_SetConfig+0x21c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <DMA_SetConfig+0x220>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a36      	ldr	r2, [pc, #216]	@ (8003b34 <DMA_SetConfig+0x224>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a35      	ldr	r2, [pc, #212]	@ (8003b38 <DMA_SetConfig+0x228>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a33      	ldr	r2, [pc, #204]	@ (8003b3c <DMA_SetConfig+0x22c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a32      	ldr	r2, [pc, #200]	@ (8003b40 <DMA_SetConfig+0x230>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a30      	ldr	r2, [pc, #192]	@ (8003b44 <DMA_SetConfig+0x234>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b48 <DMA_SetConfig+0x238>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <DMA_SetConfig+0x23c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b50 <DMA_SetConfig+0x240>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b54 <DMA_SetConfig+0x244>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a29      	ldr	r2, [pc, #164]	@ (8003b58 <DMA_SetConfig+0x248>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <DMA_SetConfig+0x24c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <DMA_SetConfig+0x250>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a24      	ldr	r2, [pc, #144]	@ (8003b64 <DMA_SetConfig+0x254>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <DMA_SetConfig+0x1d0>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a23      	ldr	r2, [pc, #140]	@ (8003b68 <DMA_SetConfig+0x258>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <DMA_SetConfig+0x1d4>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <DMA_SetConfig+0x1d6>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d059      	beq.n	8003b9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	223f      	movs	r2, #63	@ 0x3f
 8003af4:	409a      	lsls	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d138      	bne.n	8003b8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b2a:	e0ae      	b.n	8003c8a <DMA_SetConfig+0x37a>
 8003b2c:	40020010 	.word	0x40020010
 8003b30:	40020028 	.word	0x40020028
 8003b34:	40020040 	.word	0x40020040
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	40020070 	.word	0x40020070
 8003b40:	40020088 	.word	0x40020088
 8003b44:	400200a0 	.word	0x400200a0
 8003b48:	400200b8 	.word	0x400200b8
 8003b4c:	40020410 	.word	0x40020410
 8003b50:	40020428 	.word	0x40020428
 8003b54:	40020440 	.word	0x40020440
 8003b58:	40020458 	.word	0x40020458
 8003b5c:	40020470 	.word	0x40020470
 8003b60:	40020488 	.word	0x40020488
 8003b64:	400204a0 	.word	0x400204a0
 8003b68:	400204b8 	.word	0x400204b8
 8003b6c:	58025408 	.word	0x58025408
 8003b70:	5802541c 	.word	0x5802541c
 8003b74:	58025430 	.word	0x58025430
 8003b78:	58025444 	.word	0x58025444
 8003b7c:	58025458 	.word	0x58025458
 8003b80:	5802546c 	.word	0x5802546c
 8003b84:	58025480 	.word	0x58025480
 8003b88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
}
 8003b9c:	e075      	b.n	8003c8a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8003c98 <DMA_SetConfig+0x388>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d04a      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a3b      	ldr	r2, [pc, #236]	@ (8003c9c <DMA_SetConfig+0x38c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d045      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca0 <DMA_SetConfig+0x390>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d040      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <DMA_SetConfig+0x394>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d03b      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a37      	ldr	r2, [pc, #220]	@ (8003ca8 <DMA_SetConfig+0x398>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d036      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a35      	ldr	r2, [pc, #212]	@ (8003cac <DMA_SetConfig+0x39c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d031      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a34      	ldr	r2, [pc, #208]	@ (8003cb0 <DMA_SetConfig+0x3a0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d02c      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a32      	ldr	r2, [pc, #200]	@ (8003cb4 <DMA_SetConfig+0x3a4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d027      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a31      	ldr	r2, [pc, #196]	@ (8003cb8 <DMA_SetConfig+0x3a8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8003cbc <DMA_SetConfig+0x3ac>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01d      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc0 <DMA_SetConfig+0x3b0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc4 <DMA_SetConfig+0x3b4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <DMA_SetConfig+0x3b8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a29      	ldr	r2, [pc, #164]	@ (8003ccc <DMA_SetConfig+0x3bc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a28      	ldr	r2, [pc, #160]	@ (8003cd0 <DMA_SetConfig+0x3c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <DMA_SetConfig+0x32e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a26      	ldr	r2, [pc, #152]	@ (8003cd4 <DMA_SetConfig+0x3c4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <DMA_SetConfig+0x332>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <DMA_SetConfig+0x334>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b40      	cmp	r3, #64	@ 0x40
 8003c66:	d108      	bne.n	8003c7a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	60da      	str	r2, [r3, #12]
}
 8003c78:	e007      	b.n	8003c8a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	48022c08 	.word	0x48022c08
 8003c9c:	48022c1c 	.word	0x48022c1c
 8003ca0:	48022c30 	.word	0x48022c30
 8003ca4:	48022c44 	.word	0x48022c44
 8003ca8:	48022c58 	.word	0x48022c58
 8003cac:	48022c6c 	.word	0x48022c6c
 8003cb0:	48022c80 	.word	0x48022c80
 8003cb4:	48022c94 	.word	0x48022c94
 8003cb8:	58025408 	.word	0x58025408
 8003cbc:	5802541c 	.word	0x5802541c
 8003cc0:	58025430 	.word	0x58025430
 8003cc4:	58025444 	.word	0x58025444
 8003cc8:	58025458 	.word	0x58025458
 8003ccc:	5802546c 	.word	0x5802546c
 8003cd0:	58025480 	.word	0x58025480
 8003cd4:	58025494 	.word	0x58025494

08003cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a42      	ldr	r2, [pc, #264]	@ (8003df0 <DMA_CalcBaseAndBitshift+0x118>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d04a      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a41      	ldr	r2, [pc, #260]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d045      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8003df8 <DMA_CalcBaseAndBitshift+0x120>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d040      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3e      	ldr	r2, [pc, #248]	@ (8003dfc <DMA_CalcBaseAndBitshift+0x124>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d03b      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e00 <DMA_CalcBaseAndBitshift+0x128>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d036      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	@ (8003e04 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d031      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	@ (8003e08 <DMA_CalcBaseAndBitshift+0x130>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d02c      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a38      	ldr	r2, [pc, #224]	@ (8003e0c <DMA_CalcBaseAndBitshift+0x134>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d027      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a36      	ldr	r2, [pc, #216]	@ (8003e10 <DMA_CalcBaseAndBitshift+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a35      	ldr	r2, [pc, #212]	@ (8003e14 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d01d      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a33      	ldr	r2, [pc, #204]	@ (8003e18 <DMA_CalcBaseAndBitshift+0x140>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a32      	ldr	r2, [pc, #200]	@ (8003e1c <DMA_CalcBaseAndBitshift+0x144>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a30      	ldr	r2, [pc, #192]	@ (8003e20 <DMA_CalcBaseAndBitshift+0x148>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2f      	ldr	r2, [pc, #188]	@ (8003e24 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <DMA_CalcBaseAndBitshift+0x150>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <DMA_CalcBaseAndBitshift+0xa8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <DMA_CalcBaseAndBitshift+0x154>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <DMA_CalcBaseAndBitshift+0xac>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <DMA_CalcBaseAndBitshift+0xae>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d024      	beq.n	8003dd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3b10      	subs	r3, #16
 8003d92:	4a27      	ldr	r2, [pc, #156]	@ (8003e30 <DMA_CalcBaseAndBitshift+0x158>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	4a24      	ldr	r2, [pc, #144]	@ (8003e34 <DMA_CalcBaseAndBitshift+0x15c>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	461a      	mov	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d908      	bls.n	8003dc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e38 <DMA_CalcBaseAndBitshift+0x160>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dc2:	e00d      	b.n	8003de0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <DMA_CalcBaseAndBitshift+0x160>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd2:	e005      	b.n	8003de0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40020010 	.word	0x40020010
 8003df4:	40020028 	.word	0x40020028
 8003df8:	40020040 	.word	0x40020040
 8003dfc:	40020058 	.word	0x40020058
 8003e00:	40020070 	.word	0x40020070
 8003e04:	40020088 	.word	0x40020088
 8003e08:	400200a0 	.word	0x400200a0
 8003e0c:	400200b8 	.word	0x400200b8
 8003e10:	40020410 	.word	0x40020410
 8003e14:	40020428 	.word	0x40020428
 8003e18:	40020440 	.word	0x40020440
 8003e1c:	40020458 	.word	0x40020458
 8003e20:	40020470 	.word	0x40020470
 8003e24:	40020488 	.word	0x40020488
 8003e28:	400204a0 	.word	0x400204a0
 8003e2c:	400204b8 	.word	0x400204b8
 8003e30:	aaaaaaab 	.word	0xaaaaaaab
 8003e34:	0800edd8 	.word	0x0800edd8
 8003e38:	fffffc00 	.word	0xfffffc00

08003e3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d120      	bne.n	8003e92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d858      	bhi.n	8003f0a <DMA_CheckFifoParam+0xce>
 8003e58:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <DMA_CheckFifoParam+0x24>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e83 	.word	0x08003e83
 8003e68:	08003e71 	.word	0x08003e71
 8003e6c:	08003f0b 	.word	0x08003f0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d048      	beq.n	8003f0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e80:	e045      	b.n	8003f0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e8a:	d142      	bne.n	8003f12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e90:	e03f      	b.n	8003f12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9a:	d123      	bne.n	8003ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d838      	bhi.n	8003f16 <DMA_CheckFifoParam+0xda>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <DMA_CheckFifoParam+0x70>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ec3 	.word	0x08003ec3
 8003eb4:	08003ebd 	.word	0x08003ebd
 8003eb8:	08003ed5 	.word	0x08003ed5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
        break;
 8003ec0:	e030      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d025      	beq.n	8003f1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ed2:	e022      	b.n	8003f1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003edc:	d11f      	bne.n	8003f1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ee2:	e01c      	b.n	8003f1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d902      	bls.n	8003ef2 <DMA_CheckFifoParam+0xb6>
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d003      	beq.n	8003ef8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ef0:	e018      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef6:	e015      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
    break;
 8003f08:	e00b      	b.n	8003f22 <DMA_CheckFifoParam+0xe6>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e00a      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e008      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f12:	bf00      	nop
 8003f14:	e006      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f16:	bf00      	nop
 8003f18:	e004      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
        break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <DMA_CheckFifoParam+0xe8>
    break;
 8003f22:	bf00      	nop
    }
  }

  return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	@ (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a36      	ldr	r2, [pc, #216]	@ (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a35      	ldr	r2, [pc, #212]	@ (8004030 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a33      	ldr	r2, [pc, #204]	@ (8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	@ (8004038 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a30      	ldr	r2, [pc, #192]	@ (800403c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2f      	ldr	r2, [pc, #188]	@ (8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004044 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01a      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	3b08      	subs	r3, #8
 8003fa4:	4a28      	ldr	r2, [pc, #160]	@ (8004048 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4b26      	ldr	r3, [pc, #152]	@ (800404c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003fc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fd0:	e024      	b.n	800401c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b10      	subs	r3, #16
 8003fda:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d806      	bhi.n	8003ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	@ (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d902      	bls.n	8003ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800400c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2201      	movs	r2, #1
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	58025408 	.word	0x58025408
 800402c:	5802541c 	.word	0x5802541c
 8004030:	58025430 	.word	0x58025430
 8004034:	58025444 	.word	0x58025444
 8004038:	58025458 	.word	0x58025458
 800403c:	5802546c 	.word	0x5802546c
 8004040:	58025480 	.word	0x58025480
 8004044:	58025494 	.word	0x58025494
 8004048:	cccccccd 	.word	0xcccccccd
 800404c:	16009600 	.word	0x16009600
 8004050:	58025880 	.word	0x58025880
 8004054:	aaaaaaab 	.word	0xaaaaaaab
 8004058:	400204b8 	.word	0x400204b8
 800405c:	4002040f 	.word	0x4002040f
 8004060:	10008200 	.word	0x10008200
 8004064:	40020880 	.word	0x40020880

08004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d04a      	beq.n	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d847      	bhi.n	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a25      	ldr	r2, [pc, #148]	@ (8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d022      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d01d      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	@ (8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	@ (800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1b      	ldr	r2, [pc, #108]	@ (800413c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80040f2:	e009      	b.n	8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a11      	ldr	r2, [pc, #68]	@ (800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004106:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b01      	subs	r3, #1
 800410c:	2201      	movs	r2, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	58025408 	.word	0x58025408
 8004124:	5802541c 	.word	0x5802541c
 8004128:	58025430 	.word	0x58025430
 800412c:	58025444 	.word	0x58025444
 8004130:	58025458 	.word	0x58025458
 8004134:	5802546c 	.word	0x5802546c
 8004138:	58025480 	.word	0x58025480
 800413c:	58025494 	.word	0x58025494
 8004140:	1600963f 	.word	0x1600963f
 8004144:	58025940 	.word	0x58025940
 8004148:	1000823f 	.word	0x1000823f
 800414c:	40020940 	.word	0x40020940

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	@ 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800415e:	4b89      	ldr	r3, [pc, #548]	@ (8004384 <HAL_GPIO_Init+0x234>)
 8004160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004162:	e194      	b.n	800448e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2101      	movs	r1, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8186 	beq.w	8004488 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d005      	beq.n	8004194 <HAL_GPIO_Init+0x44>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d130      	bne.n	80041f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	2203      	movs	r2, #3
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ca:	2201      	movs	r2, #1
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	f003 0201 	and.w	r2, r3, #1
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d017      	beq.n	8004232 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2203      	movs	r2, #3
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d123      	bne.n	8004286 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	08da      	lsrs	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3208      	adds	r2, #8
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	2203      	movs	r2, #3
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0203 	and.w	r2, r3, #3
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80e0 	beq.w	8004488 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004388 <HAL_GPIO_Init+0x238>)
 80042ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80042ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004388 <HAL_GPIO_Init+0x238>)
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80042d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004388 <HAL_GPIO_Init+0x238>)
 80042da:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042e6:	4a29      	ldr	r2, [pc, #164]	@ (800438c <HAL_GPIO_Init+0x23c>)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	3302      	adds	r3, #2
 80042ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	220f      	movs	r2, #15
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a20      	ldr	r2, [pc, #128]	@ (8004390 <HAL_GPIO_Init+0x240>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d052      	beq.n	80043b8 <HAL_GPIO_Init+0x268>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1f      	ldr	r2, [pc, #124]	@ (8004394 <HAL_GPIO_Init+0x244>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d031      	beq.n	800437e <HAL_GPIO_Init+0x22e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1e      	ldr	r2, [pc, #120]	@ (8004398 <HAL_GPIO_Init+0x248>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02b      	beq.n	800437a <HAL_GPIO_Init+0x22a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <HAL_GPIO_Init+0x24c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d025      	beq.n	8004376 <HAL_GPIO_Init+0x226>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1c      	ldr	r2, [pc, #112]	@ (80043a0 <HAL_GPIO_Init+0x250>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01f      	beq.n	8004372 <HAL_GPIO_Init+0x222>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <HAL_GPIO_Init+0x254>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d019      	beq.n	800436e <HAL_GPIO_Init+0x21e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1a      	ldr	r2, [pc, #104]	@ (80043a8 <HAL_GPIO_Init+0x258>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_GPIO_Init+0x21a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <HAL_GPIO_Init+0x25c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00d      	beq.n	8004366 <HAL_GPIO_Init+0x216>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <HAL_GPIO_Init+0x260>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <HAL_GPIO_Init+0x212>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a17      	ldr	r2, [pc, #92]	@ (80043b4 <HAL_GPIO_Init+0x264>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_GPIO_Init+0x20e>
 800435a:	2309      	movs	r3, #9
 800435c:	e02d      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800435e:	230a      	movs	r3, #10
 8004360:	e02b      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004362:	2308      	movs	r3, #8
 8004364:	e029      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004366:	2307      	movs	r3, #7
 8004368:	e027      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800436a:	2306      	movs	r3, #6
 800436c:	e025      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800436e:	2305      	movs	r3, #5
 8004370:	e023      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004372:	2304      	movs	r3, #4
 8004374:	e021      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004376:	2303      	movs	r3, #3
 8004378:	e01f      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800437a:	2302      	movs	r3, #2
 800437c:	e01d      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 800437e:	2301      	movs	r3, #1
 8004380:	e01b      	b.n	80043ba <HAL_GPIO_Init+0x26a>
 8004382:	bf00      	nop
 8004384:	58000080 	.word	0x58000080
 8004388:	58024400 	.word	0x58024400
 800438c:	58000400 	.word	0x58000400
 8004390:	58020000 	.word	0x58020000
 8004394:	58020400 	.word	0x58020400
 8004398:	58020800 	.word	0x58020800
 800439c:	58020c00 	.word	0x58020c00
 80043a0:	58021000 	.word	0x58021000
 80043a4:	58021400 	.word	0x58021400
 80043a8:	58021800 	.word	0x58021800
 80043ac:	58021c00 	.word	0x58021c00
 80043b0:	58022000 	.word	0x58022000
 80043b4:	58022400 	.word	0x58022400
 80043b8:	2300      	movs	r3, #0
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	f002 0203 	and.w	r2, r2, #3
 80043c0:	0092      	lsls	r2, r2, #2
 80043c2:	4093      	lsls	r3, r2
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ca:	4938      	ldr	r1, [pc, #224]	@ (80044ac <HAL_GPIO_Init+0x35c>)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	3302      	adds	r3, #2
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800442c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f ae63 	bne.w	8004164 <HAL_GPIO_Init+0x14>
  }
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	3724      	adds	r7, #36	@ 0x24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58000400 	.word	0x58000400

080044b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fa3a 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e08b      	b.n	800460e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc f944 	bl	8000798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	@ 0x24
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004534:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004544:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	e006      	b.n	800456c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800456a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d108      	bne.n	8004586 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	e007      	b.n	8004596 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <HAL_I2C_Init+0x134>)
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	02008000 	.word	0x02008000

0800461c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	461a      	mov	r2, r3
 8004628:	460b      	mov	r3, r1
 800462a:	817b      	strh	r3, [r7, #10]
 800462c:	4613      	mov	r3, r2
 800462e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b20      	cmp	r3, #32
 800463e:	f040 80ef 	bne.w	8004820 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
 8004654:	e0e5      	b.n	8004822 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_I2C_Master_Transmit_DMA+0x48>
 8004660:	2302      	movs	r3, #2
 8004662:	e0de      	b.n	8004822 <HAL_I2C_Master_Transmit_DMA+0x206>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2221      	movs	r2, #33	@ 0x21
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2210      	movs	r2, #16
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	893a      	ldrh	r2, [r7, #8]
 800468c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a66      	ldr	r2, [pc, #408]	@ (800482c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a66      	ldr	r2, [pc, #408]	@ (8004830 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2bff      	cmp	r3, #255	@ 0xff
 80046a2:	d906      	bls.n	80046b2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	22ff      	movs	r2, #255	@ 0xff
 80046a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80046aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	e007      	b.n	80046c2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80046bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01a      	beq.n	8004700 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d074      	beq.n	80047f2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	2b00      	cmp	r3, #0
 800470e:	d022      	beq.n	8004756 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	4a47      	ldr	r2, [pc, #284]	@ (8004834 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004716:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	4a46      	ldr	r2, [pc, #280]	@ (8004838 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800471e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	2200      	movs	r2, #0
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	2200      	movs	r2, #0
 800472e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004740:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004746:	f7fd f999 	bl	8001a7c <HAL_DMA_Start_IT>
 800474a:	4603      	mov	r3, r0
 800474c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d13a      	bne.n	80047ca <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004754:	e013      	b.n	800477e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e051      	b.n	8004822 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3301      	adds	r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	8979      	ldrh	r1, [r7, #10]
 800478a:	4b2c      	ldr	r3, [pc, #176]	@ (800483c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f001 feb9 	bl	8006508 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80047b0:	2110      	movs	r1, #16
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 feda 	bl	800656c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e028      	b.n	800481c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0210 	orr.w	r2, r3, #16
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e017      	b.n	8004822 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a12      	ldr	r2, [pc, #72]	@ (8004840 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80047f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f001 fe7e 	bl	8006508 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004814:	2101      	movs	r1, #1
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f001 fea8 	bl	800656c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	ffff0000 	.word	0xffff0000
 8004830:	08004e5b 	.word	0x08004e5b
 8004834:	080061c3 	.word	0x080061c3
 8004838:	08006259 	.word	0x08006259
 800483c:	80002000 	.word	0x80002000
 8004840:	08004a1b 	.word	0x08004a1b

08004844 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
  }
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00f      	beq.n	80048ba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00f      	beq.n	80048e4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	f043 0208 	orr.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fc:	f043 0202 	orr.w	r2, r3, #2
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800490c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 030b 	and.w	r3, r3, #11
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fb13 	bl	8005f4c <I2C_ITError>
  }
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
 800498a:	4613      	mov	r3, r2
 800498c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0c:	b2db      	uxtb	r3, r3
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b088      	sub	sp, #32
 8004a1e:	af02      	add	r7, sp, #8
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <I2C_Master_ISR_IT+0x1e>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e113      	b.n	8004c60 <I2C_Master_ISR_IT+0x246>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00d      	beq.n	8004a70 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2210      	movs	r2, #16
 8004a5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a60:	f043 0204 	orr.w	r2, r3, #4
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f001 fb86 	bl	800617a <I2C_Flush_TXDR>
 8004a6e:	e0e4      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d022      	beq.n	8004ac0 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01d      	beq.n	8004ac0 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0304 	bic.w	r3, r3, #4
 8004a8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004abe:	e0bc      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d128      	bne.n	8004b1c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d023      	beq.n	8004b1c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01e      	beq.n	8004b1c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a8 	beq.w	8004c3a <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004b1a:	e08e      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d05c      	beq.n	8004be0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d057      	beq.n	8004be0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d040      	beq.n	8004bbc <I2C_Master_ISR_IT+0x1a2>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d13c      	bne.n	8004bbc <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b4e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2bff      	cmp	r3, #255	@ 0xff
 8004b58:	d90e      	bls.n	8004b78 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	22ff      	movs	r2, #255	@ 0xff
 8004b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	8a79      	ldrh	r1, [r7, #18]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f001 fcc9 	bl	8006508 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b76:	e032      	b.n	8004bde <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b8a:	d00b      	beq.n	8004ba4 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b90:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004b96:	8a79      	ldrh	r1, [r7, #18]
 8004b98:	2000      	movs	r0, #0
 8004b9a:	9000      	str	r0, [sp, #0]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f001 fcb3 	bl	8006508 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba2:	e01c      	b.n	8004bde <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	8a79      	ldrh	r1, [r7, #18]
 8004bac:	2300      	movs	r3, #0
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 fca7 	bl	8006508 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bba:	e010      	b.n	8004bde <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bca:	d003      	beq.n	8004bd4 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fdb3 	bl	8005738 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bd2:	e032      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004bd4:	2140      	movs	r1, #64	@ 0x40
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f001 f9b8 	bl	8005f4c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bdc:	e02d      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
 8004bde:	e02c      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d027      	beq.n	8004c3a <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d119      	bne.n	8004c32 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c0c:	d015      	beq.n	8004c3a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c16:	d108      	bne.n	8004c2a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	e007      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fd84 	bl	8005738 <I2C_ITMasterSeqCplt>
 8004c30:	e003      	b.n	8004c3a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c32:	2140      	movs	r1, #64	@ 0x40
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f001 f989 	bl	8005f4c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fe0b 	bl	800586c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <I2C_Slave_ISR_IT+0x24>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0e2      	b.n	8004e52 <I2C_Slave_ISR_IT+0x1ea>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ca8:	6939      	ldr	r1, [r7, #16]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fea6 	bl	80059fc <I2C_ITSlaveCplt>
 8004cb0:	e0ca      	b.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d04b      	beq.n	8004d54 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d046      	beq.n	8004d54 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d128      	bne.n	8004d22 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b28      	cmp	r3, #40	@ 0x28
 8004cda:	d108      	bne.n	8004cee <I2C_Slave_ISR_IT+0x86>
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ce2:	d104      	bne.n	8004cee <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f001 f8dc 	bl	8005ea4 <I2C_ITListenCplt>
 8004cec:	e031      	b.n	8004d52 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b29      	cmp	r3, #41	@ 0x29
 8004cf8:	d10e      	bne.n	8004d18 <I2C_Slave_ISR_IT+0xb0>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d00:	d00a      	beq.n	8004d18 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2210      	movs	r2, #16
 8004d08:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f001 fa35 	bl	800617a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fd4e 	bl	80057b2 <I2C_ITSlaveSeqCplt>
 8004d16:	e01c      	b.n	8004d52 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004d20:	e08f      	b.n	8004e42 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2210      	movs	r2, #16
 8004d28:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <I2C_Slave_ISR_IT+0xdc>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d42:	d17e      	bne.n	8004e42 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d48:	4619      	mov	r1, r3
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f001 f8fe 	bl	8005f4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d50:	e077      	b.n	8004e42 <I2C_Slave_ISR_IT+0x1da>
 8004d52:	e076      	b.n	8004e42 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02f      	beq.n	8004dbe <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d02a      	beq.n	8004dbe <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d14b      	bne.n	8004e46 <I2C_Slave_ISR_IT+0x1de>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004db4:	d047      	beq.n	8004e46 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fcfb 	bl	80057b2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004dbc:	e043      	b.n	8004e46 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004dd2:	6939      	ldr	r1, [r7, #16]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fc2b 	bl	8005630 <I2C_ITAddrCplt>
 8004dda:	e035      	b.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d030      	beq.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02b      	beq.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e2a:	e00d      	b.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e32:	d002      	beq.n	8004e3a <I2C_Slave_ISR_IT+0x1d2>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fcb9 	bl	80057b2 <I2C_ITSlaveSeqCplt>
 8004e40:	e002      	b.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004e46:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b088      	sub	sp, #32
 8004e5e:	af02      	add	r7, sp, #8
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <I2C_Master_ISR_DMA+0x1a>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e0d9      	b.n	8005028 <I2C_Master_ISR_DMA+0x1ce>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d011      	beq.n	8004eb4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2210      	movs	r2, #16
 8004e96:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004ea4:	2120      	movs	r1, #32
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f001 fb60 	bl	800656c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f001 f964 	bl	800617a <I2C_Flush_TXDR>
 8004eb2:	e0b4      	b.n	800501e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d071      	beq.n	8004fa2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d06c      	beq.n	8004fa2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04e      	beq.n	8004f80 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2bff      	cmp	r3, #255	@ 0xff
 8004ef8:	d906      	bls.n	8004f08 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	22ff      	movs	r2, #255	@ 0xff
 8004efe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004f00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e010      	b.n	8004f2a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f1a:	d003      	beq.n	8004f24 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e002      	b.n	8004f2a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004f24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f28:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	8a79      	ldrh	r1, [r7, #18]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f001 fae5 	bl	8006508 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b22      	cmp	r3, #34	@ 0x22
 8004f5a:	d108      	bne.n	8004f6e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f6c:	e057      	b.n	800501e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f7e:	e04e      	b.n	800501e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f8e:	d003      	beq.n	8004f98 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fbd1 	bl	8005738 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004f96:	e042      	b.n	800501e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f98:	2140      	movs	r1, #64	@ 0x40
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 ffd6 	bl	8005f4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004fa0:	e03d      	b.n	800501e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d028      	beq.n	8004ffe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d023      	beq.n	8004ffe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d119      	bne.n	8004ff4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fce:	d025      	beq.n	800501c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fd8:	d108      	bne.n	8004fec <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fe8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004fea:	e017      	b.n	800501c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fba3 	bl	8005738 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004ff2:	e013      	b.n	800501c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004ff4:	2140      	movs	r1, #64	@ 0x40
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 ffa8 	bl	8005f4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004ffc:	e00e      	b.n	800501c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fc29 	bl	800586c <I2C_ITMasterCplt>
 800501a:	e000      	b.n	800501e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800501c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800503c:	4b8d      	ldr	r3, [pc, #564]	@ (8005274 <I2C_Mem_ISR_DMA+0x244>)
 800503e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <I2C_Mem_ISR_DMA+0x1e>
 800504a:	2302      	movs	r3, #2
 800504c:	e10e      	b.n	800526c <I2C_Mem_ISR_DMA+0x23c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005066:	2b00      	cmp	r3, #0
 8005068:	d011      	beq.n	800508e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2210      	movs	r2, #16
 8005070:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f043 0204 	orr.w	r2, r3, #4
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800507e:	2120      	movs	r1, #32
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f001 fa73 	bl	800656c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f001 f877 	bl	800617a <I2C_Flush_TXDR>
 800508c:	e0e9      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00e      	beq.n	80050b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80050b4:	e0d5      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05f      	beq.n	8005180 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d05a      	beq.n	8005180 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80050ca:	2101      	movs	r1, #1
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f001 fad1 	bl	8006674 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80050d2:	2110      	movs	r1, #16
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f001 fa49 	bl	800656c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d048      	beq.n	8005176 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2bff      	cmp	r3, #255	@ 0xff
 80050ec:	d910      	bls.n	8005110 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	22ff      	movs	r2, #255	@ 0xff
 80050f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f8:	b299      	uxth	r1, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	2300      	movs	r3, #0
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f001 f9fd 	bl	8006508 <I2C_TransferConfig>
 800510e:	e011      	b.n	8005134 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511e:	b299      	uxth	r1, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	2300      	movs	r3, #0
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 f9ea 	bl	8006508 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b22      	cmp	r3, #34	@ 0x22
 8005150:	d108      	bne.n	8005164 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005160:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005162:	e07e      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005172:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005174:	e075      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005176:	2140      	movs	r1, #64	@ 0x40
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fee7 	bl	8005f4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800517e:	e070      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d05d      	beq.n	8005246 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005190:	2b00      	cmp	r3, #0
 8005192:	d058      	beq.n	8005246 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005194:	2101      	movs	r1, #1
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f001 fa6c 	bl	8006674 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800519c:	2110      	movs	r1, #16
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f001 f9e4 	bl	800656c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b22      	cmp	r3, #34	@ 0x22
 80051ae:	d101      	bne.n	80051b4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80051b0:	4b31      	ldr	r3, [pc, #196]	@ (8005278 <I2C_Mem_ISR_DMA+0x248>)
 80051b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2bff      	cmp	r3, #255	@ 0xff
 80051bc:	d910      	bls.n	80051e0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	22ff      	movs	r2, #255	@ 0xff
 80051c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	b299      	uxth	r1, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f001 f995 	bl	8006508 <I2C_TransferConfig>
 80051de:	e011      	b.n	8005204 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ee:	b299      	uxth	r1, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f001 f982 	bl	8006508 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b22      	cmp	r3, #34	@ 0x22
 8005220:	d108      	bne.n	8005234 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005230:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005232:	e016      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005242:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005244:	e00d      	b.n	8005262 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fb05 	bl	800586c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	80002000 	.word	0x80002000
 8005278:	80002400 	.word	0x80002400

0800527c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <I2C_Slave_ISR_DMA+0x24>
 800529c:	2302      	movs	r3, #2
 800529e:	e1c2      	b.n	8005626 <I2C_Slave_ISR_DMA+0x3aa>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fb9c 	bl	80059fc <I2C_ITSlaveCplt>
 80052c4:	e1aa      	b.n	800561c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8197 	beq.w	8005600 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8191 	beq.w	8005600 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 817f 	beq.w	80055f2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d07b      	beq.n	80053f4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d076      	beq.n	80053f4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a74      	ldr	r2, [pc, #464]	@ (80054e0 <I2C_Slave_ISR_DMA+0x264>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d059      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a72      	ldr	r2, [pc, #456]	@ (80054e4 <I2C_Slave_ISR_DMA+0x268>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d053      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a70      	ldr	r2, [pc, #448]	@ (80054e8 <I2C_Slave_ISR_DMA+0x26c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d04d      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6e      	ldr	r2, [pc, #440]	@ (80054ec <I2C_Slave_ISR_DMA+0x270>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d047      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6c      	ldr	r2, [pc, #432]	@ (80054f0 <I2C_Slave_ISR_DMA+0x274>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d041      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a6a      	ldr	r2, [pc, #424]	@ (80054f4 <I2C_Slave_ISR_DMA+0x278>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d03b      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a68      	ldr	r2, [pc, #416]	@ (80054f8 <I2C_Slave_ISR_DMA+0x27c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d035      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a66      	ldr	r2, [pc, #408]	@ (80054fc <I2C_Slave_ISR_DMA+0x280>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02f      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a64      	ldr	r2, [pc, #400]	@ (8005500 <I2C_Slave_ISR_DMA+0x284>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d029      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a62      	ldr	r2, [pc, #392]	@ (8005504 <I2C_Slave_ISR_DMA+0x288>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d023      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a60      	ldr	r2, [pc, #384]	@ (8005508 <I2C_Slave_ISR_DMA+0x28c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5e      	ldr	r2, [pc, #376]	@ (800550c <I2C_Slave_ISR_DMA+0x290>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d017      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5c      	ldr	r2, [pc, #368]	@ (8005510 <I2C_Slave_ISR_DMA+0x294>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d011      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005514 <I2C_Slave_ISR_DMA+0x298>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a58      	ldr	r2, [pc, #352]	@ (8005518 <I2C_Slave_ISR_DMA+0x29c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d005      	beq.n	80053c6 <I2C_Slave_ISR_DMA+0x14a>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a56      	ldr	r2, [pc, #344]	@ (800551c <I2C_Slave_ISR_DMA+0x2a0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d109      	bne.n	80053da <I2C_Slave_ISR_DMA+0x15e>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e008      	b.n	80053ec <I2C_Slave_ISR_DMA+0x170>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 80053f0:	2301      	movs	r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 809e 	beq.w	800553a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8098 	beq.w	800553a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <I2C_Slave_ISR_DMA+0x264>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d059      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a31      	ldr	r2, [pc, #196]	@ (80054e4 <I2C_Slave_ISR_DMA+0x268>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d053      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2f      	ldr	r2, [pc, #188]	@ (80054e8 <I2C_Slave_ISR_DMA+0x26c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d04d      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	@ (80054ec <I2C_Slave_ISR_DMA+0x270>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d047      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2b      	ldr	r2, [pc, #172]	@ (80054f0 <I2C_Slave_ISR_DMA+0x274>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d041      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a29      	ldr	r2, [pc, #164]	@ (80054f4 <I2C_Slave_ISR_DMA+0x278>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d03b      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a27      	ldr	r2, [pc, #156]	@ (80054f8 <I2C_Slave_ISR_DMA+0x27c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d035      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a25      	ldr	r2, [pc, #148]	@ (80054fc <I2C_Slave_ISR_DMA+0x280>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02f      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a23      	ldr	r2, [pc, #140]	@ (8005500 <I2C_Slave_ISR_DMA+0x284>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d029      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <I2C_Slave_ISR_DMA+0x288>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d023      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	@ (8005508 <I2C_Slave_ISR_DMA+0x28c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01d      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1d      	ldr	r2, [pc, #116]	@ (800550c <I2C_Slave_ISR_DMA+0x290>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d017      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005510 <I2C_Slave_ISR_DMA+0x294>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d011      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <I2C_Slave_ISR_DMA+0x298>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <I2C_Slave_ISR_DMA+0x29c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d005      	beq.n	80054ca <I2C_Slave_ISR_DMA+0x24e>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a15      	ldr	r2, [pc, #84]	@ (800551c <I2C_Slave_ISR_DMA+0x2a0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d12a      	bne.n	8005520 <I2C_Slave_ISR_DMA+0x2a4>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	e029      	b.n	8005532 <I2C_Slave_ISR_DMA+0x2b6>
 80054de:	bf00      	nop
 80054e0:	40020010 	.word	0x40020010
 80054e4:	40020028 	.word	0x40020028
 80054e8:	40020040 	.word	0x40020040
 80054ec:	40020058 	.word	0x40020058
 80054f0:	40020070 	.word	0x40020070
 80054f4:	40020088 	.word	0x40020088
 80054f8:	400200a0 	.word	0x400200a0
 80054fc:	400200b8 	.word	0x400200b8
 8005500:	40020410 	.word	0x40020410
 8005504:	40020428 	.word	0x40020428
 8005508:	40020440 	.word	0x40020440
 800550c:	40020458 	.word	0x40020458
 8005510:	40020470 	.word	0x40020470
 8005514:	40020488 	.word	0x40020488
 8005518:	400204a0 	.word	0x400204a0
 800551c:	400204b8 	.word	0x400204b8
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8005536:	2301      	movs	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d128      	bne.n	8005592 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b28      	cmp	r3, #40	@ 0x28
 800554a:	d108      	bne.n	800555e <I2C_Slave_ISR_DMA+0x2e2>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005552:	d104      	bne.n	800555e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fca4 	bl	8005ea4 <I2C_ITListenCplt>
 800555c:	e048      	b.n	80055f0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b29      	cmp	r3, #41	@ 0x29
 8005568:	d10e      	bne.n	8005588 <I2C_Slave_ISR_DMA+0x30c>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005570:	d00a      	beq.n	8005588 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2210      	movs	r2, #16
 8005578:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fdfd 	bl	800617a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f916 	bl	80057b2 <I2C_ITSlaveSeqCplt>
 8005586:	e033      	b.n	80055f0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2210      	movs	r2, #16
 800558e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005590:	e034      	b.n	80055fc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2210      	movs	r2, #16
 8005598:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	f043 0204 	orr.w	r2, r3, #4
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <I2C_Slave_ISR_DMA+0x340>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ba:	d11f      	bne.n	80055fc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b21      	cmp	r3, #33	@ 0x21
 80055c0:	d002      	beq.n	80055c8 <I2C_Slave_ISR_DMA+0x34c>
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b29      	cmp	r3, #41	@ 0x29
 80055c6:	d103      	bne.n	80055d0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2221      	movs	r2, #33	@ 0x21
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80055ce:	e008      	b.n	80055e2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
 80055d2:	2b22      	cmp	r3, #34	@ 0x22
 80055d4:	d002      	beq.n	80055dc <I2C_Slave_ISR_DMA+0x360>
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055da:	d102      	bne.n	80055e2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2222      	movs	r2, #34	@ 0x22
 80055e0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fcaf 	bl	8005f4c <I2C_ITError>
      if (treatdmanack == 1U)
 80055ee:	e005      	b.n	80055fc <I2C_Slave_ISR_DMA+0x380>
 80055f0:	e004      	b.n	80055fc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2210      	movs	r2, #16
 80055f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055fa:	e00f      	b.n	800561c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 80055fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055fe:	e00d      	b.n	800561c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f80a 	bl	8005630 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop

08005630 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005646:	2b28      	cmp	r3, #40	@ 0x28
 8005648:	d16a      	bne.n	8005720 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	b29b      	uxth	r3, r3
 8005664:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005668:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005676:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005684:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d138      	bne.n	8005700 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	09db      	lsrs	r3, r3, #7
 8005692:	b29a      	uxth	r2, r3
 8005694:	89bb      	ldrh	r3, [r7, #12]
 8005696:	4053      	eors	r3, r2
 8005698:	b29b      	uxth	r3, r3
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d11c      	bne.n	80056dc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80056a2:	897b      	ldrh	r3, [r7, #10]
 80056a4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d13b      	bne.n	8005730 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2208      	movs	r2, #8
 80056c4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056ce:	89ba      	ldrh	r2, [r7, #12]
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff f952 	bl	800497e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80056da:	e029      	b.n	8005730 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80056dc:	893b      	ldrh	r3, [r7, #8]
 80056de:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 ffc5 	bl	8006674 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056f2:	89ba      	ldrh	r2, [r7, #12]
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff f940 	bl	800497e <HAL_I2C_AddrCallback>
}
 80056fe:	e017      	b.n	8005730 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005700:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 ffb5 	bl	8006674 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005712:	89ba      	ldrh	r2, [r7, #12]
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff f930 	bl	800497e <HAL_I2C_AddrCallback>
}
 800571e:	e007      	b.n	8005730 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2208      	movs	r2, #8
 8005726:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b21      	cmp	r3, #33	@ 0x21
 8005752:	d115      	bne.n	8005780 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2211      	movs	r2, #17
 8005760:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005768:	2101      	movs	r1, #1
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 ff82 	bl	8006674 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff f8d8 	bl	800492e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800577e:	e014      	b.n	80057aa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2212      	movs	r2, #18
 800578c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005794:	2102      	movs	r1, #2
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 ff6c 	bl	8006674 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff f8cc 	bl	8004942 <HAL_I2C_MasterRxCpltCallback>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e00c      	b.n	8005800 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057fe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b29      	cmp	r3, #41	@ 0x29
 800580a:	d112      	bne.n	8005832 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2228      	movs	r2, #40	@ 0x28
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2221      	movs	r2, #33	@ 0x21
 8005818:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800581a:	2101      	movs	r1, #1
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 ff29 	bl	8006674 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff f893 	bl	8004956 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005830:	e017      	b.n	8005862 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b2a      	cmp	r3, #42	@ 0x2a
 800583c:	d111      	bne.n	8005862 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2228      	movs	r2, #40	@ 0x28
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2222      	movs	r2, #34	@ 0x22
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800584c:	2102      	movs	r1, #2
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 ff10 	bl	8006674 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff f884 	bl	800496a <HAL_I2C_SlaveRxCpltCallback>
}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2220      	movs	r2, #32
 8005880:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b21      	cmp	r3, #33	@ 0x21
 800588c:	d107      	bne.n	800589e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800588e:	2101      	movs	r1, #1
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 feef 	bl	8006674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2211      	movs	r2, #17
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
 800589c:	e00c      	b.n	80058b8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b22      	cmp	r3, #34	@ 0x22
 80058a8:	d106      	bne.n	80058b8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058aa:	2102      	movs	r1, #2
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fee1 	bl	8006674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2212      	movs	r2, #18
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b4c      	ldr	r3, [pc, #304]	@ (80059f4 <I2C_ITMasterCplt+0x188>)
 80058c4:	400b      	ands	r3, r1
 80058c6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a49      	ldr	r2, [pc, #292]	@ (80059f8 <I2C_ITMasterCplt+0x18c>)
 80058d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2210      	movs	r2, #16
 80058e4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	f043 0204 	orr.w	r2, r3, #4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b60      	cmp	r3, #96	@ 0x60
 80058fc:	d10a      	bne.n	8005914 <I2C_ITMasterCplt+0xa8>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	b2db      	uxtb	r3, r3
 8005910:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005912:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fc30 	bl	800617a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b60      	cmp	r3, #96	@ 0x60
 800592a:	d002      	beq.n	8005932 <I2C_ITMasterCplt+0xc6>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fb07 	bl	8005f4c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800593e:	e054      	b.n	80059ea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b21      	cmp	r3, #33	@ 0x21
 800594a:	d124      	bne.n	8005996 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b40      	cmp	r3, #64	@ 0x40
 8005964:	d10b      	bne.n	800597e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff f819 	bl	80049ae <HAL_I2C_MemTxCpltCallback>
}
 800597c:	e035      	b.n	80059ea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fe ffcd 	bl	800492e <HAL_I2C_MasterTxCpltCallback>
}
 8005994:	e029      	b.n	80059ea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b22      	cmp	r3, #34	@ 0x22
 80059a0:	d123      	bne.n	80059ea <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d10b      	bne.n	80059d4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe fff8 	bl	80049c2 <HAL_I2C_MemRxCpltCallback>
}
 80059d2:	e00a      	b.n	80059ea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fe ffac 	bl	8004942 <HAL_I2C_MasterRxCpltCallback>
}
 80059ea:	bf00      	nop
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	fe00e800 	.word	0xfe00e800
 80059f8:	ffff0000 	.word	0xffff0000

080059fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2220      	movs	r2, #32
 8005a26:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a28:	7afb      	ldrb	r3, [r7, #11]
 8005a2a:	2b21      	cmp	r3, #33	@ 0x21
 8005a2c:	d002      	beq.n	8005a34 <I2C_ITSlaveCplt+0x38>
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	2b29      	cmp	r3, #41	@ 0x29
 8005a32:	d108      	bne.n	8005a46 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005a34:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fe1b 	bl	8006674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2221      	movs	r2, #33	@ 0x21
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a44:	e019      	b.n	8005a7a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	2b22      	cmp	r3, #34	@ 0x22
 8005a4a:	d002      	beq.n	8005a52 <I2C_ITSlaveCplt+0x56>
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a50:	d108      	bne.n	8005a64 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005a52:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fe0c 	bl	8006674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2222      	movs	r2, #34	@ 0x22
 8005a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a62:	e00a      	b.n	8005a7a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	2b28      	cmp	r3, #40	@ 0x28
 8005a68:	d107      	bne.n	8005a7a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005a6a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fe00 	bl	8006674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a88:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	4b7f      	ldr	r3, [pc, #508]	@ (8005c94 <I2C_ITSlaveCplt+0x298>)
 8005a96:	400b      	ands	r3, r1
 8005a98:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fb6d 	bl	800617a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d07a      	beq.n	8005ba0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ab8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8111 	beq.w	8005ce6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a73      	ldr	r2, [pc, #460]	@ (8005c98 <I2C_ITSlaveCplt+0x29c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d059      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a71      	ldr	r2, [pc, #452]	@ (8005c9c <I2C_ITSlaveCplt+0x2a0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d053      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8005ca0 <I2C_ITSlaveCplt+0x2a4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04d      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a6d      	ldr	r2, [pc, #436]	@ (8005ca4 <I2C_ITSlaveCplt+0x2a8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d047      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a6b      	ldr	r2, [pc, #428]	@ (8005ca8 <I2C_ITSlaveCplt+0x2ac>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d041      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a69      	ldr	r2, [pc, #420]	@ (8005cac <I2C_ITSlaveCplt+0x2b0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d03b      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a67      	ldr	r2, [pc, #412]	@ (8005cb0 <I2C_ITSlaveCplt+0x2b4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d035      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a65      	ldr	r2, [pc, #404]	@ (8005cb4 <I2C_ITSlaveCplt+0x2b8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d02f      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a63      	ldr	r2, [pc, #396]	@ (8005cb8 <I2C_ITSlaveCplt+0x2bc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d029      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a61      	ldr	r2, [pc, #388]	@ (8005cbc <I2C_ITSlaveCplt+0x2c0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d023      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5f      	ldr	r2, [pc, #380]	@ (8005cc0 <I2C_ITSlaveCplt+0x2c4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01d      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8005cc4 <I2C_ITSlaveCplt+0x2c8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d017      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005cc8 <I2C_ITSlaveCplt+0x2cc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d011      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a59      	ldr	r2, [pc, #356]	@ (8005ccc <I2C_ITSlaveCplt+0x2d0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a57      	ldr	r2, [pc, #348]	@ (8005cd0 <I2C_ITSlaveCplt+0x2d4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d005      	beq.n	8005b84 <I2C_ITSlaveCplt+0x188>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a55      	ldr	r2, [pc, #340]	@ (8005cd4 <I2C_ITSlaveCplt+0x2d8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d105      	bne.n	8005b90 <I2C_ITSlaveCplt+0x194>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	e004      	b.n	8005b9a <I2C_ITSlaveCplt+0x19e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005b9e:	e0a2      	b.n	8005ce6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 809d 	beq.w	8005ce6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8090 	beq.w	8005ce6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a32      	ldr	r2, [pc, #200]	@ (8005c98 <I2C_ITSlaveCplt+0x29c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d059      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a30      	ldr	r2, [pc, #192]	@ (8005c9c <I2C_ITSlaveCplt+0x2a0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d053      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ca0 <I2C_ITSlaveCplt+0x2a4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04d      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca4 <I2C_ITSlaveCplt+0x2a8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d047      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca8 <I2C_ITSlaveCplt+0x2ac>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d041      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a28      	ldr	r2, [pc, #160]	@ (8005cac <I2C_ITSlaveCplt+0x2b0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d03b      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a26      	ldr	r2, [pc, #152]	@ (8005cb0 <I2C_ITSlaveCplt+0x2b4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d035      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a24      	ldr	r2, [pc, #144]	@ (8005cb4 <I2C_ITSlaveCplt+0x2b8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02f      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a22      	ldr	r2, [pc, #136]	@ (8005cb8 <I2C_ITSlaveCplt+0x2bc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d029      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <I2C_ITSlaveCplt+0x2c0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d023      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc0 <I2C_ITSlaveCplt+0x2c4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc4 <I2C_ITSlaveCplt+0x2c8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d017      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc8 <I2C_ITSlaveCplt+0x2cc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d011      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <I2C_ITSlaveCplt+0x2d0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00b      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <I2C_ITSlaveCplt+0x2d4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d005      	beq.n	8005c86 <I2C_ITSlaveCplt+0x28a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a14      	ldr	r2, [pc, #80]	@ (8005cd4 <I2C_ITSlaveCplt+0x2d8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d128      	bne.n	8005cd8 <I2C_ITSlaveCplt+0x2dc>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	e027      	b.n	8005ce2 <I2C_ITSlaveCplt+0x2e6>
 8005c92:	bf00      	nop
 8005c94:	fe00e800 	.word	0xfe00e800
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d020      	beq.n	8005d32 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d40:	f043 0204 	orr.w	r2, r3, #4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d049      	beq.n	8005de6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d044      	beq.n	8005de6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d128      	bne.n	8005db8 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b28      	cmp	r3, #40	@ 0x28
 8005d70:	d108      	bne.n	8005d84 <I2C_ITSlaveCplt+0x388>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d78:	d104      	bne.n	8005d84 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f891 	bl	8005ea4 <I2C_ITListenCplt>
 8005d82:	e030      	b.n	8005de6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b29      	cmp	r3, #41	@ 0x29
 8005d8e:	d10e      	bne.n	8005dae <I2C_ITSlaveCplt+0x3b2>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d96:	d00a      	beq.n	8005dae <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f9ea 	bl	800617a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fd03 	bl	80057b2 <I2C_ITSlaveSeqCplt>
 8005dac:	e01b      	b.n	8005de6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2210      	movs	r2, #16
 8005db4:	61da      	str	r2, [r3, #28]
 8005db6:	e016      	b.n	8005de6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	f043 0204 	orr.w	r2, r3, #4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <I2C_ITSlaveCplt+0x3de>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dd8:	d105      	bne.n	8005de6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8b3 	bl	8005f4c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8a2 	bl	8005f4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b28      	cmp	r3, #40	@ 0x28
 8005e12:	d141      	bne.n	8005e98 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e14:	6979      	ldr	r1, [r7, #20]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f844 	bl	8005ea4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e1c:	e03c      	b.n	8005e98 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e26:	d014      	beq.n	8005e52 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fcc2 	bl	80057b2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea0 <I2C_ITSlaveCplt+0x4a4>)
 8005e32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fe fda5 	bl	800499a <HAL_I2C_ListenCpltCallback>
}
 8005e50:	e022      	b.n	8005e98 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b22      	cmp	r3, #34	@ 0x22
 8005e5c:	d10e      	bne.n	8005e7c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fe fd78 	bl	800496a <HAL_I2C_SlaveRxCpltCallback>
}
 8005e7a:	e00d      	b.n	8005e98 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fe fd5f 	bl	8004956 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e98:	bf00      	nop
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	ffff0000 	.word	0xffff0000

08005ea4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a25      	ldr	r2, [pc, #148]	@ (8005f48 <I2C_ITListenCplt+0xa4>)
 8005eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d022      	beq.n	8005f20 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d012      	beq.n	8005f20 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f20:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fba5 	bl	8006674 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2210      	movs	r2, #16
 8005f30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fe fd2d 	bl	800499a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	ffff0000 	.word	0xffff0000

08005f4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f5c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a6d      	ldr	r2, [pc, #436]	@ (8006120 <I2C_ITError+0x1d4>)
 8005f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b28      	cmp	r3, #40	@ 0x28
 8005f82:	d005      	beq.n	8005f90 <I2C_ITError+0x44>
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2b29      	cmp	r3, #41	@ 0x29
 8005f88:	d002      	beq.n	8005f90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f8e:	d10b      	bne.n	8005fa8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f90:	2103      	movs	r1, #3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fb6e 	bl	8006674 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2228      	movs	r2, #40	@ 0x28
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a60      	ldr	r2, [pc, #384]	@ (8006124 <I2C_ITError+0x1d8>)
 8005fa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005fa6:	e030      	b.n	800600a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fa8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb61 	bl	8006674 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8e1 	bl	800617a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b60      	cmp	r3, #96	@ 0x60
 8005fc2:	d01f      	beq.n	8006004 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d114      	bne.n	8006004 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d109      	bne.n	8005ffc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2210      	movs	r2, #16
 8005fee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff4:	f043 0204 	orr.w	r2, r3, #4
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2220      	movs	r2, #32
 8006002:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d039      	beq.n	800608c <I2C_ITError+0x140>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b11      	cmp	r3, #17
 800601c:	d002      	beq.n	8006024 <I2C_ITError+0xd8>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b21      	cmp	r3, #33	@ 0x21
 8006022:	d133      	bne.n	800608c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800602e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006032:	d107      	bne.n	8006044 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006042:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	4618      	mov	r0, r3
 800604a:	f7fd fc47 	bl	80038dc <HAL_DMA_GetState>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d017      	beq.n	8006084 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	4a33      	ldr	r2, [pc, #204]	@ (8006128 <I2C_ITError+0x1dc>)
 800605a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	4618      	mov	r0, r3
 800606a:	f7fc fa8f 	bl	800258c <HAL_DMA_Abort_IT>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d04d      	beq.n	8006110 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006082:	e045      	b.n	8006110 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f851 	bl	800612c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800608a:	e041      	b.n	8006110 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d039      	beq.n	8006108 <I2C_ITError+0x1bc>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b12      	cmp	r3, #18
 8006098:	d002      	beq.n	80060a0 <I2C_ITError+0x154>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b22      	cmp	r3, #34	@ 0x22
 800609e:	d133      	bne.n	8006108 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ae:	d107      	bne.n	80060c0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd fc09 	bl	80038dc <HAL_DMA_GetState>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d017      	beq.n	8006100 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	4a14      	ldr	r2, [pc, #80]	@ (8006128 <I2C_ITError+0x1dc>)
 80060d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fc fa51 	bl	800258c <HAL_DMA_Abort_IT>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d011      	beq.n	8006114 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060fa:	4610      	mov	r0, r2
 80060fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060fe:	e009      	b.n	8006114 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f813 	bl	800612c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006106:	e005      	b.n	8006114 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f80f 	bl	800612c <I2C_TreatErrorCallback>
  }
}
 800610e:	e002      	b.n	8006116 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006114:	bf00      	nop
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	ffff0000 	.word	0xffff0000
 8006124:	08004c69 	.word	0x08004c69
 8006128:	080064cd 	.word	0x080064cd

0800612c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b60      	cmp	r3, #96	@ 0x60
 800613e:	d10e      	bne.n	800615e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe fc47 	bl	80049ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800615c:	e009      	b.n	8006172 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fe fc32 	bl	80049d6 <HAL_I2C_ErrorCallback>
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b02      	cmp	r3, #2
 800618e:	d103      	bne.n	8006198 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2200      	movs	r2, #0
 8006196:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d007      	beq.n	80061b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	619a      	str	r2, [r3, #24]
  }
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061de:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061ea:	2120      	movs	r1, #32
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f9bd 	bl	800656c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80061f2:	e02d      	b.n	8006250 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80061fc:	441a      	add	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2bff      	cmp	r3, #255	@ 0xff
 800620a:	d903      	bls.n	8006214 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	22ff      	movs	r2, #255	@ 0xff
 8006210:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006212:	e004      	b.n	800621e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	4619      	mov	r1, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3328      	adds	r3, #40	@ 0x28
 800622e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006234:	f7fb fc22 	bl	8001a7c <HAL_DMA_Start_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800623e:	2110      	movs	r1, #16
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fe83 	bl	8005f4c <I2C_ITError>
}
 8006246:	e003      	b.n	8006250 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006248:	2140      	movs	r1, #64	@ 0x40
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f98e 	bl	800656c <I2C_Enable_IRQ>
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006268:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	2b00      	cmp	r3, #0
 8006270:	d076      	beq.n	8006360 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a71      	ldr	r2, [pc, #452]	@ (8006440 <I2C_DMAError+0x1e8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d059      	beq.n	8006332 <I2C_DMAError+0xda>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a6f      	ldr	r2, [pc, #444]	@ (8006444 <I2C_DMAError+0x1ec>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d053      	beq.n	8006332 <I2C_DMAError+0xda>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6d      	ldr	r2, [pc, #436]	@ (8006448 <I2C_DMAError+0x1f0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d04d      	beq.n	8006332 <I2C_DMAError+0xda>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6b      	ldr	r2, [pc, #428]	@ (800644c <I2C_DMAError+0x1f4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d047      	beq.n	8006332 <I2C_DMAError+0xda>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a69      	ldr	r2, [pc, #420]	@ (8006450 <I2C_DMAError+0x1f8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d041      	beq.n	8006332 <I2C_DMAError+0xda>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a67      	ldr	r2, [pc, #412]	@ (8006454 <I2C_DMAError+0x1fc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d03b      	beq.n	8006332 <I2C_DMAError+0xda>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a65      	ldr	r2, [pc, #404]	@ (8006458 <I2C_DMAError+0x200>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d035      	beq.n	8006332 <I2C_DMAError+0xda>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a63      	ldr	r2, [pc, #396]	@ (800645c <I2C_DMAError+0x204>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02f      	beq.n	8006332 <I2C_DMAError+0xda>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a61      	ldr	r2, [pc, #388]	@ (8006460 <I2C_DMAError+0x208>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d029      	beq.n	8006332 <I2C_DMAError+0xda>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006464 <I2C_DMAError+0x20c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d023      	beq.n	8006332 <I2C_DMAError+0xda>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a5d      	ldr	r2, [pc, #372]	@ (8006468 <I2C_DMAError+0x210>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01d      	beq.n	8006332 <I2C_DMAError+0xda>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5b      	ldr	r2, [pc, #364]	@ (800646c <I2C_DMAError+0x214>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d017      	beq.n	8006332 <I2C_DMAError+0xda>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a59      	ldr	r2, [pc, #356]	@ (8006470 <I2C_DMAError+0x218>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d011      	beq.n	8006332 <I2C_DMAError+0xda>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a57      	ldr	r2, [pc, #348]	@ (8006474 <I2C_DMAError+0x21c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <I2C_DMAError+0xda>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a55      	ldr	r2, [pc, #340]	@ (8006478 <I2C_DMAError+0x220>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d005      	beq.n	8006332 <I2C_DMAError+0xda>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a53      	ldr	r2, [pc, #332]	@ (800647c <I2C_DMAError+0x224>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d109      	bne.n	8006346 <I2C_DMAError+0xee>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e008      	b.n	8006358 <I2C_DMAError+0x100>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf0c      	ite	eq
 8006352:	2301      	moveq	r3, #1
 8006354:	2300      	movne	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800635c:	2301      	movs	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8098 	beq.w	800649a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a33      	ldr	r2, [pc, #204]	@ (8006440 <I2C_DMAError+0x1e8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d059      	beq.n	800642a <I2C_DMAError+0x1d2>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a31      	ldr	r2, [pc, #196]	@ (8006444 <I2C_DMAError+0x1ec>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d053      	beq.n	800642a <I2C_DMAError+0x1d2>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2f      	ldr	r2, [pc, #188]	@ (8006448 <I2C_DMAError+0x1f0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d04d      	beq.n	800642a <I2C_DMAError+0x1d2>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2d      	ldr	r2, [pc, #180]	@ (800644c <I2C_DMAError+0x1f4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d047      	beq.n	800642a <I2C_DMAError+0x1d2>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006450 <I2C_DMAError+0x1f8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d041      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a29      	ldr	r2, [pc, #164]	@ (8006454 <I2C_DMAError+0x1fc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a27      	ldr	r2, [pc, #156]	@ (8006458 <I2C_DMAError+0x200>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d035      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a25      	ldr	r2, [pc, #148]	@ (800645c <I2C_DMAError+0x204>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02f      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a23      	ldr	r2, [pc, #140]	@ (8006460 <I2C_DMAError+0x208>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d029      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a21      	ldr	r2, [pc, #132]	@ (8006464 <I2C_DMAError+0x20c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d023      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006468 <I2C_DMAError+0x210>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1d      	ldr	r2, [pc, #116]	@ (800646c <I2C_DMAError+0x214>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d017      	beq.n	800642a <I2C_DMAError+0x1d2>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <I2C_DMAError+0x218>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d011      	beq.n	800642a <I2C_DMAError+0x1d2>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a19      	ldr	r2, [pc, #100]	@ (8006474 <I2C_DMAError+0x21c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <I2C_DMAError+0x1d2>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a17      	ldr	r2, [pc, #92]	@ (8006478 <I2C_DMAError+0x220>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d005      	beq.n	800642a <I2C_DMAError+0x1d2>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a15      	ldr	r2, [pc, #84]	@ (800647c <I2C_DMAError+0x224>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d12a      	bne.n	8006480 <I2C_DMAError+0x228>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e029      	b.n	8006492 <I2C_DMAError+0x23a>
 800643e:	bf00      	nop
 8006440:	40020010 	.word	0x40020010
 8006444:	40020028 	.word	0x40020028
 8006448:	40020040 	.word	0x40020040
 800644c:	40020058 	.word	0x40020058
 8006450:	40020070 	.word	0x40020070
 8006454:	40020088 	.word	0x40020088
 8006458:	400200a0 	.word	0x400200a0
 800645c:	400200b8 	.word	0x400200b8
 8006460:	40020410 	.word	0x40020410
 8006464:	40020428 	.word	0x40020428
 8006468:	40020440 	.word	0x40020440
 800646c:	40020458 	.word	0x40020458
 8006470:	40020470 	.word	0x40020470
 8006474:	40020488 	.word	0x40020488
 8006478:	400204a0 	.word	0x400204a0
 800647c:	400204b8 	.word	0x400204b8
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8006496:	2301      	movs	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fd fa2c 	bl	80038f8 <HAL_DMA_GetError>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d00e      	beq.n	80064c4 <I2C_DMAError+0x26c>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064ba:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80064bc:	2110      	movs	r1, #16
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f7ff fd44 	bl	8005f4c <I2C_ITError>
  }
}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e6:	2200      	movs	r2, #0
 80064e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f6:	2200      	movs	r2, #0
 80064f8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fe16 	bl	800612c <I2C_TreatErrorCallback>
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	817b      	strh	r3, [r7, #10]
 8006516:	4613      	mov	r3, r2
 8006518:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800651a:	897b      	ldrh	r3, [r7, #10]
 800651c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006520:	7a7b      	ldrb	r3, [r7, #9]
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006528:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	4313      	orrs	r3, r2
 8006532:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006536:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	0d5b      	lsrs	r3, r3, #21
 8006542:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006546:	4b08      	ldr	r3, [pc, #32]	@ (8006568 <I2C_TransferConfig+0x60>)
 8006548:	430b      	orrs	r3, r1
 800654a:	43db      	mvns	r3, r3
 800654c:	ea02 0103 	and.w	r1, r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	03ff63ff 	.word	0x03ff63ff

0800656c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006580:	4a39      	ldr	r2, [pc, #228]	@ (8006668 <I2C_Enable_IRQ+0xfc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d032      	beq.n	80065ec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800658a:	4a38      	ldr	r2, [pc, #224]	@ (800666c <I2C_Enable_IRQ+0x100>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d02d      	beq.n	80065ec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006594:	4a36      	ldr	r2, [pc, #216]	@ (8006670 <I2C_Enable_IRQ+0x104>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d028      	beq.n	80065ec <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800659a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	da03      	bge.n	80065aa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80065a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065aa:	887b      	ldrh	r3, [r7, #2]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80065ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065bc:	887b      	ldrh	r3, [r7, #2]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80065cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065ce:	887b      	ldrh	r3, [r7, #2]
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d103      	bne.n	80065dc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80065da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065dc:	887b      	ldrh	r3, [r7, #2]
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d133      	bne.n	800664a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f043 0320 	orr.w	r3, r3, #32
 80065e8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065ea:	e02e      	b.n	800664a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da03      	bge.n	80065fc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80065fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065fc:	887b      	ldrh	r3, [r7, #2]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800660c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800660e:	887b      	ldrh	r3, [r7, #2]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800661e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006620:	887b      	ldrh	r3, [r7, #2]
 8006622:	2b10      	cmp	r3, #16
 8006624:	d103      	bne.n	800662e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800662c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800662e:	887b      	ldrh	r3, [r7, #2]
 8006630:	2b20      	cmp	r3, #32
 8006632:	d103      	bne.n	800663c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800663a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800663c:	887b      	ldrh	r3, [r7, #2]
 800663e:	2b40      	cmp	r3, #64	@ 0x40
 8006640:	d103      	bne.n	800664a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006648:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	430a      	orrs	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	08004e5b 	.word	0x08004e5b
 800666c:	0800527d 	.word	0x0800527d
 8006670:	08005031 	.word	0x08005031

08006674 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006684:	887b      	ldrh	r3, [r7, #2]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00f      	beq.n	80066ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006694:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066a2:	2b28      	cmp	r3, #40	@ 0x28
 80066a4:	d003      	beq.n	80066ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80066ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80066ae:	887b      	ldrh	r3, [r7, #2]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00f      	beq.n	80066d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80066be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066cc:	2b28      	cmp	r3, #40	@ 0x28
 80066ce:	d003      	beq.n	80066d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80066d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80066d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da03      	bge.n	80066e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80066e8:	887b      	ldrh	r3, [r7, #2]
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d103      	bne.n	80066f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80066f6:	887b      	ldrh	r3, [r7, #2]
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d103      	bne.n	8006704 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f043 0320 	orr.w	r3, r3, #32
 8006702:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006704:	887b      	ldrh	r3, [r7, #2]
 8006706:	2b40      	cmp	r3, #64	@ 0x40
 8006708:	d103      	bne.n	8006712 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006710:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6819      	ldr	r1, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	43da      	mvns	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	400a      	ands	r2, r1
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b20      	cmp	r3, #32
 8006744:	d138      	bne.n	80067b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006750:	2302      	movs	r3, #2
 8006752:	e032      	b.n	80067ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2224      	movs	r2, #36	@ 0x24
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6819      	ldr	r1, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d139      	bne.n	8006850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e033      	b.n	8006852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2224      	movs	r2, #36	@ 0x24
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	e000      	b.n	8006852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006868:	4b19      	ldr	r3, [pc, #100]	@ (80068d0 <HAL_PWREx_ConfigSupply+0x70>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d00a      	beq.n	800688a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006874:	4b16      	ldr	r3, [pc, #88]	@ (80068d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d001      	beq.n	8006886 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e01f      	b.n	80068c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e01d      	b.n	80068c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800688a:	4b11      	ldr	r3, [pc, #68]	@ (80068d0 <HAL_PWREx_ConfigSupply+0x70>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f023 0207 	bic.w	r2, r3, #7
 8006892:	490f      	ldr	r1, [pc, #60]	@ (80068d0 <HAL_PWREx_ConfigSupply+0x70>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4313      	orrs	r3, r2
 8006898:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800689a:	f7fa fc75 	bl	8001188 <HAL_GetTick>
 800689e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068a0:	e009      	b.n	80068b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068a2:	f7fa fc71 	bl	8001188 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068b0:	d901      	bls.n	80068b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e007      	b.n	80068c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068b6:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <HAL_PWREx_ConfigSupply+0x70>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c2:	d1ee      	bne.n	80068a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	58024800 	.word	0x58024800

080068d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	@ 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f000 bc1f 	b.w	8007126 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80b3 	beq.w	8006a5c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f6:	4b95      	ldr	r3, [pc, #596]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006900:	4b92      	ldr	r3, [pc, #584]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006908:	2b10      	cmp	r3, #16
 800690a:	d007      	beq.n	800691c <HAL_RCC_OscConfig+0x48>
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690e:	2b18      	cmp	r3, #24
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x64>
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d10d      	bne.n	8006938 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	4b8b      	ldr	r3, [pc, #556]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8098 	beq.w	8006a5a <HAL_RCC_OscConfig+0x186>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 8093 	bne.w	8006a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e3f6      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x7c>
 8006942:	4b82      	ldr	r3, [pc, #520]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a81      	ldr	r2, [pc, #516]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e058      	b.n	8006a02 <HAL_RCC_OscConfig+0x12e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d112      	bne.n	800697e <HAL_RCC_OscConfig+0xaa>
 8006958:	4b7c      	ldr	r3, [pc, #496]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a7b      	ldr	r2, [pc, #492]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800695e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b79      	ldr	r3, [pc, #484]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a78      	ldr	r2, [pc, #480]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800696a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	4b76      	ldr	r3, [pc, #472]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a75      	ldr	r2, [pc, #468]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	e041      	b.n	8006a02 <HAL_RCC_OscConfig+0x12e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006986:	d112      	bne.n	80069ae <HAL_RCC_OscConfig+0xda>
 8006988:	4b70      	ldr	r3, [pc, #448]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6f      	ldr	r2, [pc, #444]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800698e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	4b6d      	ldr	r3, [pc, #436]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a6c      	ldr	r2, [pc, #432]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 800699a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	4b6a      	ldr	r3, [pc, #424]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a69      	ldr	r2, [pc, #420]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e029      	b.n	8006a02 <HAL_RCC_OscConfig+0x12e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80069b6:	d112      	bne.n	80069de <HAL_RCC_OscConfig+0x10a>
 80069b8:	4b64      	ldr	r3, [pc, #400]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a63      	ldr	r2, [pc, #396]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	4b61      	ldr	r3, [pc, #388]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a60      	ldr	r2, [pc, #384]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	4b5e      	ldr	r3, [pc, #376]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a5d      	ldr	r2, [pc, #372]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e011      	b.n	8006a02 <HAL_RCC_OscConfig+0x12e>
 80069de:	4b5b      	ldr	r3, [pc, #364]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a5a      	ldr	r2, [pc, #360]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	4b58      	ldr	r3, [pc, #352]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a57      	ldr	r2, [pc, #348]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b55      	ldr	r3, [pc, #340]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a54      	ldr	r2, [pc, #336]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 80069fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d013      	beq.n	8006a32 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fa fbbd 	bl	8001188 <HAL_GetTick>
 8006a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a12:	f7fa fbb9 	bl	8001188 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b64      	cmp	r3, #100	@ 0x64
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e380      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a24:	4b49      	ldr	r3, [pc, #292]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x13e>
 8006a30:	e014      	b.n	8006a5c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a32:	f7fa fba9 	bl	8001188 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a3a:	f7fa fba5 	bl	8001188 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b64      	cmp	r3, #100	@ 0x64
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e36c      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f0      	bne.n	8006a3a <HAL_RCC_OscConfig+0x166>
 8006a58:	e000      	b.n	8006a5c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 808c 	beq.w	8006b82 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a6a:	4b38      	ldr	r3, [pc, #224]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a72:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a74:	4b35      	ldr	r3, [pc, #212]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <HAL_RCC_OscConfig+0x1bc>
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2b18      	cmp	r3, #24
 8006a84:	d137      	bne.n	8006af6 <HAL_RCC_OscConfig+0x222>
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d132      	bne.n	8006af6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a90:	4b2e      	ldr	r3, [pc, #184]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x1d4>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e33e      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aa8:	4b28      	ldr	r3, [pc, #160]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 0219 	bic.w	r2, r3, #25
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4925      	ldr	r1, [pc, #148]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aba:	f7fa fb65 	bl	8001188 <HAL_GetTick>
 8006abe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac2:	f7fa fb61 	bl	8001188 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e328      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	061b      	lsls	r3, r3, #24
 8006aee:	4917      	ldr	r1, [pc, #92]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af4:	e045      	b.n	8006b82 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d028      	beq.n	8006b50 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006afe:	4b13      	ldr	r3, [pc, #76]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f023 0219 	bic.w	r2, r3, #25
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4910      	ldr	r1, [pc, #64]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fa fb3a 	bl	8001188 <HAL_GetTick>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b18:	f7fa fb36 	bl	8001188 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e2fd      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b2a:	4b08      	ldr	r3, [pc, #32]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b36:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	061b      	lsls	r3, r3, #24
 8006b44:	4901      	ldr	r1, [pc, #4]	@ (8006b4c <HAL_RCC_OscConfig+0x278>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	604b      	str	r3, [r1, #4]
 8006b4a:	e01a      	b.n	8006b82 <HAL_RCC_OscConfig+0x2ae>
 8006b4c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b50:	4b97      	ldr	r3, [pc, #604]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a96      	ldr	r2, [pc, #600]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fa fb14 	bl	8001188 <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b64:	f7fa fb10 	bl	8001188 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e2d7      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b76:	4b8e      	ldr	r3, [pc, #568]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d06a      	beq.n	8006c64 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b8e:	4b88      	ldr	r3, [pc, #544]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b98:	4b85      	ldr	r3, [pc, #532]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d007      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x2e0>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b18      	cmp	r3, #24
 8006ba8:	d11b      	bne.n	8006be2 <HAL_RCC_OscConfig+0x30e>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d116      	bne.n	8006be2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_OscConfig+0x2f8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	2b80      	cmp	r3, #128	@ 0x80
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e2ac      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bcc:	4b78      	ldr	r3, [pc, #480]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	4975      	ldr	r1, [pc, #468]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006be0:	e040      	b.n	8006c64 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d023      	beq.n	8006c32 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bea:	4b71      	ldr	r3, [pc, #452]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a70      	ldr	r2, [pc, #448]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fa fac7 	bl	8001188 <HAL_GetTick>
 8006bfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bfe:	f7fa fac3 	bl	8001188 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e28a      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c10:	4b67      	ldr	r3, [pc, #412]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c1c:	4b64      	ldr	r3, [pc, #400]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	4961      	ldr	r1, [pc, #388]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60cb      	str	r3, [r1, #12]
 8006c30:	e018      	b.n	8006c64 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c32:	4b5f      	ldr	r3, [pc, #380]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5e      	ldr	r2, [pc, #376]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3e:	f7fa faa3 	bl	8001188 <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c46:	f7fa fa9f 	bl	8001188 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e266      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c58:	4b55      	ldr	r3, [pc, #340]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f0      	bne.n	8006c46 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d036      	beq.n	8006cde <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d019      	beq.n	8006cac <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c78:	4b4d      	ldr	r3, [pc, #308]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fa fa80 	bl	8001188 <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c8c:	f7fa fa7c 	bl	8001188 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e243      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c9e:	4b44      	ldr	r3, [pc, #272]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x3b8>
 8006caa:	e018      	b.n	8006cde <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cac:	4b40      	ldr	r3, [pc, #256]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fa fa66 	bl	8001188 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc0:	f7fa fa62 	bl	8001188 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e229      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cd2:	4b37      	ldr	r3, [pc, #220]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d036      	beq.n	8006d58 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d019      	beq.n	8006d26 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cfe:	f7fa fa43 	bl	8001188 <HAL_GetTick>
 8006d02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d06:	f7fa fa3f 	bl	8001188 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e206      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d18:	4b25      	ldr	r3, [pc, #148]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f0      	beq.n	8006d06 <HAL_RCC_OscConfig+0x432>
 8006d24:	e018      	b.n	8006d58 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d26:	4b22      	ldr	r3, [pc, #136]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d32:	f7fa fa29 	bl	8001188 <HAL_GetTick>
 8006d36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3a:	f7fa fa25 	bl	8001188 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e1ec      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d4c:	4b18      	ldr	r3, [pc, #96]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f0      	bne.n	8006d3a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 80af 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d66:	4b13      	ldr	r3, [pc, #76]	@ (8006db4 <HAL_RCC_OscConfig+0x4e0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a12      	ldr	r2, [pc, #72]	@ (8006db4 <HAL_RCC_OscConfig+0x4e0>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d72:	f7fa fa09 	bl	8001188 <HAL_GetTick>
 8006d76:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7a:	f7fa fa05 	bl	8001188 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b64      	cmp	r3, #100	@ 0x64
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e1cc      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d8c:	4b09      	ldr	r3, [pc, #36]	@ (8006db4 <HAL_RCC_OscConfig+0x4e0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10b      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4e4>
 8006da0:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da4:	4a02      	ldr	r2, [pc, #8]	@ (8006db0 <HAL_RCC_OscConfig+0x4dc>)
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dac:	e05b      	b.n	8006e66 <HAL_RCC_OscConfig+0x592>
 8006dae:	bf00      	nop
 8006db0:	58024400 	.word	0x58024400
 8006db4:	58024800 	.word	0x58024800
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d112      	bne.n	8006de6 <HAL_RCC_OscConfig+0x512>
 8006dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc4:	4a9c      	ldr	r2, [pc, #624]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd0:	4a99      	ldr	r2, [pc, #612]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd8:	4b97      	ldr	r3, [pc, #604]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ddc:	4a96      	ldr	r2, [pc, #600]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dde:	f023 0304 	bic.w	r3, r3, #4
 8006de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de4:	e03f      	b.n	8006e66 <HAL_RCC_OscConfig+0x592>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d112      	bne.n	8006e14 <HAL_RCC_OscConfig+0x540>
 8006dee:	4b92      	ldr	r3, [pc, #584]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df2:	4a91      	ldr	r2, [pc, #580]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006df4:	f043 0304 	orr.w	r3, r3, #4
 8006df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfe:	4a8e      	ldr	r2, [pc, #568]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e06:	4b8c      	ldr	r3, [pc, #560]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0a:	4a8b      	ldr	r2, [pc, #556]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e0c:	f043 0301 	orr.w	r3, r3, #1
 8006e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e12:	e028      	b.n	8006e66 <HAL_RCC_OscConfig+0x592>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b85      	cmp	r3, #133	@ 0x85
 8006e1a:	d112      	bne.n	8006e42 <HAL_RCC_OscConfig+0x56e>
 8006e1c:	4b86      	ldr	r3, [pc, #536]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e20:	4a85      	ldr	r2, [pc, #532]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e22:	f043 0304 	orr.w	r3, r3, #4
 8006e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e28:	4b83      	ldr	r3, [pc, #524]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2c:	4a82      	ldr	r2, [pc, #520]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e34:	4b80      	ldr	r3, [pc, #512]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e38:	4a7f      	ldr	r2, [pc, #508]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e40:	e011      	b.n	8006e66 <HAL_RCC_OscConfig+0x592>
 8006e42:	4b7d      	ldr	r3, [pc, #500]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e46:	4a7c      	ldr	r2, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e52:	4a79      	ldr	r2, [pc, #484]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e54:	f023 0304 	bic.w	r3, r3, #4
 8006e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e5a:	4b77      	ldr	r3, [pc, #476]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5e:	4a76      	ldr	r2, [pc, #472]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e64:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d015      	beq.n	8006e9a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6e:	f7fa f98b 	bl	8001188 <HAL_GetTick>
 8006e72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e76:	f7fa f987 	bl	8001188 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e14c      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ee      	beq.n	8006e76 <HAL_RCC_OscConfig+0x5a2>
 8006e98:	e014      	b.n	8006ec4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9a:	f7fa f975 	bl	8001188 <HAL_GetTick>
 8006e9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ea0:	e00a      	b.n	8006eb8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea2:	f7fa f971 	bl	8001188 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e136      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ee      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 812b 	beq.w	8007124 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ece:	4b5a      	ldr	r3, [pc, #360]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ed6:	2b18      	cmp	r3, #24
 8006ed8:	f000 80bb 	beq.w	8007052 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f040 8095 	bne.w	8007010 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee6:	4b54      	ldr	r3, [pc, #336]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a53      	ldr	r2, [pc, #332]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006eec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef2:	f7fa f949 	bl	8001188 <HAL_GetTick>
 8006ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006efa:	f7fa f945 	bl	8001188 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e10c      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f0      	bne.n	8006efa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f18:	4b47      	ldr	r3, [pc, #284]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f1c:	4b47      	ldr	r3, [pc, #284]	@ (800703c <HAL_RCC_OscConfig+0x768>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f28:	0112      	lsls	r2, r2, #4
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	4942      	ldr	r1, [pc, #264]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f36:	3b01      	subs	r3, #1
 8006f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f40:	3b01      	subs	r3, #1
 8006f42:	025b      	lsls	r3, r3, #9
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	061b      	lsls	r3, r3, #24
 8006f5e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f62:	4935      	ldr	r1, [pc, #212]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f68:	4b33      	ldr	r3, [pc, #204]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6c:	4a32      	ldr	r2, [pc, #200]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f74:	4b30      	ldr	r3, [pc, #192]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f78:	4b31      	ldr	r3, [pc, #196]	@ (8007040 <HAL_RCC_OscConfig+0x76c>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f80:	00d2      	lsls	r2, r2, #3
 8006f82:	492d      	ldr	r1, [pc, #180]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	f023 020c 	bic.w	r2, r3, #12
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f94:	4928      	ldr	r1, [pc, #160]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f9a:	4b27      	ldr	r3, [pc, #156]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	f023 0202 	bic.w	r2, r3, #2
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	4924      	ldr	r1, [pc, #144]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fac:	4b22      	ldr	r3, [pc, #136]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	4a21      	ldr	r2, [pc, #132]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006fd0:	4b19      	ldr	r3, [pc, #100]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fdc:	4b16      	ldr	r3, [pc, #88]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8006fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fa f8ce 	bl	8001188 <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ff0:	f7fa f8ca 	bl	8001188 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e091      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x71c>
 800700e:	e089      	b.n	8007124 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007010:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a08      	ldr	r2, [pc, #32]	@ (8007038 <HAL_RCC_OscConfig+0x764>)
 8007016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800701a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fa f8b4 	bl	8001188 <HAL_GetTick>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007022:	e00f      	b.n	8007044 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007024:	f7fa f8b0 	bl	8001188 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d908      	bls.n	8007044 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e077      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	fffffc0c 	.word	0xfffffc0c
 8007040:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007044:	4b3a      	ldr	r3, [pc, #232]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e9      	bne.n	8007024 <HAL_RCC_OscConfig+0x750>
 8007050:	e068      	b.n	8007124 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007052:	4b37      	ldr	r3, [pc, #220]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 8007054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007056:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007058:	4b35      	ldr	r3, [pc, #212]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 800705a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	2b01      	cmp	r3, #1
 8007064:	d031      	beq.n	80070ca <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f003 0203 	and.w	r2, r3, #3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007070:	429a      	cmp	r2, r3
 8007072:	d12a      	bne.n	80070ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	091b      	lsrs	r3, r3, #4
 8007078:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007080:	429a      	cmp	r2, r3
 8007082:	d122      	bne.n	80070ca <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007090:	429a      	cmp	r2, r3
 8007092:	d11a      	bne.n	80070ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	0a5b      	lsrs	r3, r3, #9
 8007098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d111      	bne.n	80070ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0c1b      	lsrs	r3, r3, #16
 80070aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d108      	bne.n	80070ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	0e1b      	lsrs	r3, r3, #24
 80070bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d001      	beq.n	80070ce <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e02b      	b.n	8007126 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80070ce:	4b18      	ldr	r3, [pc, #96]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 80070d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d2:	08db      	lsrs	r3, r3, #3
 80070d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d01f      	beq.n	8007124 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80070e4:	4b12      	ldr	r3, [pc, #72]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	4a11      	ldr	r2, [pc, #68]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070f0:	f7fa f84a 	bl	8001188 <HAL_GetTick>
 80070f4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80070f6:	bf00      	nop
 80070f8:	f7fa f846 	bl	8001188 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	4293      	cmp	r3, r2
 8007102:	d0f9      	beq.n	80070f8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007104:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 8007106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007108:	4b0a      	ldr	r3, [pc, #40]	@ (8007134 <HAL_RCC_OscConfig+0x860>)
 800710a:	4013      	ands	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007110:	00d2      	lsls	r2, r2, #3
 8007112:	4907      	ldr	r1, [pc, #28]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <HAL_RCC_OscConfig+0x85c>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3730      	adds	r7, #48	@ 0x30
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	58024400 	.word	0x58024400
 8007134:	ffff0007 	.word	0xffff0007

08007138 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e19c      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800714c:	4b8a      	ldr	r3, [pc, #552]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d910      	bls.n	800717c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715a:	4b87      	ldr	r3, [pc, #540]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f023 020f 	bic.w	r2, r3, #15
 8007162:	4985      	ldr	r1, [pc, #532]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	4313      	orrs	r3, r2
 8007168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716a:	4b83      	ldr	r3, [pc, #524]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d001      	beq.n	800717c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e184      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	d010      	beq.n	80071aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	4b7b      	ldr	r3, [pc, #492]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007194:	429a      	cmp	r2, r3
 8007196:	d908      	bls.n	80071aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007198:	4b78      	ldr	r3, [pc, #480]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	4975      	ldr	r1, [pc, #468]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d010      	beq.n	80071d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	4b70      	ldr	r3, [pc, #448]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d908      	bls.n	80071d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071c6:	4b6d      	ldr	r3, [pc, #436]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	496a      	ldr	r1, [pc, #424]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	4b64      	ldr	r3, [pc, #400]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d908      	bls.n	8007206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071f4:	4b61      	ldr	r3, [pc, #388]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	495e      	ldr	r1, [pc, #376]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007202:	4313      	orrs	r3, r2
 8007204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d010      	beq.n	8007234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69da      	ldr	r2, [r3, #28]
 8007216:	4b59      	ldr	r3, [pc, #356]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800721e:	429a      	cmp	r2, r3
 8007220:	d908      	bls.n	8007234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007222:	4b56      	ldr	r3, [pc, #344]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	4953      	ldr	r1, [pc, #332]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007230:	4313      	orrs	r3, r2
 8007232:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d010      	beq.n	8007262 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	4b4d      	ldr	r3, [pc, #308]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	429a      	cmp	r2, r3
 800724e:	d908      	bls.n	8007262 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007250:	4b4a      	ldr	r3, [pc, #296]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f023 020f 	bic.w	r2, r3, #15
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	4947      	ldr	r1, [pc, #284]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800725e:	4313      	orrs	r3, r2
 8007260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d055      	beq.n	800731a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800726e:	4b43      	ldr	r3, [pc, #268]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	4940      	ldr	r1, [pc, #256]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800727c:	4313      	orrs	r3, r2
 800727e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d107      	bne.n	8007298 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007288:	4b3c      	ldr	r3, [pc, #240]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d121      	bne.n	80072d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e0f6      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b03      	cmp	r3, #3
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072a0:	4b36      	ldr	r3, [pc, #216]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d115      	bne.n	80072d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0ea      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d107      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072b8:	4b30      	ldr	r3, [pc, #192]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e0de      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072c8:	4b2c      	ldr	r3, [pc, #176]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0d6      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072d8:	4b28      	ldr	r3, [pc, #160]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f023 0207 	bic.w	r2, r3, #7
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4925      	ldr	r1, [pc, #148]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ea:	f7f9 ff4d 	bl	8001188 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f0:	e00a      	b.n	8007308 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f2:	f7f9 ff49 	bl	8001188 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e0be      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007308:	4b1c      	ldr	r3, [pc, #112]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	429a      	cmp	r2, r3
 8007318:	d1eb      	bne.n	80072f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d010      	beq.n	8007348 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	4b14      	ldr	r3, [pc, #80]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	429a      	cmp	r2, r3
 8007334:	d208      	bcs.n	8007348 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007336:	4b11      	ldr	r3, [pc, #68]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	f023 020f 	bic.w	r2, r3, #15
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	490e      	ldr	r1, [pc, #56]	@ (800737c <HAL_RCC_ClockConfig+0x244>)
 8007344:	4313      	orrs	r3, r2
 8007346:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007348:	4b0b      	ldr	r3, [pc, #44]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d214      	bcs.n	8007380 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007356:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f023 020f 	bic.w	r2, r3, #15
 800735e:	4906      	ldr	r1, [pc, #24]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	4313      	orrs	r3, r2
 8007364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007366:	4b04      	ldr	r3, [pc, #16]	@ (8007378 <HAL_RCC_ClockConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d005      	beq.n	8007380 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e086      	b.n	8007486 <HAL_RCC_ClockConfig+0x34e>
 8007378:	52002000 	.word	0x52002000
 800737c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d010      	beq.n	80073ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	4b3f      	ldr	r3, [pc, #252]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007398:	429a      	cmp	r2, r3
 800739a:	d208      	bcs.n	80073ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800739c:	4b3c      	ldr	r3, [pc, #240]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	4939      	ldr	r1, [pc, #228]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d010      	beq.n	80073dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	4b34      	ldr	r3, [pc, #208]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d208      	bcs.n	80073dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ca:	4b31      	ldr	r3, [pc, #196]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	492e      	ldr	r1, [pc, #184]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d010      	beq.n	800740a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	4b28      	ldr	r3, [pc, #160]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d208      	bcs.n	800740a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073f8:	4b25      	ldr	r3, [pc, #148]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	4922      	ldr	r1, [pc, #136]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 8007406:	4313      	orrs	r3, r2
 8007408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d010      	beq.n	8007438 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69da      	ldr	r2, [r3, #28]
 800741a:	4b1d      	ldr	r3, [pc, #116]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007422:	429a      	cmp	r2, r3
 8007424:	d208      	bcs.n	8007438 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007426:	4b1a      	ldr	r3, [pc, #104]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	4917      	ldr	r1, [pc, #92]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 8007434:	4313      	orrs	r3, r2
 8007436:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007438:	f000 f834 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 800743c:	4602      	mov	r2, r0
 800743e:	4b14      	ldr	r3, [pc, #80]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	4912      	ldr	r1, [pc, #72]	@ (8007494 <HAL_RCC_ClockConfig+0x35c>)
 800744a:	5ccb      	ldrb	r3, [r1, r3]
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
 8007454:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007456:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <HAL_RCC_ClockConfig+0x358>)
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	4a0d      	ldr	r2, [pc, #52]	@ (8007494 <HAL_RCC_ClockConfig+0x35c>)
 8007460:	5cd3      	ldrb	r3, [r2, r3]
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	4a0a      	ldr	r2, [pc, #40]	@ (8007498 <HAL_RCC_ClockConfig+0x360>)
 800746e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007470:	4a0a      	ldr	r2, [pc, #40]	@ (800749c <HAL_RCC_ClockConfig+0x364>)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007476:	4b0a      	ldr	r3, [pc, #40]	@ (80074a0 <HAL_RCC_ClockConfig+0x368>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f7f9 fc12 	bl	8000ca4 <HAL_InitTick>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	58024400 	.word	0x58024400
 8007494:	0800edc8 	.word	0x0800edc8
 8007498:	24000004 	.word	0x24000004
 800749c:	24000000 	.word	0x24000000
 80074a0:	24000008 	.word	0x24000008

080074a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	@ 0x24
 80074a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074aa:	4bb3      	ldr	r3, [pc, #716]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b2:	2b18      	cmp	r3, #24
 80074b4:	f200 8155 	bhi.w	8007762 <HAL_RCC_GetSysClockFreq+0x2be>
 80074b8:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	08007525 	.word	0x08007525
 80074c4:	08007763 	.word	0x08007763
 80074c8:	08007763 	.word	0x08007763
 80074cc:	08007763 	.word	0x08007763
 80074d0:	08007763 	.word	0x08007763
 80074d4:	08007763 	.word	0x08007763
 80074d8:	08007763 	.word	0x08007763
 80074dc:	08007763 	.word	0x08007763
 80074e0:	0800754b 	.word	0x0800754b
 80074e4:	08007763 	.word	0x08007763
 80074e8:	08007763 	.word	0x08007763
 80074ec:	08007763 	.word	0x08007763
 80074f0:	08007763 	.word	0x08007763
 80074f4:	08007763 	.word	0x08007763
 80074f8:	08007763 	.word	0x08007763
 80074fc:	08007763 	.word	0x08007763
 8007500:	08007551 	.word	0x08007551
 8007504:	08007763 	.word	0x08007763
 8007508:	08007763 	.word	0x08007763
 800750c:	08007763 	.word	0x08007763
 8007510:	08007763 	.word	0x08007763
 8007514:	08007763 	.word	0x08007763
 8007518:	08007763 	.word	0x08007763
 800751c:	08007763 	.word	0x08007763
 8007520:	08007557 	.word	0x08007557
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007524:	4b94      	ldr	r3, [pc, #592]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007530:	4b91      	ldr	r3, [pc, #580]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	08db      	lsrs	r3, r3, #3
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	4a90      	ldr	r2, [pc, #576]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007542:	e111      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007544:	4b8d      	ldr	r3, [pc, #564]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007546:	61bb      	str	r3, [r7, #24]
      break;
 8007548:	e10e      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800754a:	4b8d      	ldr	r3, [pc, #564]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800754c:	61bb      	str	r3, [r7, #24]
      break;
 800754e:	e10b      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007550:	4b8c      	ldr	r3, [pc, #560]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007552:	61bb      	str	r3, [r7, #24]
      break;
 8007554:	e108      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007556:	4b88      	ldr	r3, [pc, #544]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007560:	4b85      	ldr	r3, [pc, #532]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800756a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800756c:	4b82      	ldr	r3, [pc, #520]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007576:	4b80      	ldr	r3, [pc, #512]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800757a:	08db      	lsrs	r3, r3, #3
 800757c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80e1 	beq.w	800775c <HAL_RCC_GetSysClockFreq+0x2b8>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b02      	cmp	r3, #2
 800759e:	f000 8083 	beq.w	80076a8 <HAL_RCC_GetSysClockFreq+0x204>
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	f200 80a1 	bhi.w	80076ec <HAL_RCC_GetSysClockFreq+0x248>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_RCC_GetSysClockFreq+0x114>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d056      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075b6:	e099      	b.n	80076ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02d      	beq.n	8007620 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	08db      	lsrs	r3, r3, #3
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	4a6b      	ldr	r2, [pc, #428]	@ (800777c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
 80075d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ee:	4b62      	ldr	r3, [pc, #392]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007602:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800761e:	e087      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800778c <HAL_RCC_GetSysClockFreq+0x2e8>
 800762e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007632:	4b51      	ldr	r3, [pc, #324]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007642:	ed97 6a02 	vldr	s12, [r7, #8]
 8007646:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800764a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007662:	e065      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007790 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b40      	ldr	r3, [pc, #256]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a02 	vldr	s12, [r7, #8]
 800768a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076a6:	e043      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007794 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007788 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ea:	e021      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007790 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007712:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800772e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007730:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007734:	0a5b      	lsrs	r3, r3, #9
 8007736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773a:	3301      	adds	r3, #1
 800773c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007748:	edd7 6a07 	vldr	s13, [r7, #28]
 800774c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007754:	ee17 3a90 	vmov	r3, s15
 8007758:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800775a:	e005      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	61bb      	str	r3, [r7, #24]
      break;
 8007760:	e002      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007762:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007764:	61bb      	str	r3, [r7, #24]
      break;
 8007766:	bf00      	nop
  }

  return sysclockfreq;
 8007768:	69bb      	ldr	r3, [r7, #24]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3724      	adds	r7, #36	@ 0x24
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
 800777c:	03d09000 	.word	0x03d09000
 8007780:	003d0900 	.word	0x003d0900
 8007784:	016e3600 	.word	0x016e3600
 8007788:	46000000 	.word	0x46000000
 800778c:	4c742400 	.word	0x4c742400
 8007790:	4a742400 	.word	0x4a742400
 8007794:	4bb71b00 	.word	0x4bb71b00

08007798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800779e:	f7ff fe81 	bl	80074a4 <HAL_RCC_GetSysClockFreq>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	0a1b      	lsrs	r3, r3, #8
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	490f      	ldr	r1, [pc, #60]	@ (80077ec <HAL_RCC_GetHCLKFreq+0x54>)
 80077b0:	5ccb      	ldrb	r3, [r1, r3]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	4a09      	ldr	r2, [pc, #36]	@ (80077ec <HAL_RCC_GetHCLKFreq+0x54>)
 80077c6:	5cd3      	ldrb	r3, [r2, r3]
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	fa22 f303 	lsr.w	r3, r2, r3
 80077d2:	4a07      	ldr	r2, [pc, #28]	@ (80077f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80077d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077d6:	4a07      	ldr	r2, [pc, #28]	@ (80077f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077dc:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80077de:	681b      	ldr	r3, [r3, #0]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	58024400 	.word	0x58024400
 80077ec:	0800edc8 	.word	0x0800edc8
 80077f0:	24000004 	.word	0x24000004
 80077f4:	24000000 	.word	0x24000000

080077f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80077fc:	f7ff ffcc 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 8007800:	4602      	mov	r2, r0
 8007802:	4b06      	ldr	r3, [pc, #24]	@ (800781c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	4904      	ldr	r1, [pc, #16]	@ (8007820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800780e:	5ccb      	ldrb	r3, [r1, r3]
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007818:	4618      	mov	r0, r3
 800781a:	bd80      	pop	{r7, pc}
 800781c:	58024400 	.word	0x58024400
 8007820:	0800edc8 	.word	0x0800edc8

08007824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007828:	f7ff ffb6 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 800782c:	4602      	mov	r2, r0
 800782e:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	4904      	ldr	r1, [pc, #16]	@ (800784c <HAL_RCC_GetPCLK2Freq+0x28>)
 800783a:	5ccb      	ldrb	r3, [r1, r3]
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007844:	4618      	mov	r0, r3
 8007846:	bd80      	pop	{r7, pc}
 8007848:	58024400 	.word	0x58024400
 800784c:	0800edc8 	.word	0x0800edc8

08007850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	223f      	movs	r2, #63	@ 0x3f
 800785e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007860:	4b1a      	ldr	r3, [pc, #104]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f003 0207 	and.w	r2, r3, #7
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800786c:	4b17      	ldr	r3, [pc, #92]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007878:	4b14      	ldr	r3, [pc, #80]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f003 020f 	and.w	r2, r3, #15
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007884:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8007890:	4b0e      	ldr	r3, [pc, #56]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800789c:	4b0b      	ldr	r3, [pc, #44]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80078a8:	4b08      	ldr	r3, [pc, #32]	@ (80078cc <HAL_RCC_GetClockConfig+0x7c>)
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078b4:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <HAL_RCC_GetClockConfig+0x80>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 020f 	and.w	r2, r3, #15
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	601a      	str	r2, [r3, #0]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	58024400 	.word	0x58024400
 80078d0:	52002000 	.word	0x52002000

080078d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d8:	b0c8      	sub	sp, #288	@ 0x120
 80078da:	af00      	add	r7, sp, #0
 80078dc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80078f8:	2500      	movs	r5, #0
 80078fa:	ea54 0305 	orrs.w	r3, r4, r5
 80078fe:	d049      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007906:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800790a:	d02f      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800790c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007910:	d828      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007916:	d01a      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800791c:	d822      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007926:	d007      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007928:	e01c      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792a:	4ba7      	ldr	r3, [pc, #668]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800792c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792e:	4aa6      	ldr	r2, [pc, #664]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007936:	e01a      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800793c:	3308      	adds	r3, #8
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fc43 	bl	80091cc <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800794c:	e00f      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800794e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007952:	3328      	adds	r3, #40	@ 0x28
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fcea 	bl	8009330 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007962:	e004      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800796c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007976:	4b94      	ldr	r3, [pc, #592]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007984:	4a90      	ldr	r2, [pc, #576]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007986:	430b      	orrs	r3, r1
 8007988:	6513      	str	r3, [r2, #80]	@ 0x50
 800798a:	e003      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007990:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80079a0:	f04f 0900 	mov.w	r9, #0
 80079a4:	ea58 0309 	orrs.w	r3, r8, r9
 80079a8:	d047      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80079aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d82a      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80079b4:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079d1 	.word	0x080079d1
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	08007a13 	.word	0x08007a13
 80079cc:	08007a13 	.word	0x08007a13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b7d      	ldr	r3, [pc, #500]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	4a7c      	ldr	r2, [pc, #496]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079dc:	e01a      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079e2:	3308      	adds	r3, #8
 80079e4:	2100      	movs	r1, #0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f001 fbf0 	bl	80091cc <RCCEx_PLL2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079f2:	e00f      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f8:	3328      	adds	r3, #40	@ 0x28
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fc97 	bl	8009330 <RCCEx_PLL3_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a08:	e004      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a10:	e000      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a20:	f023 0107 	bic.w	r1, r3, #7
 8007a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2a:	4a67      	ldr	r2, [pc, #412]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a30:	e003      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007a46:	f04f 0b00 	mov.w	fp, #0
 8007a4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a4e:	d054      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a56:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a5a:	d036      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007a5c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a60:	d82f      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a66:	d032      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6c:	d829      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a70:	d02f      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a74:	d825      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a76:	2b80      	cmp	r3, #128	@ 0x80
 8007a78:	d018      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007a7a:	2b80      	cmp	r3, #128	@ 0x80
 8007a7c:	d821      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	d007      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007a86:	e01c      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a88:	4b4f      	ldr	r3, [pc, #316]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007a94:	e01e      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 fb94 	bl	80091cc <RCCEx_PLL2_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007aaa:	e013      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ab0:	3328      	adds	r3, #40	@ 0x28
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fc3b 	bl	8009330 <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ac8:	e004      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007aca:	bf00      	nop
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007adc:	4b3a      	ldr	r3, [pc, #232]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aea:	4a37      	ldr	r2, [pc, #220]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6513      	str	r3, [r2, #80]	@ 0x50
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007af6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007b06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b14:	460b      	mov	r3, r1
 8007b16:	4313      	orrs	r3, r2
 8007b18:	d05c      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b20:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007b24:	d03b      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b26:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007b2a:	d834      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b30:	d037      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b36:	d82e      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b3c:	d033      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b3e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b42:	d828      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b48:	d01a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b4e:	d822      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b58:	d007      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007b5a:	e01c      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	4a19      	ldr	r2, [pc, #100]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007b68:	e01e      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b6e:	3308      	adds	r3, #8
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fb2a 	bl	80091cc <RCCEx_PLL2_Config>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007b7e:	e013      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b84:	3328      	adds	r3, #40	@ 0x28
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f001 fbd1 	bl	8009330 <RCCEx_PLL3_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007b94:	e008      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b9c:	e004      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e002      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007ba2:	bf00      	nop
 8007ba4:	e000      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10d      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bbe:	4a02      	ldr	r2, [pc, #8]	@ (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bc4:	e006      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007bc6:	bf00      	nop
 8007bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007be0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	d03a      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfa:	2b30      	cmp	r3, #48	@ 0x30
 8007bfc:	d01f      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007bfe:	2b30      	cmp	r3, #48	@ 0x30
 8007c00:	d819      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d00c      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d815      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d019      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d111      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c12:	4bae      	ldr	r3, [pc, #696]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c16:	4aad      	ldr	r2, [pc, #692]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007c1e:	e011      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c24:	3308      	adds	r3, #8
 8007c26:	2102      	movs	r1, #2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 facf 	bl	80091cc <RCCEx_PLL2_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007c34:	e006      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c3c:	e002      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007c3e:	bf00      	nop
 8007c40:	e000      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007c4c:	4b9f      	ldr	r3, [pc, #636]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5a:	4a9c      	ldr	r2, [pc, #624]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c60:	e003      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4313      	orrs	r3, r2
 8007c88:	d051      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c94:	d035      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c9a:	d82e      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ca0:	d031      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007ca2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ca6:	d828      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cac:	d01a      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb2:	d822      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cbc:	d007      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007cbe:	e01c      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc0:	4b82      	ldr	r3, [pc, #520]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc4:	4a81      	ldr	r2, [pc, #516]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ccc:	e01c      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 fa78 	bl	80091cc <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ce2:	e011      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce8:	3328      	adds	r3, #40	@ 0x28
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 fb1f 	bl	8009330 <RCCEx_PLL3_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cf8:	e006      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d10:	4b6e      	ldr	r3, [pc, #440]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d24:	e003      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d053      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d58:	d033      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007d5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d5e:	d82c      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d64:	d02f      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007d66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d6a:	d826      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d70:	d02b      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007d72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d76:	d820      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d7c:	d012      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007d7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d82:	d81a      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d022      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d8c:	d115      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d92:	3308      	adds	r3, #8
 8007d94:	2101      	movs	r1, #1
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fa18 	bl	80091cc <RCCEx_PLL2_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007da2:	e015      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007da8:	3328      	adds	r3, #40	@ 0x28
 8007daa:	2101      	movs	r1, #1
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 fabf 	bl	8009330 <RCCEx_PLL3_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007db8:	e00a      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007dc0:	e006      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007dc2:	bf00      	nop
 8007dc4:	e004      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007dc6:	bf00      	nop
 8007dc8:	e002      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ddc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007de6:	4a39      	ldr	r2, [pc, #228]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dec:	e003      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007df2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007e02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e0c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4313      	orrs	r3, r2
 8007e14:	d060      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e1e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007e22:	d039      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007e24:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007e28:	d832      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e2e:	d035      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e34:	d82c      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e3a:	d031      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e40:	d826      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e46:	d02d      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007e48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e4c:	d820      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e52:	d012      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e58:	d81a      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d024      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e62:	d115      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e68:	3308      	adds	r3, #8
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 f9ad 	bl	80091cc <RCCEx_PLL2_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e78:	e017      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7e:	3328      	adds	r3, #40	@ 0x28
 8007e80:	2101      	movs	r1, #1
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fa54 	bl	8009330 <RCCEx_PLL3_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e8e:	e00c      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e96:	e008      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e98:	bf00      	nop
 8007e9a:	e006      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007e9c:	bf00      	nop
 8007e9e:	e004      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ea0:	bf00      	nop
 8007ea2:	e002      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ea4:	bf00      	nop
 8007ea6:	e000      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10e      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007eb2:	4b06      	ldr	r3, [pc, #24]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ec2:	4a02      	ldr	r2, [pc, #8]	@ (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ec8:	e006      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ed4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007eee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d037      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f02:	d00e      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f08:	d816      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d018      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f12:	d111      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f14:	4bc4      	ldr	r3, [pc, #784]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f18:	4ac3      	ldr	r2, [pc, #780]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f20:	e00f      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f26:	3308      	adds	r3, #8
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f94e 	bl	80091cc <RCCEx_PLL2_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f36:	e004      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f4a:	4bb7      	ldr	r3, [pc, #732]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f58:	4ab3      	ldr	r2, [pc, #716]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f5e:	e003      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d039      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d81c      	bhi.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007f92:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fd5 	.word	0x08007fd5
 8007f9c:	08007fa9 	.word	0x08007fa9
 8007fa0:	08007fb7 	.word	0x08007fb7
 8007fa4:	08007fd5 	.word	0x08007fd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa8:	4b9f      	ldr	r3, [pc, #636]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fac:	4a9e      	ldr	r2, [pc, #632]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fb4:	e00f      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fba:	3308      	adds	r3, #8
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 f904 	bl	80091cc <RCCEx_PLL2_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fca:	e004      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fd2:	e000      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fde:	4b92      	ldr	r3, [pc, #584]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	f023 0103 	bic.w	r1, r3, #3
 8007fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fec:	4a8e      	ldr	r2, [pc, #568]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ff8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008008:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800800c:	2300      	movs	r3, #0
 800800e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008012:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008016:	460b      	mov	r3, r1
 8008018:	4313      	orrs	r3, r2
 800801a:	f000 8099 	beq.w	8008150 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800801e:	4b83      	ldr	r3, [pc, #524]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a82      	ldr	r2, [pc, #520]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800802a:	f7f9 f8ad 	bl	8001188 <HAL_GetTick>
 800802e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008032:	e00b      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008034:	f7f9 f8a8 	bl	8001188 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b64      	cmp	r3, #100	@ 0x64
 8008042:	d903      	bls.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800804a:	e005      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800804c:	4b77      	ldr	r3, [pc, #476]	@ (800822c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0ed      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008058:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800805c:	2b00      	cmp	r3, #0
 800805e:	d173      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008060:	4b71      	ldr	r3, [pc, #452]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008062:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800806c:	4053      	eors	r3, r2
 800806e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008072:	2b00      	cmp	r3, #0
 8008074:	d015      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008076:	4b6c      	ldr	r3, [pc, #432]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800807e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008082:	4b69      	ldr	r3, [pc, #420]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008086:	4a68      	ldr	r2, [pc, #416]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800808c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800808e:	4b66      	ldr	r3, [pc, #408]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008092:	4a65      	ldr	r2, [pc, #404]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008098:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800809a:	4a63      	ldr	r2, [pc, #396]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ae:	d118      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7f9 f86a 	bl	8001188 <HAL_GetTick>
 80080b4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080b8:	e00d      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ba:	f7f9 f865 	bl	8001188 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d903      	bls.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80080d4:	e005      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080d6:	4b54      	ldr	r3, [pc, #336]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0eb      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80080e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d129      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080fa:	d10e      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80080fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008108:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800810c:	091a      	lsrs	r2, r3, #4
 800810e:	4b48      	ldr	r3, [pc, #288]	@ (8008230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008110:	4013      	ands	r3, r2
 8008112:	4a45      	ldr	r2, [pc, #276]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6113      	str	r3, [r2, #16]
 8008118:	e005      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800811a:	4b43      	ldr	r3, [pc, #268]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	4a42      	ldr	r2, [pc, #264]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008120:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008124:	6113      	str	r3, [r2, #16]
 8008126:	4b40      	ldr	r3, [pc, #256]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008128:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800812a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008136:	4a3c      	ldr	r2, [pc, #240]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008138:	430b      	orrs	r3, r1
 800813a:	6713      	str	r3, [r2, #112]	@ 0x70
 800813c:	e008      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800813e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008142:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800814c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f002 0301 	and.w	r3, r2, #1
 800815c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008166:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800816a:	460b      	mov	r3, r1
 800816c:	4313      	orrs	r3, r2
 800816e:	f000 8090 	beq.w	8008292 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800817a:	2b28      	cmp	r3, #40	@ 0x28
 800817c:	d870      	bhi.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	08008269 	.word	0x08008269
 8008188:	08008261 	.word	0x08008261
 800818c:	08008261 	.word	0x08008261
 8008190:	08008261 	.word	0x08008261
 8008194:	08008261 	.word	0x08008261
 8008198:	08008261 	.word	0x08008261
 800819c:	08008261 	.word	0x08008261
 80081a0:	08008261 	.word	0x08008261
 80081a4:	08008235 	.word	0x08008235
 80081a8:	08008261 	.word	0x08008261
 80081ac:	08008261 	.word	0x08008261
 80081b0:	08008261 	.word	0x08008261
 80081b4:	08008261 	.word	0x08008261
 80081b8:	08008261 	.word	0x08008261
 80081bc:	08008261 	.word	0x08008261
 80081c0:	08008261 	.word	0x08008261
 80081c4:	0800824b 	.word	0x0800824b
 80081c8:	08008261 	.word	0x08008261
 80081cc:	08008261 	.word	0x08008261
 80081d0:	08008261 	.word	0x08008261
 80081d4:	08008261 	.word	0x08008261
 80081d8:	08008261 	.word	0x08008261
 80081dc:	08008261 	.word	0x08008261
 80081e0:	08008261 	.word	0x08008261
 80081e4:	08008269 	.word	0x08008269
 80081e8:	08008261 	.word	0x08008261
 80081ec:	08008261 	.word	0x08008261
 80081f0:	08008261 	.word	0x08008261
 80081f4:	08008261 	.word	0x08008261
 80081f8:	08008261 	.word	0x08008261
 80081fc:	08008261 	.word	0x08008261
 8008200:	08008261 	.word	0x08008261
 8008204:	08008269 	.word	0x08008269
 8008208:	08008261 	.word	0x08008261
 800820c:	08008261 	.word	0x08008261
 8008210:	08008261 	.word	0x08008261
 8008214:	08008261 	.word	0x08008261
 8008218:	08008261 	.word	0x08008261
 800821c:	08008261 	.word	0x08008261
 8008220:	08008261 	.word	0x08008261
 8008224:	08008269 	.word	0x08008269
 8008228:	58024400 	.word	0x58024400
 800822c:	58024800 	.word	0x58024800
 8008230:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008238:	3308      	adds	r3, #8
 800823a:	2101      	movs	r1, #1
 800823c:	4618      	mov	r0, r3
 800823e:	f000 ffc5 	bl	80091cc <RCCEx_PLL2_Config>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008248:	e00f      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800824a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824e:	3328      	adds	r3, #40	@ 0x28
 8008250:	2101      	movs	r1, #1
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f86c 	bl	8009330 <RCCEx_PLL3_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800825e:	e004      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008266:	e000      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800826a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10b      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008272:	4bc0      	ldr	r3, [pc, #768]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008276:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800827a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800827e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008282:	4abc      	ldr	r2, [pc, #752]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008284:	430b      	orrs	r3, r1
 8008286:	6553      	str	r3, [r2, #84]	@ 0x54
 8008288:	e003      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800828e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f002 0302 	and.w	r3, r2, #2
 800829e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082a2:	2300      	movs	r3, #0
 80082a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082a8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082ac:	460b      	mov	r3, r1
 80082ae:	4313      	orrs	r3, r2
 80082b0:	d043      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	d824      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	08008311 	.word	0x08008311
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082f3 	.word	0x080082f3
 80082d0:	08008311 	.word	0x08008311
 80082d4:	08008311 	.word	0x08008311
 80082d8:	08008311 	.word	0x08008311
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e0:	3308      	adds	r3, #8
 80082e2:	2101      	movs	r1, #1
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 ff71 	bl	80091cc <RCCEx_PLL2_Config>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082f0:	e00f      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f6:	3328      	adds	r3, #40	@ 0x28
 80082f8:	2101      	movs	r1, #1
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 f818 	bl	8009330 <RCCEx_PLL3_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008306:	e004      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800830e:	e000      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008312:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10b      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800831a:	4b96      	ldr	r3, [pc, #600]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800831c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831e:	f023 0107 	bic.w	r1, r3, #7
 8008322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800832a:	4a92      	ldr	r2, [pc, #584]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800832c:	430b      	orrs	r3, r1
 800832e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008330:	e003      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008336:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800833a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f002 0304 	and.w	r3, r2, #4
 8008346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800834a:	2300      	movs	r3, #0
 800834c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008350:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008354:	460b      	mov	r3, r1
 8008356:	4313      	orrs	r3, r2
 8008358:	d043      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800835a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800835e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008362:	2b05      	cmp	r3, #5
 8008364:	d824      	bhi.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008366:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	080083b9 	.word	0x080083b9
 8008370:	08008385 	.word	0x08008385
 8008374:	0800839b 	.word	0x0800839b
 8008378:	080083b9 	.word	0x080083b9
 800837c:	080083b9 	.word	0x080083b9
 8008380:	080083b9 	.word	0x080083b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008388:	3308      	adds	r3, #8
 800838a:	2101      	movs	r1, #1
 800838c:	4618      	mov	r0, r3
 800838e:	f000 ff1d 	bl	80091cc <RCCEx_PLL2_Config>
 8008392:	4603      	mov	r3, r0
 8008394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008398:	e00f      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800839a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839e:	3328      	adds	r3, #40	@ 0x28
 80083a0:	2101      	movs	r1, #1
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 ffc4 	bl	8009330 <RCCEx_PLL3_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083ae:	e004      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083b6:	e000      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80083b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10b      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083c2:	4b6c      	ldr	r3, [pc, #432]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083c6:	f023 0107 	bic.w	r1, r3, #7
 80083ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083d2:	4a68      	ldr	r2, [pc, #416]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80083d8:	e003      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f002 0320 	and.w	r3, r2, #32
 80083ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083f2:	2300      	movs	r3, #0
 80083f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083fc:	460b      	mov	r3, r1
 80083fe:	4313      	orrs	r3, r2
 8008400:	d055      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800840a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800840e:	d033      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008414:	d82c      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800841a:	d02f      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800841c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008420:	d826      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008426:	d02b      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008428:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800842c:	d820      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800842e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008432:	d012      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008438:	d81a      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d022      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800843e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008442:	d115      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008448:	3308      	adds	r3, #8
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f000 febd 	bl	80091cc <RCCEx_PLL2_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008458:	e015      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800845a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845e:	3328      	adds	r3, #40	@ 0x28
 8008460:	2102      	movs	r1, #2
 8008462:	4618      	mov	r0, r3
 8008464:	f000 ff64 	bl	8009330 <RCCEx_PLL3_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800846e:	e00a      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008476:	e006      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008478:	bf00      	nop
 800847a:	e004      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800847c:	bf00      	nop
 800847e:	e002      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008480:	bf00      	nop
 8008482:	e000      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008486:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800848e:	4b39      	ldr	r3, [pc, #228]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008492:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800849e:	4a35      	ldr	r2, [pc, #212]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80084a0:	430b      	orrs	r3, r1
 80084a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80084a4:	e003      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80084ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084be:	2300      	movs	r3, #0
 80084c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4313      	orrs	r3, r2
 80084cc:	d058      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80084ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80084d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084da:	d033      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80084dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084e0:	d82c      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e6:	d02f      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80084e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ec:	d826      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084f2:	d02b      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80084f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084f8:	d820      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80084fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084fe:	d012      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008504:	d81a      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d022      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800850a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800850e:	d115      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008514:	3308      	adds	r3, #8
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fe57 	bl	80091cc <RCCEx_PLL2_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008524:	e015      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800852a:	3328      	adds	r3, #40	@ 0x28
 800852c:	2102      	movs	r1, #2
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fefe 	bl	8009330 <RCCEx_PLL3_Config>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800853a:	e00a      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008542:	e006      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008544:	bf00      	nop
 8008546:	e004      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008548:	bf00      	nop
 800854a:	e002      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800854c:	bf00      	nop
 800854e:	e000      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008552:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10e      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800855a:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800855c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800856a:	4a02      	ldr	r2, [pc, #8]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800856c:	430b      	orrs	r3, r1
 800856e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008570:	e006      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008572:	bf00      	nop
 8008574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800857c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800858c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008590:	2300      	movs	r3, #0
 8008592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008596:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d055      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80085a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085ac:	d033      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80085ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085b2:	d82c      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80085b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085b8:	d02f      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80085ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085be:	d826      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80085c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085c4:	d02b      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80085c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085ca:	d820      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80085cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085d0:	d012      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80085d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085d6:	d81a      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d022      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80085dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e0:	d115      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e6:	3308      	adds	r3, #8
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fdee 	bl	80091cc <RCCEx_PLL2_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085f6:	e015      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085fc:	3328      	adds	r3, #40	@ 0x28
 80085fe:	2102      	movs	r1, #2
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fe95 	bl	8009330 <RCCEx_PLL3_Config>
 8008606:	4603      	mov	r3, r0
 8008608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800860c:	e00a      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008614:	e006      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008616:	bf00      	nop
 8008618:	e004      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008624:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800862c:	4ba1      	ldr	r3, [pc, #644]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800862e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008630:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008638:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800863c:	4a9d      	ldr	r2, [pc, #628]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800863e:	430b      	orrs	r3, r1
 8008640:	6593      	str	r3, [r2, #88]	@ 0x58
 8008642:	e003      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008644:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008648:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800864c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f002 0308 	and.w	r3, r2, #8
 8008658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800865c:	2300      	movs	r3, #0
 800865e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008662:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008666:	460b      	mov	r3, r1
 8008668:	4313      	orrs	r3, r2
 800866a:	d01e      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800866c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008678:	d10c      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800867a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867e:	3328      	adds	r3, #40	@ 0x28
 8008680:	2102      	movs	r1, #2
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fe54 	bl	8009330 <RCCEx_PLL3_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008694:	4b87      	ldr	r3, [pc, #540]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008698:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800869c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a4:	4a83      	ldr	r2, [pc, #524]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086a6:	430b      	orrs	r3, r1
 80086a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f002 0310 	and.w	r3, r2, #16
 80086b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ba:	2300      	movs	r3, #0
 80086bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d01e      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d6:	d10c      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086dc:	3328      	adds	r3, #40	@ 0x28
 80086de:	2102      	movs	r1, #2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fe25 	bl	8009330 <RCCEx_PLL3_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086f2:	4b70      	ldr	r3, [pc, #448]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008702:	4a6c      	ldr	r2, [pc, #432]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008704:	430b      	orrs	r3, r1
 8008706:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800871e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008722:	460b      	mov	r3, r1
 8008724:	4313      	orrs	r3, r2
 8008726:	d03e      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008734:	d022      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800873a:	d81b      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008744:	d00b      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008746:	e015      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800874c:	3308      	adds	r3, #8
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fd3b 	bl	80091cc <RCCEx_PLL2_Config>
 8008756:	4603      	mov	r3, r0
 8008758:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800875c:	e00f      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800875e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008762:	3328      	adds	r3, #40	@ 0x28
 8008764:	2102      	movs	r1, #2
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fde2 	bl	8009330 <RCCEx_PLL3_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008772:	e004      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800877a:	e000      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800877c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800877e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008786:	4b4b      	ldr	r3, [pc, #300]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800878e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008796:	4a47      	ldr	r2, [pc, #284]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008798:	430b      	orrs	r3, r1
 800879a:	6593      	str	r3, [r2, #88]	@ 0x58
 800879c:	e003      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80087b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087b4:	2300      	movs	r3, #0
 80087b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80087bc:	460b      	mov	r3, r1
 80087be:	4313      	orrs	r3, r2
 80087c0:	d03b      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80087c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087ce:	d01f      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80087d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087d4:	d818      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80087d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087da:	d003      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80087dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e0:	d007      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80087e2:	e011      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e4:	4b33      	ldr	r3, [pc, #204]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	4a32      	ldr	r2, [pc, #200]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087f0:	e00f      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f6:	3328      	adds	r3, #40	@ 0x28
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fd98 	bl	8009330 <RCCEx_PLL3_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008806:	e004      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800880e:	e000      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008812:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800881a:	4b26      	ldr	r3, [pc, #152]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800881c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800882a:	4a22      	ldr	r2, [pc, #136]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800882c:	430b      	orrs	r3, r1
 800882e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008830:	e003      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008832:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008836:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800883a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008846:	673b      	str	r3, [r7, #112]	@ 0x70
 8008848:	2300      	movs	r3, #0
 800884a:	677b      	str	r3, [r7, #116]	@ 0x74
 800884c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008850:	460b      	mov	r3, r1
 8008852:	4313      	orrs	r3, r2
 8008854:	d034      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800885a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008864:	d007      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008866:	e011      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	4a11      	ldr	r2, [pc, #68]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800886e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008874:	e00e      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887a:	3308      	adds	r3, #8
 800887c:	2102      	movs	r1, #2
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fca4 	bl	80091cc <RCCEx_PLL2_Config>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800888a:	e003      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10d      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800889c:	4b05      	ldr	r3, [pc, #20]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800889e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088aa:	4a02      	ldr	r2, [pc, #8]	@ (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80088ac:	430b      	orrs	r3, r1
 80088ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088b0:	e006      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80088b2:	bf00      	nop
 80088b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80088cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ce:	2300      	movs	r3, #0
 80088d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80088d6:	460b      	mov	r3, r1
 80088d8:	4313      	orrs	r3, r2
 80088da:	d00c      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e0:	3328      	adds	r3, #40	@ 0x28
 80088e2:	2102      	movs	r1, #2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fd23 	bl	8009330 <RCCEx_PLL3_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008902:	663b      	str	r3, [r7, #96]	@ 0x60
 8008904:	2300      	movs	r3, #0
 8008906:	667b      	str	r3, [r7, #100]	@ 0x64
 8008908:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800890c:	460b      	mov	r3, r1
 800890e:	4313      	orrs	r3, r2
 8008910:	d038      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800891e:	d018      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008924:	d811      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800892a:	d014      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800892c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008930:	d80b      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d011      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893a:	d106      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800893c:	4bc3      	ldr	r3, [pc, #780]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	4ac2      	ldr	r2, [pc, #776]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008948:	e008      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008950:	e004      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800895a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008964:	4bb9      	ldr	r3, [pc, #740]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008968:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800896c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008974:	4ab5      	ldr	r2, [pc, #724]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008976:	430b      	orrs	r3, r1
 8008978:	6553      	str	r3, [r2, #84]	@ 0x54
 800897a:	e003      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008980:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008990:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008992:	2300      	movs	r3, #0
 8008994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008996:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800899a:	460b      	mov	r3, r1
 800899c:	4313      	orrs	r3, r2
 800899e:	d009      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089a0:	4baa      	ldr	r3, [pc, #680]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80089a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089ae:	4aa7      	ldr	r2, [pc, #668]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089b0:	430b      	orrs	r3, r1
 80089b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80089c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80089c2:	2300      	movs	r3, #0
 80089c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80089c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80089ca:	460b      	mov	r3, r1
 80089cc:	4313      	orrs	r3, r2
 80089ce:	d009      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089d0:	4b9e      	ldr	r3, [pc, #632]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80089d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089de:	4a9b      	ldr	r2, [pc, #620]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089e0:	430b      	orrs	r3, r1
 80089e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80089e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80089f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089f2:	2300      	movs	r3, #0
 80089f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80089fa:	460b      	mov	r3, r1
 80089fc:	4313      	orrs	r3, r2
 80089fe:	d009      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008a00:	4b92      	ldr	r3, [pc, #584]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a04:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a0e:	4a8f      	ldr	r2, [pc, #572]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a22:	2300      	movs	r3, #0
 8008a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	d00e      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a30:	4b86      	ldr	r3, [pc, #536]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	4a85      	ldr	r2, [pc, #532]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a3a:	6113      	str	r3, [r2, #16]
 8008a3c:	4b83      	ldr	r3, [pc, #524]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a3e:	6919      	ldr	r1, [r3, #16]
 8008a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a48:	4a80      	ldr	r2, [pc, #512]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a64:	460b      	mov	r3, r1
 8008a66:	4313      	orrs	r3, r2
 8008a68:	d009      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a6a:	4b78      	ldr	r3, [pc, #480]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a78:	4a74      	ldr	r2, [pc, #464]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a94:	460b      	mov	r3, r1
 8008a96:	4313      	orrs	r3, r2
 8008a98:	d00a      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aaa:	4a68      	ldr	r2, [pc, #416]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ac2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	d011      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fb79 	bl	80091cc <RCCEx_PLL2_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	2100      	movs	r1, #0
 8008afa:	6239      	str	r1, [r7, #32]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b06:	460b      	mov	r3, r1
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	d011      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b10:	3308      	adds	r3, #8
 8008b12:	2101      	movs	r1, #1
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fb59 	bl	80091cc <RCCEx_PLL2_Config>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008b20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	61b9      	str	r1, [r7, #24]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	61fb      	str	r3, [r7, #28]
 8008b42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b46:	460b      	mov	r3, r1
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	d011      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b50:	3308      	adds	r3, #8
 8008b52:	2102      	movs	r1, #2
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fb39 	bl	80091cc <RCCEx_PLL2_Config>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008b60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6139      	str	r1, [r7, #16]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b86:	460b      	mov	r3, r1
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	d011      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b90:	3328      	adds	r3, #40	@ 0x28
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fbcb 	bl	8009330 <RCCEx_PLL3_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008ba0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d011      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd0:	3328      	adds	r3, #40	@ 0x28
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fbab 	bl	8009330 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008be0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6039      	str	r1, [r7, #0]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	607b      	str	r3, [r7, #4]
 8008c02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c06:	460b      	mov	r3, r1
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	d011      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c10:	3328      	adds	r3, #40	@ 0x28
 8008c12:	2102      	movs	r1, #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fb8b 	bl	8009330 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008c20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008c30:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e000      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008c44:	46bd      	mov	sp, r7
 8008c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400

08008c50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008c54:	f7fe fda0 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	091b      	lsrs	r3, r3, #4
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	4904      	ldr	r1, [pc, #16]	@ (8008c78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c66:	5ccb      	ldrb	r3, [r1, r3]
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	58024400 	.word	0x58024400
 8008c78:	0800edc8 	.word	0x0800edc8

08008c7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b089      	sub	sp, #36	@ 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c84:	4ba1      	ldr	r3, [pc, #644]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c8e:	4b9f      	ldr	r3, [pc, #636]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c92:	0b1b      	lsrs	r3, r3, #12
 8008c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c9a:	4b9c      	ldr	r3, [pc, #624]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	091b      	lsrs	r3, r3, #4
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ca6:	4b99      	ldr	r3, [pc, #612]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008caa:	08db      	lsrs	r3, r3, #3
 8008cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8111 	beq.w	8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	f000 8083 	beq.w	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	f200 80a1 	bhi.w	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d056      	beq.n	8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ce6:	e099      	b.n	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ce8:	4b88      	ldr	r3, [pc, #544]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d02d      	beq.n	8008d50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cf4:	4b85      	ldr	r3, [pc, #532]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	08db      	lsrs	r3, r3, #3
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	4a84      	ldr	r2, [pc, #528]	@ (8008f10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
 8008d04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d4e:	e087      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b6a      	ldr	r3, [pc, #424]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	e065      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b59      	ldr	r3, [pc, #356]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	e043      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b48      	ldr	r3, [pc, #288]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1a:	e021      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2e:	4b37      	ldr	r3, [pc, #220]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e60:	4b2a      	ldr	r3, [pc, #168]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e64:	0a5b      	lsrs	r3, r3, #9
 8008e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e86:	ee17 2a90 	vmov	r2, s15
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb4:	ee17 2a90 	vmov	r2, s15
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	0e1b      	lsrs	r3, r3, #24
 8008ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee2:	ee17 2a90 	vmov	r2, s15
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008eea:	e008      	b.n	8008efe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	609a      	str	r2, [r3, #8]
}
 8008efe:	bf00      	nop
 8008f00:	3724      	adds	r7, #36	@ 0x24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	46000000 	.word	0x46000000
 8008f18:	4c742400 	.word	0x4c742400
 8008f1c:	4a742400 	.word	0x4a742400
 8008f20:	4bb71b00 	.word	0x4bb71b00

08008f24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b089      	sub	sp, #36	@ 0x24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f2c:	4ba1      	ldr	r3, [pc, #644]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f36:	4b9f      	ldr	r3, [pc, #636]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	0d1b      	lsrs	r3, r3, #20
 8008f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f42:	4b9c      	ldr	r3, [pc, #624]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f4e:	4b99      	ldr	r3, [pc, #612]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f52:	08db      	lsrs	r3, r3, #3
 8008f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8111 	beq.w	8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	f000 8083 	beq.w	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	f200 80a1 	bhi.w	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d056      	beq.n	800903c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f8e:	e099      	b.n	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f90:	4b88      	ldr	r3, [pc, #544]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d02d      	beq.n	8008ff8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f9c:	4b85      	ldr	r3, [pc, #532]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	08db      	lsrs	r3, r3, #3
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	4a84      	ldr	r2, [pc, #528]	@ (80091b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ff6:	e087      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900a:	4b6a      	ldr	r3, [pc, #424]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a03 	vldr	s12, [r7, #12]
 800901e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800903a:	e065      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b59      	ldr	r3, [pc, #356]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009062:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907e:	e043      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b48      	ldr	r3, [pc, #288]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c2:	e021      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d6:	4b37      	ldr	r3, [pc, #220]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009106:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009108:	4b2a      	ldr	r3, [pc, #168]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800910a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910c:	0a5b      	lsrs	r3, r3, #9
 800910e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800911e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009122:	edd7 6a07 	vldr	s13, [r7, #28]
 8009126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800912a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912e:	ee17 2a90 	vmov	r2, s15
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009136:	4b1f      	ldr	r3, [pc, #124]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009148:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800914c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009150:	edd7 6a07 	vldr	s13, [r7, #28]
 8009154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800915c:	ee17 2a90 	vmov	r2, s15
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009164:	4b13      	ldr	r3, [pc, #76]	@ (80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009168:	0e1b      	lsrs	r3, r3, #24
 800916a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800917a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800917e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800918a:	ee17 2a90 	vmov	r2, s15
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009192:	e008      	b.n	80091a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	609a      	str	r2, [r3, #8]
}
 80091a6:	bf00      	nop
 80091a8:	3724      	adds	r7, #36	@ 0x24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	58024400 	.word	0x58024400
 80091b8:	03d09000 	.word	0x03d09000
 80091bc:	46000000 	.word	0x46000000
 80091c0:	4c742400 	.word	0x4c742400
 80091c4:	4a742400 	.word	0x4a742400
 80091c8:	4bb71b00 	.word	0x4bb71b00

080091cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091da:	4b53      	ldr	r3, [pc, #332]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80091dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d101      	bne.n	80091ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e099      	b.n	800931e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80091f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091f6:	f7f7 ffc7 	bl	8001188 <HAL_GetTick>
 80091fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091fc:	e008      	b.n	8009210 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091fe:	f7f7 ffc3 	bl	8001188 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	2b02      	cmp	r3, #2
 800920a:	d901      	bls.n	8009210 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e086      	b.n	800931e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009210:	4b45      	ldr	r3, [pc, #276]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1f0      	bne.n	80091fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800921c:	4b42      	ldr	r3, [pc, #264]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	031b      	lsls	r3, r3, #12
 800922a:	493f      	ldr	r1, [pc, #252]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 800922c:	4313      	orrs	r3, r2
 800922e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	3b01      	subs	r3, #1
 8009236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	3b01      	subs	r3, #1
 8009240:	025b      	lsls	r3, r3, #9
 8009242:	b29b      	uxth	r3, r3
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	3b01      	subs	r3, #1
 800924c:	041b      	lsls	r3, r3, #16
 800924e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	3b01      	subs	r3, #1
 800925a:	061b      	lsls	r3, r3, #24
 800925c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009260:	4931      	ldr	r1, [pc, #196]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009262:	4313      	orrs	r3, r2
 8009264:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009266:	4b30      	ldr	r3, [pc, #192]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	492d      	ldr	r1, [pc, #180]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009274:	4313      	orrs	r3, r2
 8009276:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009278:	4b2b      	ldr	r3, [pc, #172]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 800927a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927c:	f023 0220 	bic.w	r2, r3, #32
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	4928      	ldr	r1, [pc, #160]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009286:	4313      	orrs	r3, r2
 8009288:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800928a:	4b27      	ldr	r3, [pc, #156]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	4a26      	ldr	r2, [pc, #152]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009290:	f023 0310 	bic.w	r3, r3, #16
 8009294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009296:	4b24      	ldr	r3, [pc, #144]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800929a:	4b24      	ldr	r3, [pc, #144]	@ (800932c <RCCEx_PLL2_Config+0x160>)
 800929c:	4013      	ands	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	69d2      	ldr	r2, [r2, #28]
 80092a2:	00d2      	lsls	r2, r2, #3
 80092a4:	4920      	ldr	r1, [pc, #128]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	f043 0310 	orr.w	r3, r3, #16
 80092b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d106      	bne.n	80092ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	4a19      	ldr	r2, [pc, #100]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092c8:	e00f      	b.n	80092ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d106      	bne.n	80092de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092d0:	4b15      	ldr	r3, [pc, #84]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	4a14      	ldr	r2, [pc, #80]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092dc:	e005      	b.n	80092ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092de:	4b12      	ldr	r3, [pc, #72]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	4a11      	ldr	r2, [pc, #68]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 80092f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092f6:	f7f7 ff47 	bl	8001188 <HAL_GetTick>
 80092fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092fc:	e008      	b.n	8009310 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092fe:	f7f7 ff43 	bl	8001188 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d901      	bls.n	8009310 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e006      	b.n	800931e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009310:	4b05      	ldr	r3, [pc, #20]	@ (8009328 <RCCEx_PLL2_Config+0x15c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0f0      	beq.n	80092fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	58024400 	.word	0x58024400
 800932c:	ffff0007 	.word	0xffff0007

08009330 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800933e:	4b53      	ldr	r3, [pc, #332]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	2b03      	cmp	r3, #3
 8009348:	d101      	bne.n	800934e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e099      	b.n	8009482 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800934e:	4b4f      	ldr	r3, [pc, #316]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a4e      	ldr	r2, [pc, #312]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800935a:	f7f7 ff15 	bl	8001188 <HAL_GetTick>
 800935e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009360:	e008      	b.n	8009374 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009362:	f7f7 ff11 	bl	8001188 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d901      	bls.n	8009374 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e086      	b.n	8009482 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009374:	4b45      	ldr	r3, [pc, #276]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1f0      	bne.n	8009362 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009380:	4b42      	ldr	r3, [pc, #264]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	051b      	lsls	r3, r3, #20
 800938e:	493f      	ldr	r1, [pc, #252]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009390:	4313      	orrs	r3, r2
 8009392:	628b      	str	r3, [r1, #40]	@ 0x28
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	3b01      	subs	r3, #1
 800939a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	025b      	lsls	r3, r3, #9
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093b6:	431a      	orrs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	3b01      	subs	r3, #1
 80093be:	061b      	lsls	r3, r3, #24
 80093c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093c4:	4931      	ldr	r1, [pc, #196]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093ca:	4b30      	ldr	r3, [pc, #192]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	492d      	ldr	r1, [pc, #180]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093dc:	4b2b      	ldr	r3, [pc, #172]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	4928      	ldr	r1, [pc, #160]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093ee:	4b27      	ldr	r3, [pc, #156]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f2:	4a26      	ldr	r2, [pc, #152]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093fa:	4b24      	ldr	r3, [pc, #144]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 80093fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093fe:	4b24      	ldr	r3, [pc, #144]	@ (8009490 <RCCEx_PLL3_Config+0x160>)
 8009400:	4013      	ands	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	69d2      	ldr	r2, [r2, #28]
 8009406:	00d2      	lsls	r2, r2, #3
 8009408:	4920      	ldr	r1, [pc, #128]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 800940a:	4313      	orrs	r3, r2
 800940c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800940e:	4b1f      	ldr	r3, [pc, #124]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	4a1e      	ldr	r2, [pc, #120]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d106      	bne.n	800942e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009420:	4b1a      	ldr	r3, [pc, #104]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	4a19      	ldr	r2, [pc, #100]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009426:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800942a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800942c:	e00f      	b.n	800944e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d106      	bne.n	8009442 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009434:	4b15      	ldr	r3, [pc, #84]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009438:	4a14      	ldr	r2, [pc, #80]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 800943a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800943e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009440:	e005      	b.n	800944e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009442:	4b12      	ldr	r3, [pc, #72]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	4a11      	ldr	r2, [pc, #68]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009448:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800944c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800944e:	4b0f      	ldr	r3, [pc, #60]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a0e      	ldr	r2, [pc, #56]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800945a:	f7f7 fe95 	bl	8001188 <HAL_GetTick>
 800945e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009460:	e008      	b.n	8009474 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009462:	f7f7 fe91 	bl	8001188 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	2b02      	cmp	r3, #2
 800946e:	d901      	bls.n	8009474 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e006      	b.n	8009482 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009474:	4b05      	ldr	r3, [pc, #20]	@ (800948c <RCCEx_PLL3_Config+0x15c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0f0      	beq.n	8009462 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	58024400 	.word	0x58024400
 8009490:	ffff0007 	.word	0xffff0007

08009494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e049      	b.n	800953a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f841 	bl	8009542 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f000 f9e8 	bl	80098a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d001      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e054      	b.n	800961a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a26      	ldr	r2, [pc, #152]	@ (8009628 <HAL_TIM_Base_Start_IT+0xd0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d022      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959a:	d01d      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a22      	ldr	r2, [pc, #136]	@ (800962c <HAL_TIM_Base_Start_IT+0xd4>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d018      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a21      	ldr	r2, [pc, #132]	@ (8009630 <HAL_TIM_Base_Start_IT+0xd8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009634 <HAL_TIM_Base_Start_IT+0xdc>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00e      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a1e      	ldr	r2, [pc, #120]	@ (8009638 <HAL_TIM_Base_Start_IT+0xe0>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d009      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1c      	ldr	r2, [pc, #112]	@ (800963c <HAL_TIM_Base_Start_IT+0xe4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x80>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009640 <HAL_TIM_Base_Start_IT+0xe8>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d115      	bne.n	8009604 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	4b19      	ldr	r3, [pc, #100]	@ (8009644 <HAL_TIM_Base_Start_IT+0xec>)
 80095e0:	4013      	ands	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b06      	cmp	r3, #6
 80095e8:	d015      	beq.n	8009616 <HAL_TIM_Base_Start_IT+0xbe>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f0:	d011      	beq.n	8009616 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0201 	orr.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009602:	e008      	b.n	8009616 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e000      	b.n	8009618 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40010000 	.word	0x40010000
 800962c:	40000400 	.word	0x40000400
 8009630:	40000800 	.word	0x40000800
 8009634:	40000c00 	.word	0x40000c00
 8009638:	40010400 	.word	0x40010400
 800963c:	40001800 	.word	0x40001800
 8009640:	40014000 	.word	0x40014000
 8009644:	00010007 	.word	0x00010007

08009648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d020      	beq.n	80096ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d01b      	beq.n	80096ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0202 	mvn.w	r2, #2
 800967c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f8e9 	bl	800986a <HAL_TIM_IC_CaptureCallback>
 8009698:	e005      	b.n	80096a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f8db 	bl	8009856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8ec 	bl	800987e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d020      	beq.n	80096f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01b      	beq.n	80096f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f06f 0204 	mvn.w	r2, #4
 80096c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f8c3 	bl	800986a <HAL_TIM_IC_CaptureCallback>
 80096e4:	e005      	b.n	80096f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8b5 	bl	8009856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f8c6 	bl	800987e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f003 0308 	and.w	r3, r3, #8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d020      	beq.n	8009744 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f003 0308 	and.w	r3, r3, #8
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01b      	beq.n	8009744 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f06f 0208 	mvn.w	r2, #8
 8009714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2204      	movs	r2, #4
 800971a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f89d 	bl	800986a <HAL_TIM_IC_CaptureCallback>
 8009730:	e005      	b.n	800973e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f88f 	bl	8009856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f8a0 	bl	800987e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b00      	cmp	r3, #0
 800974c:	d020      	beq.n	8009790 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01b      	beq.n	8009790 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0210 	mvn.w	r2, #16
 8009760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2208      	movs	r2, #8
 8009766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f877 	bl	800986a <HAL_TIM_IC_CaptureCallback>
 800977c:	e005      	b.n	800978a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f869 	bl	8009856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f87a 	bl	800987e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00c      	beq.n	80097b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d007      	beq.n	80097b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f06f 0201 	mvn.w	r2, #1
 80097ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7f7 fa42 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00c      	beq.n	80097e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80097da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f913 	bl	8009a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00c      	beq.n	8009806 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80097fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f90b 	bl	8009a1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00c      	beq.n	800982a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d007      	beq.n	800982a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f834 	bl	8009892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f003 0320 	and.w	r3, r3, #32
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00c      	beq.n	800984e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b00      	cmp	r3, #0
 800983c:	d007      	beq.n	800984e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f06f 0220 	mvn.w	r2, #32
 8009846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f8d3 	bl	80099f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a46      	ldr	r2, [pc, #280]	@ (80099d4 <TIM_Base_SetConfig+0x12c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d013      	beq.n	80098e8 <TIM_Base_SetConfig+0x40>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c6:	d00f      	beq.n	80098e8 <TIM_Base_SetConfig+0x40>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a43      	ldr	r2, [pc, #268]	@ (80099d8 <TIM_Base_SetConfig+0x130>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00b      	beq.n	80098e8 <TIM_Base_SetConfig+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a42      	ldr	r2, [pc, #264]	@ (80099dc <TIM_Base_SetConfig+0x134>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d007      	beq.n	80098e8 <TIM_Base_SetConfig+0x40>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a41      	ldr	r2, [pc, #260]	@ (80099e0 <TIM_Base_SetConfig+0x138>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d003      	beq.n	80098e8 <TIM_Base_SetConfig+0x40>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a40      	ldr	r2, [pc, #256]	@ (80099e4 <TIM_Base_SetConfig+0x13c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d108      	bne.n	80098fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a35      	ldr	r2, [pc, #212]	@ (80099d4 <TIM_Base_SetConfig+0x12c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d01f      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009908:	d01b      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a32      	ldr	r2, [pc, #200]	@ (80099d8 <TIM_Base_SetConfig+0x130>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d017      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a31      	ldr	r2, [pc, #196]	@ (80099dc <TIM_Base_SetConfig+0x134>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d013      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a30      	ldr	r2, [pc, #192]	@ (80099e0 <TIM_Base_SetConfig+0x138>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00f      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2f      	ldr	r2, [pc, #188]	@ (80099e4 <TIM_Base_SetConfig+0x13c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00b      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2e      	ldr	r2, [pc, #184]	@ (80099e8 <TIM_Base_SetConfig+0x140>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d007      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a2d      	ldr	r2, [pc, #180]	@ (80099ec <TIM_Base_SetConfig+0x144>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d003      	beq.n	8009942 <TIM_Base_SetConfig+0x9a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a2c      	ldr	r2, [pc, #176]	@ (80099f0 <TIM_Base_SetConfig+0x148>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d108      	bne.n	8009954 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4313      	orrs	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a16      	ldr	r2, [pc, #88]	@ (80099d4 <TIM_Base_SetConfig+0x12c>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d00f      	beq.n	80099a0 <TIM_Base_SetConfig+0xf8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a18      	ldr	r2, [pc, #96]	@ (80099e4 <TIM_Base_SetConfig+0x13c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00b      	beq.n	80099a0 <TIM_Base_SetConfig+0xf8>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a17      	ldr	r2, [pc, #92]	@ (80099e8 <TIM_Base_SetConfig+0x140>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d007      	beq.n	80099a0 <TIM_Base_SetConfig+0xf8>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a16      	ldr	r2, [pc, #88]	@ (80099ec <TIM_Base_SetConfig+0x144>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_Base_SetConfig+0xf8>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a15      	ldr	r2, [pc, #84]	@ (80099f0 <TIM_Base_SetConfig+0x148>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d103      	bne.n	80099a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d105      	bne.n	80099c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f023 0201 	bic.w	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	611a      	str	r2, [r3, #16]
  }
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	40010000 	.word	0x40010000
 80099d8:	40000400 	.word	0x40000400
 80099dc:	40000800 	.word	0x40000800
 80099e0:	40000c00 	.word	0x40000c00
 80099e4:	40010400 	.word	0x40010400
 80099e8:	40014000 	.word	0x40014000
 80099ec:	40014400 	.word	0x40014400
 80099f0:	40014800 	.word	0x40014800

080099f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e042      	b.n	8009ac8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d106      	bne.n	8009a5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7f7 faab 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2224      	movs	r2, #36	@ 0x24
 8009a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0201 	bic.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 fafc 	bl	800b078 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc8d 	bl	800a3a0 <UART_SetConfig>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e01b      	b.n	8009ac8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 fb7b 	bl	800b1bc <UART_CheckIdleState>
 8009ac6:	4603      	mov	r3, r0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	@ 0x28
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d17b      	bne.n	8009be2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <HAL_UART_Transmit+0x26>
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e074      	b.n	8009be4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2221      	movs	r2, #33	@ 0x21
 8009b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b0a:	f7f7 fb3d 	bl	8001188 <HAL_GetTick>
 8009b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	88fa      	ldrh	r2, [r7, #6]
 8009b14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	88fa      	ldrh	r2, [r7, #6]
 8009b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b28:	d108      	bne.n	8009b3c <HAL_UART_Transmit+0x6c>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d104      	bne.n	8009b3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e003      	b.n	8009b44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b44:	e030      	b.n	8009ba8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2180      	movs	r1, #128	@ 0x80
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f001 fbdd 	bl	800b310 <UART_WaitOnFlagUntilTimeout>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e03d      	b.n	8009be4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10b      	bne.n	8009b86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	3302      	adds	r3, #2
 8009b82:	61bb      	str	r3, [r7, #24]
 8009b84:	e007      	b.n	8009b96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	3301      	adds	r3, #1
 8009b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1c8      	bne.n	8009b46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2140      	movs	r1, #64	@ 0x40
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f001 fba6 	bl	800b310 <UART_WaitOnFlagUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e006      	b.n	8009be4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e000      	b.n	8009be4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009be2:	2302      	movs	r3, #2
  }
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3720      	adds	r7, #32
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b0ba      	sub	sp, #232	@ 0xe8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009c16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d11b      	bne.n	8009c60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d015      	beq.n	8009c60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c38:	f003 0320 	and.w	r3, r3, #32
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d105      	bne.n	8009c4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8377 	beq.w	800a344 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	4798      	blx	r3
      }
      return;
 8009c5e:	e371      	b.n	800a344 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 8123 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ea4 <HAL_UART_IRQHandler+0x2b8>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8009ea8 <HAL_UART_IRQHandler+0x2bc>)
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8116 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d011      	beq.n	8009cb4 <HAL_UART_IRQHandler+0xc8>
 8009c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009caa:	f043 0201 	orr.w	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d011      	beq.n	8009ce4 <HAL_UART_IRQHandler+0xf8>
 8009cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00b      	beq.n	8009ce4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cda:	f043 0204 	orr.w	r2, r3, #4
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d011      	beq.n	8009d14 <HAL_UART_IRQHandler+0x128>
 8009cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2204      	movs	r2, #4
 8009d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d0a:	f043 0202 	orr.w	r2, r3, #2
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d017      	beq.n	8009d50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d24:	f003 0320 	and.w	r3, r3, #32
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d105      	bne.n	8009d38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d30:	4b5c      	ldr	r3, [pc, #368]	@ (8009ea4 <HAL_UART_IRQHandler+0x2b8>)
 8009d32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d46:	f043 0208 	orr.w	r2, r3, #8
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d012      	beq.n	8009d82 <HAL_UART_IRQHandler+0x196>
 8009d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00c      	beq.n	8009d82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d78:	f043 0220 	orr.w	r2, r3, #32
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 82dd 	beq.w	800a348 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d013      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d9e:	f003 0320 	and.w	r3, r3, #32
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d105      	bne.n	8009db2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd6:	2b40      	cmp	r3, #64	@ 0x40
 8009dd8:	d005      	beq.n	8009de6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009dde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d054      	beq.n	8009e90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 fb00 	bl	800b3ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df6:	2b40      	cmp	r3, #64	@ 0x40
 8009df8:	d146      	bne.n	8009e88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3308      	adds	r3, #8
 8009e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1d9      	bne.n	8009dfa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d017      	beq.n	8009e80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e56:	4a15      	ldr	r2, [pc, #84]	@ (8009eac <HAL_UART_IRQHandler+0x2c0>)
 8009e58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7f8 fb93 	bl	800258c <HAL_DMA_Abort_IT>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d019      	beq.n	8009ea0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e7e:	e00f      	b.n	8009ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa77 	bl	800a374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e86:	e00b      	b.n	8009ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fa73 	bl	800a374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e8e:	e007      	b.n	8009ea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa6f 	bl	800a374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009e9e:	e253      	b.n	800a348 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea0:	bf00      	nop
    return;
 8009ea2:	e251      	b.n	800a348 <HAL_UART_IRQHandler+0x75c>
 8009ea4:	10000001 	.word	0x10000001
 8009ea8:	04000120 	.word	0x04000120
 8009eac:	0800b4b9 	.word	0x0800b4b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	f040 81e7 	bne.w	800a288 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f000 81e0 	beq.w	800a288 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ecc:	f003 0310 	and.w	r3, r3, #16
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 81d9 	beq.w	800a288 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2210      	movs	r2, #16
 8009edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee8:	2b40      	cmp	r3, #64	@ 0x40
 8009eea:	f040 8151 	bne.w	800a190 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a96      	ldr	r2, [pc, #600]	@ (800a150 <HAL_UART_IRQHandler+0x564>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d068      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a93      	ldr	r2, [pc, #588]	@ (800a154 <HAL_UART_IRQHandler+0x568>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d061      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a91      	ldr	r2, [pc, #580]	@ (800a158 <HAL_UART_IRQHandler+0x56c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d05a      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a8e      	ldr	r2, [pc, #568]	@ (800a15c <HAL_UART_IRQHandler+0x570>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d053      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a8c      	ldr	r2, [pc, #560]	@ (800a160 <HAL_UART_IRQHandler+0x574>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d04c      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a89      	ldr	r2, [pc, #548]	@ (800a164 <HAL_UART_IRQHandler+0x578>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d045      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a87      	ldr	r2, [pc, #540]	@ (800a168 <HAL_UART_IRQHandler+0x57c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d03e      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a84      	ldr	r2, [pc, #528]	@ (800a16c <HAL_UART_IRQHandler+0x580>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d037      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a82      	ldr	r2, [pc, #520]	@ (800a170 <HAL_UART_IRQHandler+0x584>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d030      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a7f      	ldr	r2, [pc, #508]	@ (800a174 <HAL_UART_IRQHandler+0x588>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d029      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a7d      	ldr	r2, [pc, #500]	@ (800a178 <HAL_UART_IRQHandler+0x58c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d022      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a7a      	ldr	r2, [pc, #488]	@ (800a17c <HAL_UART_IRQHandler+0x590>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d01b      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a78      	ldr	r2, [pc, #480]	@ (800a180 <HAL_UART_IRQHandler+0x594>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d014      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a75      	ldr	r2, [pc, #468]	@ (800a184 <HAL_UART_IRQHandler+0x598>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d00d      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a73      	ldr	r2, [pc, #460]	@ (800a188 <HAL_UART_IRQHandler+0x59c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d006      	beq.n	8009fce <HAL_UART_IRQHandler+0x3e2>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a70      	ldr	r2, [pc, #448]	@ (800a18c <HAL_UART_IRQHandler+0x5a0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d106      	bne.n	8009fdc <HAL_UART_IRQHandler+0x3f0>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	e005      	b.n	8009fe8 <HAL_UART_IRQHandler+0x3fc>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 81ab 	beq.w	800a34c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ffc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a000:	429a      	cmp	r2, r3
 800a002:	f080 81a3 	bcs.w	800a34c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a00c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a01c:	f000 8087 	beq.w	800a12e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a034:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a03c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a04a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a04e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a056:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1da      	bne.n	800a020 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3308      	adds	r3, #8
 800a070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a07a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a07c:	f023 0301 	bic.w	r3, r3, #1
 800a080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a08e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a092:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a0a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e1      	bne.n	800a06a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a0ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a0cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a0d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a0d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e3      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0fc:	f023 0310 	bic.w	r3, r3, #16
 800a100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a10e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a110:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a114:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a11c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e4      	bne.n	800a0ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a128:	4618      	mov	r0, r3
 800a12a:	f7f7 ff11 	bl	8001f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2202      	movs	r2, #2
 800a132:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a140:	b29b      	uxth	r3, r3
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	b29b      	uxth	r3, r3
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f91d 	bl	800a388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a14e:	e0fd      	b.n	800a34c <HAL_UART_IRQHandler+0x760>
 800a150:	40020010 	.word	0x40020010
 800a154:	40020028 	.word	0x40020028
 800a158:	40020040 	.word	0x40020040
 800a15c:	40020058 	.word	0x40020058
 800a160:	40020070 	.word	0x40020070
 800a164:	40020088 	.word	0x40020088
 800a168:	400200a0 	.word	0x400200a0
 800a16c:	400200b8 	.word	0x400200b8
 800a170:	40020410 	.word	0x40020410
 800a174:	40020428 	.word	0x40020428
 800a178:	40020440 	.word	0x40020440
 800a17c:	40020458 	.word	0x40020458
 800a180:	40020470 	.word	0x40020470
 800a184:	40020488 	.word	0x40020488
 800a188:	400204a0 	.word	0x400204a0
 800a18c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 80cf 	beq.w	800a350 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a1b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80ca 	beq.w	800a350 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a1de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e4      	bne.n	800a1bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	623b      	str	r3, [r7, #32]
   return(result);
 800a202:	6a3a      	ldr	r2, [r7, #32]
 800a204:	4b55      	ldr	r3, [pc, #340]	@ (800a35c <HAL_UART_IRQHandler+0x770>)
 800a206:	4013      	ands	r3, r2
 800a208:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3308      	adds	r3, #8
 800a212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a216:	633a      	str	r2, [r7, #48]	@ 0x30
 800a218:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a21e:	e841 2300 	strex	r3, r2, [r1]
 800a222:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1e3      	bne.n	800a1f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	e853 3f00 	ldrex	r3, [r3]
 800a24a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0310 	bic.w	r3, r3, #16
 800a252:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a260:	61fb      	str	r3, [r7, #28]
 800a262:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a264:	69b9      	ldr	r1, [r7, #24]
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	e841 2300 	strex	r3, r2, [r1]
 800a26c:	617b      	str	r3, [r7, #20]
   return(result);
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e4      	bne.n	800a23e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a27a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f881 	bl	800a388 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a286:	e063      	b.n	800a350 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a28c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00e      	beq.n	800a2b2 <HAL_UART_IRQHandler+0x6c6>
 800a294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d008      	beq.n	800a2b2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a2a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 f945 	bl	800b53a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2b0:	e051      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d014      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d105      	bne.n	800a2d6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a2ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d008      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d03a      	beq.n	800a354 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
    }
    return;
 800a2e6:	e035      	b.n	800a354 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d009      	beq.n	800a308 <HAL_UART_IRQHandler+0x71c>
 800a2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 f8ef 	bl	800b4e4 <UART_EndTransmit_IT>
    return;
 800a306:	e026      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a30c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d009      	beq.n	800a328 <HAL_UART_IRQHandler+0x73c>
 800a314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a318:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f91e 	bl	800b562 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a326:	e016      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a32c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d010      	beq.n	800a356 <HAL_UART_IRQHandler+0x76a>
 800a334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	da0c      	bge.n	800a356 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f001 f906 	bl	800b54e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a342:	e008      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
      return;
 800a344:	bf00      	nop
 800a346:	e006      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
    return;
 800a348:	bf00      	nop
 800a34a:	e004      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
      return;
 800a34c:	bf00      	nop
 800a34e:	e002      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
      return;
 800a350:	bf00      	nop
 800a352:	e000      	b.n	800a356 <HAL_UART_IRQHandler+0x76a>
    return;
 800a354:	bf00      	nop
  }
}
 800a356:	37e8      	adds	r7, #232	@ 0xe8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	effffffe 	.word	0xeffffffe

0800a360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3a4:	b092      	sub	sp, #72	@ 0x48
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	4bbe      	ldr	r3, [pc, #760]	@ (800a6c8 <UART_SetConfig+0x328>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4ab3      	ldr	r2, [pc, #716]	@ (800a6cc <UART_SetConfig+0x32c>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d004      	beq.n	800a40c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a408:	4313      	orrs	r3, r2
 800a40a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689a      	ldr	r2, [r3, #8]
 800a412:	4baf      	ldr	r3, [pc, #700]	@ (800a6d0 <UART_SetConfig+0x330>)
 800a414:	4013      	ands	r3, r2
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	6812      	ldr	r2, [r2, #0]
 800a41a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a41c:	430b      	orrs	r3, r1
 800a41e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	f023 010f 	bic.w	r1, r3, #15
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4aa6      	ldr	r2, [pc, #664]	@ (800a6d4 <UART_SetConfig+0x334>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d177      	bne.n	800a530 <UART_SetConfig+0x190>
 800a440:	4ba5      	ldr	r3, [pc, #660]	@ (800a6d8 <UART_SetConfig+0x338>)
 800a442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a444:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a448:	2b28      	cmp	r3, #40	@ 0x28
 800a44a:	d86d      	bhi.n	800a528 <UART_SetConfig+0x188>
 800a44c:	a201      	add	r2, pc, #4	@ (adr r2, 800a454 <UART_SetConfig+0xb4>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a4f9 	.word	0x0800a4f9
 800a458:	0800a529 	.word	0x0800a529
 800a45c:	0800a529 	.word	0x0800a529
 800a460:	0800a529 	.word	0x0800a529
 800a464:	0800a529 	.word	0x0800a529
 800a468:	0800a529 	.word	0x0800a529
 800a46c:	0800a529 	.word	0x0800a529
 800a470:	0800a529 	.word	0x0800a529
 800a474:	0800a501 	.word	0x0800a501
 800a478:	0800a529 	.word	0x0800a529
 800a47c:	0800a529 	.word	0x0800a529
 800a480:	0800a529 	.word	0x0800a529
 800a484:	0800a529 	.word	0x0800a529
 800a488:	0800a529 	.word	0x0800a529
 800a48c:	0800a529 	.word	0x0800a529
 800a490:	0800a529 	.word	0x0800a529
 800a494:	0800a509 	.word	0x0800a509
 800a498:	0800a529 	.word	0x0800a529
 800a49c:	0800a529 	.word	0x0800a529
 800a4a0:	0800a529 	.word	0x0800a529
 800a4a4:	0800a529 	.word	0x0800a529
 800a4a8:	0800a529 	.word	0x0800a529
 800a4ac:	0800a529 	.word	0x0800a529
 800a4b0:	0800a529 	.word	0x0800a529
 800a4b4:	0800a511 	.word	0x0800a511
 800a4b8:	0800a529 	.word	0x0800a529
 800a4bc:	0800a529 	.word	0x0800a529
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a529 	.word	0x0800a529
 800a4c8:	0800a529 	.word	0x0800a529
 800a4cc:	0800a529 	.word	0x0800a529
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a519 	.word	0x0800a519
 800a4d8:	0800a529 	.word	0x0800a529
 800a4dc:	0800a529 	.word	0x0800a529
 800a4e0:	0800a529 	.word	0x0800a529
 800a4e4:	0800a529 	.word	0x0800a529
 800a4e8:	0800a529 	.word	0x0800a529
 800a4ec:	0800a529 	.word	0x0800a529
 800a4f0:	0800a529 	.word	0x0800a529
 800a4f4:	0800a521 	.word	0x0800a521
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e326      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a500:	2304      	movs	r3, #4
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e322      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a508:	2308      	movs	r3, #8
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e31e      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a510:	2310      	movs	r3, #16
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e31a      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a518:	2320      	movs	r3, #32
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e316      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a520:	2340      	movs	r3, #64	@ 0x40
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e312      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a528:	2380      	movs	r3, #128	@ 0x80
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e30e      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a69      	ldr	r2, [pc, #420]	@ (800a6dc <UART_SetConfig+0x33c>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d130      	bne.n	800a59c <UART_SetConfig+0x1fc>
 800a53a:	4b67      	ldr	r3, [pc, #412]	@ (800a6d8 <UART_SetConfig+0x338>)
 800a53c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a53e:	f003 0307 	and.w	r3, r3, #7
 800a542:	2b05      	cmp	r3, #5
 800a544:	d826      	bhi.n	800a594 <UART_SetConfig+0x1f4>
 800a546:	a201      	add	r2, pc, #4	@ (adr r2, 800a54c <UART_SetConfig+0x1ac>)
 800a548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54c:	0800a565 	.word	0x0800a565
 800a550:	0800a56d 	.word	0x0800a56d
 800a554:	0800a575 	.word	0x0800a575
 800a558:	0800a57d 	.word	0x0800a57d
 800a55c:	0800a585 	.word	0x0800a585
 800a560:	0800a58d 	.word	0x0800a58d
 800a564:	2300      	movs	r3, #0
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e2f0      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a56c:	2304      	movs	r3, #4
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e2ec      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a574:	2308      	movs	r3, #8
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e2e8      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a57c:	2310      	movs	r3, #16
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e2e4      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a584:	2320      	movs	r3, #32
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e2e0      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a58c:	2340      	movs	r3, #64	@ 0x40
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e2dc      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a594:	2380      	movs	r3, #128	@ 0x80
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e2d8      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a4f      	ldr	r2, [pc, #316]	@ (800a6e0 <UART_SetConfig+0x340>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d130      	bne.n	800a608 <UART_SetConfig+0x268>
 800a5a6:	4b4c      	ldr	r3, [pc, #304]	@ (800a6d8 <UART_SetConfig+0x338>)
 800a5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d826      	bhi.n	800a600 <UART_SetConfig+0x260>
 800a5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b8 <UART_SetConfig+0x218>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a5d1 	.word	0x0800a5d1
 800a5bc:	0800a5d9 	.word	0x0800a5d9
 800a5c0:	0800a5e1 	.word	0x0800a5e1
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5f1 	.word	0x0800a5f1
 800a5cc:	0800a5f9 	.word	0x0800a5f9
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e2ba      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a5d8:	2304      	movs	r3, #4
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e2b6      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a5e0:	2308      	movs	r3, #8
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e6:	e2b2      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a5e8:	2310      	movs	r3, #16
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e2ae      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e2aa      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a5f8:	2340      	movs	r3, #64	@ 0x40
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e2a6      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a600:	2380      	movs	r3, #128	@ 0x80
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e2a2      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a35      	ldr	r2, [pc, #212]	@ (800a6e4 <UART_SetConfig+0x344>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d130      	bne.n	800a674 <UART_SetConfig+0x2d4>
 800a612:	4b31      	ldr	r3, [pc, #196]	@ (800a6d8 <UART_SetConfig+0x338>)
 800a614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	2b05      	cmp	r3, #5
 800a61c:	d826      	bhi.n	800a66c <UART_SetConfig+0x2cc>
 800a61e:	a201      	add	r2, pc, #4	@ (adr r2, 800a624 <UART_SetConfig+0x284>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a63d 	.word	0x0800a63d
 800a628:	0800a645 	.word	0x0800a645
 800a62c:	0800a64d 	.word	0x0800a64d
 800a630:	0800a655 	.word	0x0800a655
 800a634:	0800a65d 	.word	0x0800a65d
 800a638:	0800a665 	.word	0x0800a665
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e284      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a644:	2304      	movs	r3, #4
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e280      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a64c:	2308      	movs	r3, #8
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e27c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a654:	2310      	movs	r3, #16
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e278      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a65c:	2320      	movs	r3, #32
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e274      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a664:	2340      	movs	r3, #64	@ 0x40
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e270      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a66c:	2380      	movs	r3, #128	@ 0x80
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e26c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e8 <UART_SetConfig+0x348>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d142      	bne.n	800a704 <UART_SetConfig+0x364>
 800a67e:	4b16      	ldr	r3, [pc, #88]	@ (800a6d8 <UART_SetConfig+0x338>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b05      	cmp	r3, #5
 800a688:	d838      	bhi.n	800a6fc <UART_SetConfig+0x35c>
 800a68a:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x2f0>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a6a9 	.word	0x0800a6a9
 800a694:	0800a6b1 	.word	0x0800a6b1
 800a698:	0800a6b9 	.word	0x0800a6b9
 800a69c:	0800a6c1 	.word	0x0800a6c1
 800a6a0:	0800a6ed 	.word	0x0800a6ed
 800a6a4:	0800a6f5 	.word	0x0800a6f5
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e24e      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e24a      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a6b8:	2308      	movs	r3, #8
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e246      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e242      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a6c8:	cfff69f3 	.word	0xcfff69f3
 800a6cc:	58000c00 	.word	0x58000c00
 800a6d0:	11fff4ff 	.word	0x11fff4ff
 800a6d4:	40011000 	.word	0x40011000
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	40004400 	.word	0x40004400
 800a6e0:	40004800 	.word	0x40004800
 800a6e4:	40004c00 	.word	0x40004c00
 800a6e8:	40005000 	.word	0x40005000
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f2:	e22c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a6f4:	2340      	movs	r3, #64	@ 0x40
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fa:	e228      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a6fc:	2380      	movs	r3, #128	@ 0x80
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a702:	e224      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4ab1      	ldr	r2, [pc, #708]	@ (800a9d0 <UART_SetConfig+0x630>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d176      	bne.n	800a7fc <UART_SetConfig+0x45c>
 800a70e:	4bb1      	ldr	r3, [pc, #708]	@ (800a9d4 <UART_SetConfig+0x634>)
 800a710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a716:	2b28      	cmp	r3, #40	@ 0x28
 800a718:	d86c      	bhi.n	800a7f4 <UART_SetConfig+0x454>
 800a71a:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <UART_SetConfig+0x380>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a7c5 	.word	0x0800a7c5
 800a724:	0800a7f5 	.word	0x0800a7f5
 800a728:	0800a7f5 	.word	0x0800a7f5
 800a72c:	0800a7f5 	.word	0x0800a7f5
 800a730:	0800a7f5 	.word	0x0800a7f5
 800a734:	0800a7f5 	.word	0x0800a7f5
 800a738:	0800a7f5 	.word	0x0800a7f5
 800a73c:	0800a7f5 	.word	0x0800a7f5
 800a740:	0800a7cd 	.word	0x0800a7cd
 800a744:	0800a7f5 	.word	0x0800a7f5
 800a748:	0800a7f5 	.word	0x0800a7f5
 800a74c:	0800a7f5 	.word	0x0800a7f5
 800a750:	0800a7f5 	.word	0x0800a7f5
 800a754:	0800a7f5 	.word	0x0800a7f5
 800a758:	0800a7f5 	.word	0x0800a7f5
 800a75c:	0800a7f5 	.word	0x0800a7f5
 800a760:	0800a7d5 	.word	0x0800a7d5
 800a764:	0800a7f5 	.word	0x0800a7f5
 800a768:	0800a7f5 	.word	0x0800a7f5
 800a76c:	0800a7f5 	.word	0x0800a7f5
 800a770:	0800a7f5 	.word	0x0800a7f5
 800a774:	0800a7f5 	.word	0x0800a7f5
 800a778:	0800a7f5 	.word	0x0800a7f5
 800a77c:	0800a7f5 	.word	0x0800a7f5
 800a780:	0800a7dd 	.word	0x0800a7dd
 800a784:	0800a7f5 	.word	0x0800a7f5
 800a788:	0800a7f5 	.word	0x0800a7f5
 800a78c:	0800a7f5 	.word	0x0800a7f5
 800a790:	0800a7f5 	.word	0x0800a7f5
 800a794:	0800a7f5 	.word	0x0800a7f5
 800a798:	0800a7f5 	.word	0x0800a7f5
 800a79c:	0800a7f5 	.word	0x0800a7f5
 800a7a0:	0800a7e5 	.word	0x0800a7e5
 800a7a4:	0800a7f5 	.word	0x0800a7f5
 800a7a8:	0800a7f5 	.word	0x0800a7f5
 800a7ac:	0800a7f5 	.word	0x0800a7f5
 800a7b0:	0800a7f5 	.word	0x0800a7f5
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7f5 	.word	0x0800a7f5
 800a7bc:	0800a7f5 	.word	0x0800a7f5
 800a7c0:	0800a7ed 	.word	0x0800a7ed
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e1c0      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e1bc      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e1b8      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7dc:	2310      	movs	r3, #16
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e1b4      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7e4:	2320      	movs	r3, #32
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e1b0      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7ec:	2340      	movs	r3, #64	@ 0x40
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e1ac      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7f4:	2380      	movs	r3, #128	@ 0x80
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e1a8      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a75      	ldr	r2, [pc, #468]	@ (800a9d8 <UART_SetConfig+0x638>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d130      	bne.n	800a868 <UART_SetConfig+0x4c8>
 800a806:	4b73      	ldr	r3, [pc, #460]	@ (800a9d4 <UART_SetConfig+0x634>)
 800a808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a80a:	f003 0307 	and.w	r3, r3, #7
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d826      	bhi.n	800a860 <UART_SetConfig+0x4c0>
 800a812:	a201      	add	r2, pc, #4	@ (adr r2, 800a818 <UART_SetConfig+0x478>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a831 	.word	0x0800a831
 800a81c:	0800a839 	.word	0x0800a839
 800a820:	0800a841 	.word	0x0800a841
 800a824:	0800a849 	.word	0x0800a849
 800a828:	0800a851 	.word	0x0800a851
 800a82c:	0800a859 	.word	0x0800a859
 800a830:	2300      	movs	r3, #0
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e18a      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a838:	2304      	movs	r3, #4
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e186      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a840:	2308      	movs	r3, #8
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e182      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a848:	2310      	movs	r3, #16
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e17e      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a850:	2320      	movs	r3, #32
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e17a      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a858:	2340      	movs	r3, #64	@ 0x40
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e176      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a860:	2380      	movs	r3, #128	@ 0x80
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e172      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a5b      	ldr	r2, [pc, #364]	@ (800a9dc <UART_SetConfig+0x63c>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d130      	bne.n	800a8d4 <UART_SetConfig+0x534>
 800a872:	4b58      	ldr	r3, [pc, #352]	@ (800a9d4 <UART_SetConfig+0x634>)
 800a874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	d826      	bhi.n	800a8cc <UART_SetConfig+0x52c>
 800a87e:	a201      	add	r2, pc, #4	@ (adr r2, 800a884 <UART_SetConfig+0x4e4>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a89d 	.word	0x0800a89d
 800a888:	0800a8a5 	.word	0x0800a8a5
 800a88c:	0800a8ad 	.word	0x0800a8ad
 800a890:	0800a8b5 	.word	0x0800a8b5
 800a894:	0800a8bd 	.word	0x0800a8bd
 800a898:	0800a8c5 	.word	0x0800a8c5
 800a89c:	2300      	movs	r3, #0
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e154      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e150      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b2:	e14c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e148      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8bc:	2320      	movs	r3, #32
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e144      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8c4:	2340      	movs	r3, #64	@ 0x40
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e140      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8cc:	2380      	movs	r3, #128	@ 0x80
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e13c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a41      	ldr	r2, [pc, #260]	@ (800a9e0 <UART_SetConfig+0x640>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	f040 8082 	bne.w	800a9e4 <UART_SetConfig+0x644>
 800a8e0:	4b3c      	ldr	r3, [pc, #240]	@ (800a9d4 <UART_SetConfig+0x634>)
 800a8e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8e8:	2b28      	cmp	r3, #40	@ 0x28
 800a8ea:	d86d      	bhi.n	800a9c8 <UART_SetConfig+0x628>
 800a8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <UART_SetConfig+0x554>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a999 	.word	0x0800a999
 800a8f8:	0800a9c9 	.word	0x0800a9c9
 800a8fc:	0800a9c9 	.word	0x0800a9c9
 800a900:	0800a9c9 	.word	0x0800a9c9
 800a904:	0800a9c9 	.word	0x0800a9c9
 800a908:	0800a9c9 	.word	0x0800a9c9
 800a90c:	0800a9c9 	.word	0x0800a9c9
 800a910:	0800a9c9 	.word	0x0800a9c9
 800a914:	0800a9a1 	.word	0x0800a9a1
 800a918:	0800a9c9 	.word	0x0800a9c9
 800a91c:	0800a9c9 	.word	0x0800a9c9
 800a920:	0800a9c9 	.word	0x0800a9c9
 800a924:	0800a9c9 	.word	0x0800a9c9
 800a928:	0800a9c9 	.word	0x0800a9c9
 800a92c:	0800a9c9 	.word	0x0800a9c9
 800a930:	0800a9c9 	.word	0x0800a9c9
 800a934:	0800a9a9 	.word	0x0800a9a9
 800a938:	0800a9c9 	.word	0x0800a9c9
 800a93c:	0800a9c9 	.word	0x0800a9c9
 800a940:	0800a9c9 	.word	0x0800a9c9
 800a944:	0800a9c9 	.word	0x0800a9c9
 800a948:	0800a9c9 	.word	0x0800a9c9
 800a94c:	0800a9c9 	.word	0x0800a9c9
 800a950:	0800a9c9 	.word	0x0800a9c9
 800a954:	0800a9b1 	.word	0x0800a9b1
 800a958:	0800a9c9 	.word	0x0800a9c9
 800a95c:	0800a9c9 	.word	0x0800a9c9
 800a960:	0800a9c9 	.word	0x0800a9c9
 800a964:	0800a9c9 	.word	0x0800a9c9
 800a968:	0800a9c9 	.word	0x0800a9c9
 800a96c:	0800a9c9 	.word	0x0800a9c9
 800a970:	0800a9c9 	.word	0x0800a9c9
 800a974:	0800a9b9 	.word	0x0800a9b9
 800a978:	0800a9c9 	.word	0x0800a9c9
 800a97c:	0800a9c9 	.word	0x0800a9c9
 800a980:	0800a9c9 	.word	0x0800a9c9
 800a984:	0800a9c9 	.word	0x0800a9c9
 800a988:	0800a9c9 	.word	0x0800a9c9
 800a98c:	0800a9c9 	.word	0x0800a9c9
 800a990:	0800a9c9 	.word	0x0800a9c9
 800a994:	0800a9c1 	.word	0x0800a9c1
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99e:	e0d6      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	e0d2      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e0ce      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b6:	e0ca      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9b8:	2320      	movs	r3, #32
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9be:	e0c6      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9c0:	2340      	movs	r3, #64	@ 0x40
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c6:	e0c2      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9c8:	2380      	movs	r3, #128	@ 0x80
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ce:	e0be      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800a9d0:	40011400 	.word	0x40011400
 800a9d4:	58024400 	.word	0x58024400
 800a9d8:	40007800 	.word	0x40007800
 800a9dc:	40007c00 	.word	0x40007c00
 800a9e0:	40011800 	.word	0x40011800
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4aad      	ldr	r2, [pc, #692]	@ (800aca0 <UART_SetConfig+0x900>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d176      	bne.n	800aadc <UART_SetConfig+0x73c>
 800a9ee:	4bad      	ldr	r3, [pc, #692]	@ (800aca4 <UART_SetConfig+0x904>)
 800a9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9f6:	2b28      	cmp	r3, #40	@ 0x28
 800a9f8:	d86c      	bhi.n	800aad4 <UART_SetConfig+0x734>
 800a9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800aa00 <UART_SetConfig+0x660>)
 800a9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa00:	0800aaa5 	.word	0x0800aaa5
 800aa04:	0800aad5 	.word	0x0800aad5
 800aa08:	0800aad5 	.word	0x0800aad5
 800aa0c:	0800aad5 	.word	0x0800aad5
 800aa10:	0800aad5 	.word	0x0800aad5
 800aa14:	0800aad5 	.word	0x0800aad5
 800aa18:	0800aad5 	.word	0x0800aad5
 800aa1c:	0800aad5 	.word	0x0800aad5
 800aa20:	0800aaad 	.word	0x0800aaad
 800aa24:	0800aad5 	.word	0x0800aad5
 800aa28:	0800aad5 	.word	0x0800aad5
 800aa2c:	0800aad5 	.word	0x0800aad5
 800aa30:	0800aad5 	.word	0x0800aad5
 800aa34:	0800aad5 	.word	0x0800aad5
 800aa38:	0800aad5 	.word	0x0800aad5
 800aa3c:	0800aad5 	.word	0x0800aad5
 800aa40:	0800aab5 	.word	0x0800aab5
 800aa44:	0800aad5 	.word	0x0800aad5
 800aa48:	0800aad5 	.word	0x0800aad5
 800aa4c:	0800aad5 	.word	0x0800aad5
 800aa50:	0800aad5 	.word	0x0800aad5
 800aa54:	0800aad5 	.word	0x0800aad5
 800aa58:	0800aad5 	.word	0x0800aad5
 800aa5c:	0800aad5 	.word	0x0800aad5
 800aa60:	0800aabd 	.word	0x0800aabd
 800aa64:	0800aad5 	.word	0x0800aad5
 800aa68:	0800aad5 	.word	0x0800aad5
 800aa6c:	0800aad5 	.word	0x0800aad5
 800aa70:	0800aad5 	.word	0x0800aad5
 800aa74:	0800aad5 	.word	0x0800aad5
 800aa78:	0800aad5 	.word	0x0800aad5
 800aa7c:	0800aad5 	.word	0x0800aad5
 800aa80:	0800aac5 	.word	0x0800aac5
 800aa84:	0800aad5 	.word	0x0800aad5
 800aa88:	0800aad5 	.word	0x0800aad5
 800aa8c:	0800aad5 	.word	0x0800aad5
 800aa90:	0800aad5 	.word	0x0800aad5
 800aa94:	0800aad5 	.word	0x0800aad5
 800aa98:	0800aad5 	.word	0x0800aad5
 800aa9c:	0800aad5 	.word	0x0800aad5
 800aaa0:	0800aacd 	.word	0x0800aacd
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaaa:	e050      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aaac:	2304      	movs	r3, #4
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab2:	e04c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aab4:	2308      	movs	r3, #8
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e048      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aabc:	2310      	movs	r3, #16
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e044      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aac4:	2320      	movs	r3, #32
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e040      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aacc:	2340      	movs	r3, #64	@ 0x40
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e03c      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aad4:	2380      	movs	r3, #128	@ 0x80
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e038      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a71      	ldr	r2, [pc, #452]	@ (800aca8 <UART_SetConfig+0x908>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d130      	bne.n	800ab48 <UART_SetConfig+0x7a8>
 800aae6:	4b6f      	ldr	r3, [pc, #444]	@ (800aca4 <UART_SetConfig+0x904>)
 800aae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaea:	f003 0307 	and.w	r3, r3, #7
 800aaee:	2b05      	cmp	r3, #5
 800aaf0:	d826      	bhi.n	800ab40 <UART_SetConfig+0x7a0>
 800aaf2:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <UART_SetConfig+0x758>)
 800aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf8:	0800ab11 	.word	0x0800ab11
 800aafc:	0800ab19 	.word	0x0800ab19
 800ab00:	0800ab21 	.word	0x0800ab21
 800ab04:	0800ab29 	.word	0x0800ab29
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab39 	.word	0x0800ab39
 800ab10:	2302      	movs	r3, #2
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab16:	e01a      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab18:	2304      	movs	r3, #4
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1e:	e016      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab20:	2308      	movs	r3, #8
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab26:	e012      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2e:	e00e      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab30:	2320      	movs	r3, #32
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e00a      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab38:	2340      	movs	r3, #64	@ 0x40
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e006      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab40:	2380      	movs	r3, #128	@ 0x80
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e002      	b.n	800ab4e <UART_SetConfig+0x7ae>
 800ab48:	2380      	movs	r3, #128	@ 0x80
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a55      	ldr	r2, [pc, #340]	@ (800aca8 <UART_SetConfig+0x908>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	f040 80f8 	bne.w	800ad4a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	2b20      	cmp	r3, #32
 800ab60:	dc46      	bgt.n	800abf0 <UART_SetConfig+0x850>
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	db75      	blt.n	800ac52 <UART_SetConfig+0x8b2>
 800ab66:	3b02      	subs	r3, #2
 800ab68:	2b1e      	cmp	r3, #30
 800ab6a:	d872      	bhi.n	800ac52 <UART_SetConfig+0x8b2>
 800ab6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab74 <UART_SetConfig+0x7d4>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800abf7 	.word	0x0800abf7
 800ab78:	0800ac53 	.word	0x0800ac53
 800ab7c:	0800abff 	.word	0x0800abff
 800ab80:	0800ac53 	.word	0x0800ac53
 800ab84:	0800ac53 	.word	0x0800ac53
 800ab88:	0800ac53 	.word	0x0800ac53
 800ab8c:	0800ac0f 	.word	0x0800ac0f
 800ab90:	0800ac53 	.word	0x0800ac53
 800ab94:	0800ac53 	.word	0x0800ac53
 800ab98:	0800ac53 	.word	0x0800ac53
 800ab9c:	0800ac53 	.word	0x0800ac53
 800aba0:	0800ac53 	.word	0x0800ac53
 800aba4:	0800ac53 	.word	0x0800ac53
 800aba8:	0800ac53 	.word	0x0800ac53
 800abac:	0800ac1f 	.word	0x0800ac1f
 800abb0:	0800ac53 	.word	0x0800ac53
 800abb4:	0800ac53 	.word	0x0800ac53
 800abb8:	0800ac53 	.word	0x0800ac53
 800abbc:	0800ac53 	.word	0x0800ac53
 800abc0:	0800ac53 	.word	0x0800ac53
 800abc4:	0800ac53 	.word	0x0800ac53
 800abc8:	0800ac53 	.word	0x0800ac53
 800abcc:	0800ac53 	.word	0x0800ac53
 800abd0:	0800ac53 	.word	0x0800ac53
 800abd4:	0800ac53 	.word	0x0800ac53
 800abd8:	0800ac53 	.word	0x0800ac53
 800abdc:	0800ac53 	.word	0x0800ac53
 800abe0:	0800ac53 	.word	0x0800ac53
 800abe4:	0800ac53 	.word	0x0800ac53
 800abe8:	0800ac53 	.word	0x0800ac53
 800abec:	0800ac45 	.word	0x0800ac45
 800abf0:	2b40      	cmp	r3, #64	@ 0x40
 800abf2:	d02a      	beq.n	800ac4a <UART_SetConfig+0x8aa>
 800abf4:	e02d      	b.n	800ac52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abf6:	f7fe f82b 	bl	8008c50 <HAL_RCCEx_GetD3PCLK1Freq>
 800abfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abfc:	e02f      	b.n	800ac5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe f83a 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac0c:	e027      	b.n	800ac5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac0e:	f107 0318 	add.w	r3, r7, #24
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe f986 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1c:	e01f      	b.n	800ac5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac1e:	4b21      	ldr	r3, [pc, #132]	@ (800aca4 <UART_SetConfig+0x904>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0320 	and.w	r3, r3, #32
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d009      	beq.n	800ac3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	@ (800aca4 <UART_SetConfig+0x904>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	08db      	lsrs	r3, r3, #3
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	4a1d      	ldr	r2, [pc, #116]	@ (800acac <UART_SetConfig+0x90c>)
 800ac36:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac3c:	e00f      	b.n	800ac5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac3e:	4b1b      	ldr	r3, [pc, #108]	@ (800acac <UART_SetConfig+0x90c>)
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac42:	e00c      	b.n	800ac5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac44:	4b1a      	ldr	r3, [pc, #104]	@ (800acb0 <UART_SetConfig+0x910>)
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac48:	e009      	b.n	800ac5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac50:	e005      	b.n	800ac5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 81ee 	beq.w	800b042 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	4a12      	ldr	r2, [pc, #72]	@ (800acb4 <UART_SetConfig+0x914>)
 800ac6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac70:	461a      	mov	r2, r3
 800ac72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	4413      	add	r3, r2
 800ac84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d305      	bcc.n	800ac96 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d910      	bls.n	800acb8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac9c:	e1d1      	b.n	800b042 <UART_SetConfig+0xca2>
 800ac9e:	bf00      	nop
 800aca0:	40011c00 	.word	0x40011c00
 800aca4:	58024400 	.word	0x58024400
 800aca8:	58000c00 	.word	0x58000c00
 800acac:	03d09000 	.word	0x03d09000
 800acb0:	003d0900 	.word	0x003d0900
 800acb4:	0800ede0 	.word	0x0800ede0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acba:	2200      	movs	r2, #0
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	60fa      	str	r2, [r7, #12]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	4ac0      	ldr	r2, [pc, #768]	@ (800afc8 <UART_SetConfig+0xc28>)
 800acc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acca:	b29b      	uxth	r3, r3
 800accc:	2200      	movs	r2, #0
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acda:	f7f5 fb09 	bl	80002f0 <__aeabi_uldivmod>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4610      	mov	r0, r2
 800ace4:	4619      	mov	r1, r3
 800ace6:	f04f 0200 	mov.w	r2, #0
 800acea:	f04f 0300 	mov.w	r3, #0
 800acee:	020b      	lsls	r3, r1, #8
 800acf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acf4:	0202      	lsls	r2, r0, #8
 800acf6:	6979      	ldr	r1, [r7, #20]
 800acf8:	6849      	ldr	r1, [r1, #4]
 800acfa:	0849      	lsrs	r1, r1, #1
 800acfc:	2000      	movs	r0, #0
 800acfe:	460c      	mov	r4, r1
 800ad00:	4605      	mov	r5, r0
 800ad02:	eb12 0804 	adds.w	r8, r2, r4
 800ad06:	eb43 0905 	adc.w	r9, r3, r5
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	469a      	mov	sl, r3
 800ad12:	4693      	mov	fp, r2
 800ad14:	4652      	mov	r2, sl
 800ad16:	465b      	mov	r3, fp
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	f7f5 fae8 	bl	80002f0 <__aeabi_uldivmod>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4613      	mov	r3, r2
 800ad26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad2e:	d308      	bcc.n	800ad42 <UART_SetConfig+0x9a2>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad36:	d204      	bcs.n	800ad42 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad3e:	60da      	str	r2, [r3, #12]
 800ad40:	e17f      	b.n	800b042 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad48:	e17b      	b.n	800b042 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad52:	f040 80bd 	bne.w	800aed0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ad56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	dc48      	bgt.n	800adf0 <UART_SetConfig+0xa50>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	db7b      	blt.n	800ae5a <UART_SetConfig+0xaba>
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d879      	bhi.n	800ae5a <UART_SetConfig+0xaba>
 800ad66:	a201      	add	r2, pc, #4	@ (adr r2, 800ad6c <UART_SetConfig+0x9cc>)
 800ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6c:	0800adf7 	.word	0x0800adf7
 800ad70:	0800adff 	.word	0x0800adff
 800ad74:	0800ae5b 	.word	0x0800ae5b
 800ad78:	0800ae5b 	.word	0x0800ae5b
 800ad7c:	0800ae07 	.word	0x0800ae07
 800ad80:	0800ae5b 	.word	0x0800ae5b
 800ad84:	0800ae5b 	.word	0x0800ae5b
 800ad88:	0800ae5b 	.word	0x0800ae5b
 800ad8c:	0800ae17 	.word	0x0800ae17
 800ad90:	0800ae5b 	.word	0x0800ae5b
 800ad94:	0800ae5b 	.word	0x0800ae5b
 800ad98:	0800ae5b 	.word	0x0800ae5b
 800ad9c:	0800ae5b 	.word	0x0800ae5b
 800ada0:	0800ae5b 	.word	0x0800ae5b
 800ada4:	0800ae5b 	.word	0x0800ae5b
 800ada8:	0800ae5b 	.word	0x0800ae5b
 800adac:	0800ae27 	.word	0x0800ae27
 800adb0:	0800ae5b 	.word	0x0800ae5b
 800adb4:	0800ae5b 	.word	0x0800ae5b
 800adb8:	0800ae5b 	.word	0x0800ae5b
 800adbc:	0800ae5b 	.word	0x0800ae5b
 800adc0:	0800ae5b 	.word	0x0800ae5b
 800adc4:	0800ae5b 	.word	0x0800ae5b
 800adc8:	0800ae5b 	.word	0x0800ae5b
 800adcc:	0800ae5b 	.word	0x0800ae5b
 800add0:	0800ae5b 	.word	0x0800ae5b
 800add4:	0800ae5b 	.word	0x0800ae5b
 800add8:	0800ae5b 	.word	0x0800ae5b
 800addc:	0800ae5b 	.word	0x0800ae5b
 800ade0:	0800ae5b 	.word	0x0800ae5b
 800ade4:	0800ae5b 	.word	0x0800ae5b
 800ade8:	0800ae5b 	.word	0x0800ae5b
 800adec:	0800ae4d 	.word	0x0800ae4d
 800adf0:	2b40      	cmp	r3, #64	@ 0x40
 800adf2:	d02e      	beq.n	800ae52 <UART_SetConfig+0xab2>
 800adf4:	e031      	b.n	800ae5a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf6:	f7fc fcff 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 800adfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adfc:	e033      	b.n	800ae66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adfe:	f7fc fd11 	bl	8007824 <HAL_RCC_GetPCLK2Freq>
 800ae02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae04:	e02f      	b.n	800ae66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fd ff36 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae14:	e027      	b.n	800ae66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae16:	f107 0318 	add.w	r3, r7, #24
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe f882 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae24:	e01f      	b.n	800ae66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae26:	4b69      	ldr	r3, [pc, #420]	@ (800afcc <UART_SetConfig+0xc2c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d009      	beq.n	800ae46 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae32:	4b66      	ldr	r3, [pc, #408]	@ (800afcc <UART_SetConfig+0xc2c>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	08db      	lsrs	r3, r3, #3
 800ae38:	f003 0303 	and.w	r3, r3, #3
 800ae3c:	4a64      	ldr	r2, [pc, #400]	@ (800afd0 <UART_SetConfig+0xc30>)
 800ae3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae44:	e00f      	b.n	800ae66 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ae46:	4b62      	ldr	r3, [pc, #392]	@ (800afd0 <UART_SetConfig+0xc30>)
 800ae48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae4a:	e00c      	b.n	800ae66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae4c:	4b61      	ldr	r3, [pc, #388]	@ (800afd4 <UART_SetConfig+0xc34>)
 800ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae50:	e009      	b.n	800ae66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae58:	e005      	b.n	800ae66 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 80ea 	beq.w	800b042 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae72:	4a55      	ldr	r2, [pc, #340]	@ (800afc8 <UART_SetConfig+0xc28>)
 800ae74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae80:	005a      	lsls	r2, r3, #1
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	085b      	lsrs	r3, r3, #1
 800ae88:	441a      	add	r2, r3
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae96:	2b0f      	cmp	r3, #15
 800ae98:	d916      	bls.n	800aec8 <UART_SetConfig+0xb28>
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aea0:	d212      	bcs.n	800aec8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f023 030f 	bic.w	r3, r3, #15
 800aeaa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeae:	085b      	lsrs	r3, r3, #1
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeba:	4313      	orrs	r3, r2
 800aebc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aec4:	60da      	str	r2, [r3, #12]
 800aec6:	e0bc      	b.n	800b042 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aece:	e0b8      	b.n	800b042 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aed0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	dc4b      	bgt.n	800af70 <UART_SetConfig+0xbd0>
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f2c0 8087 	blt.w	800afec <UART_SetConfig+0xc4c>
 800aede:	2b20      	cmp	r3, #32
 800aee0:	f200 8084 	bhi.w	800afec <UART_SetConfig+0xc4c>
 800aee4:	a201      	add	r2, pc, #4	@ (adr r2, 800aeec <UART_SetConfig+0xb4c>)
 800aee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeea:	bf00      	nop
 800aeec:	0800af77 	.word	0x0800af77
 800aef0:	0800af7f 	.word	0x0800af7f
 800aef4:	0800afed 	.word	0x0800afed
 800aef8:	0800afed 	.word	0x0800afed
 800aefc:	0800af87 	.word	0x0800af87
 800af00:	0800afed 	.word	0x0800afed
 800af04:	0800afed 	.word	0x0800afed
 800af08:	0800afed 	.word	0x0800afed
 800af0c:	0800af97 	.word	0x0800af97
 800af10:	0800afed 	.word	0x0800afed
 800af14:	0800afed 	.word	0x0800afed
 800af18:	0800afed 	.word	0x0800afed
 800af1c:	0800afed 	.word	0x0800afed
 800af20:	0800afed 	.word	0x0800afed
 800af24:	0800afed 	.word	0x0800afed
 800af28:	0800afed 	.word	0x0800afed
 800af2c:	0800afa7 	.word	0x0800afa7
 800af30:	0800afed 	.word	0x0800afed
 800af34:	0800afed 	.word	0x0800afed
 800af38:	0800afed 	.word	0x0800afed
 800af3c:	0800afed 	.word	0x0800afed
 800af40:	0800afed 	.word	0x0800afed
 800af44:	0800afed 	.word	0x0800afed
 800af48:	0800afed 	.word	0x0800afed
 800af4c:	0800afed 	.word	0x0800afed
 800af50:	0800afed 	.word	0x0800afed
 800af54:	0800afed 	.word	0x0800afed
 800af58:	0800afed 	.word	0x0800afed
 800af5c:	0800afed 	.word	0x0800afed
 800af60:	0800afed 	.word	0x0800afed
 800af64:	0800afed 	.word	0x0800afed
 800af68:	0800afed 	.word	0x0800afed
 800af6c:	0800afdf 	.word	0x0800afdf
 800af70:	2b40      	cmp	r3, #64	@ 0x40
 800af72:	d037      	beq.n	800afe4 <UART_SetConfig+0xc44>
 800af74:	e03a      	b.n	800afec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af76:	f7fc fc3f 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 800af7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af7c:	e03c      	b.n	800aff8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af7e:	f7fc fc51 	bl	8007824 <HAL_RCC_GetPCLK2Freq>
 800af82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af84:	e038      	b.n	800aff8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fd fe76 	bl	8008c7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af94:	e030      	b.n	800aff8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af96:	f107 0318 	add.w	r3, r7, #24
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fd ffc2 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa4:	e028      	b.n	800aff8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afa6:	4b09      	ldr	r3, [pc, #36]	@ (800afcc <UART_SetConfig+0xc2c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afb2:	4b06      	ldr	r3, [pc, #24]	@ (800afcc <UART_SetConfig+0xc2c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	08db      	lsrs	r3, r3, #3
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	4a04      	ldr	r2, [pc, #16]	@ (800afd0 <UART_SetConfig+0xc30>)
 800afbe:	fa22 f303 	lsr.w	r3, r2, r3
 800afc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afc4:	e018      	b.n	800aff8 <UART_SetConfig+0xc58>
 800afc6:	bf00      	nop
 800afc8:	0800ede0 	.word	0x0800ede0
 800afcc:	58024400 	.word	0x58024400
 800afd0:	03d09000 	.word	0x03d09000
 800afd4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800afd8:	4b24      	ldr	r3, [pc, #144]	@ (800b06c <UART_SetConfig+0xccc>)
 800afda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afdc:	e00c      	b.n	800aff8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afde:	4b24      	ldr	r3, [pc, #144]	@ (800b070 <UART_SetConfig+0xcd0>)
 800afe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afe2:	e009      	b.n	800aff8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afea:	e005      	b.n	800aff8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aff6:	bf00      	nop
    }

    if (pclk != 0U)
 800aff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800affa:	2b00      	cmp	r3, #0
 800affc:	d021      	beq.n	800b042 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b002:	4a1c      	ldr	r2, [pc, #112]	@ (800b074 <UART_SetConfig+0xcd4>)
 800b004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b008:	461a      	mov	r2, r3
 800b00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b00c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	085b      	lsrs	r3, r3, #1
 800b016:	441a      	add	r2, r3
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b020:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b024:	2b0f      	cmp	r3, #15
 800b026:	d909      	bls.n	800b03c <UART_SetConfig+0xc9c>
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b02e:	d205      	bcs.n	800b03c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b032:	b29a      	uxth	r2, r3
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	60da      	str	r2, [r3, #12]
 800b03a:	e002      	b.n	800b042 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2201      	movs	r2, #1
 800b046:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2200      	movs	r2, #0
 800b056:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2200      	movs	r2, #0
 800b05c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b05e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b062:	4618      	mov	r0, r3
 800b064:	3748      	adds	r7, #72	@ 0x48
 800b066:	46bd      	mov	sp, r7
 800b068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b06c:	03d09000 	.word	0x03d09000
 800b070:	003d0900 	.word	0x003d0900
 800b074:	0800ede0 	.word	0x0800ede0

0800b078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	f003 0308 	and.w	r3, r3, #8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00a      	beq.n	800b0a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00a      	beq.n	800b0c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00a      	beq.n	800b0e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ea:	f003 0304 	and.w	r3, r3, #4
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10c:	f003 0310 	and.w	r3, r3, #16
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01a      	beq.n	800b18e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b176:	d10a      	bne.n	800b18e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	605a      	str	r2, [r3, #4]
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b098      	sub	sp, #96	@ 0x60
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1cc:	f7f5 ffdc 	bl	8001188 <HAL_GetTick>
 800b1d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d12f      	bne.n	800b240 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f88e 	bl	800b310 <UART_WaitOnFlagUntilTimeout>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d022      	beq.n	800b240 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b202:	e853 3f00 	ldrex	r3, [r3]
 800b206:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b20e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b218:	647b      	str	r3, [r7, #68]	@ 0x44
 800b21a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b21e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b220:	e841 2300 	strex	r3, r2, [r1]
 800b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1e6      	bne.n	800b1fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2220      	movs	r2, #32
 800b230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e063      	b.n	800b308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0304 	and.w	r3, r3, #4
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d149      	bne.n	800b2e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b24e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b256:	2200      	movs	r2, #0
 800b258:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f857 	bl	800b310 <UART_WaitOnFlagUntilTimeout>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d03c      	beq.n	800b2e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	623b      	str	r3, [r7, #32]
   return(result);
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b27c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b286:	633b      	str	r3, [r7, #48]	@ 0x30
 800b288:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e6      	bne.n	800b268 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f023 0301 	bic.w	r3, r3, #1
 800b2b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3308      	adds	r3, #8
 800b2b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2ba:	61fa      	str	r2, [r7, #28]
 800b2bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	69b9      	ldr	r1, [r7, #24]
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e5      	bne.n	800b29a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e012      	b.n	800b308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3758      	adds	r7, #88	@ 0x58
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	4613      	mov	r3, r2
 800b31e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b320:	e04f      	b.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b328:	d04b      	beq.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b32a:	f7f5 ff2d 	bl	8001188 <HAL_GetTick>
 800b32e:	4602      	mov	r2, r0
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	429a      	cmp	r2, r3
 800b338:	d302      	bcc.n	800b340 <UART_WaitOnFlagUntilTimeout+0x30>
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e04e      	b.n	800b3e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d037      	beq.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b80      	cmp	r3, #128	@ 0x80
 800b356:	d034      	beq.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b40      	cmp	r3, #64	@ 0x40
 800b35c:	d031      	beq.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	f003 0308 	and.w	r3, r3, #8
 800b368:	2b08      	cmp	r3, #8
 800b36a:	d110      	bne.n	800b38e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2208      	movs	r2, #8
 800b372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f839 	bl	800b3ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2208      	movs	r2, #8
 800b37e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e029      	b.n	800b3e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69db      	ldr	r3, [r3, #28]
 800b394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b39c:	d111      	bne.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 f81f 	bl	800b3ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e00f      	b.n	800b3e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69da      	ldr	r2, [r3, #28]
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	bf0c      	ite	eq
 800b3d2:	2301      	moveq	r3, #1
 800b3d4:	2300      	movne	r3, #0
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	461a      	mov	r2, r3
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d0a0      	beq.n	800b322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b095      	sub	sp, #84	@ 0x54
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b412:	643b      	str	r3, [r7, #64]	@ 0x40
 800b414:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b41a:	e841 2300 	strex	r3, r2, [r1]
 800b41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1e6      	bne.n	800b3f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3308      	adds	r3, #8
 800b42c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	e853 3f00 	ldrex	r3, [r3]
 800b434:	61fb      	str	r3, [r7, #28]
   return(result);
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b4 <UART_EndRxTransfer+0xc8>)
 800b43a:	4013      	ands	r3, r2
 800b43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3308      	adds	r3, #8
 800b444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b448:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44e:	e841 2300 	strex	r3, r2, [r1]
 800b452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1e5      	bne.n	800b426 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d118      	bne.n	800b494 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f023 0310 	bic.w	r3, r3, #16
 800b476:	647b      	str	r3, [r7, #68]	@ 0x44
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	6979      	ldr	r1, [r7, #20]
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	e841 2300 	strex	r3, r2, [r1]
 800b48c:	613b      	str	r3, [r7, #16]
   return(result);
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e6      	bne.n	800b462 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b4a8:	bf00      	nop
 800b4aa:	3754      	adds	r7, #84	@ 0x54
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	effffffe 	.word	0xeffffffe

0800b4b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7fe ff4c 	bl	800a374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4dc:	bf00      	nop
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b500:	61fb      	str	r3, [r7, #28]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	61bb      	str	r3, [r7, #24]
 800b50c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	6979      	ldr	r1, [r7, #20]
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	e841 2300 	strex	r3, r2, [r1]
 800b516:	613b      	str	r3, [r7, #16]
   return(result);
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e6      	bne.n	800b4ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7fe ff17 	bl	800a360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b532:	bf00      	nop
 800b534:	3720      	adds	r7, #32
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b556:	bf00      	nop
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b56a:	bf00      	nop
 800b56c:	370c      	adds	r7, #12
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_UARTEx_DisableFifoMode+0x16>
 800b588:	2302      	movs	r3, #2
 800b58a:	e027      	b.n	800b5dc <HAL_UARTEx_DisableFifoMode+0x66>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2224      	movs	r2, #36	@ 0x24
 800b598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0201 	bic.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b5ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d101      	bne.n	800b600 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	e02d      	b.n	800b65c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2224      	movs	r2, #36	@ 0x24
 800b60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f022 0201 	bic.w	r2, r2, #1
 800b626:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f84f 	bl	800b6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b674:	2b01      	cmp	r3, #1
 800b676:	d101      	bne.n	800b67c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b678:	2302      	movs	r3, #2
 800b67a:	e02d      	b.n	800b6d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2224      	movs	r2, #36	@ 0x24
 800b688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f022 0201 	bic.w	r2, r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f811 	bl	800b6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d108      	bne.n	800b702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b700:	e031      	b.n	800b766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b702:	2310      	movs	r3, #16
 800b704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b706:	2310      	movs	r3, #16
 800b708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	0e5b      	lsrs	r3, r3, #25
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f003 0307 	and.w	r3, r3, #7
 800b718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	0f5b      	lsrs	r3, r3, #29
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0307 	and.w	r3, r3, #7
 800b728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	7b3a      	ldrb	r2, [r7, #12]
 800b72e:	4911      	ldr	r1, [pc, #68]	@ (800b774 <UARTEx_SetNbDataToProcess+0x94>)
 800b730:	5c8a      	ldrb	r2, [r1, r2]
 800b732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b736:	7b3a      	ldrb	r2, [r7, #12]
 800b738:	490f      	ldr	r1, [pc, #60]	@ (800b778 <UARTEx_SetNbDataToProcess+0x98>)
 800b73a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b73c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b740:	b29a      	uxth	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	7b7a      	ldrb	r2, [r7, #13]
 800b74c:	4909      	ldr	r1, [pc, #36]	@ (800b774 <UARTEx_SetNbDataToProcess+0x94>)
 800b74e:	5c8a      	ldrb	r2, [r1, r2]
 800b750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b754:	7b7a      	ldrb	r2, [r7, #13]
 800b756:	4908      	ldr	r1, [pc, #32]	@ (800b778 <UARTEx_SetNbDataToProcess+0x98>)
 800b758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b75a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b75e:	b29a      	uxth	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b766:	bf00      	nop
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	0800edf8 	.word	0x0800edf8
 800b778:	0800ee00 	.word	0x0800ee00

0800b77c <__NVIC_SetPriority>:
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	6039      	str	r1, [r7, #0]
 800b786:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	db0a      	blt.n	800b7a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	b2da      	uxtb	r2, r3
 800b794:	490c      	ldr	r1, [pc, #48]	@ (800b7c8 <__NVIC_SetPriority+0x4c>)
 800b796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b79a:	0112      	lsls	r2, r2, #4
 800b79c:	b2d2      	uxtb	r2, r2
 800b79e:	440b      	add	r3, r1
 800b7a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b7a4:	e00a      	b.n	800b7bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4908      	ldr	r1, [pc, #32]	@ (800b7cc <__NVIC_SetPriority+0x50>)
 800b7ac:	88fb      	ldrh	r3, [r7, #6]
 800b7ae:	f003 030f 	and.w	r3, r3, #15
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	0112      	lsls	r2, r2, #4
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	761a      	strb	r2, [r3, #24]
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000e100 	.word	0xe000e100
 800b7cc:	e000ed00 	.word	0xe000ed00

0800b7d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b7d4:	4b05      	ldr	r3, [pc, #20]	@ (800b7ec <SysTick_Handler+0x1c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b7d8:	f001 ff62 	bl	800d6a0 <xTaskGetSchedulerState>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d001      	beq.n	800b7e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b7e2:	f002 fe59 	bl	800e498 <xPortSysTickHandler>
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	e000e010 	.word	0xe000e010

0800b7f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	f06f 0004 	mvn.w	r0, #4
 800b7fa:	f7ff ffbf 	bl	800b77c <__NVIC_SetPriority>
#endif
}
 800b7fe:	bf00      	nop
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b80a:	f3ef 8305 	mrs	r3, IPSR
 800b80e:	603b      	str	r3, [r7, #0]
  return(result);
 800b810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b816:	f06f 0305 	mvn.w	r3, #5
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	e00c      	b.n	800b838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b81e:	4b0a      	ldr	r3, [pc, #40]	@ (800b848 <osKernelInitialize+0x44>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d105      	bne.n	800b832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b826:	4b08      	ldr	r3, [pc, #32]	@ (800b848 <osKernelInitialize+0x44>)
 800b828:	2201      	movs	r2, #1
 800b82a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	607b      	str	r3, [r7, #4]
 800b830:	e002      	b.n	800b838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b832:	f04f 33ff 	mov.w	r3, #4294967295
 800b836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b838:	687b      	ldr	r3, [r7, #4]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	240002bc 	.word	0x240002bc

0800b84c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b852:	f3ef 8305 	mrs	r3, IPSR
 800b856:	603b      	str	r3, [r7, #0]
  return(result);
 800b858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b85e:	f06f 0305 	mvn.w	r3, #5
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	e010      	b.n	800b888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b866:	4b0b      	ldr	r3, [pc, #44]	@ (800b894 <osKernelStart+0x48>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d109      	bne.n	800b882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b86e:	f7ff ffbf 	bl	800b7f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b872:	4b08      	ldr	r3, [pc, #32]	@ (800b894 <osKernelStart+0x48>)
 800b874:	2202      	movs	r2, #2
 800b876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b878:	f001 f9f6 	bl	800cc68 <vTaskStartScheduler>
      stat = osOK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	607b      	str	r3, [r7, #4]
 800b880:	e002      	b.n	800b888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b882:	f04f 33ff 	mov.w	r3, #4294967295
 800b886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b888:	687b      	ldr	r3, [r7, #4]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	240002bc 	.word	0x240002bc

0800b898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08e      	sub	sp, #56	@ 0x38
 800b89c:	af04      	add	r7, sp, #16
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a8:	f3ef 8305 	mrs	r3, IPSR
 800b8ac:	617b      	str	r3, [r7, #20]
  return(result);
 800b8ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d17e      	bne.n	800b9b2 <osThreadNew+0x11a>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d07b      	beq.n	800b9b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b8ba:	2380      	movs	r3, #128	@ 0x80
 800b8bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b8be:	2318      	movs	r3, #24
 800b8c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d045      	beq.n	800b95e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <osThreadNew+0x48>
        name = attr->name;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <osThreadNew+0x6e>
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	2b38      	cmp	r3, #56	@ 0x38
 800b8f8:	d805      	bhi.n	800b906 <osThreadNew+0x6e>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <osThreadNew+0x72>
        return (NULL);
 800b906:	2300      	movs	r3, #0
 800b908:	e054      	b.n	800b9b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	089b      	lsrs	r3, r3, #2
 800b918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00e      	beq.n	800b940 <osThreadNew+0xa8>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	2ba7      	cmp	r3, #167	@ 0xa7
 800b928:	d90a      	bls.n	800b940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d006      	beq.n	800b940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <osThreadNew+0xa8>
        mem = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	61bb      	str	r3, [r7, #24]
 800b93e:	e010      	b.n	800b962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10c      	bne.n	800b962 <osThreadNew+0xca>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d108      	bne.n	800b962 <osThreadNew+0xca>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <osThreadNew+0xca>
          mem = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	e001      	b.n	800b962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d110      	bne.n	800b98a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b970:	9202      	str	r2, [sp, #8]
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6a3a      	ldr	r2, [r7, #32]
 800b97c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 ff7e 	bl	800c880 <xTaskCreateStatic>
 800b984:	4603      	mov	r3, r0
 800b986:	613b      	str	r3, [r7, #16]
 800b988:	e013      	b.n	800b9b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d110      	bne.n	800b9b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	b29a      	uxth	r2, r3
 800b994:	f107 0310 	add.w	r3, r7, #16
 800b998:	9301      	str	r3, [sp, #4]
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f000 ffcc 	bl	800c940 <xTaskCreate>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d001      	beq.n	800b9b2 <osThreadNew+0x11a>
            hTask = NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b9b2:	693b      	ldr	r3, [r7, #16]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3728      	adds	r7, #40	@ 0x28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9c4:	f3ef 8305 	mrs	r3, IPSR
 800b9c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <osDelay+0x1c>
    stat = osErrorISR;
 800b9d0:	f06f 0305 	mvn.w	r3, #5
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	e007      	b.n	800b9e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f001 f90a 	bl	800cbfc <vTaskDelay>
    }
  }

  return (stat);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a07      	ldr	r2, [pc, #28]	@ (800ba20 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4a06      	ldr	r2, [pc, #24]	@ (800ba24 <vApplicationGetIdleTaskMemory+0x30>)
 800ba0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2280      	movs	r2, #128	@ 0x80
 800ba10:	601a      	str	r2, [r3, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	240002c0 	.word	0x240002c0
 800ba24:	24000368 	.word	0x24000368

0800ba28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4a07      	ldr	r2, [pc, #28]	@ (800ba54 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	4a06      	ldr	r2, [pc, #24]	@ (800ba58 <vApplicationGetTimerTaskMemory+0x30>)
 800ba3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba46:	601a      	str	r2, [r3, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	24000568 	.word	0x24000568
 800ba58:	24000610 	.word	0x24000610

0800ba5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f103 0208 	add.w	r2, r3, #8
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f04f 32ff 	mov.w	r2, #4294967295
 800ba74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f103 0208 	add.w	r2, r3, #8
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f103 0208 	add.w	r2, r3, #8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800baaa:	bf00      	nop
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	689a      	ldr	r2, [r3, #8]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
}
 800baf2:	bf00      	nop
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bafe:	b480      	push	{r7}
 800bb00:	b085      	sub	sp, #20
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb14:	d103      	bne.n	800bb1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	60fb      	str	r3, [r7, #12]
 800bb1c:	e00c      	b.n	800bb38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3308      	adds	r3, #8
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	e002      	b.n	800bb2c <vListInsert+0x2e>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d2f6      	bcs.n	800bb26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	6892      	ldr	r2, [r2, #8]
 800bb86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	6852      	ldr	r2, [r2, #4]
 800bb90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d103      	bne.n	800bba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	1e5a      	subs	r2, r3, #1
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10b      	bne.n	800bbf0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bbea:	bf00      	nop
 800bbec:	bf00      	nop
 800bbee:	e7fd      	b.n	800bbec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bbf0:	f002 fbc2 	bl	800e378 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbfc:	68f9      	ldr	r1, [r7, #12]
 800bbfe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bc00:	fb01 f303 	mul.w	r3, r1, r3
 800bc04:	441a      	add	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc20:	3b01      	subs	r3, #1
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bc26:	fb01 f303 	mul.w	r3, r1, r3
 800bc2a:	441a      	add	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	22ff      	movs	r2, #255	@ 0xff
 800bc34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	22ff      	movs	r2, #255	@ 0xff
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d114      	bne.n	800bc70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d01a      	beq.n	800bc84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3310      	adds	r3, #16
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 fb06 	bl	800d264 <xTaskRemoveFromEventList>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d012      	beq.n	800bc84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc94 <xQueueGenericReset+0xd0>)
 800bc60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	e009      	b.n	800bc84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3310      	adds	r3, #16
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff fef1 	bl	800ba5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3324      	adds	r3, #36	@ 0x24
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff feec 	bl	800ba5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc84:	f002 fbaa 	bl	800e3dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc88:	2301      	movs	r3, #1
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08e      	sub	sp, #56	@ 0x38
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10b      	bne.n	800bcc4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bcbe:	bf00      	nop
 800bcc0:	bf00      	nop
 800bcc2:	e7fd      	b.n	800bcc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10b      	bne.n	800bce2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bcdc:	bf00      	nop
 800bcde:	bf00      	nop
 800bce0:	e7fd      	b.n	800bcde <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <xQueueGenericCreateStatic+0x56>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <xQueueGenericCreateStatic+0x5a>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e000      	b.n	800bcf4 <xQueueGenericCreateStatic+0x5c>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10b      	bne.n	800bd10 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bcf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	623b      	str	r3, [r7, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	e7fd      	b.n	800bd0c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <xQueueGenericCreateStatic+0x84>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <xQueueGenericCreateStatic+0x88>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e000      	b.n	800bd22 <xQueueGenericCreateStatic+0x8a>
 800bd20:	2300      	movs	r3, #0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10b      	bne.n	800bd3e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	61fb      	str	r3, [r7, #28]
}
 800bd38:	bf00      	nop
 800bd3a:	bf00      	nop
 800bd3c:	e7fd      	b.n	800bd3a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd3e:	2350      	movs	r3, #80	@ 0x50
 800bd40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b50      	cmp	r3, #80	@ 0x50
 800bd46:	d00b      	beq.n	800bd60 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4c:	f383 8811 	msr	BASEPRI, r3
 800bd50:	f3bf 8f6f 	isb	sy
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	61bb      	str	r3, [r7, #24]
}
 800bd5a:	bf00      	nop
 800bd5c:	bf00      	nop
 800bd5e:	e7fd      	b.n	800bd5c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00d      	beq.n	800bd88 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd74:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 f840 	bl	800be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3730      	adds	r7, #48	@ 0x30
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b08a      	sub	sp, #40	@ 0x28
 800bd96:	af02      	add	r7, sp, #8
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10b      	bne.n	800bdbe <xQueueGenericCreate+0x2c>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	613b      	str	r3, [r7, #16]
}
 800bdb8:	bf00      	nop
 800bdba:	bf00      	nop
 800bdbc:	e7fd      	b.n	800bdba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	fb02 f303 	mul.w	r3, r2, r3
 800bdc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	3350      	adds	r3, #80	@ 0x50
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f002 fcd9 	bl	800e784 <pvPortMalloc>
 800bdd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d011      	beq.n	800bdfe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	3350      	adds	r3, #80	@ 0x50
 800bde2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdec:	79fa      	ldrb	r2, [r7, #7]
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 f805 	bl	800be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdfe:	69bb      	ldr	r3, [r7, #24]
	}
 800be00:	4618      	mov	r0, r3
 800be02:	3720      	adds	r7, #32
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	e002      	b.n	800be2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be36:	2101      	movs	r1, #1
 800be38:	69b8      	ldr	r0, [r7, #24]
 800be3a:	f7ff fec3 	bl	800bbc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08e      	sub	sp, #56	@ 0x38
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be5e:	2300      	movs	r3, #0
 800be60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800be66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <xQueueGenericSend+0x34>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be7e:	bf00      	nop
 800be80:	bf00      	nop
 800be82:	e7fd      	b.n	800be80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d103      	bne.n	800be92 <xQueueGenericSend+0x42>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <xQueueGenericSend+0x46>
 800be92:	2301      	movs	r3, #1
 800be94:	e000      	b.n	800be98 <xQueueGenericSend+0x48>
 800be96:	2300      	movs	r3, #0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <xQueueGenericSend+0x64>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d103      	bne.n	800bec2 <xQueueGenericSend+0x72>
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <xQueueGenericSend+0x76>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e000      	b.n	800bec8 <xQueueGenericSend+0x78>
 800bec6:	2300      	movs	r3, #0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10b      	bne.n	800bee4 <xQueueGenericSend+0x94>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	623b      	str	r3, [r7, #32]
}
 800bede:	bf00      	nop
 800bee0:	bf00      	nop
 800bee2:	e7fd      	b.n	800bee0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bee4:	f001 fbdc 	bl	800d6a0 <xTaskGetSchedulerState>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d102      	bne.n	800bef4 <xQueueGenericSend+0xa4>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <xQueueGenericSend+0xa8>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e000      	b.n	800befa <xQueueGenericSend+0xaa>
 800bef8:	2300      	movs	r3, #0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10b      	bne.n	800bf16 <xQueueGenericSend+0xc6>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	61fb      	str	r3, [r7, #28]
}
 800bf10:	bf00      	nop
 800bf12:	bf00      	nop
 800bf14:	e7fd      	b.n	800bf12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf16:	f002 fa2f 	bl	800e378 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d302      	bcc.n	800bf2c <xQueueGenericSend+0xdc>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d129      	bne.n	800bf80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	68b9      	ldr	r1, [r7, #8]
 800bf30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf32:	f000 fb37 	bl	800c5a4 <prvCopyDataToQueue>
 800bf36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d010      	beq.n	800bf62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf42:	3324      	adds	r3, #36	@ 0x24
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 f98d 	bl	800d264 <xTaskRemoveFromEventList>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d013      	beq.n	800bf78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf50:	4b3f      	ldr	r3, [pc, #252]	@ (800c050 <xQueueGenericSend+0x200>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	e00a      	b.n	800bf78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d007      	beq.n	800bf78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf68:	4b39      	ldr	r3, [pc, #228]	@ (800c050 <xQueueGenericSend+0x200>)
 800bf6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf78:	f002 fa30 	bl	800e3dc <vPortExitCritical>
				return pdPASS;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e063      	b.n	800c048 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d103      	bne.n	800bf8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf86:	f002 fa29 	bl	800e3dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e05c      	b.n	800c048 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf94:	f107 0314 	add.w	r3, r7, #20
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 f9c9 	bl	800d330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfa2:	f002 fa1b 	bl	800e3dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfa6:	f000 fecf 	bl	800cd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfaa:	f002 f9e5 	bl	800e378 <vPortEnterCritical>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bfb4:	b25b      	sxtb	r3, r3
 800bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfba:	d103      	bne.n	800bfc4 <xQueueGenericSend+0x174>
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfca:	b25b      	sxtb	r3, r3
 800bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd0:	d103      	bne.n	800bfda <xQueueGenericSend+0x18a>
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfda:	f002 f9ff 	bl	800e3dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfde:	1d3a      	adds	r2, r7, #4
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f001 f9b8 	bl	800d35c <xTaskCheckForTimeOut>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d124      	bne.n	800c03c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bff2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bff4:	f000 fbce 	bl	800c794 <prvIsQueueFull>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d018      	beq.n	800c030 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c000:	3310      	adds	r3, #16
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	4611      	mov	r1, r2
 800c006:	4618      	mov	r0, r3
 800c008:	f001 f8da 	bl	800d1c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c00c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c00e:	f000 fb59 	bl	800c6c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c012:	f000 fedf 	bl	800cdd4 <xTaskResumeAll>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f47f af7c 	bne.w	800bf16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c01e:	4b0c      	ldr	r3, [pc, #48]	@ (800c050 <xQueueGenericSend+0x200>)
 800c020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	e772      	b.n	800bf16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c032:	f000 fb47 	bl	800c6c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c036:	f000 fecd 	bl	800cdd4 <xTaskResumeAll>
 800c03a:	e76c      	b.n	800bf16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c03c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c03e:	f000 fb41 	bl	800c6c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c042:	f000 fec7 	bl	800cdd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c046:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3738      	adds	r7, #56	@ 0x38
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	e000ed04 	.word	0xe000ed04

0800c054 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b090      	sub	sp, #64	@ 0x40
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c07e:	bf00      	nop
 800c080:	bf00      	nop
 800c082:	e7fd      	b.n	800c080 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d103      	bne.n	800c092 <xQueueGenericSendFromISR+0x3e>
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <xQueueGenericSendFromISR+0x42>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <xQueueGenericSendFromISR+0x44>
 800c096:	2300      	movs	r3, #0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10b      	bne.n	800c0b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	e7fd      	b.n	800c0b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d103      	bne.n	800c0c2 <xQueueGenericSendFromISR+0x6e>
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <xQueueGenericSendFromISR+0x72>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <xQueueGenericSendFromISR+0x74>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10b      	bne.n	800c0e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	623b      	str	r3, [r7, #32]
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	e7fd      	b.n	800c0e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0e4:	f002 fb0c 	bl	800e700 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0e8:	f3ef 8211 	mrs	r2, BASEPRI
 800c0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	61fa      	str	r2, [r7, #28]
 800c0fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c100:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c102:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d302      	bcc.n	800c116 <xQueueGenericSendFromISR+0xc2>
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b02      	cmp	r3, #2
 800c114:	d12f      	bne.n	800c176 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c118:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c11c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c124:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c12c:	f000 fa3a 	bl	800c5a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c130:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c138:	d112      	bne.n	800c160 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d016      	beq.n	800c170 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c144:	3324      	adds	r3, #36	@ 0x24
 800c146:	4618      	mov	r0, r3
 800c148:	f001 f88c 	bl	800d264 <xTaskRemoveFromEventList>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00e      	beq.n	800c170 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	e007      	b.n	800c170 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c160:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c164:	3301      	adds	r3, #1
 800c166:	b2db      	uxtb	r3, r3
 800c168:	b25a      	sxtb	r2, r3
 800c16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c170:	2301      	movs	r3, #1
 800c172:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c174:	e001      	b.n	800c17a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c176:	2300      	movs	r3, #0
 800c178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c17c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c184:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3740      	adds	r7, #64	@ 0x40
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08c      	sub	sp, #48	@ 0x30
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c19c:	2300      	movs	r3, #0
 800c19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10b      	bne.n	800c1c2 <xQueueReceive+0x32>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	623b      	str	r3, [r7, #32]
}
 800c1bc:	bf00      	nop
 800c1be:	bf00      	nop
 800c1c0:	e7fd      	b.n	800c1be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <xQueueReceive+0x40>
 800c1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <xQueueReceive+0x44>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e000      	b.n	800c1d6 <xQueueReceive+0x46>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10b      	bne.n	800c1f2 <xQueueReceive+0x62>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	61fb      	str	r3, [r7, #28]
}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	e7fd      	b.n	800c1ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1f2:	f001 fa55 	bl	800d6a0 <xTaskGetSchedulerState>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d102      	bne.n	800c202 <xQueueReceive+0x72>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <xQueueReceive+0x76>
 800c202:	2301      	movs	r3, #1
 800c204:	e000      	b.n	800c208 <xQueueReceive+0x78>
 800c206:	2300      	movs	r3, #0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10b      	bne.n	800c224 <xQueueReceive+0x94>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	61bb      	str	r3, [r7, #24]
}
 800c21e:	bf00      	nop
 800c220:	bf00      	nop
 800c222:	e7fd      	b.n	800c220 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c224:	f002 f8a8 	bl	800e378 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c22c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01f      	beq.n	800c274 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c238:	f000 fa1e 	bl	800c678 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23e:	1e5a      	subs	r2, r3, #1
 800c240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c242:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00f      	beq.n	800c26c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24e:	3310      	adds	r3, #16
 800c250:	4618      	mov	r0, r3
 800c252:	f001 f807 	bl	800d264 <xTaskRemoveFromEventList>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d007      	beq.n	800c26c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c25c:	4b3c      	ldr	r3, [pc, #240]	@ (800c350 <xQueueReceive+0x1c0>)
 800c25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c26c:	f002 f8b6 	bl	800e3dc <vPortExitCritical>
				return pdPASS;
 800c270:	2301      	movs	r3, #1
 800c272:	e069      	b.n	800c348 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d103      	bne.n	800c282 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c27a:	f002 f8af 	bl	800e3dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c27e:	2300      	movs	r3, #0
 800c280:	e062      	b.n	800c348 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c288:	f107 0310 	add.w	r3, r7, #16
 800c28c:	4618      	mov	r0, r3
 800c28e:	f001 f84f 	bl	800d330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c292:	2301      	movs	r3, #1
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c296:	f002 f8a1 	bl	800e3dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c29a:	f000 fd55 	bl	800cd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c29e:	f002 f86b 	bl	800e378 <vPortEnterCritical>
 800c2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2a8:	b25b      	sxtb	r3, r3
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d103      	bne.n	800c2b8 <xQueueReceive+0x128>
 800c2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2be:	b25b      	sxtb	r3, r3
 800c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c4:	d103      	bne.n	800c2ce <xQueueReceive+0x13e>
 800c2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2ce:	f002 f885 	bl	800e3dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2d2:	1d3a      	adds	r2, r7, #4
 800c2d4:	f107 0310 	add.w	r3, r7, #16
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f001 f83e 	bl	800d35c <xTaskCheckForTimeOut>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d123      	bne.n	800c32e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2e8:	f000 fa3e 	bl	800c768 <prvIsQueueEmpty>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d017      	beq.n	800c322 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f4:	3324      	adds	r3, #36	@ 0x24
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 ff60 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c302:	f000 f9df 	bl	800c6c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c306:	f000 fd65 	bl	800cdd4 <xTaskResumeAll>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d189      	bne.n	800c224 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c310:	4b0f      	ldr	r3, [pc, #60]	@ (800c350 <xQueueReceive+0x1c0>)
 800c312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	e780      	b.n	800c224 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c324:	f000 f9ce 	bl	800c6c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c328:	f000 fd54 	bl	800cdd4 <xTaskResumeAll>
 800c32c:	e77a      	b.n	800c224 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c32e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c330:	f000 f9c8 	bl	800c6c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c334:	f000 fd4e 	bl	800cdd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c33a:	f000 fa15 	bl	800c768 <prvIsQueueEmpty>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	f43f af6f 	beq.w	800c224 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c346:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3730      	adds	r7, #48	@ 0x30
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	e000ed04 	.word	0xe000ed04

0800c354 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08e      	sub	sp, #56	@ 0x38
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c35e:	2300      	movs	r3, #0
 800c360:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c366:	2300      	movs	r3, #0
 800c368:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10b      	bne.n	800c388 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	623b      	str	r3, [r7, #32]
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	e7fd      	b.n	800c384 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	61fb      	str	r3, [r7, #28]
}
 800c3a2:	bf00      	nop
 800c3a4:	bf00      	nop
 800c3a6:	e7fd      	b.n	800c3a4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3a8:	f001 f97a 	bl	800d6a0 <xTaskGetSchedulerState>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d102      	bne.n	800c3b8 <xQueueSemaphoreTake+0x64>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <xQueueSemaphoreTake+0x68>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e000      	b.n	800c3be <xQueueSemaphoreTake+0x6a>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10b      	bne.n	800c3da <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	61bb      	str	r3, [r7, #24]
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	e7fd      	b.n	800c3d6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3da:	f001 ffcd 	bl	800e378 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3e2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d024      	beq.n	800c434 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ec:	1e5a      	subs	r2, r3, #1
 800c3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d104      	bne.n	800c404 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3fa:	f001 facb 	bl	800d994 <pvTaskIncrementMutexHeldCount>
 800c3fe:	4602      	mov	r2, r0
 800c400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c402:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00f      	beq.n	800c42c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	3310      	adds	r3, #16
 800c410:	4618      	mov	r0, r3
 800c412:	f000 ff27 	bl	800d264 <xTaskRemoveFromEventList>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d007      	beq.n	800c42c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c41c:	4b54      	ldr	r3, [pc, #336]	@ (800c570 <xQueueSemaphoreTake+0x21c>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c42c:	f001 ffd6 	bl	800e3dc <vPortExitCritical>
				return pdPASS;
 800c430:	2301      	movs	r3, #1
 800c432:	e098      	b.n	800c566 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d112      	bne.n	800c460 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	617b      	str	r3, [r7, #20]
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c458:	f001 ffc0 	bl	800e3dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e082      	b.n	800c566 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c466:	f107 030c 	add.w	r3, r7, #12
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 ff60 	bl	800d330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c470:	2301      	movs	r3, #1
 800c472:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c474:	f001 ffb2 	bl	800e3dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c478:	f000 fc66 	bl	800cd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c47c:	f001 ff7c 	bl	800e378 <vPortEnterCritical>
 800c480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c482:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c486:	b25b      	sxtb	r3, r3
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48c:	d103      	bne.n	800c496 <xQueueSemaphoreTake+0x142>
 800c48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c49c:	b25b      	sxtb	r3, r3
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a2:	d103      	bne.n	800c4ac <xQueueSemaphoreTake+0x158>
 800c4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4ac:	f001 ff96 	bl	800e3dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4b0:	463a      	mov	r2, r7
 800c4b2:	f107 030c 	add.w	r3, r7, #12
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 ff4f 	bl	800d35c <xTaskCheckForTimeOut>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d132      	bne.n	800c52a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4c6:	f000 f94f 	bl	800c768 <prvIsQueueEmpty>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d026      	beq.n	800c51e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c4d8:	f001 ff4e 	bl	800e378 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f001 f8fb 	bl	800d6dc <xTaskPriorityInherit>
 800c4e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c4e8:	f001 ff78 	bl	800e3dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ee:	3324      	adds	r3, #36	@ 0x24
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 fe63 	bl	800d1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4fc:	f000 f8e2 	bl	800c6c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c500:	f000 fc68 	bl	800cdd4 <xTaskResumeAll>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	f47f af67 	bne.w	800c3da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c50c:	4b18      	ldr	r3, [pc, #96]	@ (800c570 <xQueueSemaphoreTake+0x21c>)
 800c50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	e75d      	b.n	800c3da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c51e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c520:	f000 f8d0 	bl	800c6c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c524:	f000 fc56 	bl	800cdd4 <xTaskResumeAll>
 800c528:	e757      	b.n	800c3da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c52a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c52c:	f000 f8ca 	bl	800c6c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c530:	f000 fc50 	bl	800cdd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c534:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c536:	f000 f917 	bl	800c768 <prvIsQueueEmpty>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f43f af4c 	beq.w	800c3da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00d      	beq.n	800c564 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c548:	f001 ff16 	bl	800e378 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c54c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c54e:	f000 f811 	bl	800c574 <prvGetDisinheritPriorityAfterTimeout>
 800c552:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c55a:	4618      	mov	r0, r3
 800c55c:	f001 f996 	bl	800d88c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c560:	f001 ff3c 	bl	800e3dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c566:	4618      	mov	r0, r3
 800c568:	3738      	adds	r7, #56	@ 0x38
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	e001      	b.n	800c596 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c596:	68fb      	ldr	r3, [r7, #12]
	}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10d      	bne.n	800c5de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d14d      	bne.n	800c666 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f001 f8ec 	bl	800d7ac <xTaskPriorityDisinherit>
 800c5d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	609a      	str	r2, [r3, #8]
 800c5dc:	e043      	b.n	800c666 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d119      	bne.n	800c618 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6858      	ldr	r0, [r3, #4]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	68b9      	ldr	r1, [r7, #8]
 800c5f0:	f002 fb3a 	bl	800ec68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fc:	441a      	add	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d32b      	bcc.n	800c666 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	e026      	b.n	800c666 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	68d8      	ldr	r0, [r3, #12]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c620:	461a      	mov	r2, r3
 800c622:	68b9      	ldr	r1, [r7, #8]
 800c624:	f002 fb20 	bl	800ec68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	68da      	ldr	r2, [r3, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c630:	425b      	negs	r3, r3
 800c632:	441a      	add	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	429a      	cmp	r2, r3
 800c642:	d207      	bcs.n	800c654 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	689a      	ldr	r2, [r3, #8]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64c:	425b      	negs	r3, r3
 800c64e:	441a      	add	r2, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d105      	bne.n	800c666 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	3b01      	subs	r3, #1
 800c664:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c66e:	697b      	ldr	r3, [r7, #20]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d018      	beq.n	800c6bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c692:	441a      	add	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68da      	ldr	r2, [r3, #12]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d303      	bcc.n	800c6ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	68d9      	ldr	r1, [r3, #12]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	6838      	ldr	r0, [r7, #0]
 800c6b8:	f002 fad6 	bl	800ec68 <memcpy>
	}
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6cc:	f001 fe54 	bl	800e378 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6d8:	e011      	b.n	800c6fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d012      	beq.n	800c708 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3324      	adds	r3, #36	@ 0x24
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 fdbc 	bl	800d264 <xTaskRemoveFromEventList>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6f2:	f000 fe97 	bl	800d424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c702:	2b00      	cmp	r3, #0
 800c704:	dce9      	bgt.n	800c6da <prvUnlockQueue+0x16>
 800c706:	e000      	b.n	800c70a <prvUnlockQueue+0x46>
					break;
 800c708:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	22ff      	movs	r2, #255	@ 0xff
 800c70e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c712:	f001 fe63 	bl	800e3dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c716:	f001 fe2f 	bl	800e378 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c720:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c722:	e011      	b.n	800c748 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d012      	beq.n	800c752 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3310      	adds	r3, #16
 800c730:	4618      	mov	r0, r3
 800c732:	f000 fd97 	bl	800d264 <xTaskRemoveFromEventList>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c73c:	f000 fe72 	bl	800d424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	3b01      	subs	r3, #1
 800c744:	b2db      	uxtb	r3, r3
 800c746:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dce9      	bgt.n	800c724 <prvUnlockQueue+0x60>
 800c750:	e000      	b.n	800c754 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c752:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	22ff      	movs	r2, #255	@ 0xff
 800c758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c75c:	f001 fe3e 	bl	800e3dc <vPortExitCritical>
}
 800c760:	bf00      	nop
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c770:	f001 fe02 	bl	800e378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d102      	bne.n	800c782 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c77c:	2301      	movs	r3, #1
 800c77e:	60fb      	str	r3, [r7, #12]
 800c780:	e001      	b.n	800c786 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c782:	2300      	movs	r3, #0
 800c784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c786:	f001 fe29 	bl	800e3dc <vPortExitCritical>

	return xReturn;
 800c78a:	68fb      	ldr	r3, [r7, #12]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c79c:	f001 fdec 	bl	800e378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d102      	bne.n	800c7b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e001      	b.n	800c7b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7b6:	f001 fe11 	bl	800e3dc <vPortExitCritical>

	return xReturn;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	e014      	b.n	800c7fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c7d4:	4a0f      	ldr	r2, [pc, #60]	@ (800c814 <vQueueAddToRegistry+0x50>)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10b      	bne.n	800c7f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7e0:	490c      	ldr	r1, [pc, #48]	@ (800c814 <vQueueAddToRegistry+0x50>)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c814 <vQueueAddToRegistry+0x50>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	4413      	add	r3, r2
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7f6:	e006      	b.n	800c806 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2b07      	cmp	r3, #7
 800c802:	d9e7      	bls.n	800c7d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	24000a10 	.word	0x24000a10

0800c818 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c828:	f001 fda6 	bl	800e378 <vPortEnterCritical>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c832:	b25b      	sxtb	r3, r3
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c838:	d103      	bne.n	800c842 <vQueueWaitForMessageRestricted+0x2a>
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c848:	b25b      	sxtb	r3, r3
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d103      	bne.n	800c858 <vQueueWaitForMessageRestricted+0x40>
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c858:	f001 fdc0 	bl	800e3dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c860:	2b00      	cmp	r3, #0
 800c862:	d106      	bne.n	800c872 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	3324      	adds	r3, #36	@ 0x24
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 fccd 	bl	800d20c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c872:	6978      	ldr	r0, [r7, #20]
 800c874:	f7ff ff26 	bl	800c6c4 <prvUnlockQueue>
	}
 800c878:	bf00      	nop
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08e      	sub	sp, #56	@ 0x38
 800c884:	af04      	add	r7, sp, #16
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10b      	bne.n	800c8ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	623b      	str	r3, [r7, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	bf00      	nop
 800c8aa:	e7fd      	b.n	800c8a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10b      	bne.n	800c8ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	61fb      	str	r3, [r7, #28]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8ca:	23a8      	movs	r3, #168	@ 0xa8
 800c8cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	2ba8      	cmp	r3, #168	@ 0xa8
 800c8d2:	d00b      	beq.n	800c8ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	61bb      	str	r3, [r7, #24]
}
 800c8e6:	bf00      	nop
 800c8e8:	bf00      	nop
 800c8ea:	e7fd      	b.n	800c8e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01e      	beq.n	800c932 <xTaskCreateStatic+0xb2>
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d01b      	beq.n	800c932 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c902:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c906:	2202      	movs	r2, #2
 800c908:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c90c:	2300      	movs	r3, #0
 800c90e:	9303      	str	r3, [sp, #12]
 800c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c912:	9302      	str	r3, [sp, #8]
 800c914:	f107 0314 	add.w	r3, r7, #20
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	68b9      	ldr	r1, [r7, #8]
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 f851 	bl	800c9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c92a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c92c:	f000 f8f6 	bl	800cb1c <prvAddNewTaskToReadyList>
 800c930:	e001      	b.n	800c936 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c936:	697b      	ldr	r3, [r7, #20]
	}
 800c938:	4618      	mov	r0, r3
 800c93a:	3728      	adds	r7, #40	@ 0x28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08c      	sub	sp, #48	@ 0x30
 800c944:	af04      	add	r7, sp, #16
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	603b      	str	r3, [r7, #0]
 800c94c:	4613      	mov	r3, r2
 800c94e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c950:	88fb      	ldrh	r3, [r7, #6]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4618      	mov	r0, r3
 800c956:	f001 ff15 	bl	800e784 <pvPortMalloc>
 800c95a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00e      	beq.n	800c980 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c962:	20a8      	movs	r0, #168	@ 0xa8
 800c964:	f001 ff0e 	bl	800e784 <pvPortMalloc>
 800c968:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d003      	beq.n	800c978 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	631a      	str	r2, [r3, #48]	@ 0x30
 800c976:	e005      	b.n	800c984 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c978:	6978      	ldr	r0, [r7, #20]
 800c97a:	f001 ffd1 	bl	800e920 <vPortFree>
 800c97e:	e001      	b.n	800c984 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d017      	beq.n	800c9ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c992:	88fa      	ldrh	r2, [r7, #6]
 800c994:	2300      	movs	r3, #0
 800c996:	9303      	str	r3, [sp, #12]
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	9302      	str	r3, [sp, #8]
 800c99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99e:	9301      	str	r3, [sp, #4]
 800c9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f000 f80f 	bl	800c9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9ae:	69f8      	ldr	r0, [r7, #28]
 800c9b0:	f000 f8b4 	bl	800cb1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	61bb      	str	r3, [r7, #24]
 800c9b8:	e002      	b.n	800c9c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c9be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9c0:	69bb      	ldr	r3, [r7, #24]
	}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3720      	adds	r7, #32
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	21a5      	movs	r1, #165	@ 0xa5
 800c9e6:	f002 f8bb 	bl	800eb60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9ee:	6879      	ldr	r1, [r7, #4]
 800c9f0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c9f4:	440b      	add	r3, r1
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	f023 0307 	bic.w	r3, r3, #7
 800ca02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	f003 0307 	and.w	r3, r3, #7
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00b      	beq.n	800ca26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	617b      	str	r3, [r7, #20]
}
 800ca20:	bf00      	nop
 800ca22:	bf00      	nop
 800ca24:	e7fd      	b.n	800ca22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d01f      	beq.n	800ca6c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	e012      	b.n	800ca58 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	4413      	add	r3, r2
 800ca38:	7819      	ldrb	r1, [r3, #0]
 800ca3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	4413      	add	r3, r2
 800ca40:	3334      	adds	r3, #52	@ 0x34
 800ca42:	460a      	mov	r2, r1
 800ca44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d006      	beq.n	800ca60 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	3301      	adds	r3, #1
 800ca56:	61fb      	str	r3, [r7, #28]
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	2b0f      	cmp	r3, #15
 800ca5c:	d9e9      	bls.n	800ca32 <prvInitialiseNewTask+0x66>
 800ca5e:	e000      	b.n	800ca62 <prvInitialiseNewTask+0x96>
			{
				break;
 800ca60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ca6a:	e003      	b.n	800ca74 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca76:	2b37      	cmp	r3, #55	@ 0x37
 800ca78:	d901      	bls.n	800ca7e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca7a:	2337      	movs	r3, #55	@ 0x37
 800ca7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca92:	3304      	adds	r3, #4
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff f801 	bl	800ba9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	3318      	adds	r3, #24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe fffc 	bl	800ba9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800caa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cab8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800caba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cabc:	2200      	movs	r2, #0
 800cabe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cacc:	3354      	adds	r3, #84	@ 0x54
 800cace:	224c      	movs	r2, #76	@ 0x4c
 800cad0:	2100      	movs	r1, #0
 800cad2:	4618      	mov	r0, r3
 800cad4:	f002 f844 	bl	800eb60 <memset>
 800cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cada:	4a0d      	ldr	r2, [pc, #52]	@ (800cb10 <prvInitialiseNewTask+0x144>)
 800cadc:	659a      	str	r2, [r3, #88]	@ 0x58
 800cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae0:	4a0c      	ldr	r2, [pc, #48]	@ (800cb14 <prvInitialiseNewTask+0x148>)
 800cae2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae6:	4a0c      	ldr	r2, [pc, #48]	@ (800cb18 <prvInitialiseNewTask+0x14c>)
 800cae8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	68f9      	ldr	r1, [r7, #12]
 800caee:	69b8      	ldr	r0, [r7, #24]
 800caf0:	f001 fb12 	bl	800e118 <pxPortInitialiseStack>
 800caf4:	4602      	mov	r2, r0
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb06:	bf00      	nop
 800cb08:	3720      	adds	r7, #32
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	24004cb0 	.word	0x24004cb0
 800cb14:	24004d18 	.word	0x24004d18
 800cb18:	24004d80 	.word	0x24004d80

0800cb1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb24:	f001 fc28 	bl	800e378 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb28:	4b2d      	ldr	r3, [pc, #180]	@ (800cbe0 <prvAddNewTaskToReadyList+0xc4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	4a2c      	ldr	r2, [pc, #176]	@ (800cbe0 <prvAddNewTaskToReadyList+0xc4>)
 800cb30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb32:	4b2c      	ldr	r3, [pc, #176]	@ (800cbe4 <prvAddNewTaskToReadyList+0xc8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d109      	bne.n	800cb4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb3a:	4a2a      	ldr	r2, [pc, #168]	@ (800cbe4 <prvAddNewTaskToReadyList+0xc8>)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb40:	4b27      	ldr	r3, [pc, #156]	@ (800cbe0 <prvAddNewTaskToReadyList+0xc4>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d110      	bne.n	800cb6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb48:	f000 fce6 	bl	800d518 <prvInitialiseTaskLists>
 800cb4c:	e00d      	b.n	800cb6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb4e:	4b26      	ldr	r3, [pc, #152]	@ (800cbe8 <prvAddNewTaskToReadyList+0xcc>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d109      	bne.n	800cb6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb56:	4b23      	ldr	r3, [pc, #140]	@ (800cbe4 <prvAddNewTaskToReadyList+0xc8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d802      	bhi.n	800cb6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb64:	4a1f      	ldr	r2, [pc, #124]	@ (800cbe4 <prvAddNewTaskToReadyList+0xc8>)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb6a:	4b20      	ldr	r3, [pc, #128]	@ (800cbec <prvAddNewTaskToReadyList+0xd0>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	4a1e      	ldr	r2, [pc, #120]	@ (800cbec <prvAddNewTaskToReadyList+0xd0>)
 800cb72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb74:	4b1d      	ldr	r3, [pc, #116]	@ (800cbec <prvAddNewTaskToReadyList+0xd0>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb80:	4b1b      	ldr	r3, [pc, #108]	@ (800cbf0 <prvAddNewTaskToReadyList+0xd4>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d903      	bls.n	800cb90 <prvAddNewTaskToReadyList+0x74>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8c:	4a18      	ldr	r2, [pc, #96]	@ (800cbf0 <prvAddNewTaskToReadyList+0xd4>)
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb94:	4613      	mov	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4a15      	ldr	r2, [pc, #84]	@ (800cbf4 <prvAddNewTaskToReadyList+0xd8>)
 800cb9e:	441a      	add	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3304      	adds	r3, #4
 800cba4:	4619      	mov	r1, r3
 800cba6:	4610      	mov	r0, r2
 800cba8:	f7fe ff85 	bl	800bab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cbac:	f001 fc16 	bl	800e3dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cbb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe8 <prvAddNewTaskToReadyList+0xcc>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00e      	beq.n	800cbd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe4 <prvAddNewTaskToReadyList+0xc8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d207      	bcs.n	800cbd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cbc6:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf8 <prvAddNewTaskToReadyList+0xdc>)
 800cbc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	24000f24 	.word	0x24000f24
 800cbe4:	24000a50 	.word	0x24000a50
 800cbe8:	24000f30 	.word	0x24000f30
 800cbec:	24000f40 	.word	0x24000f40
 800cbf0:	24000f2c 	.word	0x24000f2c
 800cbf4:	24000a54 	.word	0x24000a54
 800cbf8:	e000ed04 	.word	0xe000ed04

0800cbfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d018      	beq.n	800cc40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc0e:	4b14      	ldr	r3, [pc, #80]	@ (800cc60 <vTaskDelay+0x64>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00b      	beq.n	800cc2e <vTaskDelay+0x32>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	60bb      	str	r3, [r7, #8]
}
 800cc28:	bf00      	nop
 800cc2a:	bf00      	nop
 800cc2c:	e7fd      	b.n	800cc2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc2e:	f000 f88b 	bl	800cd48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc32:	2100      	movs	r1, #0
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fec1 	bl	800d9bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc3a:	f000 f8cb 	bl	800cdd4 <xTaskResumeAll>
 800cc3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d107      	bne.n	800cc56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cc46:	4b07      	ldr	r3, [pc, #28]	@ (800cc64 <vTaskDelay+0x68>)
 800cc48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc56:	bf00      	nop
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	24000f4c 	.word	0x24000f4c
 800cc64:	e000ed04 	.word	0xe000ed04

0800cc68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08a      	sub	sp, #40	@ 0x28
 800cc6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc76:	463a      	mov	r2, r7
 800cc78:	1d39      	adds	r1, r7, #4
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe feb8 	bl	800b9f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	9202      	str	r2, [sp, #8]
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	2300      	movs	r3, #0
 800cc94:	460a      	mov	r2, r1
 800cc96:	4924      	ldr	r1, [pc, #144]	@ (800cd28 <vTaskStartScheduler+0xc0>)
 800cc98:	4824      	ldr	r0, [pc, #144]	@ (800cd2c <vTaskStartScheduler+0xc4>)
 800cc9a:	f7ff fdf1 	bl	800c880 <xTaskCreateStatic>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	4a23      	ldr	r2, [pc, #140]	@ (800cd30 <vTaskStartScheduler+0xc8>)
 800cca2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cca4:	4b22      	ldr	r3, [pc, #136]	@ (800cd30 <vTaskStartScheduler+0xc8>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ccac:	2301      	movs	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	e001      	b.n	800ccb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d102      	bne.n	800ccc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ccbc:	f000 fed2 	bl	800da64 <xTimerCreateTimerTask>
 800ccc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d11b      	bne.n	800cd00 <vTaskStartScheduler+0x98>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	613b      	str	r3, [r7, #16]
}
 800ccda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccdc:	4b15      	ldr	r3, [pc, #84]	@ (800cd34 <vTaskStartScheduler+0xcc>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	3354      	adds	r3, #84	@ 0x54
 800cce2:	4a15      	ldr	r2, [pc, #84]	@ (800cd38 <vTaskStartScheduler+0xd0>)
 800cce4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cce6:	4b15      	ldr	r3, [pc, #84]	@ (800cd3c <vTaskStartScheduler+0xd4>)
 800cce8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccee:	4b14      	ldr	r3, [pc, #80]	@ (800cd40 <vTaskStartScheduler+0xd8>)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccf4:	4b13      	ldr	r3, [pc, #76]	@ (800cd44 <vTaskStartScheduler+0xdc>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccfa:	f001 fa99 	bl	800e230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccfe:	e00f      	b.n	800cd20 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd06:	d10b      	bne.n	800cd20 <vTaskStartScheduler+0xb8>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	60fb      	str	r3, [r7, #12]
}
 800cd1a:	bf00      	nop
 800cd1c:	bf00      	nop
 800cd1e:	e7fd      	b.n	800cd1c <vTaskStartScheduler+0xb4>
}
 800cd20:	bf00      	nop
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	0800ed8c 	.word	0x0800ed8c
 800cd2c:	0800d43d 	.word	0x0800d43d
 800cd30:	24000f48 	.word	0x24000f48
 800cd34:	24000a50 	.word	0x24000a50
 800cd38:	24000014 	.word	0x24000014
 800cd3c:	24000f44 	.word	0x24000f44
 800cd40:	24000f30 	.word	0x24000f30
 800cd44:	24000f28 	.word	0x24000f28

0800cd48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <vTaskSuspendAll+0x18>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	3301      	adds	r3, #1
 800cd52:	4a03      	ldr	r2, [pc, #12]	@ (800cd60 <vTaskSuspendAll+0x18>)
 800cd54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd56:	bf00      	nop
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	24000f4c 	.word	0x24000f4c

0800cd64 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800cd6e:	4b14      	ldr	r3, [pc, #80]	@ (800cdc0 <prvGetExpectedIdleTime+0x5c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800cd76:	2301      	movs	r3, #1
 800cd78:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800cd7a:	4b12      	ldr	r3, [pc, #72]	@ (800cdc4 <prvGetExpectedIdleTime+0x60>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	607b      	str	r3, [r7, #4]
 800cd88:	e012      	b.n	800cdb0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc8 <prvGetExpectedIdleTime+0x64>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d902      	bls.n	800cd98 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e00b      	b.n	800cdb0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	607b      	str	r3, [r7, #4]
 800cda2:	e005      	b.n	800cdb0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800cda4:	4b09      	ldr	r3, [pc, #36]	@ (800cdcc <prvGetExpectedIdleTime+0x68>)
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	4b09      	ldr	r3, [pc, #36]	@ (800cdd0 <prvGetExpectedIdleTime+0x6c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800cdb0:	687b      	ldr	r3, [r7, #4]
	}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	24000f2c 	.word	0x24000f2c
 800cdc4:	24000a50 	.word	0x24000a50
 800cdc8:	24000a54 	.word	0x24000a54
 800cdcc:	24000f44 	.word	0x24000f44
 800cdd0:	24000f28 	.word	0x24000f28

0800cdd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cde2:	4b42      	ldr	r3, [pc, #264]	@ (800ceec <xTaskResumeAll+0x118>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10b      	bne.n	800ce02 <xTaskResumeAll+0x2e>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	603b      	str	r3, [r7, #0]
}
 800cdfc:	bf00      	nop
 800cdfe:	bf00      	nop
 800ce00:	e7fd      	b.n	800cdfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce02:	f001 fab9 	bl	800e378 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce06:	4b39      	ldr	r3, [pc, #228]	@ (800ceec <xTaskResumeAll+0x118>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	4a37      	ldr	r2, [pc, #220]	@ (800ceec <xTaskResumeAll+0x118>)
 800ce0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce10:	4b36      	ldr	r3, [pc, #216]	@ (800ceec <xTaskResumeAll+0x118>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d162      	bne.n	800cede <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce18:	4b35      	ldr	r3, [pc, #212]	@ (800cef0 <xTaskResumeAll+0x11c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d05e      	beq.n	800cede <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce20:	e02f      	b.n	800ce82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce22:	4b34      	ldr	r3, [pc, #208]	@ (800cef4 <xTaskResumeAll+0x120>)
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3318      	adds	r3, #24
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fe9e 	bl	800bb70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3304      	adds	r3, #4
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fe fe99 	bl	800bb70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce42:	4b2d      	ldr	r3, [pc, #180]	@ (800cef8 <xTaskResumeAll+0x124>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d903      	bls.n	800ce52 <xTaskResumeAll+0x7e>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce4e:	4a2a      	ldr	r2, [pc, #168]	@ (800cef8 <xTaskResumeAll+0x124>)
 800ce50:	6013      	str	r3, [r2, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4a27      	ldr	r2, [pc, #156]	@ (800cefc <xTaskResumeAll+0x128>)
 800ce60:	441a      	add	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3304      	adds	r3, #4
 800ce66:	4619      	mov	r1, r3
 800ce68:	4610      	mov	r0, r2
 800ce6a:	f7fe fe24 	bl	800bab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce72:	4b23      	ldr	r3, [pc, #140]	@ (800cf00 <xTaskResumeAll+0x12c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d302      	bcc.n	800ce82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ce7c:	4b21      	ldr	r3, [pc, #132]	@ (800cf04 <xTaskResumeAll+0x130>)
 800ce7e:	2201      	movs	r2, #1
 800ce80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce82:	4b1c      	ldr	r3, [pc, #112]	@ (800cef4 <xTaskResumeAll+0x120>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1cb      	bne.n	800ce22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce90:	f000 fbe6 	bl	800d660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce94:	4b1c      	ldr	r3, [pc, #112]	@ (800cf08 <xTaskResumeAll+0x134>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d010      	beq.n	800cec2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cea0:	f000 f86e 	bl	800cf80 <xTaskIncrementTick>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d002      	beq.n	800ceb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ceaa:	4b16      	ldr	r3, [pc, #88]	@ (800cf04 <xTaskResumeAll+0x130>)
 800ceac:	2201      	movs	r2, #1
 800ceae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1f1      	bne.n	800cea0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cebc:	4b12      	ldr	r3, [pc, #72]	@ (800cf08 <xTaskResumeAll+0x134>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cec2:	4b10      	ldr	r3, [pc, #64]	@ (800cf04 <xTaskResumeAll+0x130>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d009      	beq.n	800cede <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ceca:	2301      	movs	r3, #1
 800cecc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cece:	4b0f      	ldr	r3, [pc, #60]	@ (800cf0c <xTaskResumeAll+0x138>)
 800ced0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cede:	f001 fa7d 	bl	800e3dc <vPortExitCritical>

	return xAlreadyYielded;
 800cee2:	68bb      	ldr	r3, [r7, #8]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	24000f4c 	.word	0x24000f4c
 800cef0:	24000f24 	.word	0x24000f24
 800cef4:	24000ee4 	.word	0x24000ee4
 800cef8:	24000f2c 	.word	0x24000f2c
 800cefc:	24000a54 	.word	0x24000a54
 800cf00:	24000a50 	.word	0x24000a50
 800cf04:	24000f38 	.word	0x24000f38
 800cf08:	24000f34 	.word	0x24000f34
 800cf0c:	e000ed04 	.word	0xe000ed04

0800cf10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf16:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <xTaskGetTickCount+0x1c>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf1c:	687b      	ldr	r3, [r7, #4]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	24000f28 	.word	0x24000f28

0800cf30 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800cf38:	4b0f      	ldr	r3, [pc, #60]	@ (800cf78 <vTaskStepTick+0x48>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	441a      	add	r2, r3
 800cf40:	4b0e      	ldr	r3, [pc, #56]	@ (800cf7c <vTaskStepTick+0x4c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d90b      	bls.n	800cf60 <vTaskStepTick+0x30>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	60fb      	str	r3, [r7, #12]
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	e7fd      	b.n	800cf5c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800cf60:	4b05      	ldr	r3, [pc, #20]	@ (800cf78 <vTaskStepTick+0x48>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4413      	add	r3, r2
 800cf68:	4a03      	ldr	r2, [pc, #12]	@ (800cf78 <vTaskStepTick+0x48>)
 800cf6a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800cf6c:	bf00      	nop
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	24000f28 	.word	0x24000f28
 800cf7c:	24000f44 	.word	0x24000f44

0800cf80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf86:	2300      	movs	r3, #0
 800cf88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf8a:	4b4f      	ldr	r3, [pc, #316]	@ (800d0c8 <xTaskIncrementTick+0x148>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f040 8090 	bne.w	800d0b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf94:	4b4d      	ldr	r3, [pc, #308]	@ (800d0cc <xTaskIncrementTick+0x14c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf9c:	4a4b      	ldr	r2, [pc, #300]	@ (800d0cc <xTaskIncrementTick+0x14c>)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d121      	bne.n	800cfec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfa8:	4b49      	ldr	r3, [pc, #292]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <xTaskIncrementTick+0x4a>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	603b      	str	r3, [r7, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <xTaskIncrementTick+0x46>
 800cfca:	4b41      	ldr	r3, [pc, #260]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	4b40      	ldr	r3, [pc, #256]	@ (800d0d4 <xTaskIncrementTick+0x154>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d4 <xTaskIncrementTick+0x154>)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	4b3e      	ldr	r3, [pc, #248]	@ (800d0d8 <xTaskIncrementTick+0x158>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	4a3c      	ldr	r2, [pc, #240]	@ (800d0d8 <xTaskIncrementTick+0x158>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	f000 fb3a 	bl	800d660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfec:	4b3b      	ldr	r3, [pc, #236]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d349      	bcc.n	800d08a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cff6:	4b36      	ldr	r3, [pc, #216]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d104      	bne.n	800d00a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d000:	4b36      	ldr	r3, [pc, #216]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800d002:	f04f 32ff 	mov.w	r2, #4294967295
 800d006:	601a      	str	r2, [r3, #0]
					break;
 800d008:	e03f      	b.n	800d08a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d00a:	4b31      	ldr	r3, [pc, #196]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d203      	bcs.n	800d02a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d022:	4a2e      	ldr	r2, [pc, #184]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d028:	e02f      	b.n	800d08a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fd9e 	bl	800bb70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	3318      	adds	r3, #24
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fd95 	bl	800bb70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04a:	4b25      	ldr	r3, [pc, #148]	@ (800d0e0 <xTaskIncrementTick+0x160>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d903      	bls.n	800d05a <xTaskIncrementTick+0xda>
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d056:	4a22      	ldr	r2, [pc, #136]	@ (800d0e0 <xTaskIncrementTick+0x160>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05e:	4613      	mov	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4a1f      	ldr	r2, [pc, #124]	@ (800d0e4 <xTaskIncrementTick+0x164>)
 800d068:	441a      	add	r2, r3
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe fd20 	bl	800bab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07a:	4b1b      	ldr	r3, [pc, #108]	@ (800d0e8 <xTaskIncrementTick+0x168>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d080:	429a      	cmp	r2, r3
 800d082:	d3b8      	bcc.n	800cff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d088:	e7b5      	b.n	800cff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d08a:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <xTaskIncrementTick+0x168>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d090:	4914      	ldr	r1, [pc, #80]	@ (800d0e4 <xTaskIncrementTick+0x164>)
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d901      	bls.n	800d0a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0a6:	4b11      	ldr	r3, [pc, #68]	@ (800d0ec <xTaskIncrementTick+0x16c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	e004      	b.n	800d0be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f0 <xTaskIncrementTick+0x170>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d0f0 <xTaskIncrementTick+0x170>)
 800d0bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0be:	697b      	ldr	r3, [r7, #20]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	24000f4c 	.word	0x24000f4c
 800d0cc:	24000f28 	.word	0x24000f28
 800d0d0:	24000edc 	.word	0x24000edc
 800d0d4:	24000ee0 	.word	0x24000ee0
 800d0d8:	24000f3c 	.word	0x24000f3c
 800d0dc:	24000f44 	.word	0x24000f44
 800d0e0:	24000f2c 	.word	0x24000f2c
 800d0e4:	24000a54 	.word	0x24000a54
 800d0e8:	24000a50 	.word	0x24000a50
 800d0ec:	24000f38 	.word	0x24000f38
 800d0f0:	24000f34 	.word	0x24000f34

0800d0f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0fa:	4b2b      	ldr	r3, [pc, #172]	@ (800d1a8 <vTaskSwitchContext+0xb4>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d102:	4b2a      	ldr	r3, [pc, #168]	@ (800d1ac <vTaskSwitchContext+0xb8>)
 800d104:	2201      	movs	r2, #1
 800d106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d108:	e047      	b.n	800d19a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d10a:	4b28      	ldr	r3, [pc, #160]	@ (800d1ac <vTaskSwitchContext+0xb8>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d110:	4b27      	ldr	r3, [pc, #156]	@ (800d1b0 <vTaskSwitchContext+0xbc>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e011      	b.n	800d13c <vTaskSwitchContext+0x48>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10b      	bne.n	800d136 <vTaskSwitchContext+0x42>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	607b      	str	r3, [r7, #4]
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	e7fd      	b.n	800d132 <vTaskSwitchContext+0x3e>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	3b01      	subs	r3, #1
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	491d      	ldr	r1, [pc, #116]	@ (800d1b4 <vTaskSwitchContext+0xc0>)
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4613      	mov	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	440b      	add	r3, r1
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0e3      	beq.n	800d118 <vTaskSwitchContext+0x24>
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a16      	ldr	r2, [pc, #88]	@ (800d1b4 <vTaskSwitchContext+0xc0>)
 800d15c:	4413      	add	r3, r2
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3308      	adds	r3, #8
 800d172:	429a      	cmp	r2, r3
 800d174:	d104      	bne.n	800d180 <vTaskSwitchContext+0x8c>
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	605a      	str	r2, [r3, #4]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	4a0c      	ldr	r2, [pc, #48]	@ (800d1b8 <vTaskSwitchContext+0xc4>)
 800d188:	6013      	str	r3, [r2, #0]
 800d18a:	4a09      	ldr	r2, [pc, #36]	@ (800d1b0 <vTaskSwitchContext+0xbc>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d190:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <vTaskSwitchContext+0xc4>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3354      	adds	r3, #84	@ 0x54
 800d196:	4a09      	ldr	r2, [pc, #36]	@ (800d1bc <vTaskSwitchContext+0xc8>)
 800d198:	6013      	str	r3, [r2, #0]
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	24000f4c 	.word	0x24000f4c
 800d1ac:	24000f38 	.word	0x24000f38
 800d1b0:	24000f2c 	.word	0x24000f2c
 800d1b4:	24000a54 	.word	0x24000a54
 800d1b8:	24000a50 	.word	0x24000a50
 800d1bc:	24000014 	.word	0x24000014

0800d1c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10b      	bne.n	800d1e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1e8:	4b07      	ldr	r3, [pc, #28]	@ (800d208 <vTaskPlaceOnEventList+0x48>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3318      	adds	r3, #24
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7fe fc84 	bl	800bafe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	6838      	ldr	r0, [r7, #0]
 800d1fa:	f000 fbdf 	bl	800d9bc <prvAddCurrentTaskToDelayedList>
}
 800d1fe:	bf00      	nop
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	24000a50 	.word	0x24000a50

0800d20c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	617b      	str	r3, [r7, #20]
}
 800d230:	bf00      	nop
 800d232:	bf00      	nop
 800d234:	e7fd      	b.n	800d232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d236:	4b0a      	ldr	r3, [pc, #40]	@ (800d260 <vTaskPlaceOnEventListRestricted+0x54>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3318      	adds	r3, #24
 800d23c:	4619      	mov	r1, r3
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f7fe fc39 	bl	800bab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295
 800d24e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d250:	6879      	ldr	r1, [r7, #4]
 800d252:	68b8      	ldr	r0, [r7, #8]
 800d254:	f000 fbb2 	bl	800d9bc <prvAddCurrentTaskToDelayedList>
	}
 800d258:	bf00      	nop
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	24000a50 	.word	0x24000a50

0800d264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10b      	bne.n	800d292 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	60fb      	str	r3, [r7, #12]
}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	e7fd      	b.n	800d28e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	3318      	adds	r3, #24
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe fc6a 	bl	800bb70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d29c:	4b1e      	ldr	r3, [pc, #120]	@ (800d318 <xTaskRemoveFromEventList+0xb4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d11f      	bne.n	800d2e4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fe fc61 	bl	800bb70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2b2:	4b1a      	ldr	r3, [pc, #104]	@ (800d31c <xTaskRemoveFromEventList+0xb8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d903      	bls.n	800d2c2 <xTaskRemoveFromEventList+0x5e>
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2be:	4a17      	ldr	r2, [pc, #92]	@ (800d31c <xTaskRemoveFromEventList+0xb8>)
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4a14      	ldr	r2, [pc, #80]	@ (800d320 <xTaskRemoveFromEventList+0xbc>)
 800d2d0:	441a      	add	r2, r3
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	4610      	mov	r0, r2
 800d2da:	f7fe fbec 	bl	800bab6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d2de:	f000 f9bf 	bl	800d660 <prvResetNextTaskUnblockTime>
 800d2e2:	e005      	b.n	800d2f0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	3318      	adds	r3, #24
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	480e      	ldr	r0, [pc, #56]	@ (800d324 <xTaskRemoveFromEventList+0xc0>)
 800d2ec:	f7fe fbe3 	bl	800bab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d328 <xTaskRemoveFromEventList+0xc4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d905      	bls.n	800d30a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2fe:	2301      	movs	r3, #1
 800d300:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d302:	4b0a      	ldr	r3, [pc, #40]	@ (800d32c <xTaskRemoveFromEventList+0xc8>)
 800d304:	2201      	movs	r2, #1
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	e001      	b.n	800d30e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800d30a:	2300      	movs	r3, #0
 800d30c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d30e:	697b      	ldr	r3, [r7, #20]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	24000f4c 	.word	0x24000f4c
 800d31c:	24000f2c 	.word	0x24000f2c
 800d320:	24000a54 	.word	0x24000a54
 800d324:	24000ee4 	.word	0x24000ee4
 800d328:	24000a50 	.word	0x24000a50
 800d32c:	24000f38 	.word	0x24000f38

0800d330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d338:	4b06      	ldr	r3, [pc, #24]	@ (800d354 <vTaskInternalSetTimeOutState+0x24>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d340:	4b05      	ldr	r3, [pc, #20]	@ (800d358 <vTaskInternalSetTimeOutState+0x28>)
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	605a      	str	r2, [r3, #4]
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	24000f3c 	.word	0x24000f3c
 800d358:	24000f28 	.word	0x24000f28

0800d35c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b088      	sub	sp, #32
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10b      	bne.n	800d384 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	613b      	str	r3, [r7, #16]
}
 800d37e:	bf00      	nop
 800d380:	bf00      	nop
 800d382:	e7fd      	b.n	800d380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	60fb      	str	r3, [r7, #12]
}
 800d39c:	bf00      	nop
 800d39e:	bf00      	nop
 800d3a0:	e7fd      	b.n	800d39e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d3a2:	f000 ffe9 	bl	800e378 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d41c <xTaskCheckForTimeOut+0xc0>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	69ba      	ldr	r2, [r7, #24]
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	d102      	bne.n	800d3c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e023      	b.n	800d40e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	4b15      	ldr	r3, [pc, #84]	@ (800d420 <xTaskCheckForTimeOut+0xc4>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d007      	beq.n	800d3e2 <xTaskCheckForTimeOut+0x86>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d302      	bcc.n	800d3e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	61fb      	str	r3, [r7, #28]
 800d3e0:	e015      	b.n	800d40e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d20b      	bcs.n	800d404 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	1ad2      	subs	r2, r2, r3
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff ff99 	bl	800d330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	61fb      	str	r3, [r7, #28]
 800d402:	e004      	b.n	800d40e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	2200      	movs	r2, #0
 800d408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d40a:	2301      	movs	r3, #1
 800d40c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d40e:	f000 ffe5 	bl	800e3dc <vPortExitCritical>

	return xReturn;
 800d412:	69fb      	ldr	r3, [r7, #28]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3720      	adds	r7, #32
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	24000f28 	.word	0x24000f28
 800d420:	24000f3c 	.word	0x24000f3c

0800d424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d424:	b480      	push	{r7}
 800d426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d428:	4b03      	ldr	r3, [pc, #12]	@ (800d438 <vTaskMissedYield+0x14>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
}
 800d42e:	bf00      	nop
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	24000f38 	.word	0x24000f38

0800d43c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d444:	f000 f8a8 	bl	800d598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d448:	4b18      	ldr	r3, [pc, #96]	@ (800d4ac <prvIdleTask+0x70>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d907      	bls.n	800d460 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d450:	4b17      	ldr	r3, [pc, #92]	@ (800d4b0 <prvIdleTask+0x74>)
 800d452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d460:	f7ff fc80 	bl	800cd64 <prvGetExpectedIdleTime>
 800d464:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d9eb      	bls.n	800d444 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d46c:	f7ff fc6c 	bl	800cd48 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d470:	4b10      	ldr	r3, [pc, #64]	@ (800d4b4 <prvIdleTask+0x78>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	4b10      	ldr	r3, [pc, #64]	@ (800d4b8 <prvIdleTask+0x7c>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d20b      	bcs.n	800d494 <prvIdleTask+0x58>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60bb      	str	r3, [r7, #8]
}
 800d48e:	bf00      	nop
 800d490:	bf00      	nop
 800d492:	e7fd      	b.n	800d490 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d494:	f7ff fc66 	bl	800cd64 <prvGetExpectedIdleTime>
 800d498:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d902      	bls.n	800d4a6 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f001 f81b 	bl	800e4dc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d4a6:	f7ff fc95 	bl	800cdd4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d4aa:	e7cb      	b.n	800d444 <prvIdleTask+0x8>
 800d4ac:	24000a54 	.word	0x24000a54
 800d4b0:	e000ed04 	.word	0xe000ed04
 800d4b4:	24000f44 	.word	0x24000f44
 800d4b8:	24000f28 	.word	0x24000f28

0800d4bc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800d4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d508 <eTaskConfirmSleepModeStatus+0x4c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d002      	beq.n	800d4d8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	71fb      	strb	r3, [r7, #7]
 800d4d6:	e010      	b.n	800d4fa <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800d4d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d50c <eTaskConfirmSleepModeStatus+0x50>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	71fb      	strb	r3, [r7, #7]
 800d4e4:	e009      	b.n	800d4fa <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800d4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800d510 <eTaskConfirmSleepModeStatus+0x54>)
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800d514 <eTaskConfirmSleepModeStatus+0x58>)
 800d4ec:	6819      	ldr	r1, [r3, #0]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	1acb      	subs	r3, r1, r3
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d101      	bne.n	800d4fa <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
	}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	24000ee4 	.word	0x24000ee4
 800d50c:	24000f38 	.word	0x24000f38
 800d510:	24000f10 	.word	0x24000f10
 800d514:	24000f24 	.word	0x24000f24

0800d518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d51e:	2300      	movs	r3, #0
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	e00c      	b.n	800d53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4613      	mov	r3, r2
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4413      	add	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4a12      	ldr	r2, [pc, #72]	@ (800d578 <prvInitialiseTaskLists+0x60>)
 800d530:	4413      	add	r3, r2
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe fa92 	bl	800ba5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3301      	adds	r3, #1
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b37      	cmp	r3, #55	@ 0x37
 800d542:	d9ef      	bls.n	800d524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d544:	480d      	ldr	r0, [pc, #52]	@ (800d57c <prvInitialiseTaskLists+0x64>)
 800d546:	f7fe fa89 	bl	800ba5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d54a:	480d      	ldr	r0, [pc, #52]	@ (800d580 <prvInitialiseTaskLists+0x68>)
 800d54c:	f7fe fa86 	bl	800ba5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d550:	480c      	ldr	r0, [pc, #48]	@ (800d584 <prvInitialiseTaskLists+0x6c>)
 800d552:	f7fe fa83 	bl	800ba5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d556:	480c      	ldr	r0, [pc, #48]	@ (800d588 <prvInitialiseTaskLists+0x70>)
 800d558:	f7fe fa80 	bl	800ba5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d55c:	480b      	ldr	r0, [pc, #44]	@ (800d58c <prvInitialiseTaskLists+0x74>)
 800d55e:	f7fe fa7d 	bl	800ba5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d562:	4b0b      	ldr	r3, [pc, #44]	@ (800d590 <prvInitialiseTaskLists+0x78>)
 800d564:	4a05      	ldr	r2, [pc, #20]	@ (800d57c <prvInitialiseTaskLists+0x64>)
 800d566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d568:	4b0a      	ldr	r3, [pc, #40]	@ (800d594 <prvInitialiseTaskLists+0x7c>)
 800d56a:	4a05      	ldr	r2, [pc, #20]	@ (800d580 <prvInitialiseTaskLists+0x68>)
 800d56c:	601a      	str	r2, [r3, #0]
}
 800d56e:	bf00      	nop
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	24000a54 	.word	0x24000a54
 800d57c:	24000eb4 	.word	0x24000eb4
 800d580:	24000ec8 	.word	0x24000ec8
 800d584:	24000ee4 	.word	0x24000ee4
 800d588:	24000ef8 	.word	0x24000ef8
 800d58c:	24000f10 	.word	0x24000f10
 800d590:	24000edc 	.word	0x24000edc
 800d594:	24000ee0 	.word	0x24000ee0

0800d598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d59e:	e019      	b.n	800d5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5a0:	f000 feea 	bl	800e378 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a4:	4b10      	ldr	r3, [pc, #64]	@ (800d5e8 <prvCheckTasksWaitingTermination+0x50>)
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fe fadd 	bl	800bb70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d5ec <prvCheckTasksWaitingTermination+0x54>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800d5ec <prvCheckTasksWaitingTermination+0x54>)
 800d5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d5f0 <prvCheckTasksWaitingTermination+0x58>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f0 <prvCheckTasksWaitingTermination+0x58>)
 800d5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5ca:	f000 ff07 	bl	800e3dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f810 	bl	800d5f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5d4:	4b06      	ldr	r3, [pc, #24]	@ (800d5f0 <prvCheckTasksWaitingTermination+0x58>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e1      	bne.n	800d5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5dc:	bf00      	nop
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	24000ef8 	.word	0x24000ef8
 800d5ec:	24000f24 	.word	0x24000f24
 800d5f0:	24000f0c 	.word	0x24000f0c

0800d5f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	3354      	adds	r3, #84	@ 0x54
 800d600:	4618      	mov	r0, r3
 800d602:	f001 fab5 	bl	800eb70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d108      	bne.n	800d622 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d614:	4618      	mov	r0, r3
 800d616:	f001 f983 	bl	800e920 <vPortFree>
				vPortFree( pxTCB );
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f001 f980 	bl	800e920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d620:	e019      	b.n	800d656 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d103      	bne.n	800d634 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 f977 	bl	800e920 <vPortFree>
	}
 800d632:	e010      	b.n	800d656 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d00b      	beq.n	800d656 <prvDeleteTCB+0x62>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	60fb      	str	r3, [r7, #12]
}
 800d650:	bf00      	nop
 800d652:	bf00      	nop
 800d654:	e7fd      	b.n	800d652 <prvDeleteTCB+0x5e>
	}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d666:	4b0c      	ldr	r3, [pc, #48]	@ (800d698 <prvResetNextTaskUnblockTime+0x38>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d104      	bne.n	800d67a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d670:	4b0a      	ldr	r3, [pc, #40]	@ (800d69c <prvResetNextTaskUnblockTime+0x3c>)
 800d672:	f04f 32ff 	mov.w	r2, #4294967295
 800d676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d678:	e008      	b.n	800d68c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d67a:	4b07      	ldr	r3, [pc, #28]	@ (800d698 <prvResetNextTaskUnblockTime+0x38>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	4a04      	ldr	r2, [pc, #16]	@ (800d69c <prvResetNextTaskUnblockTime+0x3c>)
 800d68a:	6013      	str	r3, [r2, #0]
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	24000edc 	.word	0x24000edc
 800d69c:	24000f44 	.word	0x24000f44

0800d6a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d4 <xTaskGetSchedulerState+0x34>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d102      	bne.n	800d6b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	607b      	str	r3, [r7, #4]
 800d6b2:	e008      	b.n	800d6c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6b4:	4b08      	ldr	r3, [pc, #32]	@ (800d6d8 <xTaskGetSchedulerState+0x38>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d102      	bne.n	800d6c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6bc:	2302      	movs	r3, #2
 800d6be:	607b      	str	r3, [r7, #4]
 800d6c0:	e001      	b.n	800d6c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6c6:	687b      	ldr	r3, [r7, #4]
	}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	24000f30 	.word	0x24000f30
 800d6d8:	24000f4c 	.word	0x24000f4c

0800d6dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d051      	beq.n	800d796 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6f6:	4b2a      	ldr	r3, [pc, #168]	@ (800d7a0 <xTaskPriorityInherit+0xc4>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d241      	bcs.n	800d784 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	2b00      	cmp	r3, #0
 800d706:	db06      	blt.n	800d716 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d708:	4b25      	ldr	r3, [pc, #148]	@ (800d7a0 <xTaskPriorityInherit+0xc4>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d70e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	6959      	ldr	r1, [r3, #20]
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71e:	4613      	mov	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4a1f      	ldr	r2, [pc, #124]	@ (800d7a4 <xTaskPriorityInherit+0xc8>)
 800d728:	4413      	add	r3, r2
 800d72a:	4299      	cmp	r1, r3
 800d72c:	d122      	bne.n	800d774 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	3304      	adds	r3, #4
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe fa1c 	bl	800bb70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d738:	4b19      	ldr	r3, [pc, #100]	@ (800d7a0 <xTaskPriorityInherit+0xc4>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d746:	4b18      	ldr	r3, [pc, #96]	@ (800d7a8 <xTaskPriorityInherit+0xcc>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d903      	bls.n	800d756 <xTaskPriorityInherit+0x7a>
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d752:	4a15      	ldr	r2, [pc, #84]	@ (800d7a8 <xTaskPriorityInherit+0xcc>)
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d75a:	4613      	mov	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4a10      	ldr	r2, [pc, #64]	@ (800d7a4 <xTaskPriorityInherit+0xc8>)
 800d764:	441a      	add	r2, r3
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	3304      	adds	r3, #4
 800d76a:	4619      	mov	r1, r3
 800d76c:	4610      	mov	r0, r2
 800d76e:	f7fe f9a2 	bl	800bab6 <vListInsertEnd>
 800d772:	e004      	b.n	800d77e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d774:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a0 <xTaskPriorityInherit+0xc4>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d77e:	2301      	movs	r3, #1
 800d780:	60fb      	str	r3, [r7, #12]
 800d782:	e008      	b.n	800d796 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d788:	4b05      	ldr	r3, [pc, #20]	@ (800d7a0 <xTaskPriorityInherit+0xc4>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d78e:	429a      	cmp	r2, r3
 800d790:	d201      	bcs.n	800d796 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d792:	2301      	movs	r3, #1
 800d794:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d796:	68fb      	ldr	r3, [r7, #12]
	}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	24000a50 	.word	0x24000a50
 800d7a4:	24000a54 	.word	0x24000a54
 800d7a8:	24000f2c 	.word	0x24000f2c

0800d7ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d058      	beq.n	800d874 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d7c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d880 <xTaskPriorityDisinherit+0xd4>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d00b      	beq.n	800d7e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	60fb      	str	r3, [r7, #12]
}
 800d7de:	bf00      	nop
 800d7e0:	bf00      	nop
 800d7e2:	e7fd      	b.n	800d7e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10b      	bne.n	800d804 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	60bb      	str	r3, [r7, #8]
}
 800d7fe:	bf00      	nop
 800d800:	bf00      	nop
 800d802:	e7fd      	b.n	800d800 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d808:	1e5a      	subs	r2, r3, #1
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d816:	429a      	cmp	r2, r3
 800d818:	d02c      	beq.n	800d874 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d128      	bne.n	800d874 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	3304      	adds	r3, #4
 800d826:	4618      	mov	r0, r3
 800d828:	f7fe f9a2 	bl	800bb70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d844:	4b0f      	ldr	r3, [pc, #60]	@ (800d884 <xTaskPriorityDisinherit+0xd8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d903      	bls.n	800d854 <xTaskPriorityDisinherit+0xa8>
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d850:	4a0c      	ldr	r2, [pc, #48]	@ (800d884 <xTaskPriorityDisinherit+0xd8>)
 800d852:	6013      	str	r3, [r2, #0]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d858:	4613      	mov	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4a09      	ldr	r2, [pc, #36]	@ (800d888 <xTaskPriorityDisinherit+0xdc>)
 800d862:	441a      	add	r2, r3
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	3304      	adds	r3, #4
 800d868:	4619      	mov	r1, r3
 800d86a:	4610      	mov	r0, r2
 800d86c:	f7fe f923 	bl	800bab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d870:	2301      	movs	r3, #1
 800d872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d874:	697b      	ldr	r3, [r7, #20]
	}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	24000a50 	.word	0x24000a50
 800d884:	24000f2c 	.word	0x24000f2c
 800d888:	24000a54 	.word	0x24000a54

0800d88c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d89a:	2301      	movs	r3, #1
 800d89c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d06c      	beq.n	800d97e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10b      	bne.n	800d8c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60fb      	str	r3, [r7, #12]
}
 800d8be:	bf00      	nop
 800d8c0:	bf00      	nop
 800d8c2:	e7fd      	b.n	800d8c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8c8:	683a      	ldr	r2, [r7, #0]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d902      	bls.n	800d8d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	61fb      	str	r3, [r7, #28]
 800d8d2:	e002      	b.n	800d8da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d04c      	beq.n	800d97e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d147      	bne.n	800d97e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d8ee:	4b26      	ldr	r3, [pc, #152]	@ (800d988 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d10b      	bne.n	800d910 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	60bb      	str	r3, [r7, #8]
}
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
 800d90e:	e7fd      	b.n	800d90c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d914:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	69fa      	ldr	r2, [r7, #28]
 800d91a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	db04      	blt.n	800d92e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	6959      	ldr	r1, [r3, #20]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	4613      	mov	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4a13      	ldr	r2, [pc, #76]	@ (800d98c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d93e:	4413      	add	r3, r2
 800d940:	4299      	cmp	r1, r3
 800d942:	d11c      	bne.n	800d97e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	3304      	adds	r3, #4
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe f911 	bl	800bb70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d952:	4b0f      	ldr	r3, [pc, #60]	@ (800d990 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	429a      	cmp	r2, r3
 800d958:	d903      	bls.n	800d962 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d95e:	4a0c      	ldr	r2, [pc, #48]	@ (800d990 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d960:	6013      	str	r3, [r2, #0]
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d966:	4613      	mov	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4413      	add	r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4a07      	ldr	r2, [pc, #28]	@ (800d98c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d970:	441a      	add	r2, r3
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	3304      	adds	r3, #4
 800d976:	4619      	mov	r1, r3
 800d978:	4610      	mov	r0, r2
 800d97a:	f7fe f89c 	bl	800bab6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d97e:	bf00      	nop
 800d980:	3720      	adds	r7, #32
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	24000a50 	.word	0x24000a50
 800d98c:	24000a54 	.word	0x24000a54
 800d990:	24000f2c 	.word	0x24000f2c

0800d994 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d994:	b480      	push	{r7}
 800d996:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d998:	4b07      	ldr	r3, [pc, #28]	@ (800d9b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d004      	beq.n	800d9aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d9a0:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d9a6:	3201      	adds	r2, #1
 800d9a8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d9aa:	4b03      	ldr	r3, [pc, #12]	@ (800d9b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
	}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	24000a50 	.word	0x24000a50

0800d9bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9c6:	4b21      	ldr	r3, [pc, #132]	@ (800da4c <prvAddCurrentTaskToDelayedList+0x90>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9cc:	4b20      	ldr	r3, [pc, #128]	@ (800da50 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe f8cc 	bl	800bb70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9de:	d10a      	bne.n	800d9f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d007      	beq.n	800d9f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9e6:	4b1a      	ldr	r3, [pc, #104]	@ (800da50 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	4819      	ldr	r0, [pc, #100]	@ (800da54 <prvAddCurrentTaskToDelayedList+0x98>)
 800d9f0:	f7fe f861 	bl	800bab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9f4:	e026      	b.n	800da44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9fe:	4b14      	ldr	r3, [pc, #80]	@ (800da50 <prvAddCurrentTaskToDelayedList+0x94>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d209      	bcs.n	800da22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da0e:	4b12      	ldr	r3, [pc, #72]	@ (800da58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	4b0f      	ldr	r3, [pc, #60]	@ (800da50 <prvAddCurrentTaskToDelayedList+0x94>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3304      	adds	r3, #4
 800da18:	4619      	mov	r1, r3
 800da1a:	4610      	mov	r0, r2
 800da1c:	f7fe f86f 	bl	800bafe <vListInsert>
}
 800da20:	e010      	b.n	800da44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da22:	4b0e      	ldr	r3, [pc, #56]	@ (800da5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	4b0a      	ldr	r3, [pc, #40]	@ (800da50 <prvAddCurrentTaskToDelayedList+0x94>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3304      	adds	r3, #4
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fe f865 	bl	800bafe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d202      	bcs.n	800da44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800da3e:	4a08      	ldr	r2, [pc, #32]	@ (800da60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	6013      	str	r3, [r2, #0]
}
 800da44:	bf00      	nop
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	24000f28 	.word	0x24000f28
 800da50:	24000a50 	.word	0x24000a50
 800da54:	24000f10 	.word	0x24000f10
 800da58:	24000ee0 	.word	0x24000ee0
 800da5c:	24000edc 	.word	0x24000edc
 800da60:	24000f44 	.word	0x24000f44

0800da64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08a      	sub	sp, #40	@ 0x28
 800da68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da6e:	f000 fb13 	bl	800e098 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da72:	4b1d      	ldr	r3, [pc, #116]	@ (800dae8 <xTimerCreateTimerTask+0x84>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d021      	beq.n	800dabe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da82:	1d3a      	adds	r2, r7, #4
 800da84:	f107 0108 	add.w	r1, r7, #8
 800da88:	f107 030c 	add.w	r3, r7, #12
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fd ffcb 	bl	800ba28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da92:	6879      	ldr	r1, [r7, #4]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	9202      	str	r2, [sp, #8]
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	2302      	movs	r3, #2
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	2300      	movs	r3, #0
 800daa2:	460a      	mov	r2, r1
 800daa4:	4911      	ldr	r1, [pc, #68]	@ (800daec <xTimerCreateTimerTask+0x88>)
 800daa6:	4812      	ldr	r0, [pc, #72]	@ (800daf0 <xTimerCreateTimerTask+0x8c>)
 800daa8:	f7fe feea 	bl	800c880 <xTaskCreateStatic>
 800daac:	4603      	mov	r3, r0
 800daae:	4a11      	ldr	r2, [pc, #68]	@ (800daf4 <xTimerCreateTimerTask+0x90>)
 800dab0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dab2:	4b10      	ldr	r3, [pc, #64]	@ (800daf4 <xTimerCreateTimerTask+0x90>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800daba:	2301      	movs	r3, #1
 800dabc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10b      	bne.n	800dadc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	613b      	str	r3, [r7, #16]
}
 800dad6:	bf00      	nop
 800dad8:	bf00      	nop
 800dada:	e7fd      	b.n	800dad8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dadc:	697b      	ldr	r3, [r7, #20]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	24000f80 	.word	0x24000f80
 800daec:	0800ed94 	.word	0x0800ed94
 800daf0:	0800dc31 	.word	0x0800dc31
 800daf4:	24000f84 	.word	0x24000f84

0800daf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08a      	sub	sp, #40	@ 0x28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800db06:	2300      	movs	r3, #0
 800db08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10b      	bne.n	800db28 <xTimerGenericCommand+0x30>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	623b      	str	r3, [r7, #32]
}
 800db22:	bf00      	nop
 800db24:	bf00      	nop
 800db26:	e7fd      	b.n	800db24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db28:	4b19      	ldr	r3, [pc, #100]	@ (800db90 <xTimerGenericCommand+0x98>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d02a      	beq.n	800db86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2b05      	cmp	r3, #5
 800db40:	dc18      	bgt.n	800db74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db42:	f7ff fdad 	bl	800d6a0 <xTaskGetSchedulerState>
 800db46:	4603      	mov	r3, r0
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d109      	bne.n	800db60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db4c:	4b10      	ldr	r3, [pc, #64]	@ (800db90 <xTimerGenericCommand+0x98>)
 800db4e:	6818      	ldr	r0, [r3, #0]
 800db50:	f107 0110 	add.w	r1, r7, #16
 800db54:	2300      	movs	r3, #0
 800db56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db58:	f7fe f97a 	bl	800be50 <xQueueGenericSend>
 800db5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800db5e:	e012      	b.n	800db86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db60:	4b0b      	ldr	r3, [pc, #44]	@ (800db90 <xTimerGenericCommand+0x98>)
 800db62:	6818      	ldr	r0, [r3, #0]
 800db64:	f107 0110 	add.w	r1, r7, #16
 800db68:	2300      	movs	r3, #0
 800db6a:	2200      	movs	r2, #0
 800db6c:	f7fe f970 	bl	800be50 <xQueueGenericSend>
 800db70:	6278      	str	r0, [r7, #36]	@ 0x24
 800db72:	e008      	b.n	800db86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db74:	4b06      	ldr	r3, [pc, #24]	@ (800db90 <xTimerGenericCommand+0x98>)
 800db76:	6818      	ldr	r0, [r3, #0]
 800db78:	f107 0110 	add.w	r1, r7, #16
 800db7c:	2300      	movs	r3, #0
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	f7fe fa68 	bl	800c054 <xQueueGenericSendFromISR>
 800db84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3728      	adds	r7, #40	@ 0x28
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	24000f80 	.word	0x24000f80

0800db94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af02      	add	r7, sp, #8
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9e:	4b23      	ldr	r3, [pc, #140]	@ (800dc2c <prvProcessExpiredTimer+0x98>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd ffdf 	bl	800bb70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbb8:	f003 0304 	and.w	r3, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d023      	beq.n	800dc08 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	699a      	ldr	r2, [r3, #24]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	18d1      	adds	r1, r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	6978      	ldr	r0, [r7, #20]
 800dbce:	f000 f8d5 	bl	800dd7c <prvInsertTimerInActiveList>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d020      	beq.n	800dc1a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbd8:	2300      	movs	r3, #0
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	6978      	ldr	r0, [r7, #20]
 800dbe4:	f7ff ff88 	bl	800daf8 <xTimerGenericCommand>
 800dbe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d114      	bne.n	800dc1a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	60fb      	str	r3, [r7, #12]
}
 800dc02:	bf00      	nop
 800dc04:	bf00      	nop
 800dc06:	e7fd      	b.n	800dc04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc0e:	f023 0301 	bic.w	r3, r3, #1
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	6a1b      	ldr	r3, [r3, #32]
 800dc1e:	6978      	ldr	r0, [r7, #20]
 800dc20:	4798      	blx	r3
}
 800dc22:	bf00      	nop
 800dc24:	3718      	adds	r7, #24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	24000f78 	.word	0x24000f78

0800dc30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc38:	f107 0308 	add.w	r3, r7, #8
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 f859 	bl	800dcf4 <prvGetNextExpireTime>
 800dc42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	4619      	mov	r1, r3
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f000 f805 	bl	800dc58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc4e:	f000 f8d7 	bl	800de00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc52:	bf00      	nop
 800dc54:	e7f0      	b.n	800dc38 <prvTimerTask+0x8>
	...

0800dc58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc62:	f7ff f871 	bl	800cd48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc66:	f107 0308 	add.w	r3, r7, #8
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 f866 	bl	800dd3c <prvSampleTimeNow>
 800dc70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d130      	bne.n	800dcda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10a      	bne.n	800dc94 <prvProcessTimerOrBlockTask+0x3c>
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d806      	bhi.n	800dc94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc86:	f7ff f8a5 	bl	800cdd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc8a:	68f9      	ldr	r1, [r7, #12]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff ff81 	bl	800db94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc92:	e024      	b.n	800dcde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d008      	beq.n	800dcac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc9a:	4b13      	ldr	r3, [pc, #76]	@ (800dce8 <prvProcessTimerOrBlockTask+0x90>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <prvProcessTimerOrBlockTask+0x50>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <prvProcessTimerOrBlockTask+0x52>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dcac:	4b0f      	ldr	r3, [pc, #60]	@ (800dcec <prvProcessTimerOrBlockTask+0x94>)
 800dcae:	6818      	ldr	r0, [r3, #0]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	f7fe fdad 	bl	800c818 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dcbe:	f7ff f889 	bl	800cdd4 <xTaskResumeAll>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10a      	bne.n	800dcde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dcc8:	4b09      	ldr	r3, [pc, #36]	@ (800dcf0 <prvProcessTimerOrBlockTask+0x98>)
 800dcca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcce:	601a      	str	r2, [r3, #0]
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	f3bf 8f6f 	isb	sy
}
 800dcd8:	e001      	b.n	800dcde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dcda:	f7ff f87b 	bl	800cdd4 <xTaskResumeAll>
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	24000f7c 	.word	0x24000f7c
 800dcec:	24000f80 	.word	0x24000f80
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dcfc:	4b0e      	ldr	r3, [pc, #56]	@ (800dd38 <prvGetNextExpireTime+0x44>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <prvGetNextExpireTime+0x16>
 800dd06:	2201      	movs	r2, #1
 800dd08:	e000      	b.n	800dd0c <prvGetNextExpireTime+0x18>
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d105      	bne.n	800dd24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd18:	4b07      	ldr	r3, [pc, #28]	@ (800dd38 <prvGetNextExpireTime+0x44>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	e001      	b.n	800dd28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd24:	2300      	movs	r3, #0
 800dd26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd28:	68fb      	ldr	r3, [r7, #12]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	24000f78 	.word	0x24000f78

0800dd3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd44:	f7ff f8e4 	bl	800cf10 <xTaskGetTickCount>
 800dd48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd78 <prvSampleTimeNow+0x3c>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d205      	bcs.n	800dd60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd54:	f000 f93a 	bl	800dfcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	601a      	str	r2, [r3, #0]
 800dd5e:	e002      	b.n	800dd66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd66:	4a04      	ldr	r2, [pc, #16]	@ (800dd78 <prvSampleTimeNow+0x3c>)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	24000f88 	.word	0x24000f88

0800dd7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
 800dd88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d812      	bhi.n	800ddc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	1ad2      	subs	r2, r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d302      	bcc.n	800ddb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	e01b      	b.n	800ddee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ddb6:	4b10      	ldr	r3, [pc, #64]	@ (800ddf8 <prvInsertTimerInActiveList+0x7c>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3304      	adds	r3, #4
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	f7fd fe9c 	bl	800bafe <vListInsert>
 800ddc6:	e012      	b.n	800ddee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d206      	bcs.n	800ddde <prvInsertTimerInActiveList+0x62>
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d302      	bcc.n	800ddde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	e007      	b.n	800ddee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddde:	4b07      	ldr	r3, [pc, #28]	@ (800ddfc <prvInsertTimerInActiveList+0x80>)
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3304      	adds	r3, #4
 800dde6:	4619      	mov	r1, r3
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7fd fe88 	bl	800bafe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ddee:	697b      	ldr	r3, [r7, #20]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	24000f7c 	.word	0x24000f7c
 800ddfc:	24000f78 	.word	0x24000f78

0800de00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b08e      	sub	sp, #56	@ 0x38
 800de04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de06:	e0ce      	b.n	800dfa6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da19      	bge.n	800de42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800de0e:	1d3b      	adds	r3, r7, #4
 800de10:	3304      	adds	r3, #4
 800de12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800de14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10b      	bne.n	800de32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800de1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	61fb      	str	r3, [r7, #28]
}
 800de2c:	bf00      	nop
 800de2e:	bf00      	nop
 800de30:	e7fd      	b.n	800de2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de38:	6850      	ldr	r0, [r2, #4]
 800de3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de3c:	6892      	ldr	r2, [r2, #8]
 800de3e:	4611      	mov	r1, r2
 800de40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f2c0 80ae 	blt.w	800dfa6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de50:	695b      	ldr	r3, [r3, #20]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d004      	beq.n	800de60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de58:	3304      	adds	r3, #4
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fd fe88 	bl	800bb70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de60:	463b      	mov	r3, r7
 800de62:	4618      	mov	r0, r3
 800de64:	f7ff ff6a 	bl	800dd3c <prvSampleTimeNow>
 800de68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2b09      	cmp	r3, #9
 800de6e:	f200 8097 	bhi.w	800dfa0 <prvProcessReceivedCommands+0x1a0>
 800de72:	a201      	add	r2, pc, #4	@ (adr r2, 800de78 <prvProcessReceivedCommands+0x78>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800dea1 	.word	0x0800dea1
 800de7c:	0800dea1 	.word	0x0800dea1
 800de80:	0800dea1 	.word	0x0800dea1
 800de84:	0800df17 	.word	0x0800df17
 800de88:	0800df2b 	.word	0x0800df2b
 800de8c:	0800df77 	.word	0x0800df77
 800de90:	0800dea1 	.word	0x0800dea1
 800de94:	0800dea1 	.word	0x0800dea1
 800de98:	0800df17 	.word	0x0800df17
 800de9c:	0800df2b 	.word	0x0800df2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dea6:	f043 0301 	orr.w	r3, r3, #1
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	18d1      	adds	r1, r2, r3
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800debe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec0:	f7ff ff5c 	bl	800dd7c <prvInsertTimerInActiveList>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d06c      	beq.n	800dfa4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ded0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d061      	beq.n	800dfa4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	441a      	add	r2, r3
 800dee8:	2300      	movs	r3, #0
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	2300      	movs	r3, #0
 800deee:	2100      	movs	r1, #0
 800def0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800def2:	f7ff fe01 	bl	800daf8 <xTimerGenericCommand>
 800def6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d152      	bne.n	800dfa4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	61bb      	str	r3, [r7, #24]
}
 800df10:	bf00      	nop
 800df12:	bf00      	nop
 800df14:	e7fd      	b.n	800df12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df1c:	f023 0301 	bic.w	r3, r3, #1
 800df20:	b2da      	uxtb	r2, r3
 800df22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800df28:	e03d      	b.n	800dfa6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df30:	f043 0301 	orr.w	r3, r3, #1
 800df34:	b2da      	uxtb	r2, r3
 800df36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10b      	bne.n	800df62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	617b      	str	r3, [r7, #20]
}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	e7fd      	b.n	800df5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df64:	699a      	ldr	r2, [r3, #24]
 800df66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df68:	18d1      	adds	r1, r2, r3
 800df6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df70:	f7ff ff04 	bl	800dd7c <prvInsertTimerInActiveList>
					break;
 800df74:	e017      	b.n	800dfa6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df7c:	f003 0302 	and.w	r3, r3, #2
 800df80:	2b00      	cmp	r3, #0
 800df82:	d103      	bne.n	800df8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800df84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df86:	f000 fccb 	bl	800e920 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df8a:	e00c      	b.n	800dfa6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df92:	f023 0301 	bic.w	r3, r3, #1
 800df96:	b2da      	uxtb	r2, r3
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800df9e:	e002      	b.n	800dfa6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dfa0:	bf00      	nop
 800dfa2:	e000      	b.n	800dfa6 <prvProcessReceivedCommands+0x1a6>
					break;
 800dfa4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfa6:	4b08      	ldr	r3, [pc, #32]	@ (800dfc8 <prvProcessReceivedCommands+0x1c8>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	1d39      	adds	r1, r7, #4
 800dfac:	2200      	movs	r2, #0
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe f8ee 	bl	800c190 <xQueueReceive>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f47f af26 	bne.w	800de08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dfbc:	bf00      	nop
 800dfbe:	bf00      	nop
 800dfc0:	3730      	adds	r7, #48	@ 0x30
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	24000f80 	.word	0x24000f80

0800dfcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b088      	sub	sp, #32
 800dfd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfd2:	e049      	b.n	800e068 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfd4:	4b2e      	ldr	r3, [pc, #184]	@ (800e090 <prvSwitchTimerLists+0xc4>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfde:	4b2c      	ldr	r3, [pc, #176]	@ (800e090 <prvSwitchTimerLists+0xc4>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	3304      	adds	r3, #4
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fd fdbf 	bl	800bb70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	6a1b      	ldr	r3, [r3, #32]
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e000:	f003 0304 	and.w	r3, r3, #4
 800e004:	2b00      	cmp	r3, #0
 800e006:	d02f      	beq.n	800e068 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	4413      	add	r3, r2
 800e010:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	429a      	cmp	r2, r3
 800e018:	d90e      	bls.n	800e038 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e026:	4b1a      	ldr	r3, [pc, #104]	@ (800e090 <prvSwitchTimerLists+0xc4>)
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f7fd fd64 	bl	800bafe <vListInsert>
 800e036:	e017      	b.n	800e068 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e038:	2300      	movs	r3, #0
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	2300      	movs	r3, #0
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	2100      	movs	r1, #0
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f7ff fd58 	bl	800daf8 <xTimerGenericCommand>
 800e048:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10b      	bne.n	800e068 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	603b      	str	r3, [r7, #0]
}
 800e062:	bf00      	nop
 800e064:	bf00      	nop
 800e066:	e7fd      	b.n	800e064 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e068:	4b09      	ldr	r3, [pc, #36]	@ (800e090 <prvSwitchTimerLists+0xc4>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1b0      	bne.n	800dfd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e072:	4b07      	ldr	r3, [pc, #28]	@ (800e090 <prvSwitchTimerLists+0xc4>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e078:	4b06      	ldr	r3, [pc, #24]	@ (800e094 <prvSwitchTimerLists+0xc8>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a04      	ldr	r2, [pc, #16]	@ (800e090 <prvSwitchTimerLists+0xc4>)
 800e07e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e080:	4a04      	ldr	r2, [pc, #16]	@ (800e094 <prvSwitchTimerLists+0xc8>)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	6013      	str	r3, [r2, #0]
}
 800e086:	bf00      	nop
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	24000f78 	.word	0x24000f78
 800e094:	24000f7c 	.word	0x24000f7c

0800e098 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e09e:	f000 f96b 	bl	800e378 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e0a2:	4b15      	ldr	r3, [pc, #84]	@ (800e0f8 <prvCheckForValidListAndQueue+0x60>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d120      	bne.n	800e0ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e0aa:	4814      	ldr	r0, [pc, #80]	@ (800e0fc <prvCheckForValidListAndQueue+0x64>)
 800e0ac:	f7fd fcd6 	bl	800ba5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e0b0:	4813      	ldr	r0, [pc, #76]	@ (800e100 <prvCheckForValidListAndQueue+0x68>)
 800e0b2:	f7fd fcd3 	bl	800ba5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0b6:	4b13      	ldr	r3, [pc, #76]	@ (800e104 <prvCheckForValidListAndQueue+0x6c>)
 800e0b8:	4a10      	ldr	r2, [pc, #64]	@ (800e0fc <prvCheckForValidListAndQueue+0x64>)
 800e0ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e0bc:	4b12      	ldr	r3, [pc, #72]	@ (800e108 <prvCheckForValidListAndQueue+0x70>)
 800e0be:	4a10      	ldr	r2, [pc, #64]	@ (800e100 <prvCheckForValidListAndQueue+0x68>)
 800e0c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	4b11      	ldr	r3, [pc, #68]	@ (800e10c <prvCheckForValidListAndQueue+0x74>)
 800e0c8:	4a11      	ldr	r2, [pc, #68]	@ (800e110 <prvCheckForValidListAndQueue+0x78>)
 800e0ca:	2110      	movs	r1, #16
 800e0cc:	200a      	movs	r0, #10
 800e0ce:	f7fd fde3 	bl	800bc98 <xQueueGenericCreateStatic>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	4a08      	ldr	r2, [pc, #32]	@ (800e0f8 <prvCheckForValidListAndQueue+0x60>)
 800e0d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e0d8:	4b07      	ldr	r3, [pc, #28]	@ (800e0f8 <prvCheckForValidListAndQueue+0x60>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d005      	beq.n	800e0ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0e0:	4b05      	ldr	r3, [pc, #20]	@ (800e0f8 <prvCheckForValidListAndQueue+0x60>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	490b      	ldr	r1, [pc, #44]	@ (800e114 <prvCheckForValidListAndQueue+0x7c>)
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fe fb6c 	bl	800c7c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0ec:	f000 f976 	bl	800e3dc <vPortExitCritical>
}
 800e0f0:	bf00      	nop
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	24000f80 	.word	0x24000f80
 800e0fc:	24000f50 	.word	0x24000f50
 800e100:	24000f64 	.word	0x24000f64
 800e104:	24000f78 	.word	0x24000f78
 800e108:	24000f7c 	.word	0x24000f7c
 800e10c:	2400102c 	.word	0x2400102c
 800e110:	24000f8c 	.word	0x24000f8c
 800e114:	0800ed9c 	.word	0x0800ed9c

0800e118 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3b04      	subs	r3, #4
 800e128:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	3b04      	subs	r3, #4
 800e136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f023 0201 	bic.w	r2, r3, #1
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3b04      	subs	r3, #4
 800e146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e148:	4a0c      	ldr	r2, [pc, #48]	@ (800e17c <pxPortInitialiseStack+0x64>)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	3b14      	subs	r3, #20
 800e152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	3b04      	subs	r3, #4
 800e15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f06f 0202 	mvn.w	r2, #2
 800e166:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3b20      	subs	r3, #32
 800e16c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e16e:	68fb      	ldr	r3, [r7, #12]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	0800e181 	.word	0x0800e181

0800e180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e18a:	4b13      	ldr	r3, [pc, #76]	@ (800e1d8 <prvTaskExitError+0x58>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e192:	d00b      	beq.n	800e1ac <prvTaskExitError+0x2c>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	60fb      	str	r3, [r7, #12]
}
 800e1a6:	bf00      	nop
 800e1a8:	bf00      	nop
 800e1aa:	e7fd      	b.n	800e1a8 <prvTaskExitError+0x28>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	60bb      	str	r3, [r7, #8]
}
 800e1be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1c0:	bf00      	nop
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d0fc      	beq.n	800e1c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1c8:	bf00      	nop
 800e1ca:	bf00      	nop
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	24000010 	.word	0x24000010
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1e0:	4b07      	ldr	r3, [pc, #28]	@ (800e200 <pxCurrentTCBConst2>)
 800e1e2:	6819      	ldr	r1, [r3, #0]
 800e1e4:	6808      	ldr	r0, [r1, #0]
 800e1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ea:	f380 8809 	msr	PSP, r0
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f04f 0000 	mov.w	r0, #0
 800e1f6:	f380 8811 	msr	BASEPRI, r0
 800e1fa:	4770      	bx	lr
 800e1fc:	f3af 8000 	nop.w

0800e200 <pxCurrentTCBConst2>:
 800e200:	24000a50 	.word	0x24000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop

0800e208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e208:	4808      	ldr	r0, [pc, #32]	@ (800e22c <prvPortStartFirstTask+0x24>)
 800e20a:	6800      	ldr	r0, [r0, #0]
 800e20c:	6800      	ldr	r0, [r0, #0]
 800e20e:	f380 8808 	msr	MSP, r0
 800e212:	f04f 0000 	mov.w	r0, #0
 800e216:	f380 8814 	msr	CONTROL, r0
 800e21a:	b662      	cpsie	i
 800e21c:	b661      	cpsie	f
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	df00      	svc	0
 800e228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e22a:	bf00      	nop
 800e22c:	e000ed08 	.word	0xe000ed08

0800e230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e236:	4b47      	ldr	r3, [pc, #284]	@ (800e354 <xPortStartScheduler+0x124>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a47      	ldr	r2, [pc, #284]	@ (800e358 <xPortStartScheduler+0x128>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d10b      	bne.n	800e258 <xPortStartScheduler+0x28>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	613b      	str	r3, [r7, #16]
}
 800e252:	bf00      	nop
 800e254:	bf00      	nop
 800e256:	e7fd      	b.n	800e254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e258:	4b3e      	ldr	r3, [pc, #248]	@ (800e354 <xPortStartScheduler+0x124>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a3f      	ldr	r2, [pc, #252]	@ (800e35c <xPortStartScheduler+0x12c>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d10b      	bne.n	800e27a <xPortStartScheduler+0x4a>
	__asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	60fb      	str	r3, [r7, #12]
}
 800e274:	bf00      	nop
 800e276:	bf00      	nop
 800e278:	e7fd      	b.n	800e276 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e27a:	4b39      	ldr	r3, [pc, #228]	@ (800e360 <xPortStartScheduler+0x130>)
 800e27c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	b2db      	uxtb	r3, r3
 800e284:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	22ff      	movs	r2, #255	@ 0xff
 800e28a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	b2db      	uxtb	r3, r3
 800e292:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e294:	78fb      	ldrb	r3, [r7, #3]
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	4b31      	ldr	r3, [pc, #196]	@ (800e364 <xPortStartScheduler+0x134>)
 800e2a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2a2:	4b31      	ldr	r3, [pc, #196]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2a4:	2207      	movs	r2, #7
 800e2a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2a8:	e009      	b.n	800e2be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e2aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2b4:	78fb      	ldrb	r3, [r7, #3]
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2be:	78fb      	ldrb	r3, [r7, #3]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2c6:	2b80      	cmp	r3, #128	@ 0x80
 800e2c8:	d0ef      	beq.n	800e2aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2ca:	4b27      	ldr	r3, [pc, #156]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f1c3 0307 	rsb	r3, r3, #7
 800e2d2:	2b04      	cmp	r3, #4
 800e2d4:	d00b      	beq.n	800e2ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60bb      	str	r3, [r7, #8]
}
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	e7fd      	b.n	800e2ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	021b      	lsls	r3, r3, #8
 800e2f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e368 <xPortStartScheduler+0x138>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e300:	4a19      	ldr	r2, [pc, #100]	@ (800e368 <xPortStartScheduler+0x138>)
 800e302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	b2da      	uxtb	r2, r3
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e30c:	4b17      	ldr	r3, [pc, #92]	@ (800e36c <xPortStartScheduler+0x13c>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a16      	ldr	r2, [pc, #88]	@ (800e36c <xPortStartScheduler+0x13c>)
 800e312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e318:	4b14      	ldr	r3, [pc, #80]	@ (800e36c <xPortStartScheduler+0x13c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a13      	ldr	r2, [pc, #76]	@ (800e36c <xPortStartScheduler+0x13c>)
 800e31e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e324:	f000 f9a6 	bl	800e674 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e328:	4b11      	ldr	r3, [pc, #68]	@ (800e370 <xPortStartScheduler+0x140>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e32e:	f000 f9dd 	bl	800e6ec <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e332:	4b10      	ldr	r3, [pc, #64]	@ (800e374 <xPortStartScheduler+0x144>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a0f      	ldr	r2, [pc, #60]	@ (800e374 <xPortStartScheduler+0x144>)
 800e338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e33c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e33e:	f7ff ff63 	bl	800e208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e342:	f7fe fed7 	bl	800d0f4 <vTaskSwitchContext>
	prvTaskExitError();
 800e346:	f7ff ff1b 	bl	800e180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3718      	adds	r7, #24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	e000ed00 	.word	0xe000ed00
 800e358:	410fc271 	.word	0x410fc271
 800e35c:	410fc270 	.word	0x410fc270
 800e360:	e000e400 	.word	0xe000e400
 800e364:	24001088 	.word	0x24001088
 800e368:	2400108c 	.word	0x2400108c
 800e36c:	e000ed20 	.word	0xe000ed20
 800e370:	24000010 	.word	0x24000010
 800e374:	e000ef34 	.word	0xe000ef34

0800e378 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	607b      	str	r3, [r7, #4]
}
 800e390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e392:	4b10      	ldr	r3, [pc, #64]	@ (800e3d4 <vPortEnterCritical+0x5c>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3301      	adds	r3, #1
 800e398:	4a0e      	ldr	r2, [pc, #56]	@ (800e3d4 <vPortEnterCritical+0x5c>)
 800e39a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e39c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d4 <vPortEnterCritical+0x5c>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d110      	bne.n	800e3c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e3d8 <vPortEnterCritical+0x60>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00b      	beq.n	800e3c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	603b      	str	r3, [r7, #0]
}
 800e3c0:	bf00      	nop
 800e3c2:	bf00      	nop
 800e3c4:	e7fd      	b.n	800e3c2 <vPortEnterCritical+0x4a>
	}
}
 800e3c6:	bf00      	nop
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	24000010 	.word	0x24000010
 800e3d8:	e000ed04 	.word	0xe000ed04

0800e3dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3e2:	4b12      	ldr	r3, [pc, #72]	@ (800e42c <vPortExitCritical+0x50>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d10b      	bne.n	800e402 <vPortExitCritical+0x26>
	__asm volatile
 800e3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	607b      	str	r3, [r7, #4]
}
 800e3fc:	bf00      	nop
 800e3fe:	bf00      	nop
 800e400:	e7fd      	b.n	800e3fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e402:	4b0a      	ldr	r3, [pc, #40]	@ (800e42c <vPortExitCritical+0x50>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3b01      	subs	r3, #1
 800e408:	4a08      	ldr	r2, [pc, #32]	@ (800e42c <vPortExitCritical+0x50>)
 800e40a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e40c:	4b07      	ldr	r3, [pc, #28]	@ (800e42c <vPortExitCritical+0x50>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d105      	bne.n	800e420 <vPortExitCritical+0x44>
 800e414:	2300      	movs	r3, #0
 800e416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f383 8811 	msr	BASEPRI, r3
}
 800e41e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	24000010 	.word	0x24000010

0800e430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e430:	f3ef 8009 	mrs	r0, PSP
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	4b15      	ldr	r3, [pc, #84]	@ (800e490 <pxCurrentTCBConst>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	f01e 0f10 	tst.w	lr, #16
 800e440:	bf08      	it	eq
 800e442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44a:	6010      	str	r0, [r2, #0]
 800e44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e454:	f380 8811 	msr	BASEPRI, r0
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	f3bf 8f6f 	isb	sy
 800e460:	f7fe fe48 	bl	800d0f4 <vTaskSwitchContext>
 800e464:	f04f 0000 	mov.w	r0, #0
 800e468:	f380 8811 	msr	BASEPRI, r0
 800e46c:	bc09      	pop	{r0, r3}
 800e46e:	6819      	ldr	r1, [r3, #0]
 800e470:	6808      	ldr	r0, [r1, #0]
 800e472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e476:	f01e 0f10 	tst.w	lr, #16
 800e47a:	bf08      	it	eq
 800e47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e480:	f380 8809 	msr	PSP, r0
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	f3af 8000 	nop.w

0800e490 <pxCurrentTCBConst>:
 800e490:	24000a50 	.word	0x24000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e494:	bf00      	nop
 800e496:	bf00      	nop

0800e498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	607b      	str	r3, [r7, #4]
}
 800e4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e4b2:	f7fe fd65 	bl	800cf80 <xTaskIncrementTick>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4bc:	4b06      	ldr	r3, [pc, #24]	@ (800e4d8 <xPortSysTickHandler+0x40>)
 800e4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4c2:	601a      	str	r2, [r3, #0]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	f383 8811 	msr	BASEPRI, r3
}
 800e4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4d0:	bf00      	nop
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	e000ed04 	.word	0xe000ed04

0800e4dc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b088      	sub	sp, #32
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800e4e4:	4b5d      	ldr	r3, [pc, #372]	@ (800e65c <vPortSuppressTicksAndSleep+0x180>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d902      	bls.n	800e4f4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800e4ee:	4b5b      	ldr	r3, [pc, #364]	@ (800e65c <vPortSuppressTicksAndSleep+0x180>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800e4f4:	4b5a      	ldr	r3, [pc, #360]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a59      	ldr	r2, [pc, #356]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e4fa:	f023 0301 	bic.w	r3, r3, #1
 800e4fe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800e500:	4b58      	ldr	r3, [pc, #352]	@ (800e664 <vPortSuppressTicksAndSleep+0x188>)
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3b01      	subs	r3, #1
 800e508:	4957      	ldr	r1, [pc, #348]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e50a:	6809      	ldr	r1, [r1, #0]
 800e50c:	fb01 f303 	mul.w	r3, r1, r3
 800e510:	4413      	add	r3, r2
 800e512:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800e514:	4b55      	ldr	r3, [pc, #340]	@ (800e66c <vPortSuppressTicksAndSleep+0x190>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	69fa      	ldr	r2, [r7, #28]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d904      	bls.n	800e528 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800e51e:	4b53      	ldr	r3, [pc, #332]	@ (800e66c <vPortSuppressTicksAndSleep+0x190>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	69fa      	ldr	r2, [r7, #28]
 800e524:	1ad3      	subs	r3, r2, r3
 800e526:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800e528:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800e52a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800e52e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800e532:	f7fe ffc3 	bl	800d4bc <eTaskConfirmSleepModeStatus>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d110      	bne.n	800e55e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800e53c:	4b49      	ldr	r3, [pc, #292]	@ (800e664 <vPortSuppressTicksAndSleep+0x188>)
 800e53e:	4a4c      	ldr	r2, [pc, #304]	@ (800e670 <vPortSuppressTicksAndSleep+0x194>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e544:	4b46      	ldr	r3, [pc, #280]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a45      	ldr	r2, [pc, #276]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e54a:	f043 0301 	orr.w	r3, r3, #1
 800e54e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800e550:	4b45      	ldr	r3, [pc, #276]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a46      	ldr	r2, [pc, #280]	@ (800e670 <vPortSuppressTicksAndSleep+0x194>)
 800e556:	3b01      	subs	r3, #1
 800e558:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800e55a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800e55c:	e079      	b.n	800e652 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800e55e:	4a44      	ldr	r2, [pc, #272]	@ (800e670 <vPortSuppressTicksAndSleep+0x194>)
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e564:	4b3f      	ldr	r3, [pc, #252]	@ (800e664 <vPortSuppressTicksAndSleep+0x188>)
 800e566:	2200      	movs	r2, #0
 800e568:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e56a:	4b3d      	ldr	r3, [pc, #244]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a3c      	ldr	r2, [pc, #240]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e570:	f043 0301 	orr.w	r3, r3, #1
 800e574:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800e57a:	2300      	movs	r3, #0
 800e57c:	613b      	str	r3, [r7, #16]
 800e57e:	6938      	ldr	r0, [r7, #16]
 800e580:	f7f2 f856 	bl	8000630 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d004      	beq.n	800e594 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800e58a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800e58e:	bf30      	wfi
				__asm volatile( "isb" );
 800e590:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7f2 f855 	bl	8000644 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800e59a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800e59c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800e5a0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800e5a4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800e5a6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800e5aa:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800e5ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e5b0:	2206      	movs	r2, #6
 800e5b2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800e5b4:	4b2a      	ldr	r3, [pc, #168]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01d      	beq.n	800e5fc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800e5c0:	4b29      	ldr	r3, [pc, #164]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <vPortSuppressTicksAndSleep+0x188>)
 800e5c6:	6819      	ldr	r1, [r3, #0]
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	1acb      	subs	r3, r1, r3
 800e5cc:	4413      	add	r3, r2
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800e5d2:	4b26      	ldr	r3, [pc, #152]	@ (800e66c <vPortSuppressTicksAndSleep+0x190>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d304      	bcc.n	800e5e6 <vPortSuppressTicksAndSleep+0x10a>
 800e5dc:	4b22      	ldr	r3, [pc, #136]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	697a      	ldr	r2, [r7, #20]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d903      	bls.n	800e5ee <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800e5e6:	4b20      	ldr	r3, [pc, #128]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800e5ee:	4a20      	ldr	r2, [pc, #128]	@ (800e670 <vPortSuppressTicksAndSleep+0x194>)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	61bb      	str	r3, [r7, #24]
 800e5fa:	e018      	b.n	800e62e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800e5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	fb03 f202 	mul.w	r2, r3, r2
 800e606:	4b17      	ldr	r3, [pc, #92]	@ (800e664 <vPortSuppressTicksAndSleep+0x188>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800e60e:	4b16      	ldr	r3, [pc, #88]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	fbb2 f3f3 	udiv	r3, r2, r3
 800e618:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	3301      	adds	r3, #1
 800e61e:	4a12      	ldr	r2, [pc, #72]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e620:	6812      	ldr	r2, [r2, #0]
 800e622:	fb03 f202 	mul.w	r2, r3, r2
 800e626:	4912      	ldr	r1, [pc, #72]	@ (800e670 <vPortSuppressTicksAndSleep+0x194>)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e62e:	4b0d      	ldr	r3, [pc, #52]	@ (800e664 <vPortSuppressTicksAndSleep+0x188>)
 800e630:	2200      	movs	r2, #0
 800e632:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e634:	4b0a      	ldr	r3, [pc, #40]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a09      	ldr	r2, [pc, #36]	@ (800e660 <vPortSuppressTicksAndSleep+0x184>)
 800e63a:	f043 0301 	orr.w	r3, r3, #1
 800e63e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800e640:	69b8      	ldr	r0, [r7, #24]
 800e642:	f7fe fc75 	bl	800cf30 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800e646:	4b08      	ldr	r3, [pc, #32]	@ (800e668 <vPortSuppressTicksAndSleep+0x18c>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a09      	ldr	r2, [pc, #36]	@ (800e670 <vPortSuppressTicksAndSleep+0x194>)
 800e64c:	3b01      	subs	r3, #1
 800e64e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800e650:	b662      	cpsie	i
	}
 800e652:	bf00      	nop
 800e654:	3720      	adds	r7, #32
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	24001080 	.word	0x24001080
 800e660:	e000e010 	.word	0xe000e010
 800e664:	e000e018 	.word	0xe000e018
 800e668:	2400107c 	.word	0x2400107c
 800e66c:	24001084 	.word	0x24001084
 800e670:	e000e014 	.word	0xe000e014

0800e674 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e674:	b480      	push	{r7}
 800e676:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800e678:	4b14      	ldr	r3, [pc, #80]	@ (800e6cc <vPortSetupTimerInterrupt+0x58>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a14      	ldr	r2, [pc, #80]	@ (800e6d0 <vPortSetupTimerInterrupt+0x5c>)
 800e67e:	fba2 2303 	umull	r2, r3, r2, r3
 800e682:	099b      	lsrs	r3, r3, #6
 800e684:	4a13      	ldr	r2, [pc, #76]	@ (800e6d4 <vPortSetupTimerInterrupt+0x60>)
 800e686:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800e688:	4b12      	ldr	r3, [pc, #72]	@ (800e6d4 <vPortSetupTimerInterrupt+0x60>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800e690:	fbb2 f3f3 	udiv	r3, r2, r3
 800e694:	4a10      	ldr	r2, [pc, #64]	@ (800e6d8 <vPortSetupTimerInterrupt+0x64>)
 800e696:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800e698:	4b10      	ldr	r3, [pc, #64]	@ (800e6dc <vPortSetupTimerInterrupt+0x68>)
 800e69a:	222d      	movs	r2, #45	@ 0x2d
 800e69c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e69e:	4b10      	ldr	r3, [pc, #64]	@ (800e6e0 <vPortSetupTimerInterrupt+0x6c>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e4 <vPortSetupTimerInterrupt+0x70>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6aa:	4b08      	ldr	r3, [pc, #32]	@ (800e6cc <vPortSetupTimerInterrupt+0x58>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a08      	ldr	r2, [pc, #32]	@ (800e6d0 <vPortSetupTimerInterrupt+0x5c>)
 800e6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e6b4:	099b      	lsrs	r3, r3, #6
 800e6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6e8 <vPortSetupTimerInterrupt+0x74>)
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6bc:	4b08      	ldr	r3, [pc, #32]	@ (800e6e0 <vPortSetupTimerInterrupt+0x6c>)
 800e6be:	2207      	movs	r2, #7
 800e6c0:	601a      	str	r2, [r3, #0]
}
 800e6c2:	bf00      	nop
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr
 800e6cc:	24000000 	.word	0x24000000
 800e6d0:	10624dd3 	.word	0x10624dd3
 800e6d4:	2400107c 	.word	0x2400107c
 800e6d8:	24001080 	.word	0x24001080
 800e6dc:	24001084 	.word	0x24001084
 800e6e0:	e000e010 	.word	0xe000e010
 800e6e4:	e000e018 	.word	0xe000e018
 800e6e8:	e000e014 	.word	0xe000e014

0800e6ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e6ec:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e6fc <vPortEnableVFP+0x10>
 800e6f0:	6801      	ldr	r1, [r0, #0]
 800e6f2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e6f6:	6001      	str	r1, [r0, #0]
 800e6f8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e6fa:	bf00      	nop
 800e6fc:	e000ed88 	.word	0xe000ed88

0800e700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e706:	f3ef 8305 	mrs	r3, IPSR
 800e70a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b0f      	cmp	r3, #15
 800e710:	d915      	bls.n	800e73e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e712:	4a18      	ldr	r2, [pc, #96]	@ (800e774 <vPortValidateInterruptPriority+0x74>)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4413      	add	r3, r2
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e71c:	4b16      	ldr	r3, [pc, #88]	@ (800e778 <vPortValidateInterruptPriority+0x78>)
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	7afa      	ldrb	r2, [r7, #11]
 800e722:	429a      	cmp	r2, r3
 800e724:	d20b      	bcs.n	800e73e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	607b      	str	r3, [r7, #4]
}
 800e738:	bf00      	nop
 800e73a:	bf00      	nop
 800e73c:	e7fd      	b.n	800e73a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e73e:	4b0f      	ldr	r3, [pc, #60]	@ (800e77c <vPortValidateInterruptPriority+0x7c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e746:	4b0e      	ldr	r3, [pc, #56]	@ (800e780 <vPortValidateInterruptPriority+0x80>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d90b      	bls.n	800e766 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	603b      	str	r3, [r7, #0]
}
 800e760:	bf00      	nop
 800e762:	bf00      	nop
 800e764:	e7fd      	b.n	800e762 <vPortValidateInterruptPriority+0x62>
	}
 800e766:	bf00      	nop
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	e000e3f0 	.word	0xe000e3f0
 800e778:	24001088 	.word	0x24001088
 800e77c:	e000ed0c 	.word	0xe000ed0c
 800e780:	2400108c 	.word	0x2400108c

0800e784 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08a      	sub	sp, #40	@ 0x28
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e78c:	2300      	movs	r3, #0
 800e78e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e790:	f7fe fada 	bl	800cd48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e794:	4b5c      	ldr	r3, [pc, #368]	@ (800e908 <pvPortMalloc+0x184>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d101      	bne.n	800e7a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e79c:	f000 f924 	bl	800e9e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7a0:	4b5a      	ldr	r3, [pc, #360]	@ (800e90c <pvPortMalloc+0x188>)
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f040 8095 	bne.w	800e8d8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d01e      	beq.n	800e7f2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e7b4:	2208      	movs	r2, #8
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f003 0307 	and.w	r3, r3, #7
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d015      	beq.n	800e7f2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f023 0307 	bic.w	r3, r3, #7
 800e7cc:	3308      	adds	r3, #8
 800e7ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f003 0307 	and.w	r3, r3, #7
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00b      	beq.n	800e7f2 <pvPortMalloc+0x6e>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	617b      	str	r3, [r7, #20]
}
 800e7ec:	bf00      	nop
 800e7ee:	bf00      	nop
 800e7f0:	e7fd      	b.n	800e7ee <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d06f      	beq.n	800e8d8 <pvPortMalloc+0x154>
 800e7f8:	4b45      	ldr	r3, [pc, #276]	@ (800e910 <pvPortMalloc+0x18c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d86a      	bhi.n	800e8d8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e802:	4b44      	ldr	r3, [pc, #272]	@ (800e914 <pvPortMalloc+0x190>)
 800e804:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e806:	4b43      	ldr	r3, [pc, #268]	@ (800e914 <pvPortMalloc+0x190>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e80c:	e004      	b.n	800e818 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e810:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d903      	bls.n	800e82a <pvPortMalloc+0xa6>
 800e822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1f1      	bne.n	800e80e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e82a:	4b37      	ldr	r3, [pc, #220]	@ (800e908 <pvPortMalloc+0x184>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e830:	429a      	cmp	r2, r3
 800e832:	d051      	beq.n	800e8d8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2208      	movs	r2, #8
 800e83a:	4413      	add	r3, r2
 800e83c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	2308      	movs	r3, #8
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	429a      	cmp	r2, r3
 800e854:	d920      	bls.n	800e898 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4413      	add	r3, r2
 800e85c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	f003 0307 	and.w	r3, r3, #7
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00b      	beq.n	800e880 <pvPortMalloc+0xfc>
	__asm volatile
 800e868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	613b      	str	r3, [r7, #16]
}
 800e87a:	bf00      	nop
 800e87c:	bf00      	nop
 800e87e:	e7fd      	b.n	800e87c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	1ad2      	subs	r2, r2, r3
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e892:	69b8      	ldr	r0, [r7, #24]
 800e894:	f000 f90a 	bl	800eaac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e898:	4b1d      	ldr	r3, [pc, #116]	@ (800e910 <pvPortMalloc+0x18c>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	4a1b      	ldr	r2, [pc, #108]	@ (800e910 <pvPortMalloc+0x18c>)
 800e8a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8a6:	4b1a      	ldr	r3, [pc, #104]	@ (800e910 <pvPortMalloc+0x18c>)
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	4b1b      	ldr	r3, [pc, #108]	@ (800e918 <pvPortMalloc+0x194>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d203      	bcs.n	800e8ba <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8b2:	4b17      	ldr	r3, [pc, #92]	@ (800e910 <pvPortMalloc+0x18c>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a18      	ldr	r2, [pc, #96]	@ (800e918 <pvPortMalloc+0x194>)
 800e8b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	4b13      	ldr	r3, [pc, #76]	@ (800e90c <pvPortMalloc+0x188>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	431a      	orrs	r2, r3
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e8ce:	4b13      	ldr	r3, [pc, #76]	@ (800e91c <pvPortMalloc+0x198>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	4a11      	ldr	r2, [pc, #68]	@ (800e91c <pvPortMalloc+0x198>)
 800e8d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8d8:	f7fe fa7c 	bl	800cdd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	f003 0307 	and.w	r3, r3, #7
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00b      	beq.n	800e8fe <pvPortMalloc+0x17a>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	60fb      	str	r3, [r7, #12]
}
 800e8f8:	bf00      	nop
 800e8fa:	bf00      	nop
 800e8fc:	e7fd      	b.n	800e8fa <pvPortMalloc+0x176>
	return pvReturn;
 800e8fe:	69fb      	ldr	r3, [r7, #28]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3728      	adds	r7, #40	@ 0x28
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	24004c98 	.word	0x24004c98
 800e90c:	24004cac 	.word	0x24004cac
 800e910:	24004c9c 	.word	0x24004c9c
 800e914:	24004c90 	.word	0x24004c90
 800e918:	24004ca0 	.word	0x24004ca0
 800e91c:	24004ca4 	.word	0x24004ca4

0800e920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d04f      	beq.n	800e9d2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e932:	2308      	movs	r3, #8
 800e934:	425b      	negs	r3, r3
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	4413      	add	r3, r2
 800e93a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	685a      	ldr	r2, [r3, #4]
 800e944:	4b25      	ldr	r3, [pc, #148]	@ (800e9dc <vPortFree+0xbc>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4013      	ands	r3, r2
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10b      	bne.n	800e966 <vPortFree+0x46>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	60fb      	str	r3, [r7, #12]
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	e7fd      	b.n	800e962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00b      	beq.n	800e986 <vPortFree+0x66>
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	60bb      	str	r3, [r7, #8]
}
 800e980:	bf00      	nop
 800e982:	bf00      	nop
 800e984:	e7fd      	b.n	800e982 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	4b14      	ldr	r3, [pc, #80]	@ (800e9dc <vPortFree+0xbc>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4013      	ands	r3, r2
 800e990:	2b00      	cmp	r3, #0
 800e992:	d01e      	beq.n	800e9d2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d11a      	bne.n	800e9d2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e9dc <vPortFree+0xbc>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	43db      	mvns	r3, r3
 800e9a6:	401a      	ands	r2, r3
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9ac:	f7fe f9cc 	bl	800cd48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	685a      	ldr	r2, [r3, #4]
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800e9e0 <vPortFree+0xc0>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	4a09      	ldr	r2, [pc, #36]	@ (800e9e0 <vPortFree+0xc0>)
 800e9bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9be:	6938      	ldr	r0, [r7, #16]
 800e9c0:	f000 f874 	bl	800eaac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e9c4:	4b07      	ldr	r3, [pc, #28]	@ (800e9e4 <vPortFree+0xc4>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	4a06      	ldr	r2, [pc, #24]	@ (800e9e4 <vPortFree+0xc4>)
 800e9cc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e9ce:	f7fe fa01 	bl	800cdd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9d2:	bf00      	nop
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	24004cac 	.word	0x24004cac
 800e9e0:	24004c9c 	.word	0x24004c9c
 800e9e4:	24004ca8 	.word	0x24004ca8

0800e9e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e9ee:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e9f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e9f4:	4b27      	ldr	r3, [pc, #156]	@ (800ea94 <prvHeapInit+0xac>)
 800e9f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f003 0307 	and.w	r3, r3, #7
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00c      	beq.n	800ea1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	3307      	adds	r3, #7
 800ea06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f023 0307 	bic.w	r3, r3, #7
 800ea0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	4a1f      	ldr	r2, [pc, #124]	@ (800ea94 <prvHeapInit+0xac>)
 800ea18:	4413      	add	r3, r2
 800ea1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea20:	4a1d      	ldr	r2, [pc, #116]	@ (800ea98 <prvHeapInit+0xb0>)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea26:	4b1c      	ldr	r3, [pc, #112]	@ (800ea98 <prvHeapInit+0xb0>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	4413      	add	r3, r2
 800ea32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea34:	2208      	movs	r2, #8
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	1a9b      	subs	r3, r3, r2
 800ea3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f023 0307 	bic.w	r3, r3, #7
 800ea42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	4a15      	ldr	r2, [pc, #84]	@ (800ea9c <prvHeapInit+0xb4>)
 800ea48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea4a:	4b14      	ldr	r3, [pc, #80]	@ (800ea9c <prvHeapInit+0xb4>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea52:	4b12      	ldr	r3, [pc, #72]	@ (800ea9c <prvHeapInit+0xb4>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	1ad2      	subs	r2, r2, r3
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea68:	4b0c      	ldr	r3, [pc, #48]	@ (800ea9c <prvHeapInit+0xb4>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	4a0a      	ldr	r2, [pc, #40]	@ (800eaa0 <prvHeapInit+0xb8>)
 800ea76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	4a09      	ldr	r2, [pc, #36]	@ (800eaa4 <prvHeapInit+0xbc>)
 800ea7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea80:	4b09      	ldr	r3, [pc, #36]	@ (800eaa8 <prvHeapInit+0xc0>)
 800ea82:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ea86:	601a      	str	r2, [r3, #0]
}
 800ea88:	bf00      	nop
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	24001090 	.word	0x24001090
 800ea98:	24004c90 	.word	0x24004c90
 800ea9c:	24004c98 	.word	0x24004c98
 800eaa0:	24004ca0 	.word	0x24004ca0
 800eaa4:	24004c9c 	.word	0x24004c9c
 800eaa8:	24004cac 	.word	0x24004cac

0800eaac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eab4:	4b28      	ldr	r3, [pc, #160]	@ (800eb58 <prvInsertBlockIntoFreeList+0xac>)
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	e002      	b.n	800eac0 <prvInsertBlockIntoFreeList+0x14>
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	60fb      	str	r3, [r7, #12]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d8f7      	bhi.n	800eaba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	4413      	add	r3, r2
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d108      	bne.n	800eaee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	441a      	add	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d118      	bne.n	800eb34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	4b15      	ldr	r3, [pc, #84]	@ (800eb5c <prvInsertBlockIntoFreeList+0xb0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d00d      	beq.n	800eb2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	441a      	add	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	601a      	str	r2, [r3, #0]
 800eb28:	e008      	b.n	800eb3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	@ (800eb5c <prvInsertBlockIntoFreeList+0xb0>)
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	e003      	b.n	800eb3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d002      	beq.n	800eb4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb4a:	bf00      	nop
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	24004c90 	.word	0x24004c90
 800eb5c:	24004c98 	.word	0x24004c98

0800eb60 <memset>:
 800eb60:	4402      	add	r2, r0
 800eb62:	4603      	mov	r3, r0
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d100      	bne.n	800eb6a <memset+0xa>
 800eb68:	4770      	bx	lr
 800eb6a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb6e:	e7f9      	b.n	800eb64 <memset+0x4>

0800eb70 <_reclaim_reent>:
 800eb70:	4b29      	ldr	r3, [pc, #164]	@ (800ec18 <_reclaim_reent+0xa8>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4283      	cmp	r3, r0
 800eb76:	b570      	push	{r4, r5, r6, lr}
 800eb78:	4604      	mov	r4, r0
 800eb7a:	d04b      	beq.n	800ec14 <_reclaim_reent+0xa4>
 800eb7c:	69c3      	ldr	r3, [r0, #28]
 800eb7e:	b1ab      	cbz	r3, 800ebac <_reclaim_reent+0x3c>
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	b16b      	cbz	r3, 800eba0 <_reclaim_reent+0x30>
 800eb84:	2500      	movs	r5, #0
 800eb86:	69e3      	ldr	r3, [r4, #28]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	5959      	ldr	r1, [r3, r5]
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	d13b      	bne.n	800ec08 <_reclaim_reent+0x98>
 800eb90:	3504      	adds	r5, #4
 800eb92:	2d80      	cmp	r5, #128	@ 0x80
 800eb94:	d1f7      	bne.n	800eb86 <_reclaim_reent+0x16>
 800eb96:	69e3      	ldr	r3, [r4, #28]
 800eb98:	4620      	mov	r0, r4
 800eb9a:	68d9      	ldr	r1, [r3, #12]
 800eb9c:	f000 f872 	bl	800ec84 <_free_r>
 800eba0:	69e3      	ldr	r3, [r4, #28]
 800eba2:	6819      	ldr	r1, [r3, #0]
 800eba4:	b111      	cbz	r1, 800ebac <_reclaim_reent+0x3c>
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 f86c 	bl	800ec84 <_free_r>
 800ebac:	6961      	ldr	r1, [r4, #20]
 800ebae:	b111      	cbz	r1, 800ebb6 <_reclaim_reent+0x46>
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 f867 	bl	800ec84 <_free_r>
 800ebb6:	69e1      	ldr	r1, [r4, #28]
 800ebb8:	b111      	cbz	r1, 800ebc0 <_reclaim_reent+0x50>
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 f862 	bl	800ec84 <_free_r>
 800ebc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ebc2:	b111      	cbz	r1, 800ebca <_reclaim_reent+0x5a>
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f000 f85d 	bl	800ec84 <_free_r>
 800ebca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebcc:	b111      	cbz	r1, 800ebd4 <_reclaim_reent+0x64>
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 f858 	bl	800ec84 <_free_r>
 800ebd4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ebd6:	b111      	cbz	r1, 800ebde <_reclaim_reent+0x6e>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f000 f853 	bl	800ec84 <_free_r>
 800ebde:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ebe0:	b111      	cbz	r1, 800ebe8 <_reclaim_reent+0x78>
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 f84e 	bl	800ec84 <_free_r>
 800ebe8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ebea:	b111      	cbz	r1, 800ebf2 <_reclaim_reent+0x82>
 800ebec:	4620      	mov	r0, r4
 800ebee:	f000 f849 	bl	800ec84 <_free_r>
 800ebf2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ebf4:	b111      	cbz	r1, 800ebfc <_reclaim_reent+0x8c>
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	f000 f844 	bl	800ec84 <_free_r>
 800ebfc:	6a23      	ldr	r3, [r4, #32]
 800ebfe:	b14b      	cbz	r3, 800ec14 <_reclaim_reent+0xa4>
 800ec00:	4620      	mov	r0, r4
 800ec02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec06:	4718      	bx	r3
 800ec08:	680e      	ldr	r6, [r1, #0]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 f83a 	bl	800ec84 <_free_r>
 800ec10:	4631      	mov	r1, r6
 800ec12:	e7bb      	b.n	800eb8c <_reclaim_reent+0x1c>
 800ec14:	bd70      	pop	{r4, r5, r6, pc}
 800ec16:	bf00      	nop
 800ec18:	24000014 	.word	0x24000014

0800ec1c <__libc_init_array>:
 800ec1c:	b570      	push	{r4, r5, r6, lr}
 800ec1e:	4d0d      	ldr	r5, [pc, #52]	@ (800ec54 <__libc_init_array+0x38>)
 800ec20:	4c0d      	ldr	r4, [pc, #52]	@ (800ec58 <__libc_init_array+0x3c>)
 800ec22:	1b64      	subs	r4, r4, r5
 800ec24:	10a4      	asrs	r4, r4, #2
 800ec26:	2600      	movs	r6, #0
 800ec28:	42a6      	cmp	r6, r4
 800ec2a:	d109      	bne.n	800ec40 <__libc_init_array+0x24>
 800ec2c:	4d0b      	ldr	r5, [pc, #44]	@ (800ec5c <__libc_init_array+0x40>)
 800ec2e:	4c0c      	ldr	r4, [pc, #48]	@ (800ec60 <__libc_init_array+0x44>)
 800ec30:	f000 f87e 	bl	800ed30 <_init>
 800ec34:	1b64      	subs	r4, r4, r5
 800ec36:	10a4      	asrs	r4, r4, #2
 800ec38:	2600      	movs	r6, #0
 800ec3a:	42a6      	cmp	r6, r4
 800ec3c:	d105      	bne.n	800ec4a <__libc_init_array+0x2e>
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}
 800ec40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec44:	4798      	blx	r3
 800ec46:	3601      	adds	r6, #1
 800ec48:	e7ee      	b.n	800ec28 <__libc_init_array+0xc>
 800ec4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec4e:	4798      	blx	r3
 800ec50:	3601      	adds	r6, #1
 800ec52:	e7f2      	b.n	800ec3a <__libc_init_array+0x1e>
 800ec54:	0800ee10 	.word	0x0800ee10
 800ec58:	0800ee10 	.word	0x0800ee10
 800ec5c:	0800ee10 	.word	0x0800ee10
 800ec60:	0800ee14 	.word	0x0800ee14

0800ec64 <__retarget_lock_acquire_recursive>:
 800ec64:	4770      	bx	lr

0800ec66 <__retarget_lock_release_recursive>:
 800ec66:	4770      	bx	lr

0800ec68 <memcpy>:
 800ec68:	440a      	add	r2, r1
 800ec6a:	4291      	cmp	r1, r2
 800ec6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec70:	d100      	bne.n	800ec74 <memcpy+0xc>
 800ec72:	4770      	bx	lr
 800ec74:	b510      	push	{r4, lr}
 800ec76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec7e:	4291      	cmp	r1, r2
 800ec80:	d1f9      	bne.n	800ec76 <memcpy+0xe>
 800ec82:	bd10      	pop	{r4, pc}

0800ec84 <_free_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4605      	mov	r5, r0
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	d041      	beq.n	800ed10 <_free_r+0x8c>
 800ec8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec90:	1f0c      	subs	r4, r1, #4
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	bfb8      	it	lt
 800ec96:	18e4      	addlt	r4, r4, r3
 800ec98:	f000 f83e 	bl	800ed18 <__malloc_lock>
 800ec9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ed14 <_free_r+0x90>)
 800ec9e:	6813      	ldr	r3, [r2, #0]
 800eca0:	b933      	cbnz	r3, 800ecb0 <_free_r+0x2c>
 800eca2:	6063      	str	r3, [r4, #4]
 800eca4:	6014      	str	r4, [r2, #0]
 800eca6:	4628      	mov	r0, r5
 800eca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecac:	f000 b83a 	b.w	800ed24 <__malloc_unlock>
 800ecb0:	42a3      	cmp	r3, r4
 800ecb2:	d908      	bls.n	800ecc6 <_free_r+0x42>
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	1821      	adds	r1, r4, r0
 800ecb8:	428b      	cmp	r3, r1
 800ecba:	bf01      	itttt	eq
 800ecbc:	6819      	ldreq	r1, [r3, #0]
 800ecbe:	685b      	ldreq	r3, [r3, #4]
 800ecc0:	1809      	addeq	r1, r1, r0
 800ecc2:	6021      	streq	r1, [r4, #0]
 800ecc4:	e7ed      	b.n	800eca2 <_free_r+0x1e>
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	b10b      	cbz	r3, 800ecd0 <_free_r+0x4c>
 800eccc:	42a3      	cmp	r3, r4
 800ecce:	d9fa      	bls.n	800ecc6 <_free_r+0x42>
 800ecd0:	6811      	ldr	r1, [r2, #0]
 800ecd2:	1850      	adds	r0, r2, r1
 800ecd4:	42a0      	cmp	r0, r4
 800ecd6:	d10b      	bne.n	800ecf0 <_free_r+0x6c>
 800ecd8:	6820      	ldr	r0, [r4, #0]
 800ecda:	4401      	add	r1, r0
 800ecdc:	1850      	adds	r0, r2, r1
 800ecde:	4283      	cmp	r3, r0
 800ece0:	6011      	str	r1, [r2, #0]
 800ece2:	d1e0      	bne.n	800eca6 <_free_r+0x22>
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	6053      	str	r3, [r2, #4]
 800ecea:	4408      	add	r0, r1
 800ecec:	6010      	str	r0, [r2, #0]
 800ecee:	e7da      	b.n	800eca6 <_free_r+0x22>
 800ecf0:	d902      	bls.n	800ecf8 <_free_r+0x74>
 800ecf2:	230c      	movs	r3, #12
 800ecf4:	602b      	str	r3, [r5, #0]
 800ecf6:	e7d6      	b.n	800eca6 <_free_r+0x22>
 800ecf8:	6820      	ldr	r0, [r4, #0]
 800ecfa:	1821      	adds	r1, r4, r0
 800ecfc:	428b      	cmp	r3, r1
 800ecfe:	bf04      	itt	eq
 800ed00:	6819      	ldreq	r1, [r3, #0]
 800ed02:	685b      	ldreq	r3, [r3, #4]
 800ed04:	6063      	str	r3, [r4, #4]
 800ed06:	bf04      	itt	eq
 800ed08:	1809      	addeq	r1, r1, r0
 800ed0a:	6021      	streq	r1, [r4, #0]
 800ed0c:	6054      	str	r4, [r2, #4]
 800ed0e:	e7ca      	b.n	800eca6 <_free_r+0x22>
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	bf00      	nop
 800ed14:	24004dec 	.word	0x24004dec

0800ed18 <__malloc_lock>:
 800ed18:	4801      	ldr	r0, [pc, #4]	@ (800ed20 <__malloc_lock+0x8>)
 800ed1a:	f7ff bfa3 	b.w	800ec64 <__retarget_lock_acquire_recursive>
 800ed1e:	bf00      	nop
 800ed20:	24004de8 	.word	0x24004de8

0800ed24 <__malloc_unlock>:
 800ed24:	4801      	ldr	r0, [pc, #4]	@ (800ed2c <__malloc_unlock+0x8>)
 800ed26:	f7ff bf9e 	b.w	800ec66 <__retarget_lock_release_recursive>
 800ed2a:	bf00      	nop
 800ed2c:	24004de8 	.word	0x24004de8

0800ed30 <_init>:
 800ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed32:	bf00      	nop
 800ed34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed36:	bc08      	pop	{r3}
 800ed38:	469e      	mov	lr, r3
 800ed3a:	4770      	bx	lr

0800ed3c <_fini>:
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3e:	bf00      	nop
 800ed40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed42:	bc08      	pop	{r3}
 800ed44:	469e      	mov	lr, r3
 800ed46:	4770      	bx	lr
