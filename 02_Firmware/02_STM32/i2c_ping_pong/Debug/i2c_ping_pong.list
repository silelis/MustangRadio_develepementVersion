
i2c_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010204  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080104b4  080104b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010660  08010660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010668  08010668  00011668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801066c  0801066c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08010670  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004da4  24000070  080106e0  00012070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004e14  080106e0  00012e14  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000280f6  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004cb3  00000000  00000000  0003a194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d70  00000000  00000000  0003ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016e8  00000000  00000000  00040bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034e6b  00000000  00000000  000422a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028417  00000000  00000000  0007710b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d307  00000000  00000000  0009f522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ec829  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085f8  00000000  00000000  001ec86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001f4e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801049c 	.word	0x0801049c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0801049c 	.word	0x0801049c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_DMA_Init+0x4c>)
 8000688:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800068c:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <MX_DMA_Init+0x4c>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <MX_DMA_Init+0x4c>)
 8000698:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2106      	movs	r1, #6
 80006a8:	200b      	movs	r0, #11
 80006aa:	f001 f825 	bl	80016f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006ae:	200b      	movs	r0, #11
 80006b0:	f001 f83c 	bl	800172c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2106      	movs	r1, #6
 80006b8:	200c      	movs	r0, #12
 80006ba:	f001 f81d 	bl	80016f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006be:	200c      	movs	r0, #12
 80006c0:	f001 f834 	bl	800172c <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58024400 	.word	0x58024400

080006d0 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <MX_FREERTOS_Init+0x18>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_FREERTOS_Init+0x1c>)
 8000702:	f00b fbf9 	bl	800bef8 <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a03      	ldr	r2, [pc, #12]	@ (8000718 <MX_FREERTOS_Init+0x20>)
 800070a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	0801051c 	.word	0x0801051c
 8000714:	0800071d 	.word	0x0800071d
 8000718:	2400008c 	.word	0x2400008c

0800071c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f00b fc79 	bl	800c01c <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartDefaultTask+0x8>

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_GPIO_Init+0x84>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_GPIO_Init+0x84>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_GPIO_Init+0x84>)
 8000754:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_GPIO_Init+0x84>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_GPIO_Init+0x84>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_GPIO_Init+0x84>)
 8000772:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 800077e:	2320      	movs	r3, #32
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000782:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4808      	ldr	r0, [pc, #32]	@ (80007b4 <MX_GPIO_Init+0x88>)
 8000794:	f003 fed0 	bl	8004538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2105      	movs	r1, #5
 800079c:	2017      	movs	r0, #23
 800079e:	f000 ffab 	bl	80016f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007a2:	2017      	movs	r0, #23
 80007a4:	f000 ffc2 	bl	800172c <HAL_NVIC_EnableIRQ>

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58020400 	.word	0x58020400

080007b8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_I2C1_Init+0x74>)
 80007ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_I2C1_Init+0x74>)
 80007f6:	f004 f869 	bl	80048cc <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 fb5a 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4809      	ldr	r0, [pc, #36]	@ (800082c <MX_I2C1_Init+0x74>)
 8000808:	f006 fac2 	bl	8006d90 <HAL_I2CEx_ConfigAnalogFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000812:	f000 fb51 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_I2C1_Init+0x74>)
 800081a:	f006 fb04 	bl	8006e26 <HAL_I2CEx_ConfigDigitalFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000824:	f000 fb48 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	24000090 	.word	0x24000090
 8000830:	40005400 	.word	0x40005400
 8000834:	20b0ccff 	.word	0x20b0ccff

08000838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0ba      	sub	sp, #232	@ 0xe8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	22c0      	movs	r2, #192	@ 0xc0
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f00e feea 	bl	800f632 <memset>
  if(i2cHandle->Instance==I2C1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a5c      	ldr	r2, [pc, #368]	@ (80009d4 <HAL_I2C_MspInit+0x19c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	f040 80b1 	bne.w	80009cc <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800086a:	f04f 0208 	mov.w	r2, #8
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4618      	mov	r0, r3
 8000882:	f007 fb57 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800088c:	f000 fb14 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b51      	ldr	r3, [pc, #324]	@ (80009d8 <HAL_I2C_MspInit+0x1a0>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000896:	4a50      	ldr	r2, [pc, #320]	@ (80009d8 <HAL_I2C_MspInit+0x1a0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008a0:	4b4d      	ldr	r3, [pc, #308]	@ (80009d8 <HAL_I2C_MspInit+0x1a0>)
 80008a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b6:	2312      	movs	r3, #18
 80008b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c8:	2304      	movs	r3, #4
 80008ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4841      	ldr	r0, [pc, #260]	@ (80009dc <HAL_I2C_MspInit+0x1a4>)
 80008d6:	f003 fe2f 	bl	8004538 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008da:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <HAL_I2C_MspInit+0x1a0>)
 80008dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008e0:	4a3d      	ldr	r2, [pc, #244]	@ (80009d8 <HAL_I2C_MspInit+0x1a0>)
 80008e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008e6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80008ea:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <HAL_I2C_MspInit+0x1a0>)
 80008ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80008f8:	4b39      	ldr	r3, [pc, #228]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 80008fa:	4a3a      	ldr	r2, [pc, #232]	@ (80009e4 <HAL_I2C_MspInit+0x1ac>)
 80008fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80008fe:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000900:	2221      	movs	r2, #33	@ 0x21
 8000902:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000904:	4b36      	ldr	r3, [pc, #216]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000910:	4b33      	ldr	r3, [pc, #204]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000916:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000918:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091e:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000924:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800092a:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000930:	4b2b      	ldr	r3, [pc, #172]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000936:	482a      	ldr	r0, [pc, #168]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 8000938:	f000 ff06 	bl	8001748 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000942:	f000 fab9 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a25      	ldr	r2, [pc, #148]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 800094a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800094c:	4a24      	ldr	r2, [pc, #144]	@ (80009e0 <HAL_I2C_MspInit+0x1a8>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000952:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000954:	4a25      	ldr	r2, [pc, #148]	@ (80009ec <HAL_I2C_MspInit+0x1b4>)
 8000956:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000958:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 800095a:	2222      	movs	r2, #34	@ 0x22
 800095c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800095e:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000960:	2240      	movs	r2, #64	@ 0x40
 8000962:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b20      	ldr	r3, [pc, #128]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 800096c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000970:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000972:	4b1d      	ldr	r3, [pc, #116]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000990:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 8000992:	f000 fed9 	bl	8001748 <HAL_DMA_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800099c:	f000 fa8c 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 80009a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80009a6:	4a10      	ldr	r2, [pc, #64]	@ (80009e8 <HAL_I2C_MspInit+0x1b0>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2106      	movs	r1, #6
 80009b0:	201f      	movs	r0, #31
 80009b2:	f000 fea1 	bl	80016f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009b6:	201f      	movs	r0, #31
 80009b8:	f000 feb8 	bl	800172c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2106      	movs	r1, #6
 80009c0:	2020      	movs	r0, #32
 80009c2:	f000 fe99 	bl	80016f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009c6:	2020      	movs	r0, #32
 80009c8:	f000 feb0 	bl	800172c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009cc:	bf00      	nop
 80009ce:	37e8      	adds	r7, #232	@ 0xe8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40005400 	.word	0x40005400
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020400 	.word	0x58020400
 80009e0:	240000e4 	.word	0x240000e4
 80009e4:	40020010 	.word	0x40020010
 80009e8:	2400015c 	.word	0x2400015c
 80009ec:	40020028 	.word	0x40020028

080009f0 <HAL_GPIO_EXTI_Callback>:
#define ESP_delay		7

static bool esp32I2cInitialised = false;
SemaphoreHandle_t i2c_semap;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
	if(esp32I2cInitialised==false){
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_GPIO_EXTI_Callback+0x54>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	f083 0301 	eor.w	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <HAL_GPIO_EXTI_Callback+0x20>
		esp32I2cInitialised=true;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		xSemaphoreGiveFromISR(CountingSemaphore, &xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

}
 8000a0e:	e014      	b.n	8000a3a <HAL_GPIO_EXTI_Callback+0x4a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(CountingSemaphore, &xHigherPriorityTaskWoken);
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f107 020c 	add.w	r2, r7, #12
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f00b ff1a 	bl	800c858 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_EXTI_Callback+0x4a>
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	f3bf 8f4f 	dsb	sy
 8000a36:	f3bf 8f6f 	isb	sy
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	240001d8 	.word	0x240001d8
 8000a48:	240001d4 	.word	0x240001d4
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <losuj_od_1_do_20>:
static TaskHandle_t taskHandle_taskSendFake;
static TaskHandle_t taskHandle_taskSend;
static TaskHandle_t taskHandle_taskReceive;

int losuj_od_1_do_20() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    return rand() % 20 + 1;
 8000a54:	f00e fcaa 	bl	800f3ac <rand>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <losuj_od_1_do_20+0x28>)
 8000a5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a60:	10da      	asrs	r2, r3, #3
 8000a62:	17cb      	asrs	r3, r1, #31
 8000a64:	1ad2      	subs	r2, r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	1aca      	subs	r2, r1, r3
 8000a70:	1c53      	adds	r3, r2, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	66666667 	.word	0x66666667

08000a7c <taskReceive>:

void taskReceive(void *nothink){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0c2      	sub	sp, #264	@ 0x108
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a8a:	6018      	str	r0, [r3, #0]
	HAL_StatusTypeDef retVal;
	char recData[250];
	size_t len;
	while(1){
		if(xSemaphoreTake(CountingSemaphore, portMAX_DELAY)==pdTRUE){
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b48 <taskReceive+0xcc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00c f851 	bl	800cb3c <xQueueSemaphoreTake>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d1f5      	bne.n	8000a8c <taskReceive+0x10>
			xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <taskReceive+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f00c f847 	bl	800cb3c <xQueueSemaphoreTake>
			while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000aae:	bf00      	nop
 8000ab0:	4827      	ldr	r0, [pc, #156]	@ (8000b50 <taskReceive+0xd4>)
 8000ab2:	f004 fa88 	bl	8004fc6 <HAL_I2C_GetState>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d1f9      	bne.n	8000ab0 <taskReceive+0x34>
			vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000abc:	2007      	movs	r0, #7
 8000abe:	f00c fc91 	bl	800d3e4 <vTaskDelay>
			retVal = HAL_I2C_Master_Receive_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) &len, sizeof(size_t));
 8000ac2:	f107 0208 	add.w	r2, r7, #8
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	2178      	movs	r1, #120	@ 0x78
 8000aca:	4821      	ldr	r0, [pc, #132]	@ (8000b50 <taskReceive+0xd4>)
 8000acc:	f004 f8ae 	bl	8004c2c <HAL_I2C_Master_Receive_DMA>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

			while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000ad6:	bf00      	nop
 8000ad8:	481d      	ldr	r0, [pc, #116]	@ (8000b50 <taskReceive+0xd4>)
 8000ada:	f004 fa74 	bl	8004fc6 <HAL_I2C_GetState>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b20      	cmp	r3, #32
 8000ae2:	d1f9      	bne.n	8000ad8 <taskReceive+0x5c>
			vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000ae4:	2007      	movs	r0, #7
 8000ae6:	f00c fc7d 	bl	800d3e4 <vTaskDelay>
			retVal = HAL_I2C_Master_Receive_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, (uint8_t*) recData, len);
 8000aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000aee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	f107 020c 	add.w	r2, r7, #12
 8000afa:	2178      	movs	r1, #120	@ 0x78
 8000afc:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <taskReceive+0xd4>)
 8000afe:	f004 f895 	bl	8004c2c <HAL_I2C_Master_Receive_DMA>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
			vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000b08:	2007      	movs	r0, #7
 8000b0a:	f00c fc6b 	bl	800d3e4 <vTaskDelay>
			while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000b0e:	bf00      	nop
 8000b10:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <taskReceive+0xd4>)
 8000b12:	f004 fa58 	bl	8004fc6 <HAL_I2C_GetState>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b20      	cmp	r3, #32
 8000b1a:	d1f9      	bne.n	8000b10 <taskReceive+0x94>
			HAL_UART_Transmit(&huart1, recData, 9, 200);
 8000b1c:	f107 010c 	add.w	r1, r7, #12
 8000b20:	23c8      	movs	r3, #200	@ 0xc8
 8000b22:	2209      	movs	r2, #9
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <taskReceive+0xd8>)
 8000b26:	f009 fb03 	bl	800a130 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, "\r", 1, 200);
 8000b2a:	23c8      	movs	r3, #200	@ 0xc8
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	490a      	ldr	r1, [pc, #40]	@ (8000b58 <taskReceive+0xdc>)
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <taskReceive+0xd8>)
 8000b32:	f009 fafd 	bl	800a130 <HAL_UART_Transmit>
			xSemaphoreGive(i2c_semap);
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <taskReceive+0xd0>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f00b fcea 	bl	800c518 <xQueueGenericSend>
		if(xSemaphoreTake(CountingSemaphore, portMAX_DELAY)==pdTRUE){
 8000b44:	e7a2      	b.n	8000a8c <taskReceive+0x10>
 8000b46:	bf00      	nop
 8000b48:	240001d4 	.word	0x240001d4
 8000b4c:	240001dc 	.word	0x240001dc
 8000b50:	24000090 	.word	0x24000090
 8000b54:	2400023c 	.word	0x2400023c
 8000b58:	080104c0 	.word	0x080104c0

08000b5c <taskSendFake>:
		}
	}

}

void taskSendFake(void *nothink){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <taskSendFake+0x88>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00b ffe5 	bl	800cb3c <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000b72:	bf00      	nop
 8000b74:	481c      	ldr	r0, [pc, #112]	@ (8000be8 <taskSendFake+0x8c>)
 8000b76:	f004 fa26 	bl	8004fc6 <HAL_I2C_GetState>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b20      	cmp	r3, #32
 8000b7e:	d1f9      	bne.n	8000b74 <taskSendFake+0x18>
		vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000b80:	2007      	movs	r0, #7
 8000b82:	f00c fc2f 	bl	800d3e4 <vTaskDelay>
		  //retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32, "Dawid", 6, 2000);
		  retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_FAKE<<1, "Dawid", 6);
 8000b86:	2306      	movs	r3, #6
 8000b88:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <taskSendFake+0x90>)
 8000b8a:	217a      	movs	r1, #122	@ 0x7a
 8000b8c:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <taskSendFake+0x8c>)
 8000b8e:	f003 ff39 	bl	8004a04 <HAL_I2C_Master_Transmit_DMA>
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "FAKE\r\n", 6, 200);
 8000b96:	23c8      	movs	r3, #200	@ 0xc8
 8000b98:	2206      	movs	r2, #6
 8000b9a:	4915      	ldr	r1, [pc, #84]	@ (8000bf0 <taskSendFake+0x94>)
 8000b9c:	4815      	ldr	r0, [pc, #84]	@ (8000bf4 <taskSendFake+0x98>)
 8000b9e:	f009 fac7 	bl	800a130 <HAL_UART_Transmit>
		  vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000ba2:	2007      	movs	r0, #7
 8000ba4:	f00c fc1e 	bl	800d3e4 <vTaskDelay>
		  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000ba8:	bf00      	nop
 8000baa:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <taskSendFake+0x8c>)
 8000bac:	f004 fa0b 	bl	8004fc6 <HAL_I2C_GetState>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b20      	cmp	r3, #32
 8000bb4:	d1f9      	bne.n	8000baa <taskSendFake+0x4e>
		  xSemaphoreGive(i2c_semap);
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <taskSendFake+0x88>)
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f00b fcaa 	bl	800c518 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(losuj_od_1_do_20()*100));
 8000bc4:	f7ff ff44 	bl	8000a50 <losuj_od_1_do_20>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <taskSendFake+0x9c>)
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <taskSendFake+0xa0>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00c fc02 	bl	800d3e4 <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000be0:	e7c0      	b.n	8000b64 <taskSendFake+0x8>
 8000be2:	bf00      	nop
 8000be4:	240001dc 	.word	0x240001dc
 8000be8:	24000090 	.word	0x24000090
 8000bec:	080104c4 	.word	0x080104c4
 8000bf0:	080104cc 	.word	0x080104cc
 8000bf4:	2400023c 	.word	0x2400023c
 8000bf8:	000186a0 	.word	0x000186a0
 8000bfc:	10624dd3 	.word	0x10624dd3

08000c00 <taskSend>:
		  }*/
	}
}


void taskSend(void *nothink){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <taskSend+0x88>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00b ff93 	bl	800cb3c <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000c16:	bf00      	nop
 8000c18:	481c      	ldr	r0, [pc, #112]	@ (8000c8c <taskSend+0x8c>)
 8000c1a:	f004 f9d4 	bl	8004fc6 <HAL_I2C_GetState>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d1f9      	bne.n	8000c18 <taskSend+0x18>
		vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000c24:	2007      	movs	r0, #7
 8000c26:	f00c fbdd 	bl	800d3e4 <vTaskDelay>
		  //retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6, 2000);
		  retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6);
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	4a18      	ldr	r2, [pc, #96]	@ (8000c90 <taskSend+0x90>)
 8000c2e:	2178      	movs	r1, #120	@ 0x78
 8000c30:	4816      	ldr	r0, [pc, #88]	@ (8000c8c <taskSend+0x8c>)
 8000c32:	f003 fee7 	bl	8004a04 <HAL_I2C_Master_Transmit_DMA>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "Transmition1\r\n", 14, 200);
 8000c3a:	23c8      	movs	r3, #200	@ 0xc8
 8000c3c:	220e      	movs	r2, #14
 8000c3e:	4915      	ldr	r1, [pc, #84]	@ (8000c94 <taskSend+0x94>)
 8000c40:	4815      	ldr	r0, [pc, #84]	@ (8000c98 <taskSend+0x98>)
 8000c42:	f009 fa75 	bl	800a130 <HAL_UART_Transmit>
		  vTaskDelay(pdMS_TO_TICKS(ESP_delay));
 8000c46:	2007      	movs	r0, #7
 8000c48:	f00c fbcc 	bl	800d3e4 <vTaskDelay>
		  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000c4c:	bf00      	nop
 8000c4e:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <taskSend+0x8c>)
 8000c50:	f004 f9b9 	bl	8004fc6 <HAL_I2C_GetState>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b20      	cmp	r3, #32
 8000c58:	d1f9      	bne.n	8000c4e <taskSend+0x4e>
		  xSemaphoreGive(i2c_semap);
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <taskSend+0x88>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	f00b fc58 	bl	800c518 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(losuj_od_1_do_20()*100));
 8000c68:	f7ff fef2 	bl	8000a50 <losuj_od_1_do_20>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <taskSend+0x9c>)
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <taskSend+0xa0>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	099b      	lsrs	r3, r3, #6
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00c fbb0 	bl	800d3e4 <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000c84:	e7c0      	b.n	8000c08 <taskSend+0x8>
 8000c86:	bf00      	nop
 8000c88:	240001dc 	.word	0x240001dc
 8000c8c:	24000090 	.word	0x24000090
 8000c90:	080104c4 	.word	0x080104c4
 8000c94:	080104d4 	.word	0x080104d4
 8000c98:	2400023c 	.word	0x2400023c
 8000c9c:	000186a0 	.word	0x000186a0
 8000ca0:	10624dd3 	.word	0x10624dd3

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f000 fc11 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 f87b 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb2:	f7ff fd3b 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb6:	f7ff fce3 	bl	8000680 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cba:	f000 fb21 	bl	8001300 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000cbe:	f7ff fd7b 	bl	80007b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  srand(time(NULL)); // Inicjalizacja generatora losowego
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f00e fcbe 	bl	800f644 <time>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f00e fb3e 	bl	800f350 <srand>

  while(esp32I2cInitialised!=true){
 8000cd4:	e005      	b.n	8000ce2 <main+0x3e>
	  HAL_UART_Transmit(&huart1, "1\r\n", 3, 200);
 8000cd6:	23c8      	movs	r3, #200	@ 0xc8
 8000cd8:	2203      	movs	r2, #3
 8000cda:	4925      	ldr	r1, [pc, #148]	@ (8000d70 <main+0xcc>)
 8000cdc:	4825      	ldr	r0, [pc, #148]	@ (8000d74 <main+0xd0>)
 8000cde:	f009 fa27 	bl	800a130 <HAL_UART_Transmit>
  while(esp32I2cInitialised!=true){
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <main+0xd4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1f2      	bne.n	8000cd6 <main+0x32>
  }

  CountingSemaphore = xSemaphoreCreateCounting(20, 0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2014      	movs	r0, #20
 8000cf4:	f00b fbdb 	bl	800c4ae <xQueueCreateCountingSemaphore>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <main+0xd8>)
 8000cfc:	6013      	str	r3, [r2, #0]
  i2c_semap = xSemaphoreCreateBinary();
 8000cfe:	2203      	movs	r2, #3
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f00b fb75 	bl	800c3f2 <xQueueGenericCreate>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000d80 <main+0xdc>)
 8000d0c:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(i2c_semap);
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <main+0xdc>)
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	2300      	movs	r3, #0
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	f00b fbfe 	bl	800c518 <xQueueGenericSend>
  xTaskCreate(taskSend, "i2cSend", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSend);
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <main+0xe0>)
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	2305      	movs	r3, #5
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d2a:	4917      	ldr	r1, [pc, #92]	@ (8000d88 <main+0xe4>)
 8000d2c:	4817      	ldr	r0, [pc, #92]	@ (8000d8c <main+0xe8>)
 8000d2e:	f00c f9fb 	bl	800d128 <xTaskCreate>
  xTaskCreate(taskSendFake, "i2cSendFake", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSendFake);
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <main+0xec>)
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	2305      	movs	r3, #5
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d40:	4914      	ldr	r1, [pc, #80]	@ (8000d94 <main+0xf0>)
 8000d42:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <main+0xf4>)
 8000d44:	f00c f9f0 	bl	800d128 <xTaskCreate>
  xTaskCreate(taskReceive, "i2cRec", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskReceive);
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <main+0xf8>)
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2300      	movs	r3, #0
 8000d52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d56:	4912      	ldr	r1, [pc, #72]	@ (8000da0 <main+0xfc>)
 8000d58:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <main+0x100>)
 8000d5a:	f00c f9e5 	bl	800d128 <xTaskCreate>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d5e:	f00b f881 	bl	800be64 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d62:	f7ff fcc9 	bl	80006f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d66:	f00b f8a1 	bl	800beac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6a:	bf00      	nop
 8000d6c:	e7fd      	b.n	8000d6a <main+0xc6>
 8000d6e:	bf00      	nop
 8000d70:	080104e4 	.word	0x080104e4
 8000d74:	2400023c 	.word	0x2400023c
 8000d78:	240001d8 	.word	0x240001d8
 8000d7c:	240001d4 	.word	0x240001d4
 8000d80:	240001dc 	.word	0x240001dc
 8000d84:	240001e4 	.word	0x240001e4
 8000d88:	080104e8 	.word	0x080104e8
 8000d8c:	08000c01 	.word	0x08000c01
 8000d90:	240001e0 	.word	0x240001e0
 8000d94:	080104f0 	.word	0x080104f0
 8000d98:	08000b5d 	.word	0x08000b5d
 8000d9c:	240001e8 	.word	0x240001e8
 8000da0:	080104fc 	.word	0x080104fc
 8000da4:	08000a7d 	.word	0x08000a7d

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09c      	sub	sp, #112	@ 0x70
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	224c      	movs	r2, #76	@ 0x4c
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f00e fc3b 	bl	800f632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00e fc35 	bl	800f632 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000dc8:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <SystemClock_Config+0xe4>)
 8000dca:	f04f 32ff 	mov.w	r2, #4294967295
 8000dce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f006 f874 	bl	8006ec0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <SystemClock_Config+0xe8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e90 <SystemClock_Config+0xe8>)
 8000de2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <SystemClock_Config+0xe8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000df4:	bf00      	nop
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <SystemClock_Config+0xe8>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e02:	d1f8      	bne.n	8000df6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	2302      	movs	r3, #2
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000e0c:	2340      	movs	r3, #64	@ 0x40
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2300      	movs	r3, #0
 8000e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000e1c:	2323      	movs	r3, #35	@ 0x23
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 f879 	bl	8006f34 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000e48:	f000 f836 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	233f      	movs	r3, #63	@ 0x3f
 8000e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2303      	movs	r3, #3
 8000e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e5c:	2340      	movs	r3, #64	@ 0x40
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e60:	2340      	movs	r3, #64	@ 0x40
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e6a:	2340      	movs	r3, #64	@ 0x40
 8000e6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2106      	movs	r1, #6
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 fc90 	bl	8007798 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000e7e:	f000 f81b 	bl	8000eb8 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3770      	adds	r7, #112	@ 0x70
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58024800 	.word	0x58024800

08000e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea6:	f000 fb4f 	bl	8001548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_MspInit+0x38>)
 8000ecc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_MspInit+0x38>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_MspInit+0x38>)
 8000edc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	210f      	movs	r1, #15
 8000eec:	f06f 0001 	mvn.w	r0, #1
 8000ef0:	f000 fc02 	bl	80016f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	58024400 	.word	0x58024400

08000f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d844      	bhi.n	8000f98 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	2019      	movs	r0, #25
 8000f14:	f000 fbf0 	bl	80016f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f18:	2019      	movs	r0, #25
 8000f1a:	f000 fc07 	bl	800172c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f1e:	4a24      	ldr	r2, [pc, #144]	@ (8000fb0 <HAL_InitTick+0xb0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <HAL_InitTick+0xb4>)
 8000f26:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f2a:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <HAL_InitTick+0xb4>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_InitTick+0xb4>)
 8000f36:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f42:	f107 020c 	add.w	r2, r7, #12
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 ffaf 	bl	8007eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f52:	f006 ff97 	bl	8007e84 <HAL_RCC_GetPCLK2Freq>
 8000f56:	4603      	mov	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <HAL_InitTick+0xb8>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	0c9b      	lsrs	r3, r3, #18
 8000f66:	3b01      	subs	r3, #1
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f6c:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <HAL_InitTick+0xc0>)
 8000f6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f76:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f78:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f7c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f8a:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f8c:	f008 fdb2 	bl	8009af4 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d107      	bne.n	8000fa6 <HAL_InitTick+0xa6>
 8000f96:	e001      	b.n	8000f9c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e005      	b.n	8000fa8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f9c:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <HAL_InitTick+0xbc>)
 8000f9e:	f008 fe0b 	bl	8009bb8 <HAL_TIM_Base_Start_IT>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3738      	adds	r7, #56	@ 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	24000008 	.word	0x24000008
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	240001ec 	.word	0x240001ec
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DMA1_Stream0_IRQHandler+0x10>)
 8001002:	f001 fefd 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	240000e4 	.word	0x240000e4

08001010 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <DMA1_Stream1_IRQHandler+0x10>)
 8001016:	f001 fef3 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2400015c 	.word	0x2400015c

08001024 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8001028:	2020      	movs	r0, #32
 800102a:	f003 fc35 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <TIM1_UP_IRQHandler+0x10>)
 800103a:	f008 fe35 	bl	8009ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	240001ec 	.word	0x240001ec

08001048 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <I2C1_EV_IRQHandler+0x10>)
 800104e:	f003 fedd 	bl	8004e0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000090 	.word	0x24000090

0800105c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <I2C1_ER_IRQHandler+0x10>)
 8001062:	f003 feed 	bl	8004e40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	24000090 	.word	0x24000090

08001070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <USART1_IRQHandler+0x10>)
 8001076:	f009 f8e9 	bl	800a24c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2400023c 	.word	0x2400023c

08001084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_kill>:

int _kill(int pid, int sig)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800109e:	f00e fb9b 	bl	800f7d8 <__errno>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2216      	movs	r2, #22
 80010a6:	601a      	str	r2, [r3, #0]
  return -1;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_exit>:

void _exit (int status)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe7 	bl	8001094 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010c6:	bf00      	nop
 80010c8:	e7fd      	b.n	80010c6 <_exit+0x12>

080010ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e00a      	b.n	80010f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010dc:	f3af 8000 	nop.w
 80010e0:	4601      	mov	r1, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	60ba      	str	r2, [r7, #8]
 80010e8:	b2ca      	uxtb	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbf0      	blt.n	80010dc <_read+0x12>
  }

  return len;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e009      	b.n	800112a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbf1      	blt.n	8001116 <_write+0x12>
  }
  return len;
 8001132:	687b      	ldr	r3, [r7, #4]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_close>:

int _close(int file)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001164:	605a      	str	r2, [r3, #4]
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_isatty>:

int _isatty(int file)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	@ (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f00e fb00 	bl	800f7d8 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	24100000 	.word	0x24100000
 8001204:	00000400 	.word	0x00000400
 8001208:	24000238 	.word	0x24000238
 800120c:	24004e18 	.word	0x24004e18

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001214:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <SystemInit+0xd0>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121a:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <SystemInit+0xd0>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001224:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <SystemInit+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	2b02      	cmp	r3, #2
 800122e:	d807      	bhi.n	8001240 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <SystemInit+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	4a2a      	ldr	r2, [pc, #168]	@ (80012e4 <SystemInit+0xd4>)
 800123a:	f043 0303 	orr.w	r3, r3, #3
 800123e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <SystemInit+0xd8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <SystemInit+0xd8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <SystemInit+0xd8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <SystemInit+0xd8>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4924      	ldr	r1, [pc, #144]	@ (80012e8 <SystemInit+0xd8>)
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <SystemInit+0xdc>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <SystemInit+0xd4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <SystemInit+0xd4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 030f 	bic.w	r3, r3, #15
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <SystemInit+0xd4>)
 8001274:	f043 0303 	orr.w	r3, r3, #3
 8001278:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <SystemInit+0xd8>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <SystemInit+0xd8>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <SystemInit+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <SystemInit+0xd8>)
 800128e:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <SystemInit+0xe0>)
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <SystemInit+0xd8>)
 8001294:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <SystemInit+0xe4>)
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <SystemInit+0xd8>)
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <SystemInit+0xe8>)
 800129c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <SystemInit+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <SystemInit+0xd8>)
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <SystemInit+0xe8>)
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <SystemInit+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <SystemInit+0xd8>)
 80012b2:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <SystemInit+0xe8>)
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <SystemInit+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <SystemInit+0xd8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a09      	ldr	r2, [pc, #36]	@ (80012e8 <SystemInit+0xd8>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <SystemInit+0xd8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <SystemInit+0xec>)
 80012d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	52002000 	.word	0x52002000
 80012e8:	58024400 	.word	0x58024400
 80012ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f0:	02020200 	.word	0x02020200
 80012f4:	01ff0000 	.word	0x01ff0000
 80012f8:	01010280 	.word	0x01010280
 80012fc:	52004000 	.word	0x52004000

08001300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001306:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001348:	4811      	ldr	r0, [pc, #68]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800134a:	f008 fea1 	bl	800a090 <HAL_UART_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f7ff fdb0 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800135c:	f00a fc74 	bl	800bc48 <HAL_UARTEx_SetTxFifoThreshold>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f7ff fda7 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4808      	ldr	r0, [pc, #32]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800136e:	f00a fca9 	bl	800bcc4 <HAL_UARTEx_SetRxFifoThreshold>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f7ff fd9e 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	@ (8001390 <MX_USART1_UART_Init+0x90>)
 800137e:	f00a fc2a 	bl	800bbd6 <HAL_UARTEx_DisableFifoMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f7ff fd96 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2400023c 	.word	0x2400023c
 8001394:	40011000 	.word	0x40011000

08001398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0ba      	sub	sp, #232	@ 0xe8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	22c0      	movs	r2, #192	@ 0xc0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00e f93a 	bl	800f632 <memset>
  if(uartHandle->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001470 <HAL_UART_MspInit+0xd8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d14e      	bne.n	8001466 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013c8:	f04f 0201 	mov.w	r2, #1
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 fda8 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013ea:	f7ff fd65 	bl	8000eb8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 80013f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 8001400:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 800140e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_UART_MspInit+0xdc>)
 800141e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 800142a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800142e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001444:	2304      	movs	r3, #4
 8001446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <HAL_UART_MspInit+0xe0>)
 8001452:	f003 f871 	bl	8004538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2107      	movs	r1, #7
 800145a:	2025      	movs	r0, #37	@ 0x25
 800145c:	f000 f94c 	bl	80016f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001460:	2025      	movs	r0, #37	@ 0x25
 8001462:	f000 f963 	bl	800172c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	37e8      	adds	r7, #232	@ 0xe8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40011000 	.word	0x40011000
 8001474:	58024400 	.word	0x58024400
 8001478:	58020400 	.word	0x58020400

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001480:	f7ff fec6 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f00e f99b 	bl	800f7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff fbf9 	bl	8000ca4 <main>
  bx  lr
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80014b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014bc:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80014c0:	08010670 	.word	0x08010670
  ldr r2, =_sbss
 80014c4:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80014c8:	24004e14 	.word	0x24004e14

080014cc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d6:	2003      	movs	r0, #3
 80014d8:	f000 f903 	bl	80016e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80014dc:	f006 fb12 	bl	8007b04 <HAL_RCC_GetSysClockFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_Init+0x68>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	4913      	ldr	r1, [pc, #76]	@ (800153c <HAL_Init+0x6c>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
 80014f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_Init+0x68>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <HAL_Init+0x6c>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	4a0b      	ldr	r2, [pc, #44]	@ (8001540 <HAL_Init+0x70>)
 8001512:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001514:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_Init+0x74>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	200f      	movs	r0, #15
 800151c:	f7ff fcf0 	bl	8000f00 <HAL_InitTick>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e002      	b.n	8001530 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800152a:	f7ff fccb 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	58024400 	.word	0x58024400
 800153c:	08010540 	.word	0x08010540
 8001540:	24000004 	.word	0x24000004
 8001544:	24000000 	.word	0x24000000

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2400000c 	.word	0x2400000c
 800156c:	240002d0 	.word	0x240002d0

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	240002d0 	.word	0x240002d0

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	05fa0000 	.word	0x05fa0000

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	@ (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff4c 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001706:	f7ff ff63 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 800170a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	6978      	ldr	r0, [r7, #20]
 8001712:	f7ff ffb3 	bl	800167c <NVIC_EncodePriority>
 8001716:	4602      	mov	r2, r0
 8001718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff82 	bl	8001628 <__NVIC_SetPriority>
}
 8001724:	bf00      	nop
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff56 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ff0e 	bl	8001570 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e37d      	b.n	8001e5c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a66      	ldr	r2, [pc, #408]	@ (8001900 <HAL_DMA_Init+0x1b8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d04a      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a65      	ldr	r2, [pc, #404]	@ (8001904 <HAL_DMA_Init+0x1bc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d045      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a63      	ldr	r2, [pc, #396]	@ (8001908 <HAL_DMA_Init+0x1c0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d040      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a62      	ldr	r2, [pc, #392]	@ (800190c <HAL_DMA_Init+0x1c4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d03b      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a60      	ldr	r2, [pc, #384]	@ (8001910 <HAL_DMA_Init+0x1c8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d036      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5f      	ldr	r2, [pc, #380]	@ (8001914 <HAL_DMA_Init+0x1cc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d031      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001918 <HAL_DMA_Init+0x1d0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02c      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a5c      	ldr	r2, [pc, #368]	@ (800191c <HAL_DMA_Init+0x1d4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d027      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001920 <HAL_DMA_Init+0x1d8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d022      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a59      	ldr	r2, [pc, #356]	@ (8001924 <HAL_DMA_Init+0x1dc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d01d      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a57      	ldr	r2, [pc, #348]	@ (8001928 <HAL_DMA_Init+0x1e0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d018      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a56      	ldr	r2, [pc, #344]	@ (800192c <HAL_DMA_Init+0x1e4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d013      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a54      	ldr	r2, [pc, #336]	@ (8001930 <HAL_DMA_Init+0x1e8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00e      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a53      	ldr	r2, [pc, #332]	@ (8001934 <HAL_DMA_Init+0x1ec>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d009      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a51      	ldr	r2, [pc, #324]	@ (8001938 <HAL_DMA_Init+0x1f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d004      	beq.n	8001800 <HAL_DMA_Init+0xb8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a50      	ldr	r2, [pc, #320]	@ (800193c <HAL_DMA_Init+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_DMA_Init+0xbc>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_DMA_Init+0xbe>
 8001804:	2300      	movs	r3, #0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 813c 	beq.w	8001a84 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a37      	ldr	r2, [pc, #220]	@ (8001900 <HAL_DMA_Init+0x1b8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d04a      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a36      	ldr	r2, [pc, #216]	@ (8001904 <HAL_DMA_Init+0x1bc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d045      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a34      	ldr	r2, [pc, #208]	@ (8001908 <HAL_DMA_Init+0x1c0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d040      	beq.n	80018bc <HAL_DMA_Init+0x174>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a33      	ldr	r2, [pc, #204]	@ (800190c <HAL_DMA_Init+0x1c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d03b      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a31      	ldr	r2, [pc, #196]	@ (8001910 <HAL_DMA_Init+0x1c8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d036      	beq.n	80018bc <HAL_DMA_Init+0x174>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a30      	ldr	r2, [pc, #192]	@ (8001914 <HAL_DMA_Init+0x1cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d031      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a2e      	ldr	r2, [pc, #184]	@ (8001918 <HAL_DMA_Init+0x1d0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d02c      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2d      	ldr	r2, [pc, #180]	@ (800191c <HAL_DMA_Init+0x1d4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d027      	beq.n	80018bc <HAL_DMA_Init+0x174>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <HAL_DMA_Init+0x1d8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d022      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2a      	ldr	r2, [pc, #168]	@ (8001924 <HAL_DMA_Init+0x1dc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d01d      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a28      	ldr	r2, [pc, #160]	@ (8001928 <HAL_DMA_Init+0x1e0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d018      	beq.n	80018bc <HAL_DMA_Init+0x174>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a27      	ldr	r2, [pc, #156]	@ (800192c <HAL_DMA_Init+0x1e4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d013      	beq.n	80018bc <HAL_DMA_Init+0x174>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a25      	ldr	r2, [pc, #148]	@ (8001930 <HAL_DMA_Init+0x1e8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00e      	beq.n	80018bc <HAL_DMA_Init+0x174>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a24      	ldr	r2, [pc, #144]	@ (8001934 <HAL_DMA_Init+0x1ec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_DMA_Init+0x174>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <HAL_DMA_Init+0x1f0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_DMA_Init+0x174>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a21      	ldr	r2, [pc, #132]	@ (800193c <HAL_DMA_Init+0x1f4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d108      	bne.n	80018ce <HAL_DMA_Init+0x186>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e007      	b.n	80018de <HAL_DMA_Init+0x196>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018de:	e02f      	b.n	8001940 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e0:	f7ff fe46 	bl	8001570 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d928      	bls.n	8001940 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e2ad      	b.n	8001e5c <HAL_DMA_Init+0x714>
 8001900:	40020010 	.word	0x40020010
 8001904:	40020028 	.word	0x40020028
 8001908:	40020040 	.word	0x40020040
 800190c:	40020058 	.word	0x40020058
 8001910:	40020070 	.word	0x40020070
 8001914:	40020088 	.word	0x40020088
 8001918:	400200a0 	.word	0x400200a0
 800191c:	400200b8 	.word	0x400200b8
 8001920:	40020410 	.word	0x40020410
 8001924:	40020428 	.word	0x40020428
 8001928:	40020440 	.word	0x40020440
 800192c:	40020458 	.word	0x40020458
 8001930:	40020470 	.word	0x40020470
 8001934:	40020488 	.word	0x40020488
 8001938:	400204a0 	.word	0x400204a0
 800193c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1c8      	bne.n	80018e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4b73      	ldr	r3, [pc, #460]	@ (8001b28 <HAL_DMA_Init+0x3e0>)
 800195a:	4013      	ands	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001966:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	2b04      	cmp	r3, #4
 8001992:	d107      	bne.n	80019a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4313      	orrs	r3, r2
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b28      	cmp	r3, #40	@ 0x28
 80019aa:	d903      	bls.n	80019b4 <HAL_DMA_Init+0x26c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80019b2:	d91f      	bls.n	80019f4 <HAL_DMA_Init+0x2ac>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80019ba:	d903      	bls.n	80019c4 <HAL_DMA_Init+0x27c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b42      	cmp	r3, #66	@ 0x42
 80019c2:	d917      	bls.n	80019f4 <HAL_DMA_Init+0x2ac>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b46      	cmp	r3, #70	@ 0x46
 80019ca:	d903      	bls.n	80019d4 <HAL_DMA_Init+0x28c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b48      	cmp	r3, #72	@ 0x48
 80019d2:	d90f      	bls.n	80019f4 <HAL_DMA_Init+0x2ac>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80019da:	d903      	bls.n	80019e4 <HAL_DMA_Init+0x29c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b52      	cmp	r3, #82	@ 0x52
 80019e2:	d907      	bls.n	80019f4 <HAL_DMA_Init+0x2ac>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b73      	cmp	r3, #115	@ 0x73
 80019ea:	d905      	bls.n	80019f8 <HAL_DMA_Init+0x2b0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b77      	cmp	r3, #119	@ 0x77
 80019f2:	d801      	bhi.n	80019f8 <HAL_DMA_Init+0x2b0>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_DMA_Init+0x2b2>
 80019f8:	2300      	movs	r3, #0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a04:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f023 0307 	bic.w	r3, r3, #7
 8001a1c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d117      	bne.n	8001a60 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00e      	beq.n	8001a60 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f002 fbee 	bl	8004224 <DMA_CheckFifoParam>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2240      	movs	r2, #64	@ 0x40
 8001a52:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e1fd      	b.n	8001e5c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f002 fb29 	bl	80040c0 <DMA_CalcBaseAndBitshift>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	223f      	movs	r2, #63	@ 0x3f
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	e0fd      	b.n	8001c80 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a28      	ldr	r2, [pc, #160]	@ (8001b2c <HAL_DMA_Init+0x3e4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d04a      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_DMA_Init+0x3e8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d045      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a25      	ldr	r2, [pc, #148]	@ (8001b34 <HAL_DMA_Init+0x3ec>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d040      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <HAL_DMA_Init+0x3f0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d03b      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	@ (8001b3c <HAL_DMA_Init+0x3f4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d036      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <HAL_DMA_Init+0x3f8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d031      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_DMA_Init+0x3fc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02c      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1e      	ldr	r2, [pc, #120]	@ (8001b48 <HAL_DMA_Init+0x400>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d027      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b4c <HAL_DMA_Init+0x404>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d022      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <HAL_DMA_Init+0x408>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d01d      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <HAL_DMA_Init+0x40c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d018      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <HAL_DMA_Init+0x410>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <HAL_DMA_Init+0x414>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00e      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a15      	ldr	r2, [pc, #84]	@ (8001b60 <HAL_DMA_Init+0x418>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <HAL_DMA_Init+0x41c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d004      	beq.n	8001b24 <HAL_DMA_Init+0x3dc>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <HAL_DMA_Init+0x420>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d123      	bne.n	8001b6c <HAL_DMA_Init+0x424>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e022      	b.n	8001b6e <HAL_DMA_Init+0x426>
 8001b28:	fe10803f 	.word	0xfe10803f
 8001b2c:	48022c08 	.word	0x48022c08
 8001b30:	48022c1c 	.word	0x48022c1c
 8001b34:	48022c30 	.word	0x48022c30
 8001b38:	48022c44 	.word	0x48022c44
 8001b3c:	48022c58 	.word	0x48022c58
 8001b40:	48022c6c 	.word	0x48022c6c
 8001b44:	48022c80 	.word	0x48022c80
 8001b48:	48022c94 	.word	0x48022c94
 8001b4c:	58025408 	.word	0x58025408
 8001b50:	5802541c 	.word	0x5802541c
 8001b54:	58025430 	.word	0x58025430
 8001b58:	58025444 	.word	0x58025444
 8001b5c:	58025458 	.word	0x58025458
 8001b60:	5802546c 	.word	0x5802546c
 8001b64:	58025480 	.word	0x58025480
 8001b68:	58025494 	.word	0x58025494
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d07d      	beq.n	8001c6e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7f      	ldr	r2, [pc, #508]	@ (8001d74 <HAL_DMA_Init+0x62c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d021      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a7d      	ldr	r2, [pc, #500]	@ (8001d78 <HAL_DMA_Init+0x630>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01c      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8001d7c <HAL_DMA_Init+0x634>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d017      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a7a      	ldr	r2, [pc, #488]	@ (8001d80 <HAL_DMA_Init+0x638>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d012      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a79      	ldr	r2, [pc, #484]	@ (8001d84 <HAL_DMA_Init+0x63c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a77      	ldr	r2, [pc, #476]	@ (8001d88 <HAL_DMA_Init+0x640>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d008      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a76      	ldr	r2, [pc, #472]	@ (8001d8c <HAL_DMA_Init+0x644>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA_Init+0x478>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a74      	ldr	r2, [pc, #464]	@ (8001d90 <HAL_DMA_Init+0x648>)
 8001bbe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4b6e      	ldr	r3, [pc, #440]	@ (8001d94 <HAL_DMA_Init+0x64c>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b40      	cmp	r3, #64	@ 0x40
 8001be6:	d008      	beq.n	8001bfa <HAL_DMA_Init+0x4b2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b80      	cmp	r3, #128	@ 0x80
 8001bee:	d102      	bne.n	8001bf6 <HAL_DMA_Init+0x4ae>
 8001bf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bf4:	e002      	b.n	8001bfc <HAL_DMA_Init+0x4b4>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_DMA_Init+0x4b4>
 8001bfa:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68d2      	ldr	r2, [r2, #12]
 8001c00:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c02:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c0a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c12:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c1a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c22:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c2a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <HAL_DMA_Init+0x650>)
 8001c42:	4413      	add	r3, r2
 8001c44:	4a55      	ldr	r2, [pc, #340]	@ (8001d9c <HAL_DMA_Init+0x654>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	009a      	lsls	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f002 fa34 	bl	80040c0 <DMA_CalcBaseAndBitshift>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2201      	movs	r2, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	e008      	b.n	8001c80 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2240      	movs	r2, #64	@ 0x40
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0ed      	b.n	8001e5c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <HAL_DMA_Init+0x658>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d072      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <HAL_DMA_Init+0x65c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d06d      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a43      	ldr	r2, [pc, #268]	@ (8001da8 <HAL_DMA_Init+0x660>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d068      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a42      	ldr	r2, [pc, #264]	@ (8001dac <HAL_DMA_Init+0x664>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d063      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a40      	ldr	r2, [pc, #256]	@ (8001db0 <HAL_DMA_Init+0x668>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d05e      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8001db4 <HAL_DMA_Init+0x66c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d059      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8001db8 <HAL_DMA_Init+0x670>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d054      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <HAL_DMA_Init+0x674>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04f      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8001dc0 <HAL_DMA_Init+0x678>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d04a      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a39      	ldr	r2, [pc, #228]	@ (8001dc4 <HAL_DMA_Init+0x67c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d045      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a37      	ldr	r2, [pc, #220]	@ (8001dc8 <HAL_DMA_Init+0x680>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d040      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a36      	ldr	r2, [pc, #216]	@ (8001dcc <HAL_DMA_Init+0x684>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d03b      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a34      	ldr	r2, [pc, #208]	@ (8001dd0 <HAL_DMA_Init+0x688>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d036      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a33      	ldr	r2, [pc, #204]	@ (8001dd4 <HAL_DMA_Init+0x68c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d031      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a31      	ldr	r2, [pc, #196]	@ (8001dd8 <HAL_DMA_Init+0x690>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02c      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a30      	ldr	r2, [pc, #192]	@ (8001ddc <HAL_DMA_Init+0x694>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d027      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a13      	ldr	r2, [pc, #76]	@ (8001d74 <HAL_DMA_Init+0x62c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <HAL_DMA_Init+0x630>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01d      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_DMA_Init+0x634>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <HAL_DMA_Init+0x638>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d84 <HAL_DMA_Init+0x63c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <HAL_DMA_Init+0x640>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <HAL_DMA_Init+0x644>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_Init+0x628>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a09      	ldr	r2, [pc, #36]	@ (8001d90 <HAL_DMA_Init+0x648>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d137      	bne.n	8001de0 <HAL_DMA_Init+0x698>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e036      	b.n	8001de2 <HAL_DMA_Init+0x69a>
 8001d74:	58025408 	.word	0x58025408
 8001d78:	5802541c 	.word	0x5802541c
 8001d7c:	58025430 	.word	0x58025430
 8001d80:	58025444 	.word	0x58025444
 8001d84:	58025458 	.word	0x58025458
 8001d88:	5802546c 	.word	0x5802546c
 8001d8c:	58025480 	.word	0x58025480
 8001d90:	58025494 	.word	0x58025494
 8001d94:	fffe000f 	.word	0xfffe000f
 8001d98:	a7fdabf8 	.word	0xa7fdabf8
 8001d9c:	cccccccd 	.word	0xcccccccd
 8001da0:	40020010 	.word	0x40020010
 8001da4:	40020028 	.word	0x40020028
 8001da8:	40020040 	.word	0x40020040
 8001dac:	40020058 	.word	0x40020058
 8001db0:	40020070 	.word	0x40020070
 8001db4:	40020088 	.word	0x40020088
 8001db8:	400200a0 	.word	0x400200a0
 8001dbc:	400200b8 	.word	0x400200b8
 8001dc0:	40020410 	.word	0x40020410
 8001dc4:	40020428 	.word	0x40020428
 8001dc8:	40020440 	.word	0x40020440
 8001dcc:	40020458 	.word	0x40020458
 8001dd0:	40020470 	.word	0x40020470
 8001dd4:	40020488 	.word	0x40020488
 8001dd8:	400204a0 	.word	0x400204a0
 8001ddc:	400204b8 	.word	0x400204b8
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d032      	beq.n	8001e4c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f002 fa98 	bl	800431c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b80      	cmp	r3, #128	@ 0x80
 8001df2:	d102      	bne.n	8001dfa <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_DMA_Init+0x6f2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d80c      	bhi.n	8001e3a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f002 fb15 	bl	8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	e008      	b.n	8001e4c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e226      	b.n	80022ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Start_IT+0x2a>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e21f      	b.n	80022ce <HAL_DMA_Start_IT+0x46a>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	f040 820a 	bne.w	80022b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a68      	ldr	r2, [pc, #416]	@ (8002058 <HAL_DMA_Start_IT+0x1f4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04a      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a66      	ldr	r2, [pc, #408]	@ (800205c <HAL_DMA_Start_IT+0x1f8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d045      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a65      	ldr	r2, [pc, #404]	@ (8002060 <HAL_DMA_Start_IT+0x1fc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d040      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a63      	ldr	r2, [pc, #396]	@ (8002064 <HAL_DMA_Start_IT+0x200>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d03b      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a62      	ldr	r2, [pc, #392]	@ (8002068 <HAL_DMA_Start_IT+0x204>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a60      	ldr	r2, [pc, #384]	@ (800206c <HAL_DMA_Start_IT+0x208>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8002070 <HAL_DMA_Start_IT+0x20c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d02c      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5d      	ldr	r2, [pc, #372]	@ (8002074 <HAL_DMA_Start_IT+0x210>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5c      	ldr	r2, [pc, #368]	@ (8002078 <HAL_DMA_Start_IT+0x214>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a5a      	ldr	r2, [pc, #360]	@ (800207c <HAL_DMA_Start_IT+0x218>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a59      	ldr	r2, [pc, #356]	@ (8002080 <HAL_DMA_Start_IT+0x21c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a57      	ldr	r2, [pc, #348]	@ (8002084 <HAL_DMA_Start_IT+0x220>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a56      	ldr	r2, [pc, #344]	@ (8002088 <HAL_DMA_Start_IT+0x224>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a54      	ldr	r2, [pc, #336]	@ (800208c <HAL_DMA_Start_IT+0x228>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a53      	ldr	r2, [pc, #332]	@ (8002090 <HAL_DMA_Start_IT+0x22c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_DMA_Start_IT+0xee>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	@ (8002094 <HAL_DMA_Start_IT+0x230>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d108      	bne.n	8001f64 <HAL_DMA_Start_IT+0x100>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_DMA_Start_IT+0x110>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f001 febc 	bl	8003cf8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a34      	ldr	r2, [pc, #208]	@ (8002058 <HAL_DMA_Start_IT+0x1f4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d04a      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a33      	ldr	r2, [pc, #204]	@ (800205c <HAL_DMA_Start_IT+0x1f8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d045      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a31      	ldr	r2, [pc, #196]	@ (8002060 <HAL_DMA_Start_IT+0x1fc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a30      	ldr	r2, [pc, #192]	@ (8002064 <HAL_DMA_Start_IT+0x200>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d03b      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2e      	ldr	r2, [pc, #184]	@ (8002068 <HAL_DMA_Start_IT+0x204>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d036      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <HAL_DMA_Start_IT+0x208>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d031      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002070 <HAL_DMA_Start_IT+0x20c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02c      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <HAL_DMA_Start_IT+0x210>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d027      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a28      	ldr	r2, [pc, #160]	@ (8002078 <HAL_DMA_Start_IT+0x214>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a27      	ldr	r2, [pc, #156]	@ (800207c <HAL_DMA_Start_IT+0x218>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01d      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a25      	ldr	r2, [pc, #148]	@ (8002080 <HAL_DMA_Start_IT+0x21c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a24      	ldr	r2, [pc, #144]	@ (8002084 <HAL_DMA_Start_IT+0x220>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <HAL_DMA_Start_IT+0x224>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a21      	ldr	r2, [pc, #132]	@ (800208c <HAL_DMA_Start_IT+0x228>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1f      	ldr	r2, [pc, #124]	@ (8002090 <HAL_DMA_Start_IT+0x22c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_DMA_Start_IT+0x1bc>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <HAL_DMA_Start_IT+0x230>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_DMA_Start_IT+0x1c0>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_DMA_Start_IT+0x1c2>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d036      	beq.n	8002098 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 021e 	bic.w	r2, r3, #30
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0216 	orr.w	r2, r2, #22
 800203c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03e      	beq.n	80020c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0208 	orr.w	r2, r2, #8
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e035      	b.n	80020c4 <HAL_DMA_Start_IT+0x260>
 8002058:	40020010 	.word	0x40020010
 800205c:	40020028 	.word	0x40020028
 8002060:	40020040 	.word	0x40020040
 8002064:	40020058 	.word	0x40020058
 8002068:	40020070 	.word	0x40020070
 800206c:	40020088 	.word	0x40020088
 8002070:	400200a0 	.word	0x400200a0
 8002074:	400200b8 	.word	0x400200b8
 8002078:	40020410 	.word	0x40020410
 800207c:	40020428 	.word	0x40020428
 8002080:	40020440 	.word	0x40020440
 8002084:	40020458 	.word	0x40020458
 8002088:	40020470 	.word	0x40020470
 800208c:	40020488 	.word	0x40020488
 8002090:	400204a0 	.word	0x400204a0
 8002094:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 020e 	bic.w	r2, r3, #14
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 020a 	orr.w	r2, r2, #10
 80020aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0204 	orr.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a83      	ldr	r2, [pc, #524]	@ (80022d8 <HAL_DMA_Start_IT+0x474>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d072      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a82      	ldr	r2, [pc, #520]	@ (80022dc <HAL_DMA_Start_IT+0x478>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d06d      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a80      	ldr	r2, [pc, #512]	@ (80022e0 <HAL_DMA_Start_IT+0x47c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d068      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7f      	ldr	r2, [pc, #508]	@ (80022e4 <HAL_DMA_Start_IT+0x480>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d063      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a7d      	ldr	r2, [pc, #500]	@ (80022e8 <HAL_DMA_Start_IT+0x484>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d05e      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7c      	ldr	r2, [pc, #496]	@ (80022ec <HAL_DMA_Start_IT+0x488>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d059      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a7a      	ldr	r2, [pc, #488]	@ (80022f0 <HAL_DMA_Start_IT+0x48c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d054      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a79      	ldr	r2, [pc, #484]	@ (80022f4 <HAL_DMA_Start_IT+0x490>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d04f      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a77      	ldr	r2, [pc, #476]	@ (80022f8 <HAL_DMA_Start_IT+0x494>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d04a      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a76      	ldr	r2, [pc, #472]	@ (80022fc <HAL_DMA_Start_IT+0x498>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d045      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a74      	ldr	r2, [pc, #464]	@ (8002300 <HAL_DMA_Start_IT+0x49c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d040      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a73      	ldr	r2, [pc, #460]	@ (8002304 <HAL_DMA_Start_IT+0x4a0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d03b      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a71      	ldr	r2, [pc, #452]	@ (8002308 <HAL_DMA_Start_IT+0x4a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d036      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a70      	ldr	r2, [pc, #448]	@ (800230c <HAL_DMA_Start_IT+0x4a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6e      	ldr	r2, [pc, #440]	@ (8002310 <HAL_DMA_Start_IT+0x4ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02c      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6d      	ldr	r2, [pc, #436]	@ (8002314 <HAL_DMA_Start_IT+0x4b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d027      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6b      	ldr	r2, [pc, #428]	@ (8002318 <HAL_DMA_Start_IT+0x4b4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6a      	ldr	r2, [pc, #424]	@ (800231c <HAL_DMA_Start_IT+0x4b8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01d      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	@ (8002320 <HAL_DMA_Start_IT+0x4bc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d018      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a67      	ldr	r2, [pc, #412]	@ (8002324 <HAL_DMA_Start_IT+0x4c0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a65      	ldr	r2, [pc, #404]	@ (8002328 <HAL_DMA_Start_IT+0x4c4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00e      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a64      	ldr	r2, [pc, #400]	@ (800232c <HAL_DMA_Start_IT+0x4c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a62      	ldr	r2, [pc, #392]	@ (8002330 <HAL_DMA_Start_IT+0x4cc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_DMA_Start_IT+0x350>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a61      	ldr	r2, [pc, #388]	@ (8002334 <HAL_DMA_Start_IT+0x4d0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_DMA_Start_IT+0x354>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_DMA_Start_IT+0x356>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a37      	ldr	r2, [pc, #220]	@ (80022d8 <HAL_DMA_Start_IT+0x474>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a36      	ldr	r2, [pc, #216]	@ (80022dc <HAL_DMA_Start_IT+0x478>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d045      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	@ (80022e0 <HAL_DMA_Start_IT+0x47c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a33      	ldr	r2, [pc, #204]	@ (80022e4 <HAL_DMA_Start_IT+0x480>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d03b      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a31      	ldr	r2, [pc, #196]	@ (80022e8 <HAL_DMA_Start_IT+0x484>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a30      	ldr	r2, [pc, #192]	@ (80022ec <HAL_DMA_Start_IT+0x488>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d031      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2e      	ldr	r2, [pc, #184]	@ (80022f0 <HAL_DMA_Start_IT+0x48c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02c      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2d      	ldr	r2, [pc, #180]	@ (80022f4 <HAL_DMA_Start_IT+0x490>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d027      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2b      	ldr	r2, [pc, #172]	@ (80022f8 <HAL_DMA_Start_IT+0x494>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2a      	ldr	r2, [pc, #168]	@ (80022fc <HAL_DMA_Start_IT+0x498>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a28      	ldr	r2, [pc, #160]	@ (8002300 <HAL_DMA_Start_IT+0x49c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a27      	ldr	r2, [pc, #156]	@ (8002304 <HAL_DMA_Start_IT+0x4a0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a25      	ldr	r2, [pc, #148]	@ (8002308 <HAL_DMA_Start_IT+0x4a4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a24      	ldr	r2, [pc, #144]	@ (800230c <HAL_DMA_Start_IT+0x4a8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_DMA_Start_IT+0x4ac>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_DMA_Start_IT+0x430>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a21      	ldr	r2, [pc, #132]	@ (8002314 <HAL_DMA_Start_IT+0x4b0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <HAL_DMA_Start_IT+0x442>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e012      	b.n	80022cc <HAL_DMA_Start_IT+0x468>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e009      	b.n	80022cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40020010 	.word	0x40020010
 80022dc:	40020028 	.word	0x40020028
 80022e0:	40020040 	.word	0x40020040
 80022e4:	40020058 	.word	0x40020058
 80022e8:	40020070 	.word	0x40020070
 80022ec:	40020088 	.word	0x40020088
 80022f0:	400200a0 	.word	0x400200a0
 80022f4:	400200b8 	.word	0x400200b8
 80022f8:	40020410 	.word	0x40020410
 80022fc:	40020428 	.word	0x40020428
 8002300:	40020440 	.word	0x40020440
 8002304:	40020458 	.word	0x40020458
 8002308:	40020470 	.word	0x40020470
 800230c:	40020488 	.word	0x40020488
 8002310:	400204a0 	.word	0x400204a0
 8002314:	400204b8 	.word	0x400204b8
 8002318:	58025408 	.word	0x58025408
 800231c:	5802541c 	.word	0x5802541c
 8002320:	58025430 	.word	0x58025430
 8002324:	58025444 	.word	0x58025444
 8002328:	58025458 	.word	0x58025458
 800232c:	5802546c 	.word	0x5802546c
 8002330:	58025480 	.word	0x58025480
 8002334:	58025494 	.word	0x58025494

08002338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff f916 	bl	8001570 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e2dc      	b.n	800290a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d008      	beq.n	800236e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2280      	movs	r2, #128	@ 0x80
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e2cd      	b.n	800290a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a76      	ldr	r2, [pc, #472]	@ (800254c <HAL_DMA_Abort+0x214>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04a      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a74      	ldr	r2, [pc, #464]	@ (8002550 <HAL_DMA_Abort+0x218>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d045      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	@ (8002554 <HAL_DMA_Abort+0x21c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a71      	ldr	r2, [pc, #452]	@ (8002558 <HAL_DMA_Abort+0x220>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03b      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a70      	ldr	r2, [pc, #448]	@ (800255c <HAL_DMA_Abort+0x224>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d036      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002560 <HAL_DMA_Abort+0x228>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002564 <HAL_DMA_Abort+0x22c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d02c      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002568 <HAL_DMA_Abort+0x230>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d027      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6a      	ldr	r2, [pc, #424]	@ (800256c <HAL_DMA_Abort+0x234>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a68      	ldr	r2, [pc, #416]	@ (8002570 <HAL_DMA_Abort+0x238>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a67      	ldr	r2, [pc, #412]	@ (8002574 <HAL_DMA_Abort+0x23c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d018      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a65      	ldr	r2, [pc, #404]	@ (8002578 <HAL_DMA_Abort+0x240>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a64      	ldr	r2, [pc, #400]	@ (800257c <HAL_DMA_Abort+0x244>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a62      	ldr	r2, [pc, #392]	@ (8002580 <HAL_DMA_Abort+0x248>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a61      	ldr	r2, [pc, #388]	@ (8002584 <HAL_DMA_Abort+0x24c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_DMA_Abort+0xd6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a5f      	ldr	r2, [pc, #380]	@ (8002588 <HAL_DMA_Abort+0x250>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_DMA_Abort+0xda>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_DMA_Abort+0xdc>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 021e 	bic.w	r2, r2, #30
 8002426:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002436:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e00a      	b.n	8002456 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 020e 	bic.w	r2, r2, #14
 800244e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a3c      	ldr	r2, [pc, #240]	@ (800254c <HAL_DMA_Abort+0x214>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d072      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a3a      	ldr	r2, [pc, #232]	@ (8002550 <HAL_DMA_Abort+0x218>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d06d      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a39      	ldr	r2, [pc, #228]	@ (8002554 <HAL_DMA_Abort+0x21c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d068      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a37      	ldr	r2, [pc, #220]	@ (8002558 <HAL_DMA_Abort+0x220>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d063      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a36      	ldr	r2, [pc, #216]	@ (800255c <HAL_DMA_Abort+0x224>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d05e      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a34      	ldr	r2, [pc, #208]	@ (8002560 <HAL_DMA_Abort+0x228>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d059      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a33      	ldr	r2, [pc, #204]	@ (8002564 <HAL_DMA_Abort+0x22c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d054      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a31      	ldr	r2, [pc, #196]	@ (8002568 <HAL_DMA_Abort+0x230>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d04f      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a30      	ldr	r2, [pc, #192]	@ (800256c <HAL_DMA_Abort+0x234>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04a      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002570 <HAL_DMA_Abort+0x238>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d045      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2d      	ldr	r2, [pc, #180]	@ (8002574 <HAL_DMA_Abort+0x23c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d040      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002578 <HAL_DMA_Abort+0x240>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d03b      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2a      	ldr	r2, [pc, #168]	@ (800257c <HAL_DMA_Abort+0x244>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d036      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a28      	ldr	r2, [pc, #160]	@ (8002580 <HAL_DMA_Abort+0x248>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d031      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a27      	ldr	r2, [pc, #156]	@ (8002584 <HAL_DMA_Abort+0x24c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d02c      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a25      	ldr	r2, [pc, #148]	@ (8002588 <HAL_DMA_Abort+0x250>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d027      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_DMA_Abort+0x254>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <HAL_DMA_Abort+0x258>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01d      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <HAL_DMA_Abort+0x25c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d018      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1f      	ldr	r2, [pc, #124]	@ (8002598 <HAL_DMA_Abort+0x260>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_DMA_Abort+0x264>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1c      	ldr	r2, [pc, #112]	@ (80025a0 <HAL_DMA_Abort+0x268>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <HAL_DMA_Abort+0x26c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_DMA_Abort+0x20e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_DMA_Abort+0x270>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d132      	bne.n	80025ac <HAL_DMA_Abort+0x274>
 8002546:	2301      	movs	r3, #1
 8002548:	e031      	b.n	80025ae <HAL_DMA_Abort+0x276>
 800254a:	bf00      	nop
 800254c:	40020010 	.word	0x40020010
 8002550:	40020028 	.word	0x40020028
 8002554:	40020040 	.word	0x40020040
 8002558:	40020058 	.word	0x40020058
 800255c:	40020070 	.word	0x40020070
 8002560:	40020088 	.word	0x40020088
 8002564:	400200a0 	.word	0x400200a0
 8002568:	400200b8 	.word	0x400200b8
 800256c:	40020410 	.word	0x40020410
 8002570:	40020428 	.word	0x40020428
 8002574:	40020440 	.word	0x40020440
 8002578:	40020458 	.word	0x40020458
 800257c:	40020470 	.word	0x40020470
 8002580:	40020488 	.word	0x40020488
 8002584:	400204a0 	.word	0x400204a0
 8002588:	400204b8 	.word	0x400204b8
 800258c:	58025408 	.word	0x58025408
 8002590:	5802541c 	.word	0x5802541c
 8002594:	58025430 	.word	0x58025430
 8002598:	58025444 	.word	0x58025444
 800259c:	58025458 	.word	0x58025458
 80025a0:	5802546c 	.word	0x5802546c
 80025a4:	58025480 	.word	0x58025480
 80025a8:	58025494 	.word	0x58025494
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6d      	ldr	r2, [pc, #436]	@ (800277c <HAL_DMA_Abort+0x444>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d04a      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002780 <HAL_DMA_Abort+0x448>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d045      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6a      	ldr	r2, [pc, #424]	@ (8002784 <HAL_DMA_Abort+0x44c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d040      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a68      	ldr	r2, [pc, #416]	@ (8002788 <HAL_DMA_Abort+0x450>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d03b      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a67      	ldr	r2, [pc, #412]	@ (800278c <HAL_DMA_Abort+0x454>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d036      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a65      	ldr	r2, [pc, #404]	@ (8002790 <HAL_DMA_Abort+0x458>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d031      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a64      	ldr	r2, [pc, #400]	@ (8002794 <HAL_DMA_Abort+0x45c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d02c      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a62      	ldr	r2, [pc, #392]	@ (8002798 <HAL_DMA_Abort+0x460>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d027      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a61      	ldr	r2, [pc, #388]	@ (800279c <HAL_DMA_Abort+0x464>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5f      	ldr	r2, [pc, #380]	@ (80027a0 <HAL_DMA_Abort+0x468>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5e      	ldr	r2, [pc, #376]	@ (80027a4 <HAL_DMA_Abort+0x46c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d018      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a5c      	ldr	r2, [pc, #368]	@ (80027a8 <HAL_DMA_Abort+0x470>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5b      	ldr	r2, [pc, #364]	@ (80027ac <HAL_DMA_Abort+0x474>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a59      	ldr	r2, [pc, #356]	@ (80027b0 <HAL_DMA_Abort+0x478>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_DMA_Abort+0x47c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_DMA_Abort+0x32a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a56      	ldr	r2, [pc, #344]	@ (80027b8 <HAL_DMA_Abort+0x480>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <HAL_DMA_Abort+0x33c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e007      	b.n	8002684 <HAL_DMA_Abort+0x34c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002684:	e013      	b.n	80026ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002686:	f7fe ff73 	bl	8001570 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b05      	cmp	r3, #5
 8002692:	d90c      	bls.n	80026ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2203      	movs	r2, #3
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e12d      	b.n	800290a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e5      	bne.n	8002686 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2f      	ldr	r2, [pc, #188]	@ (800277c <HAL_DMA_Abort+0x444>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d04a      	beq.n	800275a <HAL_DMA_Abort+0x422>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002780 <HAL_DMA_Abort+0x448>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d045      	beq.n	800275a <HAL_DMA_Abort+0x422>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002784 <HAL_DMA_Abort+0x44c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d040      	beq.n	800275a <HAL_DMA_Abort+0x422>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <HAL_DMA_Abort+0x450>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d03b      	beq.n	800275a <HAL_DMA_Abort+0x422>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a29      	ldr	r2, [pc, #164]	@ (800278c <HAL_DMA_Abort+0x454>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d036      	beq.n	800275a <HAL_DMA_Abort+0x422>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a27      	ldr	r2, [pc, #156]	@ (8002790 <HAL_DMA_Abort+0x458>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d031      	beq.n	800275a <HAL_DMA_Abort+0x422>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <HAL_DMA_Abort+0x45c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d02c      	beq.n	800275a <HAL_DMA_Abort+0x422>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a24      	ldr	r2, [pc, #144]	@ (8002798 <HAL_DMA_Abort+0x460>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d027      	beq.n	800275a <HAL_DMA_Abort+0x422>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a23      	ldr	r2, [pc, #140]	@ (800279c <HAL_DMA_Abort+0x464>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d022      	beq.n	800275a <HAL_DMA_Abort+0x422>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a21      	ldr	r2, [pc, #132]	@ (80027a0 <HAL_DMA_Abort+0x468>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01d      	beq.n	800275a <HAL_DMA_Abort+0x422>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a20      	ldr	r2, [pc, #128]	@ (80027a4 <HAL_DMA_Abort+0x46c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d018      	beq.n	800275a <HAL_DMA_Abort+0x422>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <HAL_DMA_Abort+0x470>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_DMA_Abort+0x422>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1d      	ldr	r2, [pc, #116]	@ (80027ac <HAL_DMA_Abort+0x474>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <HAL_DMA_Abort+0x422>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1b      	ldr	r2, [pc, #108]	@ (80027b0 <HAL_DMA_Abort+0x478>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_DMA_Abort+0x422>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <HAL_DMA_Abort+0x47c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_DMA_Abort+0x422>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a18      	ldr	r2, [pc, #96]	@ (80027b8 <HAL_DMA_Abort+0x480>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_DMA_Abort+0x426>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_DMA_Abort+0x428>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02b      	beq.n	80027bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	223f      	movs	r2, #63	@ 0x3f
 8002774:	409a      	lsls	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	e02a      	b.n	80027d2 <HAL_DMA_Abort+0x49a>
 800277c:	40020010 	.word	0x40020010
 8002780:	40020028 	.word	0x40020028
 8002784:	40020040 	.word	0x40020040
 8002788:	40020058 	.word	0x40020058
 800278c:	40020070 	.word	0x40020070
 8002790:	40020088 	.word	0x40020088
 8002794:	400200a0 	.word	0x400200a0
 8002798:	400200b8 	.word	0x400200b8
 800279c:	40020410 	.word	0x40020410
 80027a0:	40020428 	.word	0x40020428
 80027a4:	40020440 	.word	0x40020440
 80027a8:	40020458 	.word	0x40020458
 80027ac:	40020470 	.word	0x40020470
 80027b0:	40020488 	.word	0x40020488
 80027b4:	400204a0 	.word	0x400204a0
 80027b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002914 <HAL_DMA_Abort+0x5dc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d072      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002918 <HAL_DMA_Abort+0x5e0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d06d      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a4c      	ldr	r2, [pc, #304]	@ (800291c <HAL_DMA_Abort+0x5e4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d068      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002920 <HAL_DMA_Abort+0x5e8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d063      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a49      	ldr	r2, [pc, #292]	@ (8002924 <HAL_DMA_Abort+0x5ec>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <HAL_DMA_Abort+0x5f0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d059      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a46      	ldr	r2, [pc, #280]	@ (800292c <HAL_DMA_Abort+0x5f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d054      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a44      	ldr	r2, [pc, #272]	@ (8002930 <HAL_DMA_Abort+0x5f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04f      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a43      	ldr	r2, [pc, #268]	@ (8002934 <HAL_DMA_Abort+0x5fc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a41      	ldr	r2, [pc, #260]	@ (8002938 <HAL_DMA_Abort+0x600>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a40      	ldr	r2, [pc, #256]	@ (800293c <HAL_DMA_Abort+0x604>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3e      	ldr	r2, [pc, #248]	@ (8002940 <HAL_DMA_Abort+0x608>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3d      	ldr	r2, [pc, #244]	@ (8002944 <HAL_DMA_Abort+0x60c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_DMA_Abort+0x610>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3a      	ldr	r2, [pc, #232]	@ (800294c <HAL_DMA_Abort+0x614>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a38      	ldr	r2, [pc, #224]	@ (8002950 <HAL_DMA_Abort+0x618>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <HAL_DMA_Abort+0x61c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a35      	ldr	r2, [pc, #212]	@ (8002958 <HAL_DMA_Abort+0x620>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a34      	ldr	r2, [pc, #208]	@ (800295c <HAL_DMA_Abort+0x624>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a32      	ldr	r2, [pc, #200]	@ (8002960 <HAL_DMA_Abort+0x628>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_DMA_Abort+0x62c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002968 <HAL_DMA_Abort+0x630>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2e      	ldr	r2, [pc, #184]	@ (800296c <HAL_DMA_Abort+0x634>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Abort+0x58a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002970 <HAL_DMA_Abort+0x638>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Abort+0x58e>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_Abort+0x590>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020010 	.word	0x40020010
 8002918:	40020028 	.word	0x40020028
 800291c:	40020040 	.word	0x40020040
 8002920:	40020058 	.word	0x40020058
 8002924:	40020070 	.word	0x40020070
 8002928:	40020088 	.word	0x40020088
 800292c:	400200a0 	.word	0x400200a0
 8002930:	400200b8 	.word	0x400200b8
 8002934:	40020410 	.word	0x40020410
 8002938:	40020428 	.word	0x40020428
 800293c:	40020440 	.word	0x40020440
 8002940:	40020458 	.word	0x40020458
 8002944:	40020470 	.word	0x40020470
 8002948:	40020488 	.word	0x40020488
 800294c:	400204a0 	.word	0x400204a0
 8002950:	400204b8 	.word	0x400204b8
 8002954:	58025408 	.word	0x58025408
 8002958:	5802541c 	.word	0x5802541c
 800295c:	58025430 	.word	0x58025430
 8002960:	58025444 	.word	0x58025444
 8002964:	58025458 	.word	0x58025458
 8002968:	5802546c 	.word	0x5802546c
 800296c:	58025480 	.word	0x58025480
 8002970:	58025494 	.word	0x58025494

08002974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e237      	b.n	8002df6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d004      	beq.n	800299c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2280      	movs	r2, #128	@ 0x80
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e22c      	b.n	8002df6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002b14 <HAL_DMA_Abort_IT+0x1a0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d04a      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002b18 <HAL_DMA_Abort_IT+0x1a4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d045      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a59      	ldr	r2, [pc, #356]	@ (8002b1c <HAL_DMA_Abort_IT+0x1a8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d040      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a58      	ldr	r2, [pc, #352]	@ (8002b20 <HAL_DMA_Abort_IT+0x1ac>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d03b      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a56      	ldr	r2, [pc, #344]	@ (8002b24 <HAL_DMA_Abort_IT+0x1b0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d036      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a55      	ldr	r2, [pc, #340]	@ (8002b28 <HAL_DMA_Abort_IT+0x1b4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d031      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a53      	ldr	r2, [pc, #332]	@ (8002b2c <HAL_DMA_Abort_IT+0x1b8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02c      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_DMA_Abort_IT+0x1bc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d027      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a50      	ldr	r2, [pc, #320]	@ (8002b34 <HAL_DMA_Abort_IT+0x1c0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d022      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4f      	ldr	r2, [pc, #316]	@ (8002b38 <HAL_DMA_Abort_IT+0x1c4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01d      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4d      	ldr	r2, [pc, #308]	@ (8002b3c <HAL_DMA_Abort_IT+0x1c8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b40 <HAL_DMA_Abort_IT+0x1cc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4a      	ldr	r2, [pc, #296]	@ (8002b44 <HAL_DMA_Abort_IT+0x1d0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a49      	ldr	r2, [pc, #292]	@ (8002b48 <HAL_DMA_Abort_IT+0x1d4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a47      	ldr	r2, [pc, #284]	@ (8002b4c <HAL_DMA_Abort_IT+0x1d8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xc8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a46      	ldr	r2, [pc, #280]	@ (8002b50 <HAL_DMA_Abort_IT+0x1dc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Abort_IT+0xcc>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_DMA_Abort_IT+0xce>
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8086 	beq.w	8002b54 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2f      	ldr	r2, [pc, #188]	@ (8002b14 <HAL_DMA_Abort_IT+0x1a0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b18 <HAL_DMA_Abort_IT+0x1a4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	@ (8002b1c <HAL_DMA_Abort_IT+0x1a8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <HAL_DMA_Abort_IT+0x1ac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_DMA_Abort_IT+0x1b0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_DMA_Abort_IT+0x1b4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a26      	ldr	r2, [pc, #152]	@ (8002b2c <HAL_DMA_Abort_IT+0x1b8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_DMA_Abort_IT+0x1bc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a23      	ldr	r2, [pc, #140]	@ (8002b34 <HAL_DMA_Abort_IT+0x1c0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_DMA_Abort_IT+0x1c4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	@ (8002b3c <HAL_DMA_Abort_IT+0x1c8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_DMA_Abort_IT+0x1cc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_DMA_Abort_IT+0x1d0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b48 <HAL_DMA_Abort_IT+0x1d4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b4c <HAL_DMA_Abort_IT+0x1d8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x17c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a19      	ldr	r2, [pc, #100]	@ (8002b50 <HAL_DMA_Abort_IT+0x1dc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <HAL_DMA_Abort_IT+0x18e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e178      	b.n	8002df4 <HAL_DMA_Abort_IT+0x480>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e16f      	b.n	8002df4 <HAL_DMA_Abort_IT+0x480>
 8002b14:	40020010 	.word	0x40020010
 8002b18:	40020028 	.word	0x40020028
 8002b1c:	40020040 	.word	0x40020040
 8002b20:	40020058 	.word	0x40020058
 8002b24:	40020070 	.word	0x40020070
 8002b28:	40020088 	.word	0x40020088
 8002b2c:	400200a0 	.word	0x400200a0
 8002b30:	400200b8 	.word	0x400200b8
 8002b34:	40020410 	.word	0x40020410
 8002b38:	40020428 	.word	0x40020428
 8002b3c:	40020440 	.word	0x40020440
 8002b40:	40020458 	.word	0x40020458
 8002b44:	40020470 	.word	0x40020470
 8002b48:	40020488 	.word	0x40020488
 8002b4c:	400204a0 	.word	0x400204a0
 8002b50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020e 	bic.w	r2, r2, #14
 8002b62:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6c      	ldr	r2, [pc, #432]	@ (8002d1c <HAL_DMA_Abort_IT+0x3a8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d04a      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6b      	ldr	r2, [pc, #428]	@ (8002d20 <HAL_DMA_Abort_IT+0x3ac>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d045      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a69      	ldr	r2, [pc, #420]	@ (8002d24 <HAL_DMA_Abort_IT+0x3b0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d040      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a68      	ldr	r2, [pc, #416]	@ (8002d28 <HAL_DMA_Abort_IT+0x3b4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d03b      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a66      	ldr	r2, [pc, #408]	@ (8002d2c <HAL_DMA_Abort_IT+0x3b8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d036      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a65      	ldr	r2, [pc, #404]	@ (8002d30 <HAL_DMA_Abort_IT+0x3bc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a63      	ldr	r2, [pc, #396]	@ (8002d34 <HAL_DMA_Abort_IT+0x3c0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02c      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a62      	ldr	r2, [pc, #392]	@ (8002d38 <HAL_DMA_Abort_IT+0x3c4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d027      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a60      	ldr	r2, [pc, #384]	@ (8002d3c <HAL_DMA_Abort_IT+0x3c8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d022      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d40 <HAL_DMA_Abort_IT+0x3cc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d01d      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d44 <HAL_DMA_Abort_IT+0x3d0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d48 <HAL_DMA_Abort_IT+0x3d4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d4c <HAL_DMA_Abort_IT+0x3d8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a59      	ldr	r2, [pc, #356]	@ (8002d50 <HAL_DMA_Abort_IT+0x3dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a57      	ldr	r2, [pc, #348]	@ (8002d54 <HAL_DMA_Abort_IT+0x3e0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x290>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a56      	ldr	r2, [pc, #344]	@ (8002d58 <HAL_DMA_Abort_IT+0x3e4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <HAL_DMA_Abort_IT+0x2a2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_DMA_Abort_IT+0x2b2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d1c <HAL_DMA_Abort_IT+0x3a8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d072      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a3a      	ldr	r2, [pc, #232]	@ (8002d20 <HAL_DMA_Abort_IT+0x3ac>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d06d      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a39      	ldr	r2, [pc, #228]	@ (8002d24 <HAL_DMA_Abort_IT+0x3b0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d068      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a37      	ldr	r2, [pc, #220]	@ (8002d28 <HAL_DMA_Abort_IT+0x3b4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d063      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a36      	ldr	r2, [pc, #216]	@ (8002d2c <HAL_DMA_Abort_IT+0x3b8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d05e      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a34      	ldr	r2, [pc, #208]	@ (8002d30 <HAL_DMA_Abort_IT+0x3bc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d059      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a33      	ldr	r2, [pc, #204]	@ (8002d34 <HAL_DMA_Abort_IT+0x3c0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d054      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a31      	ldr	r2, [pc, #196]	@ (8002d38 <HAL_DMA_Abort_IT+0x3c4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d04f      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <HAL_DMA_Abort_IT+0x3c8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d04a      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2e      	ldr	r2, [pc, #184]	@ (8002d40 <HAL_DMA_Abort_IT+0x3cc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d045      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d44 <HAL_DMA_Abort_IT+0x3d0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d040      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2b      	ldr	r2, [pc, #172]	@ (8002d48 <HAL_DMA_Abort_IT+0x3d4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d03b      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <HAL_DMA_Abort_IT+0x3d8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d036      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <HAL_DMA_Abort_IT+0x3dc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d031      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a27      	ldr	r2, [pc, #156]	@ (8002d54 <HAL_DMA_Abort_IT+0x3e0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d02c      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	@ (8002d58 <HAL_DMA_Abort_IT+0x3e4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d027      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a24      	ldr	r2, [pc, #144]	@ (8002d5c <HAL_DMA_Abort_IT+0x3e8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a22      	ldr	r2, [pc, #136]	@ (8002d60 <HAL_DMA_Abort_IT+0x3ec>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01d      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a21      	ldr	r2, [pc, #132]	@ (8002d64 <HAL_DMA_Abort_IT+0x3f0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d018      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <HAL_DMA_Abort_IT+0x3f4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d6c <HAL_DMA_Abort_IT+0x3f8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <HAL_DMA_Abort_IT+0x3fc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <HAL_DMA_Abort_IT+0x400>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_DMA_Abort_IT+0x3a2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <HAL_DMA_Abort_IT+0x404>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d132      	bne.n	8002d7c <HAL_DMA_Abort_IT+0x408>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e031      	b.n	8002d7e <HAL_DMA_Abort_IT+0x40a>
 8002d1a:	bf00      	nop
 8002d1c:	40020010 	.word	0x40020010
 8002d20:	40020028 	.word	0x40020028
 8002d24:	40020040 	.word	0x40020040
 8002d28:	40020058 	.word	0x40020058
 8002d2c:	40020070 	.word	0x40020070
 8002d30:	40020088 	.word	0x40020088
 8002d34:	400200a0 	.word	0x400200a0
 8002d38:	400200b8 	.word	0x400200b8
 8002d3c:	40020410 	.word	0x40020410
 8002d40:	40020428 	.word	0x40020428
 8002d44:	40020440 	.word	0x40020440
 8002d48:	40020458 	.word	0x40020458
 8002d4c:	40020470 	.word	0x40020470
 8002d50:	40020488 	.word	0x40020488
 8002d54:	400204a0 	.word	0x400204a0
 8002d58:	400204b8 	.word	0x400204b8
 8002d5c:	58025408 	.word	0x58025408
 8002d60:	5802541c 	.word	0x5802541c
 8002d64:	58025430 	.word	0x58025430
 8002d68:	58025444 	.word	0x58025444
 8002d6c:	58025458 	.word	0x58025458
 8002d70:	5802546c 	.word	0x5802546c
 8002d74:	58025480 	.word	0x58025480
 8002d78:	58025494 	.word	0x58025494
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2201      	movs	r2, #1
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002db0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop

08002e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e0c:	4b67      	ldr	r3, [pc, #412]	@ (8002fac <HAL_DMA_IRQHandler+0x1ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a67      	ldr	r2, [pc, #412]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1b0>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fbc <HAL_DMA_IRQHandler+0x1bc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a59      	ldr	r2, [pc, #356]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a57      	ldr	r2, [pc, #348]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a56      	ldr	r2, [pc, #344]	@ (8002fcc <HAL_DMA_IRQHandler+0x1cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a54      	ldr	r2, [pc, #336]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a53      	ldr	r2, [pc, #332]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a51      	ldr	r2, [pc, #324]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a50      	ldr	r2, [pc, #320]	@ (8002fdc <HAL_DMA_IRQHandler+0x1dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8002fec <HAL_DMA_IRQHandler+0x1ec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a48      	ldr	r2, [pc, #288]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_DMA_IRQHandler+0xd6>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 842b 	beq.w	8003734 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80a2 	beq.w	8003038 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d04a      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d045      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fbc <HAL_DMA_IRQHandler+0x1bc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d040      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a28      	ldr	r2, [pc, #160]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d036      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a27      	ldr	r2, [pc, #156]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	@ (8002fcc <HAL_DMA_IRQHandler+0x1cc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02c      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01d      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_DMA_IRQHandler+0x1dc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <HAL_DMA_IRQHandler+0x1ec>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12f      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x1f4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e02e      	b.n	8003008 <HAL_DMA_IRQHandler+0x208>
 8002faa:	bf00      	nop
 8002fac:	24000000 	.word	0x24000000
 8002fb0:	1b4e81b5 	.word	0x1b4e81b5
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	40020028 	.word	0x40020028
 8002fbc:	40020040 	.word	0x40020040
 8002fc0:	40020058 	.word	0x40020058
 8002fc4:	40020070 	.word	0x40020070
 8002fc8:	40020088 	.word	0x40020088
 8002fcc:	400200a0 	.word	0x400200a0
 8002fd0:	400200b8 	.word	0x400200b8
 8002fd4:	40020410 	.word	0x40020410
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	40020440 	.word	0x40020440
 8002fe0:	40020458 	.word	0x40020458
 8002fe4:	40020470 	.word	0x40020470
 8002fe8:	40020488 	.word	0x40020488
 8002fec:	400204a0 	.word	0x400204a0
 8002ff0:	400204b8 	.word	0x400204b8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2208      	movs	r2, #8
 8003026:	409a      	lsls	r2, r3
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06e      	beq.n	800312c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a69      	ldr	r2, [pc, #420]	@ (80031f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04a      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a67      	ldr	r2, [pc, #412]	@ (80031fc <HAL_DMA_IRQHandler+0x3fc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a66      	ldr	r2, [pc, #408]	@ (8003200 <HAL_DMA_IRQHandler+0x400>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a64      	ldr	r2, [pc, #400]	@ (8003204 <HAL_DMA_IRQHandler+0x404>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03b      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a63      	ldr	r2, [pc, #396]	@ (8003208 <HAL_DMA_IRQHandler+0x408>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a61      	ldr	r2, [pc, #388]	@ (800320c <HAL_DMA_IRQHandler+0x40c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a60      	ldr	r2, [pc, #384]	@ (8003210 <HAL_DMA_IRQHandler+0x410>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d02c      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <HAL_DMA_IRQHandler+0x414>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d027      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003218 <HAL_DMA_IRQHandler+0x418>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_DMA_IRQHandler+0x41c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003220 <HAL_DMA_IRQHandler+0x420>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a58      	ldr	r2, [pc, #352]	@ (8003224 <HAL_DMA_IRQHandler+0x424>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a57      	ldr	r2, [pc, #348]	@ (8003228 <HAL_DMA_IRQHandler+0x428>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a55      	ldr	r2, [pc, #340]	@ (800322c <HAL_DMA_IRQHandler+0x42c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a54      	ldr	r2, [pc, #336]	@ (8003230 <HAL_DMA_IRQHandler+0x430>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a52      	ldr	r2, [pc, #328]	@ (8003234 <HAL_DMA_IRQHandler+0x434>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10a      	bne.n	8003104 <HAL_DMA_IRQHandler+0x304>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e003      	b.n	800310c <HAL_DMA_IRQHandler+0x30c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f043 0202 	orr.w	r2, r3, #2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2204      	movs	r2, #4
 8003136:	409a      	lsls	r2, r3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 808f 	beq.w	8003260 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d04a      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2a      	ldr	r2, [pc, #168]	@ (80031fc <HAL_DMA_IRQHandler+0x3fc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d045      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_DMA_IRQHandler+0x400>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d040      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <HAL_DMA_IRQHandler+0x404>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d03b      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <HAL_DMA_IRQHandler+0x408>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d036      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <HAL_DMA_IRQHandler+0x40c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_DMA_IRQHandler+0x410>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d02c      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_DMA_IRQHandler+0x414>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_DMA_IRQHandler+0x418>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_DMA_IRQHandler+0x41c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_DMA_IRQHandler+0x420>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_DMA_IRQHandler+0x424>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_DMA_IRQHandler+0x428>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_DMA_IRQHandler+0x42c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <HAL_DMA_IRQHandler+0x430>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	@ (8003234 <HAL_DMA_IRQHandler+0x434>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d12a      	bne.n	8003238 <HAL_DMA_IRQHandler+0x438>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e023      	b.n	8003240 <HAL_DMA_IRQHandler+0x440>
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2204      	movs	r2, #4
 800324e:	409a      	lsls	r2, r3
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2210      	movs	r2, #16
 800326a:	409a      	lsls	r2, r3
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a6 	beq.w	80033c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a85      	ldr	r2, [pc, #532]	@ (8003490 <HAL_DMA_IRQHandler+0x690>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d04a      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a83      	ldr	r2, [pc, #524]	@ (8003494 <HAL_DMA_IRQHandler+0x694>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d045      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a82      	ldr	r2, [pc, #520]	@ (8003498 <HAL_DMA_IRQHandler+0x698>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d040      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a80      	ldr	r2, [pc, #512]	@ (800349c <HAL_DMA_IRQHandler+0x69c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d03b      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7f      	ldr	r2, [pc, #508]	@ (80034a0 <HAL_DMA_IRQHandler+0x6a0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d036      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7d      	ldr	r2, [pc, #500]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d031      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7c      	ldr	r2, [pc, #496]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d02c      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a7a      	ldr	r2, [pc, #488]	@ (80034ac <HAL_DMA_IRQHandler+0x6ac>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d027      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a79      	ldr	r2, [pc, #484]	@ (80034b0 <HAL_DMA_IRQHandler+0x6b0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a77      	ldr	r2, [pc, #476]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01d      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a76      	ldr	r2, [pc, #472]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a74      	ldr	r2, [pc, #464]	@ (80034bc <HAL_DMA_IRQHandler+0x6bc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a73      	ldr	r2, [pc, #460]	@ (80034c0 <HAL_DMA_IRQHandler+0x6c0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a71      	ldr	r2, [pc, #452]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a70      	ldr	r2, [pc, #448]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6e      	ldr	r2, [pc, #440]	@ (80034cc <HAL_DMA_IRQHandler+0x6cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10a      	bne.n	800332c <HAL_DMA_IRQHandler+0x52c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e009      	b.n	8003340 <HAL_DMA_IRQHandler+0x540>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2210      	movs	r2, #16
 800334e:	409a      	lsls	r2, r3
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d024      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e01f      	b.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01b      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
 8003392:	e016      	b.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0208 	bic.w	r2, r2, #8
 80033b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2220      	movs	r2, #32
 80033cc:	409a      	lsls	r2, r3
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8110 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <HAL_DMA_IRQHandler+0x690>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04a      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <HAL_DMA_IRQHandler+0x694>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <HAL_DMA_IRQHandler+0x698>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d040      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a28      	ldr	r2, [pc, #160]	@ (800349c <HAL_DMA_IRQHandler+0x69c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d036      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <HAL_DMA_IRQHandler+0x6ac>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d027      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	@ (80034b0 <HAL_DMA_IRQHandler+0x6b0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1f      	ldr	r2, [pc, #124]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_DMA_IRQHandler+0x6bc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1a      	ldr	r2, [pc, #104]	@ (80034c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a19      	ldr	r2, [pc, #100]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a16      	ldr	r2, [pc, #88]	@ (80034cc <HAL_DMA_IRQHandler+0x6cc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d12b      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x6d0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e02a      	b.n	80034e4 <HAL_DMA_IRQHandler+0x6e4>
 800348e:	bf00      	nop
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2220      	movs	r2, #32
 80034f4:	409a      	lsls	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b04      	cmp	r3, #4
 8003504:	d139      	bne.n	800357a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0216 	bic.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003524:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_DMA_IRQHandler+0x736>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0208 	bic.w	r2, r2, #8
 8003544:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	223f      	movs	r2, #63	@ 0x3f
 8003550:	409a      	lsls	r2, r3
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8382 	beq.w	8003c74 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
          }
          return;
 8003578:	e37c      	b.n	8003c74 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d018      	beq.n	80035ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	2b00      	cmp	r3, #0
 800359c:	d02c      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
 80035a6:	e027      	b.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e01e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 833e 	beq.w	8003c7e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8088 	beq.w	8003720 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2204      	movs	r2, #4
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a89      	ldr	r2, [pc, #548]	@ (8003844 <HAL_DMA_IRQHandler+0xa44>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d04a      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a88      	ldr	r2, [pc, #544]	@ (8003848 <HAL_DMA_IRQHandler+0xa48>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d045      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a86      	ldr	r2, [pc, #536]	@ (800384c <HAL_DMA_IRQHandler+0xa4c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d040      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a85      	ldr	r2, [pc, #532]	@ (8003850 <HAL_DMA_IRQHandler+0xa50>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d03b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a83      	ldr	r2, [pc, #524]	@ (8003854 <HAL_DMA_IRQHandler+0xa54>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d036      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a82      	ldr	r2, [pc, #520]	@ (8003858 <HAL_DMA_IRQHandler+0xa58>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a80      	ldr	r2, [pc, #512]	@ (800385c <HAL_DMA_IRQHandler+0xa5c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7f      	ldr	r2, [pc, #508]	@ (8003860 <HAL_DMA_IRQHandler+0xa60>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d027      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7d      	ldr	r2, [pc, #500]	@ (8003864 <HAL_DMA_IRQHandler+0xa64>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d022      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7c      	ldr	r2, [pc, #496]	@ (8003868 <HAL_DMA_IRQHandler+0xa68>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01d      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7a      	ldr	r2, [pc, #488]	@ (800386c <HAL_DMA_IRQHandler+0xa6c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a79      	ldr	r2, [pc, #484]	@ (8003870 <HAL_DMA_IRQHandler+0xa70>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a77      	ldr	r2, [pc, #476]	@ (8003874 <HAL_DMA_IRQHandler+0xa74>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a76      	ldr	r2, [pc, #472]	@ (8003878 <HAL_DMA_IRQHandler+0xa78>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a74      	ldr	r2, [pc, #464]	@ (800387c <HAL_DMA_IRQHandler+0xa7c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a73      	ldr	r2, [pc, #460]	@ (8003880 <HAL_DMA_IRQHandler+0xa80>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d108      	bne.n	80036ca <HAL_DMA_IRQHandler+0x8ca>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e007      	b.n	80036da <HAL_DMA_IRQHandler+0x8da>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3301      	adds	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d307      	bcc.n	80036f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f2      	bne.n	80036da <HAL_DMA_IRQHandler+0x8da>
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2203      	movs	r2, #3
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800370e:	e003      	b.n	8003718 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 82aa 	beq.w	8003c7e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e2a4      	b.n	8003c7e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a52      	ldr	r2, [pc, #328]	@ (8003884 <HAL_DMA_IRQHandler+0xa84>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a51      	ldr	r2, [pc, #324]	@ (8003888 <HAL_DMA_IRQHandler+0xa88>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d045      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a4f      	ldr	r2, [pc, #316]	@ (800388c <HAL_DMA_IRQHandler+0xa8c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d040      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a4e      	ldr	r2, [pc, #312]	@ (8003890 <HAL_DMA_IRQHandler+0xa90>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d03b      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4c      	ldr	r2, [pc, #304]	@ (8003894 <HAL_DMA_IRQHandler+0xa94>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d036      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4b      	ldr	r2, [pc, #300]	@ (8003898 <HAL_DMA_IRQHandler+0xa98>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d031      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a49      	ldr	r2, [pc, #292]	@ (800389c <HAL_DMA_IRQHandler+0xa9c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02c      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a48      	ldr	r2, [pc, #288]	@ (80038a0 <HAL_DMA_IRQHandler+0xaa0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d027      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a46      	ldr	r2, [pc, #280]	@ (80038a4 <HAL_DMA_IRQHandler+0xaa4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a45      	ldr	r2, [pc, #276]	@ (80038a8 <HAL_DMA_IRQHandler+0xaa8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a43      	ldr	r2, [pc, #268]	@ (80038ac <HAL_DMA_IRQHandler+0xaac>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a42      	ldr	r2, [pc, #264]	@ (80038b0 <HAL_DMA_IRQHandler+0xab0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a40      	ldr	r2, [pc, #256]	@ (80038b4 <HAL_DMA_IRQHandler+0xab4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3f      	ldr	r2, [pc, #252]	@ (80038b8 <HAL_DMA_IRQHandler+0xab8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3d      	ldr	r2, [pc, #244]	@ (80038bc <HAL_DMA_IRQHandler+0xabc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x9d4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a3c      	ldr	r2, [pc, #240]	@ (80038c0 <HAL_DMA_IRQHandler+0xac0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x9d8>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_DMA_IRQHandler+0x9da>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 824f 	beq.w	8003c7e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80dd 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xbb8>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80d7 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2204      	movs	r2, #4
 8003814:	409a      	lsls	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d059      	beq.n	80038d8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d14a      	bne.n	80038c4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8220 	beq.w	8003c78 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003840:	e21a      	b.n	8003c78 <HAL_DMA_IRQHandler+0xe78>
 8003842:	bf00      	nop
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8
 8003884:	48022c08 	.word	0x48022c08
 8003888:	48022c1c 	.word	0x48022c1c
 800388c:	48022c30 	.word	0x48022c30
 8003890:	48022c44 	.word	0x48022c44
 8003894:	48022c58 	.word	0x48022c58
 8003898:	48022c6c 	.word	0x48022c6c
 800389c:	48022c80 	.word	0x48022c80
 80038a0:	48022c94 	.word	0x48022c94
 80038a4:	58025408 	.word	0x58025408
 80038a8:	5802541c 	.word	0x5802541c
 80038ac:	58025430 	.word	0x58025430
 80038b0:	58025444 	.word	0x58025444
 80038b4:	58025458 	.word	0x58025458
 80038b8:	5802546c 	.word	0x5802546c
 80038bc:	58025480 	.word	0x58025480
 80038c0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 81d5 	beq.w	8003c78 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d6:	e1cf      	b.n	8003c78 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d160      	bne.n	80039a4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ae4 <HAL_DMA_IRQHandler+0xce4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ae8 <HAL_DMA_IRQHandler+0xce8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7c      	ldr	r2, [pc, #496]	@ (8003aec <HAL_DMA_IRQHandler+0xcec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a7a      	ldr	r2, [pc, #488]	@ (8003af0 <HAL_DMA_IRQHandler+0xcf0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a79      	ldr	r2, [pc, #484]	@ (8003af4 <HAL_DMA_IRQHandler+0xcf4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a77      	ldr	r2, [pc, #476]	@ (8003af8 <HAL_DMA_IRQHandler+0xcf8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a76      	ldr	r2, [pc, #472]	@ (8003afc <HAL_DMA_IRQHandler+0xcfc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a74      	ldr	r2, [pc, #464]	@ (8003b00 <HAL_DMA_IRQHandler+0xd00>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a73      	ldr	r2, [pc, #460]	@ (8003b04 <HAL_DMA_IRQHandler+0xd04>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a71      	ldr	r2, [pc, #452]	@ (8003b08 <HAL_DMA_IRQHandler+0xd08>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a70      	ldr	r2, [pc, #448]	@ (8003b0c <HAL_DMA_IRQHandler+0xd0c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a6e      	ldr	r2, [pc, #440]	@ (8003b10 <HAL_DMA_IRQHandler+0xd10>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6d      	ldr	r2, [pc, #436]	@ (8003b14 <HAL_DMA_IRQHandler+0xd14>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6b      	ldr	r2, [pc, #428]	@ (8003b18 <HAL_DMA_IRQHandler+0xd18>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6a      	ldr	r2, [pc, #424]	@ (8003b1c <HAL_DMA_IRQHandler+0xd1c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_IRQHandler+0xb82>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a68      	ldr	r2, [pc, #416]	@ (8003b20 <HAL_DMA_IRQHandler+0xd20>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <HAL_DMA_IRQHandler+0xb94>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0208 	bic.w	r2, r2, #8
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e007      	b.n	80039a4 <HAL_DMA_IRQHandler+0xba4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8165 	beq.w	8003c78 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	e15f      	b.n	8003c78 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2202      	movs	r2, #2
 80039c2:	409a      	lsls	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80c5 	beq.w	8003b58 <HAL_DMA_IRQHandler+0xd58>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80bf 	beq.w	8003b58 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2202      	movs	r2, #2
 80039e4:	409a      	lsls	r2, r3
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 813a 	beq.w	8003c7c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a10:	e134      	b.n	8003c7c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8130 	beq.w	8003c7c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a24:	e12a      	b.n	8003c7c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8089 	bne.w	8003b44 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae4 <HAL_DMA_IRQHandler+0xce4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a29      	ldr	r2, [pc, #164]	@ (8003ae8 <HAL_DMA_IRQHandler+0xce8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <HAL_DMA_IRQHandler+0xcec>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <HAL_DMA_IRQHandler+0xcf0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a25      	ldr	r2, [pc, #148]	@ (8003af4 <HAL_DMA_IRQHandler+0xcf4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	@ (8003af8 <HAL_DMA_IRQHandler+0xcf8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a22      	ldr	r2, [pc, #136]	@ (8003afc <HAL_DMA_IRQHandler+0xcfc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	@ (8003b00 <HAL_DMA_IRQHandler+0xd00>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <HAL_DMA_IRQHandler+0xd04>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <HAL_DMA_IRQHandler+0xd08>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b0c <HAL_DMA_IRQHandler+0xd0c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b10 <HAL_DMA_IRQHandler+0xd10>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a19      	ldr	r2, [pc, #100]	@ (8003b14 <HAL_DMA_IRQHandler+0xd14>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <HAL_DMA_IRQHandler+0xd18>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <HAL_DMA_IRQHandler+0xd1c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0xcd2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <HAL_DMA_IRQHandler+0xd20>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d128      	bne.n	8003b24 <HAL_DMA_IRQHandler+0xd24>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0214 	bic.w	r2, r2, #20
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e027      	b.n	8003b34 <HAL_DMA_IRQHandler+0xd34>
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 020a 	bic.w	r2, r2, #10
 8003b32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8097 	beq.w	8003c7c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b56:	e091      	b.n	8003c7c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2208      	movs	r2, #8
 8003b62:	409a      	lsls	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8088 	beq.w	8003c7e <HAL_DMA_IRQHandler+0xe7e>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8082 	beq.w	8003c7e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a41      	ldr	r2, [pc, #260]	@ (8003c84 <HAL_DMA_IRQHandler+0xe84>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04a      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3f      	ldr	r2, [pc, #252]	@ (8003c88 <HAL_DMA_IRQHandler+0xe88>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d045      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3e      	ldr	r2, [pc, #248]	@ (8003c8c <HAL_DMA_IRQHandler+0xe8c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c90 <HAL_DMA_IRQHandler+0xe90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03b      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8003c94 <HAL_DMA_IRQHandler+0xe94>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d036      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a39      	ldr	r2, [pc, #228]	@ (8003c98 <HAL_DMA_IRQHandler+0xe98>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d031      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <HAL_DMA_IRQHandler+0xe9c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d02c      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a36      	ldr	r2, [pc, #216]	@ (8003ca0 <HAL_DMA_IRQHandler+0xea0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d027      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <HAL_DMA_IRQHandler+0xea4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ca8 <HAL_DMA_IRQHandler+0xea8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a32      	ldr	r2, [pc, #200]	@ (8003cac <HAL_DMA_IRQHandler+0xeac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a30      	ldr	r2, [pc, #192]	@ (8003cb0 <HAL_DMA_IRQHandler+0xeb0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <HAL_DMA_IRQHandler+0xeb4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <HAL_DMA_IRQHandler+0xeb8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <HAL_DMA_IRQHandler+0xebc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_DMA_IRQHandler+0xe1a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc0 <HAL_DMA_IRQHandler+0xec0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <HAL_DMA_IRQHandler+0xe2c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 021c 	bic.w	r2, r2, #28
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e007      	b.n	8003c3c <HAL_DMA_IRQHandler+0xe3c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 020e 	bic.w	r2, r2, #14
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2201      	movs	r2, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e004      	b.n	8003c7e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003c74:	bf00      	nop
 8003c76:	e002      	b.n	8003c7e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c7e:	3728      	adds	r7, #40	@ 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8

08003cc4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cd2:	b2db      	uxtb	r3, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a7f      	ldr	r2, [pc, #508]	@ (8003f14 <DMA_SetConfig+0x21c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d072      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7d      	ldr	r2, [pc, #500]	@ (8003f18 <DMA_SetConfig+0x220>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d06d      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f1c <DMA_SetConfig+0x224>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d068      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7a      	ldr	r2, [pc, #488]	@ (8003f20 <DMA_SetConfig+0x228>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d063      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a79      	ldr	r2, [pc, #484]	@ (8003f24 <DMA_SetConfig+0x22c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d05e      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	@ (8003f28 <DMA_SetConfig+0x230>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d059      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a76      	ldr	r2, [pc, #472]	@ (8003f2c <DMA_SetConfig+0x234>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d054      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a74      	ldr	r2, [pc, #464]	@ (8003f30 <DMA_SetConfig+0x238>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04f      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a73      	ldr	r2, [pc, #460]	@ (8003f34 <DMA_SetConfig+0x23c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d04a      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a71      	ldr	r2, [pc, #452]	@ (8003f38 <DMA_SetConfig+0x240>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d045      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a70      	ldr	r2, [pc, #448]	@ (8003f3c <DMA_SetConfig+0x244>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d040      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <DMA_SetConfig+0x248>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d03b      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f44 <DMA_SetConfig+0x24c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d036      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a6b      	ldr	r2, [pc, #428]	@ (8003f48 <DMA_SetConfig+0x250>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d031      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f4c <DMA_SetConfig+0x254>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d02c      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a68      	ldr	r2, [pc, #416]	@ (8003f50 <DMA_SetConfig+0x258>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d027      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a67      	ldr	r2, [pc, #412]	@ (8003f54 <DMA_SetConfig+0x25c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	@ (8003f58 <DMA_SetConfig+0x260>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a64      	ldr	r2, [pc, #400]	@ (8003f5c <DMA_SetConfig+0x264>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a62      	ldr	r2, [pc, #392]	@ (8003f60 <DMA_SetConfig+0x268>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a61      	ldr	r2, [pc, #388]	@ (8003f64 <DMA_SetConfig+0x26c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f68 <DMA_SetConfig+0x270>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f6c <DMA_SetConfig+0x274>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <DMA_SetConfig+0x10a>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5c      	ldr	r2, [pc, #368]	@ (8003f70 <DMA_SetConfig+0x278>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <DMA_SetConfig+0x10e>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <DMA_SetConfig+0x110>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e14:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e26:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a39      	ldr	r2, [pc, #228]	@ (8003f14 <DMA_SetConfig+0x21c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04a      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a38      	ldr	r2, [pc, #224]	@ (8003f18 <DMA_SetConfig+0x220>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d045      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a36      	ldr	r2, [pc, #216]	@ (8003f1c <DMA_SetConfig+0x224>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d040      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a35      	ldr	r2, [pc, #212]	@ (8003f20 <DMA_SetConfig+0x228>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d03b      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <DMA_SetConfig+0x22c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d036      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a32      	ldr	r2, [pc, #200]	@ (8003f28 <DMA_SetConfig+0x230>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d031      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a30      	ldr	r2, [pc, #192]	@ (8003f2c <DMA_SetConfig+0x234>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02c      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	@ (8003f30 <DMA_SetConfig+0x238>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d027      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f34 <DMA_SetConfig+0x23c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d022      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2c      	ldr	r2, [pc, #176]	@ (8003f38 <DMA_SetConfig+0x240>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d01d      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <DMA_SetConfig+0x244>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a29      	ldr	r2, [pc, #164]	@ (8003f40 <DMA_SetConfig+0x248>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	@ (8003f44 <DMA_SetConfig+0x24c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a26      	ldr	r2, [pc, #152]	@ (8003f48 <DMA_SetConfig+0x250>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	@ (8003f4c <DMA_SetConfig+0x254>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <DMA_SetConfig+0x1d0>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <DMA_SetConfig+0x258>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <DMA_SetConfig+0x1d4>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <DMA_SetConfig+0x1d6>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d059      	beq.n	8003f86 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	223f      	movs	r2, #63	@ 0x3f
 8003edc:	409a      	lsls	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d138      	bne.n	8003f74 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f12:	e0ae      	b.n	8004072 <DMA_SetConfig+0x37a>
 8003f14:	40020010 	.word	0x40020010
 8003f18:	40020028 	.word	0x40020028
 8003f1c:	40020040 	.word	0x40020040
 8003f20:	40020058 	.word	0x40020058
 8003f24:	40020070 	.word	0x40020070
 8003f28:	40020088 	.word	0x40020088
 8003f2c:	400200a0 	.word	0x400200a0
 8003f30:	400200b8 	.word	0x400200b8
 8003f34:	40020410 	.word	0x40020410
 8003f38:	40020428 	.word	0x40020428
 8003f3c:	40020440 	.word	0x40020440
 8003f40:	40020458 	.word	0x40020458
 8003f44:	40020470 	.word	0x40020470
 8003f48:	40020488 	.word	0x40020488
 8003f4c:	400204a0 	.word	0x400204a0
 8003f50:	400204b8 	.word	0x400204b8
 8003f54:	58025408 	.word	0x58025408
 8003f58:	5802541c 	.word	0x5802541c
 8003f5c:	58025430 	.word	0x58025430
 8003f60:	58025444 	.word	0x58025444
 8003f64:	58025458 	.word	0x58025458
 8003f68:	5802546c 	.word	0x5802546c
 8003f6c:	58025480 	.word	0x58025480
 8003f70:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]
}
 8003f84:	e075      	b.n	8004072 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8004080 <DMA_SetConfig+0x388>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04a      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3b      	ldr	r2, [pc, #236]	@ (8004084 <DMA_SetConfig+0x38c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d045      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8004088 <DMA_SetConfig+0x390>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a38      	ldr	r2, [pc, #224]	@ (800408c <DMA_SetConfig+0x394>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d03b      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	@ (8004090 <DMA_SetConfig+0x398>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d036      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a35      	ldr	r2, [pc, #212]	@ (8004094 <DMA_SetConfig+0x39c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d031      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a34      	ldr	r2, [pc, #208]	@ (8004098 <DMA_SetConfig+0x3a0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d02c      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a32      	ldr	r2, [pc, #200]	@ (800409c <DMA_SetConfig+0x3a4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d027      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a31      	ldr	r2, [pc, #196]	@ (80040a0 <DMA_SetConfig+0x3a8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80040a4 <DMA_SetConfig+0x3ac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2e      	ldr	r2, [pc, #184]	@ (80040a8 <DMA_SetConfig+0x3b0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <DMA_SetConfig+0x3b4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <DMA_SetConfig+0x3b8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a29      	ldr	r2, [pc, #164]	@ (80040b4 <DMA_SetConfig+0x3bc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <DMA_SetConfig+0x32e>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a28      	ldr	r2, [pc, #160]	@ (80040b8 <DMA_SetConfig+0x3c0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <DMA_SetConfig+0x32e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a26      	ldr	r2, [pc, #152]	@ (80040bc <DMA_SetConfig+0x3c4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <DMA_SetConfig+0x332>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <DMA_SetConfig+0x334>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d108      	bne.n	8004062 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	60da      	str	r2, [r3, #12]
}
 8004060:	e007      	b.n	8004072 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	48022c08 	.word	0x48022c08
 8004084:	48022c1c 	.word	0x48022c1c
 8004088:	48022c30 	.word	0x48022c30
 800408c:	48022c44 	.word	0x48022c44
 8004090:	48022c58 	.word	0x48022c58
 8004094:	48022c6c 	.word	0x48022c6c
 8004098:	48022c80 	.word	0x48022c80
 800409c:	48022c94 	.word	0x48022c94
 80040a0:	58025408 	.word	0x58025408
 80040a4:	5802541c 	.word	0x5802541c
 80040a8:	58025430 	.word	0x58025430
 80040ac:	58025444 	.word	0x58025444
 80040b0:	58025458 	.word	0x58025458
 80040b4:	5802546c 	.word	0x5802546c
 80040b8:	58025480 	.word	0x58025480
 80040bc:	58025494 	.word	0x58025494

080040c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a42      	ldr	r2, [pc, #264]	@ (80041d8 <DMA_CalcBaseAndBitshift+0x118>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d04a      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a41      	ldr	r2, [pc, #260]	@ (80041dc <DMA_CalcBaseAndBitshift+0x11c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d045      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3f      	ldr	r2, [pc, #252]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x120>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d040      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3e      	ldr	r2, [pc, #248]	@ (80041e4 <DMA_CalcBaseAndBitshift+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d03b      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a3c      	ldr	r2, [pc, #240]	@ (80041e8 <DMA_CalcBaseAndBitshift+0x128>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d036      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a3b      	ldr	r2, [pc, #236]	@ (80041ec <DMA_CalcBaseAndBitshift+0x12c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d031      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a39      	ldr	r2, [pc, #228]	@ (80041f0 <DMA_CalcBaseAndBitshift+0x130>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d02c      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a38      	ldr	r2, [pc, #224]	@ (80041f4 <DMA_CalcBaseAndBitshift+0x134>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d027      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a36      	ldr	r2, [pc, #216]	@ (80041f8 <DMA_CalcBaseAndBitshift+0x138>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a35      	ldr	r2, [pc, #212]	@ (80041fc <DMA_CalcBaseAndBitshift+0x13c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d01d      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a33      	ldr	r2, [pc, #204]	@ (8004200 <DMA_CalcBaseAndBitshift+0x140>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a32      	ldr	r2, [pc, #200]	@ (8004204 <DMA_CalcBaseAndBitshift+0x144>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a30      	ldr	r2, [pc, #192]	@ (8004208 <DMA_CalcBaseAndBitshift+0x148>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2f      	ldr	r2, [pc, #188]	@ (800420c <DMA_CalcBaseAndBitshift+0x14c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2d      	ldr	r2, [pc, #180]	@ (8004210 <DMA_CalcBaseAndBitshift+0x150>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <DMA_CalcBaseAndBitshift+0xa8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <DMA_CalcBaseAndBitshift+0x154>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <DMA_CalcBaseAndBitshift+0xac>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <DMA_CalcBaseAndBitshift+0xae>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d024      	beq.n	80041bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	3b10      	subs	r3, #16
 800417a:	4a27      	ldr	r2, [pc, #156]	@ (8004218 <DMA_CalcBaseAndBitshift+0x158>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	4a24      	ldr	r2, [pc, #144]	@ (800421c <DMA_CalcBaseAndBitshift+0x15c>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d908      	bls.n	80041ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <DMA_CalcBaseAndBitshift+0x160>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80041aa:	e00d      	b.n	80041c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004220 <DMA_CalcBaseAndBitshift+0x160>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ba:	e005      	b.n	80041c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40020010 	.word	0x40020010
 80041dc:	40020028 	.word	0x40020028
 80041e0:	40020040 	.word	0x40020040
 80041e4:	40020058 	.word	0x40020058
 80041e8:	40020070 	.word	0x40020070
 80041ec:	40020088 	.word	0x40020088
 80041f0:	400200a0 	.word	0x400200a0
 80041f4:	400200b8 	.word	0x400200b8
 80041f8:	40020410 	.word	0x40020410
 80041fc:	40020428 	.word	0x40020428
 8004200:	40020440 	.word	0x40020440
 8004204:	40020458 	.word	0x40020458
 8004208:	40020470 	.word	0x40020470
 800420c:	40020488 	.word	0x40020488
 8004210:	400204a0 	.word	0x400204a0
 8004214:	400204b8 	.word	0x400204b8
 8004218:	aaaaaaab 	.word	0xaaaaaaab
 800421c:	08010550 	.word	0x08010550
 8004220:	fffffc00 	.word	0xfffffc00

08004224 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d120      	bne.n	800427a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	2b03      	cmp	r3, #3
 800423e:	d858      	bhi.n	80042f2 <DMA_CheckFifoParam+0xce>
 8004240:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <DMA_CheckFifoParam+0x24>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	0800426b 	.word	0x0800426b
 8004250:	08004259 	.word	0x08004259
 8004254:	080042f3 	.word	0x080042f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d048      	beq.n	80042f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004268:	e045      	b.n	80042f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004272:	d142      	bne.n	80042fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004278:	e03f      	b.n	80042fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004282:	d123      	bne.n	80042cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	2b03      	cmp	r3, #3
 800428a:	d838      	bhi.n	80042fe <DMA_CheckFifoParam+0xda>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <DMA_CheckFifoParam+0x70>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042ab 	.word	0x080042ab
 800429c:	080042a5 	.word	0x080042a5
 80042a0:	080042bd 	.word	0x080042bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
        break;
 80042a8:	e030      	b.n	800430c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d025      	beq.n	8004302 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ba:	e022      	b.n	8004302 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042c4:	d11f      	bne.n	8004306 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ca:	e01c      	b.n	8004306 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d902      	bls.n	80042da <DMA_CheckFifoParam+0xb6>
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d003      	beq.n	80042e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042d8:	e018      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
        break;
 80042de:	e015      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
    break;
 80042f0:	e00b      	b.n	800430a <DMA_CheckFifoParam+0xe6>
        break;
 80042f2:	bf00      	nop
 80042f4:	e00a      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        break;
 80042f6:	bf00      	nop
 80042f8:	e008      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        break;
 80042fa:	bf00      	nop
 80042fc:	e006      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        break;
 80042fe:	bf00      	nop
 8004300:	e004      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <DMA_CheckFifoParam+0xe8>
        break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <DMA_CheckFifoParam+0xe8>
    break;
 800430a:	bf00      	nop
    }
  }

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop

0800431c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a38      	ldr	r2, [pc, #224]	@ (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a36      	ldr	r2, [pc, #216]	@ (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01d      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a35      	ldr	r2, [pc, #212]	@ (8004418 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d018      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a33      	ldr	r2, [pc, #204]	@ (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a32      	ldr	r2, [pc, #200]	@ (8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	@ (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2f      	ldr	r2, [pc, #188]	@ (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2d      	ldr	r2, [pc, #180]	@ (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d101      	bne.n	800437e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01a      	beq.n	80043ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	3b08      	subs	r3, #8
 800438c:	4a28      	ldr	r2, [pc, #160]	@ (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4b26      	ldr	r3, [pc, #152]	@ (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	461a      	mov	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a24      	ldr	r2, [pc, #144]	@ (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	2201      	movs	r2, #1
 80043b2:	409a      	lsls	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043b8:	e024      	b.n	8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3b10      	subs	r3, #16
 80043c2:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d806      	bhi.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d902      	bls.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3308      	adds	r3, #8
 80043e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a16      	ldr	r2, [pc, #88]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	58025408 	.word	0x58025408
 8004414:	5802541c 	.word	0x5802541c
 8004418:	58025430 	.word	0x58025430
 800441c:	58025444 	.word	0x58025444
 8004420:	58025458 	.word	0x58025458
 8004424:	5802546c 	.word	0x5802546c
 8004428:	58025480 	.word	0x58025480
 800442c:	58025494 	.word	0x58025494
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	16009600 	.word	0x16009600
 8004438:	58025880 	.word	0x58025880
 800443c:	aaaaaaab 	.word	0xaaaaaaab
 8004440:	400204b8 	.word	0x400204b8
 8004444:	4002040f 	.word	0x4002040f
 8004448:	10008200 	.word	0x10008200
 800444c:	40020880 	.word	0x40020880

08004450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04a      	beq.n	80044fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d847      	bhi.n	80044fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a24      	ldr	r2, [pc, #144]	@ (800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a22      	ldr	r2, [pc, #136]	@ (8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4b17      	ldr	r3, [pc, #92]	@ (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80044da:	e009      	b.n	80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a11      	ldr	r2, [pc, #68]	@ (8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	2201      	movs	r2, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	58025408 	.word	0x58025408
 800450c:	5802541c 	.word	0x5802541c
 8004510:	58025430 	.word	0x58025430
 8004514:	58025444 	.word	0x58025444
 8004518:	58025458 	.word	0x58025458
 800451c:	5802546c 	.word	0x5802546c
 8004520:	58025480 	.word	0x58025480
 8004524:	58025494 	.word	0x58025494
 8004528:	1600963f 	.word	0x1600963f
 800452c:	58025940 	.word	0x58025940
 8004530:	1000823f 	.word	0x1000823f
 8004534:	40020940 	.word	0x40020940

08004538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004546:	4b89      	ldr	r3, [pc, #548]	@ (800476c <HAL_GPIO_Init+0x234>)
 8004548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800454a:	e194      	b.n	8004876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2101      	movs	r1, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8186 	beq.w	8004870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d005      	beq.n	800457c <HAL_GPIO_Init+0x44>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d130      	bne.n	80045de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045b2:	2201      	movs	r2, #1
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	f003 0201 	and.w	r2, r3, #1
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d017      	beq.n	800461a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d123      	bne.n	800466e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	220f      	movs	r2, #15
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	08da      	lsrs	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3208      	adds	r2, #8
 8004668:	69b9      	ldr	r1, [r7, #24]
 800466a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2203      	movs	r2, #3
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0203 	and.w	r2, r3, #3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80e0 	beq.w	8004870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <HAL_GPIO_Init+0x238>)
 80046b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80046b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004770 <HAL_GPIO_Init+0x238>)
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80046c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_GPIO_Init+0x238>)
 80046c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <HAL_GPIO_Init+0x23c>)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a20      	ldr	r2, [pc, #128]	@ (8004778 <HAL_GPIO_Init+0x240>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d052      	beq.n	80047a0 <HAL_GPIO_Init+0x268>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <HAL_GPIO_Init+0x244>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d031      	beq.n	8004766 <HAL_GPIO_Init+0x22e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <HAL_GPIO_Init+0x248>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02b      	beq.n	8004762 <HAL_GPIO_Init+0x22a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <HAL_GPIO_Init+0x24c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d025      	beq.n	800475e <HAL_GPIO_Init+0x226>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1c      	ldr	r2, [pc, #112]	@ (8004788 <HAL_GPIO_Init+0x250>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01f      	beq.n	800475a <HAL_GPIO_Init+0x222>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <HAL_GPIO_Init+0x254>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d019      	beq.n	8004756 <HAL_GPIO_Init+0x21e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <HAL_GPIO_Init+0x258>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_GPIO_Init+0x21a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <HAL_GPIO_Init+0x25c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00d      	beq.n	800474e <HAL_GPIO_Init+0x216>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <HAL_GPIO_Init+0x260>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <HAL_GPIO_Init+0x212>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a17      	ldr	r2, [pc, #92]	@ (800479c <HAL_GPIO_Init+0x264>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_GPIO_Init+0x20e>
 8004742:	2309      	movs	r3, #9
 8004744:	e02d      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 8004746:	230a      	movs	r3, #10
 8004748:	e02b      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 800474a:	2308      	movs	r3, #8
 800474c:	e029      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 800474e:	2307      	movs	r3, #7
 8004750:	e027      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 8004752:	2306      	movs	r3, #6
 8004754:	e025      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 8004756:	2305      	movs	r3, #5
 8004758:	e023      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 800475a:	2304      	movs	r3, #4
 800475c:	e021      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 800475e:	2303      	movs	r3, #3
 8004760:	e01f      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 8004762:	2302      	movs	r3, #2
 8004764:	e01d      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 8004766:	2301      	movs	r3, #1
 8004768:	e01b      	b.n	80047a2 <HAL_GPIO_Init+0x26a>
 800476a:	bf00      	nop
 800476c:	58000080 	.word	0x58000080
 8004770:	58024400 	.word	0x58024400
 8004774:	58000400 	.word	0x58000400
 8004778:	58020000 	.word	0x58020000
 800477c:	58020400 	.word	0x58020400
 8004780:	58020800 	.word	0x58020800
 8004784:	58020c00 	.word	0x58020c00
 8004788:	58021000 	.word	0x58021000
 800478c:	58021400 	.word	0x58021400
 8004790:	58021800 	.word	0x58021800
 8004794:	58021c00 	.word	0x58021c00
 8004798:	58022000 	.word	0x58022000
 800479c:	58022400 	.word	0x58022400
 80047a0:	2300      	movs	r3, #0
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	f002 0203 	and.w	r2, r2, #3
 80047a8:	0092      	lsls	r2, r2, #2
 80047aa:	4093      	lsls	r3, r2
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b2:	4938      	ldr	r1, [pc, #224]	@ (8004894 <HAL_GPIO_Init+0x35c>)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	3302      	adds	r3, #2
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3301      	adds	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f ae63 	bne.w	800454c <HAL_GPIO_Init+0x14>
  }
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	3724      	adds	r7, #36	@ 0x24
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	58000400 	.word	0x58000400

08004898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80048a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc f896 	bl	80009f0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e08b      	b.n	80049f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fb ffa0 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2224      	movs	r2, #36	@ 0x24
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800491c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800492c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	e006      	b.n	8004954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d108      	bne.n	800496e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	e007      	b.n	800497e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800497c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <HAL_I2C_Init+0x134>)
 800498a:	430b      	orrs	r3, r1
 800498c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800499c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69d9      	ldr	r1, [r3, #28]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	02008000 	.word	0x02008000

08004a04 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	@ 0x28
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	460b      	mov	r3, r1
 8004a12:	817b      	strh	r3, [r7, #10]
 8004a14:	4613      	mov	r3, r2
 8004a16:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	f040 80ef 	bne.w	8004c08 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a38:	d101      	bne.n	8004a3e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0e5      	b.n	8004c0a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_I2C_Master_Transmit_DMA+0x48>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e0de      	b.n	8004c0a <HAL_I2C_Master_Transmit_DMA+0x206>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2221      	movs	r2, #33	@ 0x21
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	893a      	ldrh	r2, [r7, #8]
 8004a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a66      	ldr	r2, [pc, #408]	@ (8004c14 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a66      	ldr	r2, [pc, #408]	@ (8004c18 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004a80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2bff      	cmp	r3, #255	@ 0xff
 8004a8a:	d906      	bls.n	8004a9a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	22ff      	movs	r2, #255	@ 0xff
 8004a90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004a92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e007      	b.n	8004aaa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004aa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004aa8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004acc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d074      	beq.n	8004bda <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d022      	beq.n	8004b3e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	4a47      	ldr	r2, [pc, #284]	@ (8004c1c <HAL_I2C_Master_Transmit_DMA+0x218>)
 8004afe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	4a46      	ldr	r2, [pc, #280]	@ (8004c20 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004b06:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	2200      	movs	r2, #0
 8004b16:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004b28:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004b2e:	f7fd f999 	bl	8001e64 <HAL_DMA_Start_IT>
 8004b32:	4603      	mov	r3, r0
 8004b34:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d13a      	bne.n	8004bb2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004b3c:	e013      	b.n	8004b66 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e051      	b.n	8004c0a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	8979      	ldrh	r1, [r7, #10]
 8004b72:	4b2c      	ldr	r3, [pc, #176]	@ (8004c24 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f001 fff5 	bl	8006b68 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004b98:	2110      	movs	r1, #16
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f002 f816 	bl	8006bcc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e028      	b.n	8004c04 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e017      	b.n	8004c0a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a12      	ldr	r2, [pc, #72]	@ (8004c28 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8004bde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f001 ffba 	bl	8006b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f001 ffe4 	bl	8006bcc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	ffff0000 	.word	0xffff0000
 8004c18:	08005423 	.word	0x08005423
 8004c1c:	0800678b 	.word	0x0800678b
 8004c20:	080068b9 	.word	0x080068b9
 8004c24:	80002000 	.word	0x80002000
 8004c28:	08004fe3 	.word	0x08004fe3

08004c2c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	f040 80cd 	bne.w	8004de8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c5c:	d101      	bne.n	8004c62 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e0c3      	b.n	8004dea <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_I2C_Master_Receive_DMA+0x44>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0bc      	b.n	8004dea <HAL_I2C_Master_Receive_DMA+0x1be>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2222      	movs	r2, #34	@ 0x22
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2210      	movs	r2, #16
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	893a      	ldrh	r2, [r7, #8]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a55      	ldr	r2, [pc, #340]	@ (8004df4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8004c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a55      	ldr	r2, [pc, #340]	@ (8004df8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2bff      	cmp	r3, #255	@ 0xff
 8004cae:	d906      	bls.n	8004cbe <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	22ff      	movs	r2, #255	@ 0xff
 8004cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004cb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e007      	b.n	8004cce <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ccc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d070      	beq.n	8004db8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	4a46      	ldr	r2, [pc, #280]	@ (8004dfc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	4a45      	ldr	r2, [pc, #276]	@ (8004e00 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004cec:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3324      	adds	r3, #36	@ 0x24
 8004d08:	4619      	mov	r1, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004d10:	f7fd f8a8 	bl	8001e64 <HAL_DMA_Start_IT>
 8004d14:	4603      	mov	r3, r0
 8004d16:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d138      	bne.n	8004d90 <HAL_I2C_Master_Receive_DMA+0x164>
 8004d1e:	e013      	b.n	8004d48 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e050      	b.n	8004dea <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	8979      	ldrh	r1, [r7, #10]
 8004d50:	4b2c      	ldr	r3, [pc, #176]	@ (8004e04 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f001 ff06 	bl	8006b68 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004d76:	2110      	movs	r1, #16
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f001 ff27 	bl	8006bcc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e029      	b.n	8004de4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da4:	f043 0210 	orr.w	r2, r3, #16
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e018      	b.n	8004dea <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a13      	ldr	r2, [pc, #76]	@ (8004e08 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004dbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e04 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 feca 	bl	8006b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ddc:	2102      	movs	r1, #2
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f001 fef4 	bl	8006bcc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	ffff0000 	.word	0xffff0000
 8004df8:	08005423 	.word	0x08005423
 8004dfc:	08006821 	.word	0x08006821
 8004e00:	080068b9 	.word	0x080068b9
 8004e04:	80002400 	.word	0x80002400
 8004e08:	08004fe3 	.word	0x08004fe3

08004e0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
  }
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00f      	beq.n	8004e82 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e80:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00f      	beq.n	8004eac <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	f043 0208 	orr.w	r2, r3, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eaa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00f      	beq.n	8004ed6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec4:	f043 0202 	orr.w	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ed4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 030b 	and.w	r3, r3, #11
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 fb13 	bl	8006514 <I2C_ITError>
  }
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
 8004f52:	4613      	mov	r3, r2
 8004f54:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd4:	b2db      	uxtb	r3, r3
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <I2C_Master_ISR_IT+0x1e>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e113      	b.n	8005228 <I2C_Master_ISR_IT+0x246>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b00      	cmp	r3, #0
 8005010:	d012      	beq.n	8005038 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	f043 0204 	orr.w	r2, r3, #4
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f001 fb86 	bl	8006742 <I2C_Flush_TXDR>
 8005036:	e0e4      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d022      	beq.n	8005088 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01d      	beq.n	8005088 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0304 	bic.w	r3, r3, #4
 8005052:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005086:	e0bc      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d128      	bne.n	80050e4 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005098:	2b00      	cmp	r3, #0
 800509a:	d023      	beq.n	80050e4 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01e      	beq.n	80050e4 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80a8 	beq.w	8005202 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80050e2:	e08e      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d05c      	beq.n	80051a8 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d057      	beq.n	80051a8 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d040      	beq.n	8005184 <I2C_Master_ISR_IT+0x1a2>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d13c      	bne.n	8005184 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005116:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2bff      	cmp	r3, #255	@ 0xff
 8005120:	d90e      	bls.n	8005140 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	22ff      	movs	r2, #255	@ 0xff
 8005126:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	b2da      	uxtb	r2, r3
 800512e:	8a79      	ldrh	r1, [r7, #18]
 8005130:	2300      	movs	r3, #0
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f001 fd15 	bl	8006b68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513e:	e032      	b.n	80051a6 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005152:	d00b      	beq.n	800516c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005158:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800515e:	8a79      	ldrh	r1, [r7, #18]
 8005160:	2000      	movs	r0, #0
 8005162:	9000      	str	r0, [sp, #0]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f001 fcff 	bl	8006b68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800516a:	e01c      	b.n	80051a6 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005170:	b2da      	uxtb	r2, r3
 8005172:	8a79      	ldrh	r1, [r7, #18]
 8005174:	2300      	movs	r3, #0
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f001 fcf3 	bl	8006b68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005182:	e010      	b.n	80051a6 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005192:	d003      	beq.n	800519c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fdb3 	bl	8005d00 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800519a:	e032      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800519c:	2140      	movs	r1, #64	@ 0x40
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f001 f9b8 	bl	8006514 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051a4:	e02d      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
 80051a6:	e02c      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d027      	beq.n	8005202 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d022      	beq.n	8005202 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d119      	bne.n	80051fa <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051d4:	d015      	beq.n	8005202 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051de:	d108      	bne.n	80051f2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	e007      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fd84 	bl	8005d00 <I2C_ITMasterSeqCplt>
 80051f8:	e003      	b.n	8005202 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80051fa:	2140      	movs	r1, #64	@ 0x40
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f001 f989 	bl	8006514 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fe0b 	bl	8005e34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <I2C_Slave_ISR_IT+0x24>
 8005250:	2302      	movs	r3, #2
 8005252:	e0e2      	b.n	800541a <I2C_Slave_ISR_IT+0x1ea>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005270:	6939      	ldr	r1, [r7, #16]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fea6 	bl	8005fc4 <I2C_ITSlaveCplt>
 8005278:	e0ca      	b.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d04b      	beq.n	800531c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800528a:	2b00      	cmp	r3, #0
 800528c:	d046      	beq.n	800531c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d128      	bne.n	80052ea <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b28      	cmp	r3, #40	@ 0x28
 80052a2:	d108      	bne.n	80052b6 <I2C_Slave_ISR_IT+0x86>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052aa:	d104      	bne.n	80052b6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80052ac:	6939      	ldr	r1, [r7, #16]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f001 f8dc 	bl	800646c <I2C_ITListenCplt>
 80052b4:	e031      	b.n	800531a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b29      	cmp	r3, #41	@ 0x29
 80052c0:	d10e      	bne.n	80052e0 <I2C_Slave_ISR_IT+0xb0>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052c8:	d00a      	beq.n	80052e0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f001 fa35 	bl	8006742 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fd4e 	bl	8005d7a <I2C_ITSlaveSeqCplt>
 80052de:	e01c      	b.n	800531a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2210      	movs	r2, #16
 80052e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80052e8:	e08f      	b.n	800540a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2210      	movs	r2, #16
 80052f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <I2C_Slave_ISR_IT+0xdc>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800530a:	d17e      	bne.n	800540a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005310:	4619      	mov	r1, r3
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f001 f8fe 	bl	8006514 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005318:	e077      	b.n	800540a <I2C_Slave_ISR_IT+0x1da>
 800531a:	e076      	b.n	800540a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d02f      	beq.n	8005386 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800532c:	2b00      	cmp	r3, #0
 800532e:	d02a      	beq.n	8005386 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d018      	beq.n	800536c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d14b      	bne.n	800540e <I2C_Slave_ISR_IT+0x1de>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800537c:	d047      	beq.n	800540e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fcfb 	bl	8005d7a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005384:	e043      	b.n	800540e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800539a:	6939      	ldr	r1, [r7, #16]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fc2b 	bl	8005bf8 <I2C_ITAddrCplt>
 80053a2:	e035      	b.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d030      	beq.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02b      	beq.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d018      	beq.n	80053f4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80053f2:	e00d      	b.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053fa:	d002      	beq.n	8005402 <I2C_Slave_ISR_IT+0x1d2>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fcb9 	bl	8005d7a <I2C_ITSlaveSeqCplt>
 8005408:	e002      	b.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800540a:	bf00      	nop
 800540c:	e000      	b.n	8005410 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800540e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b088      	sub	sp, #32
 8005426:	af02      	add	r7, sp, #8
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <I2C_Master_ISR_DMA+0x1a>
 8005438:	2302      	movs	r3, #2
 800543a:	e0d9      	b.n	80055f0 <I2C_Master_ISR_DMA+0x1ce>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005454:	2b00      	cmp	r3, #0
 8005456:	d011      	beq.n	800547c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2210      	movs	r2, #16
 800545e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005464:	f043 0204 	orr.w	r2, r3, #4
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800546c:	2120      	movs	r1, #32
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f001 fbac 	bl	8006bcc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f001 f964 	bl	8006742 <I2C_Flush_TXDR>
 800547a:	e0b4      	b.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005482:	2b00      	cmp	r3, #0
 8005484:	d071      	beq.n	800556a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800548c:	2b00      	cmp	r3, #0
 800548e:	d06c      	beq.n	800556a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800549e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d04e      	beq.n	8005548 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2bff      	cmp	r3, #255	@ 0xff
 80054c0:	d906      	bls.n	80054d0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	@ 0xff
 80054c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80054c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e010      	b.n	80054f2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054e2:	d003      	beq.n	80054ec <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e002      	b.n	80054f2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80054ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054f0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	8a79      	ldrh	r1, [r7, #18]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f001 fb31 	bl	8006b68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b22      	cmp	r3, #34	@ 0x22
 8005522:	d108      	bne.n	8005536 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005532:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005534:	e057      	b.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005544:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005546:	e04e      	b.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005556:	d003      	beq.n	8005560 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fbd1 	bl	8005d00 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800555e:	e042      	b.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005560:	2140      	movs	r1, #64	@ 0x40
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 ffd6 	bl	8006514 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005568:	e03d      	b.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d028      	beq.n	80055c6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d119      	bne.n	80055bc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005596:	d025      	beq.n	80055e4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055a0:	d108      	bne.n	80055b4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80055b2:	e017      	b.n	80055e4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fba3 	bl	8005d00 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80055ba:	e013      	b.n	80055e4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80055bc:	2140      	movs	r1, #64	@ 0x40
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 ffa8 	bl	8006514 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80055c4:	e00e      	b.n	80055e4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fc29 	bl	8005e34 <I2C_ITMasterCplt>
 80055e2:	e000      	b.n	80055e6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80055e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005604:	4b8d      	ldr	r3, [pc, #564]	@ (800583c <I2C_Mem_ISR_DMA+0x244>)
 8005606:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <I2C_Mem_ISR_DMA+0x1e>
 8005612:	2302      	movs	r3, #2
 8005614:	e10e      	b.n	8005834 <I2C_Mem_ISR_DMA+0x23c>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d016      	beq.n	8005656 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	f043 0204 	orr.w	r2, r3, #4
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005646:	2120      	movs	r1, #32
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 fabf 	bl	8006bcc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f001 f877 	bl	8006742 <I2C_Flush_TXDR>
 8005654:	e0e9      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005672:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f04f 32ff 	mov.w	r2, #4294967295
 800567a:	651a      	str	r2, [r3, #80]	@ 0x50
 800567c:	e0d5      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d05f      	beq.n	8005748 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800568e:	2b00      	cmp	r3, #0
 8005690:	d05a      	beq.n	8005748 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005692:	2101      	movs	r1, #1
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f001 fb1d 	bl	8006cd4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800569a:	2110      	movs	r1, #16
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f001 fa95 	bl	8006bcc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d048      	beq.n	800573e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2bff      	cmp	r3, #255	@ 0xff
 80056b4:	d910      	bls.n	80056d8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	22ff      	movs	r2, #255	@ 0xff
 80056ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c0:	b299      	uxth	r1, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f001 fa49 	bl	8006b68 <I2C_TransferConfig>
 80056d6:	e011      	b.n	80056fc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e6:	b299      	uxth	r1, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f001 fa36 	bl	8006b68 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b22      	cmp	r3, #34	@ 0x22
 8005718:	d108      	bne.n	800572c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005728:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800572a:	e07e      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800573a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800573c:	e075      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800573e:	2140      	movs	r1, #64	@ 0x40
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fee7 	bl	8006514 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005746:	e070      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d05d      	beq.n	800580e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005758:	2b00      	cmp	r3, #0
 800575a:	d058      	beq.n	800580e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800575c:	2101      	movs	r1, #1
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f001 fab8 	bl	8006cd4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005764:	2110      	movs	r1, #16
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f001 fa30 	bl	8006bcc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b22      	cmp	r3, #34	@ 0x22
 8005776:	d101      	bne.n	800577c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005778:	4b31      	ldr	r3, [pc, #196]	@ (8005840 <I2C_Mem_ISR_DMA+0x248>)
 800577a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2bff      	cmp	r3, #255	@ 0xff
 8005784:	d910      	bls.n	80057a8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	22ff      	movs	r2, #255	@ 0xff
 800578a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005790:	b299      	uxth	r1, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	b2da      	uxtb	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f001 f9e1 	bl	8006b68 <I2C_TransferConfig>
 80057a6:	e011      	b.n	80057cc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b6:	b299      	uxth	r1, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f001 f9ce 	bl	8006b68 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b22      	cmp	r3, #34	@ 0x22
 80057e8:	d108      	bne.n	80057fc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057f8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057fa:	e016      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800580a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800580c:	e00d      	b.n	800582a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fb05 	bl	8005e34 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	80002000 	.word	0x80002000
 8005840:	80002400 	.word	0x80002400

08005844 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <I2C_Slave_ISR_DMA+0x24>
 8005864:	2302      	movs	r3, #2
 8005866:	e1c2      	b.n	8005bee <I2C_Slave_ISR_DMA+0x3aa>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005880:	2b00      	cmp	r3, #0
 8005882:	d004      	beq.n	800588e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fb9c 	bl	8005fc4 <I2C_ITSlaveCplt>
 800588c:	e1aa      	b.n	8005be4 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8197 	beq.w	8005bc8 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8191 	beq.w	8005bc8 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 817f 	beq.w	8005bba <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d07b      	beq.n	80059bc <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d076      	beq.n	80059bc <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a74      	ldr	r2, [pc, #464]	@ (8005aa8 <I2C_Slave_ISR_DMA+0x264>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d059      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a72      	ldr	r2, [pc, #456]	@ (8005aac <I2C_Slave_ISR_DMA+0x268>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d053      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a70      	ldr	r2, [pc, #448]	@ (8005ab0 <I2C_Slave_ISR_DMA+0x26c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04d      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a6e      	ldr	r2, [pc, #440]	@ (8005ab4 <I2C_Slave_ISR_DMA+0x270>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d047      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a6c      	ldr	r2, [pc, #432]	@ (8005ab8 <I2C_Slave_ISR_DMA+0x274>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d041      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a6a      	ldr	r2, [pc, #424]	@ (8005abc <I2C_Slave_ISR_DMA+0x278>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a68      	ldr	r2, [pc, #416]	@ (8005ac0 <I2C_Slave_ISR_DMA+0x27c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d035      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a66      	ldr	r2, [pc, #408]	@ (8005ac4 <I2C_Slave_ISR_DMA+0x280>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02f      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a64      	ldr	r2, [pc, #400]	@ (8005ac8 <I2C_Slave_ISR_DMA+0x284>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d029      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a62      	ldr	r2, [pc, #392]	@ (8005acc <I2C_Slave_ISR_DMA+0x288>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d023      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a60      	ldr	r2, [pc, #384]	@ (8005ad0 <I2C_Slave_ISR_DMA+0x28c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a5e      	ldr	r2, [pc, #376]	@ (8005ad4 <I2C_Slave_ISR_DMA+0x290>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d017      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5c      	ldr	r2, [pc, #368]	@ (8005ad8 <I2C_Slave_ISR_DMA+0x294>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d011      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5a      	ldr	r2, [pc, #360]	@ (8005adc <I2C_Slave_ISR_DMA+0x298>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00b      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a58      	ldr	r2, [pc, #352]	@ (8005ae0 <I2C_Slave_ISR_DMA+0x29c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d005      	beq.n	800598e <I2C_Slave_ISR_DMA+0x14a>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a56      	ldr	r2, [pc, #344]	@ (8005ae4 <I2C_Slave_ISR_DMA+0x2a0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d109      	bne.n	80059a2 <I2C_Slave_ISR_DMA+0x15e>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	e008      	b.n	80059b4 <I2C_Slave_ISR_DMA+0x170>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 80059b8:	2301      	movs	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 809e 	beq.w	8005b02 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8098 	beq.w	8005b02 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a33      	ldr	r2, [pc, #204]	@ (8005aa8 <I2C_Slave_ISR_DMA+0x264>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d059      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a31      	ldr	r2, [pc, #196]	@ (8005aac <I2C_Slave_ISR_DMA+0x268>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d053      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	@ (8005ab0 <I2C_Slave_ISR_DMA+0x26c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04d      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab4 <I2C_Slave_ISR_DMA+0x270>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d047      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <I2C_Slave_ISR_DMA+0x274>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d041      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a29      	ldr	r2, [pc, #164]	@ (8005abc <I2C_Slave_ISR_DMA+0x278>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d03b      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a27      	ldr	r2, [pc, #156]	@ (8005ac0 <I2C_Slave_ISR_DMA+0x27c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d035      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a25      	ldr	r2, [pc, #148]	@ (8005ac4 <I2C_Slave_ISR_DMA+0x280>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02f      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a23      	ldr	r2, [pc, #140]	@ (8005ac8 <I2C_Slave_ISR_DMA+0x284>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d029      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a21      	ldr	r2, [pc, #132]	@ (8005acc <I2C_Slave_ISR_DMA+0x288>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d023      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad0 <I2C_Slave_ISR_DMA+0x28c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01d      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad4 <I2C_Slave_ISR_DMA+0x290>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d017      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad8 <I2C_Slave_ISR_DMA+0x294>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d011      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	@ (8005adc <I2C_Slave_ISR_DMA+0x298>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a17      	ldr	r2, [pc, #92]	@ (8005ae0 <I2C_Slave_ISR_DMA+0x29c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d005      	beq.n	8005a92 <I2C_Slave_ISR_DMA+0x24e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <I2C_Slave_ISR_DMA+0x2a0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d12a      	bne.n	8005ae8 <I2C_Slave_ISR_DMA+0x2a4>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	e029      	b.n	8005afa <I2C_Slave_ISR_DMA+0x2b6>
 8005aa6:	bf00      	nop
 8005aa8:	40020010 	.word	0x40020010
 8005aac:	40020028 	.word	0x40020028
 8005ab0:	40020040 	.word	0x40020040
 8005ab4:	40020058 	.word	0x40020058
 8005ab8:	40020070 	.word	0x40020070
 8005abc:	40020088 	.word	0x40020088
 8005ac0:	400200a0 	.word	0x400200a0
 8005ac4:	400200b8 	.word	0x400200b8
 8005ac8:	40020410 	.word	0x40020410
 8005acc:	40020428 	.word	0x40020428
 8005ad0:	40020440 	.word	0x40020440
 8005ad4:	40020458 	.word	0x40020458
 8005ad8:	40020470 	.word	0x40020470
 8005adc:	40020488 	.word	0x40020488
 8005ae0:	400204a0 	.word	0x400204a0
 8005ae4:	400204b8 	.word	0x400204b8
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8005afe:	2301      	movs	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d128      	bne.n	8005b5a <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b28      	cmp	r3, #40	@ 0x28
 8005b12:	d108      	bne.n	8005b26 <I2C_Slave_ISR_DMA+0x2e2>
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b1a:	d104      	bne.n	8005b26 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fca4 	bl	800646c <I2C_ITListenCplt>
 8005b24:	e048      	b.n	8005bb8 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b29      	cmp	r3, #41	@ 0x29
 8005b30:	d10e      	bne.n	8005b50 <I2C_Slave_ISR_DMA+0x30c>
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b38:	d00a      	beq.n	8005b50 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fdfd 	bl	8006742 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f916 	bl	8005d7a <I2C_ITSlaveSeqCplt>
 8005b4e:	e033      	b.n	8005bb8 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2210      	movs	r2, #16
 8005b56:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005b58:	e034      	b.n	8005bc4 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2210      	movs	r2, #16
 8005b60:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f043 0204 	orr.w	r2, r3, #4
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b74:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <I2C_Slave_ISR_DMA+0x340>
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b82:	d11f      	bne.n	8005bc4 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	2b21      	cmp	r3, #33	@ 0x21
 8005b88:	d002      	beq.n	8005b90 <I2C_Slave_ISR_DMA+0x34c>
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b29      	cmp	r3, #41	@ 0x29
 8005b8e:	d103      	bne.n	8005b98 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2221      	movs	r2, #33	@ 0x21
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b96:	e008      	b.n	8005baa <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	2b22      	cmp	r3, #34	@ 0x22
 8005b9c:	d002      	beq.n	8005ba4 <I2C_Slave_ISR_DMA+0x360>
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba2:	d102      	bne.n	8005baa <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2222      	movs	r2, #34	@ 0x22
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fcaf 	bl	8006514 <I2C_ITError>
      if (treatdmanack == 1U)
 8005bb6:	e005      	b.n	8005bc4 <I2C_Slave_ISR_DMA+0x380>
 8005bb8:	e004      	b.n	8005bc4 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005bc2:	e00f      	b.n	8005be4 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8005bc4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005bc6:	e00d      	b.n	8005be4 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f80a 	bl	8005bf8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop

08005bf8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c0e:	2b28      	cmp	r3, #40	@ 0x28
 8005c10:	d16a      	bne.n	8005ce8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005c30:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005c4c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d138      	bne.n	8005cc8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	09db      	lsrs	r3, r3, #7
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	89bb      	ldrh	r3, [r7, #12]
 8005c5e:	4053      	eors	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f003 0306 	and.w	r3, r3, #6
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11c      	bne.n	8005ca4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d13b      	bne.n	8005cf8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c96:	89ba      	ldrh	r2, [r7, #12]
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff f952 	bl	8004f46 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ca2:	e029      	b.n	8005cf8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ca8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 f811 	bl	8006cd4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cba:	89ba      	ldrh	r2, [r7, #12]
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff f940 	bl	8004f46 <HAL_I2C_AddrCallback>
}
 8005cc6:	e017      	b.n	8005cf8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 f801 	bl	8006cd4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cda:	89ba      	ldrh	r2, [r7, #12]
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff f930 	bl	8004f46 <HAL_I2C_AddrCallback>
}
 8005ce6:	e007      	b.n	8005cf8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2208      	movs	r2, #8
 8005cee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b21      	cmp	r3, #33	@ 0x21
 8005d1a:	d115      	bne.n	8005d48 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2211      	movs	r2, #17
 8005d28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 ffce 	bl	8006cd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f8d8 	bl	8004ef6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d46:	e014      	b.n	8005d72 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2212      	movs	r2, #18
 8005d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d5c:	2102      	movs	r1, #2
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 ffb8 	bl	8006cd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff f8cc 	bl	8004f0a <HAL_I2C_MasterRxCpltCallback>
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e00c      	b.n	8005dc8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dc6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b29      	cmp	r3, #41	@ 0x29
 8005dd2:	d112      	bne.n	8005dfa <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2228      	movs	r2, #40	@ 0x28
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2221      	movs	r2, #33	@ 0x21
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005de2:	2101      	movs	r1, #1
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 ff75 	bl	8006cd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff f893 	bl	8004f1e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005df8:	e017      	b.n	8005e2a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e04:	d111      	bne.n	8005e2a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2228      	movs	r2, #40	@ 0x28
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2222      	movs	r2, #34	@ 0x22
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e14:	2102      	movs	r1, #2
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 ff5c 	bl	8006cd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff f884 	bl	8004f32 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2220      	movs	r2, #32
 8005e48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b21      	cmp	r3, #33	@ 0x21
 8005e54:	d107      	bne.n	8005e66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e56:	2101      	movs	r1, #1
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 ff3b 	bl	8006cd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2211      	movs	r2, #17
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e64:	e00c      	b.n	8005e80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b22      	cmp	r3, #34	@ 0x22
 8005e70:	d106      	bne.n	8005e80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e72:	2102      	movs	r1, #2
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 ff2d 	bl	8006cd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2212      	movs	r2, #18
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8005fbc <I2C_ITMasterCplt+0x188>)
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a49      	ldr	r2, [pc, #292]	@ (8005fc0 <I2C_ITMasterCplt+0x18c>)
 8005e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2210      	movs	r2, #16
 8005eac:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b60      	cmp	r3, #96	@ 0x60
 8005ec4:	d10a      	bne.n	8005edc <I2C_ITMasterCplt+0xa8>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005eda:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fc30 	bl	8006742 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b60      	cmp	r3, #96	@ 0x60
 8005ef2:	d002      	beq.n	8005efa <I2C_ITMasterCplt+0xc6>
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d006      	beq.n	8005f08 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fb07 	bl	8006514 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f06:	e054      	b.n	8005fb2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b21      	cmp	r3, #33	@ 0x21
 8005f12:	d124      	bne.n	8005f5e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b40      	cmp	r3, #64	@ 0x40
 8005f2c:	d10b      	bne.n	8005f46 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff f819 	bl	8004f76 <HAL_I2C_MemTxCpltCallback>
}
 8005f44:	e035      	b.n	8005fb2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fe ffcd 	bl	8004ef6 <HAL_I2C_MasterTxCpltCallback>
}
 8005f5c:	e029      	b.n	8005fb2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b22      	cmp	r3, #34	@ 0x22
 8005f68:	d123      	bne.n	8005fb2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b40      	cmp	r3, #64	@ 0x40
 8005f82:	d10b      	bne.n	8005f9c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fe fff8 	bl	8004f8a <HAL_I2C_MemRxCpltCallback>
}
 8005f9a:	e00a      	b.n	8005fb2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fe ffac 	bl	8004f0a <HAL_I2C_MasterRxCpltCallback>
}
 8005fb2:	bf00      	nop
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	fe00e800 	.word	0xfe00e800
 8005fc0:	ffff0000 	.word	0xffff0000

08005fc4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fe6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2220      	movs	r2, #32
 8005fee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	2b21      	cmp	r3, #33	@ 0x21
 8005ff4:	d002      	beq.n	8005ffc <I2C_ITSlaveCplt+0x38>
 8005ff6:	7afb      	ldrb	r3, [r7, #11]
 8005ff8:	2b29      	cmp	r3, #41	@ 0x29
 8005ffa:	d108      	bne.n	800600e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005ffc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fe67 	bl	8006cd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2221      	movs	r2, #33	@ 0x21
 800600a:	631a      	str	r2, [r3, #48]	@ 0x30
 800600c:	e019      	b.n	8006042 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	2b22      	cmp	r3, #34	@ 0x22
 8006012:	d002      	beq.n	800601a <I2C_ITSlaveCplt+0x56>
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	2b2a      	cmp	r3, #42	@ 0x2a
 8006018:	d108      	bne.n	800602c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800601a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fe58 	bl	8006cd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2222      	movs	r2, #34	@ 0x22
 8006028:	631a      	str	r2, [r3, #48]	@ 0x30
 800602a:	e00a      	b.n	8006042 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800602c:	7afb      	ldrb	r3, [r7, #11]
 800602e:	2b28      	cmp	r3, #40	@ 0x28
 8006030:	d107      	bne.n	8006042 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006032:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fe4c 	bl	8006cd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006050:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b7f      	ldr	r3, [pc, #508]	@ (800625c <I2C_ITSlaveCplt+0x298>)
 800605e:	400b      	ands	r3, r1
 8006060:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb6d 	bl	8006742 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d07a      	beq.n	8006168 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006080:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8111 	beq.w	80062ae <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a73      	ldr	r2, [pc, #460]	@ (8006260 <I2C_ITSlaveCplt+0x29c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d059      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a71      	ldr	r2, [pc, #452]	@ (8006264 <I2C_ITSlaveCplt+0x2a0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d053      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a6f      	ldr	r2, [pc, #444]	@ (8006268 <I2C_ITSlaveCplt+0x2a4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d04d      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6d      	ldr	r2, [pc, #436]	@ (800626c <I2C_ITSlaveCplt+0x2a8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d047      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6b      	ldr	r2, [pc, #428]	@ (8006270 <I2C_ITSlaveCplt+0x2ac>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d041      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a69      	ldr	r2, [pc, #420]	@ (8006274 <I2C_ITSlaveCplt+0x2b0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d03b      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a67      	ldr	r2, [pc, #412]	@ (8006278 <I2C_ITSlaveCplt+0x2b4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d035      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a65      	ldr	r2, [pc, #404]	@ (800627c <I2C_ITSlaveCplt+0x2b8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d02f      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a63      	ldr	r2, [pc, #396]	@ (8006280 <I2C_ITSlaveCplt+0x2bc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d029      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a61      	ldr	r2, [pc, #388]	@ (8006284 <I2C_ITSlaveCplt+0x2c0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d023      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a5f      	ldr	r2, [pc, #380]	@ (8006288 <I2C_ITSlaveCplt+0x2c4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d01d      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5d      	ldr	r2, [pc, #372]	@ (800628c <I2C_ITSlaveCplt+0x2c8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d017      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a5b      	ldr	r2, [pc, #364]	@ (8006290 <I2C_ITSlaveCplt+0x2cc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d011      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a59      	ldr	r2, [pc, #356]	@ (8006294 <I2C_ITSlaveCplt+0x2d0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a57      	ldr	r2, [pc, #348]	@ (8006298 <I2C_ITSlaveCplt+0x2d4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d005      	beq.n	800614c <I2C_ITSlaveCplt+0x188>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a55      	ldr	r2, [pc, #340]	@ (800629c <I2C_ITSlaveCplt+0x2d8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d105      	bne.n	8006158 <I2C_ITSlaveCplt+0x194>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	b29b      	uxth	r3, r3
 8006156:	e004      	b.n	8006162 <I2C_ITSlaveCplt+0x19e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	b29b      	uxth	r3, r3
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8006166:	e0a2      	b.n	80062ae <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 809d 	beq.w	80062ae <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006182:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8090 	beq.w	80062ae <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a32      	ldr	r2, [pc, #200]	@ (8006260 <I2C_ITSlaveCplt+0x29c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d059      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a30      	ldr	r2, [pc, #192]	@ (8006264 <I2C_ITSlaveCplt+0x2a0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d053      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006268 <I2C_ITSlaveCplt+0x2a4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04d      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2c      	ldr	r2, [pc, #176]	@ (800626c <I2C_ITSlaveCplt+0x2a8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d047      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006270 <I2C_ITSlaveCplt+0x2ac>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d041      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a28      	ldr	r2, [pc, #160]	@ (8006274 <I2C_ITSlaveCplt+0x2b0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a26      	ldr	r2, [pc, #152]	@ (8006278 <I2C_ITSlaveCplt+0x2b4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d035      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a24      	ldr	r2, [pc, #144]	@ (800627c <I2C_ITSlaveCplt+0x2b8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02f      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a22      	ldr	r2, [pc, #136]	@ (8006280 <I2C_ITSlaveCplt+0x2bc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d029      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a20      	ldr	r2, [pc, #128]	@ (8006284 <I2C_ITSlaveCplt+0x2c0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d023      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1e      	ldr	r2, [pc, #120]	@ (8006288 <I2C_ITSlaveCplt+0x2c4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	@ (800628c <I2C_ITSlaveCplt+0x2c8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d017      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1a      	ldr	r2, [pc, #104]	@ (8006290 <I2C_ITSlaveCplt+0x2cc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d011      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <I2C_ITSlaveCplt+0x2d0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00b      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <I2C_ITSlaveCplt+0x2d4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d005      	beq.n	800624e <I2C_ITSlaveCplt+0x28a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a14      	ldr	r2, [pc, #80]	@ (800629c <I2C_ITSlaveCplt+0x2d8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d128      	bne.n	80062a0 <I2C_ITSlaveCplt+0x2dc>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b29b      	uxth	r3, r3
 8006258:	e027      	b.n	80062aa <I2C_ITSlaveCplt+0x2e6>
 800625a:	bf00      	nop
 800625c:	fe00e800 	.word	0xfe00e800
 8006260:	40020010 	.word	0x40020010
 8006264:	40020028 	.word	0x40020028
 8006268:	40020040 	.word	0x40020040
 800626c:	40020058 	.word	0x40020058
 8006270:	40020070 	.word	0x40020070
 8006274:	40020088 	.word	0x40020088
 8006278:	400200a0 	.word	0x400200a0
 800627c:	400200b8 	.word	0x400200b8
 8006280:	40020410 	.word	0x40020410
 8006284:	40020428 	.word	0x40020428
 8006288:	40020440 	.word	0x40020440
 800628c:	40020458 	.word	0x40020458
 8006290:	40020470 	.word	0x40020470
 8006294:	40020488 	.word	0x40020488
 8006298:	400204a0 	.word	0x400204a0
 800629c:	400204b8 	.word	0x400204b8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d020      	beq.n	80062fa <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b00      	cmp	r3, #0
 8006318:	d049      	beq.n	80063ae <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006320:	2b00      	cmp	r3, #0
 8006322:	d044      	beq.n	80063ae <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d128      	bne.n	8006380 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b28      	cmp	r3, #40	@ 0x28
 8006338:	d108      	bne.n	800634c <I2C_ITSlaveCplt+0x388>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006340:	d104      	bne.n	800634c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f891 	bl	800646c <I2C_ITListenCplt>
 800634a:	e030      	b.n	80063ae <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b29      	cmp	r3, #41	@ 0x29
 8006356:	d10e      	bne.n	8006376 <I2C_ITSlaveCplt+0x3b2>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800635e:	d00a      	beq.n	8006376 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2210      	movs	r2, #16
 8006366:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f9ea 	bl	8006742 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fd03 	bl	8005d7a <I2C_ITSlaveSeqCplt>
 8006374:	e01b      	b.n	80063ae <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2210      	movs	r2, #16
 800637c:	61da      	str	r2, [r3, #28]
 800637e:	e016      	b.n	80063ae <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2210      	movs	r2, #16
 8006386:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638c:	f043 0204 	orr.w	r2, r3, #4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <I2C_ITSlaveCplt+0x3de>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063a0:	d105      	bne.n	80063ae <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8b3 	bl	8006514 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8a2 	bl	8006514 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b28      	cmp	r3, #40	@ 0x28
 80063da:	d141      	bne.n	8006460 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f844 	bl	800646c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063e4:	e03c      	b.n	8006460 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063ee:	d014      	beq.n	800641a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff fcc2 	bl	8005d7a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006468 <I2C_ITSlaveCplt+0x4a4>)
 80063fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fe fda5 	bl	8004f62 <HAL_I2C_ListenCpltCallback>
}
 8006418:	e022      	b.n	8006460 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b22      	cmp	r3, #34	@ 0x22
 8006424:	d10e      	bne.n	8006444 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fe fd78 	bl	8004f32 <HAL_I2C_SlaveRxCpltCallback>
}
 8006442:	e00d      	b.n	8006460 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fe fd5f 	bl	8004f1e <HAL_I2C_SlaveTxCpltCallback>
}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	ffff0000 	.word	0xffff0000

0800646c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a25      	ldr	r2, [pc, #148]	@ (8006510 <I2C_ITListenCplt+0xa4>)
 800647a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d022      	beq.n	80064e8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d012      	beq.n	80064e8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e0:	f043 0204 	orr.w	r2, r3, #4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064e8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fbf1 	bl	8006cd4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2210      	movs	r2, #16
 80064f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fe fd2d 	bl	8004f62 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	ffff0000 	.word	0xffff0000

08006514 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006524:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a6d      	ldr	r2, [pc, #436]	@ (80066e8 <I2C_ITError+0x1d4>)
 8006532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b28      	cmp	r3, #40	@ 0x28
 800654a:	d005      	beq.n	8006558 <I2C_ITError+0x44>
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b29      	cmp	r3, #41	@ 0x29
 8006550:	d002      	beq.n	8006558 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2b2a      	cmp	r3, #42	@ 0x2a
 8006556:	d10b      	bne.n	8006570 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006558:	2103      	movs	r1, #3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fbba 	bl	8006cd4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2228      	movs	r2, #40	@ 0x28
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a60      	ldr	r2, [pc, #384]	@ (80066ec <I2C_ITError+0x1d8>)
 800656c:	635a      	str	r2, [r3, #52]	@ 0x34
 800656e:	e030      	b.n	80065d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006570:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fbad 	bl	8006cd4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f8e1 	bl	8006742 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b60      	cmp	r3, #96	@ 0x60
 800658a:	d01f      	beq.n	80065cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d114      	bne.n	80065cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	d109      	bne.n	80065c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2210      	movs	r2, #16
 80065b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065bc:	f043 0204 	orr.w	r2, r3, #4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d039      	beq.n	8006654 <I2C_ITError+0x140>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b11      	cmp	r3, #17
 80065e4:	d002      	beq.n	80065ec <I2C_ITError+0xd8>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b21      	cmp	r3, #33	@ 0x21
 80065ea:	d133      	bne.n	8006654 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065fa:	d107      	bne.n	800660c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800660a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd fb57 	bl	8003cc4 <HAL_DMA_GetState>
 8006616:	4603      	mov	r3, r0
 8006618:	2b01      	cmp	r3, #1
 800661a:	d017      	beq.n	800664c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006620:	4a33      	ldr	r2, [pc, #204]	@ (80066f0 <I2C_ITError+0x1dc>)
 8006622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	4618      	mov	r0, r3
 8006632:	f7fc f99f 	bl	8002974 <HAL_DMA_Abort_IT>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d04d      	beq.n	80066d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006646:	4610      	mov	r0, r2
 8006648:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800664a:	e045      	b.n	80066d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f851 	bl	80066f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006652:	e041      	b.n	80066d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d039      	beq.n	80066d0 <I2C_ITError+0x1bc>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b12      	cmp	r3, #18
 8006660:	d002      	beq.n	8006668 <I2C_ITError+0x154>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b22      	cmp	r3, #34	@ 0x22
 8006666:	d133      	bne.n	80066d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006676:	d107      	bne.n	8006688 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006686:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668c:	4618      	mov	r0, r3
 800668e:	f7fd fb19 	bl	8003cc4 <HAL_DMA_GetState>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d017      	beq.n	80066c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	4a14      	ldr	r2, [pc, #80]	@ (80066f0 <I2C_ITError+0x1dc>)
 800669e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fc f961 	bl	8002974 <HAL_DMA_Abort_IT>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066c2:	4610      	mov	r0, r2
 80066c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066c6:	e009      	b.n	80066dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f813 	bl	80066f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066ce:	e005      	b.n	80066dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f80f 	bl	80066f4 <I2C_TreatErrorCallback>
  }
}
 80066d6:	e002      	b.n	80066de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066dc:	bf00      	nop
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	ffff0000 	.word	0xffff0000
 80066ec:	08005231 	.word	0x08005231
 80066f0:	08006b2d 	.word	0x08006b2d

080066f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b60      	cmp	r3, #96	@ 0x60
 8006706:	d10e      	bne.n	8006726 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fe fc47 	bl	8004fb2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006724:	e009      	b.n	800673a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fe fc32 	bl	8004f9e <HAL_I2C_ErrorCallback>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d103      	bne.n	8006760 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b01      	cmp	r3, #1
 800676c:	d007      	beq.n	800677e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0201 	orr.w	r2, r2, #1
 800677c:	619a      	str	r2, [r3, #24]
  }
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067a6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80067b2:	2120      	movs	r1, #32
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fa09 	bl	8006bcc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80067ba:	e02d      	b.n	8006818 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80067c4:	441a      	add	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2bff      	cmp	r3, #255	@ 0xff
 80067d2:	d903      	bls.n	80067dc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	22ff      	movs	r2, #255	@ 0xff
 80067d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80067da:	e004      	b.n	80067e6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	4619      	mov	r1, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3328      	adds	r3, #40	@ 0x28
 80067f6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80067fc:	f7fb fb32 	bl	8001e64 <HAL_DMA_Start_IT>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006806:	2110      	movs	r1, #16
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff fe83 	bl	8006514 <I2C_ITError>
}
 800680e:	e003      	b.n	8006818 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006810:	2140      	movs	r1, #64	@ 0x40
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f9da 	bl	8006bcc <I2C_Enable_IRQ>
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800683c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006848:	2120      	movs	r1, #32
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f9be 	bl	8006bcc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006850:	e02d      	b.n	80068ae <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800685a:	441a      	add	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2bff      	cmp	r3, #255	@ 0xff
 8006868:	d903      	bls.n	8006872 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	@ 0xff
 800686e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006870:	e004      	b.n	800687c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3324      	adds	r3, #36	@ 0x24
 8006886:	4619      	mov	r1, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006892:	f7fb fae7 	bl	8001e64 <HAL_DMA_Start_IT>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800689c:	2110      	movs	r1, #16
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff fe38 	bl	8006514 <I2C_ITError>
}
 80068a4:	e003      	b.n	80068ae <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80068a6:	2140      	movs	r1, #64	@ 0x40
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f98f 	bl	8006bcc <I2C_Enable_IRQ>
}
 80068ae:	bf00      	nop
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d076      	beq.n	80069c0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	@ (8006aa0 <I2C_DMAError+0x1e8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d059      	beq.n	8006992 <I2C_DMAError+0xda>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a6f      	ldr	r2, [pc, #444]	@ (8006aa4 <I2C_DMAError+0x1ec>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d053      	beq.n	8006992 <I2C_DMAError+0xda>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a6d      	ldr	r2, [pc, #436]	@ (8006aa8 <I2C_DMAError+0x1f0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d04d      	beq.n	8006992 <I2C_DMAError+0xda>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a6b      	ldr	r2, [pc, #428]	@ (8006aac <I2C_DMAError+0x1f4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d047      	beq.n	8006992 <I2C_DMAError+0xda>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a69      	ldr	r2, [pc, #420]	@ (8006ab0 <I2C_DMAError+0x1f8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d041      	beq.n	8006992 <I2C_DMAError+0xda>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a67      	ldr	r2, [pc, #412]	@ (8006ab4 <I2C_DMAError+0x1fc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d03b      	beq.n	8006992 <I2C_DMAError+0xda>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a65      	ldr	r2, [pc, #404]	@ (8006ab8 <I2C_DMAError+0x200>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d035      	beq.n	8006992 <I2C_DMAError+0xda>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a63      	ldr	r2, [pc, #396]	@ (8006abc <I2C_DMAError+0x204>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d02f      	beq.n	8006992 <I2C_DMAError+0xda>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a61      	ldr	r2, [pc, #388]	@ (8006ac0 <I2C_DMAError+0x208>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d029      	beq.n	8006992 <I2C_DMAError+0xda>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a5f      	ldr	r2, [pc, #380]	@ (8006ac4 <I2C_DMAError+0x20c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d023      	beq.n	8006992 <I2C_DMAError+0xda>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a5d      	ldr	r2, [pc, #372]	@ (8006ac8 <I2C_DMAError+0x210>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01d      	beq.n	8006992 <I2C_DMAError+0xda>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a5b      	ldr	r2, [pc, #364]	@ (8006acc <I2C_DMAError+0x214>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d017      	beq.n	8006992 <I2C_DMAError+0xda>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a59      	ldr	r2, [pc, #356]	@ (8006ad0 <I2C_DMAError+0x218>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d011      	beq.n	8006992 <I2C_DMAError+0xda>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a57      	ldr	r2, [pc, #348]	@ (8006ad4 <I2C_DMAError+0x21c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <I2C_DMAError+0xda>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a55      	ldr	r2, [pc, #340]	@ (8006ad8 <I2C_DMAError+0x220>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d005      	beq.n	8006992 <I2C_DMAError+0xda>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a53      	ldr	r2, [pc, #332]	@ (8006adc <I2C_DMAError+0x224>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d109      	bne.n	80069a6 <I2C_DMAError+0xee>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e008      	b.n	80069b8 <I2C_DMAError+0x100>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80069bc:	2301      	movs	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8098 	beq.w	8006afa <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a33      	ldr	r2, [pc, #204]	@ (8006aa0 <I2C_DMAError+0x1e8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d059      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a31      	ldr	r2, [pc, #196]	@ (8006aa4 <I2C_DMAError+0x1ec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d053      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa8 <I2C_DMAError+0x1f0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d04d      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a2d      	ldr	r2, [pc, #180]	@ (8006aac <I2C_DMAError+0x1f4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d047      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab0 <I2C_DMAError+0x1f8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d041      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a29      	ldr	r2, [pc, #164]	@ (8006ab4 <I2C_DMAError+0x1fc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d03b      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a27      	ldr	r2, [pc, #156]	@ (8006ab8 <I2C_DMAError+0x200>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d035      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a25      	ldr	r2, [pc, #148]	@ (8006abc <I2C_DMAError+0x204>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d02f      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a23      	ldr	r2, [pc, #140]	@ (8006ac0 <I2C_DMAError+0x208>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d029      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	@ (8006ac4 <I2C_DMAError+0x20c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d023      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac8 <I2C_DMAError+0x210>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1d      	ldr	r2, [pc, #116]	@ (8006acc <I2C_DMAError+0x214>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d017      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <I2C_DMAError+0x218>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d011      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a19      	ldr	r2, [pc, #100]	@ (8006ad4 <I2C_DMAError+0x21c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <I2C_DMAError+0x220>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d005      	beq.n	8006a8a <I2C_DMAError+0x1d2>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a15      	ldr	r2, [pc, #84]	@ (8006adc <I2C_DMAError+0x224>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d12a      	bne.n	8006ae0 <I2C_DMAError+0x228>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	e029      	b.n	8006af2 <I2C_DMAError+0x23a>
 8006a9e:	bf00      	nop
 8006aa0:	40020010 	.word	0x40020010
 8006aa4:	40020028 	.word	0x40020028
 8006aa8:	40020040 	.word	0x40020040
 8006aac:	40020058 	.word	0x40020058
 8006ab0:	40020070 	.word	0x40020070
 8006ab4:	40020088 	.word	0x40020088
 8006ab8:	400200a0 	.word	0x400200a0
 8006abc:	400200b8 	.word	0x400200b8
 8006ac0:	40020410 	.word	0x40020410
 8006ac4:	40020428 	.word	0x40020428
 8006ac8:	40020440 	.word	0x40020440
 8006acc:	40020458 	.word	0x40020458
 8006ad0:	40020470 	.word	0x40020470
 8006ad4:	40020488 	.word	0x40020488
 8006ad8:	400204a0 	.word	0x400204a0
 8006adc:	400204b8 	.word	0x400204b8
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8006af6:	2301      	movs	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fd f8f0 	bl	8003ce0 <HAL_DMA_GetError>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d00e      	beq.n	8006b24 <I2C_DMAError+0x26c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b1a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b1c:	2110      	movs	r1, #16
 8006b1e:	68b8      	ldr	r0, [r7, #8]
 8006b20:	f7ff fcf8 	bl	8006514 <I2C_ITError>
  }
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	2200      	movs	r2, #0
 8006b48:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b56:	2200      	movs	r2, #0
 8006b58:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fdca 	bl	80066f4 <I2C_TreatErrorCallback>
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	817b      	strh	r3, [r7, #10]
 8006b76:	4613      	mov	r3, r2
 8006b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b80:	7a7b      	ldrb	r3, [r7, #9]
 8006b82:	041b      	lsls	r3, r3, #16
 8006b84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	0d5b      	lsrs	r3, r3, #21
 8006ba2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006ba6:	4b08      	ldr	r3, [pc, #32]	@ (8006bc8 <I2C_TransferConfig+0x60>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	43db      	mvns	r3, r3
 8006bac:	ea02 0103 	and.w	r1, r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	03ff63ff 	.word	0x03ff63ff

08006bcc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be0:	4a39      	ldr	r2, [pc, #228]	@ (8006cc8 <I2C_Enable_IRQ+0xfc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d032      	beq.n	8006c4c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006bea:	4a38      	ldr	r2, [pc, #224]	@ (8006ccc <I2C_Enable_IRQ+0x100>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d02d      	beq.n	8006c4c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006bf4:	4a36      	ldr	r2, [pc, #216]	@ (8006cd0 <I2C_Enable_IRQ+0x104>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d028      	beq.n	8006c4c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da03      	bge.n	8006c0a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c0a:	887b      	ldrh	r3, [r7, #2]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006c1a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006c2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c2e:	887b      	ldrh	r3, [r7, #2]
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d103      	bne.n	8006c3c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006c3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c3c:	887b      	ldrh	r3, [r7, #2]
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d133      	bne.n	8006caa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f043 0320 	orr.w	r3, r3, #32
 8006c48:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c4a:	e02e      	b.n	8006caa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da03      	bge.n	8006c5c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c5c:	887b      	ldrh	r3, [r7, #2]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006c6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c6e:	887b      	ldrh	r3, [r7, #2]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006c7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c80:	887b      	ldrh	r3, [r7, #2]
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d103      	bne.n	8006c8e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006c8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c8e:	887b      	ldrh	r3, [r7, #2]
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d103      	bne.n	8006c9c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c9c:	887b      	ldrh	r3, [r7, #2]
 8006c9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ca0:	d103      	bne.n	8006caa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	08005423 	.word	0x08005423
 8006ccc:	08005845 	.word	0x08005845
 8006cd0:	080055f9 	.word	0x080055f9

08006cd4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ce4:	887b      	ldrh	r3, [r7, #2]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00f      	beq.n	8006d0e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006cf4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d02:	2b28      	cmp	r3, #40	@ 0x28
 8006d04:	d003      	beq.n	8006d0e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006d0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d0e:	887b      	ldrh	r3, [r7, #2]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00f      	beq.n	8006d38 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006d1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d2c:	2b28      	cmp	r3, #40	@ 0x28
 8006d2e:	d003      	beq.n	8006d38 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006d36:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	da03      	bge.n	8006d48 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006d46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d48:	887b      	ldrh	r3, [r7, #2]
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d103      	bne.n	8006d56 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d56:	887b      	ldrh	r3, [r7, #2]
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d103      	bne.n	8006d64 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f043 0320 	orr.w	r3, r3, #32
 8006d62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d64:	887b      	ldrh	r3, [r7, #2]
 8006d66:	2b40      	cmp	r3, #64	@ 0x40
 8006d68:	d103      	bne.n	8006d72 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6819      	ldr	r1, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	400a      	ands	r2, r1
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d138      	bne.n	8006e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e032      	b.n	8006e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2224      	movs	r2, #36	@ 0x24
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d139      	bne.n	8006eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e033      	b.n	8006eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2224      	movs	r2, #36	@ 0x24
 8006e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ec8:	4b19      	ldr	r3, [pc, #100]	@ (8006f30 <HAL_PWREx_ConfigSupply+0x70>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d00a      	beq.n	8006eea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ed4:	4b16      	ldr	r3, [pc, #88]	@ (8006f30 <HAL_PWREx_ConfigSupply+0x70>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d001      	beq.n	8006ee6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e01f      	b.n	8006f26 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e01d      	b.n	8006f26 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006eea:	4b11      	ldr	r3, [pc, #68]	@ (8006f30 <HAL_PWREx_ConfigSupply+0x70>)
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f023 0207 	bic.w	r2, r3, #7
 8006ef2:	490f      	ldr	r1, [pc, #60]	@ (8006f30 <HAL_PWREx_ConfigSupply+0x70>)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006efa:	f7fa fb39 	bl	8001570 <HAL_GetTick>
 8006efe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f00:	e009      	b.n	8006f16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f02:	f7fa fb35 	bl	8001570 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f10:	d901      	bls.n	8006f16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e007      	b.n	8006f26 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f16:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <HAL_PWREx_ConfigSupply+0x70>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f22:	d1ee      	bne.n	8006f02 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	58024800 	.word	0x58024800

08006f34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08c      	sub	sp, #48	@ 0x30
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f000 bc1f 	b.w	8007786 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80b3 	beq.w	80070bc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f56:	4b95      	ldr	r3, [pc, #596]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f60:	4b92      	ldr	r3, [pc, #584]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d007      	beq.n	8006f7c <HAL_RCC_OscConfig+0x48>
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	2b18      	cmp	r3, #24
 8006f70:	d112      	bne.n	8006f98 <HAL_RCC_OscConfig+0x64>
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d10d      	bne.n	8006f98 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	4b8b      	ldr	r3, [pc, #556]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8098 	beq.w	80070ba <HAL_RCC_OscConfig+0x186>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 8093 	bne.w	80070ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e3f6      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa0:	d106      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x7c>
 8006fa2:	4b82      	ldr	r3, [pc, #520]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a81      	ldr	r2, [pc, #516]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e058      	b.n	8007062 <HAL_RCC_OscConfig+0x12e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d112      	bne.n	8006fde <HAL_RCC_OscConfig+0xaa>
 8006fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a7b      	ldr	r2, [pc, #492]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	4b79      	ldr	r3, [pc, #484]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a78      	ldr	r2, [pc, #480]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b76      	ldr	r3, [pc, #472]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a75      	ldr	r2, [pc, #468]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e041      	b.n	8007062 <HAL_RCC_OscConfig+0x12e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fe6:	d112      	bne.n	800700e <HAL_RCC_OscConfig+0xda>
 8006fe8:	4b70      	ldr	r3, [pc, #448]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a6f      	ldr	r2, [pc, #444]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	4b6d      	ldr	r3, [pc, #436]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6c      	ldr	r2, [pc, #432]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8006ffa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	4b6a      	ldr	r3, [pc, #424]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a69      	ldr	r2, [pc, #420]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e029      	b.n	8007062 <HAL_RCC_OscConfig+0x12e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007016:	d112      	bne.n	800703e <HAL_RCC_OscConfig+0x10a>
 8007018:	4b64      	ldr	r3, [pc, #400]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a63      	ldr	r2, [pc, #396]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800701e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	4b61      	ldr	r3, [pc, #388]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a60      	ldr	r2, [pc, #384]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800702a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	4b5e      	ldr	r3, [pc, #376]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	e011      	b.n	8007062 <HAL_RCC_OscConfig+0x12e>
 800703e:	4b5b      	ldr	r3, [pc, #364]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a5a      	ldr	r2, [pc, #360]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4b58      	ldr	r3, [pc, #352]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a57      	ldr	r2, [pc, #348]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4b55      	ldr	r3, [pc, #340]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a54      	ldr	r2, [pc, #336]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800705c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007060:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d013      	beq.n	8007092 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fa fa81 	bl	8001570 <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007072:	f7fa fa7d 	bl	8001570 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b64      	cmp	r3, #100	@ 0x64
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e380      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007084:	4b49      	ldr	r3, [pc, #292]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f0      	beq.n	8007072 <HAL_RCC_OscConfig+0x13e>
 8007090:	e014      	b.n	80070bc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007092:	f7fa fa6d 	bl	8001570 <HAL_GetTick>
 8007096:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800709a:	f7fa fa69 	bl	8001570 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b64      	cmp	r3, #100	@ 0x64
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e36c      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070ac:	4b3f      	ldr	r3, [pc, #252]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f0      	bne.n	800709a <HAL_RCC_OscConfig+0x166>
 80070b8:	e000      	b.n	80070bc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 808c 	beq.w	80071e2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ca:	4b38      	ldr	r3, [pc, #224]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070d4:	4b35      	ldr	r3, [pc, #212]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <HAL_RCC_OscConfig+0x1bc>
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b18      	cmp	r3, #24
 80070e4:	d137      	bne.n	8007156 <HAL_RCC_OscConfig+0x222>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d132      	bne.n	8007156 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070f0:	4b2e      	ldr	r3, [pc, #184]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_RCC_OscConfig+0x1d4>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e33e      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007108:	4b28      	ldr	r3, [pc, #160]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f023 0219 	bic.w	r2, r3, #25
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4925      	ldr	r1, [pc, #148]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007116:	4313      	orrs	r3, r2
 8007118:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711a:	f7fa fa29 	bl	8001570 <HAL_GetTick>
 800711e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007122:	f7fa fa25 	bl	8001570 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e328      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007134:	4b1d      	ldr	r3, [pc, #116]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007140:	4b1a      	ldr	r3, [pc, #104]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	061b      	lsls	r3, r3, #24
 800714e:	4917      	ldr	r1, [pc, #92]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007150:	4313      	orrs	r3, r2
 8007152:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007154:	e045      	b.n	80071e2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d028      	beq.n	80071b0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800715e:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 0219 	bic.w	r2, r3, #25
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	4910      	ldr	r1, [pc, #64]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fa f9fe 	bl	8001570 <HAL_GetTick>
 8007174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007178:	f7fa f9fa 	bl	8001570 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e2fd      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718a:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007196:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	061b      	lsls	r3, r3, #24
 80071a4:	4901      	ldr	r1, [pc, #4]	@ (80071ac <HAL_RCC_OscConfig+0x278>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	604b      	str	r3, [r1, #4]
 80071aa:	e01a      	b.n	80071e2 <HAL_RCC_OscConfig+0x2ae>
 80071ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b0:	4b97      	ldr	r3, [pc, #604]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a96      	ldr	r2, [pc, #600]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071bc:	f7fa f9d8 	bl	8001570 <HAL_GetTick>
 80071c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c4:	f7fa f9d4 	bl	8001570 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e2d7      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071d6:	4b8e      	ldr	r3, [pc, #568]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d06a      	beq.n	80072c4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ee:	4b88      	ldr	r3, [pc, #544]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071f8:	4b85      	ldr	r3, [pc, #532]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d007      	beq.n	8007214 <HAL_RCC_OscConfig+0x2e0>
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b18      	cmp	r3, #24
 8007208:	d11b      	bne.n	8007242 <HAL_RCC_OscConfig+0x30e>
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d116      	bne.n	8007242 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007214:	4b7e      	ldr	r3, [pc, #504]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_RCC_OscConfig+0x2f8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d001      	beq.n	800722c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e2ac      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800722c:	4b78      	ldr	r3, [pc, #480]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	061b      	lsls	r3, r3, #24
 800723a:	4975      	ldr	r1, [pc, #468]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800723c:	4313      	orrs	r3, r2
 800723e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007240:	e040      	b.n	80072c4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d023      	beq.n	8007292 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800724a:	4b71      	ldr	r3, [pc, #452]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a70      	ldr	r2, [pc, #448]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fa f98b 	bl	8001570 <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800725c:	e008      	b.n	8007270 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800725e:	f7fa f987 	bl	8001570 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e28a      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007270:	4b67      	ldr	r3, [pc, #412]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0f0      	beq.n	800725e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800727c:	4b64      	ldr	r3, [pc, #400]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	061b      	lsls	r3, r3, #24
 800728a:	4961      	ldr	r1, [pc, #388]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800728c:	4313      	orrs	r3, r2
 800728e:	60cb      	str	r3, [r1, #12]
 8007290:	e018      	b.n	80072c4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007292:	4b5f      	ldr	r3, [pc, #380]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a5e      	ldr	r2, [pc, #376]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800729c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729e:	f7fa f967 	bl	8001570 <HAL_GetTick>
 80072a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072a6:	f7fa f963 	bl	8001570 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e266      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072b8:	4b55      	ldr	r3, [pc, #340]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f0      	bne.n	80072a6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d036      	beq.n	800733e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d019      	beq.n	800730c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80072da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072dc:	4a4c      	ldr	r2, [pc, #304]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80072de:	f043 0301 	orr.w	r3, r3, #1
 80072e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e4:	f7fa f944 	bl	8001570 <HAL_GetTick>
 80072e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ec:	f7fa f940 	bl	8001570 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e243      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072fe:	4b44      	ldr	r3, [pc, #272]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0f0      	beq.n	80072ec <HAL_RCC_OscConfig+0x3b8>
 800730a:	e018      	b.n	800733e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800730c:	4b40      	ldr	r3, [pc, #256]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800730e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007310:	4a3f      	ldr	r2, [pc, #252]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007318:	f7fa f92a 	bl	8001570 <HAL_GetTick>
 800731c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007320:	f7fa f926 	bl	8001570 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e229      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007332:	4b37      	ldr	r3, [pc, #220]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d036      	beq.n	80073b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d019      	beq.n	8007386 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007352:	4b2f      	ldr	r3, [pc, #188]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2e      	ldr	r2, [pc, #184]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800735c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800735e:	f7fa f907 	bl	8001570 <HAL_GetTick>
 8007362:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007366:	f7fa f903 	bl	8001570 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e206      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007378:	4b25      	ldr	r3, [pc, #148]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0x432>
 8007384:	e018      	b.n	80073b8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007386:	4b22      	ldr	r3, [pc, #136]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a21      	ldr	r2, [pc, #132]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 800738c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007390:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007392:	f7fa f8ed 	bl	8001570 <HAL_GetTick>
 8007396:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007398:	e008      	b.n	80073ac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800739a:	f7fa f8e9 	bl	8001570 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e1ec      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073ac:	4b18      	ldr	r3, [pc, #96]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f0      	bne.n	800739a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80af 	beq.w	8007524 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073c6:	4b13      	ldr	r3, [pc, #76]	@ (8007414 <HAL_RCC_OscConfig+0x4e0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a12      	ldr	r2, [pc, #72]	@ (8007414 <HAL_RCC_OscConfig+0x4e0>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073d2:	f7fa f8cd 	bl	8001570 <HAL_GetTick>
 80073d6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073da:	f7fa f8c9 	bl	8001570 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b64      	cmp	r3, #100	@ 0x64
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e1cc      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ec:	4b09      	ldr	r3, [pc, #36]	@ (8007414 <HAL_RCC_OscConfig+0x4e0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d10b      	bne.n	8007418 <HAL_RCC_OscConfig+0x4e4>
 8007400:	4b03      	ldr	r3, [pc, #12]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007404:	4a02      	ldr	r2, [pc, #8]	@ (8007410 <HAL_RCC_OscConfig+0x4dc>)
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	6713      	str	r3, [r2, #112]	@ 0x70
 800740c:	e05b      	b.n	80074c6 <HAL_RCC_OscConfig+0x592>
 800740e:	bf00      	nop
 8007410:	58024400 	.word	0x58024400
 8007414:	58024800 	.word	0x58024800
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d112      	bne.n	8007446 <HAL_RCC_OscConfig+0x512>
 8007420:	4b9d      	ldr	r3, [pc, #628]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007424:	4a9c      	ldr	r2, [pc, #624]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	6713      	str	r3, [r2, #112]	@ 0x70
 800742c:	4b9a      	ldr	r3, [pc, #616]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800742e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007430:	4a99      	ldr	r2, [pc, #612]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007436:	6713      	str	r3, [r2, #112]	@ 0x70
 8007438:	4b97      	ldr	r3, [pc, #604]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743c:	4a96      	ldr	r2, [pc, #600]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800743e:	f023 0304 	bic.w	r3, r3, #4
 8007442:	6713      	str	r3, [r2, #112]	@ 0x70
 8007444:	e03f      	b.n	80074c6 <HAL_RCC_OscConfig+0x592>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	2b05      	cmp	r3, #5
 800744c:	d112      	bne.n	8007474 <HAL_RCC_OscConfig+0x540>
 800744e:	4b92      	ldr	r3, [pc, #584]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007452:	4a91      	ldr	r2, [pc, #580]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007454:	f043 0304 	orr.w	r3, r3, #4
 8007458:	6713      	str	r3, [r2, #112]	@ 0x70
 800745a:	4b8f      	ldr	r3, [pc, #572]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800745c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745e:	4a8e      	ldr	r2, [pc, #568]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007464:	6713      	str	r3, [r2, #112]	@ 0x70
 8007466:	4b8c      	ldr	r3, [pc, #560]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746a:	4a8b      	ldr	r2, [pc, #556]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	6713      	str	r3, [r2, #112]	@ 0x70
 8007472:	e028      	b.n	80074c6 <HAL_RCC_OscConfig+0x592>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b85      	cmp	r3, #133	@ 0x85
 800747a:	d112      	bne.n	80074a2 <HAL_RCC_OscConfig+0x56e>
 800747c:	4b86      	ldr	r3, [pc, #536]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007480:	4a85      	ldr	r2, [pc, #532]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007482:	f043 0304 	orr.w	r3, r3, #4
 8007486:	6713      	str	r3, [r2, #112]	@ 0x70
 8007488:	4b83      	ldr	r3, [pc, #524]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800748c:	4a82      	ldr	r2, [pc, #520]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800748e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007492:	6713      	str	r3, [r2, #112]	@ 0x70
 8007494:	4b80      	ldr	r3, [pc, #512]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007498:	4a7f      	ldr	r2, [pc, #508]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	6713      	str	r3, [r2, #112]	@ 0x70
 80074a0:	e011      	b.n	80074c6 <HAL_RCC_OscConfig+0x592>
 80074a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a6:	4a7c      	ldr	r2, [pc, #496]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074a8:	f023 0301 	bic.w	r3, r3, #1
 80074ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	4a79      	ldr	r2, [pc, #484]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074b4:	f023 0304 	bic.w	r3, r3, #4
 80074b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ba:	4b77      	ldr	r3, [pc, #476]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074be:	4a76      	ldr	r2, [pc, #472]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d015      	beq.n	80074fa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ce:	f7fa f84f 	bl	8001570 <HAL_GetTick>
 80074d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074d4:	e00a      	b.n	80074ec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d6:	f7fa f84b 	bl	8001570 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e14c      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ec:	4b6a      	ldr	r3, [pc, #424]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0ee      	beq.n	80074d6 <HAL_RCC_OscConfig+0x5a2>
 80074f8:	e014      	b.n	8007524 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074fa:	f7fa f839 	bl	8001570 <HAL_GetTick>
 80074fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007500:	e00a      	b.n	8007518 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007502:	f7fa f835 	bl	8001570 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e136      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007518:	4b5f      	ldr	r3, [pc, #380]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800751a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1ee      	bne.n	8007502 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 812b 	beq.w	8007784 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800752e:	4b5a      	ldr	r3, [pc, #360]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007536:	2b18      	cmp	r3, #24
 8007538:	f000 80bb 	beq.w	80076b2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	2b02      	cmp	r3, #2
 8007542:	f040 8095 	bne.w	8007670 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007546:	4b54      	ldr	r3, [pc, #336]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a53      	ldr	r2, [pc, #332]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800754c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007552:	f7fa f80d 	bl	8001570 <HAL_GetTick>
 8007556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007558:	e008      	b.n	800756c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755a:	f7fa f809 	bl	8001570 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d901      	bls.n	800756c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e10c      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800756c:	4b4a      	ldr	r3, [pc, #296]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f0      	bne.n	800755a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007578:	4b47      	ldr	r3, [pc, #284]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800757a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800757c:	4b47      	ldr	r3, [pc, #284]	@ (800769c <HAL_RCC_OscConfig+0x768>)
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007588:	0112      	lsls	r2, r2, #4
 800758a:	430a      	orrs	r2, r1
 800758c:	4942      	ldr	r1, [pc, #264]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800758e:	4313      	orrs	r3, r2
 8007590:	628b      	str	r3, [r1, #40]	@ 0x28
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	3b01      	subs	r3, #1
 8007598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a0:	3b01      	subs	r3, #1
 80075a2:	025b      	lsls	r3, r3, #9
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	3b01      	subs	r3, #1
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ba:	3b01      	subs	r3, #1
 80075bc:	061b      	lsls	r3, r3, #24
 80075be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075c2:	4935      	ldr	r1, [pc, #212]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80075c8:	4b33      	ldr	r3, [pc, #204]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	4a32      	ldr	r2, [pc, #200]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075d4:	4b30      	ldr	r3, [pc, #192]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075d8:	4b31      	ldr	r3, [pc, #196]	@ (80076a0 <HAL_RCC_OscConfig+0x76c>)
 80075da:	4013      	ands	r3, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075e0:	00d2      	lsls	r2, r2, #3
 80075e2:	492d      	ldr	r1, [pc, #180]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	f023 020c 	bic.w	r2, r3, #12
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	4928      	ldr	r1, [pc, #160]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075fa:	4b27      	ldr	r3, [pc, #156]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	f023 0202 	bic.w	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007606:	4924      	ldr	r1, [pc, #144]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007608:	4313      	orrs	r3, r2
 800760a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800760c:	4b22      	ldr	r3, [pc, #136]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	4a21      	ldr	r2, [pc, #132]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007618:	4b1f      	ldr	r3, [pc, #124]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800761a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761c:	4a1e      	ldr	r2, [pc, #120]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800761e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007624:	4b1c      	ldr	r3, [pc, #112]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800762a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007630:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	4a18      	ldr	r2, [pc, #96]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800763c:	4b16      	ldr	r3, [pc, #88]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a15      	ldr	r2, [pc, #84]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7f9 ff92 	bl	8001570 <HAL_GetTick>
 800764c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007650:	f7f9 ff8e 	bl	8001570 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e091      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0f0      	beq.n	8007650 <HAL_RCC_OscConfig+0x71c>
 800766e:	e089      	b.n	8007784 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007670:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a08      	ldr	r2, [pc, #32]	@ (8007698 <HAL_RCC_OscConfig+0x764>)
 8007676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800767a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7f9 ff78 	bl	8001570 <HAL_GetTick>
 8007680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007682:	e00f      	b.n	80076a4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007684:	f7f9 ff74 	bl	8001570 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d908      	bls.n	80076a4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e077      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
 800769c:	fffffc0c 	.word	0xfffffc0c
 80076a0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076a4:	4b3a      	ldr	r3, [pc, #232]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e9      	bne.n	8007684 <HAL_RCC_OscConfig+0x750>
 80076b0:	e068      	b.n	8007784 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076b2:	4b37      	ldr	r3, [pc, #220]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80076b8:	4b35      	ldr	r3, [pc, #212]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d031      	beq.n	800772a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f003 0203 	and.w	r2, r3, #3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d12a      	bne.n	800772a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	091b      	lsrs	r3, r3, #4
 80076d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d122      	bne.n	800772a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d11a      	bne.n	800772a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0a5b      	lsrs	r3, r3, #9
 80076f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007700:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007702:	429a      	cmp	r2, r3
 8007704:	d111      	bne.n	800772a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007712:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007714:	429a      	cmp	r2, r3
 8007716:	d108      	bne.n	800772a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0e1b      	lsrs	r3, r3, #24
 800771c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007724:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007726:	429a      	cmp	r2, r3
 8007728:	d001      	beq.n	800772e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e02b      	b.n	8007786 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800772e:	4b18      	ldr	r3, [pc, #96]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 8007730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007732:	08db      	lsrs	r3, r3, #3
 8007734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007738:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d01f      	beq.n	8007784 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007744:	4b12      	ldr	r3, [pc, #72]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 8007746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007748:	4a11      	ldr	r2, [pc, #68]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007750:	f7f9 ff0e 	bl	8001570 <HAL_GetTick>
 8007754:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007756:	bf00      	nop
 8007758:	f7f9 ff0a 	bl	8001570 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	4293      	cmp	r3, r2
 8007762:	d0f9      	beq.n	8007758 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007764:	4b0a      	ldr	r3, [pc, #40]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 8007766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007768:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <HAL_RCC_OscConfig+0x860>)
 800776a:	4013      	ands	r3, r2
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007770:	00d2      	lsls	r2, r2, #3
 8007772:	4907      	ldr	r1, [pc, #28]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 8007774:	4313      	orrs	r3, r2
 8007776:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007778:	4b05      	ldr	r3, [pc, #20]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 800777a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777c:	4a04      	ldr	r2, [pc, #16]	@ (8007790 <HAL_RCC_OscConfig+0x85c>)
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3730      	adds	r7, #48	@ 0x30
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	58024400 	.word	0x58024400
 8007794:	ffff0007 	.word	0xffff0007

08007798 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e19c      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077ac:	4b8a      	ldr	r3, [pc, #552]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d910      	bls.n	80077dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ba:	4b87      	ldr	r3, [pc, #540]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f023 020f 	bic.w	r2, r3, #15
 80077c2:	4985      	ldr	r1, [pc, #532]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ca:	4b83      	ldr	r3, [pc, #524]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d001      	beq.n	80077dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e184      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d010      	beq.n	800780a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	4b7b      	ldr	r3, [pc, #492]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d908      	bls.n	800780a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077f8:	4b78      	ldr	r3, [pc, #480]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	4975      	ldr	r1, [pc, #468]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007806:	4313      	orrs	r3, r2
 8007808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d010      	beq.n	8007838 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695a      	ldr	r2, [r3, #20]
 800781a:	4b70      	ldr	r3, [pc, #448]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007822:	429a      	cmp	r2, r3
 8007824:	d908      	bls.n	8007838 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007826:	4b6d      	ldr	r3, [pc, #436]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	496a      	ldr	r1, [pc, #424]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007834:	4313      	orrs	r3, r2
 8007836:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d010      	beq.n	8007866 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	4b64      	ldr	r3, [pc, #400]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007850:	429a      	cmp	r2, r3
 8007852:	d908      	bls.n	8007866 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007854:	4b61      	ldr	r3, [pc, #388]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	495e      	ldr	r1, [pc, #376]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007862:	4313      	orrs	r3, r2
 8007864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d010      	beq.n	8007894 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	4b59      	ldr	r3, [pc, #356]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800787e:	429a      	cmp	r2, r3
 8007880:	d908      	bls.n	8007894 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007882:	4b56      	ldr	r3, [pc, #344]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	4953      	ldr	r1, [pc, #332]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007890:	4313      	orrs	r3, r2
 8007892:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d010      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	4b4d      	ldr	r3, [pc, #308]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d908      	bls.n	80078c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b0:	4b4a      	ldr	r3, [pc, #296]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f023 020f 	bic.w	r2, r3, #15
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4947      	ldr	r1, [pc, #284]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d055      	beq.n	800797a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078ce:	4b43      	ldr	r3, [pc, #268]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	4940      	ldr	r1, [pc, #256]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d107      	bne.n	80078f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078e8:	4b3c      	ldr	r3, [pc, #240]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d121      	bne.n	8007938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0f6      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d107      	bne.n	8007910 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007900:	4b36      	ldr	r3, [pc, #216]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d115      	bne.n	8007938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e0ea      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d107      	bne.n	8007928 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007918:	4b30      	ldr	r3, [pc, #192]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0de      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007928:	4b2c      	ldr	r3, [pc, #176]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e0d6      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007938:	4b28      	ldr	r3, [pc, #160]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f023 0207 	bic.w	r2, r3, #7
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4925      	ldr	r1, [pc, #148]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007946:	4313      	orrs	r3, r2
 8007948:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794a:	f7f9 fe11 	bl	8001570 <HAL_GetTick>
 800794e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007950:	e00a      	b.n	8007968 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007952:	f7f9 fe0d 	bl	8001570 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007960:	4293      	cmp	r3, r2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e0be      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007968:	4b1c      	ldr	r3, [pc, #112]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	429a      	cmp	r2, r3
 8007978:	d1eb      	bne.n	8007952 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	4b14      	ldr	r3, [pc, #80]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	429a      	cmp	r2, r3
 8007994:	d208      	bcs.n	80079a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007996:	4b11      	ldr	r3, [pc, #68]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f023 020f 	bic.w	r2, r3, #15
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	490e      	ldr	r1, [pc, #56]	@ (80079dc <HAL_RCC_ClockConfig+0x244>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079a8:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d214      	bcs.n	80079e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b6:	4b08      	ldr	r3, [pc, #32]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f023 020f 	bic.w	r2, r3, #15
 80079be:	4906      	ldr	r1, [pc, #24]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c6:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <HAL_RCC_ClockConfig+0x240>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d005      	beq.n	80079e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e086      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x34e>
 80079d8:	52002000 	.word	0x52002000
 80079dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d010      	beq.n	8007a0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	4b3f      	ldr	r3, [pc, #252]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d208      	bcs.n	8007a0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079fc:	4b3c      	ldr	r3, [pc, #240]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	4939      	ldr	r1, [pc, #228]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695a      	ldr	r2, [r3, #20]
 8007a1e:	4b34      	ldr	r3, [pc, #208]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d208      	bcs.n	8007a3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a2a:	4b31      	ldr	r3, [pc, #196]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	492e      	ldr	r1, [pc, #184]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d010      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	4b28      	ldr	r3, [pc, #160]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d208      	bcs.n	8007a6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a58:	4b25      	ldr	r3, [pc, #148]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	4922      	ldr	r1, [pc, #136]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d010      	beq.n	8007a98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69da      	ldr	r2, [r3, #28]
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d208      	bcs.n	8007a98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a86:	4b1a      	ldr	r3, [pc, #104]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	4917      	ldr	r1, [pc, #92]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007a98:	f000 f834 	bl	8007b04 <HAL_RCC_GetSysClockFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b14      	ldr	r3, [pc, #80]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	4912      	ldr	r1, [pc, #72]	@ (8007af4 <HAL_RCC_ClockConfig+0x35c>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8007af0 <HAL_RCC_ClockConfig+0x358>)
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	4a0d      	ldr	r2, [pc, #52]	@ (8007af4 <HAL_RCC_ClockConfig+0x35c>)
 8007ac0:	5cd3      	ldrb	r3, [r2, r3]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8007acc:	4a0a      	ldr	r2, [pc, #40]	@ (8007af8 <HAL_RCC_ClockConfig+0x360>)
 8007ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8007afc <HAL_RCC_ClockConfig+0x364>)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b00 <HAL_RCC_ClockConfig+0x368>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7f9 fa10 	bl	8000f00 <HAL_InitTick>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	58024400 	.word	0x58024400
 8007af4:	08010540 	.word	0x08010540
 8007af8:	24000004 	.word	0x24000004
 8007afc:	24000000 	.word	0x24000000
 8007b00:	24000008 	.word	0x24000008

08007b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b089      	sub	sp, #36	@ 0x24
 8007b08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b0a:	4bb3      	ldr	r3, [pc, #716]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b12:	2b18      	cmp	r3, #24
 8007b14:	f200 8155 	bhi.w	8007dc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b18:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007dc3 	.word	0x08007dc3
 8007b28:	08007dc3 	.word	0x08007dc3
 8007b2c:	08007dc3 	.word	0x08007dc3
 8007b30:	08007dc3 	.word	0x08007dc3
 8007b34:	08007dc3 	.word	0x08007dc3
 8007b38:	08007dc3 	.word	0x08007dc3
 8007b3c:	08007dc3 	.word	0x08007dc3
 8007b40:	08007bab 	.word	0x08007bab
 8007b44:	08007dc3 	.word	0x08007dc3
 8007b48:	08007dc3 	.word	0x08007dc3
 8007b4c:	08007dc3 	.word	0x08007dc3
 8007b50:	08007dc3 	.word	0x08007dc3
 8007b54:	08007dc3 	.word	0x08007dc3
 8007b58:	08007dc3 	.word	0x08007dc3
 8007b5c:	08007dc3 	.word	0x08007dc3
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007dc3 	.word	0x08007dc3
 8007b68:	08007dc3 	.word	0x08007dc3
 8007b6c:	08007dc3 	.word	0x08007dc3
 8007b70:	08007dc3 	.word	0x08007dc3
 8007b74:	08007dc3 	.word	0x08007dc3
 8007b78:	08007dc3 	.word	0x08007dc3
 8007b7c:	08007dc3 	.word	0x08007dc3
 8007b80:	08007bb7 	.word	0x08007bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b84:	4b94      	ldr	r3, [pc, #592]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b90:	4b91      	ldr	r3, [pc, #580]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	08db      	lsrs	r3, r3, #3
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	4a90      	ldr	r2, [pc, #576]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007ba2:	e111      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ba6:	61bb      	str	r3, [r7, #24]
      break;
 8007ba8:	e10e      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007baa:	4b8d      	ldr	r3, [pc, #564]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bac:	61bb      	str	r3, [r7, #24]
      break;
 8007bae:	e10b      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bb2:	61bb      	str	r3, [r7, #24]
      break;
 8007bb4:	e108      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bb6:	4b88      	ldr	r3, [pc, #544]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007bc0:	4b85      	ldr	r3, [pc, #532]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc4:	091b      	lsrs	r3, r3, #4
 8007bc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bcc:	4b82      	ldr	r3, [pc, #520]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bd6:	4b80      	ldr	r3, [pc, #512]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bda:	08db      	lsrs	r3, r3, #3
 8007bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	fb02 f303 	mul.w	r3, r2, r3
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80e1 	beq.w	8007dbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	f000 8083 	beq.w	8007d08 <HAL_RCC_GetSysClockFreq+0x204>
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	f200 80a1 	bhi.w	8007d4c <HAL_RCC_GetSysClockFreq+0x248>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_RCC_GetSysClockFreq+0x114>
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d056      	beq.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c16:	e099      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c18:	4b6f      	ldr	r3, [pc, #444]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d02d      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c24:	4b6c      	ldr	r3, [pc, #432]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	08db      	lsrs	r3, r3, #3
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	4a6b      	ldr	r2, [pc, #428]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c30:	fa22 f303 	lsr.w	r3, r2, r3
 8007c34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4e:	4b62      	ldr	r3, [pc, #392]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c7e:	e087      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007dec <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b51      	ldr	r3, [pc, #324]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ca6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cc2:	e065      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b40      	ldr	r3, [pc, #256]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d06:	e043      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007df4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d4a:	e021      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d90:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d94:	0a5b      	lsrs	r3, r3, #9
 8007d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007db4:	ee17 3a90 	vmov	r3, s15
 8007db8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007dba:	e005      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
      break;
 8007dc0:	e002      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007dc2:	4b07      	ldr	r3, [pc, #28]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007dc4:	61bb      	str	r3, [r7, #24]
      break;
 8007dc6:	bf00      	nop
  }

  return sysclockfreq;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3724      	adds	r7, #36	@ 0x24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	03d09000 	.word	0x03d09000
 8007de0:	003d0900 	.word	0x003d0900
 8007de4:	016e3600 	.word	0x016e3600
 8007de8:	46000000 	.word	0x46000000
 8007dec:	4c742400 	.word	0x4c742400
 8007df0:	4a742400 	.word	0x4a742400
 8007df4:	4bb71b00 	.word	0x4bb71b00

08007df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007dfe:	f7ff fe81 	bl	8007b04 <HAL_RCC_GetSysClockFreq>
 8007e02:	4602      	mov	r2, r0
 8007e04:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	0a1b      	lsrs	r3, r3, #8
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	490f      	ldr	r1, [pc, #60]	@ (8007e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e10:	5ccb      	ldrb	r3, [r1, r3]
 8007e12:	f003 031f 	and.w	r3, r3, #31
 8007e16:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	4a09      	ldr	r2, [pc, #36]	@ (8007e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e26:	5cd3      	ldrb	r3, [r2, r3]
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e32:	4a07      	ldr	r2, [pc, #28]	@ (8007e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e36:	4a07      	ldr	r2, [pc, #28]	@ (8007e54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e3c:	4b04      	ldr	r3, [pc, #16]	@ (8007e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	58024400 	.word	0x58024400
 8007e4c:	08010540 	.word	0x08010540
 8007e50:	24000004 	.word	0x24000004
 8007e54:	24000000 	.word	0x24000000

08007e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007e5c:	f7ff ffcc 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8007e60:	4602      	mov	r2, r0
 8007e62:	4b06      	ldr	r3, [pc, #24]	@ (8007e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	091b      	lsrs	r3, r3, #4
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	4904      	ldr	r1, [pc, #16]	@ (8007e80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e6e:	5ccb      	ldrb	r3, [r1, r3]
 8007e70:	f003 031f 	and.w	r3, r3, #31
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	58024400 	.word	0x58024400
 8007e80:	08010540 	.word	0x08010540

08007e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007e88:	f7ff ffb6 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	0a1b      	lsrs	r3, r3, #8
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	4904      	ldr	r1, [pc, #16]	@ (8007eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e9a:	5ccb      	ldrb	r3, [r1, r3]
 8007e9c:	f003 031f 	and.w	r3, r3, #31
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	58024400 	.word	0x58024400
 8007eac:	08010540 	.word	0x08010540

08007eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	223f      	movs	r2, #63	@ 0x3f
 8007ebe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0207 	and.w	r2, r3, #7
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8007ecc:	4b17      	ldr	r3, [pc, #92]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007ed8:	4b14      	ldr	r3, [pc, #80]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007ee4:	4b11      	ldr	r3, [pc, #68]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8007efc:	4b0b      	ldr	r3, [pc, #44]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8007f08:	4b08      	ldr	r3, [pc, #32]	@ (8007f2c <HAL_RCC_GetClockConfig+0x7c>)
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f14:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <HAL_RCC_GetClockConfig+0x80>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 020f 	and.w	r2, r3, #15
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	52002000 	.word	0x52002000

08007f34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f38:	b0c8      	sub	sp, #288	@ 0x120
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f40:	2300      	movs	r3, #0
 8007f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f58:	2500      	movs	r5, #0
 8007f5a:	ea54 0305 	orrs.w	r3, r4, r5
 8007f5e:	d049      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f6a:	d02f      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f70:	d828      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f76:	d01a      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f7c:	d822      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f86:	d007      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f88:	e01c      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	4aa6      	ldr	r2, [pc, #664]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f96:	e01a      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fc43 	bl	800982c <RCCEx_PLL2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fac:	e00f      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb2:	3328      	adds	r3, #40	@ 0x28
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fcea 	bl	8009990 <RCCEx_PLL3_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fc2:	e004      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fca:	e000      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fd6:	4b94      	ldr	r3, [pc, #592]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe4:	4a90      	ldr	r2, [pc, #576]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fea:	e003      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ff0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008000:	f04f 0900 	mov.w	r9, #0
 8008004:	ea58 0309 	orrs.w	r3, r8, r9
 8008008:	d047      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800800a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	2b04      	cmp	r3, #4
 8008012:	d82a      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008014:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008031 	.word	0x08008031
 8008020:	0800803f 	.word	0x0800803f
 8008024:	08008055 	.word	0x08008055
 8008028:	08008073 	.word	0x08008073
 800802c:	08008073 	.word	0x08008073
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4b7d      	ldr	r3, [pc, #500]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a7c      	ldr	r2, [pc, #496]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800803c:	e01a      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008042:	3308      	adds	r3, #8
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fbf0 	bl	800982c <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008052:	e00f      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008058:	3328      	adds	r3, #40	@ 0x28
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 fc97 	bl	8009990 <RCCEx_PLL3_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008074:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800807c:	4b6a      	ldr	r3, [pc, #424]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800807e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008080:	f023 0107 	bic.w	r1, r3, #7
 8008084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	4a67      	ldr	r2, [pc, #412]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808c:	430b      	orrs	r3, r1
 800808e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008096:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800809a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80080a6:	f04f 0b00 	mov.w	fp, #0
 80080aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80080ae:	d054      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80080b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080ba:	d036      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80080bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080c0:	d82f      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080c6:	d032      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080cc:	d829      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d0:	d02f      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80080d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080d4:	d825      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080d6:	2b80      	cmp	r3, #128	@ 0x80
 80080d8:	d018      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80080da:	2b80      	cmp	r3, #128	@ 0x80
 80080dc:	d821      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80080e2:	2b40      	cmp	r3, #64	@ 0x40
 80080e4:	d007      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80080e6:	e01c      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	4a4e      	ldr	r2, [pc, #312]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080f4:	e01e      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	3308      	adds	r3, #8
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fb94 	bl	800982c <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800810a:	e013      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800810c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008110:	3328      	adds	r3, #40	@ 0x28
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fc3b 	bl	8009990 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008120:	e008      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008128:	e004      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800813c:	4b3a      	ldr	r3, [pc, #232]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008140:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800814a:	4a37      	ldr	r2, [pc, #220]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800814c:	430b      	orrs	r3, r1
 800814e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008150:	e003      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008156:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800815a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008166:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800816a:	2300      	movs	r3, #0
 800816c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008170:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008174:	460b      	mov	r3, r1
 8008176:	4313      	orrs	r3, r2
 8008178:	d05c      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800817a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800817e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008180:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008184:	d03b      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008186:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800818a:	d834      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800818c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008190:	d037      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008196:	d82e      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008198:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800819c:	d033      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800819e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081a2:	d828      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80081a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a8:	d01a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ae:	d822      	bhi.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b8:	d007      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x296>
 80081ba:	e01c      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081c8:	e01e      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ce:	3308      	adds	r3, #8
 80081d0:	2100      	movs	r1, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fb2a 	bl	800982c <RCCEx_PLL2_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081de:	e013      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e4:	3328      	adds	r3, #40	@ 0x28
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 fbd1 	bl	8009990 <RCCEx_PLL3_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081f4:	e008      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081fc:	e004      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80081fe:	bf00      	nop
 8008200:	e002      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10d      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008214:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800821e:	4a02      	ldr	r2, [pc, #8]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008220:	430b      	orrs	r3, r1
 8008222:	6513      	str	r3, [r2, #80]	@ 0x50
 8008224:	e006      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008230:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008244:	2300      	movs	r3, #0
 8008246:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800824a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800824e:	460b      	mov	r3, r1
 8008250:	4313      	orrs	r3, r2
 8008252:	d03a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	2b30      	cmp	r3, #48	@ 0x30
 800825c:	d01f      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d819      	bhi.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008262:	2b20      	cmp	r3, #32
 8008264:	d00c      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008266:	2b20      	cmp	r3, #32
 8008268:	d815      	bhi.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d019      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800826e:	2b10      	cmp	r3, #16
 8008270:	d111      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008272:	4bae      	ldr	r3, [pc, #696]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4aad      	ldr	r2, [pc, #692]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800827e:	e011      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	3308      	adds	r3, #8
 8008286:	2102      	movs	r1, #2
 8008288:	4618      	mov	r0, r3
 800828a:	f001 facf 	bl	800982c <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008294:	e006      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80082a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082ac:	4b9f      	ldr	r3, [pc, #636]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ba:	4a9c      	ldr	r2, [pc, #624]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082bc:	430b      	orrs	r3, r1
 80082be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082c0:	e003      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082da:	2300      	movs	r3, #0
 80082dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4313      	orrs	r3, r2
 80082e8:	d051      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082f4:	d035      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80082f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fa:	d82e      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80082fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008300:	d031      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008302:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008306:	d828      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800830c:	d01a      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008312:	d822      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800831c:	d007      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800831e:	e01c      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008320:	4b82      	ldr	r3, [pc, #520]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008324:	4a81      	ldr	r2, [pc, #516]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800832a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800832c:	e01c      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800832e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008332:	3308      	adds	r3, #8
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fa78 	bl	800982c <RCCEx_PLL2_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008342:	e011      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	3328      	adds	r3, #40	@ 0x28
 800834a:	2100      	movs	r1, #0
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fb1f 	bl	8009990 <RCCEx_PLL3_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008358:	e006      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008360:	e002      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008362:	bf00      	nop
 8008364:	e000      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008370:	4b6e      	ldr	r3, [pc, #440]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008374:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837e:	4a6b      	ldr	r2, [pc, #428]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008380:	430b      	orrs	r3, r1
 8008382:	6513      	str	r3, [r2, #80]	@ 0x50
 8008384:	e003      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008386:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800838a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800838e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800839a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800839e:	2300      	movs	r3, #0
 80083a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80083a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80083a8:	460b      	mov	r3, r1
 80083aa:	4313      	orrs	r3, r2
 80083ac:	d053      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083b8:	d033      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80083ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083be:	d82c      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083c4:	d02f      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80083c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083ca:	d826      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083d0:	d02b      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083d6:	d820      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083dc:	d012      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80083de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083e2:	d81a      	bhi.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d022      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80083e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ec:	d115      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f2:	3308      	adds	r3, #8
 80083f4:	2101      	movs	r1, #1
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fa18 	bl	800982c <RCCEx_PLL2_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008402:	e015      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008408:	3328      	adds	r3, #40	@ 0x28
 800840a:	2101      	movs	r1, #1
 800840c:	4618      	mov	r0, r3
 800840e:	f001 fabf 	bl	8009990 <RCCEx_PLL3_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008418:	e00a      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008420:	e006      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008422:	bf00      	nop
 8008424:	e004      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008426:	bf00      	nop
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800842a:	bf00      	nop
 800842c:	e000      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800842e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008438:	4b3c      	ldr	r3, [pc, #240]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800843a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800843c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008446:	4a39      	ldr	r2, [pc, #228]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008448:	430b      	orrs	r3, r1
 800844a:	6513      	str	r3, [r2, #80]	@ 0x50
 800844c:	e003      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008452:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008462:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008466:	2300      	movs	r3, #0
 8008468:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800846c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008470:	460b      	mov	r3, r1
 8008472:	4313      	orrs	r3, r2
 8008474:	d060      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800847e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008482:	d039      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008484:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008488:	d832      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800848a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800848e:	d035      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008494:	d82c      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849a:	d031      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800849c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a0:	d826      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084a6:	d02d      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80084a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084ac:	d820      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b2:	d012      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80084b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b8:	d81a      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d024      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c2:	d115      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c8:	3308      	adds	r3, #8
 80084ca:	2101      	movs	r1, #1
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 f9ad 	bl	800982c <RCCEx_PLL2_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084d8:	e017      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084de:	3328      	adds	r3, #40	@ 0x28
 80084e0:	2101      	movs	r1, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fa54 	bl	8009990 <RCCEx_PLL3_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084ee:	e00c      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084f6:	e008      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084f8:	bf00      	nop
 80084fa:	e006      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084fc:	bf00      	nop
 80084fe:	e004      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008500:	bf00      	nop
 8008502:	e002      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10e      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008512:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008516:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800851a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008522:	4a02      	ldr	r2, [pc, #8]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008524:	430b      	orrs	r3, r1
 8008526:	6593      	str	r3, [r2, #88]	@ 0x58
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008534:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008548:	2300      	movs	r3, #0
 800854a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800854e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008552:	460b      	mov	r3, r1
 8008554:	4313      	orrs	r3, r2
 8008556:	d037      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800855c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d00e      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008568:	d816      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d018      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800856e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008572:	d111      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008574:	4bc4      	ldr	r3, [pc, #784]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4ac3      	ldr	r2, [pc, #780]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800857e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008580:	e00f      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008586:	3308      	adds	r3, #8
 8008588:	2101      	movs	r1, #1
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f94e 	bl	800982c <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085aa:	4bb7      	ldr	r3, [pc, #732]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085b8:	4ab3      	ldr	r2, [pc, #716]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ba:	430b      	orrs	r3, r1
 80085bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80085be:	e003      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d039      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d81c      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085f2:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008609 	.word	0x08008609
 8008600:	08008617 	.word	0x08008617
 8008604:	08008635 	.word	0x08008635
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008608:	4b9f      	ldr	r3, [pc, #636]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	4a9e      	ldr	r2, [pc, #632]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861a:	3308      	adds	r3, #8
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f904 	bl	800982c <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800863e:	4b92      	ldr	r3, [pc, #584]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008642:	f023 0103 	bic.w	r1, r3, #3
 8008646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864c:	4a8e      	ldr	r2, [pc, #568]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800864e:	430b      	orrs	r3, r1
 8008650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008652:	e003      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008658:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800866c:	2300      	movs	r3, #0
 800866e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008672:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	f000 8099 	beq.w	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800867e:	4b83      	ldr	r3, [pc, #524]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a82      	ldr	r2, [pc, #520]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800868a:	f7f8 ff71 	bl	8001570 <HAL_GetTick>
 800868e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008692:	e00b      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008694:	f7f8 ff6c 	bl	8001570 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b64      	cmp	r3, #100	@ 0x64
 80086a2:	d903      	bls.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ac:	4b77      	ldr	r3, [pc, #476]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0ed      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d173      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086c0:	4b71      	ldr	r3, [pc, #452]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086cc:	4053      	eors	r3, r2
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d015      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086e2:	4b69      	ldr	r3, [pc, #420]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a68      	ldr	r2, [pc, #416]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086ee:	4b66      	ldr	r3, [pc, #408]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	4a65      	ldr	r2, [pc, #404]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086fa:	4a63      	ldr	r2, [pc, #396]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008700:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800870a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870e:	d118      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7f8 ff2e 	bl	8001570 <HAL_GetTick>
 8008714:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008718:	e00d      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871a:	f7f8 ff29 	bl	8001570 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008724:	1ad2      	subs	r2, r2, r3
 8008726:	f241 3388 	movw	r3, #5000	@ 0x1388
 800872a:	429a      	cmp	r2, r3
 800872c:	d903      	bls.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008734:	e005      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008736:	4b54      	ldr	r3, [pc, #336]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0eb      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008742:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d129      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800874a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800874e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800875a:	d10e      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800875c:	4b4a      	ldr	r3, [pc, #296]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800876c:	091a      	lsrs	r2, r3, #4
 800876e:	4b48      	ldr	r3, [pc, #288]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008770:	4013      	ands	r3, r2
 8008772:	4a45      	ldr	r2, [pc, #276]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008774:	430b      	orrs	r3, r1
 8008776:	6113      	str	r3, [r2, #16]
 8008778:	e005      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800877a:	4b43      	ldr	r3, [pc, #268]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	4a42      	ldr	r2, [pc, #264]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008784:	6113      	str	r3, [r2, #16]
 8008786:	4b40      	ldr	r3, [pc, #256]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008788:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800878a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008796:	4a3c      	ldr	r2, [pc, #240]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008798:	430b      	orrs	r3, r1
 800879a:	6713      	str	r3, [r2, #112]	@ 0x70
 800879c:	e008      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800879e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80087a6:	e003      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f002 0301 	and.w	r3, r2, #1
 80087bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f000 8090 	beq.w	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087da:	2b28      	cmp	r3, #40	@ 0x28
 80087dc:	d870      	bhi.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087de:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	080088c9 	.word	0x080088c9
 80087e8:	080088c1 	.word	0x080088c1
 80087ec:	080088c1 	.word	0x080088c1
 80087f0:	080088c1 	.word	0x080088c1
 80087f4:	080088c1 	.word	0x080088c1
 80087f8:	080088c1 	.word	0x080088c1
 80087fc:	080088c1 	.word	0x080088c1
 8008800:	080088c1 	.word	0x080088c1
 8008804:	08008895 	.word	0x08008895
 8008808:	080088c1 	.word	0x080088c1
 800880c:	080088c1 	.word	0x080088c1
 8008810:	080088c1 	.word	0x080088c1
 8008814:	080088c1 	.word	0x080088c1
 8008818:	080088c1 	.word	0x080088c1
 800881c:	080088c1 	.word	0x080088c1
 8008820:	080088c1 	.word	0x080088c1
 8008824:	080088ab 	.word	0x080088ab
 8008828:	080088c1 	.word	0x080088c1
 800882c:	080088c1 	.word	0x080088c1
 8008830:	080088c1 	.word	0x080088c1
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088c1 	.word	0x080088c1
 800883c:	080088c1 	.word	0x080088c1
 8008840:	080088c1 	.word	0x080088c1
 8008844:	080088c9 	.word	0x080088c9
 8008848:	080088c1 	.word	0x080088c1
 800884c:	080088c1 	.word	0x080088c1
 8008850:	080088c1 	.word	0x080088c1
 8008854:	080088c1 	.word	0x080088c1
 8008858:	080088c1 	.word	0x080088c1
 800885c:	080088c1 	.word	0x080088c1
 8008860:	080088c1 	.word	0x080088c1
 8008864:	080088c9 	.word	0x080088c9
 8008868:	080088c1 	.word	0x080088c1
 800886c:	080088c1 	.word	0x080088c1
 8008870:	080088c1 	.word	0x080088c1
 8008874:	080088c1 	.word	0x080088c1
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088c1 	.word	0x080088c1
 8008880:	080088c1 	.word	0x080088c1
 8008884:	080088c9 	.word	0x080088c9
 8008888:	58024400 	.word	0x58024400
 800888c:	58024800 	.word	0x58024800
 8008890:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008898:	3308      	adds	r3, #8
 800889a:	2101      	movs	r1, #1
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ffc5 	bl	800982c <RCCEx_PLL2_Config>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088a8:	e00f      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ae:	3328      	adds	r3, #40	@ 0x28
 80088b0:	2101      	movs	r1, #1
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f86c 	bl	8009990 <RCCEx_PLL3_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088be:	e004      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088c6:	e000      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088d2:	4bc0      	ldr	r3, [pc, #768]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e2:	4abc      	ldr	r2, [pc, #752]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80088e8:	e003      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f002 0302 	and.w	r3, r2, #2
 80088fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008902:	2300      	movs	r3, #0
 8008904:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008908:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800890c:	460b      	mov	r3, r1
 800890e:	4313      	orrs	r3, r2
 8008910:	d043      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891a:	2b05      	cmp	r3, #5
 800891c:	d824      	bhi.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800891e:	a201      	add	r2, pc, #4	@ (adr r2, 8008924 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008924:	08008971 	.word	0x08008971
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008953 	.word	0x08008953
 8008930:	08008971 	.word	0x08008971
 8008934:	08008971 	.word	0x08008971
 8008938:	08008971 	.word	0x08008971
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800893c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008940:	3308      	adds	r3, #8
 8008942:	2101      	movs	r1, #1
 8008944:	4618      	mov	r0, r3
 8008946:	f000 ff71 	bl	800982c <RCCEx_PLL2_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008950:	e00f      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008956:	3328      	adds	r3, #40	@ 0x28
 8008958:	2101      	movs	r1, #1
 800895a:	4618      	mov	r0, r3
 800895c:	f001 f818 	bl	8009990 <RCCEx_PLL3_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008966:	e004      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800896e:	e000      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008972:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10b      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800897a:	4b96      	ldr	r3, [pc, #600]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800897c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897e:	f023 0107 	bic.w	r1, r3, #7
 8008982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898a:	4a92      	ldr	r2, [pc, #584]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800898c:	430b      	orrs	r3, r1
 800898e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008990:	e003      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008996:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800899a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f002 0304 	and.w	r3, r2, #4
 80089a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089aa:	2300      	movs	r3, #0
 80089ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4313      	orrs	r3, r2
 80089b8:	d043      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d824      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a19 	.word	0x08008a19
 80089d0:	080089e5 	.word	0x080089e5
 80089d4:	080089fb 	.word	0x080089fb
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a19 	.word	0x08008a19
 80089e0:	08008a19 	.word	0x08008a19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e8:	3308      	adds	r3, #8
 80089ea:	2101      	movs	r1, #1
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 ff1d 	bl	800982c <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089f8:	e00f      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089fe:	3328      	adds	r3, #40	@ 0x28
 8008a00:	2101      	movs	r1, #1
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 ffc4 	bl	8009990 <RCCEx_PLL3_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a0e:	e004      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a16:	e000      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a22:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	f023 0107 	bic.w	r1, r3, #7
 8008a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a32:	4a68      	ldr	r2, [pc, #416]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a38:	e003      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f002 0320 	and.w	r3, r2, #32
 8008a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a52:	2300      	movs	r3, #0
 8008a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	d055      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a6e:	d033      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a74:	d82c      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7a:	d02f      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a80:	d826      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a86:	d02b      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a8c:	d820      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a92:	d012      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a98:	d81a      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d022      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aa2:	d115      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	2100      	movs	r1, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 febd 	bl	800982c <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ab8:	e015      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008abe:	3328      	adds	r3, #40	@ 0x28
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 ff64 	bl	8009990 <RCCEx_PLL3_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ace:	e00a      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ad6:	e006      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ad8:	bf00      	nop
 8008ada:	e004      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008adc:	bf00      	nop
 8008ade:	e002      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae0:	bf00      	nop
 8008ae2:	e000      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aee:	4b39      	ldr	r3, [pc, #228]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008afe:	4a35      	ldr	r2, [pc, #212]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b04:	e003      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	d058      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b3a:	d033      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b40:	d82c      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b46:	d02f      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b4c:	d826      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b52:	d02b      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b58:	d820      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b5e:	d012      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b64:	d81a      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d022      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b6e:	d115      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	3308      	adds	r3, #8
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fe57 	bl	800982c <RCCEx_PLL2_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b84:	e015      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8a:	3328      	adds	r3, #40	@ 0x28
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fefe 	bl	8009990 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ba2:	e006      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ba4:	bf00      	nop
 8008ba6:	e004      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e002      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10e      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bba:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bca:	4a02      	ldr	r2, [pc, #8]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bd0:	e006      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008bd2:	bf00      	nop
 8008bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008bf6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	d055      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c0c:	d033      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c12:	d82c      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c18:	d02f      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c1e:	d826      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c24:	d02b      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c2a:	d820      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c30:	d012      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008c32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c36:	d81a      	bhi.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d022      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c40:	d115      	bne.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c46:	3308      	adds	r3, #8
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fdee 	bl	800982c <RCCEx_PLL2_Config>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c56:	e015      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c5c:	3328      	adds	r3, #40	@ 0x28
 8008c5e:	2102      	movs	r1, #2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fe95 	bl	8009990 <RCCEx_PLL3_Config>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c6c:	e00a      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c74:	e006      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c76:	bf00      	nop
 8008c78:	e004      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c7e:	bf00      	nop
 8008c80:	e000      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c9c:	4a9d      	ldr	r2, [pc, #628]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ca2:	e003      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ca8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f002 0308 	and.w	r3, r2, #8
 8008cb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	d01e      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cde:	3328      	adds	r3, #40	@ 0x28
 8008ce0:	2102      	movs	r1, #2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fe54 	bl	8009990 <RCCEx_PLL3_Config>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008cf4:	4b87      	ldr	r3, [pc, #540]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d04:	4a83      	ldr	r2, [pc, #524]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d06:	430b      	orrs	r3, r1
 8008d08:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f002 0310 	and.w	r3, r2, #16
 8008d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d24:	460b      	mov	r3, r1
 8008d26:	4313      	orrs	r3, r2
 8008d28:	d01e      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d36:	d10c      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3c:	3328      	adds	r3, #40	@ 0x28
 8008d3e:	2102      	movs	r1, #2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fe25 	bl	8009990 <RCCEx_PLL3_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d52:	4b70      	ldr	r3, [pc, #448]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d62:	4a6c      	ldr	r2, [pc, #432]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d82:	460b      	mov	r3, r1
 8008d84:	4313      	orrs	r3, r2
 8008d86:	d03e      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d94:	d022      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d9a:	d81b      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008da4:	d00b      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008da6:	e015      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dac:	3308      	adds	r3, #8
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd3b 	bl	800982c <RCCEx_PLL2_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dbc:	e00f      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc2:	3328      	adds	r3, #40	@ 0x28
 8008dc4:	2102      	movs	r1, #2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fde2 	bl	8009990 <RCCEx_PLL3_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008de6:	4b4b      	ldr	r3, [pc, #300]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008df6:	4a47      	ldr	r2, [pc, #284]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dfc:	e003      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e14:	2300      	movs	r3, #0
 8008e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e18:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	d03b      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e2e:	d01f      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008e30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e34:	d818      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3a:	d003      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e40:	d007      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008e42:	e011      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e44:	4b33      	ldr	r3, [pc, #204]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	4a32      	ldr	r2, [pc, #200]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fd98 	bl	8009990 <RCCEx_PLL3_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e7a:	4b26      	ldr	r3, [pc, #152]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8a:	4a22      	ldr	r2, [pc, #136]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e90:	e003      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	677b      	str	r3, [r7, #116]	@ 0x74
 8008eac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d034      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec4:	d007      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008ec6:	e011      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b12      	ldr	r3, [pc, #72]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	4a11      	ldr	r2, [pc, #68]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ed4:	e00e      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eda:	3308      	adds	r3, #8
 8008edc:	2102      	movs	r1, #2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fca4 	bl	800982c <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008eea:	e003      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10d      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008efc:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0a:	4a02      	ldr	r2, [pc, #8]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f10:	e006      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008f12:	bf00      	nop
 8008f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f2e:	2300      	movs	r3, #0
 8008f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f36:	460b      	mov	r3, r1
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	d00c      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f40:	3328      	adds	r3, #40	@ 0x28
 8008f42:	2102      	movs	r1, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fd23 	bl	8009990 <RCCEx_PLL3_Config>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f62:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f64:	2300      	movs	r3, #0
 8008f66:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	d038      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f7e:	d018      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f84:	d811      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8a:	d014      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f90:	d80b      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9a:	d106      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f9c:	4bc3      	ldr	r3, [pc, #780]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	4ac2      	ldr	r2, [pc, #776]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fa8:	e008      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fb0:	e004      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fb2:	bf00      	nop
 8008fb4:	e002      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fb6:	bf00      	nop
 8008fb8:	e000      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd4:	4ab5      	ldr	r2, [pc, #724]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fda:	e003      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fe0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ff6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	d009      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009000:	4baa      	ldr	r3, [pc, #680]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009004:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800900c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800900e:	4aa7      	ldr	r2, [pc, #668]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009010:	430b      	orrs	r3, r1
 8009012:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009020:	653b      	str	r3, [r7, #80]	@ 0x50
 8009022:	2300      	movs	r3, #0
 8009024:	657b      	str	r3, [r7, #84]	@ 0x54
 8009026:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	d009      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009030:	4b9e      	ldr	r3, [pc, #632]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009034:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903e:	4a9b      	ldr	r2, [pc, #620]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009040:	430b      	orrs	r3, r1
 8009042:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009052:	2300      	movs	r3, #0
 8009054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009056:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800905a:	460b      	mov	r3, r1
 800905c:	4313      	orrs	r3, r2
 800905e:	d009      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009060:	4b92      	ldr	r3, [pc, #584]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009064:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800906e:	4a8f      	ldr	r2, [pc, #572]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009070:	430b      	orrs	r3, r1
 8009072:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009080:	643b      	str	r3, [r7, #64]	@ 0x40
 8009082:	2300      	movs	r3, #0
 8009084:	647b      	str	r3, [r7, #68]	@ 0x44
 8009086:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800908a:	460b      	mov	r3, r1
 800908c:	4313      	orrs	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009090:	4b86      	ldr	r3, [pc, #536]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	4a85      	ldr	r2, [pc, #532]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800909a:	6113      	str	r3, [r2, #16]
 800909c:	4b83      	ldr	r3, [pc, #524]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800909e:	6919      	ldr	r1, [r3, #16]
 80090a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80090a8:	4a80      	ldr	r2, [pc, #512]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090aa:	430b      	orrs	r3, r1
 80090ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090bc:	2300      	movs	r3, #0
 80090be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d009      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090ca:	4b78      	ldr	r3, [pc, #480]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80090d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d8:	4a74      	ldr	r2, [pc, #464]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090da:	430b      	orrs	r3, r1
 80090dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ec:	2300      	movs	r3, #0
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090f4:	460b      	mov	r3, r1
 80090f6:	4313      	orrs	r3, r2
 80090f8:	d00a      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090fa:	4b6c      	ldr	r3, [pc, #432]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910a:	4a68      	ldr	r2, [pc, #416]	@ (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800910c:	430b      	orrs	r3, r1
 800910e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	2100      	movs	r1, #0
 800911a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009122:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009126:	460b      	mov	r3, r1
 8009128:	4313      	orrs	r3, r2
 800912a:	d011      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009130:	3308      	adds	r3, #8
 8009132:	2100      	movs	r1, #0
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fb79 	bl	800982c <RCCEx_PLL2_Config>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800914c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	2100      	movs	r1, #0
 800915a:	6239      	str	r1, [r7, #32]
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	627b      	str	r3, [r7, #36]	@ 0x24
 8009162:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009166:	460b      	mov	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	d011      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009170:	3308      	adds	r3, #8
 8009172:	2101      	movs	r1, #1
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fb59 	bl	800982c <RCCEx_PLL2_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009180:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800918c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	2100      	movs	r1, #0
 800919a:	61b9      	str	r1, [r7, #24]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091a6:	460b      	mov	r3, r1
 80091a8:	4313      	orrs	r3, r2
 80091aa:	d011      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	3308      	adds	r3, #8
 80091b2:	2102      	movs	r1, #2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fb39 	bl	800982c <RCCEx_PLL2_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	2100      	movs	r1, #0
 80091da:	6139      	str	r1, [r7, #16]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091e6:	460b      	mov	r3, r1
 80091e8:	4313      	orrs	r3, r2
 80091ea:	d011      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f0:	3328      	adds	r3, #40	@ 0x28
 80091f2:	2100      	movs	r1, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 fbcb 	bl	8009990 <RCCEx_PLL3_Config>
 80091fa:	4603      	mov	r3, r0
 80091fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009200:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800920c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	2100      	movs	r1, #0
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009226:	460b      	mov	r3, r1
 8009228:	4313      	orrs	r3, r2
 800922a:	d011      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800922c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009230:	3328      	adds	r3, #40	@ 0x28
 8009232:	2101      	movs	r1, #1
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fbab 	bl	8009990 <RCCEx_PLL3_Config>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009240:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800924c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	2100      	movs	r1, #0
 800925a:	6039      	str	r1, [r7, #0]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	607b      	str	r3, [r7, #4]
 8009262:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d011      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800926c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009270:	3328      	adds	r3, #40	@ 0x28
 8009272:	2102      	movs	r1, #2
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fb8b 	bl	8009990 <RCCEx_PLL3_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800928c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009290:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
}
 800929e:	4618      	mov	r0, r3
 80092a0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80092a4:	46bd      	mov	sp, r7
 80092a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400

080092b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80092b4:	f7fe fda0 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 80092b8:	4602      	mov	r2, r0
 80092ba:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	4904      	ldr	r1, [pc, #16]	@ (80092d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092c6:	5ccb      	ldrb	r3, [r1, r3]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58024400 	.word	0x58024400
 80092d8:	08010540 	.word	0x08010540

080092dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	@ 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092e4:	4ba1      	ldr	r3, [pc, #644]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092ee:	4b9f      	ldr	r3, [pc, #636]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f2:	0b1b      	lsrs	r3, r3, #12
 80092f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092fa:	4b9c      	ldr	r3, [pc, #624]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	091b      	lsrs	r3, r3, #4
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009306:	4b99      	ldr	r3, [pc, #612]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	fb02 f303 	mul.w	r3, r2, r3
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8111 	beq.w	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b02      	cmp	r3, #2
 800932e:	f000 8083 	beq.w	8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b02      	cmp	r3, #2
 8009336:	f200 80a1 	bhi.w	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d056      	beq.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009346:	e099      	b.n	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009348:	4b88      	ldr	r3, [pc, #544]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0320 	and.w	r3, r3, #32
 8009350:	2b00      	cmp	r3, #0
 8009352:	d02d      	beq.n	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009354:	4b85      	ldr	r3, [pc, #532]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	08db      	lsrs	r3, r3, #3
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	4a84      	ldr	r2, [pc, #528]	@ (8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
 8009364:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	ee07 3a90 	vmov	s15, r3
 800936c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937e:	4b7b      	ldr	r3, [pc, #492]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009392:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093ae:	e087      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c2:	4b6a      	ldr	r3, [pc, #424]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f2:	e065      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009406:	4b59      	ldr	r3, [pc, #356]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009416:	ed97 6a03 	vldr	s12, [r7, #12]
 800941a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800941e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009436:	e043      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944a:	4b48      	ldr	r3, [pc, #288]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	ed97 6a03 	vldr	s12, [r7, #12]
 800945e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800946e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947a:	e021      	b.n	80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	4b37      	ldr	r3, [pc, #220]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80094c0:	4b2a      	ldr	r3, [pc, #168]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	0a5b      	lsrs	r3, r3, #9
 80094c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094da:	edd7 6a07 	vldr	s13, [r7, #28]
 80094de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e6:	ee17 2a90 	vmov	r2, s15
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094ee:	4b1f      	ldr	r3, [pc, #124]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009508:	edd7 6a07 	vldr	s13, [r7, #28]
 800950c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009514:	ee17 2a90 	vmov	r2, s15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800951c:	4b13      	ldr	r3, [pc, #76]	@ (800956c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009536:	edd7 6a07 	vldr	s13, [r7, #28]
 800953a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009542:	ee17 2a90 	vmov	r2, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800954a:	e008      	b.n	800955e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	609a      	str	r2, [r3, #8]
}
 800955e:	bf00      	nop
 8009560:	3724      	adds	r7, #36	@ 0x24
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
 8009570:	03d09000 	.word	0x03d09000
 8009574:	46000000 	.word	0x46000000
 8009578:	4c742400 	.word	0x4c742400
 800957c:	4a742400 	.word	0x4a742400
 8009580:	4bb71b00 	.word	0x4bb71b00

08009584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009584:	b480      	push	{r7}
 8009586:	b089      	sub	sp, #36	@ 0x24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800958c:	4ba1      	ldr	r3, [pc, #644]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009596:	4b9f      	ldr	r3, [pc, #636]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	0d1b      	lsrs	r3, r3, #20
 800959c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a6:	0a1b      	lsrs	r3, r3, #8
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80095ae:	4b99      	ldr	r3, [pc, #612]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b2:	08db      	lsrs	r3, r3, #3
 80095b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 8111 	beq.w	80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	f000 8083 	beq.w	80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	f200 80a1 	bhi.w	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d056      	beq.n	800969c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095ee:	e099      	b.n	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f0:	4b88      	ldr	r3, [pc, #544]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d02d      	beq.n	8009658 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fc:	4b85      	ldr	r3, [pc, #532]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	08db      	lsrs	r3, r3, #3
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	4a84      	ldr	r2, [pc, #528]	@ (8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
 800960c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009626:	4b7b      	ldr	r3, [pc, #492]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009636:	ed97 6a03 	vldr	s12, [r7, #12]
 800963a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800963e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800964a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009656:	e087      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009820 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966a:	4b6a      	ldr	r3, [pc, #424]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967a:	ed97 6a03 	vldr	s12, [r7, #12]
 800967e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800969a:	e065      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ae:	4b59      	ldr	r3, [pc, #356]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096be:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096de:	e043      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f2:	4b48      	ldr	r3, [pc, #288]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009702:	ed97 6a03 	vldr	s12, [r7, #12]
 8009706:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800970a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009722:	e021      	b.n	8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009736:	4b37      	ldr	r3, [pc, #220]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	ee07 3a90 	vmov	s15, r3
 8009742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009746:	ed97 6a03 	vldr	s12, [r7, #12]
 800974a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800981c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800974e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009766:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009768:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	0a5b      	lsrs	r3, r3, #9
 800976e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800977e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009782:	edd7 6a07 	vldr	s13, [r7, #28]
 8009786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978e:	ee17 2a90 	vmov	r2, s15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009796:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097bc:	ee17 2a90 	vmov	r2, s15
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80097c4:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c8:	0e1b      	lsrs	r3, r3, #24
 80097ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097de:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ea:	ee17 2a90 	vmov	r2, s15
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097f2:	e008      	b.n	8009806 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	609a      	str	r2, [r3, #8]
}
 8009806:	bf00      	nop
 8009808:	3724      	adds	r7, #36	@ 0x24
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	58024400 	.word	0x58024400
 8009818:	03d09000 	.word	0x03d09000
 800981c:	46000000 	.word	0x46000000
 8009820:	4c742400 	.word	0x4c742400
 8009824:	4a742400 	.word	0x4a742400
 8009828:	4bb71b00 	.word	0x4bb71b00

0800982c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983a:	4b53      	ldr	r3, [pc, #332]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800983c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d101      	bne.n	800984a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e099      	b.n	800997e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800984a:	4b4f      	ldr	r3, [pc, #316]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a4e      	ldr	r2, [pc, #312]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009850:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009856:	f7f7 fe8b 	bl	8001570 <HAL_GetTick>
 800985a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800985c:	e008      	b.n	8009870 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800985e:	f7f7 fe87 	bl	8001570 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b02      	cmp	r3, #2
 800986a:	d901      	bls.n	8009870 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e086      	b.n	800997e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009870:	4b45      	ldr	r3, [pc, #276]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1f0      	bne.n	800985e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800987c:	4b42      	ldr	r3, [pc, #264]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	493f      	ldr	r1, [pc, #252]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800988c:	4313      	orrs	r3, r2
 800988e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	3b01      	subs	r3, #1
 8009896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	025b      	lsls	r3, r3, #9
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	061b      	lsls	r3, r3, #24
 80098bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098c0:	4931      	ldr	r1, [pc, #196]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098c6:	4b30      	ldr	r3, [pc, #192]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	492d      	ldr	r1, [pc, #180]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	f023 0220 	bic.w	r2, r3, #32
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	4928      	ldr	r1, [pc, #160]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ea:	4b27      	ldr	r3, [pc, #156]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a26      	ldr	r2, [pc, #152]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098f0:	f023 0310 	bic.w	r3, r3, #16
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098f6:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098fa:	4b24      	ldr	r3, [pc, #144]	@ (800998c <RCCEx_PLL2_Config+0x160>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	69d2      	ldr	r2, [r2, #28]
 8009902:	00d2      	lsls	r2, r2, #3
 8009904:	4920      	ldr	r1, [pc, #128]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800990a:	4b1f      	ldr	r3, [pc, #124]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a1e      	ldr	r2, [pc, #120]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009910:	f043 0310 	orr.w	r3, r3, #16
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800991c:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800991e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009920:	4a19      	ldr	r2, [pc, #100]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009922:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009926:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009928:	e00f      	b.n	800994a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d106      	bne.n	800993e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009930:	4b15      	ldr	r3, [pc, #84]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	4a14      	ldr	r2, [pc, #80]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800993a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800993c:	e005      	b.n	800994a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800993e:	4b12      	ldr	r3, [pc, #72]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009942:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009944:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009948:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800994a:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0e      	ldr	r2, [pc, #56]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009950:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009956:	f7f7 fe0b 	bl	8001570 <HAL_GetTick>
 800995a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800995c:	e008      	b.n	8009970 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800995e:	f7f7 fe07 	bl	8001570 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e006      	b.n	800997e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <RCCEx_PLL2_Config+0x15c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f0      	beq.n	800995e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
 800998c:	ffff0007 	.word	0xffff0007

08009990 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800999e:	4b53      	ldr	r3, [pc, #332]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d101      	bne.n	80099ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e099      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099ae:	4b4f      	ldr	r3, [pc, #316]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a4e      	ldr	r2, [pc, #312]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ba:	f7f7 fdd9 	bl	8001570 <HAL_GetTick>
 80099be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099c0:	e008      	b.n	80099d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099c2:	f7f7 fdd5 	bl	8001570 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e086      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099d4:	4b45      	ldr	r3, [pc, #276]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f0      	bne.n	80099c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099e0:	4b42      	ldr	r3, [pc, #264]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	051b      	lsls	r3, r3, #20
 80099ee:	493f      	ldr	r1, [pc, #252]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	025b      	lsls	r3, r3, #9
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	041b      	lsls	r3, r3, #16
 8009a12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	061b      	lsls	r3, r3, #24
 8009a20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a24:	4931      	ldr	r1, [pc, #196]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a2a:	4b30      	ldr	r3, [pc, #192]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	492d      	ldr	r1, [pc, #180]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	4928      	ldr	r1, [pc, #160]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a4e:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a26      	ldr	r2, [pc, #152]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a5a:	4b24      	ldr	r3, [pc, #144]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a5e:	4b24      	ldr	r3, [pc, #144]	@ (8009af0 <RCCEx_PLL3_Config+0x160>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	69d2      	ldr	r2, [r2, #28]
 8009a66:	00d2      	lsls	r2, r2, #3
 8009a68:	4920      	ldr	r1, [pc, #128]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	4a1e      	ldr	r2, [pc, #120]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a80:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a8c:	e00f      	b.n	8009aae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a94:	4b15      	ldr	r3, [pc, #84]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a98:	4a14      	ldr	r2, [pc, #80]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009aa0:	e005      	b.n	8009aae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aa2:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	4a11      	ldr	r2, [pc, #68]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009aae:	4b0f      	ldr	r3, [pc, #60]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aba:	f7f7 fd59 	bl	8001570 <HAL_GetTick>
 8009abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ac0:	e008      	b.n	8009ad4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ac2:	f7f7 fd55 	bl	8001570 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e006      	b.n	8009ae2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ad4:	4b05      	ldr	r3, [pc, #20]	@ (8009aec <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	58024400 	.word	0x58024400
 8009af0:	ffff0007 	.word	0xffff0007

08009af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e049      	b.n	8009b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f841 	bl	8009ba2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	f000 f9e8 	bl	8009f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009baa:	bf00      	nop
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
	...

08009bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d001      	beq.n	8009bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e054      	b.n	8009c7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0201 	orr.w	r2, r2, #1
 8009be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a26      	ldr	r2, [pc, #152]	@ (8009c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d022      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bfa:	d01d      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a22      	ldr	r2, [pc, #136]	@ (8009c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d018      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a21      	ldr	r2, [pc, #132]	@ (8009c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d013      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a1f      	ldr	r2, [pc, #124]	@ (8009c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00e      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009c98 <HAL_TIM_Base_Start_IT+0xe0>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d009      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a1c      	ldr	r2, [pc, #112]	@ (8009c9c <HAL_TIM_Base_Start_IT+0xe4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d004      	beq.n	8009c38 <HAL_TIM_Base_Start_IT+0x80>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d115      	bne.n	8009c64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689a      	ldr	r2, [r3, #8]
 8009c3e:	4b19      	ldr	r3, [pc, #100]	@ (8009ca4 <HAL_TIM_Base_Start_IT+0xec>)
 8009c40:	4013      	ands	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b06      	cmp	r3, #6
 8009c48:	d015      	beq.n	8009c76 <HAL_TIM_Base_Start_IT+0xbe>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c50:	d011      	beq.n	8009c76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f042 0201 	orr.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c62:	e008      	b.n	8009c76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0201 	orr.w	r2, r2, #1
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e000      	b.n	8009c78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	40010000 	.word	0x40010000
 8009c8c:	40000400 	.word	0x40000400
 8009c90:	40000800 	.word	0x40000800
 8009c94:	40000c00 	.word	0x40000c00
 8009c98:	40010400 	.word	0x40010400
 8009c9c:	40001800 	.word	0x40001800
 8009ca0:	40014000 	.word	0x40014000
 8009ca4:	00010007 	.word	0x00010007

08009ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d020      	beq.n	8009d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01b      	beq.n	8009d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0202 	mvn.w	r2, #2
 8009cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f8e9 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e005      	b.n	8009d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8db 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8ec 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d020      	beq.n	8009d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01b      	beq.n	8009d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0204 	mvn.w	r2, #4
 8009d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f8c3 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009d44:	e005      	b.n	8009d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f8b5 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f8c6 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d020      	beq.n	8009da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01b      	beq.n	8009da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0208 	mvn.w	r2, #8
 8009d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2204      	movs	r2, #4
 8009d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f89d 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009d90:	e005      	b.n	8009d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f88f 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8a0 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d020      	beq.n	8009df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01b      	beq.n	8009df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0210 	mvn.w	r2, #16
 8009dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f877 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009ddc:	e005      	b.n	8009dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f869 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f87a 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00c      	beq.n	8009e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d007      	beq.n	8009e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f06f 0201 	mvn.w	r2, #1
 8009e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7f7 f840 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00c      	beq.n	8009e42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f913 	bl	800a068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00c      	beq.n	8009e66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f90b 	bl	800a07c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00c      	beq.n	8009e8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f834 	bl	8009ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00c      	beq.n	8009eae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d007      	beq.n	8009eae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f06f 0220 	mvn.w	r2, #32
 8009ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f8d3 	bl	800a054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009efa:	bf00      	nop
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
	...

08009f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a46      	ldr	r2, [pc, #280]	@ (800a034 <TIM_Base_SetConfig+0x12c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d013      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f26:	d00f      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a43      	ldr	r2, [pc, #268]	@ (800a038 <TIM_Base_SetConfig+0x130>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00b      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a42      	ldr	r2, [pc, #264]	@ (800a03c <TIM_Base_SetConfig+0x134>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d007      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a41      	ldr	r2, [pc, #260]	@ (800a040 <TIM_Base_SetConfig+0x138>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d003      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a40      	ldr	r2, [pc, #256]	@ (800a044 <TIM_Base_SetConfig+0x13c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d108      	bne.n	8009f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a35      	ldr	r2, [pc, #212]	@ (800a034 <TIM_Base_SetConfig+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d01f      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f68:	d01b      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a32      	ldr	r2, [pc, #200]	@ (800a038 <TIM_Base_SetConfig+0x130>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d017      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a31      	ldr	r2, [pc, #196]	@ (800a03c <TIM_Base_SetConfig+0x134>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a30      	ldr	r2, [pc, #192]	@ (800a040 <TIM_Base_SetConfig+0x138>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00f      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a2f      	ldr	r2, [pc, #188]	@ (800a044 <TIM_Base_SetConfig+0x13c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a2e      	ldr	r2, [pc, #184]	@ (800a048 <TIM_Base_SetConfig+0x140>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2d      	ldr	r2, [pc, #180]	@ (800a04c <TIM_Base_SetConfig+0x144>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_Base_SetConfig+0x9a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a2c      	ldr	r2, [pc, #176]	@ (800a050 <TIM_Base_SetConfig+0x148>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d108      	bne.n	8009fb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a16      	ldr	r2, [pc, #88]	@ (800a034 <TIM_Base_SetConfig+0x12c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d00f      	beq.n	800a000 <TIM_Base_SetConfig+0xf8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a18      	ldr	r2, [pc, #96]	@ (800a044 <TIM_Base_SetConfig+0x13c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00b      	beq.n	800a000 <TIM_Base_SetConfig+0xf8>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a17      	ldr	r2, [pc, #92]	@ (800a048 <TIM_Base_SetConfig+0x140>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d007      	beq.n	800a000 <TIM_Base_SetConfig+0xf8>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a16      	ldr	r2, [pc, #88]	@ (800a04c <TIM_Base_SetConfig+0x144>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d003      	beq.n	800a000 <TIM_Base_SetConfig+0xf8>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a15      	ldr	r2, [pc, #84]	@ (800a050 <TIM_Base_SetConfig+0x148>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d103      	bne.n	800a008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b01      	cmp	r3, #1
 800a018:	d105      	bne.n	800a026 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f023 0201 	bic.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	611a      	str	r2, [r3, #16]
  }
}
 800a026:	bf00      	nop
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	40010000 	.word	0x40010000
 800a038:	40000400 	.word	0x40000400
 800a03c:	40000800 	.word	0x40000800
 800a040:	40000c00 	.word	0x40000c00
 800a044:	40010400 	.word	0x40010400
 800a048:	40014000 	.word	0x40014000
 800a04c:	40014400 	.word	0x40014400
 800a050:	40014800 	.word	0x40014800

0800a054 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e042      	b.n	800a128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7f7 f96f 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2224      	movs	r2, #36	@ 0x24
 800a0be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f022 0201 	bic.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fafc 	bl	800b6d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fc8d 	bl	800aa00 <UART_SetConfig>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d101      	bne.n	800a0f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e01b      	b.n	800a128 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a10e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0201 	orr.w	r2, r2, #1
 800a11e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fb7b 	bl	800b81c <UART_CheckIdleState>
 800a126:	4603      	mov	r3, r0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a146:	2b20      	cmp	r3, #32
 800a148:	d17b      	bne.n	800a242 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_UART_Transmit+0x26>
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e074      	b.n	800a244 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2221      	movs	r2, #33	@ 0x21
 800a166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a16a:	f7f7 fa01 	bl	8001570 <HAL_GetTick>
 800a16e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	88fa      	ldrh	r2, [r7, #6]
 800a17c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a188:	d108      	bne.n	800a19c <HAL_UART_Transmit+0x6c>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d104      	bne.n	800a19c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	e003      	b.n	800a1a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a1a4:	e030      	b.n	800a208 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2180      	movs	r1, #128	@ 0x80
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f001 fbdd 	bl	800b970 <UART_WaitOnFlagUntilTimeout>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d005      	beq.n	800a1c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e03d      	b.n	800a244 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	61bb      	str	r3, [r7, #24]
 800a1e4:	e007      	b.n	800a1f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	781a      	ldrb	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	3b01      	subs	r3, #1
 800a200:	b29a      	uxth	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a20e:	b29b      	uxth	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1c8      	bne.n	800a1a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2200      	movs	r2, #0
 800a21c:	2140      	movs	r1, #64	@ 0x40
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f001 fba6 	bl	800b970 <UART_WaitOnFlagUntilTimeout>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d005      	beq.n	800a236 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e006      	b.n	800a244 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2220      	movs	r2, #32
 800a23a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	e000      	b.n	800a244 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a242:	2302      	movs	r3, #2
  }
}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b0ba      	sub	sp, #232	@ 0xe8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a272:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a276:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a27a:	4013      	ands	r3, r2
 800a27c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11b      	bne.n	800a2c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a28c:	f003 0320 	and.w	r3, r3, #32
 800a290:	2b00      	cmp	r3, #0
 800a292:	d015      	beq.n	800a2c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a298:	f003 0320 	and.w	r3, r3, #32
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d105      	bne.n	800a2ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d009      	beq.n	800a2c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 8377 	beq.w	800a9a4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	4798      	blx	r3
      }
      return;
 800a2be:	e371      	b.n	800a9a4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a2c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 8123 	beq.w	800a510 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a2ce:	4b8d      	ldr	r3, [pc, #564]	@ (800a504 <HAL_UART_IRQHandler+0x2b8>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a2da:	4b8b      	ldr	r3, [pc, #556]	@ (800a508 <HAL_UART_IRQHandler+0x2bc>)
 800a2dc:	4013      	ands	r3, r2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 8116 	beq.w	800a510 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d011      	beq.n	800a314 <HAL_UART_IRQHandler+0xc8>
 800a2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2201      	movs	r2, #1
 800a302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a30a:	f043 0201 	orr.w	r2, r3, #1
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d011      	beq.n	800a344 <HAL_UART_IRQHandler+0xf8>
 800a320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2202      	movs	r2, #2
 800a332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a33a:	f043 0204 	orr.w	r2, r3, #4
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d011      	beq.n	800a374 <HAL_UART_IRQHandler+0x128>
 800a350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00b      	beq.n	800a374 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2204      	movs	r2, #4
 800a362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a36a:	f043 0202 	orr.w	r2, r3, #2
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a378:	f003 0308 	and.w	r3, r3, #8
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d105      	bne.n	800a398 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a38c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a390:	4b5c      	ldr	r3, [pc, #368]	@ (800a504 <HAL_UART_IRQHandler+0x2b8>)
 800a392:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2208      	movs	r2, #8
 800a39e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3a6:	f043 0208 	orr.w	r2, r3, #8
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d012      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x196>
 800a3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00c      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d8:	f043 0220 	orr.w	r2, r3, #32
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 82dd 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d013      	beq.n	800a422 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a40a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d007      	beq.n	800a422 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a436:	2b40      	cmp	r3, #64	@ 0x40
 800a438:	d005      	beq.n	800a446 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a43a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a43e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a442:	2b00      	cmp	r3, #0
 800a444:	d054      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 fb00 	bl	800ba4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a456:	2b40      	cmp	r3, #64	@ 0x40
 800a458:	d146      	bne.n	800a4e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3308      	adds	r3, #8
 800a460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a468:	e853 3f00 	ldrex	r3, [r3]
 800a46c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3308      	adds	r3, #8
 800a482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a48a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a49e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1d9      	bne.n	800a45a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d017      	beq.n	800a4e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b6:	4a15      	ldr	r2, [pc, #84]	@ (800a50c <HAL_UART_IRQHandler+0x2c0>)
 800a4b8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7f8 fa57 	bl	8002974 <HAL_DMA_Abort_IT>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d019      	beq.n	800a500 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a4da:	4610      	mov	r0, r2
 800a4dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4de:	e00f      	b.n	800a500 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fa77 	bl	800a9d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e6:	e00b      	b.n	800a500 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fa73 	bl	800a9d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ee:	e007      	b.n	800a500 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fa6f 	bl	800a9d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a4fe:	e253      	b.n	800a9a8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a500:	bf00      	nop
    return;
 800a502:	e251      	b.n	800a9a8 <HAL_UART_IRQHandler+0x75c>
 800a504:	10000001 	.word	0x10000001
 800a508:	04000120 	.word	0x04000120
 800a50c:	0800bb19 	.word	0x0800bb19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a514:	2b01      	cmp	r3, #1
 800a516:	f040 81e7 	bne.w	800a8e8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a51e:	f003 0310 	and.w	r3, r3, #16
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 81e0 	beq.w	800a8e8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 81d9 	beq.w	800a8e8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2210      	movs	r2, #16
 800a53c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a548:	2b40      	cmp	r3, #64	@ 0x40
 800a54a:	f040 8151 	bne.w	800a7f0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a96      	ldr	r2, [pc, #600]	@ (800a7b0 <HAL_UART_IRQHandler+0x564>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d068      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a93      	ldr	r2, [pc, #588]	@ (800a7b4 <HAL_UART_IRQHandler+0x568>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d061      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a91      	ldr	r2, [pc, #580]	@ (800a7b8 <HAL_UART_IRQHandler+0x56c>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d05a      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a8e      	ldr	r2, [pc, #568]	@ (800a7bc <HAL_UART_IRQHandler+0x570>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d053      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a8c      	ldr	r2, [pc, #560]	@ (800a7c0 <HAL_UART_IRQHandler+0x574>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d04c      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a89      	ldr	r2, [pc, #548]	@ (800a7c4 <HAL_UART_IRQHandler+0x578>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d045      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a87      	ldr	r2, [pc, #540]	@ (800a7c8 <HAL_UART_IRQHandler+0x57c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d03e      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a84      	ldr	r2, [pc, #528]	@ (800a7cc <HAL_UART_IRQHandler+0x580>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d037      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a82      	ldr	r2, [pc, #520]	@ (800a7d0 <HAL_UART_IRQHandler+0x584>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d030      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a7f      	ldr	r2, [pc, #508]	@ (800a7d4 <HAL_UART_IRQHandler+0x588>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d029      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a7d      	ldr	r2, [pc, #500]	@ (800a7d8 <HAL_UART_IRQHandler+0x58c>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d022      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a7a      	ldr	r2, [pc, #488]	@ (800a7dc <HAL_UART_IRQHandler+0x590>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d01b      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a78      	ldr	r2, [pc, #480]	@ (800a7e0 <HAL_UART_IRQHandler+0x594>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d014      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a75      	ldr	r2, [pc, #468]	@ (800a7e4 <HAL_UART_IRQHandler+0x598>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d00d      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a73      	ldr	r2, [pc, #460]	@ (800a7e8 <HAL_UART_IRQHandler+0x59c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d006      	beq.n	800a62e <HAL_UART_IRQHandler+0x3e2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a70      	ldr	r2, [pc, #448]	@ (800a7ec <HAL_UART_IRQHandler+0x5a0>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d106      	bne.n	800a63c <HAL_UART_IRQHandler+0x3f0>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	e005      	b.n	800a648 <HAL_UART_IRQHandler+0x3fc>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	b29b      	uxth	r3, r3
 800a648:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a64c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 81ab 	beq.w	800a9ac <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a65c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a660:	429a      	cmp	r2, r3
 800a662:	f080 81a3 	bcs.w	800a9ac <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a66c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a67c:	f000 8087 	beq.w	800a78e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a68c:	e853 3f00 	ldrex	r3, [r3]
 800a690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a69c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a6aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6ba:	e841 2300 	strex	r3, r2, [r1]
 800a6be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1da      	bne.n	800a680 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6dc:	f023 0301 	bic.w	r3, r3, #1
 800a6e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e1      	bne.n	800a6ca <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a71c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3308      	adds	r3, #8
 800a726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a72a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a72c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a732:	e841 2300 	strex	r3, r2, [r1]
 800a736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1e3      	bne.n	800a706 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2220      	movs	r2, #32
 800a742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a75a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a75c:	f023 0310 	bic.w	r3, r3, #16
 800a760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a76e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a770:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a774:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a77c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e4      	bne.n	800a74c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f7 fdd5 	bl	8002338 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2202      	movs	r2, #2
 800a792:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f91d 	bl	800a9e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7ae:	e0fd      	b.n	800a9ac <HAL_UART_IRQHandler+0x760>
 800a7b0:	40020010 	.word	0x40020010
 800a7b4:	40020028 	.word	0x40020028
 800a7b8:	40020040 	.word	0x40020040
 800a7bc:	40020058 	.word	0x40020058
 800a7c0:	40020070 	.word	0x40020070
 800a7c4:	40020088 	.word	0x40020088
 800a7c8:	400200a0 	.word	0x400200a0
 800a7cc:	400200b8 	.word	0x400200b8
 800a7d0:	40020410 	.word	0x40020410
 800a7d4:	40020428 	.word	0x40020428
 800a7d8:	40020440 	.word	0x40020440
 800a7dc:	40020458 	.word	0x40020458
 800a7e0:	40020470 	.word	0x40020470
 800a7e4:	40020488 	.word	0x40020488
 800a7e8:	400204a0 	.word	0x400204a0
 800a7ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 80cf 	beq.w	800a9b0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 80ca 	beq.w	800a9b0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a824:	e853 3f00 	ldrex	r3, [r3]
 800a828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a83e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a840:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e4      	bne.n	800a81c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3308      	adds	r3, #8
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	623b      	str	r3, [r7, #32]
   return(result);
 800a862:	6a3a      	ldr	r2, [r7, #32]
 800a864:	4b55      	ldr	r3, [pc, #340]	@ (800a9bc <HAL_UART_IRQHandler+0x770>)
 800a866:	4013      	ands	r3, r2
 800a868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3308      	adds	r3, #8
 800a872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a876:	633a      	str	r2, [r7, #48]	@ 0x30
 800a878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a87c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e3      	bne.n	800a852 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2220      	movs	r2, #32
 800a88e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 0310 	bic.w	r3, r3, #16
 800a8b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	69b9      	ldr	r1, [r7, #24]
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e4      	bne.n	800a89e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f881 	bl	800a9e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8e6:	e063      	b.n	800a9b0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <HAL_UART_IRQHandler+0x6c6>
 800a8f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a8f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d008      	beq.n	800a912 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 f945 	bl	800bb9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a910:	e051      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d014      	beq.n	800a948 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a91e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a92a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a92e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d008      	beq.n	800a948 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d03a      	beq.n	800a9b4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
    }
    return;
 800a946:	e035      	b.n	800a9b4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a94c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a950:	2b00      	cmp	r3, #0
 800a952:	d009      	beq.n	800a968 <HAL_UART_IRQHandler+0x71c>
 800a954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 f8ef 	bl	800bb44 <UART_EndTransmit_IT>
    return;
 800a966:	e026      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a96c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <HAL_UART_IRQHandler+0x73c>
 800a974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a978:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 f91e 	bl	800bbc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a986:	e016      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a98c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a990:	2b00      	cmp	r3, #0
 800a992:	d010      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
 800a994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da0c      	bge.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 f906 	bl	800bbae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9a2:	e008      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a9a4:	bf00      	nop
 800a9a6:	e006      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a9a8:	bf00      	nop
 800a9aa:	e004      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a9ac:	bf00      	nop
 800a9ae:	e002      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a9b4:	bf00      	nop
  }
}
 800a9b6:	37e8      	adds	r7, #232	@ 0xe8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	effffffe 	.word	0xeffffffe

0800a9c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa04:	b092      	sub	sp, #72	@ 0x48
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	431a      	orrs	r2, r3
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4bbe      	ldr	r3, [pc, #760]	@ (800ad28 <UART_SetConfig+0x328>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4ab3      	ldr	r2, [pc, #716]	@ (800ad2c <UART_SetConfig+0x32c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d004      	beq.n	800aa6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	4baf      	ldr	r3, [pc, #700]	@ (800ad30 <UART_SetConfig+0x330>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	6812      	ldr	r2, [r2, #0]
 800aa7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa7c:	430b      	orrs	r3, r1
 800aa7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa86:	f023 010f 	bic.w	r1, r3, #15
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4aa6      	ldr	r2, [pc, #664]	@ (800ad34 <UART_SetConfig+0x334>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d177      	bne.n	800ab90 <UART_SetConfig+0x190>
 800aaa0:	4ba5      	ldr	r3, [pc, #660]	@ (800ad38 <UART_SetConfig+0x338>)
 800aaa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aaa8:	2b28      	cmp	r3, #40	@ 0x28
 800aaaa:	d86d      	bhi.n	800ab88 <UART_SetConfig+0x188>
 800aaac:	a201      	add	r2, pc, #4	@ (adr r2, 800aab4 <UART_SetConfig+0xb4>)
 800aaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab2:	bf00      	nop
 800aab4:	0800ab59 	.word	0x0800ab59
 800aab8:	0800ab89 	.word	0x0800ab89
 800aabc:	0800ab89 	.word	0x0800ab89
 800aac0:	0800ab89 	.word	0x0800ab89
 800aac4:	0800ab89 	.word	0x0800ab89
 800aac8:	0800ab89 	.word	0x0800ab89
 800aacc:	0800ab89 	.word	0x0800ab89
 800aad0:	0800ab89 	.word	0x0800ab89
 800aad4:	0800ab61 	.word	0x0800ab61
 800aad8:	0800ab89 	.word	0x0800ab89
 800aadc:	0800ab89 	.word	0x0800ab89
 800aae0:	0800ab89 	.word	0x0800ab89
 800aae4:	0800ab89 	.word	0x0800ab89
 800aae8:	0800ab89 	.word	0x0800ab89
 800aaec:	0800ab89 	.word	0x0800ab89
 800aaf0:	0800ab89 	.word	0x0800ab89
 800aaf4:	0800ab69 	.word	0x0800ab69
 800aaf8:	0800ab89 	.word	0x0800ab89
 800aafc:	0800ab89 	.word	0x0800ab89
 800ab00:	0800ab89 	.word	0x0800ab89
 800ab04:	0800ab89 	.word	0x0800ab89
 800ab08:	0800ab89 	.word	0x0800ab89
 800ab0c:	0800ab89 	.word	0x0800ab89
 800ab10:	0800ab89 	.word	0x0800ab89
 800ab14:	0800ab71 	.word	0x0800ab71
 800ab18:	0800ab89 	.word	0x0800ab89
 800ab1c:	0800ab89 	.word	0x0800ab89
 800ab20:	0800ab89 	.word	0x0800ab89
 800ab24:	0800ab89 	.word	0x0800ab89
 800ab28:	0800ab89 	.word	0x0800ab89
 800ab2c:	0800ab89 	.word	0x0800ab89
 800ab30:	0800ab89 	.word	0x0800ab89
 800ab34:	0800ab79 	.word	0x0800ab79
 800ab38:	0800ab89 	.word	0x0800ab89
 800ab3c:	0800ab89 	.word	0x0800ab89
 800ab40:	0800ab89 	.word	0x0800ab89
 800ab44:	0800ab89 	.word	0x0800ab89
 800ab48:	0800ab89 	.word	0x0800ab89
 800ab4c:	0800ab89 	.word	0x0800ab89
 800ab50:	0800ab89 	.word	0x0800ab89
 800ab54:	0800ab81 	.word	0x0800ab81
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e326      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab60:	2304      	movs	r3, #4
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab66:	e322      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab68:	2308      	movs	r3, #8
 800ab6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6e:	e31e      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab70:	2310      	movs	r3, #16
 800ab72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab76:	e31a      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab78:	2320      	movs	r3, #32
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7e:	e316      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab80:	2340      	movs	r3, #64	@ 0x40
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab86:	e312      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab88:	2380      	movs	r3, #128	@ 0x80
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8e:	e30e      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a69      	ldr	r2, [pc, #420]	@ (800ad3c <UART_SetConfig+0x33c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d130      	bne.n	800abfc <UART_SetConfig+0x1fc>
 800ab9a:	4b67      	ldr	r3, [pc, #412]	@ (800ad38 <UART_SetConfig+0x338>)
 800ab9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab9e:	f003 0307 	and.w	r3, r3, #7
 800aba2:	2b05      	cmp	r3, #5
 800aba4:	d826      	bhi.n	800abf4 <UART_SetConfig+0x1f4>
 800aba6:	a201      	add	r2, pc, #4	@ (adr r2, 800abac <UART_SetConfig+0x1ac>)
 800aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abac:	0800abc5 	.word	0x0800abc5
 800abb0:	0800abcd 	.word	0x0800abcd
 800abb4:	0800abd5 	.word	0x0800abd5
 800abb8:	0800abdd 	.word	0x0800abdd
 800abbc:	0800abe5 	.word	0x0800abe5
 800abc0:	0800abed 	.word	0x0800abed
 800abc4:	2300      	movs	r3, #0
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abca:	e2f0      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abcc:	2304      	movs	r3, #4
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abd2:	e2ec      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abd4:	2308      	movs	r3, #8
 800abd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abda:	e2e8      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abdc:	2310      	movs	r3, #16
 800abde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abe2:	e2e4      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abe4:	2320      	movs	r3, #32
 800abe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abea:	e2e0      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abec:	2340      	movs	r3, #64	@ 0x40
 800abee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abf2:	e2dc      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abf4:	2380      	movs	r3, #128	@ 0x80
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfa:	e2d8      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a4f      	ldr	r2, [pc, #316]	@ (800ad40 <UART_SetConfig+0x340>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d130      	bne.n	800ac68 <UART_SetConfig+0x268>
 800ac06:	4b4c      	ldr	r3, [pc, #304]	@ (800ad38 <UART_SetConfig+0x338>)
 800ac08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac0a:	f003 0307 	and.w	r3, r3, #7
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d826      	bhi.n	800ac60 <UART_SetConfig+0x260>
 800ac12:	a201      	add	r2, pc, #4	@ (adr r2, 800ac18 <UART_SetConfig+0x218>)
 800ac14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac18:	0800ac31 	.word	0x0800ac31
 800ac1c:	0800ac39 	.word	0x0800ac39
 800ac20:	0800ac41 	.word	0x0800ac41
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac51 	.word	0x0800ac51
 800ac2c:	0800ac59 	.word	0x0800ac59
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e2ba      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac38:	2304      	movs	r3, #4
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3e:	e2b6      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac40:	2308      	movs	r3, #8
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac46:	e2b2      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac48:	2310      	movs	r3, #16
 800ac4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4e:	e2ae      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac50:	2320      	movs	r3, #32
 800ac52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac56:	e2aa      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac58:	2340      	movs	r3, #64	@ 0x40
 800ac5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5e:	e2a6      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac60:	2380      	movs	r3, #128	@ 0x80
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac66:	e2a2      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a35      	ldr	r2, [pc, #212]	@ (800ad44 <UART_SetConfig+0x344>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d130      	bne.n	800acd4 <UART_SetConfig+0x2d4>
 800ac72:	4b31      	ldr	r3, [pc, #196]	@ (800ad38 <UART_SetConfig+0x338>)
 800ac74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b05      	cmp	r3, #5
 800ac7c:	d826      	bhi.n	800accc <UART_SetConfig+0x2cc>
 800ac7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac84 <UART_SetConfig+0x284>)
 800ac80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac84:	0800ac9d 	.word	0x0800ac9d
 800ac88:	0800aca5 	.word	0x0800aca5
 800ac8c:	0800acad 	.word	0x0800acad
 800ac90:	0800acb5 	.word	0x0800acb5
 800ac94:	0800acbd 	.word	0x0800acbd
 800ac98:	0800acc5 	.word	0x0800acc5
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e284      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aca4:	2304      	movs	r3, #4
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e280      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800acac:	2308      	movs	r3, #8
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e27c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800acb4:	2310      	movs	r3, #16
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e278      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800acbc:	2320      	movs	r3, #32
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e274      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800acc4:	2340      	movs	r3, #64	@ 0x40
 800acc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acca:	e270      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800accc:	2380      	movs	r3, #128	@ 0x80
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e26c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad48 <UART_SetConfig+0x348>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d142      	bne.n	800ad64 <UART_SetConfig+0x364>
 800acde:	4b16      	ldr	r3, [pc, #88]	@ (800ad38 <UART_SetConfig+0x338>)
 800ace0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	2b05      	cmp	r3, #5
 800ace8:	d838      	bhi.n	800ad5c <UART_SetConfig+0x35c>
 800acea:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <UART_SetConfig+0x2f0>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad09 	.word	0x0800ad09
 800acf4:	0800ad11 	.word	0x0800ad11
 800acf8:	0800ad19 	.word	0x0800ad19
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad4d 	.word	0x0800ad4d
 800ad04:	0800ad55 	.word	0x0800ad55
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e24e      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad10:	2304      	movs	r3, #4
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e24a      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad18:	2308      	movs	r3, #8
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e246      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad20:	2310      	movs	r3, #16
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e242      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad28:	cfff69f3 	.word	0xcfff69f3
 800ad2c:	58000c00 	.word	0x58000c00
 800ad30:	11fff4ff 	.word	0x11fff4ff
 800ad34:	40011000 	.word	0x40011000
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	40004400 	.word	0x40004400
 800ad40:	40004800 	.word	0x40004800
 800ad44:	40004c00 	.word	0x40004c00
 800ad48:	40005000 	.word	0x40005000
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e22c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad54:	2340      	movs	r3, #64	@ 0x40
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e228      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad5c:	2380      	movs	r3, #128	@ 0x80
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e224      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4ab1      	ldr	r2, [pc, #708]	@ (800b030 <UART_SetConfig+0x630>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d176      	bne.n	800ae5c <UART_SetConfig+0x45c>
 800ad6e:	4bb1      	ldr	r3, [pc, #708]	@ (800b034 <UART_SetConfig+0x634>)
 800ad70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad76:	2b28      	cmp	r3, #40	@ 0x28
 800ad78:	d86c      	bhi.n	800ae54 <UART_SetConfig+0x454>
 800ad7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad80 <UART_SetConfig+0x380>)
 800ad7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad80:	0800ae25 	.word	0x0800ae25
 800ad84:	0800ae55 	.word	0x0800ae55
 800ad88:	0800ae55 	.word	0x0800ae55
 800ad8c:	0800ae55 	.word	0x0800ae55
 800ad90:	0800ae55 	.word	0x0800ae55
 800ad94:	0800ae55 	.word	0x0800ae55
 800ad98:	0800ae55 	.word	0x0800ae55
 800ad9c:	0800ae55 	.word	0x0800ae55
 800ada0:	0800ae2d 	.word	0x0800ae2d
 800ada4:	0800ae55 	.word	0x0800ae55
 800ada8:	0800ae55 	.word	0x0800ae55
 800adac:	0800ae55 	.word	0x0800ae55
 800adb0:	0800ae55 	.word	0x0800ae55
 800adb4:	0800ae55 	.word	0x0800ae55
 800adb8:	0800ae55 	.word	0x0800ae55
 800adbc:	0800ae55 	.word	0x0800ae55
 800adc0:	0800ae35 	.word	0x0800ae35
 800adc4:	0800ae55 	.word	0x0800ae55
 800adc8:	0800ae55 	.word	0x0800ae55
 800adcc:	0800ae55 	.word	0x0800ae55
 800add0:	0800ae55 	.word	0x0800ae55
 800add4:	0800ae55 	.word	0x0800ae55
 800add8:	0800ae55 	.word	0x0800ae55
 800addc:	0800ae55 	.word	0x0800ae55
 800ade0:	0800ae3d 	.word	0x0800ae3d
 800ade4:	0800ae55 	.word	0x0800ae55
 800ade8:	0800ae55 	.word	0x0800ae55
 800adec:	0800ae55 	.word	0x0800ae55
 800adf0:	0800ae55 	.word	0x0800ae55
 800adf4:	0800ae55 	.word	0x0800ae55
 800adf8:	0800ae55 	.word	0x0800ae55
 800adfc:	0800ae55 	.word	0x0800ae55
 800ae00:	0800ae45 	.word	0x0800ae45
 800ae04:	0800ae55 	.word	0x0800ae55
 800ae08:	0800ae55 	.word	0x0800ae55
 800ae0c:	0800ae55 	.word	0x0800ae55
 800ae10:	0800ae55 	.word	0x0800ae55
 800ae14:	0800ae55 	.word	0x0800ae55
 800ae18:	0800ae55 	.word	0x0800ae55
 800ae1c:	0800ae55 	.word	0x0800ae55
 800ae20:	0800ae4d 	.word	0x0800ae4d
 800ae24:	2301      	movs	r3, #1
 800ae26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2a:	e1c0      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae32:	e1bc      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae34:	2308      	movs	r3, #8
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e1b8      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae3c:	2310      	movs	r3, #16
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae42:	e1b4      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae44:	2320      	movs	r3, #32
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4a:	e1b0      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae4c:	2340      	movs	r3, #64	@ 0x40
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae52:	e1ac      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae54:	2380      	movs	r3, #128	@ 0x80
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e1a8      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a75      	ldr	r2, [pc, #468]	@ (800b038 <UART_SetConfig+0x638>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d130      	bne.n	800aec8 <UART_SetConfig+0x4c8>
 800ae66:	4b73      	ldr	r3, [pc, #460]	@ (800b034 <UART_SetConfig+0x634>)
 800ae68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	2b05      	cmp	r3, #5
 800ae70:	d826      	bhi.n	800aec0 <UART_SetConfig+0x4c0>
 800ae72:	a201      	add	r2, pc, #4	@ (adr r2, 800ae78 <UART_SetConfig+0x478>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800ae91 	.word	0x0800ae91
 800ae7c:	0800ae99 	.word	0x0800ae99
 800ae80:	0800aea1 	.word	0x0800aea1
 800ae84:	0800aea9 	.word	0x0800aea9
 800ae88:	0800aeb1 	.word	0x0800aeb1
 800ae8c:	0800aeb9 	.word	0x0800aeb9
 800ae90:	2300      	movs	r3, #0
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e18a      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800ae98:	2304      	movs	r3, #4
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e186      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aea0:	2308      	movs	r3, #8
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e182      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aea8:	2310      	movs	r3, #16
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e17e      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb6:	e17a      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aeb8:	2340      	movs	r3, #64	@ 0x40
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aebe:	e176      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aec0:	2380      	movs	r3, #128	@ 0x80
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e172      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a5b      	ldr	r2, [pc, #364]	@ (800b03c <UART_SetConfig+0x63c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d130      	bne.n	800af34 <UART_SetConfig+0x534>
 800aed2:	4b58      	ldr	r3, [pc, #352]	@ (800b034 <UART_SetConfig+0x634>)
 800aed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	2b05      	cmp	r3, #5
 800aedc:	d826      	bhi.n	800af2c <UART_SetConfig+0x52c>
 800aede:	a201      	add	r2, pc, #4	@ (adr r2, 800aee4 <UART_SetConfig+0x4e4>)
 800aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee4:	0800aefd 	.word	0x0800aefd
 800aee8:	0800af05 	.word	0x0800af05
 800aeec:	0800af0d 	.word	0x0800af0d
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af25 	.word	0x0800af25
 800aefc:	2300      	movs	r3, #0
 800aefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af02:	e154      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af04:	2304      	movs	r3, #4
 800af06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0a:	e150      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af0c:	2308      	movs	r3, #8
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af12:	e14c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af14:	2310      	movs	r3, #16
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e148      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af1c:	2320      	movs	r3, #32
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e144      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af24:	2340      	movs	r3, #64	@ 0x40
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2a:	e140      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af2c:	2380      	movs	r3, #128	@ 0x80
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e13c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a41      	ldr	r2, [pc, #260]	@ (800b040 <UART_SetConfig+0x640>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	f040 8082 	bne.w	800b044 <UART_SetConfig+0x644>
 800af40:	4b3c      	ldr	r3, [pc, #240]	@ (800b034 <UART_SetConfig+0x634>)
 800af42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af48:	2b28      	cmp	r3, #40	@ 0x28
 800af4a:	d86d      	bhi.n	800b028 <UART_SetConfig+0x628>
 800af4c:	a201      	add	r2, pc, #4	@ (adr r2, 800af54 <UART_SetConfig+0x554>)
 800af4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af52:	bf00      	nop
 800af54:	0800aff9 	.word	0x0800aff9
 800af58:	0800b029 	.word	0x0800b029
 800af5c:	0800b029 	.word	0x0800b029
 800af60:	0800b029 	.word	0x0800b029
 800af64:	0800b029 	.word	0x0800b029
 800af68:	0800b029 	.word	0x0800b029
 800af6c:	0800b029 	.word	0x0800b029
 800af70:	0800b029 	.word	0x0800b029
 800af74:	0800b001 	.word	0x0800b001
 800af78:	0800b029 	.word	0x0800b029
 800af7c:	0800b029 	.word	0x0800b029
 800af80:	0800b029 	.word	0x0800b029
 800af84:	0800b029 	.word	0x0800b029
 800af88:	0800b029 	.word	0x0800b029
 800af8c:	0800b029 	.word	0x0800b029
 800af90:	0800b029 	.word	0x0800b029
 800af94:	0800b009 	.word	0x0800b009
 800af98:	0800b029 	.word	0x0800b029
 800af9c:	0800b029 	.word	0x0800b029
 800afa0:	0800b029 	.word	0x0800b029
 800afa4:	0800b029 	.word	0x0800b029
 800afa8:	0800b029 	.word	0x0800b029
 800afac:	0800b029 	.word	0x0800b029
 800afb0:	0800b029 	.word	0x0800b029
 800afb4:	0800b011 	.word	0x0800b011
 800afb8:	0800b029 	.word	0x0800b029
 800afbc:	0800b029 	.word	0x0800b029
 800afc0:	0800b029 	.word	0x0800b029
 800afc4:	0800b029 	.word	0x0800b029
 800afc8:	0800b029 	.word	0x0800b029
 800afcc:	0800b029 	.word	0x0800b029
 800afd0:	0800b029 	.word	0x0800b029
 800afd4:	0800b019 	.word	0x0800b019
 800afd8:	0800b029 	.word	0x0800b029
 800afdc:	0800b029 	.word	0x0800b029
 800afe0:	0800b029 	.word	0x0800b029
 800afe4:	0800b029 	.word	0x0800b029
 800afe8:	0800b029 	.word	0x0800b029
 800afec:	0800b029 	.word	0x0800b029
 800aff0:	0800b029 	.word	0x0800b029
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e0d6      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b000:	2304      	movs	r3, #4
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e0d2      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b008:	2308      	movs	r3, #8
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e0ce      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b010:	2310      	movs	r3, #16
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b016:	e0ca      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b018:	2320      	movs	r3, #32
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01e:	e0c6      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b020:	2340      	movs	r3, #64	@ 0x40
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b026:	e0c2      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b028:	2380      	movs	r3, #128	@ 0x80
 800b02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02e:	e0be      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b030:	40011400 	.word	0x40011400
 800b034:	58024400 	.word	0x58024400
 800b038:	40007800 	.word	0x40007800
 800b03c:	40007c00 	.word	0x40007c00
 800b040:	40011800 	.word	0x40011800
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4aad      	ldr	r2, [pc, #692]	@ (800b300 <UART_SetConfig+0x900>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d176      	bne.n	800b13c <UART_SetConfig+0x73c>
 800b04e:	4bad      	ldr	r3, [pc, #692]	@ (800b304 <UART_SetConfig+0x904>)
 800b050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b056:	2b28      	cmp	r3, #40	@ 0x28
 800b058:	d86c      	bhi.n	800b134 <UART_SetConfig+0x734>
 800b05a:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <UART_SetConfig+0x660>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b105 	.word	0x0800b105
 800b064:	0800b135 	.word	0x0800b135
 800b068:	0800b135 	.word	0x0800b135
 800b06c:	0800b135 	.word	0x0800b135
 800b070:	0800b135 	.word	0x0800b135
 800b074:	0800b135 	.word	0x0800b135
 800b078:	0800b135 	.word	0x0800b135
 800b07c:	0800b135 	.word	0x0800b135
 800b080:	0800b10d 	.word	0x0800b10d
 800b084:	0800b135 	.word	0x0800b135
 800b088:	0800b135 	.word	0x0800b135
 800b08c:	0800b135 	.word	0x0800b135
 800b090:	0800b135 	.word	0x0800b135
 800b094:	0800b135 	.word	0x0800b135
 800b098:	0800b135 	.word	0x0800b135
 800b09c:	0800b135 	.word	0x0800b135
 800b0a0:	0800b115 	.word	0x0800b115
 800b0a4:	0800b135 	.word	0x0800b135
 800b0a8:	0800b135 	.word	0x0800b135
 800b0ac:	0800b135 	.word	0x0800b135
 800b0b0:	0800b135 	.word	0x0800b135
 800b0b4:	0800b135 	.word	0x0800b135
 800b0b8:	0800b135 	.word	0x0800b135
 800b0bc:	0800b135 	.word	0x0800b135
 800b0c0:	0800b11d 	.word	0x0800b11d
 800b0c4:	0800b135 	.word	0x0800b135
 800b0c8:	0800b135 	.word	0x0800b135
 800b0cc:	0800b135 	.word	0x0800b135
 800b0d0:	0800b135 	.word	0x0800b135
 800b0d4:	0800b135 	.word	0x0800b135
 800b0d8:	0800b135 	.word	0x0800b135
 800b0dc:	0800b135 	.word	0x0800b135
 800b0e0:	0800b125 	.word	0x0800b125
 800b0e4:	0800b135 	.word	0x0800b135
 800b0e8:	0800b135 	.word	0x0800b135
 800b0ec:	0800b135 	.word	0x0800b135
 800b0f0:	0800b135 	.word	0x0800b135
 800b0f4:	0800b135 	.word	0x0800b135
 800b0f8:	0800b135 	.word	0x0800b135
 800b0fc:	0800b135 	.word	0x0800b135
 800b100:	0800b12d 	.word	0x0800b12d
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b10a:	e050      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b10c:	2304      	movs	r3, #4
 800b10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b112:	e04c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b114:	2308      	movs	r3, #8
 800b116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11a:	e048      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b11c:	2310      	movs	r3, #16
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b122:	e044      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b124:	2320      	movs	r3, #32
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12a:	e040      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b12c:	2340      	movs	r3, #64	@ 0x40
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e03c      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b134:	2380      	movs	r3, #128	@ 0x80
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e038      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a71      	ldr	r2, [pc, #452]	@ (800b308 <UART_SetConfig+0x908>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d130      	bne.n	800b1a8 <UART_SetConfig+0x7a8>
 800b146:	4b6f      	ldr	r3, [pc, #444]	@ (800b304 <UART_SetConfig+0x904>)
 800b148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b14a:	f003 0307 	and.w	r3, r3, #7
 800b14e:	2b05      	cmp	r3, #5
 800b150:	d826      	bhi.n	800b1a0 <UART_SetConfig+0x7a0>
 800b152:	a201      	add	r2, pc, #4	@ (adr r2, 800b158 <UART_SetConfig+0x758>)
 800b154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b158:	0800b171 	.word	0x0800b171
 800b15c:	0800b179 	.word	0x0800b179
 800b160:	0800b181 	.word	0x0800b181
 800b164:	0800b189 	.word	0x0800b189
 800b168:	0800b191 	.word	0x0800b191
 800b16c:	0800b199 	.word	0x0800b199
 800b170:	2302      	movs	r3, #2
 800b172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b176:	e01a      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b178:	2304      	movs	r3, #4
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17e:	e016      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b180:	2308      	movs	r3, #8
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b186:	e012      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b188:	2310      	movs	r3, #16
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18e:	e00e      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b190:	2320      	movs	r3, #32
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b196:	e00a      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b198:	2340      	movs	r3, #64	@ 0x40
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19e:	e006      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b1a0:	2380      	movs	r3, #128	@ 0x80
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a6:	e002      	b.n	800b1ae <UART_SetConfig+0x7ae>
 800b1a8:	2380      	movs	r3, #128	@ 0x80
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a55      	ldr	r2, [pc, #340]	@ (800b308 <UART_SetConfig+0x908>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	f040 80f8 	bne.w	800b3aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	dc46      	bgt.n	800b250 <UART_SetConfig+0x850>
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	db75      	blt.n	800b2b2 <UART_SetConfig+0x8b2>
 800b1c6:	3b02      	subs	r3, #2
 800b1c8:	2b1e      	cmp	r3, #30
 800b1ca:	d872      	bhi.n	800b2b2 <UART_SetConfig+0x8b2>
 800b1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <UART_SetConfig+0x7d4>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b257 	.word	0x0800b257
 800b1d8:	0800b2b3 	.word	0x0800b2b3
 800b1dc:	0800b25f 	.word	0x0800b25f
 800b1e0:	0800b2b3 	.word	0x0800b2b3
 800b1e4:	0800b2b3 	.word	0x0800b2b3
 800b1e8:	0800b2b3 	.word	0x0800b2b3
 800b1ec:	0800b26f 	.word	0x0800b26f
 800b1f0:	0800b2b3 	.word	0x0800b2b3
 800b1f4:	0800b2b3 	.word	0x0800b2b3
 800b1f8:	0800b2b3 	.word	0x0800b2b3
 800b1fc:	0800b2b3 	.word	0x0800b2b3
 800b200:	0800b2b3 	.word	0x0800b2b3
 800b204:	0800b2b3 	.word	0x0800b2b3
 800b208:	0800b2b3 	.word	0x0800b2b3
 800b20c:	0800b27f 	.word	0x0800b27f
 800b210:	0800b2b3 	.word	0x0800b2b3
 800b214:	0800b2b3 	.word	0x0800b2b3
 800b218:	0800b2b3 	.word	0x0800b2b3
 800b21c:	0800b2b3 	.word	0x0800b2b3
 800b220:	0800b2b3 	.word	0x0800b2b3
 800b224:	0800b2b3 	.word	0x0800b2b3
 800b228:	0800b2b3 	.word	0x0800b2b3
 800b22c:	0800b2b3 	.word	0x0800b2b3
 800b230:	0800b2b3 	.word	0x0800b2b3
 800b234:	0800b2b3 	.word	0x0800b2b3
 800b238:	0800b2b3 	.word	0x0800b2b3
 800b23c:	0800b2b3 	.word	0x0800b2b3
 800b240:	0800b2b3 	.word	0x0800b2b3
 800b244:	0800b2b3 	.word	0x0800b2b3
 800b248:	0800b2b3 	.word	0x0800b2b3
 800b24c:	0800b2a5 	.word	0x0800b2a5
 800b250:	2b40      	cmp	r3, #64	@ 0x40
 800b252:	d02a      	beq.n	800b2aa <UART_SetConfig+0x8aa>
 800b254:	e02d      	b.n	800b2b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b256:	f7fe f82b 	bl	80092b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b25a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b25c:	e02f      	b.n	800b2be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b25e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe f83a 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b26c:	e027      	b.n	800b2be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b26e:	f107 0318 	add.w	r3, r7, #24
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe f986 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b27c:	e01f      	b.n	800b2be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b27e:	4b21      	ldr	r3, [pc, #132]	@ (800b304 <UART_SetConfig+0x904>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0320 	and.w	r3, r3, #32
 800b286:	2b00      	cmp	r3, #0
 800b288:	d009      	beq.n	800b29e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b28a:	4b1e      	ldr	r3, [pc, #120]	@ (800b304 <UART_SetConfig+0x904>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	08db      	lsrs	r3, r3, #3
 800b290:	f003 0303 	and.w	r3, r3, #3
 800b294:	4a1d      	ldr	r2, [pc, #116]	@ (800b30c <UART_SetConfig+0x90c>)
 800b296:	fa22 f303 	lsr.w	r3, r2, r3
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b29c:	e00f      	b.n	800b2be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b29e:	4b1b      	ldr	r3, [pc, #108]	@ (800b30c <UART_SetConfig+0x90c>)
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a2:	e00c      	b.n	800b2be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b310 <UART_SetConfig+0x910>)
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a8:	e009      	b.n	800b2be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e005      	b.n	800b2be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 81ee 	beq.w	800b6a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ca:	4a12      	ldr	r2, [pc, #72]	@ (800b314 <UART_SetConfig+0x914>)
 800b2cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	4413      	add	r3, r2
 800b2e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d305      	bcc.n	800b2f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d910      	bls.n	800b318 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2fc:	e1d1      	b.n	800b6a2 <UART_SetConfig+0xca2>
 800b2fe:	bf00      	nop
 800b300:	40011c00 	.word	0x40011c00
 800b304:	58024400 	.word	0x58024400
 800b308:	58000c00 	.word	0x58000c00
 800b30c:	03d09000 	.word	0x03d09000
 800b310:	003d0900 	.word	0x003d0900
 800b314:	08010558 	.word	0x08010558
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b31a:	2200      	movs	r2, #0
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	60fa      	str	r2, [r7, #12]
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b324:	4ac0      	ldr	r2, [pc, #768]	@ (800b628 <UART_SetConfig+0xc28>)
 800b326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	2200      	movs	r2, #0
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	607a      	str	r2, [r7, #4]
 800b332:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b336:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b33a:	f7f5 f829 	bl	8000390 <__aeabi_uldivmod>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4610      	mov	r0, r2
 800b344:	4619      	mov	r1, r3
 800b346:	f04f 0200 	mov.w	r2, #0
 800b34a:	f04f 0300 	mov.w	r3, #0
 800b34e:	020b      	lsls	r3, r1, #8
 800b350:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b354:	0202      	lsls	r2, r0, #8
 800b356:	6979      	ldr	r1, [r7, #20]
 800b358:	6849      	ldr	r1, [r1, #4]
 800b35a:	0849      	lsrs	r1, r1, #1
 800b35c:	2000      	movs	r0, #0
 800b35e:	460c      	mov	r4, r1
 800b360:	4605      	mov	r5, r0
 800b362:	eb12 0804 	adds.w	r8, r2, r4
 800b366:	eb43 0905 	adc.w	r9, r3, r5
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	469a      	mov	sl, r3
 800b372:	4693      	mov	fp, r2
 800b374:	4652      	mov	r2, sl
 800b376:	465b      	mov	r3, fp
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f7f5 f808 	bl	8000390 <__aeabi_uldivmod>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4613      	mov	r3, r2
 800b386:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b38e:	d308      	bcc.n	800b3a2 <UART_SetConfig+0x9a2>
 800b390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b396:	d204      	bcs.n	800b3a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b39e:	60da      	str	r2, [r3, #12]
 800b3a0:	e17f      	b.n	800b6a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b3a8:	e17b      	b.n	800b6a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3b2:	f040 80bd 	bne.w	800b530 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b3b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	2b20      	cmp	r3, #32
 800b3bc:	dc48      	bgt.n	800b450 <UART_SetConfig+0xa50>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	db7b      	blt.n	800b4ba <UART_SetConfig+0xaba>
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d879      	bhi.n	800b4ba <UART_SetConfig+0xaba>
 800b3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3cc <UART_SetConfig+0x9cc>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b457 	.word	0x0800b457
 800b3d0:	0800b45f 	.word	0x0800b45f
 800b3d4:	0800b4bb 	.word	0x0800b4bb
 800b3d8:	0800b4bb 	.word	0x0800b4bb
 800b3dc:	0800b467 	.word	0x0800b467
 800b3e0:	0800b4bb 	.word	0x0800b4bb
 800b3e4:	0800b4bb 	.word	0x0800b4bb
 800b3e8:	0800b4bb 	.word	0x0800b4bb
 800b3ec:	0800b477 	.word	0x0800b477
 800b3f0:	0800b4bb 	.word	0x0800b4bb
 800b3f4:	0800b4bb 	.word	0x0800b4bb
 800b3f8:	0800b4bb 	.word	0x0800b4bb
 800b3fc:	0800b4bb 	.word	0x0800b4bb
 800b400:	0800b4bb 	.word	0x0800b4bb
 800b404:	0800b4bb 	.word	0x0800b4bb
 800b408:	0800b4bb 	.word	0x0800b4bb
 800b40c:	0800b487 	.word	0x0800b487
 800b410:	0800b4bb 	.word	0x0800b4bb
 800b414:	0800b4bb 	.word	0x0800b4bb
 800b418:	0800b4bb 	.word	0x0800b4bb
 800b41c:	0800b4bb 	.word	0x0800b4bb
 800b420:	0800b4bb 	.word	0x0800b4bb
 800b424:	0800b4bb 	.word	0x0800b4bb
 800b428:	0800b4bb 	.word	0x0800b4bb
 800b42c:	0800b4bb 	.word	0x0800b4bb
 800b430:	0800b4bb 	.word	0x0800b4bb
 800b434:	0800b4bb 	.word	0x0800b4bb
 800b438:	0800b4bb 	.word	0x0800b4bb
 800b43c:	0800b4bb 	.word	0x0800b4bb
 800b440:	0800b4bb 	.word	0x0800b4bb
 800b444:	0800b4bb 	.word	0x0800b4bb
 800b448:	0800b4bb 	.word	0x0800b4bb
 800b44c:	0800b4ad 	.word	0x0800b4ad
 800b450:	2b40      	cmp	r3, #64	@ 0x40
 800b452:	d02e      	beq.n	800b4b2 <UART_SetConfig+0xab2>
 800b454:	e031      	b.n	800b4ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b456:	f7fc fcff 	bl	8007e58 <HAL_RCC_GetPCLK1Freq>
 800b45a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b45c:	e033      	b.n	800b4c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b45e:	f7fc fd11 	bl	8007e84 <HAL_RCC_GetPCLK2Freq>
 800b462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b464:	e02f      	b.n	800b4c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fd ff36 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b474:	e027      	b.n	800b4c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b476:	f107 0318 	add.w	r3, r7, #24
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe f882 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b484:	e01f      	b.n	800b4c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b486:	4b69      	ldr	r3, [pc, #420]	@ (800b62c <UART_SetConfig+0xc2c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0320 	and.w	r3, r3, #32
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d009      	beq.n	800b4a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b492:	4b66      	ldr	r3, [pc, #408]	@ (800b62c <UART_SetConfig+0xc2c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	08db      	lsrs	r3, r3, #3
 800b498:	f003 0303 	and.w	r3, r3, #3
 800b49c:	4a64      	ldr	r2, [pc, #400]	@ (800b630 <UART_SetConfig+0xc30>)
 800b49e:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a4:	e00f      	b.n	800b4c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b4a6:	4b62      	ldr	r3, [pc, #392]	@ (800b630 <UART_SetConfig+0xc30>)
 800b4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4aa:	e00c      	b.n	800b4c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4ac:	4b61      	ldr	r3, [pc, #388]	@ (800b634 <UART_SetConfig+0xc34>)
 800b4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b0:	e009      	b.n	800b4c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b8:	e005      	b.n	800b4c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b4c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 80ea 	beq.w	800b6a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d2:	4a55      	ldr	r2, [pc, #340]	@ (800b628 <UART_SetConfig+0xc28>)
 800b4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e0:	005a      	lsls	r2, r3, #1
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	085b      	lsrs	r3, r3, #1
 800b4e8:	441a      	add	r2, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d916      	bls.n	800b528 <UART_SetConfig+0xb28>
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b500:	d212      	bcs.n	800b528 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b504:	b29b      	uxth	r3, r3
 800b506:	f023 030f 	bic.w	r3, r3, #15
 800b50a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50e:	085b      	lsrs	r3, r3, #1
 800b510:	b29b      	uxth	r3, r3
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	b29a      	uxth	r2, r3
 800b518:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b51a:	4313      	orrs	r3, r2
 800b51c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b524:	60da      	str	r2, [r3, #12]
 800b526:	e0bc      	b.n	800b6a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b52e:	e0b8      	b.n	800b6a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b530:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b534:	2b20      	cmp	r3, #32
 800b536:	dc4b      	bgt.n	800b5d0 <UART_SetConfig+0xbd0>
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f2c0 8087 	blt.w	800b64c <UART_SetConfig+0xc4c>
 800b53e:	2b20      	cmp	r3, #32
 800b540:	f200 8084 	bhi.w	800b64c <UART_SetConfig+0xc4c>
 800b544:	a201      	add	r2, pc, #4	@ (adr r2, 800b54c <UART_SetConfig+0xb4c>)
 800b546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54a:	bf00      	nop
 800b54c:	0800b5d7 	.word	0x0800b5d7
 800b550:	0800b5df 	.word	0x0800b5df
 800b554:	0800b64d 	.word	0x0800b64d
 800b558:	0800b64d 	.word	0x0800b64d
 800b55c:	0800b5e7 	.word	0x0800b5e7
 800b560:	0800b64d 	.word	0x0800b64d
 800b564:	0800b64d 	.word	0x0800b64d
 800b568:	0800b64d 	.word	0x0800b64d
 800b56c:	0800b5f7 	.word	0x0800b5f7
 800b570:	0800b64d 	.word	0x0800b64d
 800b574:	0800b64d 	.word	0x0800b64d
 800b578:	0800b64d 	.word	0x0800b64d
 800b57c:	0800b64d 	.word	0x0800b64d
 800b580:	0800b64d 	.word	0x0800b64d
 800b584:	0800b64d 	.word	0x0800b64d
 800b588:	0800b64d 	.word	0x0800b64d
 800b58c:	0800b607 	.word	0x0800b607
 800b590:	0800b64d 	.word	0x0800b64d
 800b594:	0800b64d 	.word	0x0800b64d
 800b598:	0800b64d 	.word	0x0800b64d
 800b59c:	0800b64d 	.word	0x0800b64d
 800b5a0:	0800b64d 	.word	0x0800b64d
 800b5a4:	0800b64d 	.word	0x0800b64d
 800b5a8:	0800b64d 	.word	0x0800b64d
 800b5ac:	0800b64d 	.word	0x0800b64d
 800b5b0:	0800b64d 	.word	0x0800b64d
 800b5b4:	0800b64d 	.word	0x0800b64d
 800b5b8:	0800b64d 	.word	0x0800b64d
 800b5bc:	0800b64d 	.word	0x0800b64d
 800b5c0:	0800b64d 	.word	0x0800b64d
 800b5c4:	0800b64d 	.word	0x0800b64d
 800b5c8:	0800b64d 	.word	0x0800b64d
 800b5cc:	0800b63f 	.word	0x0800b63f
 800b5d0:	2b40      	cmp	r3, #64	@ 0x40
 800b5d2:	d037      	beq.n	800b644 <UART_SetConfig+0xc44>
 800b5d4:	e03a      	b.n	800b64c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5d6:	f7fc fc3f 	bl	8007e58 <HAL_RCC_GetPCLK1Freq>
 800b5da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5dc:	e03c      	b.n	800b658 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5de:	f7fc fc51 	bl	8007e84 <HAL_RCC_GetPCLK2Freq>
 800b5e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5e4:	e038      	b.n	800b658 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fd fe76 	bl	80092dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f4:	e030      	b.n	800b658 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5f6:	f107 0318 	add.w	r3, r7, #24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fd ffc2 	bl	8009584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b604:	e028      	b.n	800b658 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b606:	4b09      	ldr	r3, [pc, #36]	@ (800b62c <UART_SetConfig+0xc2c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0320 	and.w	r3, r3, #32
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d012      	beq.n	800b638 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b612:	4b06      	ldr	r3, [pc, #24]	@ (800b62c <UART_SetConfig+0xc2c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	08db      	lsrs	r3, r3, #3
 800b618:	f003 0303 	and.w	r3, r3, #3
 800b61c:	4a04      	ldr	r2, [pc, #16]	@ (800b630 <UART_SetConfig+0xc30>)
 800b61e:	fa22 f303 	lsr.w	r3, r2, r3
 800b622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b624:	e018      	b.n	800b658 <UART_SetConfig+0xc58>
 800b626:	bf00      	nop
 800b628:	08010558 	.word	0x08010558
 800b62c:	58024400 	.word	0x58024400
 800b630:	03d09000 	.word	0x03d09000
 800b634:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b638:	4b24      	ldr	r3, [pc, #144]	@ (800b6cc <UART_SetConfig+0xccc>)
 800b63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63c:	e00c      	b.n	800b658 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b63e:	4b24      	ldr	r3, [pc, #144]	@ (800b6d0 <UART_SetConfig+0xcd0>)
 800b640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b642:	e009      	b.n	800b658 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b64a:	e005      	b.n	800b658 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b656:	bf00      	nop
    }

    if (pclk != 0U)
 800b658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d021      	beq.n	800b6a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b662:	4a1c      	ldr	r2, [pc, #112]	@ (800b6d4 <UART_SetConfig+0xcd4>)
 800b664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b668:	461a      	mov	r2, r3
 800b66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	085b      	lsrs	r3, r3, #1
 800b676:	441a      	add	r2, r3
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b680:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b684:	2b0f      	cmp	r3, #15
 800b686:	d909      	bls.n	800b69c <UART_SetConfig+0xc9c>
 800b688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b68e:	d205      	bcs.n	800b69c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b692:	b29a      	uxth	r2, r3
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60da      	str	r2, [r3, #12]
 800b69a:	e002      	b.n	800b6a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b6be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3748      	adds	r7, #72	@ 0x48
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6cc:	03d09000 	.word	0x03d09000
 800b6d0:	003d0900 	.word	0x003d0900
 800b6d4:	08010558 	.word	0x08010558

0800b6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e4:	f003 0308 	and.w	r3, r3, #8
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00a      	beq.n	800b702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	430a      	orrs	r2, r1
 800b700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00a      	beq.n	800b724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	430a      	orrs	r2, r1
 800b722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b728:	f003 0302 	and.w	r3, r3, #2
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00a      	beq.n	800b746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76c:	f003 0310 	and.w	r3, r3, #16
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00a      	beq.n	800b78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d01a      	beq.n	800b7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7d6:	d10a      	bne.n	800b7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00a      	beq.n	800b810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	430a      	orrs	r2, r1
 800b80e:	605a      	str	r2, [r3, #4]
  }
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b098      	sub	sp, #96	@ 0x60
 800b820:	af02      	add	r7, sp, #8
 800b822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b82c:	f7f5 fea0 	bl	8001570 <HAL_GetTick>
 800b830:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0308 	and.w	r3, r3, #8
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d12f      	bne.n	800b8a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b848:	2200      	movs	r2, #0
 800b84a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f88e 	bl	800b970 <UART_WaitOnFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d022      	beq.n	800b8a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b86e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	461a      	mov	r2, r3
 800b876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b878:	647b      	str	r3, [r7, #68]	@ 0x44
 800b87a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b87e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e6      	bne.n	800b85a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2220      	movs	r2, #32
 800b890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e063      	b.n	800b968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f003 0304 	and.w	r3, r3, #4
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d149      	bne.n	800b942 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f857 	bl	800b970 <UART_WaitOnFlagUntilTimeout>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d03c      	beq.n	800b942 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d0:	e853 3f00 	ldrex	r3, [r3]
 800b8d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e6      	bne.n	800b8c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3308      	adds	r3, #8
 800b900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	60fb      	str	r3, [r7, #12]
   return(result);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f023 0301 	bic.w	r3, r3, #1
 800b910:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3308      	adds	r3, #8
 800b918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b91a:	61fa      	str	r2, [r7, #28]
 800b91c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	69b9      	ldr	r1, [r7, #24]
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	617b      	str	r3, [r7, #20]
   return(result);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e5      	bne.n	800b8fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e012      	b.n	800b968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2220      	movs	r2, #32
 800b946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3758      	adds	r7, #88	@ 0x58
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	603b      	str	r3, [r7, #0]
 800b97c:	4613      	mov	r3, r2
 800b97e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b980:	e04f      	b.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d04b      	beq.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b98a:	f7f5 fdf1 	bl	8001570 <HAL_GetTick>
 800b98e:	4602      	mov	r2, r0
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	69ba      	ldr	r2, [r7, #24]
 800b996:	429a      	cmp	r2, r3
 800b998:	d302      	bcc.n	800b9a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e04e      	b.n	800ba42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0304 	and.w	r3, r3, #4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d037      	beq.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2b80      	cmp	r3, #128	@ 0x80
 800b9b6:	d034      	beq.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b40      	cmp	r3, #64	@ 0x40
 800b9bc:	d031      	beq.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	f003 0308 	and.w	r3, r3, #8
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d110      	bne.n	800b9ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 f839 	bl	800ba4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2208      	movs	r2, #8
 800b9de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e029      	b.n	800ba42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9fc:	d111      	bne.n	800ba22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f81f 	bl	800ba4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2220      	movs	r2, #32
 800ba12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e00f      	b.n	800ba42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69da      	ldr	r2, [r3, #28]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	bf0c      	ite	eq
 800ba32:	2301      	moveq	r3, #1
 800ba34:	2300      	movne	r3, #0
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d0a0      	beq.n	800b982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b095      	sub	sp, #84	@ 0x54
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba72:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba7a:	e841 2300 	strex	r3, r2, [r1]
 800ba7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e6      	bne.n	800ba54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	e853 3f00 	ldrex	r3, [r3]
 800ba94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	4b1e      	ldr	r3, [pc, #120]	@ (800bb14 <UART_EndRxTransfer+0xc8>)
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3308      	adds	r3, #8
 800baa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800baa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800baa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800baac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e5      	bne.n	800ba86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d118      	bne.n	800baf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	e853 3f00 	ldrex	r3, [r3]
 800bace:	60bb      	str	r3, [r7, #8]
   return(result);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f023 0310 	bic.w	r3, r3, #16
 800bad6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	461a      	mov	r2, r3
 800bade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bae0:	61bb      	str	r3, [r7, #24]
 800bae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae4:	6979      	ldr	r1, [r7, #20]
 800bae6:	69ba      	ldr	r2, [r7, #24]
 800bae8:	e841 2300 	strex	r3, r2, [r1]
 800baec:	613b      	str	r3, [r7, #16]
   return(result);
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1e6      	bne.n	800bac2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2220      	movs	r2, #32
 800baf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb08:	bf00      	nop
 800bb0a:	3754      	adds	r7, #84	@ 0x54
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	effffffe 	.word	0xeffffffe

0800bb18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f7fe ff4c 	bl	800a9d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	e853 3f00 	ldrex	r3, [r3]
 800bb58:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb60:	61fb      	str	r3, [r7, #28]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	461a      	mov	r2, r3
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	61bb      	str	r3, [r7, #24]
 800bb6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6e:	6979      	ldr	r1, [r7, #20]
 800bb70:	69ba      	ldr	r2, [r7, #24]
 800bb72:	e841 2300 	strex	r3, r2, [r1]
 800bb76:	613b      	str	r3, [r7, #16]
   return(result);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1e6      	bne.n	800bb4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2220      	movs	r2, #32
 800bb82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7fe ff17 	bl	800a9c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb92:	bf00      	nop
 800bb94:	3720      	adds	r7, #32
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bba2:	bf00      	nop
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bbca:	bf00      	nop
 800bbcc:	370c      	adds	r7, #12
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b085      	sub	sp, #20
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_UARTEx_DisableFifoMode+0x16>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e027      	b.n	800bc3c <HAL_UARTEx_DisableFifoMode+0x66>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2224      	movs	r2, #36	@ 0x24
 800bbf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0201 	bic.w	r2, r2, #1
 800bc12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e02d      	b.n	800bcbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2224      	movs	r2, #36	@ 0x24
 800bc6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0201 	bic.w	r2, r2, #1
 800bc86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f84f 	bl	800bd40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d101      	bne.n	800bcdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcd8:	2302      	movs	r3, #2
 800bcda:	e02d      	b.n	800bd38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2224      	movs	r2, #36	@ 0x24
 800bce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0201 	bic.w	r2, r2, #1
 800bd02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	430a      	orrs	r2, r1
 800bd16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f811 	bl	800bd40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d108      	bne.n	800bd62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd60:	e031      	b.n	800bdc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd62:	2310      	movs	r3, #16
 800bd64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd66:	2310      	movs	r3, #16
 800bd68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	0e5b      	lsrs	r3, r3, #25
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	f003 0307 	and.w	r3, r3, #7
 800bd78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	0f5b      	lsrs	r3, r3, #29
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	f003 0307 	and.w	r3, r3, #7
 800bd88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	7b3a      	ldrb	r2, [r7, #12]
 800bd8e:	4911      	ldr	r1, [pc, #68]	@ (800bdd4 <UARTEx_SetNbDataToProcess+0x94>)
 800bd90:	5c8a      	ldrb	r2, [r1, r2]
 800bd92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd96:	7b3a      	ldrb	r2, [r7, #12]
 800bd98:	490f      	ldr	r1, [pc, #60]	@ (800bdd8 <UARTEx_SetNbDataToProcess+0x98>)
 800bd9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	7b7a      	ldrb	r2, [r7, #13]
 800bdac:	4909      	ldr	r1, [pc, #36]	@ (800bdd4 <UARTEx_SetNbDataToProcess+0x94>)
 800bdae:	5c8a      	ldrb	r2, [r1, r2]
 800bdb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bdb4:	7b7a      	ldrb	r2, [r7, #13]
 800bdb6:	4908      	ldr	r1, [pc, #32]	@ (800bdd8 <UARTEx_SetNbDataToProcess+0x98>)
 800bdb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdba:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bdc6:	bf00      	nop
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	08010570 	.word	0x08010570
 800bdd8:	08010578 	.word	0x08010578

0800bddc <__NVIC_SetPriority>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bde8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	db0a      	blt.n	800be06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	490c      	ldr	r1, [pc, #48]	@ (800be28 <__NVIC_SetPriority+0x4c>)
 800bdf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdfa:	0112      	lsls	r2, r2, #4
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	440b      	add	r3, r1
 800be00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800be04:	e00a      	b.n	800be1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	4908      	ldr	r1, [pc, #32]	@ (800be2c <__NVIC_SetPriority+0x50>)
 800be0c:	88fb      	ldrh	r3, [r7, #6]
 800be0e:	f003 030f 	and.w	r3, r3, #15
 800be12:	3b04      	subs	r3, #4
 800be14:	0112      	lsls	r2, r2, #4
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	440b      	add	r3, r1
 800be1a:	761a      	strb	r2, [r3, #24]
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	e000e100 	.word	0xe000e100
 800be2c:	e000ed00 	.word	0xe000ed00

0800be30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be34:	4b05      	ldr	r3, [pc, #20]	@ (800be4c <SysTick_Handler+0x1c>)
 800be36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be38:	f002 f826 	bl	800de88 <xTaskGetSchedulerState>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d001      	beq.n	800be46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be42:	f002 ff21 	bl	800ec88 <xPortSysTickHandler>
  }
}
 800be46:	bf00      	nop
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	e000e010 	.word	0xe000e010

0800be50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be54:	2100      	movs	r1, #0
 800be56:	f06f 0004 	mvn.w	r0, #4
 800be5a:	f7ff ffbf 	bl	800bddc <__NVIC_SetPriority>
#endif
}
 800be5e:	bf00      	nop
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6a:	f3ef 8305 	mrs	r3, IPSR
 800be6e:	603b      	str	r3, [r7, #0]
  return(result);
 800be70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be76:	f06f 0305 	mvn.w	r3, #5
 800be7a:	607b      	str	r3, [r7, #4]
 800be7c:	e00c      	b.n	800be98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be7e:	4b0a      	ldr	r3, [pc, #40]	@ (800bea8 <osKernelInitialize+0x44>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be86:	4b08      	ldr	r3, [pc, #32]	@ (800bea8 <osKernelInitialize+0x44>)
 800be88:	2201      	movs	r2, #1
 800be8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	607b      	str	r3, [r7, #4]
 800be90:	e002      	b.n	800be98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be92:	f04f 33ff 	mov.w	r3, #4294967295
 800be96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be98:	687b      	ldr	r3, [r7, #4]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	240002d4 	.word	0x240002d4

0800beac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beb2:	f3ef 8305 	mrs	r3, IPSR
 800beb6:	603b      	str	r3, [r7, #0]
  return(result);
 800beb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bebe:	f06f 0305 	mvn.w	r3, #5
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	e010      	b.n	800bee8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bec6:	4b0b      	ldr	r3, [pc, #44]	@ (800bef4 <osKernelStart+0x48>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d109      	bne.n	800bee2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bece:	f7ff ffbf 	bl	800be50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bed2:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <osKernelStart+0x48>)
 800bed4:	2202      	movs	r2, #2
 800bed6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bed8:	f001 faba 	bl	800d450 <vTaskStartScheduler>
      stat = osOK;
 800bedc:	2300      	movs	r3, #0
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	e002      	b.n	800bee8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bee2:	f04f 33ff 	mov.w	r3, #4294967295
 800bee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bee8:	687b      	ldr	r3, [r7, #4]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	240002d4 	.word	0x240002d4

0800bef8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08e      	sub	sp, #56	@ 0x38
 800befc:	af04      	add	r7, sp, #16
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf08:	f3ef 8305 	mrs	r3, IPSR
 800bf0c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d17e      	bne.n	800c012 <osThreadNew+0x11a>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d07b      	beq.n	800c012 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf1a:	2380      	movs	r3, #128	@ 0x80
 800bf1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf1e:	2318      	movs	r3, #24
 800bf20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d045      	beq.n	800bfbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <osThreadNew+0x48>
        name = attr->name;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <osThreadNew+0x6e>
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	2b38      	cmp	r3, #56	@ 0x38
 800bf58:	d805      	bhi.n	800bf66 <osThreadNew+0x6e>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <osThreadNew+0x72>
        return (NULL);
 800bf66:	2300      	movs	r3, #0
 800bf68:	e054      	b.n	800c014 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	089b      	lsrs	r3, r3, #2
 800bf78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <osThreadNew+0xa8>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2ba7      	cmp	r3, #167	@ 0xa7
 800bf88:	d90a      	bls.n	800bfa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d006      	beq.n	800bfa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <osThreadNew+0xa8>
        mem = 1;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	e010      	b.n	800bfc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10c      	bne.n	800bfc2 <osThreadNew+0xca>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d108      	bne.n	800bfc2 <osThreadNew+0xca>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <osThreadNew+0xca>
          mem = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	e001      	b.n	800bfc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d110      	bne.n	800bfea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfd0:	9202      	str	r2, [sp, #8]
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	6a3a      	ldr	r2, [r7, #32]
 800bfdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f001 f842 	bl	800d068 <xTaskCreateStatic>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	e013      	b.n	800c012 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d110      	bne.n	800c012 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	f107 0310 	add.w	r3, r7, #16
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f001 f890 	bl	800d128 <xTaskCreate>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d001      	beq.n	800c012 <osThreadNew+0x11a>
            hTask = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c012:	693b      	ldr	r3, [r7, #16]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3728      	adds	r7, #40	@ 0x28
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c024:	f3ef 8305 	mrs	r3, IPSR
 800c028:	60bb      	str	r3, [r7, #8]
  return(result);
 800c02a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <osDelay+0x1c>
    stat = osErrorISR;
 800c030:	f06f 0305 	mvn.w	r3, #5
 800c034:	60fb      	str	r3, [r7, #12]
 800c036:	e007      	b.n	800c048 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 f9ce 	bl	800d3e4 <vTaskDelay>
    }
  }

  return (stat);
 800c048:	68fb      	ldr	r3, [r7, #12]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4a07      	ldr	r2, [pc, #28]	@ (800c080 <vApplicationGetIdleTaskMemory+0x2c>)
 800c064:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	4a06      	ldr	r2, [pc, #24]	@ (800c084 <vApplicationGetIdleTaskMemory+0x30>)
 800c06a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2280      	movs	r2, #128	@ 0x80
 800c070:	601a      	str	r2, [r3, #0]
}
 800c072:	bf00      	nop
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	240002d8 	.word	0x240002d8
 800c084:	24000380 	.word	0x24000380

0800c088 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4a07      	ldr	r2, [pc, #28]	@ (800c0b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c098:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	4a06      	ldr	r2, [pc, #24]	@ (800c0b8 <vApplicationGetTimerTaskMemory+0x30>)
 800c09e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c0a6:	601a      	str	r2, [r3, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	24000580 	.word	0x24000580
 800c0b8:	24000628 	.word	0x24000628

0800c0bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f103 0208 	add.w	r2, r3, #8
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f103 0208 	add.w	r2, r3, #8
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f103 0208 	add.w	r2, r3, #8
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c10a:	bf00      	nop
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c116:	b480      	push	{r7}
 800c118:	b085      	sub	sp, #20
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	689a      	ldr	r2, [r3, #8]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
}
 800c152:	bf00      	nop
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c15e:	b480      	push	{r7}
 800c160:	b085      	sub	sp, #20
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d103      	bne.n	800c17e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	e00c      	b.n	800c198 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	3308      	adds	r3, #8
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	e002      	b.n	800c18c <vListInsert+0x2e>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	60fb      	str	r3, [r7, #12]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	429a      	cmp	r2, r3
 800c196:	d2f6      	bcs.n	800c186 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	601a      	str	r2, [r3, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	6892      	ldr	r2, [r2, #8]
 800c1e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	6852      	ldr	r2, [r2, #4]
 800c1f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d103      	bne.n	800c204 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	1e5a      	subs	r2, r3, #1
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10b      	bne.n	800c250 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c24a:	bf00      	nop
 800c24c:	bf00      	nop
 800c24e:	e7fd      	b.n	800c24c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c250:	f002 fc8a 	bl	800eb68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25c:	68f9      	ldr	r1, [r7, #12]
 800c25e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c260:	fb01 f303 	mul.w	r3, r1, r3
 800c264:	441a      	add	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c280:	3b01      	subs	r3, #1
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c286:	fb01 f303 	mul.w	r3, r1, r3
 800c28a:	441a      	add	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	22ff      	movs	r2, #255	@ 0xff
 800c294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	22ff      	movs	r2, #255	@ 0xff
 800c29c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d114      	bne.n	800c2d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d01a      	beq.n	800c2e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3310      	adds	r3, #16
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f001 fbca 	bl	800da4c <xTaskRemoveFromEventList>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d012      	beq.n	800c2e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c2be:	4b0d      	ldr	r3, [pc, #52]	@ (800c2f4 <xQueueGenericReset+0xd0>)
 800c2c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	e009      	b.n	800c2e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3310      	adds	r3, #16
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff fef1 	bl	800c0bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3324      	adds	r3, #36	@ 0x24
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7ff feec 	bl	800c0bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c2e4:	f002 fc72 	bl	800ebcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c2e8:	2301      	movs	r3, #1
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08e      	sub	sp, #56	@ 0x38
 800c2fc:	af02      	add	r7, sp, #8
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10b      	bne.n	800c324 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c31e:	bf00      	nop
 800c320:	bf00      	nop
 800c322:	e7fd      	b.n	800c320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c33c:	bf00      	nop
 800c33e:	bf00      	nop
 800c340:	e7fd      	b.n	800c33e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <xQueueGenericCreateStatic+0x56>
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <xQueueGenericCreateStatic+0x5a>
 800c34e:	2301      	movs	r3, #1
 800c350:	e000      	b.n	800c354 <xQueueGenericCreateStatic+0x5c>
 800c352:	2300      	movs	r3, #0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10b      	bne.n	800c370 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	623b      	str	r3, [r7, #32]
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	e7fd      	b.n	800c36c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d102      	bne.n	800c37c <xQueueGenericCreateStatic+0x84>
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <xQueueGenericCreateStatic+0x88>
 800c37c:	2301      	movs	r3, #1
 800c37e:	e000      	b.n	800c382 <xQueueGenericCreateStatic+0x8a>
 800c380:	2300      	movs	r3, #0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10b      	bne.n	800c39e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	61fb      	str	r3, [r7, #28]
}
 800c398:	bf00      	nop
 800c39a:	bf00      	nop
 800c39c:	e7fd      	b.n	800c39a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c39e:	2350      	movs	r3, #80	@ 0x50
 800c3a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b50      	cmp	r3, #80	@ 0x50
 800c3a6:	d00b      	beq.n	800c3c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	61bb      	str	r3, [r7, #24]
}
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00d      	beq.n	800c3e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 f840 	bl	800c468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3730      	adds	r7, #48	@ 0x30
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b08a      	sub	sp, #40	@ 0x28
 800c3f6:	af02      	add	r7, sp, #8
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10b      	bne.n	800c41e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	613b      	str	r3, [r7, #16]
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	e7fd      	b.n	800c41a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	fb02 f303 	mul.w	r3, r2, r3
 800c426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	3350      	adds	r3, #80	@ 0x50
 800c42c:	4618      	mov	r0, r3
 800c42e:	f002 fda1 	bl	800ef74 <pvPortMalloc>
 800c432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d011      	beq.n	800c45e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	3350      	adds	r3, #80	@ 0x50
 800c442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c44c:	79fa      	ldrb	r2, [r7, #7]
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	4613      	mov	r3, r2
 800c454:	697a      	ldr	r2, [r7, #20]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 f805 	bl	800c468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c45e:	69bb      	ldr	r3, [r7, #24]
	}
 800c460:	4618      	mov	r0, r3
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d103      	bne.n	800c484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	e002      	b.n	800c48a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c496:	2101      	movs	r1, #1
 800c498:	69b8      	ldr	r0, [r7, #24]
 800c49a:	f7ff fec3 	bl	800c224 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	78fa      	ldrb	r2, [r7, #3]
 800c4a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b086      	sub	sp, #24
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10b      	bne.n	800c4d6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	613b      	str	r3, [r7, #16]
}
 800c4d0:	bf00      	nop
 800c4d2:	bf00      	nop
 800c4d4:	e7fd      	b.n	800c4d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d90b      	bls.n	800c4f6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	60fb      	str	r3, [r7, #12]
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	e7fd      	b.n	800c4f2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ff79 	bl	800c3f2 <xQueueGenericCreate>
 800c500:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c50e:	697b      	ldr	r3, [r7, #20]
	}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08e      	sub	sp, #56	@ 0x38
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c526:	2300      	movs	r3, #0
 800c528:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10b      	bne.n	800c54c <xQueueGenericSend+0x34>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	e7fd      	b.n	800c548 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d103      	bne.n	800c55a <xQueueGenericSend+0x42>
 800c552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <xQueueGenericSend+0x46>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e000      	b.n	800c560 <xQueueGenericSend+0x48>
 800c55e:	2300      	movs	r3, #0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10b      	bne.n	800c57c <xQueueGenericSend+0x64>
	__asm volatile
 800c564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c576:	bf00      	nop
 800c578:	bf00      	nop
 800c57a:	e7fd      	b.n	800c578 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d103      	bne.n	800c58a <xQueueGenericSend+0x72>
 800c582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c586:	2b01      	cmp	r3, #1
 800c588:	d101      	bne.n	800c58e <xQueueGenericSend+0x76>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e000      	b.n	800c590 <xQueueGenericSend+0x78>
 800c58e:	2300      	movs	r3, #0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10b      	bne.n	800c5ac <xQueueGenericSend+0x94>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	623b      	str	r3, [r7, #32]
}
 800c5a6:	bf00      	nop
 800c5a8:	bf00      	nop
 800c5aa:	e7fd      	b.n	800c5a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5ac:	f001 fc6c 	bl	800de88 <xTaskGetSchedulerState>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <xQueueGenericSend+0xa4>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <xQueueGenericSend+0xa8>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e000      	b.n	800c5c2 <xQueueGenericSend+0xaa>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10b      	bne.n	800c5de <xQueueGenericSend+0xc6>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	61fb      	str	r3, [r7, #28]
}
 800c5d8:	bf00      	nop
 800c5da:	bf00      	nop
 800c5dc:	e7fd      	b.n	800c5da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5de:	f002 fac3 	bl	800eb68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d302      	bcc.n	800c5f4 <xQueueGenericSend+0xdc>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d129      	bne.n	800c648 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5fa:	f000 fbc7 	bl	800cd8c <prvCopyDataToQueue>
 800c5fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	d010      	beq.n	800c62a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	3324      	adds	r3, #36	@ 0x24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 fa1d 	bl	800da4c <xTaskRemoveFromEventList>
 800c612:	4603      	mov	r3, r0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d013      	beq.n	800c640 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c618:	4b3f      	ldr	r3, [pc, #252]	@ (800c718 <xQueueGenericSend+0x200>)
 800c61a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	e00a      	b.n	800c640 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d007      	beq.n	800c640 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c630:	4b39      	ldr	r3, [pc, #228]	@ (800c718 <xQueueGenericSend+0x200>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c640:	f002 fac4 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800c644:	2301      	movs	r3, #1
 800c646:	e063      	b.n	800c710 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d103      	bne.n	800c656 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c64e:	f002 fabd 	bl	800ebcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c652:	2300      	movs	r3, #0
 800c654:	e05c      	b.n	800c710 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c65c:	f107 0314 	add.w	r3, r7, #20
 800c660:	4618      	mov	r0, r3
 800c662:	f001 fa59 	bl	800db18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c66a:	f002 faaf 	bl	800ebcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c66e:	f000 ff5f 	bl	800d530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c672:	f002 fa79 	bl	800eb68 <vPortEnterCritical>
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c67c:	b25b      	sxtb	r3, r3
 800c67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c682:	d103      	bne.n	800c68c <xQueueGenericSend+0x174>
 800c684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c692:	b25b      	sxtb	r3, r3
 800c694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c698:	d103      	bne.n	800c6a2 <xQueueGenericSend+0x18a>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6a2:	f002 fa93 	bl	800ebcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6a6:	1d3a      	adds	r2, r7, #4
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 fa48 	bl	800db44 <xTaskCheckForTimeOut>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d124      	bne.n	800c704 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6bc:	f000 fc5e 	bl	800cf7c <prvIsQueueFull>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d018      	beq.n	800c6f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c8:	3310      	adds	r3, #16
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 f96a 	bl	800d9a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6d6:	f000 fbe9 	bl	800ceac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6da:	f000 ff6f 	bl	800d5bc <xTaskResumeAll>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f47f af7c 	bne.w	800c5de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c718 <xQueueGenericSend+0x200>)
 800c6e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	e772      	b.n	800c5de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c6f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6fa:	f000 fbd7 	bl	800ceac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6fe:	f000 ff5d 	bl	800d5bc <xTaskResumeAll>
 800c702:	e76c      	b.n	800c5de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c706:	f000 fbd1 	bl	800ceac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c70a:	f000 ff57 	bl	800d5bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c70e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c710:	4618      	mov	r0, r3
 800c712:	3738      	adds	r7, #56	@ 0x38
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b090      	sub	sp, #64	@ 0x40
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10b      	bne.n	800c74c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c746:	bf00      	nop
 800c748:	bf00      	nop
 800c74a:	e7fd      	b.n	800c748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <xQueueGenericSendFromISR+0x3e>
 800c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <xQueueGenericSendFromISR+0x42>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e000      	b.n	800c760 <xQueueGenericSendFromISR+0x44>
 800c75e:	2300      	movs	r3, #0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c776:	bf00      	nop
 800c778:	bf00      	nop
 800c77a:	e7fd      	b.n	800c778 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d103      	bne.n	800c78a <xQueueGenericSendFromISR+0x6e>
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c786:	2b01      	cmp	r3, #1
 800c788:	d101      	bne.n	800c78e <xQueueGenericSendFromISR+0x72>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e000      	b.n	800c790 <xQueueGenericSendFromISR+0x74>
 800c78e:	2300      	movs	r3, #0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10b      	bne.n	800c7ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	623b      	str	r3, [r7, #32]
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	e7fd      	b.n	800c7a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ac:	f002 fba0 	bl	800eef0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c7b0:	f3ef 8211 	mrs	r2, BASEPRI
 800c7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	61fa      	str	r2, [r7, #28]
 800c7c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d302      	bcc.n	800c7de <xQueueGenericSendFromISR+0xc2>
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d12f      	bne.n	800c83e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	68b9      	ldr	r1, [r7, #8]
 800c7f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7f4:	f000 faca 	bl	800cd8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c7f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c800:	d112      	bne.n	800c828 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	d016      	beq.n	800c838 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80c:	3324      	adds	r3, #36	@ 0x24
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 f91c 	bl	800da4c <xTaskRemoveFromEventList>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00e      	beq.n	800c838 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00b      	beq.n	800c838 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	e007      	b.n	800c838 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c828:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c82c:	3301      	adds	r3, #1
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	b25a      	sxtb	r2, r3
 800c832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c838:	2301      	movs	r3, #1
 800c83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c83c:	e001      	b.n	800c842 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c83e:	2300      	movs	r3, #0
 800c840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c844:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c84c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c850:	4618      	mov	r0, r3
 800c852:	3740      	adds	r7, #64	@ 0x40
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08e      	sub	sp, #56	@ 0x38
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10b      	bne.n	800c884 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	623b      	str	r3, [r7, #32]
}
 800c87e:	bf00      	nop
 800c880:	bf00      	nop
 800c882:	e7fd      	b.n	800c880 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00b      	beq.n	800c8a4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	61fb      	str	r3, [r7, #28]
}
 800c89e:	bf00      	nop
 800c8a0:	bf00      	nop
 800c8a2:	e7fd      	b.n	800c8a0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d103      	bne.n	800c8b4 <xQueueGiveFromISR+0x5c>
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <xQueueGiveFromISR+0x60>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <xQueueGiveFromISR+0x62>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10b      	bne.n	800c8d6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	61bb      	str	r3, [r7, #24]
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8d6:	f002 fb0b 	bl	800eef0 <vPortValidateInterruptPriority>
	__asm volatile
 800c8da:	f3ef 8211 	mrs	r2, BASEPRI
 800c8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	617a      	str	r2, [r7, #20]
 800c8f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c8f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c902:	429a      	cmp	r2, r3
 800c904:	d22b      	bcs.n	800c95e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c90c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c918:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c920:	d112      	bne.n	800c948 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c926:	2b00      	cmp	r3, #0
 800c928:	d016      	beq.n	800c958 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92c:	3324      	adds	r3, #36	@ 0x24
 800c92e:	4618      	mov	r0, r3
 800c930:	f001 f88c 	bl	800da4c <xTaskRemoveFromEventList>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00e      	beq.n	800c958 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00b      	beq.n	800c958 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2201      	movs	r2, #1
 800c944:	601a      	str	r2, [r3, #0]
 800c946:	e007      	b.n	800c958 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c94c:	3301      	adds	r3, #1
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	b25a      	sxtb	r2, r3
 800c952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c958:	2301      	movs	r3, #1
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c95c:	e001      	b.n	800c962 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c95e:	2300      	movs	r3, #0
 800c960:	637b      	str	r3, [r7, #52]	@ 0x34
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f383 8811 	msr	BASEPRI, r3
}
 800c96c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c970:	4618      	mov	r0, r3
 800c972:	3738      	adds	r7, #56	@ 0x38
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08c      	sub	sp, #48	@ 0x30
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c984:	2300      	movs	r3, #0
 800c986:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10b      	bne.n	800c9aa <xQueueReceive+0x32>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	623b      	str	r3, [r7, #32]
}
 800c9a4:	bf00      	nop
 800c9a6:	bf00      	nop
 800c9a8:	e7fd      	b.n	800c9a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d103      	bne.n	800c9b8 <xQueueReceive+0x40>
 800c9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <xQueueReceive+0x44>
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e000      	b.n	800c9be <xQueueReceive+0x46>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10b      	bne.n	800c9da <xQueueReceive+0x62>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	61fb      	str	r3, [r7, #28]
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop
 800c9d8:	e7fd      	b.n	800c9d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9da:	f001 fa55 	bl	800de88 <xTaskGetSchedulerState>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d102      	bne.n	800c9ea <xQueueReceive+0x72>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <xQueueReceive+0x76>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <xQueueReceive+0x78>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10b      	bne.n	800ca0c <xQueueReceive+0x94>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	61bb      	str	r3, [r7, #24]
}
 800ca06:	bf00      	nop
 800ca08:	bf00      	nop
 800ca0a:	e7fd      	b.n	800ca08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca0c:	f002 f8ac 	bl	800eb68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d01f      	beq.n	800ca5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca1c:	68b9      	ldr	r1, [r7, #8]
 800ca1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca20:	f000 fa1e 	bl	800ce60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca26:	1e5a      	subs	r2, r3, #1
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00f      	beq.n	800ca54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca36:	3310      	adds	r3, #16
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f001 f807 	bl	800da4c <xTaskRemoveFromEventList>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d007      	beq.n	800ca54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca44:	4b3c      	ldr	r3, [pc, #240]	@ (800cb38 <xQueueReceive+0x1c0>)
 800ca46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca54:	f002 f8ba 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e069      	b.n	800cb30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca62:	f002 f8b3 	bl	800ebcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca66:	2300      	movs	r3, #0
 800ca68:	e062      	b.n	800cb30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d106      	bne.n	800ca7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca70:	f107 0310 	add.w	r3, r7, #16
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 f84f 	bl	800db18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca7e:	f002 f8a5 	bl	800ebcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca82:	f000 fd55 	bl	800d530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca86:	f002 f86f 	bl	800eb68 <vPortEnterCritical>
 800ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca90:	b25b      	sxtb	r3, r3
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d103      	bne.n	800caa0 <xQueueReceive+0x128>
 800ca98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caa6:	b25b      	sxtb	r3, r3
 800caa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caac:	d103      	bne.n	800cab6 <xQueueReceive+0x13e>
 800caae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cab6:	f002 f889 	bl	800ebcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caba:	1d3a      	adds	r2, r7, #4
 800cabc:	f107 0310 	add.w	r3, r7, #16
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 f83e 	bl	800db44 <xTaskCheckForTimeOut>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d123      	bne.n	800cb16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad0:	f000 fa3e 	bl	800cf50 <prvIsQueueEmpty>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d017      	beq.n	800cb0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cadc:	3324      	adds	r3, #36	@ 0x24
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 ff60 	bl	800d9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caea:	f000 f9df 	bl	800ceac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800caee:	f000 fd65 	bl	800d5bc <xTaskResumeAll>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d189      	bne.n	800ca0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800caf8:	4b0f      	ldr	r3, [pc, #60]	@ (800cb38 <xQueueReceive+0x1c0>)
 800cafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	e780      	b.n	800ca0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb0c:	f000 f9ce 	bl	800ceac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb10:	f000 fd54 	bl	800d5bc <xTaskResumeAll>
 800cb14:	e77a      	b.n	800ca0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb18:	f000 f9c8 	bl	800ceac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb1c:	f000 fd4e 	bl	800d5bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb22:	f000 fa15 	bl	800cf50 <prvIsQueueEmpty>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f43f af6f 	beq.w	800ca0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3730      	adds	r7, #48	@ 0x30
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08e      	sub	sp, #56	@ 0x38
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb46:	2300      	movs	r3, #0
 800cb48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10b      	bne.n	800cb70 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	623b      	str	r3, [r7, #32]
}
 800cb6a:	bf00      	nop
 800cb6c:	bf00      	nop
 800cb6e:	e7fd      	b.n	800cb6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00b      	beq.n	800cb90 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7c:	f383 8811 	msr	BASEPRI, r3
 800cb80:	f3bf 8f6f 	isb	sy
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	61fb      	str	r3, [r7, #28]
}
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	e7fd      	b.n	800cb8c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb90:	f001 f97a 	bl	800de88 <xTaskGetSchedulerState>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d102      	bne.n	800cba0 <xQueueSemaphoreTake+0x64>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <xQueueSemaphoreTake+0x68>
 800cba0:	2301      	movs	r3, #1
 800cba2:	e000      	b.n	800cba6 <xQueueSemaphoreTake+0x6a>
 800cba4:	2300      	movs	r3, #0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10b      	bne.n	800cbc2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	61bb      	str	r3, [r7, #24]
}
 800cbbc:	bf00      	nop
 800cbbe:	bf00      	nop
 800cbc0:	e7fd      	b.n	800cbbe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbc2:	f001 ffd1 	bl	800eb68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d024      	beq.n	800cc1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd4:	1e5a      	subs	r2, r3, #1
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cbe2:	f001 facb 	bl	800e17c <pvTaskIncrementMutexHeldCount>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00f      	beq.n	800cc14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf6:	3310      	adds	r3, #16
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 ff27 	bl	800da4c <xTaskRemoveFromEventList>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d007      	beq.n	800cc14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc04:	4b54      	ldr	r3, [pc, #336]	@ (800cd58 <xQueueSemaphoreTake+0x21c>)
 800cc06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc14:	f001 ffda 	bl	800ebcc <vPortExitCritical>
				return pdPASS;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e098      	b.n	800cd4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d112      	bne.n	800cc48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00b      	beq.n	800cc40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	617b      	str	r3, [r7, #20]
}
 800cc3a:	bf00      	nop
 800cc3c:	bf00      	nop
 800cc3e:	e7fd      	b.n	800cc3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc40:	f001 ffc4 	bl	800ebcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc44:	2300      	movs	r3, #0
 800cc46:	e082      	b.n	800cd4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc4e:	f107 030c 	add.w	r3, r7, #12
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 ff60 	bl	800db18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc5c:	f001 ffb6 	bl	800ebcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc60:	f000 fc66 	bl	800d530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc64:	f001 ff80 	bl	800eb68 <vPortEnterCritical>
 800cc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc74:	d103      	bne.n	800cc7e <xQueueSemaphoreTake+0x142>
 800cc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d103      	bne.n	800cc94 <xQueueSemaphoreTake+0x158>
 800cc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc94:	f001 ff9a 	bl	800ebcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc98:	463a      	mov	r2, r7
 800cc9a:	f107 030c 	add.w	r3, r7, #12
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 ff4f 	bl	800db44 <xTaskCheckForTimeOut>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d132      	bne.n	800cd12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccae:	f000 f94f 	bl	800cf50 <prvIsQueueEmpty>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d026      	beq.n	800cd06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d109      	bne.n	800ccd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ccc0:	f001 ff52 	bl	800eb68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f001 f8fb 	bl	800dec4 <xTaskPriorityInherit>
 800ccce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ccd0:	f001 ff7c 	bl	800ebcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	3324      	adds	r3, #36	@ 0x24
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 fe63 	bl	800d9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cce4:	f000 f8e2 	bl	800ceac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cce8:	f000 fc68 	bl	800d5bc <xTaskResumeAll>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f47f af67 	bne.w	800cbc2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ccf4:	4b18      	ldr	r3, [pc, #96]	@ (800cd58 <xQueueSemaphoreTake+0x21c>)
 800ccf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	e75d      	b.n	800cbc2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd08:	f000 f8d0 	bl	800ceac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd0c:	f000 fc56 	bl	800d5bc <xTaskResumeAll>
 800cd10:	e757      	b.n	800cbc2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd14:	f000 f8ca 	bl	800ceac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd18:	f000 fc50 	bl	800d5bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd1e:	f000 f917 	bl	800cf50 <prvIsQueueEmpty>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f43f af4c 	beq.w	800cbc2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00d      	beq.n	800cd4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cd30:	f001 ff1a 	bl	800eb68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd36:	f000 f811 	bl	800cd5c <prvGetDisinheritPriorityAfterTimeout>
 800cd3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd42:	4618      	mov	r0, r3
 800cd44:	f001 f996 	bl	800e074 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd48:	f001 ff40 	bl	800ebcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3738      	adds	r7, #56	@ 0x38
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	e001      	b.n	800cd7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
	}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10d      	bne.n	800cdc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d14d      	bne.n	800ce4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f001 f8ec 	bl	800df94 <xTaskPriorityDisinherit>
 800cdbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	609a      	str	r2, [r3, #8]
 800cdc4:	e043      	b.n	800ce4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d119      	bne.n	800ce00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6858      	ldr	r0, [r3, #4]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	f002 fd2b 	bl	800f832 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cde4:	441a      	add	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d32b      	bcc.n	800ce4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	605a      	str	r2, [r3, #4]
 800cdfe:	e026      	b.n	800ce4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68d8      	ldr	r0, [r3, #12]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce08:	461a      	mov	r2, r3
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	f002 fd11 	bl	800f832 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	68da      	ldr	r2, [r3, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce18:	425b      	negs	r3, r3
 800ce1a:	441a      	add	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	68da      	ldr	r2, [r3, #12]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d207      	bcs.n	800ce3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce34:	425b      	negs	r3, r3
 800ce36:	441a      	add	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d105      	bne.n	800ce4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ce56:	697b      	ldr	r3, [r7, #20]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d018      	beq.n	800cea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	68da      	ldr	r2, [r3, #12]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7a:	441a      	add	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68da      	ldr	r2, [r3, #12]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d303      	bcc.n	800ce94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68d9      	ldr	r1, [r3, #12]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	6838      	ldr	r0, [r7, #0]
 800cea0:	f002 fcc7 	bl	800f832 <memcpy>
	}
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ceb4:	f001 fe58 	bl	800eb68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cec0:	e011      	b.n	800cee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d012      	beq.n	800cef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3324      	adds	r3, #36	@ 0x24
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 fdbc 	bl	800da4c <xTaskRemoveFromEventList>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ceda:	f000 fe97 	bl	800dc0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cede:	7bfb      	ldrb	r3, [r7, #15]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	dce9      	bgt.n	800cec2 <prvUnlockQueue+0x16>
 800ceee:	e000      	b.n	800cef2 <prvUnlockQueue+0x46>
					break;
 800cef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	22ff      	movs	r2, #255	@ 0xff
 800cef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cefa:	f001 fe67 	bl	800ebcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cefe:	f001 fe33 	bl	800eb68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf0a:	e011      	b.n	800cf30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d012      	beq.n	800cf3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3310      	adds	r3, #16
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fd97 	bl	800da4c <xTaskRemoveFromEventList>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf24:	f000 fe72 	bl	800dc0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf28:	7bbb      	ldrb	r3, [r7, #14]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	dce9      	bgt.n	800cf0c <prvUnlockQueue+0x60>
 800cf38:	e000      	b.n	800cf3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	22ff      	movs	r2, #255	@ 0xff
 800cf40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cf44:	f001 fe42 	bl	800ebcc <vPortExitCritical>
}
 800cf48:	bf00      	nop
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf58:	f001 fe06 	bl	800eb68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cf64:	2301      	movs	r3, #1
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	e001      	b.n	800cf6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf6e:	f001 fe2d 	bl	800ebcc <vPortExitCritical>

	return xReturn;
 800cf72:	68fb      	ldr	r3, [r7, #12]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf84:	f001 fdf0 	bl	800eb68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d102      	bne.n	800cf9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cf94:	2301      	movs	r3, #1
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	e001      	b.n	800cf9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cf9e:	f001 fe15 	bl	800ebcc <vPortExitCritical>

	return xReturn;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	e014      	b.n	800cfe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cfbc:	4a0f      	ldr	r2, [pc, #60]	@ (800cffc <vQueueAddToRegistry+0x50>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10b      	bne.n	800cfe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cfc8:	490c      	ldr	r1, [pc, #48]	@ (800cffc <vQueueAddToRegistry+0x50>)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cfd2:	4a0a      	ldr	r2, [pc, #40]	@ (800cffc <vQueueAddToRegistry+0x50>)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	4413      	add	r3, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cfde:	e006      	b.n	800cfee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b07      	cmp	r3, #7
 800cfea:	d9e7      	bls.n	800cfbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	24000a28 	.word	0x24000a28

0800d000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d010:	f001 fdaa 	bl	800eb68 <vPortEnterCritical>
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d01a:	b25b      	sxtb	r3, r3
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d103      	bne.n	800d02a <vQueueWaitForMessageRestricted+0x2a>
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d030:	b25b      	sxtb	r3, r3
 800d032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d036:	d103      	bne.n	800d040 <vQueueWaitForMessageRestricted+0x40>
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d040:	f001 fdc4 	bl	800ebcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	3324      	adds	r3, #36	@ 0x24
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fccd 	bl	800d9f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d05a:	6978      	ldr	r0, [r7, #20]
 800d05c:	f7ff ff26 	bl	800ceac <prvUnlockQueue>
	}
 800d060:	bf00      	nop
 800d062:	3718      	adds	r7, #24
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b08e      	sub	sp, #56	@ 0x38
 800d06c:	af04      	add	r7, sp, #16
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10b      	bne.n	800d094 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	623b      	str	r3, [r7, #32]
}
 800d08e:	bf00      	nop
 800d090:	bf00      	nop
 800d092:	e7fd      	b.n	800d090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10b      	bne.n	800d0b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	61fb      	str	r3, [r7, #28]
}
 800d0ac:	bf00      	nop
 800d0ae:	bf00      	nop
 800d0b0:	e7fd      	b.n	800d0ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d0b2:	23a8      	movs	r3, #168	@ 0xa8
 800d0b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2ba8      	cmp	r3, #168	@ 0xa8
 800d0ba:	d00b      	beq.n	800d0d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	61bb      	str	r3, [r7, #24]
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	e7fd      	b.n	800d0d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01e      	beq.n	800d11a <xTaskCreateStatic+0xb2>
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d01b      	beq.n	800d11a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	9303      	str	r3, [sp, #12]
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	f107 0314 	add.w	r3, r7, #20
 800d100:	9301      	str	r3, [sp, #4]
 800d102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 f851 	bl	800d1b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d114:	f000 f8f6 	bl	800d304 <prvAddNewTaskToReadyList>
 800d118:	e001      	b.n	800d11e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d11e:	697b      	ldr	r3, [r7, #20]
	}
 800d120:	4618      	mov	r0, r3
 800d122:	3728      	adds	r7, #40	@ 0x28
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08c      	sub	sp, #48	@ 0x30
 800d12c:	af04      	add	r7, sp, #16
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d138:	88fb      	ldrh	r3, [r7, #6]
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 ff19 	bl	800ef74 <pvPortMalloc>
 800d142:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00e      	beq.n	800d168 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d14a:	20a8      	movs	r0, #168	@ 0xa8
 800d14c:	f001 ff12 	bl	800ef74 <pvPortMalloc>
 800d150:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	697a      	ldr	r2, [r7, #20]
 800d15c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d15e:	e005      	b.n	800d16c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d160:	6978      	ldr	r0, [r7, #20]
 800d162:	f001 ffd5 	bl	800f110 <vPortFree>
 800d166:	e001      	b.n	800d16c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d168:	2300      	movs	r3, #0
 800d16a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d017      	beq.n	800d1a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d17a:	88fa      	ldrh	r2, [r7, #6]
 800d17c:	2300      	movs	r3, #0
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	68b9      	ldr	r1, [r7, #8]
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f000 f80f 	bl	800d1b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d196:	69f8      	ldr	r0, [r7, #28]
 800d198:	f000 f8b4 	bl	800d304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d19c:	2301      	movs	r3, #1
 800d19e:	61bb      	str	r3, [r7, #24]
 800d1a0:	e002      	b.n	800d1a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1a8:	69bb      	ldr	r3, [r7, #24]
	}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3720      	adds	r7, #32
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	21a5      	movs	r1, #165	@ 0xa5
 800d1ce:	f002 fa30 	bl	800f632 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d1dc:	440b      	add	r3, r1
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	f023 0307 	bic.w	r3, r3, #7
 800d1ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	f003 0307 	and.w	r3, r3, #7
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00b      	beq.n	800d20e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	617b      	str	r3, [r7, #20]
}
 800d208:	bf00      	nop
 800d20a:	bf00      	nop
 800d20c:	e7fd      	b.n	800d20a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d01f      	beq.n	800d254 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d214:	2300      	movs	r3, #0
 800d216:	61fb      	str	r3, [r7, #28]
 800d218:	e012      	b.n	800d240 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	4413      	add	r3, r2
 800d220:	7819      	ldrb	r1, [r3, #0]
 800d222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	4413      	add	r3, r2
 800d228:	3334      	adds	r3, #52	@ 0x34
 800d22a:	460a      	mov	r2, r1
 800d22c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d22e:	68ba      	ldr	r2, [r7, #8]
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	4413      	add	r3, r2
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d006      	beq.n	800d248 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	3301      	adds	r3, #1
 800d23e:	61fb      	str	r3, [r7, #28]
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b0f      	cmp	r3, #15
 800d244:	d9e9      	bls.n	800d21a <prvInitialiseNewTask+0x66>
 800d246:	e000      	b.n	800d24a <prvInitialiseNewTask+0x96>
			{
				break;
 800d248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d252:	e003      	b.n	800d25c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25e:	2b37      	cmp	r3, #55	@ 0x37
 800d260:	d901      	bls.n	800d266 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d262:	2337      	movs	r3, #55	@ 0x37
 800d264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d26a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d270:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d274:	2200      	movs	r2, #0
 800d276:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27a:	3304      	adds	r3, #4
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe ff3d 	bl	800c0fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d284:	3318      	adds	r3, #24
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe ff38 	bl	800c0fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d294:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b4:	3354      	adds	r3, #84	@ 0x54
 800d2b6:	224c      	movs	r2, #76	@ 0x4c
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f002 f9b9 	bl	800f632 <memset>
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c2:	4a0d      	ldr	r2, [pc, #52]	@ (800d2f8 <prvInitialiseNewTask+0x144>)
 800d2c4:	659a      	str	r2, [r3, #88]	@ 0x58
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c8:	4a0c      	ldr	r2, [pc, #48]	@ (800d2fc <prvInitialiseNewTask+0x148>)
 800d2ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800d300 <prvInitialiseNewTask+0x14c>)
 800d2d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d2d2:	683a      	ldr	r2, [r7, #0]
 800d2d4:	68f9      	ldr	r1, [r7, #12]
 800d2d6:	69b8      	ldr	r0, [r7, #24]
 800d2d8:	f001 fb12 	bl	800e900 <pxPortInitialiseStack>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2ee:	bf00      	nop
 800d2f0:	3720      	adds	r7, #32
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	24004cc8 	.word	0x24004cc8
 800d2fc:	24004d30 	.word	0x24004d30
 800d300:	24004d98 	.word	0x24004d98

0800d304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d30c:	f001 fc2c 	bl	800eb68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d310:	4b2d      	ldr	r3, [pc, #180]	@ (800d3c8 <prvAddNewTaskToReadyList+0xc4>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	4a2c      	ldr	r2, [pc, #176]	@ (800d3c8 <prvAddNewTaskToReadyList+0xc4>)
 800d318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d31a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d109      	bne.n	800d336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d322:	4a2a      	ldr	r2, [pc, #168]	@ (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d328:	4b27      	ldr	r3, [pc, #156]	@ (800d3c8 <prvAddNewTaskToReadyList+0xc4>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d110      	bne.n	800d352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d330:	f000 fce6 	bl	800dd00 <prvInitialiseTaskLists>
 800d334:	e00d      	b.n	800d352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d336:	4b26      	ldr	r3, [pc, #152]	@ (800d3d0 <prvAddNewTaskToReadyList+0xcc>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d109      	bne.n	800d352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d33e:	4b23      	ldr	r3, [pc, #140]	@ (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d348:	429a      	cmp	r2, r3
 800d34a:	d802      	bhi.n	800d352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d34c:	4a1f      	ldr	r2, [pc, #124]	@ (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d352:	4b20      	ldr	r3, [pc, #128]	@ (800d3d4 <prvAddNewTaskToReadyList+0xd0>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3301      	adds	r3, #1
 800d358:	4a1e      	ldr	r2, [pc, #120]	@ (800d3d4 <prvAddNewTaskToReadyList+0xd0>)
 800d35a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d35c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3d4 <prvAddNewTaskToReadyList+0xd0>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d368:	4b1b      	ldr	r3, [pc, #108]	@ (800d3d8 <prvAddNewTaskToReadyList+0xd4>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d903      	bls.n	800d378 <prvAddNewTaskToReadyList+0x74>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d374:	4a18      	ldr	r2, [pc, #96]	@ (800d3d8 <prvAddNewTaskToReadyList+0xd4>)
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d37c:	4613      	mov	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4a15      	ldr	r2, [pc, #84]	@ (800d3dc <prvAddNewTaskToReadyList+0xd8>)
 800d386:	441a      	add	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	3304      	adds	r3, #4
 800d38c:	4619      	mov	r1, r3
 800d38e:	4610      	mov	r0, r2
 800d390:	f7fe fec1 	bl	800c116 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d394:	f001 fc1a 	bl	800ebcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d398:	4b0d      	ldr	r3, [pc, #52]	@ (800d3d0 <prvAddNewTaskToReadyList+0xcc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00e      	beq.n	800d3be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d3cc <prvAddNewTaskToReadyList+0xc8>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d207      	bcs.n	800d3be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e0 <prvAddNewTaskToReadyList+0xdc>)
 800d3b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3be:	bf00      	nop
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	24000f3c 	.word	0x24000f3c
 800d3cc:	24000a68 	.word	0x24000a68
 800d3d0:	24000f48 	.word	0x24000f48
 800d3d4:	24000f58 	.word	0x24000f58
 800d3d8:	24000f44 	.word	0x24000f44
 800d3dc:	24000a6c 	.word	0x24000a6c
 800d3e0:	e000ed04 	.word	0xe000ed04

0800d3e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d018      	beq.n	800d428 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3f6:	4b14      	ldr	r3, [pc, #80]	@ (800d448 <vTaskDelay+0x64>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00b      	beq.n	800d416 <vTaskDelay+0x32>
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	60bb      	str	r3, [r7, #8]
}
 800d410:	bf00      	nop
 800d412:	bf00      	nop
 800d414:	e7fd      	b.n	800d412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d416:	f000 f88b 	bl	800d530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d41a:	2100      	movs	r1, #0
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 fec1 	bl	800e1a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d422:	f000 f8cb 	bl	800d5bc <xTaskResumeAll>
 800d426:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d107      	bne.n	800d43e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d42e:	4b07      	ldr	r3, [pc, #28]	@ (800d44c <vTaskDelay+0x68>)
 800d430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d43e:	bf00      	nop
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	24000f64 	.word	0x24000f64
 800d44c:	e000ed04 	.word	0xe000ed04

0800d450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b08a      	sub	sp, #40	@ 0x28
 800d454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d45e:	463a      	mov	r2, r7
 800d460:	1d39      	adds	r1, r7, #4
 800d462:	f107 0308 	add.w	r3, r7, #8
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fdf4 	bl	800c054 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	9202      	str	r2, [sp, #8]
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	2300      	movs	r3, #0
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	460a      	mov	r2, r1
 800d47e:	4924      	ldr	r1, [pc, #144]	@ (800d510 <vTaskStartScheduler+0xc0>)
 800d480:	4824      	ldr	r0, [pc, #144]	@ (800d514 <vTaskStartScheduler+0xc4>)
 800d482:	f7ff fdf1 	bl	800d068 <xTaskCreateStatic>
 800d486:	4603      	mov	r3, r0
 800d488:	4a23      	ldr	r2, [pc, #140]	@ (800d518 <vTaskStartScheduler+0xc8>)
 800d48a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d48c:	4b22      	ldr	r3, [pc, #136]	@ (800d518 <vTaskStartScheduler+0xc8>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d494:	2301      	movs	r3, #1
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	e001      	b.n	800d49e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d102      	bne.n	800d4aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4a4:	f000 fed2 	bl	800e24c <xTimerCreateTimerTask>
 800d4a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d11b      	bne.n	800d4e8 <vTaskStartScheduler+0x98>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	613b      	str	r3, [r7, #16]
}
 800d4c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4c4:	4b15      	ldr	r3, [pc, #84]	@ (800d51c <vTaskStartScheduler+0xcc>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3354      	adds	r3, #84	@ 0x54
 800d4ca:	4a15      	ldr	r2, [pc, #84]	@ (800d520 <vTaskStartScheduler+0xd0>)
 800d4cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4ce:	4b15      	ldr	r3, [pc, #84]	@ (800d524 <vTaskStartScheduler+0xd4>)
 800d4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4d6:	4b14      	ldr	r3, [pc, #80]	@ (800d528 <vTaskStartScheduler+0xd8>)
 800d4d8:	2201      	movs	r2, #1
 800d4da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4dc:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <vTaskStartScheduler+0xdc>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d4e2:	f001 fa9d 	bl	800ea20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d4e6:	e00f      	b.n	800d508 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d10b      	bne.n	800d508 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	60fb      	str	r3, [r7, #12]
}
 800d502:	bf00      	nop
 800d504:	bf00      	nop
 800d506:	e7fd      	b.n	800d504 <vTaskStartScheduler+0xb4>
}
 800d508:	bf00      	nop
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	08010504 	.word	0x08010504
 800d514:	0800dc25 	.word	0x0800dc25
 800d518:	24000f60 	.word	0x24000f60
 800d51c:	24000a68 	.word	0x24000a68
 800d520:	24000020 	.word	0x24000020
 800d524:	24000f5c 	.word	0x24000f5c
 800d528:	24000f48 	.word	0x24000f48
 800d52c:	24000f40 	.word	0x24000f40

0800d530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d534:	4b04      	ldr	r3, [pc, #16]	@ (800d548 <vTaskSuspendAll+0x18>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	4a03      	ldr	r2, [pc, #12]	@ (800d548 <vTaskSuspendAll+0x18>)
 800d53c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d53e:	bf00      	nop
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	24000f64 	.word	0x24000f64

0800d54c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800d556:	4b14      	ldr	r3, [pc, #80]	@ (800d5a8 <prvGetExpectedIdleTime+0x5c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800d55e:	2301      	movs	r3, #1
 800d560:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d562:	4b12      	ldr	r3, [pc, #72]	@ (800d5ac <prvGetExpectedIdleTime+0x60>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	607b      	str	r3, [r7, #4]
 800d570:	e012      	b.n	800d598 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d572:	4b0f      	ldr	r3, [pc, #60]	@ (800d5b0 <prvGetExpectedIdleTime+0x64>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d902      	bls.n	800d580 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	607b      	str	r3, [r7, #4]
 800d57e:	e00b      	b.n	800d598 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	607b      	str	r3, [r7, #4]
 800d58a:	e005      	b.n	800d598 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d58c:	4b09      	ldr	r3, [pc, #36]	@ (800d5b4 <prvGetExpectedIdleTime+0x68>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	4b09      	ldr	r3, [pc, #36]	@ (800d5b8 <prvGetExpectedIdleTime+0x6c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	1ad3      	subs	r3, r2, r3
 800d596:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800d598:	687b      	ldr	r3, [r7, #4]
	}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	24000f44 	.word	0x24000f44
 800d5ac:	24000a68 	.word	0x24000a68
 800d5b0:	24000a6c 	.word	0x24000a6c
 800d5b4:	24000f5c 	.word	0x24000f5c
 800d5b8:	24000f40 	.word	0x24000f40

0800d5bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5ca:	4b42      	ldr	r3, [pc, #264]	@ (800d6d4 <xTaskResumeAll+0x118>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10b      	bne.n	800d5ea <xTaskResumeAll+0x2e>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	603b      	str	r3, [r7, #0]
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop
 800d5e8:	e7fd      	b.n	800d5e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d5ea:	f001 fabd 	bl	800eb68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d5ee:	4b39      	ldr	r3, [pc, #228]	@ (800d6d4 <xTaskResumeAll+0x118>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	4a37      	ldr	r2, [pc, #220]	@ (800d6d4 <xTaskResumeAll+0x118>)
 800d5f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5f8:	4b36      	ldr	r3, [pc, #216]	@ (800d6d4 <xTaskResumeAll+0x118>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d162      	bne.n	800d6c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d600:	4b35      	ldr	r3, [pc, #212]	@ (800d6d8 <xTaskResumeAll+0x11c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d05e      	beq.n	800d6c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d608:	e02f      	b.n	800d66a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d60a:	4b34      	ldr	r3, [pc, #208]	@ (800d6dc <xTaskResumeAll+0x120>)
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3318      	adds	r3, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fdda 	bl	800c1d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	3304      	adds	r3, #4
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fdd5 	bl	800c1d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d62a:	4b2d      	ldr	r3, [pc, #180]	@ (800d6e0 <xTaskResumeAll+0x124>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d903      	bls.n	800d63a <xTaskResumeAll+0x7e>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d636:	4a2a      	ldr	r2, [pc, #168]	@ (800d6e0 <xTaskResumeAll+0x124>)
 800d638:	6013      	str	r3, [r2, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d63e:	4613      	mov	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4413      	add	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4a27      	ldr	r2, [pc, #156]	@ (800d6e4 <xTaskResumeAll+0x128>)
 800d648:	441a      	add	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3304      	adds	r3, #4
 800d64e:	4619      	mov	r1, r3
 800d650:	4610      	mov	r0, r2
 800d652:	f7fe fd60 	bl	800c116 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d65a:	4b23      	ldr	r3, [pc, #140]	@ (800d6e8 <xTaskResumeAll+0x12c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d660:	429a      	cmp	r2, r3
 800d662:	d302      	bcc.n	800d66a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d664:	4b21      	ldr	r3, [pc, #132]	@ (800d6ec <xTaskResumeAll+0x130>)
 800d666:	2201      	movs	r2, #1
 800d668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d66a:	4b1c      	ldr	r3, [pc, #112]	@ (800d6dc <xTaskResumeAll+0x120>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1cb      	bne.n	800d60a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d678:	f000 fbe6 	bl	800de48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d67c:	4b1c      	ldr	r3, [pc, #112]	@ (800d6f0 <xTaskResumeAll+0x134>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d010      	beq.n	800d6aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d688:	f000 f86e 	bl	800d768 <xTaskIncrementTick>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d692:	4b16      	ldr	r3, [pc, #88]	@ (800d6ec <xTaskResumeAll+0x130>)
 800d694:	2201      	movs	r2, #1
 800d696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1f1      	bne.n	800d688 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d6a4:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <xTaskResumeAll+0x134>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6aa:	4b10      	ldr	r3, [pc, #64]	@ (800d6ec <xTaskResumeAll+0x130>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d009      	beq.n	800d6c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f4 <xTaskResumeAll+0x138>)
 800d6b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6c6:	f001 fa81 	bl	800ebcc <vPortExitCritical>

	return xAlreadyYielded;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	24000f64 	.word	0x24000f64
 800d6d8:	24000f3c 	.word	0x24000f3c
 800d6dc:	24000efc 	.word	0x24000efc
 800d6e0:	24000f44 	.word	0x24000f44
 800d6e4:	24000a6c 	.word	0x24000a6c
 800d6e8:	24000a68 	.word	0x24000a68
 800d6ec:	24000f50 	.word	0x24000f50
 800d6f0:	24000f4c 	.word	0x24000f4c
 800d6f4:	e000ed04 	.word	0xe000ed04

0800d6f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6fe:	4b05      	ldr	r3, [pc, #20]	@ (800d714 <xTaskGetTickCount+0x1c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d704:	687b      	ldr	r3, [r7, #4]
}
 800d706:	4618      	mov	r0, r3
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	24000f40 	.word	0x24000f40

0800d718 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800d720:	4b0f      	ldr	r3, [pc, #60]	@ (800d760 <vTaskStepTick+0x48>)
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	441a      	add	r2, r3
 800d728:	4b0e      	ldr	r3, [pc, #56]	@ (800d764 <vTaskStepTick+0x4c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d90b      	bls.n	800d748 <vTaskStepTick+0x30>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	60fb      	str	r3, [r7, #12]
}
 800d742:	bf00      	nop
 800d744:	bf00      	nop
 800d746:	e7fd      	b.n	800d744 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800d748:	4b05      	ldr	r3, [pc, #20]	@ (800d760 <vTaskStepTick+0x48>)
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4413      	add	r3, r2
 800d750:	4a03      	ldr	r2, [pc, #12]	@ (800d760 <vTaskStepTick+0x48>)
 800d752:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800d754:	bf00      	nop
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr
 800d760:	24000f40 	.word	0x24000f40
 800d764:	24000f5c 	.word	0x24000f5c

0800d768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d772:	4b4f      	ldr	r3, [pc, #316]	@ (800d8b0 <xTaskIncrementTick+0x148>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	f040 8090 	bne.w	800d89c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d77c:	4b4d      	ldr	r3, [pc, #308]	@ (800d8b4 <xTaskIncrementTick+0x14c>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3301      	adds	r3, #1
 800d782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d784:	4a4b      	ldr	r2, [pc, #300]	@ (800d8b4 <xTaskIncrementTick+0x14c>)
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d121      	bne.n	800d7d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d790:	4b49      	ldr	r3, [pc, #292]	@ (800d8b8 <xTaskIncrementTick+0x150>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	603b      	str	r3, [r7, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	bf00      	nop
 800d7b0:	e7fd      	b.n	800d7ae <xTaskIncrementTick+0x46>
 800d7b2:	4b41      	ldr	r3, [pc, #260]	@ (800d8b8 <xTaskIncrementTick+0x150>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	4b40      	ldr	r3, [pc, #256]	@ (800d8bc <xTaskIncrementTick+0x154>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a3e      	ldr	r2, [pc, #248]	@ (800d8b8 <xTaskIncrementTick+0x150>)
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	4a3e      	ldr	r2, [pc, #248]	@ (800d8bc <xTaskIncrementTick+0x154>)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	4b3e      	ldr	r3, [pc, #248]	@ (800d8c0 <xTaskIncrementTick+0x158>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	4a3c      	ldr	r2, [pc, #240]	@ (800d8c0 <xTaskIncrementTick+0x158>)
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	f000 fb3a 	bl	800de48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7d4:	4b3b      	ldr	r3, [pc, #236]	@ (800d8c4 <xTaskIncrementTick+0x15c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d349      	bcc.n	800d872 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7de:	4b36      	ldr	r3, [pc, #216]	@ (800d8b8 <xTaskIncrementTick+0x150>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d104      	bne.n	800d7f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e8:	4b36      	ldr	r3, [pc, #216]	@ (800d8c4 <xTaskIncrementTick+0x15c>)
 800d7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ee:	601a      	str	r2, [r3, #0]
					break;
 800d7f0:	e03f      	b.n	800d872 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f2:	4b31      	ldr	r3, [pc, #196]	@ (800d8b8 <xTaskIncrementTick+0x150>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	429a      	cmp	r2, r3
 800d808:	d203      	bcs.n	800d812 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d80a:	4a2e      	ldr	r2, [pc, #184]	@ (800d8c4 <xTaskIncrementTick+0x15c>)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d810:	e02f      	b.n	800d872 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	3304      	adds	r3, #4
 800d816:	4618      	mov	r0, r3
 800d818:	f7fe fcda 	bl	800c1d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d820:	2b00      	cmp	r3, #0
 800d822:	d004      	beq.n	800d82e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	3318      	adds	r3, #24
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fe fcd1 	bl	800c1d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d832:	4b25      	ldr	r3, [pc, #148]	@ (800d8c8 <xTaskIncrementTick+0x160>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d903      	bls.n	800d842 <xTaskIncrementTick+0xda>
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83e:	4a22      	ldr	r2, [pc, #136]	@ (800d8c8 <xTaskIncrementTick+0x160>)
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d846:	4613      	mov	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4a1f      	ldr	r2, [pc, #124]	@ (800d8cc <xTaskIncrementTick+0x164>)
 800d850:	441a      	add	r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	3304      	adds	r3, #4
 800d856:	4619      	mov	r1, r3
 800d858:	4610      	mov	r0, r2
 800d85a:	f7fe fc5c 	bl	800c116 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d862:	4b1b      	ldr	r3, [pc, #108]	@ (800d8d0 <xTaskIncrementTick+0x168>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d868:	429a      	cmp	r2, r3
 800d86a:	d3b8      	bcc.n	800d7de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d86c:	2301      	movs	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d870:	e7b5      	b.n	800d7de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d872:	4b17      	ldr	r3, [pc, #92]	@ (800d8d0 <xTaskIncrementTick+0x168>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d878:	4914      	ldr	r1, [pc, #80]	@ (800d8cc <xTaskIncrementTick+0x164>)
 800d87a:	4613      	mov	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	440b      	add	r3, r1
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d901      	bls.n	800d88e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d88a:	2301      	movs	r3, #1
 800d88c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d88e:	4b11      	ldr	r3, [pc, #68]	@ (800d8d4 <xTaskIncrementTick+0x16c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d007      	beq.n	800d8a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d896:	2301      	movs	r3, #1
 800d898:	617b      	str	r3, [r7, #20]
 800d89a:	e004      	b.n	800d8a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d89c:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d8 <xTaskIncrementTick+0x170>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	4a0d      	ldr	r2, [pc, #52]	@ (800d8d8 <xTaskIncrementTick+0x170>)
 800d8a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d8a6:	697b      	ldr	r3, [r7, #20]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	24000f64 	.word	0x24000f64
 800d8b4:	24000f40 	.word	0x24000f40
 800d8b8:	24000ef4 	.word	0x24000ef4
 800d8bc:	24000ef8 	.word	0x24000ef8
 800d8c0:	24000f54 	.word	0x24000f54
 800d8c4:	24000f5c 	.word	0x24000f5c
 800d8c8:	24000f44 	.word	0x24000f44
 800d8cc:	24000a6c 	.word	0x24000a6c
 800d8d0:	24000a68 	.word	0x24000a68
 800d8d4:	24000f50 	.word	0x24000f50
 800d8d8:	24000f4c 	.word	0x24000f4c

0800d8dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8e2:	4b2b      	ldr	r3, [pc, #172]	@ (800d990 <vTaskSwitchContext+0xb4>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d8ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d994 <vTaskSwitchContext+0xb8>)
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8f0:	e047      	b.n	800d982 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d8f2:	4b28      	ldr	r3, [pc, #160]	@ (800d994 <vTaskSwitchContext+0xb8>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f8:	4b27      	ldr	r3, [pc, #156]	@ (800d998 <vTaskSwitchContext+0xbc>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	e011      	b.n	800d924 <vTaskSwitchContext+0x48>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10b      	bne.n	800d91e <vTaskSwitchContext+0x42>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	607b      	str	r3, [r7, #4]
}
 800d918:	bf00      	nop
 800d91a:	bf00      	nop
 800d91c:	e7fd      	b.n	800d91a <vTaskSwitchContext+0x3e>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3b01      	subs	r3, #1
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	491d      	ldr	r1, [pc, #116]	@ (800d99c <vTaskSwitchContext+0xc0>)
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	4613      	mov	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	440b      	add	r3, r1
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d0e3      	beq.n	800d900 <vTaskSwitchContext+0x24>
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	4613      	mov	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4a16      	ldr	r2, [pc, #88]	@ (800d99c <vTaskSwitchContext+0xc0>)
 800d944:	4413      	add	r3, r2
 800d946:	60bb      	str	r3, [r7, #8]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	685a      	ldr	r2, [r3, #4]
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	605a      	str	r2, [r3, #4]
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	3308      	adds	r3, #8
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d104      	bne.n	800d968 <vTaskSwitchContext+0x8c>
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	685a      	ldr	r2, [r3, #4]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	605a      	str	r2, [r3, #4]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	4a0c      	ldr	r2, [pc, #48]	@ (800d9a0 <vTaskSwitchContext+0xc4>)
 800d970:	6013      	str	r3, [r2, #0]
 800d972:	4a09      	ldr	r2, [pc, #36]	@ (800d998 <vTaskSwitchContext+0xbc>)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d978:	4b09      	ldr	r3, [pc, #36]	@ (800d9a0 <vTaskSwitchContext+0xc4>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3354      	adds	r3, #84	@ 0x54
 800d97e:	4a09      	ldr	r2, [pc, #36]	@ (800d9a4 <vTaskSwitchContext+0xc8>)
 800d980:	6013      	str	r3, [r2, #0]
}
 800d982:	bf00      	nop
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	24000f64 	.word	0x24000f64
 800d994:	24000f50 	.word	0x24000f50
 800d998:	24000f44 	.word	0x24000f44
 800d99c:	24000a6c 	.word	0x24000a6c
 800d9a0:	24000a68 	.word	0x24000a68
 800d9a4:	24000020 	.word	0x24000020

0800d9a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10b      	bne.n	800d9d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	60fb      	str	r3, [r7, #12]
}
 800d9ca:	bf00      	nop
 800d9cc:	bf00      	nop
 800d9ce:	e7fd      	b.n	800d9cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9d0:	4b07      	ldr	r3, [pc, #28]	@ (800d9f0 <vTaskPlaceOnEventList+0x48>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3318      	adds	r3, #24
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7fe fbc0 	bl	800c15e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9de:	2101      	movs	r1, #1
 800d9e0:	6838      	ldr	r0, [r7, #0]
 800d9e2:	f000 fbdf 	bl	800e1a4 <prvAddCurrentTaskToDelayedList>
}
 800d9e6:	bf00      	nop
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	24000a68 	.word	0x24000a68

0800d9f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10b      	bne.n	800da1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	617b      	str	r3, [r7, #20]
}
 800da18:	bf00      	nop
 800da1a:	bf00      	nop
 800da1c:	e7fd      	b.n	800da1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da1e:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <vTaskPlaceOnEventListRestricted+0x54>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3318      	adds	r3, #24
 800da24:	4619      	mov	r1, r3
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7fe fb75 	bl	800c116 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800da32:	f04f 33ff 	mov.w	r3, #4294967295
 800da36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	68b8      	ldr	r0, [r7, #8]
 800da3c:	f000 fbb2 	bl	800e1a4 <prvAddCurrentTaskToDelayedList>
	}
 800da40:	bf00      	nop
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	24000a68 	.word	0x24000a68

0800da4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10b      	bne.n	800da7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	60fb      	str	r3, [r7, #12]
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop
 800da78:	e7fd      	b.n	800da76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	3318      	adds	r3, #24
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe fba6 	bl	800c1d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da84:	4b1e      	ldr	r3, [pc, #120]	@ (800db00 <xTaskRemoveFromEventList+0xb4>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d11f      	bne.n	800dacc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	3304      	adds	r3, #4
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe fb9d 	bl	800c1d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da9a:	4b1a      	ldr	r3, [pc, #104]	@ (800db04 <xTaskRemoveFromEventList+0xb8>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d903      	bls.n	800daaa <xTaskRemoveFromEventList+0x5e>
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daa6:	4a17      	ldr	r2, [pc, #92]	@ (800db04 <xTaskRemoveFromEventList+0xb8>)
 800daa8:	6013      	str	r3, [r2, #0]
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daae:	4613      	mov	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	4a14      	ldr	r2, [pc, #80]	@ (800db08 <xTaskRemoveFromEventList+0xbc>)
 800dab8:	441a      	add	r2, r3
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	3304      	adds	r3, #4
 800dabe:	4619      	mov	r1, r3
 800dac0:	4610      	mov	r0, r2
 800dac2:	f7fe fb28 	bl	800c116 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800dac6:	f000 f9bf 	bl	800de48 <prvResetNextTaskUnblockTime>
 800daca:	e005      	b.n	800dad8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	3318      	adds	r3, #24
 800dad0:	4619      	mov	r1, r3
 800dad2:	480e      	ldr	r0, [pc, #56]	@ (800db0c <xTaskRemoveFromEventList+0xc0>)
 800dad4:	f7fe fb1f 	bl	800c116 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dadc:	4b0c      	ldr	r3, [pc, #48]	@ (800db10 <xTaskRemoveFromEventList+0xc4>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d905      	bls.n	800daf2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dae6:	2301      	movs	r3, #1
 800dae8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800daea:	4b0a      	ldr	r3, [pc, #40]	@ (800db14 <xTaskRemoveFromEventList+0xc8>)
 800daec:	2201      	movs	r2, #1
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e001      	b.n	800daf6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800daf6:	697b      	ldr	r3, [r7, #20]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	24000f64 	.word	0x24000f64
 800db04:	24000f44 	.word	0x24000f44
 800db08:	24000a6c 	.word	0x24000a6c
 800db0c:	24000efc 	.word	0x24000efc
 800db10:	24000a68 	.word	0x24000a68
 800db14:	24000f50 	.word	0x24000f50

0800db18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db20:	4b06      	ldr	r3, [pc, #24]	@ (800db3c <vTaskInternalSetTimeOutState+0x24>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db28:	4b05      	ldr	r3, [pc, #20]	@ (800db40 <vTaskInternalSetTimeOutState+0x28>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	605a      	str	r2, [r3, #4]
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	24000f54 	.word	0x24000f54
 800db40:	24000f40 	.word	0x24000f40

0800db44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b088      	sub	sp, #32
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10b      	bne.n	800db6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	613b      	str	r3, [r7, #16]
}
 800db66:	bf00      	nop
 800db68:	bf00      	nop
 800db6a:	e7fd      	b.n	800db68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10b      	bne.n	800db8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	60fb      	str	r3, [r7, #12]
}
 800db84:	bf00      	nop
 800db86:	bf00      	nop
 800db88:	e7fd      	b.n	800db86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800db8a:	f000 ffed 	bl	800eb68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db8e:	4b1d      	ldr	r3, [pc, #116]	@ (800dc04 <xTaskCheckForTimeOut+0xc0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	69ba      	ldr	r2, [r7, #24]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba6:	d102      	bne.n	800dbae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	e023      	b.n	800dbf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	4b15      	ldr	r3, [pc, #84]	@ (800dc08 <xTaskCheckForTimeOut+0xc4>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d007      	beq.n	800dbca <xTaskCheckForTimeOut+0x86>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	69ba      	ldr	r2, [r7, #24]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d302      	bcc.n	800dbca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	61fb      	str	r3, [r7, #28]
 800dbc8:	e015      	b.n	800dbf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d20b      	bcs.n	800dbec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	1ad2      	subs	r2, r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff ff99 	bl	800db18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61fb      	str	r3, [r7, #28]
 800dbea:	e004      	b.n	800dbf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbf6:	f000 ffe9 	bl	800ebcc <vPortExitCritical>

	return xReturn;
 800dbfa:	69fb      	ldr	r3, [r7, #28]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3720      	adds	r7, #32
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	24000f40 	.word	0x24000f40
 800dc08:	24000f54 	.word	0x24000f54

0800dc0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc10:	4b03      	ldr	r3, [pc, #12]	@ (800dc20 <vTaskMissedYield+0x14>)
 800dc12:	2201      	movs	r2, #1
 800dc14:	601a      	str	r2, [r3, #0]
}
 800dc16:	bf00      	nop
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	24000f50 	.word	0x24000f50

0800dc24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc2c:	f000 f8a8 	bl	800dd80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc30:	4b18      	ldr	r3, [pc, #96]	@ (800dc94 <prvIdleTask+0x70>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d907      	bls.n	800dc48 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dc38:	4b17      	ldr	r3, [pc, #92]	@ (800dc98 <prvIdleTask+0x74>)
 800dc3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc3e:	601a      	str	r2, [r3, #0]
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800dc48:	f7ff fc80 	bl	800d54c <prvGetExpectedIdleTime>
 800dc4c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d9eb      	bls.n	800dc2c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800dc54:	f7ff fc6c 	bl	800d530 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800dc58:	4b10      	ldr	r3, [pc, #64]	@ (800dc9c <prvIdleTask+0x78>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	4b10      	ldr	r3, [pc, #64]	@ (800dca0 <prvIdleTask+0x7c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d20b      	bcs.n	800dc7c <prvIdleTask+0x58>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	60bb      	str	r3, [r7, #8]
}
 800dc76:	bf00      	nop
 800dc78:	bf00      	nop
 800dc7a:	e7fd      	b.n	800dc78 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800dc7c:	f7ff fc66 	bl	800d54c <prvGetExpectedIdleTime>
 800dc80:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d902      	bls.n	800dc8e <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f001 f81f 	bl	800eccc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800dc8e:	f7ff fc95 	bl	800d5bc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800dc92:	e7cb      	b.n	800dc2c <prvIdleTask+0x8>
 800dc94:	24000a6c 	.word	0x24000a6c
 800dc98:	e000ed04 	.word	0xe000ed04
 800dc9c:	24000f5c 	.word	0x24000f5c
 800dca0:	24000f40 	.word	0x24000f40

0800dca4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800dcb2:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf0 <eTaskConfirmSleepModeStatus+0x4c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d002      	beq.n	800dcc0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	71fb      	strb	r3, [r7, #7]
 800dcbe:	e010      	b.n	800dce2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800dcc0:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf4 <eTaskConfirmSleepModeStatus+0x50>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	71fb      	strb	r3, [r7, #7]
 800dccc:	e009      	b.n	800dce2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800dcce:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf8 <eTaskConfirmSleepModeStatus+0x54>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	@ (800dcfc <eTaskConfirmSleepModeStatus+0x58>)
 800dcd4:	6819      	ldr	r1, [r3, #0]
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	1acb      	subs	r3, r1, r3
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d101      	bne.n	800dce2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800dcde:	2302      	movs	r3, #2
 800dce0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800dce2:	79fb      	ldrb	r3, [r7, #7]
	}
 800dce4:	4618      	mov	r0, r3
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr
 800dcf0:	24000efc 	.word	0x24000efc
 800dcf4:	24000f50 	.word	0x24000f50
 800dcf8:	24000f28 	.word	0x24000f28
 800dcfc:	24000f3c 	.word	0x24000f3c

0800dd00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd06:	2300      	movs	r3, #0
 800dd08:	607b      	str	r3, [r7, #4]
 800dd0a:	e00c      	b.n	800dd26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4a12      	ldr	r2, [pc, #72]	@ (800dd60 <prvInitialiseTaskLists+0x60>)
 800dd18:	4413      	add	r3, r2
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fe f9ce 	bl	800c0bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3301      	adds	r3, #1
 800dd24:	607b      	str	r3, [r7, #4]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b37      	cmp	r3, #55	@ 0x37
 800dd2a:	d9ef      	bls.n	800dd0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd2c:	480d      	ldr	r0, [pc, #52]	@ (800dd64 <prvInitialiseTaskLists+0x64>)
 800dd2e:	f7fe f9c5 	bl	800c0bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd32:	480d      	ldr	r0, [pc, #52]	@ (800dd68 <prvInitialiseTaskLists+0x68>)
 800dd34:	f7fe f9c2 	bl	800c0bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd38:	480c      	ldr	r0, [pc, #48]	@ (800dd6c <prvInitialiseTaskLists+0x6c>)
 800dd3a:	f7fe f9bf 	bl	800c0bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd3e:	480c      	ldr	r0, [pc, #48]	@ (800dd70 <prvInitialiseTaskLists+0x70>)
 800dd40:	f7fe f9bc 	bl	800c0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd44:	480b      	ldr	r0, [pc, #44]	@ (800dd74 <prvInitialiseTaskLists+0x74>)
 800dd46:	f7fe f9b9 	bl	800c0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd78 <prvInitialiseTaskLists+0x78>)
 800dd4c:	4a05      	ldr	r2, [pc, #20]	@ (800dd64 <prvInitialiseTaskLists+0x64>)
 800dd4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd50:	4b0a      	ldr	r3, [pc, #40]	@ (800dd7c <prvInitialiseTaskLists+0x7c>)
 800dd52:	4a05      	ldr	r2, [pc, #20]	@ (800dd68 <prvInitialiseTaskLists+0x68>)
 800dd54:	601a      	str	r2, [r3, #0]
}
 800dd56:	bf00      	nop
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	24000a6c 	.word	0x24000a6c
 800dd64:	24000ecc 	.word	0x24000ecc
 800dd68:	24000ee0 	.word	0x24000ee0
 800dd6c:	24000efc 	.word	0x24000efc
 800dd70:	24000f10 	.word	0x24000f10
 800dd74:	24000f28 	.word	0x24000f28
 800dd78:	24000ef4 	.word	0x24000ef4
 800dd7c:	24000ef8 	.word	0x24000ef8

0800dd80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd86:	e019      	b.n	800ddbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd88:	f000 feee 	bl	800eb68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8c:	4b10      	ldr	r3, [pc, #64]	@ (800ddd0 <prvCheckTasksWaitingTermination+0x50>)
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fa19 	bl	800c1d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd4 <prvCheckTasksWaitingTermination+0x54>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	4a0b      	ldr	r2, [pc, #44]	@ (800ddd4 <prvCheckTasksWaitingTermination+0x54>)
 800dda6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dda8:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd8 <prvCheckTasksWaitingTermination+0x58>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3b01      	subs	r3, #1
 800ddae:	4a0a      	ldr	r2, [pc, #40]	@ (800ddd8 <prvCheckTasksWaitingTermination+0x58>)
 800ddb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ddb2:	f000 ff0b 	bl	800ebcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f810 	bl	800dddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddbc:	4b06      	ldr	r3, [pc, #24]	@ (800ddd8 <prvCheckTasksWaitingTermination+0x58>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d1e1      	bne.n	800dd88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	24000f10 	.word	0x24000f10
 800ddd4:	24000f3c 	.word	0x24000f3c
 800ddd8:	24000f24 	.word	0x24000f24

0800dddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3354      	adds	r3, #84	@ 0x54
 800dde8:	4618      	mov	r0, r3
 800ddea:	f001 fc57 	bl	800f69c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d108      	bne.n	800de0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f001 f987 	bl	800f110 <vPortFree>
				vPortFree( pxTCB );
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f001 f984 	bl	800f110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de08:	e019      	b.n	800de3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800de10:	2b01      	cmp	r3, #1
 800de12:	d103      	bne.n	800de1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f001 f97b 	bl	800f110 <vPortFree>
	}
 800de1a:	e010      	b.n	800de3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800de22:	2b02      	cmp	r3, #2
 800de24:	d00b      	beq.n	800de3e <prvDeleteTCB+0x62>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <prvDeleteTCB+0x5e>
	}
 800de3e:	bf00      	nop
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
	...

0800de48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de4e:	4b0c      	ldr	r3, [pc, #48]	@ (800de80 <prvResetNextTaskUnblockTime+0x38>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d104      	bne.n	800de62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de58:	4b0a      	ldr	r3, [pc, #40]	@ (800de84 <prvResetNextTaskUnblockTime+0x3c>)
 800de5a:	f04f 32ff 	mov.w	r2, #4294967295
 800de5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de60:	e008      	b.n	800de74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de62:	4b07      	ldr	r3, [pc, #28]	@ (800de80 <prvResetNextTaskUnblockTime+0x38>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	4a04      	ldr	r2, [pc, #16]	@ (800de84 <prvResetNextTaskUnblockTime+0x3c>)
 800de72:	6013      	str	r3, [r2, #0]
}
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	24000ef4 	.word	0x24000ef4
 800de84:	24000f5c 	.word	0x24000f5c

0800de88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de8e:	4b0b      	ldr	r3, [pc, #44]	@ (800debc <xTaskGetSchedulerState+0x34>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d102      	bne.n	800de9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de96:	2301      	movs	r3, #1
 800de98:	607b      	str	r3, [r7, #4]
 800de9a:	e008      	b.n	800deae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de9c:	4b08      	ldr	r3, [pc, #32]	@ (800dec0 <xTaskGetSchedulerState+0x38>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dea4:	2302      	movs	r3, #2
 800dea6:	607b      	str	r3, [r7, #4]
 800dea8:	e001      	b.n	800deae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800deaa:	2300      	movs	r3, #0
 800deac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800deae:	687b      	ldr	r3, [r7, #4]
	}
 800deb0:	4618      	mov	r0, r3
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	24000f48 	.word	0x24000f48
 800dec0:	24000f64 	.word	0x24000f64

0800dec4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ded0:	2300      	movs	r3, #0
 800ded2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d051      	beq.n	800df7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dede:	4b2a      	ldr	r3, [pc, #168]	@ (800df88 <xTaskPriorityInherit+0xc4>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d241      	bcs.n	800df6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	699b      	ldr	r3, [r3, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	db06      	blt.n	800defe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800def0:	4b25      	ldr	r3, [pc, #148]	@ (800df88 <xTaskPriorityInherit+0xc4>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6959      	ldr	r1, [r3, #20]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df06:	4613      	mov	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	4a1f      	ldr	r2, [pc, #124]	@ (800df8c <xTaskPriorityInherit+0xc8>)
 800df10:	4413      	add	r3, r2
 800df12:	4299      	cmp	r1, r3
 800df14:	d122      	bne.n	800df5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	3304      	adds	r3, #4
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe f958 	bl	800c1d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df20:	4b19      	ldr	r3, [pc, #100]	@ (800df88 <xTaskPriorityInherit+0xc4>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df2e:	4b18      	ldr	r3, [pc, #96]	@ (800df90 <xTaskPriorityInherit+0xcc>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	429a      	cmp	r2, r3
 800df34:	d903      	bls.n	800df3e <xTaskPriorityInherit+0x7a>
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3a:	4a15      	ldr	r2, [pc, #84]	@ (800df90 <xTaskPriorityInherit+0xcc>)
 800df3c:	6013      	str	r3, [r2, #0]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df42:	4613      	mov	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4a10      	ldr	r2, [pc, #64]	@ (800df8c <xTaskPriorityInherit+0xc8>)
 800df4c:	441a      	add	r2, r3
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	3304      	adds	r3, #4
 800df52:	4619      	mov	r1, r3
 800df54:	4610      	mov	r0, r2
 800df56:	f7fe f8de 	bl	800c116 <vListInsertEnd>
 800df5a:	e004      	b.n	800df66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df5c:	4b0a      	ldr	r3, [pc, #40]	@ (800df88 <xTaskPriorityInherit+0xc4>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df66:	2301      	movs	r3, #1
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	e008      	b.n	800df7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df70:	4b05      	ldr	r3, [pc, #20]	@ (800df88 <xTaskPriorityInherit+0xc4>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df76:	429a      	cmp	r2, r3
 800df78:	d201      	bcs.n	800df7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df7a:	2301      	movs	r3, #1
 800df7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df7e:	68fb      	ldr	r3, [r7, #12]
	}
 800df80:	4618      	mov	r0, r3
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	24000a68 	.word	0x24000a68
 800df8c:	24000a6c 	.word	0x24000a6c
 800df90:	24000f44 	.word	0x24000f44

0800df94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d058      	beq.n	800e05c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dfaa:	4b2f      	ldr	r3, [pc, #188]	@ (800e068 <xTaskPriorityDisinherit+0xd4>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d00b      	beq.n	800dfcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb8:	f383 8811 	msr	BASEPRI, r3
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	60fb      	str	r3, [r7, #12]
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10b      	bne.n	800dfec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	60bb      	str	r3, [r7, #8]
}
 800dfe6:	bf00      	nop
 800dfe8:	bf00      	nop
 800dfea:	e7fd      	b.n	800dfe8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dff0:	1e5a      	subs	r2, r3, #1
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dffe:	429a      	cmp	r2, r3
 800e000:	d02c      	beq.n	800e05c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e006:	2b00      	cmp	r3, #0
 800e008:	d128      	bne.n	800e05c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	3304      	adds	r3, #4
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fe f8de 	bl	800c1d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e020:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e02c:	4b0f      	ldr	r3, [pc, #60]	@ (800e06c <xTaskPriorityDisinherit+0xd8>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	d903      	bls.n	800e03c <xTaskPriorityDisinherit+0xa8>
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e038:	4a0c      	ldr	r2, [pc, #48]	@ (800e06c <xTaskPriorityDisinherit+0xd8>)
 800e03a:	6013      	str	r3, [r2, #0]
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e040:	4613      	mov	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4a09      	ldr	r2, [pc, #36]	@ (800e070 <xTaskPriorityDisinherit+0xdc>)
 800e04a:	441a      	add	r2, r3
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	3304      	adds	r3, #4
 800e050:	4619      	mov	r1, r3
 800e052:	4610      	mov	r0, r2
 800e054:	f7fe f85f 	bl	800c116 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e058:	2301      	movs	r3, #1
 800e05a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e05c:	697b      	ldr	r3, [r7, #20]
	}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	24000a68 	.word	0x24000a68
 800e06c:	24000f44 	.word	0x24000f44
 800e070:	24000a6c 	.word	0x24000a6c

0800e074 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e082:	2301      	movs	r3, #1
 800e084:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d06c      	beq.n	800e166 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10b      	bne.n	800e0ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	60fb      	str	r3, [r7, #12]
}
 800e0a6:	bf00      	nop
 800e0a8:	bf00      	nop
 800e0aa:	e7fd      	b.n	800e0a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d902      	bls.n	800e0bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	61fb      	str	r3, [r7, #28]
 800e0ba:	e002      	b.n	800e0c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d04c      	beq.n	800e166 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d147      	bne.n	800e166 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0d6:	4b26      	ldr	r3, [pc, #152]	@ (800e170 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	69ba      	ldr	r2, [r7, #24]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d10b      	bne.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	60bb      	str	r3, [r7, #8]
}
 800e0f2:	bf00      	nop
 800e0f4:	bf00      	nop
 800e0f6:	e7fd      	b.n	800e0f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	69fa      	ldr	r2, [r7, #28]
 800e102:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db04      	blt.n	800e116 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	6959      	ldr	r1, [r3, #20]
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	4613      	mov	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4413      	add	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4a13      	ldr	r2, [pc, #76]	@ (800e174 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e126:	4413      	add	r3, r2
 800e128:	4299      	cmp	r1, r3
 800e12a:	d11c      	bne.n	800e166 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	3304      	adds	r3, #4
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe f84d 	bl	800c1d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13a:	4b0f      	ldr	r3, [pc, #60]	@ (800e178 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d903      	bls.n	800e14a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e146:	4a0c      	ldr	r2, [pc, #48]	@ (800e178 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e148:	6013      	str	r3, [r2, #0]
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e14e:	4613      	mov	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4413      	add	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4a07      	ldr	r2, [pc, #28]	@ (800e174 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e158:	441a      	add	r2, r3
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	3304      	adds	r3, #4
 800e15e:	4619      	mov	r1, r3
 800e160:	4610      	mov	r0, r2
 800e162:	f7fd ffd8 	bl	800c116 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e166:	bf00      	nop
 800e168:	3720      	adds	r7, #32
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	24000a68 	.word	0x24000a68
 800e174:	24000a6c 	.word	0x24000a6c
 800e178:	24000f44 	.word	0x24000f44

0800e17c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e180:	4b07      	ldr	r3, [pc, #28]	@ (800e1a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d004      	beq.n	800e192 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e188:	4b05      	ldr	r3, [pc, #20]	@ (800e1a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e18e:	3201      	adds	r2, #1
 800e190:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e192:	4b03      	ldr	r3, [pc, #12]	@ (800e1a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e194:	681b      	ldr	r3, [r3, #0]
	}
 800e196:	4618      	mov	r0, r3
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	24000a68 	.word	0x24000a68

0800e1a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1ae:	4b21      	ldr	r3, [pc, #132]	@ (800e234 <prvAddCurrentTaskToDelayedList+0x90>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b4:	4b20      	ldr	r3, [pc, #128]	@ (800e238 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe f808 	bl	800c1d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c6:	d10a      	bne.n	800e1de <prvAddCurrentTaskToDelayedList+0x3a>
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d007      	beq.n	800e1de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e238 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4819      	ldr	r0, [pc, #100]	@ (800e23c <prvAddCurrentTaskToDelayedList+0x98>)
 800e1d8:	f7fd ff9d 	bl	800c116 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1dc:	e026      	b.n	800e22c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1e6:	4b14      	ldr	r3, [pc, #80]	@ (800e238 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d209      	bcs.n	800e20a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1f6:	4b12      	ldr	r3, [pc, #72]	@ (800e240 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e238 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7fd ffab 	bl	800c15e <vListInsert>
}
 800e208:	e010      	b.n	800e22c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e20a:	4b0e      	ldr	r3, [pc, #56]	@ (800e244 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	4b0a      	ldr	r3, [pc, #40]	@ (800e238 <prvAddCurrentTaskToDelayedList+0x94>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3304      	adds	r3, #4
 800e214:	4619      	mov	r1, r3
 800e216:	4610      	mov	r0, r2
 800e218:	f7fd ffa1 	bl	800c15e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e21c:	4b0a      	ldr	r3, [pc, #40]	@ (800e248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	429a      	cmp	r2, r3
 800e224:	d202      	bcs.n	800e22c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e226:	4a08      	ldr	r2, [pc, #32]	@ (800e248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	6013      	str	r3, [r2, #0]
}
 800e22c:	bf00      	nop
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	24000f40 	.word	0x24000f40
 800e238:	24000a68 	.word	0x24000a68
 800e23c:	24000f28 	.word	0x24000f28
 800e240:	24000ef8 	.word	0x24000ef8
 800e244:	24000ef4 	.word	0x24000ef4
 800e248:	24000f5c 	.word	0x24000f5c

0800e24c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b08a      	sub	sp, #40	@ 0x28
 800e250:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e252:	2300      	movs	r3, #0
 800e254:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e256:	f000 fb13 	bl	800e880 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e25a:	4b1d      	ldr	r3, [pc, #116]	@ (800e2d0 <xTimerCreateTimerTask+0x84>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d021      	beq.n	800e2a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e26a:	1d3a      	adds	r2, r7, #4
 800e26c:	f107 0108 	add.w	r1, r7, #8
 800e270:	f107 030c 	add.w	r3, r7, #12
 800e274:	4618      	mov	r0, r3
 800e276:	f7fd ff07 	bl	800c088 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e27a:	6879      	ldr	r1, [r7, #4]
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	9202      	str	r2, [sp, #8]
 800e282:	9301      	str	r3, [sp, #4]
 800e284:	2302      	movs	r3, #2
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	2300      	movs	r3, #0
 800e28a:	460a      	mov	r2, r1
 800e28c:	4911      	ldr	r1, [pc, #68]	@ (800e2d4 <xTimerCreateTimerTask+0x88>)
 800e28e:	4812      	ldr	r0, [pc, #72]	@ (800e2d8 <xTimerCreateTimerTask+0x8c>)
 800e290:	f7fe feea 	bl	800d068 <xTaskCreateStatic>
 800e294:	4603      	mov	r3, r0
 800e296:	4a11      	ldr	r2, [pc, #68]	@ (800e2dc <xTimerCreateTimerTask+0x90>)
 800e298:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e29a:	4b10      	ldr	r3, [pc, #64]	@ (800e2dc <xTimerCreateTimerTask+0x90>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10b      	bne.n	800e2c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	613b      	str	r3, [r7, #16]
}
 800e2be:	bf00      	nop
 800e2c0:	bf00      	nop
 800e2c2:	e7fd      	b.n	800e2c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e2c4:	697b      	ldr	r3, [r7, #20]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3718      	adds	r7, #24
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	24000f98 	.word	0x24000f98
 800e2d4:	0801050c 	.word	0x0801050c
 800e2d8:	0800e419 	.word	0x0800e419
 800e2dc:	24000f9c 	.word	0x24000f9c

0800e2e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b08a      	sub	sp, #40	@ 0x28
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10b      	bne.n	800e310 <xTimerGenericCommand+0x30>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	623b      	str	r3, [r7, #32]
}
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	e7fd      	b.n	800e30c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e310:	4b19      	ldr	r3, [pc, #100]	@ (800e378 <xTimerGenericCommand+0x98>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d02a      	beq.n	800e36e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	2b05      	cmp	r3, #5
 800e328:	dc18      	bgt.n	800e35c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e32a:	f7ff fdad 	bl	800de88 <xTaskGetSchedulerState>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b02      	cmp	r3, #2
 800e332:	d109      	bne.n	800e348 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e334:	4b10      	ldr	r3, [pc, #64]	@ (800e378 <xTimerGenericCommand+0x98>)
 800e336:	6818      	ldr	r0, [r3, #0]
 800e338:	f107 0110 	add.w	r1, r7, #16
 800e33c:	2300      	movs	r3, #0
 800e33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e340:	f7fe f8ea 	bl	800c518 <xQueueGenericSend>
 800e344:	6278      	str	r0, [r7, #36]	@ 0x24
 800e346:	e012      	b.n	800e36e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e348:	4b0b      	ldr	r3, [pc, #44]	@ (800e378 <xTimerGenericCommand+0x98>)
 800e34a:	6818      	ldr	r0, [r3, #0]
 800e34c:	f107 0110 	add.w	r1, r7, #16
 800e350:	2300      	movs	r3, #0
 800e352:	2200      	movs	r2, #0
 800e354:	f7fe f8e0 	bl	800c518 <xQueueGenericSend>
 800e358:	6278      	str	r0, [r7, #36]	@ 0x24
 800e35a:	e008      	b.n	800e36e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e35c:	4b06      	ldr	r3, [pc, #24]	@ (800e378 <xTimerGenericCommand+0x98>)
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	f107 0110 	add.w	r1, r7, #16
 800e364:	2300      	movs	r3, #0
 800e366:	683a      	ldr	r2, [r7, #0]
 800e368:	f7fe f9d8 	bl	800c71c <xQueueGenericSendFromISR>
 800e36c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e370:	4618      	mov	r0, r3
 800e372:	3728      	adds	r7, #40	@ 0x28
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	24000f98 	.word	0x24000f98

0800e37c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b088      	sub	sp, #32
 800e380:	af02      	add	r7, sp, #8
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e386:	4b23      	ldr	r3, [pc, #140]	@ (800e414 <prvProcessExpiredTimer+0x98>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	3304      	adds	r3, #4
 800e394:	4618      	mov	r0, r3
 800e396:	f7fd ff1b 	bl	800c1d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d023      	beq.n	800e3f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	699a      	ldr	r2, [r3, #24]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	18d1      	adds	r1, r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	6978      	ldr	r0, [r7, #20]
 800e3b6:	f000 f8d5 	bl	800e564 <prvInsertTimerInActiveList>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d020      	beq.n	800e402 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	6978      	ldr	r0, [r7, #20]
 800e3cc:	f7ff ff88 	bl	800e2e0 <xTimerGenericCommand>
 800e3d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d114      	bne.n	800e402 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3dc:	f383 8811 	msr	BASEPRI, r3
 800e3e0:	f3bf 8f6f 	isb	sy
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	60fb      	str	r3, [r7, #12]
}
 800e3ea:	bf00      	nop
 800e3ec:	bf00      	nop
 800e3ee:	e7fd      	b.n	800e3ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3f6:	f023 0301 	bic.w	r3, r3, #1
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	6a1b      	ldr	r3, [r3, #32]
 800e406:	6978      	ldr	r0, [r7, #20]
 800e408:	4798      	blx	r3
}
 800e40a:	bf00      	nop
 800e40c:	3718      	adds	r7, #24
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	24000f90 	.word	0x24000f90

0800e418 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e420:	f107 0308 	add.w	r3, r7, #8
 800e424:	4618      	mov	r0, r3
 800e426:	f000 f859 	bl	800e4dc <prvGetNextExpireTime>
 800e42a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	4619      	mov	r1, r3
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f000 f805 	bl	800e440 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e436:	f000 f8d7 	bl	800e5e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e43a:	bf00      	nop
 800e43c:	e7f0      	b.n	800e420 <prvTimerTask+0x8>
	...

0800e440 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e44a:	f7ff f871 	bl	800d530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e44e:	f107 0308 	add.w	r3, r7, #8
 800e452:	4618      	mov	r0, r3
 800e454:	f000 f866 	bl	800e524 <prvSampleTimeNow>
 800e458:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d130      	bne.n	800e4c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10a      	bne.n	800e47c <prvProcessTimerOrBlockTask+0x3c>
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d806      	bhi.n	800e47c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e46e:	f7ff f8a5 	bl	800d5bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e472:	68f9      	ldr	r1, [r7, #12]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ff81 	bl	800e37c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e47a:	e024      	b.n	800e4c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d008      	beq.n	800e494 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e482:	4b13      	ldr	r3, [pc, #76]	@ (800e4d0 <prvProcessTimerOrBlockTask+0x90>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <prvProcessTimerOrBlockTask+0x50>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e000      	b.n	800e492 <prvProcessTimerOrBlockTask+0x52>
 800e490:	2300      	movs	r3, #0
 800e492:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e494:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d4 <prvProcessTimerOrBlockTask+0x94>)
 800e496:	6818      	ldr	r0, [r3, #0]
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	f7fe fdad 	bl	800d000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e4a6:	f7ff f889 	bl	800d5bc <xTaskResumeAll>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10a      	bne.n	800e4c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e4b0:	4b09      	ldr	r3, [pc, #36]	@ (800e4d8 <prvProcessTimerOrBlockTask+0x98>)
 800e4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	f3bf 8f6f 	isb	sy
}
 800e4c0:	e001      	b.n	800e4c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e4c2:	f7ff f87b 	bl	800d5bc <xTaskResumeAll>
}
 800e4c6:	bf00      	nop
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	24000f94 	.word	0x24000f94
 800e4d4:	24000f98 	.word	0x24000f98
 800e4d8:	e000ed04 	.word	0xe000ed04

0800e4dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e520 <prvGetNextExpireTime+0x44>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <prvGetNextExpireTime+0x16>
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	e000      	b.n	800e4f4 <prvGetNextExpireTime+0x18>
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d105      	bne.n	800e50c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e500:	4b07      	ldr	r3, [pc, #28]	@ (800e520 <prvGetNextExpireTime+0x44>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	e001      	b.n	800e510 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e50c:	2300      	movs	r3, #0
 800e50e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e510:	68fb      	ldr	r3, [r7, #12]
}
 800e512:	4618      	mov	r0, r3
 800e514:	3714      	adds	r7, #20
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	24000f90 	.word	0x24000f90

0800e524 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e52c:	f7ff f8e4 	bl	800d6f8 <xTaskGetTickCount>
 800e530:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e532:	4b0b      	ldr	r3, [pc, #44]	@ (800e560 <prvSampleTimeNow+0x3c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d205      	bcs.n	800e548 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e53c:	f000 f93a 	bl	800e7b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	601a      	str	r2, [r3, #0]
 800e546:	e002      	b.n	800e54e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e54e:	4a04      	ldr	r2, [pc, #16]	@ (800e560 <prvSampleTimeNow+0x3c>)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e554:	68fb      	ldr	r3, [r7, #12]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	24000fa0 	.word	0x24000fa0

0800e564 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
 800e570:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e572:	2300      	movs	r3, #0
 800e574:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e582:	68ba      	ldr	r2, [r7, #8]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	429a      	cmp	r2, r3
 800e588:	d812      	bhi.n	800e5b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	1ad2      	subs	r2, r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	429a      	cmp	r2, r3
 800e596:	d302      	bcc.n	800e59e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e598:	2301      	movs	r3, #1
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	e01b      	b.n	800e5d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e59e:	4b10      	ldr	r3, [pc, #64]	@ (800e5e0 <prvInsertTimerInActiveList+0x7c>)
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	f7fd fdd8 	bl	800c15e <vListInsert>
 800e5ae:	e012      	b.n	800e5d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d206      	bcs.n	800e5c6 <prvInsertTimerInActiveList+0x62>
 800e5b8:	68ba      	ldr	r2, [r7, #8]
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d302      	bcc.n	800e5c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	617b      	str	r3, [r7, #20]
 800e5c4:	e007      	b.n	800e5d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5c6:	4b07      	ldr	r3, [pc, #28]	@ (800e5e4 <prvInsertTimerInActiveList+0x80>)
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f7fd fdc4 	bl	800c15e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e5d6:	697b      	ldr	r3, [r7, #20]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	24000f94 	.word	0x24000f94
 800e5e4:	24000f90 	.word	0x24000f90

0800e5e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08e      	sub	sp, #56	@ 0x38
 800e5ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5ee:	e0ce      	b.n	800e78e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	da19      	bge.n	800e62a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e5f6:	1d3b      	adds	r3, r7, #4
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10b      	bne.n	800e61a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	61fb      	str	r3, [r7, #28]
}
 800e614:	bf00      	nop
 800e616:	bf00      	nop
 800e618:	e7fd      	b.n	800e616 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e620:	6850      	ldr	r0, [r2, #4]
 800e622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e624:	6892      	ldr	r2, [r2, #8]
 800e626:	4611      	mov	r1, r2
 800e628:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f2c0 80ae 	blt.w	800e78e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e638:	695b      	ldr	r3, [r3, #20]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d004      	beq.n	800e648 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e640:	3304      	adds	r3, #4
 800e642:	4618      	mov	r0, r3
 800e644:	f7fd fdc4 	bl	800c1d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e648:	463b      	mov	r3, r7
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff ff6a 	bl	800e524 <prvSampleTimeNow>
 800e650:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2b09      	cmp	r3, #9
 800e656:	f200 8097 	bhi.w	800e788 <prvProcessReceivedCommands+0x1a0>
 800e65a:	a201      	add	r2, pc, #4	@ (adr r2, 800e660 <prvProcessReceivedCommands+0x78>)
 800e65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e660:	0800e689 	.word	0x0800e689
 800e664:	0800e689 	.word	0x0800e689
 800e668:	0800e689 	.word	0x0800e689
 800e66c:	0800e6ff 	.word	0x0800e6ff
 800e670:	0800e713 	.word	0x0800e713
 800e674:	0800e75f 	.word	0x0800e75f
 800e678:	0800e689 	.word	0x0800e689
 800e67c:	0800e689 	.word	0x0800e689
 800e680:	0800e6ff 	.word	0x0800e6ff
 800e684:	0800e713 	.word	0x0800e713
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e68a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e68e:	f043 0301 	orr.w	r3, r3, #1
 800e692:	b2da      	uxtb	r2, r3
 800e694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e696:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	18d1      	adds	r1, r2, r3
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6a8:	f7ff ff5c 	bl	800e564 <prvInsertTimerInActiveList>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d06c      	beq.n	800e78c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b4:	6a1b      	ldr	r3, [r3, #32]
 800e6b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6c0:	f003 0304 	and.w	r3, r3, #4
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d061      	beq.n	800e78c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	441a      	add	r2, r3
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6da:	f7ff fe01 	bl	800e2e0 <xTimerGenericCommand>
 800e6de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d152      	bne.n	800e78c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	61bb      	str	r3, [r7, #24]
}
 800e6f8:	bf00      	nop
 800e6fa:	bf00      	nop
 800e6fc:	e7fd      	b.n	800e6fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e704:	f023 0301 	bic.w	r3, r3, #1
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e70c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e710:	e03d      	b.n	800e78e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e718:	f043 0301 	orr.w	r3, r3, #1
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e720:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e728:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10b      	bne.n	800e74a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	617b      	str	r3, [r7, #20]
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	e7fd      	b.n	800e746 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74c:	699a      	ldr	r2, [r3, #24]
 800e74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e750:	18d1      	adds	r1, r2, r3
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e758:	f7ff ff04 	bl	800e564 <prvInsertTimerInActiveList>
					break;
 800e75c:	e017      	b.n	800e78e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e764:	f003 0302 	and.w	r3, r3, #2
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d103      	bne.n	800e774 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e76c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e76e:	f000 fccf 	bl	800f110 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e772:	e00c      	b.n	800e78e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e77a:	f023 0301 	bic.w	r3, r3, #1
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e786:	e002      	b.n	800e78e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e788:	bf00      	nop
 800e78a:	e000      	b.n	800e78e <prvProcessReceivedCommands+0x1a6>
					break;
 800e78c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e78e:	4b08      	ldr	r3, [pc, #32]	@ (800e7b0 <prvProcessReceivedCommands+0x1c8>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	1d39      	adds	r1, r7, #4
 800e794:	2200      	movs	r2, #0
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe f8ee 	bl	800c978 <xQueueReceive>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f47f af26 	bne.w	800e5f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop
 800e7a8:	3730      	adds	r7, #48	@ 0x30
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	24000f98 	.word	0x24000f98

0800e7b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7ba:	e049      	b.n	800e850 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7bc:	4b2e      	ldr	r3, [pc, #184]	@ (800e878 <prvSwitchTimerLists+0xc4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e878 <prvSwitchTimerLists+0xc4>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fd fcfb 	bl	800c1d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d02f      	beq.n	800e850 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d90e      	bls.n	800e820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e80e:	4b1a      	ldr	r3, [pc, #104]	@ (800e878 <prvSwitchTimerLists+0xc4>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3304      	adds	r3, #4
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f7fd fca0 	bl	800c15e <vListInsert>
 800e81e:	e017      	b.n	800e850 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e820:	2300      	movs	r3, #0
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	2300      	movs	r3, #0
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	2100      	movs	r1, #0
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff fd58 	bl	800e2e0 <xTimerGenericCommand>
 800e830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10b      	bne.n	800e850 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	603b      	str	r3, [r7, #0]
}
 800e84a:	bf00      	nop
 800e84c:	bf00      	nop
 800e84e:	e7fd      	b.n	800e84c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e850:	4b09      	ldr	r3, [pc, #36]	@ (800e878 <prvSwitchTimerLists+0xc4>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1b0      	bne.n	800e7bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e85a:	4b07      	ldr	r3, [pc, #28]	@ (800e878 <prvSwitchTimerLists+0xc4>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e860:	4b06      	ldr	r3, [pc, #24]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a04      	ldr	r2, [pc, #16]	@ (800e878 <prvSwitchTimerLists+0xc4>)
 800e866:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e868:	4a04      	ldr	r2, [pc, #16]	@ (800e87c <prvSwitchTimerLists+0xc8>)
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	6013      	str	r3, [r2, #0]
}
 800e86e:	bf00      	nop
 800e870:	3718      	adds	r7, #24
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	24000f90 	.word	0x24000f90
 800e87c:	24000f94 	.word	0x24000f94

0800e880 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e886:	f000 f96f 	bl	800eb68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e88a:	4b15      	ldr	r3, [pc, #84]	@ (800e8e0 <prvCheckForValidListAndQueue+0x60>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d120      	bne.n	800e8d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e892:	4814      	ldr	r0, [pc, #80]	@ (800e8e4 <prvCheckForValidListAndQueue+0x64>)
 800e894:	f7fd fc12 	bl	800c0bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e898:	4813      	ldr	r0, [pc, #76]	@ (800e8e8 <prvCheckForValidListAndQueue+0x68>)
 800e89a:	f7fd fc0f 	bl	800c0bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e89e:	4b13      	ldr	r3, [pc, #76]	@ (800e8ec <prvCheckForValidListAndQueue+0x6c>)
 800e8a0:	4a10      	ldr	r2, [pc, #64]	@ (800e8e4 <prvCheckForValidListAndQueue+0x64>)
 800e8a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e8a4:	4b12      	ldr	r3, [pc, #72]	@ (800e8f0 <prvCheckForValidListAndQueue+0x70>)
 800e8a6:	4a10      	ldr	r2, [pc, #64]	@ (800e8e8 <prvCheckForValidListAndQueue+0x68>)
 800e8a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	4b11      	ldr	r3, [pc, #68]	@ (800e8f4 <prvCheckForValidListAndQueue+0x74>)
 800e8b0:	4a11      	ldr	r2, [pc, #68]	@ (800e8f8 <prvCheckForValidListAndQueue+0x78>)
 800e8b2:	2110      	movs	r1, #16
 800e8b4:	200a      	movs	r0, #10
 800e8b6:	f7fd fd1f 	bl	800c2f8 <xQueueGenericCreateStatic>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	4a08      	ldr	r2, [pc, #32]	@ (800e8e0 <prvCheckForValidListAndQueue+0x60>)
 800e8be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e8c0:	4b07      	ldr	r3, [pc, #28]	@ (800e8e0 <prvCheckForValidListAndQueue+0x60>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d005      	beq.n	800e8d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e8c8:	4b05      	ldr	r3, [pc, #20]	@ (800e8e0 <prvCheckForValidListAndQueue+0x60>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	490b      	ldr	r1, [pc, #44]	@ (800e8fc <prvCheckForValidListAndQueue+0x7c>)
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fe fb6c 	bl	800cfac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8d4:	f000 f97a 	bl	800ebcc <vPortExitCritical>
}
 800e8d8:	bf00      	nop
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	24000f98 	.word	0x24000f98
 800e8e4:	24000f68 	.word	0x24000f68
 800e8e8:	24000f7c 	.word	0x24000f7c
 800e8ec:	24000f90 	.word	0x24000f90
 800e8f0:	24000f94 	.word	0x24000f94
 800e8f4:	24001044 	.word	0x24001044
 800e8f8:	24000fa4 	.word	0x24000fa4
 800e8fc:	08010514 	.word	0x08010514

0800e900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	3b04      	subs	r3, #4
 800e910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	3b04      	subs	r3, #4
 800e91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	f023 0201 	bic.w	r2, r3, #1
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3b04      	subs	r3, #4
 800e92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e930:	4a0c      	ldr	r2, [pc, #48]	@ (800e964 <pxPortInitialiseStack+0x64>)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	3b14      	subs	r3, #20
 800e93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3b04      	subs	r3, #4
 800e946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f06f 0202 	mvn.w	r2, #2
 800e94e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3b20      	subs	r3, #32
 800e954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e956:	68fb      	ldr	r3, [r7, #12]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	0800e969 	.word	0x0800e969

0800e968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e972:	4b13      	ldr	r3, [pc, #76]	@ (800e9c0 <prvTaskExitError+0x58>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97a:	d00b      	beq.n	800e994 <prvTaskExitError+0x2c>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	60fb      	str	r3, [r7, #12]
}
 800e98e:	bf00      	nop
 800e990:	bf00      	nop
 800e992:	e7fd      	b.n	800e990 <prvTaskExitError+0x28>
	__asm volatile
 800e994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	60bb      	str	r3, [r7, #8]
}
 800e9a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9a8:	bf00      	nop
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d0fc      	beq.n	800e9aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e9b0:	bf00      	nop
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	24000010 	.word	0x24000010
	...

0800e9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e9d0:	4b07      	ldr	r3, [pc, #28]	@ (800e9f0 <pxCurrentTCBConst2>)
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	6808      	ldr	r0, [r1, #0]
 800e9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9da:	f380 8809 	msr	PSP, r0
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f04f 0000 	mov.w	r0, #0
 800e9e6:	f380 8811 	msr	BASEPRI, r0
 800e9ea:	4770      	bx	lr
 800e9ec:	f3af 8000 	nop.w

0800e9f0 <pxCurrentTCBConst2>:
 800e9f0:	24000a68 	.word	0x24000a68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e9f4:	bf00      	nop
 800e9f6:	bf00      	nop

0800e9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e9f8:	4808      	ldr	r0, [pc, #32]	@ (800ea1c <prvPortStartFirstTask+0x24>)
 800e9fa:	6800      	ldr	r0, [r0, #0]
 800e9fc:	6800      	ldr	r0, [r0, #0]
 800e9fe:	f380 8808 	msr	MSP, r0
 800ea02:	f04f 0000 	mov.w	r0, #0
 800ea06:	f380 8814 	msr	CONTROL, r0
 800ea0a:	b662      	cpsie	i
 800ea0c:	b661      	cpsie	f
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	df00      	svc	0
 800ea18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea1a:	bf00      	nop
 800ea1c:	e000ed08 	.word	0xe000ed08

0800ea20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea26:	4b47      	ldr	r3, [pc, #284]	@ (800eb44 <xPortStartScheduler+0x124>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a47      	ldr	r2, [pc, #284]	@ (800eb48 <xPortStartScheduler+0x128>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d10b      	bne.n	800ea48 <xPortStartScheduler+0x28>
	__asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	613b      	str	r3, [r7, #16]
}
 800ea42:	bf00      	nop
 800ea44:	bf00      	nop
 800ea46:	e7fd      	b.n	800ea44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ea48:	4b3e      	ldr	r3, [pc, #248]	@ (800eb44 <xPortStartScheduler+0x124>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4a3f      	ldr	r2, [pc, #252]	@ (800eb4c <xPortStartScheduler+0x12c>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d10b      	bne.n	800ea6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ea52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea56:	f383 8811 	msr	BASEPRI, r3
 800ea5a:	f3bf 8f6f 	isb	sy
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	60fb      	str	r3, [r7, #12]
}
 800ea64:	bf00      	nop
 800ea66:	bf00      	nop
 800ea68:	e7fd      	b.n	800ea66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea6a:	4b39      	ldr	r3, [pc, #228]	@ (800eb50 <xPortStartScheduler+0x130>)
 800ea6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	22ff      	movs	r2, #255	@ 0xff
 800ea7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	4b31      	ldr	r3, [pc, #196]	@ (800eb54 <xPortStartScheduler+0x134>)
 800ea90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ea92:	4b31      	ldr	r3, [pc, #196]	@ (800eb58 <xPortStartScheduler+0x138>)
 800ea94:	2207      	movs	r2, #7
 800ea96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea98:	e009      	b.n	800eaae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ea9a:	4b2f      	ldr	r3, [pc, #188]	@ (800eb58 <xPortStartScheduler+0x138>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	4a2d      	ldr	r2, [pc, #180]	@ (800eb58 <xPortStartScheduler+0x138>)
 800eaa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eaa4:	78fb      	ldrb	r3, [r7, #3]
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eaae:	78fb      	ldrb	r3, [r7, #3]
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eab6:	2b80      	cmp	r3, #128	@ 0x80
 800eab8:	d0ef      	beq.n	800ea9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eaba:	4b27      	ldr	r3, [pc, #156]	@ (800eb58 <xPortStartScheduler+0x138>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f1c3 0307 	rsb	r3, r3, #7
 800eac2:	2b04      	cmp	r3, #4
 800eac4:	d00b      	beq.n	800eade <xPortStartScheduler+0xbe>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	60bb      	str	r3, [r7, #8]
}
 800ead8:	bf00      	nop
 800eada:	bf00      	nop
 800eadc:	e7fd      	b.n	800eada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eade:	4b1e      	ldr	r3, [pc, #120]	@ (800eb58 <xPortStartScheduler+0x138>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	021b      	lsls	r3, r3, #8
 800eae4:	4a1c      	ldr	r2, [pc, #112]	@ (800eb58 <xPortStartScheduler+0x138>)
 800eae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eae8:	4b1b      	ldr	r3, [pc, #108]	@ (800eb58 <xPortStartScheduler+0x138>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eaf0:	4a19      	ldr	r2, [pc, #100]	@ (800eb58 <xPortStartScheduler+0x138>)
 800eaf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	b2da      	uxtb	r2, r3
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eafc:	4b17      	ldr	r3, [pc, #92]	@ (800eb5c <xPortStartScheduler+0x13c>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a16      	ldr	r2, [pc, #88]	@ (800eb5c <xPortStartScheduler+0x13c>)
 800eb02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eb06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb08:	4b14      	ldr	r3, [pc, #80]	@ (800eb5c <xPortStartScheduler+0x13c>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a13      	ldr	r2, [pc, #76]	@ (800eb5c <xPortStartScheduler+0x13c>)
 800eb0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eb12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb14:	f000 f9a6 	bl	800ee64 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb18:	4b11      	ldr	r3, [pc, #68]	@ (800eb60 <xPortStartScheduler+0x140>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb1e:	f000 f9dd 	bl	800eedc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb22:	4b10      	ldr	r3, [pc, #64]	@ (800eb64 <xPortStartScheduler+0x144>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a0f      	ldr	r2, [pc, #60]	@ (800eb64 <xPortStartScheduler+0x144>)
 800eb28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eb2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb2e:	f7ff ff63 	bl	800e9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb32:	f7fe fed3 	bl	800d8dc <vTaskSwitchContext>
	prvTaskExitError();
 800eb36:	f7ff ff17 	bl	800e968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3718      	adds	r7, #24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	e000ed00 	.word	0xe000ed00
 800eb48:	410fc271 	.word	0x410fc271
 800eb4c:	410fc270 	.word	0x410fc270
 800eb50:	e000e400 	.word	0xe000e400
 800eb54:	240010a0 	.word	0x240010a0
 800eb58:	240010a4 	.word	0x240010a4
 800eb5c:	e000ed20 	.word	0xe000ed20
 800eb60:	24000010 	.word	0x24000010
 800eb64:	e000ef34 	.word	0xe000ef34

0800eb68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	607b      	str	r3, [r7, #4]
}
 800eb80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb82:	4b10      	ldr	r3, [pc, #64]	@ (800ebc4 <vPortEnterCritical+0x5c>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	3301      	adds	r3, #1
 800eb88:	4a0e      	ldr	r2, [pc, #56]	@ (800ebc4 <vPortEnterCritical+0x5c>)
 800eb8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb8c:	4b0d      	ldr	r3, [pc, #52]	@ (800ebc4 <vPortEnterCritical+0x5c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d110      	bne.n	800ebb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb94:	4b0c      	ldr	r3, [pc, #48]	@ (800ebc8 <vPortEnterCritical+0x60>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00b      	beq.n	800ebb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800eb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	603b      	str	r3, [r7, #0]
}
 800ebb0:	bf00      	nop
 800ebb2:	bf00      	nop
 800ebb4:	e7fd      	b.n	800ebb2 <vPortEnterCritical+0x4a>
	}
}
 800ebb6:	bf00      	nop
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	24000010 	.word	0x24000010
 800ebc8:	e000ed04 	.word	0xe000ed04

0800ebcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ebd2:	4b12      	ldr	r3, [pc, #72]	@ (800ec1c <vPortExitCritical+0x50>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10b      	bne.n	800ebf2 <vPortExitCritical+0x26>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	607b      	str	r3, [r7, #4]
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	e7fd      	b.n	800ebee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ebf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ec1c <vPortExitCritical+0x50>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	4a08      	ldr	r2, [pc, #32]	@ (800ec1c <vPortExitCritical+0x50>)
 800ebfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebfc:	4b07      	ldr	r3, [pc, #28]	@ (800ec1c <vPortExitCritical+0x50>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d105      	bne.n	800ec10 <vPortExitCritical+0x44>
 800ec04:	2300      	movs	r3, #0
 800ec06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	f383 8811 	msr	BASEPRI, r3
}
 800ec0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr
 800ec1c:	24000010 	.word	0x24000010

0800ec20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec20:	f3ef 8009 	mrs	r0, PSP
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	4b15      	ldr	r3, [pc, #84]	@ (800ec80 <pxCurrentTCBConst>)
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	f01e 0f10 	tst.w	lr, #16
 800ec30:	bf08      	it	eq
 800ec32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3a:	6010      	str	r0, [r2, #0]
 800ec3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ec44:	f380 8811 	msr	BASEPRI, r0
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f7fe fe44 	bl	800d8dc <vTaskSwitchContext>
 800ec54:	f04f 0000 	mov.w	r0, #0
 800ec58:	f380 8811 	msr	BASEPRI, r0
 800ec5c:	bc09      	pop	{r0, r3}
 800ec5e:	6819      	ldr	r1, [r3, #0]
 800ec60:	6808      	ldr	r0, [r1, #0]
 800ec62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec66:	f01e 0f10 	tst.w	lr, #16
 800ec6a:	bf08      	it	eq
 800ec6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec70:	f380 8809 	msr	PSP, r0
 800ec74:	f3bf 8f6f 	isb	sy
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	f3af 8000 	nop.w

0800ec80 <pxCurrentTCBConst>:
 800ec80:	24000a68 	.word	0x24000a68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec84:	bf00      	nop
 800ec86:	bf00      	nop

0800ec88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	607b      	str	r3, [r7, #4]
}
 800eca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eca2:	f7fe fd61 	bl	800d768 <xTaskIncrementTick>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d003      	beq.n	800ecb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ecac:	4b06      	ldr	r3, [pc, #24]	@ (800ecc8 <xPortSysTickHandler+0x40>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f383 8811 	msr	BASEPRI, r3
}
 800ecbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	e000ed04 	.word	0xe000ed04

0800eccc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b088      	sub	sp, #32
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800ecd4:	4b5d      	ldr	r3, [pc, #372]	@ (800ee4c <vPortSuppressTicksAndSleep+0x180>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d902      	bls.n	800ece4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800ecde:	4b5b      	ldr	r3, [pc, #364]	@ (800ee4c <vPortSuppressTicksAndSleep+0x180>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800ece4:	4b5a      	ldr	r3, [pc, #360]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a59      	ldr	r2, [pc, #356]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ecea:	f023 0301 	bic.w	r3, r3, #1
 800ecee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800ecf0:	4b58      	ldr	r3, [pc, #352]	@ (800ee54 <vPortSuppressTicksAndSleep+0x188>)
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	4957      	ldr	r1, [pc, #348]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800ecfa:	6809      	ldr	r1, [r1, #0]
 800ecfc:	fb01 f303 	mul.w	r3, r1, r3
 800ed00:	4413      	add	r3, r2
 800ed02:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800ed04:	4b55      	ldr	r3, [pc, #340]	@ (800ee5c <vPortSuppressTicksAndSleep+0x190>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	69fa      	ldr	r2, [r7, #28]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d904      	bls.n	800ed18 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800ed0e:	4b53      	ldr	r3, [pc, #332]	@ (800ee5c <vPortSuppressTicksAndSleep+0x190>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	69fa      	ldr	r2, [r7, #28]
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800ed18:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800ed1a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800ed1e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800ed22:	f7fe ffbf 	bl	800dca4 <eTaskConfirmSleepModeStatus>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d110      	bne.n	800ed4e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ed2c:	4b49      	ldr	r3, [pc, #292]	@ (800ee54 <vPortSuppressTicksAndSleep+0x188>)
 800ed2e:	4a4c      	ldr	r2, [pc, #304]	@ (800ee60 <vPortSuppressTicksAndSleep+0x194>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ed34:	4b46      	ldr	r3, [pc, #280]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a45      	ldr	r2, [pc, #276]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ed3a:	f043 0301 	orr.w	r3, r3, #1
 800ed3e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ed40:	4b45      	ldr	r3, [pc, #276]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a46      	ldr	r2, [pc, #280]	@ (800ee60 <vPortSuppressTicksAndSleep+0x194>)
 800ed46:	3b01      	subs	r3, #1
 800ed48:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800ed4a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800ed4c:	e079      	b.n	800ee42 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800ed4e:	4a44      	ldr	r2, [pc, #272]	@ (800ee60 <vPortSuppressTicksAndSleep+0x194>)
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed54:	4b3f      	ldr	r3, [pc, #252]	@ (800ee54 <vPortSuppressTicksAndSleep+0x188>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ed5a:	4b3d      	ldr	r3, [pc, #244]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4a3c      	ldr	r2, [pc, #240]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ed60:	f043 0301 	orr.w	r3, r3, #1
 800ed64:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	613b      	str	r3, [r7, #16]
 800ed6e:	6938      	ldr	r0, [r7, #16]
 800ed70:	f7f1 fcae 	bl	80006d0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d004      	beq.n	800ed84 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800ed7a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800ed7e:	bf30      	wfi
				__asm volatile( "isb" );
 800ed80:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7f1 fcad 	bl	80006e4 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800ed8a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800ed8c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ed90:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800ed94:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800ed96:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ed9a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800ed9e:	4b2c      	ldr	r3, [pc, #176]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800eda0:	2206      	movs	r2, #6
 800eda2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800eda4:	4b2a      	ldr	r3, [pc, #168]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01d      	beq.n	800edec <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800edb0:	4b29      	ldr	r3, [pc, #164]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	4b27      	ldr	r3, [pc, #156]	@ (800ee54 <vPortSuppressTicksAndSleep+0x188>)
 800edb6:	6819      	ldr	r1, [r3, #0]
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	1acb      	subs	r3, r1, r3
 800edbc:	4413      	add	r3, r2
 800edbe:	3b01      	subs	r3, #1
 800edc0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800edc2:	4b26      	ldr	r3, [pc, #152]	@ (800ee5c <vPortSuppressTicksAndSleep+0x190>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d304      	bcc.n	800edd6 <vPortSuppressTicksAndSleep+0x10a>
 800edcc:	4b22      	ldr	r3, [pc, #136]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d903      	bls.n	800edde <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800edd6:	4b20      	ldr	r3, [pc, #128]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	3b01      	subs	r3, #1
 800eddc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800edde:	4a20      	ldr	r2, [pc, #128]	@ (800ee60 <vPortSuppressTicksAndSleep+0x194>)
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3b01      	subs	r3, #1
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	e018      	b.n	800ee1e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800edec:	4b1a      	ldr	r3, [pc, #104]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	fb03 f202 	mul.w	r2, r3, r2
 800edf6:	4b17      	ldr	r3, [pc, #92]	@ (800ee54 <vPortSuppressTicksAndSleep+0x188>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800edfe:	4b16      	ldr	r3, [pc, #88]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee08:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	4a12      	ldr	r2, [pc, #72]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800ee10:	6812      	ldr	r2, [r2, #0]
 800ee12:	fb03 f202 	mul.w	r2, r3, r2
 800ee16:	4912      	ldr	r1, [pc, #72]	@ (800ee60 <vPortSuppressTicksAndSleep+0x194>)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee54 <vPortSuppressTicksAndSleep+0x188>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ee24:	4b0a      	ldr	r3, [pc, #40]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a09      	ldr	r2, [pc, #36]	@ (800ee50 <vPortSuppressTicksAndSleep+0x184>)
 800ee2a:	f043 0301 	orr.w	r3, r3, #1
 800ee2e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800ee30:	69b8      	ldr	r0, [r7, #24]
 800ee32:	f7fe fc71 	bl	800d718 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ee36:	4b08      	ldr	r3, [pc, #32]	@ (800ee58 <vPortSuppressTicksAndSleep+0x18c>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a09      	ldr	r2, [pc, #36]	@ (800ee60 <vPortSuppressTicksAndSleep+0x194>)
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800ee40:	b662      	cpsie	i
	}
 800ee42:	bf00      	nop
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	24001098 	.word	0x24001098
 800ee50:	e000e010 	.word	0xe000e010
 800ee54:	e000e018 	.word	0xe000e018
 800ee58:	24001094 	.word	0x24001094
 800ee5c:	2400109c 	.word	0x2400109c
 800ee60:	e000e014 	.word	0xe000e014

0800ee64 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee64:	b480      	push	{r7}
 800ee66:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ee68:	4b14      	ldr	r3, [pc, #80]	@ (800eebc <vPortSetupTimerInterrupt+0x58>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a14      	ldr	r2, [pc, #80]	@ (800eec0 <vPortSetupTimerInterrupt+0x5c>)
 800ee6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee72:	099b      	lsrs	r3, r3, #6
 800ee74:	4a13      	ldr	r2, [pc, #76]	@ (800eec4 <vPortSetupTimerInterrupt+0x60>)
 800ee76:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800ee78:	4b12      	ldr	r3, [pc, #72]	@ (800eec4 <vPortSetupTimerInterrupt+0x60>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800ee80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee84:	4a10      	ldr	r2, [pc, #64]	@ (800eec8 <vPortSetupTimerInterrupt+0x64>)
 800ee86:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800ee88:	4b10      	ldr	r3, [pc, #64]	@ (800eecc <vPortSetupTimerInterrupt+0x68>)
 800ee8a:	222d      	movs	r2, #45	@ 0x2d
 800ee8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee8e:	4b10      	ldr	r3, [pc, #64]	@ (800eed0 <vPortSetupTimerInterrupt+0x6c>)
 800ee90:	2200      	movs	r2, #0
 800ee92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee94:	4b0f      	ldr	r3, [pc, #60]	@ (800eed4 <vPortSetupTimerInterrupt+0x70>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee9a:	4b08      	ldr	r3, [pc, #32]	@ (800eebc <vPortSetupTimerInterrupt+0x58>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a08      	ldr	r2, [pc, #32]	@ (800eec0 <vPortSetupTimerInterrupt+0x5c>)
 800eea0:	fba2 2303 	umull	r2, r3, r2, r3
 800eea4:	099b      	lsrs	r3, r3, #6
 800eea6:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <vPortSetupTimerInterrupt+0x74>)
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eeac:	4b08      	ldr	r3, [pc, #32]	@ (800eed0 <vPortSetupTimerInterrupt+0x6c>)
 800eeae:	2207      	movs	r2, #7
 800eeb0:	601a      	str	r2, [r3, #0]
}
 800eeb2:	bf00      	nop
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	24000000 	.word	0x24000000
 800eec0:	10624dd3 	.word	0x10624dd3
 800eec4:	24001094 	.word	0x24001094
 800eec8:	24001098 	.word	0x24001098
 800eecc:	2400109c 	.word	0x2400109c
 800eed0:	e000e010 	.word	0xe000e010
 800eed4:	e000e018 	.word	0xe000e018
 800eed8:	e000e014 	.word	0xe000e014

0800eedc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eedc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800eeec <vPortEnableVFP+0x10>
 800eee0:	6801      	ldr	r1, [r0, #0]
 800eee2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800eee6:	6001      	str	r1, [r0, #0]
 800eee8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eeea:	bf00      	nop
 800eeec:	e000ed88 	.word	0xe000ed88

0800eef0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eef0:	b480      	push	{r7}
 800eef2:	b085      	sub	sp, #20
 800eef4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eef6:	f3ef 8305 	mrs	r3, IPSR
 800eefa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2b0f      	cmp	r3, #15
 800ef00:	d915      	bls.n	800ef2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef02:	4a18      	ldr	r2, [pc, #96]	@ (800ef64 <vPortValidateInterruptPriority+0x74>)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	4413      	add	r3, r2
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef0c:	4b16      	ldr	r3, [pc, #88]	@ (800ef68 <vPortValidateInterruptPriority+0x78>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	7afa      	ldrb	r2, [r7, #11]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d20b      	bcs.n	800ef2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ef16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1a:	f383 8811 	msr	BASEPRI, r3
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	607b      	str	r3, [r7, #4]
}
 800ef28:	bf00      	nop
 800ef2a:	bf00      	nop
 800ef2c:	e7fd      	b.n	800ef2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ef6c <vPortValidateInterruptPriority+0x7c>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ef36:	4b0e      	ldr	r3, [pc, #56]	@ (800ef70 <vPortValidateInterruptPriority+0x80>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d90b      	bls.n	800ef56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	603b      	str	r3, [r7, #0]
}
 800ef50:	bf00      	nop
 800ef52:	bf00      	nop
 800ef54:	e7fd      	b.n	800ef52 <vPortValidateInterruptPriority+0x62>
	}
 800ef56:	bf00      	nop
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	e000e3f0 	.word	0xe000e3f0
 800ef68:	240010a0 	.word	0x240010a0
 800ef6c:	e000ed0c 	.word	0xe000ed0c
 800ef70:	240010a4 	.word	0x240010a4

0800ef74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b08a      	sub	sp, #40	@ 0x28
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef80:	f7fe fad6 	bl	800d530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef84:	4b5c      	ldr	r3, [pc, #368]	@ (800f0f8 <pvPortMalloc+0x184>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d101      	bne.n	800ef90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef8c:	f000 f924 	bl	800f1d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef90:	4b5a      	ldr	r3, [pc, #360]	@ (800f0fc <pvPortMalloc+0x188>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4013      	ands	r3, r2
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f040 8095 	bne.w	800f0c8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d01e      	beq.n	800efe2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800efa4:	2208      	movs	r2, #8
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4413      	add	r3, r2
 800efaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f003 0307 	and.w	r3, r3, #7
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d015      	beq.n	800efe2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f023 0307 	bic.w	r3, r3, #7
 800efbc:	3308      	adds	r3, #8
 800efbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f003 0307 	and.w	r3, r3, #7
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00b      	beq.n	800efe2 <pvPortMalloc+0x6e>
	__asm volatile
 800efca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	617b      	str	r3, [r7, #20]
}
 800efdc:	bf00      	nop
 800efde:	bf00      	nop
 800efe0:	e7fd      	b.n	800efde <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d06f      	beq.n	800f0c8 <pvPortMalloc+0x154>
 800efe8:	4b45      	ldr	r3, [pc, #276]	@ (800f100 <pvPortMalloc+0x18c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d86a      	bhi.n	800f0c8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eff2:	4b44      	ldr	r3, [pc, #272]	@ (800f104 <pvPortMalloc+0x190>)
 800eff4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eff6:	4b43      	ldr	r3, [pc, #268]	@ (800f104 <pvPortMalloc+0x190>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800effc:	e004      	b.n	800f008 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800effe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f000:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d903      	bls.n	800f01a <pvPortMalloc+0xa6>
 800f012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1f1      	bne.n	800effe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f01a:	4b37      	ldr	r3, [pc, #220]	@ (800f0f8 <pvPortMalloc+0x184>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f020:	429a      	cmp	r2, r3
 800f022:	d051      	beq.n	800f0c8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2208      	movs	r2, #8
 800f02a:	4413      	add	r3, r2
 800f02c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	6a3b      	ldr	r3, [r7, #32]
 800f034:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f038:	685a      	ldr	r2, [r3, #4]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	1ad2      	subs	r2, r2, r3
 800f03e:	2308      	movs	r3, #8
 800f040:	005b      	lsls	r3, r3, #1
 800f042:	429a      	cmp	r2, r3
 800f044:	d920      	bls.n	800f088 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4413      	add	r3, r2
 800f04c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	f003 0307 	and.w	r3, r3, #7
 800f054:	2b00      	cmp	r3, #0
 800f056:	d00b      	beq.n	800f070 <pvPortMalloc+0xfc>
	__asm volatile
 800f058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	613b      	str	r3, [r7, #16]
}
 800f06a:	bf00      	nop
 800f06c:	bf00      	nop
 800f06e:	e7fd      	b.n	800f06c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f072:	685a      	ldr	r2, [r3, #4]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	1ad2      	subs	r2, r2, r3
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f082:	69b8      	ldr	r0, [r7, #24]
 800f084:	f000 f90a 	bl	800f29c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f088:	4b1d      	ldr	r3, [pc, #116]	@ (800f100 <pvPortMalloc+0x18c>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	4a1b      	ldr	r2, [pc, #108]	@ (800f100 <pvPortMalloc+0x18c>)
 800f094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f096:	4b1a      	ldr	r3, [pc, #104]	@ (800f100 <pvPortMalloc+0x18c>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	4b1b      	ldr	r3, [pc, #108]	@ (800f108 <pvPortMalloc+0x194>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d203      	bcs.n	800f0aa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0a2:	4b17      	ldr	r3, [pc, #92]	@ (800f100 <pvPortMalloc+0x18c>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a18      	ldr	r2, [pc, #96]	@ (800f108 <pvPortMalloc+0x194>)
 800f0a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ac:	685a      	ldr	r2, [r3, #4]
 800f0ae:	4b13      	ldr	r3, [pc, #76]	@ (800f0fc <pvPortMalloc+0x188>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	431a      	orrs	r2, r3
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f0be:	4b13      	ldr	r3, [pc, #76]	@ (800f10c <pvPortMalloc+0x198>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	4a11      	ldr	r2, [pc, #68]	@ (800f10c <pvPortMalloc+0x198>)
 800f0c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f0c8:	f7fe fa78 	bl	800d5bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	f003 0307 	and.w	r3, r3, #7
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <pvPortMalloc+0x17a>
	__asm volatile
 800f0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	60fb      	str	r3, [r7, #12]
}
 800f0e8:	bf00      	nop
 800f0ea:	bf00      	nop
 800f0ec:	e7fd      	b.n	800f0ea <pvPortMalloc+0x176>
	return pvReturn;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3728      	adds	r7, #40	@ 0x28
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	24004cb0 	.word	0x24004cb0
 800f0fc:	24004cc4 	.word	0x24004cc4
 800f100:	24004cb4 	.word	0x24004cb4
 800f104:	24004ca8 	.word	0x24004ca8
 800f108:	24004cb8 	.word	0x24004cb8
 800f10c:	24004cbc 	.word	0x24004cbc

0800f110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d04f      	beq.n	800f1c2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f122:	2308      	movs	r3, #8
 800f124:	425b      	negs	r3, r3
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	4413      	add	r3, r2
 800f12a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	685a      	ldr	r2, [r3, #4]
 800f134:	4b25      	ldr	r3, [pc, #148]	@ (800f1cc <vPortFree+0xbc>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4013      	ands	r3, r2
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10b      	bne.n	800f156 <vPortFree+0x46>
	__asm volatile
 800f13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	60fb      	str	r3, [r7, #12]
}
 800f150:	bf00      	nop
 800f152:	bf00      	nop
 800f154:	e7fd      	b.n	800f152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00b      	beq.n	800f176 <vPortFree+0x66>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	60bb      	str	r3, [r7, #8]
}
 800f170:	bf00      	nop
 800f172:	bf00      	nop
 800f174:	e7fd      	b.n	800f172 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	685a      	ldr	r2, [r3, #4]
 800f17a:	4b14      	ldr	r3, [pc, #80]	@ (800f1cc <vPortFree+0xbc>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4013      	ands	r3, r2
 800f180:	2b00      	cmp	r3, #0
 800f182:	d01e      	beq.n	800f1c2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d11a      	bne.n	800f1c2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	4b0e      	ldr	r3, [pc, #56]	@ (800f1cc <vPortFree+0xbc>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	43db      	mvns	r3, r3
 800f196:	401a      	ands	r2, r3
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f19c:	f7fe f9c8 	bl	800d530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d0 <vPortFree+0xc0>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	4a09      	ldr	r2, [pc, #36]	@ (800f1d0 <vPortFree+0xc0>)
 800f1ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1ae:	6938      	ldr	r0, [r7, #16]
 800f1b0:	f000 f874 	bl	800f29c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f1b4:	4b07      	ldr	r3, [pc, #28]	@ (800f1d4 <vPortFree+0xc4>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	4a06      	ldr	r2, [pc, #24]	@ (800f1d4 <vPortFree+0xc4>)
 800f1bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f1be:	f7fe f9fd 	bl	800d5bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f1c2:	bf00      	nop
 800f1c4:	3718      	adds	r7, #24
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	24004cc4 	.word	0x24004cc4
 800f1d0:	24004cb4 	.word	0x24004cb4
 800f1d4:	24004cc0 	.word	0x24004cc0

0800f1d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f1de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f1e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1e4:	4b27      	ldr	r3, [pc, #156]	@ (800f284 <prvHeapInit+0xac>)
 800f1e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f003 0307 	and.w	r3, r3, #7
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00c      	beq.n	800f20c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3307      	adds	r3, #7
 800f1f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f023 0307 	bic.w	r3, r3, #7
 800f1fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f200:	68ba      	ldr	r2, [r7, #8]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	4a1f      	ldr	r2, [pc, #124]	@ (800f284 <prvHeapInit+0xac>)
 800f208:	4413      	add	r3, r2
 800f20a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f210:	4a1d      	ldr	r2, [pc, #116]	@ (800f288 <prvHeapInit+0xb0>)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f216:	4b1c      	ldr	r3, [pc, #112]	@ (800f288 <prvHeapInit+0xb0>)
 800f218:	2200      	movs	r2, #0
 800f21a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	4413      	add	r3, r2
 800f222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f224:	2208      	movs	r2, #8
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	1a9b      	subs	r3, r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f023 0307 	bic.w	r3, r3, #7
 800f232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	4a15      	ldr	r2, [pc, #84]	@ (800f28c <prvHeapInit+0xb4>)
 800f238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f23a:	4b14      	ldr	r3, [pc, #80]	@ (800f28c <prvHeapInit+0xb4>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2200      	movs	r2, #0
 800f240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f242:	4b12      	ldr	r3, [pc, #72]	@ (800f28c <prvHeapInit+0xb4>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2200      	movs	r2, #0
 800f248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	1ad2      	subs	r2, r2, r3
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f258:	4b0c      	ldr	r3, [pc, #48]	@ (800f28c <prvHeapInit+0xb4>)
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	4a0a      	ldr	r2, [pc, #40]	@ (800f290 <prvHeapInit+0xb8>)
 800f266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	4a09      	ldr	r2, [pc, #36]	@ (800f294 <prvHeapInit+0xbc>)
 800f26e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f270:	4b09      	ldr	r3, [pc, #36]	@ (800f298 <prvHeapInit+0xc0>)
 800f272:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f276:	601a      	str	r2, [r3, #0]
}
 800f278:	bf00      	nop
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	240010a8 	.word	0x240010a8
 800f288:	24004ca8 	.word	0x24004ca8
 800f28c:	24004cb0 	.word	0x24004cb0
 800f290:	24004cb8 	.word	0x24004cb8
 800f294:	24004cb4 	.word	0x24004cb4
 800f298:	24004cc4 	.word	0x24004cc4

0800f29c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f29c:	b480      	push	{r7}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2a4:	4b28      	ldr	r3, [pc, #160]	@ (800f348 <prvInsertBlockIntoFreeList+0xac>)
 800f2a6:	60fb      	str	r3, [r7, #12]
 800f2a8:	e002      	b.n	800f2b0 <prvInsertBlockIntoFreeList+0x14>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	60fb      	str	r3, [r7, #12]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d8f7      	bhi.n	800f2aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d108      	bne.n	800f2de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	441a      	add	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	441a      	add	r2, r3
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d118      	bne.n	800f324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	4b15      	ldr	r3, [pc, #84]	@ (800f34c <prvInsertBlockIntoFreeList+0xb0>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d00d      	beq.n	800f31a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	685a      	ldr	r2, [r3, #4]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	441a      	add	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	e008      	b.n	800f32c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f31a:	4b0c      	ldr	r3, [pc, #48]	@ (800f34c <prvInsertBlockIntoFreeList+0xb0>)
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	e003      	b.n	800f32c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d002      	beq.n	800f33a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f33a:	bf00      	nop
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	24004ca8 	.word	0x24004ca8
 800f34c:	24004cb0 	.word	0x24004cb0

0800f350 <srand>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4b10      	ldr	r3, [pc, #64]	@ (800f394 <srand+0x44>)
 800f354:	681d      	ldr	r5, [r3, #0]
 800f356:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f358:	4604      	mov	r4, r0
 800f35a:	b9b3      	cbnz	r3, 800f38a <srand+0x3a>
 800f35c:	2018      	movs	r0, #24
 800f35e:	f000 fadf 	bl	800f920 <malloc>
 800f362:	4602      	mov	r2, r0
 800f364:	6328      	str	r0, [r5, #48]	@ 0x30
 800f366:	b920      	cbnz	r0, 800f372 <srand+0x22>
 800f368:	4b0b      	ldr	r3, [pc, #44]	@ (800f398 <srand+0x48>)
 800f36a:	480c      	ldr	r0, [pc, #48]	@ (800f39c <srand+0x4c>)
 800f36c:	2146      	movs	r1, #70	@ 0x46
 800f36e:	f000 fa6f 	bl	800f850 <__assert_func>
 800f372:	490b      	ldr	r1, [pc, #44]	@ (800f3a0 <srand+0x50>)
 800f374:	4b0b      	ldr	r3, [pc, #44]	@ (800f3a4 <srand+0x54>)
 800f376:	e9c0 1300 	strd	r1, r3, [r0]
 800f37a:	4b0b      	ldr	r3, [pc, #44]	@ (800f3a8 <srand+0x58>)
 800f37c:	6083      	str	r3, [r0, #8]
 800f37e:	230b      	movs	r3, #11
 800f380:	8183      	strh	r3, [r0, #12]
 800f382:	2100      	movs	r1, #0
 800f384:	2001      	movs	r0, #1
 800f386:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f38a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f38c:	2200      	movs	r2, #0
 800f38e:	611c      	str	r4, [r3, #16]
 800f390:	615a      	str	r2, [r3, #20]
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	24000020 	.word	0x24000020
 800f398:	08010580 	.word	0x08010580
 800f39c:	08010597 	.word	0x08010597
 800f3a0:	abcd330e 	.word	0xabcd330e
 800f3a4:	e66d1234 	.word	0xe66d1234
 800f3a8:	0005deec 	.word	0x0005deec

0800f3ac <rand>:
 800f3ac:	4b16      	ldr	r3, [pc, #88]	@ (800f408 <rand+0x5c>)
 800f3ae:	b510      	push	{r4, lr}
 800f3b0:	681c      	ldr	r4, [r3, #0]
 800f3b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f3b4:	b9b3      	cbnz	r3, 800f3e4 <rand+0x38>
 800f3b6:	2018      	movs	r0, #24
 800f3b8:	f000 fab2 	bl	800f920 <malloc>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	6320      	str	r0, [r4, #48]	@ 0x30
 800f3c0:	b920      	cbnz	r0, 800f3cc <rand+0x20>
 800f3c2:	4b12      	ldr	r3, [pc, #72]	@ (800f40c <rand+0x60>)
 800f3c4:	4812      	ldr	r0, [pc, #72]	@ (800f410 <rand+0x64>)
 800f3c6:	2152      	movs	r1, #82	@ 0x52
 800f3c8:	f000 fa42 	bl	800f850 <__assert_func>
 800f3cc:	4911      	ldr	r1, [pc, #68]	@ (800f414 <rand+0x68>)
 800f3ce:	4b12      	ldr	r3, [pc, #72]	@ (800f418 <rand+0x6c>)
 800f3d0:	e9c0 1300 	strd	r1, r3, [r0]
 800f3d4:	4b11      	ldr	r3, [pc, #68]	@ (800f41c <rand+0x70>)
 800f3d6:	6083      	str	r3, [r0, #8]
 800f3d8:	230b      	movs	r3, #11
 800f3da:	8183      	strh	r3, [r0, #12]
 800f3dc:	2100      	movs	r1, #0
 800f3de:	2001      	movs	r0, #1
 800f3e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f3e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f3e6:	480e      	ldr	r0, [pc, #56]	@ (800f420 <rand+0x74>)
 800f3e8:	690b      	ldr	r3, [r1, #16]
 800f3ea:	694c      	ldr	r4, [r1, #20]
 800f3ec:	4a0d      	ldr	r2, [pc, #52]	@ (800f424 <rand+0x78>)
 800f3ee:	4358      	muls	r0, r3
 800f3f0:	fb02 0004 	mla	r0, r2, r4, r0
 800f3f4:	fba3 3202 	umull	r3, r2, r3, r2
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	eb40 0002 	adc.w	r0, r0, r2
 800f3fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f402:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f406:	bd10      	pop	{r4, pc}
 800f408:	24000020 	.word	0x24000020
 800f40c:	08010580 	.word	0x08010580
 800f410:	08010597 	.word	0x08010597
 800f414:	abcd330e 	.word	0xabcd330e
 800f418:	e66d1234 	.word	0xe66d1234
 800f41c:	0005deec 	.word	0x0005deec
 800f420:	5851f42d 	.word	0x5851f42d
 800f424:	4c957f2d 	.word	0x4c957f2d

0800f428 <std>:
 800f428:	2300      	movs	r3, #0
 800f42a:	b510      	push	{r4, lr}
 800f42c:	4604      	mov	r4, r0
 800f42e:	e9c0 3300 	strd	r3, r3, [r0]
 800f432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f436:	6083      	str	r3, [r0, #8]
 800f438:	8181      	strh	r1, [r0, #12]
 800f43a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f43c:	81c2      	strh	r2, [r0, #14]
 800f43e:	6183      	str	r3, [r0, #24]
 800f440:	4619      	mov	r1, r3
 800f442:	2208      	movs	r2, #8
 800f444:	305c      	adds	r0, #92	@ 0x5c
 800f446:	f000 f8f4 	bl	800f632 <memset>
 800f44a:	4b0d      	ldr	r3, [pc, #52]	@ (800f480 <std+0x58>)
 800f44c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f44e:	4b0d      	ldr	r3, [pc, #52]	@ (800f484 <std+0x5c>)
 800f450:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f452:	4b0d      	ldr	r3, [pc, #52]	@ (800f488 <std+0x60>)
 800f454:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f456:	4b0d      	ldr	r3, [pc, #52]	@ (800f48c <std+0x64>)
 800f458:	6323      	str	r3, [r4, #48]	@ 0x30
 800f45a:	4b0d      	ldr	r3, [pc, #52]	@ (800f490 <std+0x68>)
 800f45c:	6224      	str	r4, [r4, #32]
 800f45e:	429c      	cmp	r4, r3
 800f460:	d006      	beq.n	800f470 <std+0x48>
 800f462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f466:	4294      	cmp	r4, r2
 800f468:	d002      	beq.n	800f470 <std+0x48>
 800f46a:	33d0      	adds	r3, #208	@ 0xd0
 800f46c:	429c      	cmp	r4, r3
 800f46e:	d105      	bne.n	800f47c <std+0x54>
 800f470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f478:	f000 b9d8 	b.w	800f82c <__retarget_lock_init_recursive>
 800f47c:	bd10      	pop	{r4, pc}
 800f47e:	bf00      	nop
 800f480:	0800f5ad 	.word	0x0800f5ad
 800f484:	0800f5cf 	.word	0x0800f5cf
 800f488:	0800f607 	.word	0x0800f607
 800f48c:	0800f62b 	.word	0x0800f62b
 800f490:	24004cc8 	.word	0x24004cc8

0800f494 <stdio_exit_handler>:
 800f494:	4a02      	ldr	r2, [pc, #8]	@ (800f4a0 <stdio_exit_handler+0xc>)
 800f496:	4903      	ldr	r1, [pc, #12]	@ (800f4a4 <stdio_exit_handler+0x10>)
 800f498:	4803      	ldr	r0, [pc, #12]	@ (800f4a8 <stdio_exit_handler+0x14>)
 800f49a:	f000 b869 	b.w	800f570 <_fwalk_sglue>
 800f49e:	bf00      	nop
 800f4a0:	24000014 	.word	0x24000014
 800f4a4:	0800fb95 	.word	0x0800fb95
 800f4a8:	24000024 	.word	0x24000024

0800f4ac <cleanup_stdio>:
 800f4ac:	6841      	ldr	r1, [r0, #4]
 800f4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f4e0 <cleanup_stdio+0x34>)
 800f4b0:	4299      	cmp	r1, r3
 800f4b2:	b510      	push	{r4, lr}
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	d001      	beq.n	800f4bc <cleanup_stdio+0x10>
 800f4b8:	f000 fb6c 	bl	800fb94 <_fflush_r>
 800f4bc:	68a1      	ldr	r1, [r4, #8]
 800f4be:	4b09      	ldr	r3, [pc, #36]	@ (800f4e4 <cleanup_stdio+0x38>)
 800f4c0:	4299      	cmp	r1, r3
 800f4c2:	d002      	beq.n	800f4ca <cleanup_stdio+0x1e>
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f000 fb65 	bl	800fb94 <_fflush_r>
 800f4ca:	68e1      	ldr	r1, [r4, #12]
 800f4cc:	4b06      	ldr	r3, [pc, #24]	@ (800f4e8 <cleanup_stdio+0x3c>)
 800f4ce:	4299      	cmp	r1, r3
 800f4d0:	d004      	beq.n	800f4dc <cleanup_stdio+0x30>
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4d8:	f000 bb5c 	b.w	800fb94 <_fflush_r>
 800f4dc:	bd10      	pop	{r4, pc}
 800f4de:	bf00      	nop
 800f4e0:	24004cc8 	.word	0x24004cc8
 800f4e4:	24004d30 	.word	0x24004d30
 800f4e8:	24004d98 	.word	0x24004d98

0800f4ec <global_stdio_init.part.0>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f51c <global_stdio_init.part.0+0x30>)
 800f4f0:	4c0b      	ldr	r4, [pc, #44]	@ (800f520 <global_stdio_init.part.0+0x34>)
 800f4f2:	4a0c      	ldr	r2, [pc, #48]	@ (800f524 <global_stdio_init.part.0+0x38>)
 800f4f4:	601a      	str	r2, [r3, #0]
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	2104      	movs	r1, #4
 800f4fc:	f7ff ff94 	bl	800f428 <std>
 800f500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f504:	2201      	movs	r2, #1
 800f506:	2109      	movs	r1, #9
 800f508:	f7ff ff8e 	bl	800f428 <std>
 800f50c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f510:	2202      	movs	r2, #2
 800f512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f516:	2112      	movs	r1, #18
 800f518:	f7ff bf86 	b.w	800f428 <std>
 800f51c:	24004e00 	.word	0x24004e00
 800f520:	24004cc8 	.word	0x24004cc8
 800f524:	0800f495 	.word	0x0800f495

0800f528 <__sfp_lock_acquire>:
 800f528:	4801      	ldr	r0, [pc, #4]	@ (800f530 <__sfp_lock_acquire+0x8>)
 800f52a:	f000 b980 	b.w	800f82e <__retarget_lock_acquire_recursive>
 800f52e:	bf00      	nop
 800f530:	24004e09 	.word	0x24004e09

0800f534 <__sfp_lock_release>:
 800f534:	4801      	ldr	r0, [pc, #4]	@ (800f53c <__sfp_lock_release+0x8>)
 800f536:	f000 b97b 	b.w	800f830 <__retarget_lock_release_recursive>
 800f53a:	bf00      	nop
 800f53c:	24004e09 	.word	0x24004e09

0800f540 <__sinit>:
 800f540:	b510      	push	{r4, lr}
 800f542:	4604      	mov	r4, r0
 800f544:	f7ff fff0 	bl	800f528 <__sfp_lock_acquire>
 800f548:	6a23      	ldr	r3, [r4, #32]
 800f54a:	b11b      	cbz	r3, 800f554 <__sinit+0x14>
 800f54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f550:	f7ff bff0 	b.w	800f534 <__sfp_lock_release>
 800f554:	4b04      	ldr	r3, [pc, #16]	@ (800f568 <__sinit+0x28>)
 800f556:	6223      	str	r3, [r4, #32]
 800f558:	4b04      	ldr	r3, [pc, #16]	@ (800f56c <__sinit+0x2c>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1f5      	bne.n	800f54c <__sinit+0xc>
 800f560:	f7ff ffc4 	bl	800f4ec <global_stdio_init.part.0>
 800f564:	e7f2      	b.n	800f54c <__sinit+0xc>
 800f566:	bf00      	nop
 800f568:	0800f4ad 	.word	0x0800f4ad
 800f56c:	24004e00 	.word	0x24004e00

0800f570 <_fwalk_sglue>:
 800f570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f574:	4607      	mov	r7, r0
 800f576:	4688      	mov	r8, r1
 800f578:	4614      	mov	r4, r2
 800f57a:	2600      	movs	r6, #0
 800f57c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f580:	f1b9 0901 	subs.w	r9, r9, #1
 800f584:	d505      	bpl.n	800f592 <_fwalk_sglue+0x22>
 800f586:	6824      	ldr	r4, [r4, #0]
 800f588:	2c00      	cmp	r4, #0
 800f58a:	d1f7      	bne.n	800f57c <_fwalk_sglue+0xc>
 800f58c:	4630      	mov	r0, r6
 800f58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f592:	89ab      	ldrh	r3, [r5, #12]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d907      	bls.n	800f5a8 <_fwalk_sglue+0x38>
 800f598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f59c:	3301      	adds	r3, #1
 800f59e:	d003      	beq.n	800f5a8 <_fwalk_sglue+0x38>
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	47c0      	blx	r8
 800f5a6:	4306      	orrs	r6, r0
 800f5a8:	3568      	adds	r5, #104	@ 0x68
 800f5aa:	e7e9      	b.n	800f580 <_fwalk_sglue+0x10>

0800f5ac <__sread>:
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5b4:	f000 f8ec 	bl	800f790 <_read_r>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	bfab      	itete	ge
 800f5bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f5be:	89a3      	ldrhlt	r3, [r4, #12]
 800f5c0:	181b      	addge	r3, r3, r0
 800f5c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f5c6:	bfac      	ite	ge
 800f5c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f5ca:	81a3      	strhlt	r3, [r4, #12]
 800f5cc:	bd10      	pop	{r4, pc}

0800f5ce <__swrite>:
 800f5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d2:	461f      	mov	r7, r3
 800f5d4:	898b      	ldrh	r3, [r1, #12]
 800f5d6:	05db      	lsls	r3, r3, #23
 800f5d8:	4605      	mov	r5, r0
 800f5da:	460c      	mov	r4, r1
 800f5dc:	4616      	mov	r6, r2
 800f5de:	d505      	bpl.n	800f5ec <__swrite+0x1e>
 800f5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5e4:	2302      	movs	r3, #2
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f000 f8c0 	bl	800f76c <_lseek_r>
 800f5ec:	89a3      	ldrh	r3, [r4, #12]
 800f5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	4632      	mov	r2, r6
 800f5fa:	463b      	mov	r3, r7
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f602:	f000 b8d7 	b.w	800f7b4 <_write_r>

0800f606 <__sseek>:
 800f606:	b510      	push	{r4, lr}
 800f608:	460c      	mov	r4, r1
 800f60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f60e:	f000 f8ad 	bl	800f76c <_lseek_r>
 800f612:	1c43      	adds	r3, r0, #1
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	bf15      	itete	ne
 800f618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f61a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f61e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f622:	81a3      	strheq	r3, [r4, #12]
 800f624:	bf18      	it	ne
 800f626:	81a3      	strhne	r3, [r4, #12]
 800f628:	bd10      	pop	{r4, pc}

0800f62a <__sclose>:
 800f62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f62e:	f000 b825 	b.w	800f67c <_close_r>

0800f632 <memset>:
 800f632:	4402      	add	r2, r0
 800f634:	4603      	mov	r3, r0
 800f636:	4293      	cmp	r3, r2
 800f638:	d100      	bne.n	800f63c <memset+0xa>
 800f63a:	4770      	bx	lr
 800f63c:	f803 1b01 	strb.w	r1, [r3], #1
 800f640:	e7f9      	b.n	800f636 <memset+0x4>
	...

0800f644 <time>:
 800f644:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800f646:	4b0c      	ldr	r3, [pc, #48]	@ (800f678 <time+0x34>)
 800f648:	f04f 36ff 	mov.w	r6, #4294967295
 800f64c:	f04f 37ff 	mov.w	r7, #4294967295
 800f650:	4669      	mov	r1, sp
 800f652:	4604      	mov	r4, r0
 800f654:	2200      	movs	r2, #0
 800f656:	6818      	ldr	r0, [r3, #0]
 800f658:	e9cd 6700 	strd	r6, r7, [sp]
 800f65c:	f000 f874 	bl	800f748 <_gettimeofday_r>
 800f660:	2800      	cmp	r0, #0
 800f662:	bfb8      	it	lt
 800f664:	e9cd 6700 	strdlt	r6, r7, [sp]
 800f668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f66c:	b10c      	cbz	r4, 800f672 <time+0x2e>
 800f66e:	e9c4 0100 	strd	r0, r1, [r4]
 800f672:	b004      	add	sp, #16
 800f674:	bdd0      	pop	{r4, r6, r7, pc}
 800f676:	bf00      	nop
 800f678:	24000020 	.word	0x24000020

0800f67c <_close_r>:
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	4d06      	ldr	r5, [pc, #24]	@ (800f698 <_close_r+0x1c>)
 800f680:	2300      	movs	r3, #0
 800f682:	4604      	mov	r4, r0
 800f684:	4608      	mov	r0, r1
 800f686:	602b      	str	r3, [r5, #0]
 800f688:	f7f1 fd58 	bl	800113c <_close>
 800f68c:	1c43      	adds	r3, r0, #1
 800f68e:	d102      	bne.n	800f696 <_close_r+0x1a>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	b103      	cbz	r3, 800f696 <_close_r+0x1a>
 800f694:	6023      	str	r3, [r4, #0]
 800f696:	bd38      	pop	{r3, r4, r5, pc}
 800f698:	24004e04 	.word	0x24004e04

0800f69c <_reclaim_reent>:
 800f69c:	4b29      	ldr	r3, [pc, #164]	@ (800f744 <_reclaim_reent+0xa8>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4283      	cmp	r3, r0
 800f6a2:	b570      	push	{r4, r5, r6, lr}
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	d04b      	beq.n	800f740 <_reclaim_reent+0xa4>
 800f6a8:	69c3      	ldr	r3, [r0, #28]
 800f6aa:	b1ab      	cbz	r3, 800f6d8 <_reclaim_reent+0x3c>
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	b16b      	cbz	r3, 800f6cc <_reclaim_reent+0x30>
 800f6b0:	2500      	movs	r5, #0
 800f6b2:	69e3      	ldr	r3, [r4, #28]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	5959      	ldr	r1, [r3, r5]
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	d13b      	bne.n	800f734 <_reclaim_reent+0x98>
 800f6bc:	3504      	adds	r5, #4
 800f6be:	2d80      	cmp	r5, #128	@ 0x80
 800f6c0:	d1f7      	bne.n	800f6b2 <_reclaim_reent+0x16>
 800f6c2:	69e3      	ldr	r3, [r4, #28]
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	68d9      	ldr	r1, [r3, #12]
 800f6c8:	f000 f8e0 	bl	800f88c <_free_r>
 800f6cc:	69e3      	ldr	r3, [r4, #28]
 800f6ce:	6819      	ldr	r1, [r3, #0]
 800f6d0:	b111      	cbz	r1, 800f6d8 <_reclaim_reent+0x3c>
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 f8da 	bl	800f88c <_free_r>
 800f6d8:	6961      	ldr	r1, [r4, #20]
 800f6da:	b111      	cbz	r1, 800f6e2 <_reclaim_reent+0x46>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 f8d5 	bl	800f88c <_free_r>
 800f6e2:	69e1      	ldr	r1, [r4, #28]
 800f6e4:	b111      	cbz	r1, 800f6ec <_reclaim_reent+0x50>
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f000 f8d0 	bl	800f88c <_free_r>
 800f6ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f6ee:	b111      	cbz	r1, 800f6f6 <_reclaim_reent+0x5a>
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f000 f8cb 	bl	800f88c <_free_r>
 800f6f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6f8:	b111      	cbz	r1, 800f700 <_reclaim_reent+0x64>
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f000 f8c6 	bl	800f88c <_free_r>
 800f700:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f702:	b111      	cbz	r1, 800f70a <_reclaim_reent+0x6e>
 800f704:	4620      	mov	r0, r4
 800f706:	f000 f8c1 	bl	800f88c <_free_r>
 800f70a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f70c:	b111      	cbz	r1, 800f714 <_reclaim_reent+0x78>
 800f70e:	4620      	mov	r0, r4
 800f710:	f000 f8bc 	bl	800f88c <_free_r>
 800f714:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f716:	b111      	cbz	r1, 800f71e <_reclaim_reent+0x82>
 800f718:	4620      	mov	r0, r4
 800f71a:	f000 f8b7 	bl	800f88c <_free_r>
 800f71e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f720:	b111      	cbz	r1, 800f728 <_reclaim_reent+0x8c>
 800f722:	4620      	mov	r0, r4
 800f724:	f000 f8b2 	bl	800f88c <_free_r>
 800f728:	6a23      	ldr	r3, [r4, #32]
 800f72a:	b14b      	cbz	r3, 800f740 <_reclaim_reent+0xa4>
 800f72c:	4620      	mov	r0, r4
 800f72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f732:	4718      	bx	r3
 800f734:	680e      	ldr	r6, [r1, #0]
 800f736:	4620      	mov	r0, r4
 800f738:	f000 f8a8 	bl	800f88c <_free_r>
 800f73c:	4631      	mov	r1, r6
 800f73e:	e7bb      	b.n	800f6b8 <_reclaim_reent+0x1c>
 800f740:	bd70      	pop	{r4, r5, r6, pc}
 800f742:	bf00      	nop
 800f744:	24000020 	.word	0x24000020

0800f748 <_gettimeofday_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	4d07      	ldr	r5, [pc, #28]	@ (800f768 <_gettimeofday_r+0x20>)
 800f74c:	2300      	movs	r3, #0
 800f74e:	4604      	mov	r4, r0
 800f750:	4608      	mov	r0, r1
 800f752:	4611      	mov	r1, r2
 800f754:	602b      	str	r3, [r5, #0]
 800f756:	f000 fe99 	bl	801048c <_gettimeofday>
 800f75a:	1c43      	adds	r3, r0, #1
 800f75c:	d102      	bne.n	800f764 <_gettimeofday_r+0x1c>
 800f75e:	682b      	ldr	r3, [r5, #0]
 800f760:	b103      	cbz	r3, 800f764 <_gettimeofday_r+0x1c>
 800f762:	6023      	str	r3, [r4, #0]
 800f764:	bd38      	pop	{r3, r4, r5, pc}
 800f766:	bf00      	nop
 800f768:	24004e04 	.word	0x24004e04

0800f76c <_lseek_r>:
 800f76c:	b538      	push	{r3, r4, r5, lr}
 800f76e:	4d07      	ldr	r5, [pc, #28]	@ (800f78c <_lseek_r+0x20>)
 800f770:	4604      	mov	r4, r0
 800f772:	4608      	mov	r0, r1
 800f774:	4611      	mov	r1, r2
 800f776:	2200      	movs	r2, #0
 800f778:	602a      	str	r2, [r5, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	f7f1 fd05 	bl	800118a <_lseek>
 800f780:	1c43      	adds	r3, r0, #1
 800f782:	d102      	bne.n	800f78a <_lseek_r+0x1e>
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	b103      	cbz	r3, 800f78a <_lseek_r+0x1e>
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	bd38      	pop	{r3, r4, r5, pc}
 800f78c:	24004e04 	.word	0x24004e04

0800f790 <_read_r>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4d07      	ldr	r5, [pc, #28]	@ (800f7b0 <_read_r+0x20>)
 800f794:	4604      	mov	r4, r0
 800f796:	4608      	mov	r0, r1
 800f798:	4611      	mov	r1, r2
 800f79a:	2200      	movs	r2, #0
 800f79c:	602a      	str	r2, [r5, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	f7f1 fc93 	bl	80010ca <_read>
 800f7a4:	1c43      	adds	r3, r0, #1
 800f7a6:	d102      	bne.n	800f7ae <_read_r+0x1e>
 800f7a8:	682b      	ldr	r3, [r5, #0]
 800f7aa:	b103      	cbz	r3, 800f7ae <_read_r+0x1e>
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	bd38      	pop	{r3, r4, r5, pc}
 800f7b0:	24004e04 	.word	0x24004e04

0800f7b4 <_write_r>:
 800f7b4:	b538      	push	{r3, r4, r5, lr}
 800f7b6:	4d07      	ldr	r5, [pc, #28]	@ (800f7d4 <_write_r+0x20>)
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	4608      	mov	r0, r1
 800f7bc:	4611      	mov	r1, r2
 800f7be:	2200      	movs	r2, #0
 800f7c0:	602a      	str	r2, [r5, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	f7f1 fc9e 	bl	8001104 <_write>
 800f7c8:	1c43      	adds	r3, r0, #1
 800f7ca:	d102      	bne.n	800f7d2 <_write_r+0x1e>
 800f7cc:	682b      	ldr	r3, [r5, #0]
 800f7ce:	b103      	cbz	r3, 800f7d2 <_write_r+0x1e>
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	bd38      	pop	{r3, r4, r5, pc}
 800f7d4:	24004e04 	.word	0x24004e04

0800f7d8 <__errno>:
 800f7d8:	4b01      	ldr	r3, [pc, #4]	@ (800f7e0 <__errno+0x8>)
 800f7da:	6818      	ldr	r0, [r3, #0]
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	24000020 	.word	0x24000020

0800f7e4 <__libc_init_array>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	4d0d      	ldr	r5, [pc, #52]	@ (800f81c <__libc_init_array+0x38>)
 800f7e8:	4c0d      	ldr	r4, [pc, #52]	@ (800f820 <__libc_init_array+0x3c>)
 800f7ea:	1b64      	subs	r4, r4, r5
 800f7ec:	10a4      	asrs	r4, r4, #2
 800f7ee:	2600      	movs	r6, #0
 800f7f0:	42a6      	cmp	r6, r4
 800f7f2:	d109      	bne.n	800f808 <__libc_init_array+0x24>
 800f7f4:	4d0b      	ldr	r5, [pc, #44]	@ (800f824 <__libc_init_array+0x40>)
 800f7f6:	4c0c      	ldr	r4, [pc, #48]	@ (800f828 <__libc_init_array+0x44>)
 800f7f8:	f000 fe50 	bl	801049c <_init>
 800f7fc:	1b64      	subs	r4, r4, r5
 800f7fe:	10a4      	asrs	r4, r4, #2
 800f800:	2600      	movs	r6, #0
 800f802:	42a6      	cmp	r6, r4
 800f804:	d105      	bne.n	800f812 <__libc_init_array+0x2e>
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	f855 3b04 	ldr.w	r3, [r5], #4
 800f80c:	4798      	blx	r3
 800f80e:	3601      	adds	r6, #1
 800f810:	e7ee      	b.n	800f7f0 <__libc_init_array+0xc>
 800f812:	f855 3b04 	ldr.w	r3, [r5], #4
 800f816:	4798      	blx	r3
 800f818:	3601      	adds	r6, #1
 800f81a:	e7f2      	b.n	800f802 <__libc_init_array+0x1e>
 800f81c:	08010668 	.word	0x08010668
 800f820:	08010668 	.word	0x08010668
 800f824:	08010668 	.word	0x08010668
 800f828:	0801066c 	.word	0x0801066c

0800f82c <__retarget_lock_init_recursive>:
 800f82c:	4770      	bx	lr

0800f82e <__retarget_lock_acquire_recursive>:
 800f82e:	4770      	bx	lr

0800f830 <__retarget_lock_release_recursive>:
 800f830:	4770      	bx	lr

0800f832 <memcpy>:
 800f832:	440a      	add	r2, r1
 800f834:	4291      	cmp	r1, r2
 800f836:	f100 33ff 	add.w	r3, r0, #4294967295
 800f83a:	d100      	bne.n	800f83e <memcpy+0xc>
 800f83c:	4770      	bx	lr
 800f83e:	b510      	push	{r4, lr}
 800f840:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f844:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f848:	4291      	cmp	r1, r2
 800f84a:	d1f9      	bne.n	800f840 <memcpy+0xe>
 800f84c:	bd10      	pop	{r4, pc}
	...

0800f850 <__assert_func>:
 800f850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f852:	4614      	mov	r4, r2
 800f854:	461a      	mov	r2, r3
 800f856:	4b09      	ldr	r3, [pc, #36]	@ (800f87c <__assert_func+0x2c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4605      	mov	r5, r0
 800f85c:	68d8      	ldr	r0, [r3, #12]
 800f85e:	b954      	cbnz	r4, 800f876 <__assert_func+0x26>
 800f860:	4b07      	ldr	r3, [pc, #28]	@ (800f880 <__assert_func+0x30>)
 800f862:	461c      	mov	r4, r3
 800f864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f868:	9100      	str	r1, [sp, #0]
 800f86a:	462b      	mov	r3, r5
 800f86c:	4905      	ldr	r1, [pc, #20]	@ (800f884 <__assert_func+0x34>)
 800f86e:	f000 f9b9 	bl	800fbe4 <fiprintf>
 800f872:	f000 f9d9 	bl	800fc28 <abort>
 800f876:	4b04      	ldr	r3, [pc, #16]	@ (800f888 <__assert_func+0x38>)
 800f878:	e7f4      	b.n	800f864 <__assert_func+0x14>
 800f87a:	bf00      	nop
 800f87c:	24000020 	.word	0x24000020
 800f880:	0801062a 	.word	0x0801062a
 800f884:	080105fc 	.word	0x080105fc
 800f888:	080105ef 	.word	0x080105ef

0800f88c <_free_r>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	4605      	mov	r5, r0
 800f890:	2900      	cmp	r1, #0
 800f892:	d041      	beq.n	800f918 <_free_r+0x8c>
 800f894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f898:	1f0c      	subs	r4, r1, #4
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	bfb8      	it	lt
 800f89e:	18e4      	addlt	r4, r4, r3
 800f8a0:	f000 f8e8 	bl	800fa74 <__malloc_lock>
 800f8a4:	4a1d      	ldr	r2, [pc, #116]	@ (800f91c <_free_r+0x90>)
 800f8a6:	6813      	ldr	r3, [r2, #0]
 800f8a8:	b933      	cbnz	r3, 800f8b8 <_free_r+0x2c>
 800f8aa:	6063      	str	r3, [r4, #4]
 800f8ac:	6014      	str	r4, [r2, #0]
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b4:	f000 b8e4 	b.w	800fa80 <__malloc_unlock>
 800f8b8:	42a3      	cmp	r3, r4
 800f8ba:	d908      	bls.n	800f8ce <_free_r+0x42>
 800f8bc:	6820      	ldr	r0, [r4, #0]
 800f8be:	1821      	adds	r1, r4, r0
 800f8c0:	428b      	cmp	r3, r1
 800f8c2:	bf01      	itttt	eq
 800f8c4:	6819      	ldreq	r1, [r3, #0]
 800f8c6:	685b      	ldreq	r3, [r3, #4]
 800f8c8:	1809      	addeq	r1, r1, r0
 800f8ca:	6021      	streq	r1, [r4, #0]
 800f8cc:	e7ed      	b.n	800f8aa <_free_r+0x1e>
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	b10b      	cbz	r3, 800f8d8 <_free_r+0x4c>
 800f8d4:	42a3      	cmp	r3, r4
 800f8d6:	d9fa      	bls.n	800f8ce <_free_r+0x42>
 800f8d8:	6811      	ldr	r1, [r2, #0]
 800f8da:	1850      	adds	r0, r2, r1
 800f8dc:	42a0      	cmp	r0, r4
 800f8de:	d10b      	bne.n	800f8f8 <_free_r+0x6c>
 800f8e0:	6820      	ldr	r0, [r4, #0]
 800f8e2:	4401      	add	r1, r0
 800f8e4:	1850      	adds	r0, r2, r1
 800f8e6:	4283      	cmp	r3, r0
 800f8e8:	6011      	str	r1, [r2, #0]
 800f8ea:	d1e0      	bne.n	800f8ae <_free_r+0x22>
 800f8ec:	6818      	ldr	r0, [r3, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	6053      	str	r3, [r2, #4]
 800f8f2:	4408      	add	r0, r1
 800f8f4:	6010      	str	r0, [r2, #0]
 800f8f6:	e7da      	b.n	800f8ae <_free_r+0x22>
 800f8f8:	d902      	bls.n	800f900 <_free_r+0x74>
 800f8fa:	230c      	movs	r3, #12
 800f8fc:	602b      	str	r3, [r5, #0]
 800f8fe:	e7d6      	b.n	800f8ae <_free_r+0x22>
 800f900:	6820      	ldr	r0, [r4, #0]
 800f902:	1821      	adds	r1, r4, r0
 800f904:	428b      	cmp	r3, r1
 800f906:	bf04      	itt	eq
 800f908:	6819      	ldreq	r1, [r3, #0]
 800f90a:	685b      	ldreq	r3, [r3, #4]
 800f90c:	6063      	str	r3, [r4, #4]
 800f90e:	bf04      	itt	eq
 800f910:	1809      	addeq	r1, r1, r0
 800f912:	6021      	streq	r1, [r4, #0]
 800f914:	6054      	str	r4, [r2, #4]
 800f916:	e7ca      	b.n	800f8ae <_free_r+0x22>
 800f918:	bd38      	pop	{r3, r4, r5, pc}
 800f91a:	bf00      	nop
 800f91c:	24004e10 	.word	0x24004e10

0800f920 <malloc>:
 800f920:	4b02      	ldr	r3, [pc, #8]	@ (800f92c <malloc+0xc>)
 800f922:	4601      	mov	r1, r0
 800f924:	6818      	ldr	r0, [r3, #0]
 800f926:	f000 b825 	b.w	800f974 <_malloc_r>
 800f92a:	bf00      	nop
 800f92c:	24000020 	.word	0x24000020

0800f930 <sbrk_aligned>:
 800f930:	b570      	push	{r4, r5, r6, lr}
 800f932:	4e0f      	ldr	r6, [pc, #60]	@ (800f970 <sbrk_aligned+0x40>)
 800f934:	460c      	mov	r4, r1
 800f936:	6831      	ldr	r1, [r6, #0]
 800f938:	4605      	mov	r5, r0
 800f93a:	b911      	cbnz	r1, 800f942 <sbrk_aligned+0x12>
 800f93c:	f000 f964 	bl	800fc08 <_sbrk_r>
 800f940:	6030      	str	r0, [r6, #0]
 800f942:	4621      	mov	r1, r4
 800f944:	4628      	mov	r0, r5
 800f946:	f000 f95f 	bl	800fc08 <_sbrk_r>
 800f94a:	1c43      	adds	r3, r0, #1
 800f94c:	d103      	bne.n	800f956 <sbrk_aligned+0x26>
 800f94e:	f04f 34ff 	mov.w	r4, #4294967295
 800f952:	4620      	mov	r0, r4
 800f954:	bd70      	pop	{r4, r5, r6, pc}
 800f956:	1cc4      	adds	r4, r0, #3
 800f958:	f024 0403 	bic.w	r4, r4, #3
 800f95c:	42a0      	cmp	r0, r4
 800f95e:	d0f8      	beq.n	800f952 <sbrk_aligned+0x22>
 800f960:	1a21      	subs	r1, r4, r0
 800f962:	4628      	mov	r0, r5
 800f964:	f000 f950 	bl	800fc08 <_sbrk_r>
 800f968:	3001      	adds	r0, #1
 800f96a:	d1f2      	bne.n	800f952 <sbrk_aligned+0x22>
 800f96c:	e7ef      	b.n	800f94e <sbrk_aligned+0x1e>
 800f96e:	bf00      	nop
 800f970:	24004e0c 	.word	0x24004e0c

0800f974 <_malloc_r>:
 800f974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f978:	1ccd      	adds	r5, r1, #3
 800f97a:	f025 0503 	bic.w	r5, r5, #3
 800f97e:	3508      	adds	r5, #8
 800f980:	2d0c      	cmp	r5, #12
 800f982:	bf38      	it	cc
 800f984:	250c      	movcc	r5, #12
 800f986:	2d00      	cmp	r5, #0
 800f988:	4606      	mov	r6, r0
 800f98a:	db01      	blt.n	800f990 <_malloc_r+0x1c>
 800f98c:	42a9      	cmp	r1, r5
 800f98e:	d904      	bls.n	800f99a <_malloc_r+0x26>
 800f990:	230c      	movs	r3, #12
 800f992:	6033      	str	r3, [r6, #0]
 800f994:	2000      	movs	r0, #0
 800f996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f99a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa70 <_malloc_r+0xfc>
 800f99e:	f000 f869 	bl	800fa74 <__malloc_lock>
 800f9a2:	f8d8 3000 	ldr.w	r3, [r8]
 800f9a6:	461c      	mov	r4, r3
 800f9a8:	bb44      	cbnz	r4, 800f9fc <_malloc_r+0x88>
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f7ff ffbf 	bl	800f930 <sbrk_aligned>
 800f9b2:	1c43      	adds	r3, r0, #1
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	d158      	bne.n	800fa6a <_malloc_r+0xf6>
 800f9b8:	f8d8 4000 	ldr.w	r4, [r8]
 800f9bc:	4627      	mov	r7, r4
 800f9be:	2f00      	cmp	r7, #0
 800f9c0:	d143      	bne.n	800fa4a <_malloc_r+0xd6>
 800f9c2:	2c00      	cmp	r4, #0
 800f9c4:	d04b      	beq.n	800fa5e <_malloc_r+0xea>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	eb04 0903 	add.w	r9, r4, r3
 800f9d0:	f000 f91a 	bl	800fc08 <_sbrk_r>
 800f9d4:	4581      	cmp	r9, r0
 800f9d6:	d142      	bne.n	800fa5e <_malloc_r+0xea>
 800f9d8:	6821      	ldr	r1, [r4, #0]
 800f9da:	1a6d      	subs	r5, r5, r1
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7ff ffa6 	bl	800f930 <sbrk_aligned>
 800f9e4:	3001      	adds	r0, #1
 800f9e6:	d03a      	beq.n	800fa5e <_malloc_r+0xea>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	442b      	add	r3, r5
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f9f2:	685a      	ldr	r2, [r3, #4]
 800f9f4:	bb62      	cbnz	r2, 800fa50 <_malloc_r+0xdc>
 800f9f6:	f8c8 7000 	str.w	r7, [r8]
 800f9fa:	e00f      	b.n	800fa1c <_malloc_r+0xa8>
 800f9fc:	6822      	ldr	r2, [r4, #0]
 800f9fe:	1b52      	subs	r2, r2, r5
 800fa00:	d420      	bmi.n	800fa44 <_malloc_r+0xd0>
 800fa02:	2a0b      	cmp	r2, #11
 800fa04:	d917      	bls.n	800fa36 <_malloc_r+0xc2>
 800fa06:	1961      	adds	r1, r4, r5
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	6025      	str	r5, [r4, #0]
 800fa0c:	bf18      	it	ne
 800fa0e:	6059      	strne	r1, [r3, #4]
 800fa10:	6863      	ldr	r3, [r4, #4]
 800fa12:	bf08      	it	eq
 800fa14:	f8c8 1000 	streq.w	r1, [r8]
 800fa18:	5162      	str	r2, [r4, r5]
 800fa1a:	604b      	str	r3, [r1, #4]
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f000 f82f 	bl	800fa80 <__malloc_unlock>
 800fa22:	f104 000b 	add.w	r0, r4, #11
 800fa26:	1d23      	adds	r3, r4, #4
 800fa28:	f020 0007 	bic.w	r0, r0, #7
 800fa2c:	1ac2      	subs	r2, r0, r3
 800fa2e:	bf1c      	itt	ne
 800fa30:	1a1b      	subne	r3, r3, r0
 800fa32:	50a3      	strne	r3, [r4, r2]
 800fa34:	e7af      	b.n	800f996 <_malloc_r+0x22>
 800fa36:	6862      	ldr	r2, [r4, #4]
 800fa38:	42a3      	cmp	r3, r4
 800fa3a:	bf0c      	ite	eq
 800fa3c:	f8c8 2000 	streq.w	r2, [r8]
 800fa40:	605a      	strne	r2, [r3, #4]
 800fa42:	e7eb      	b.n	800fa1c <_malloc_r+0xa8>
 800fa44:	4623      	mov	r3, r4
 800fa46:	6864      	ldr	r4, [r4, #4]
 800fa48:	e7ae      	b.n	800f9a8 <_malloc_r+0x34>
 800fa4a:	463c      	mov	r4, r7
 800fa4c:	687f      	ldr	r7, [r7, #4]
 800fa4e:	e7b6      	b.n	800f9be <_malloc_r+0x4a>
 800fa50:	461a      	mov	r2, r3
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	d1fb      	bne.n	800fa50 <_malloc_r+0xdc>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	6053      	str	r3, [r2, #4]
 800fa5c:	e7de      	b.n	800fa1c <_malloc_r+0xa8>
 800fa5e:	230c      	movs	r3, #12
 800fa60:	6033      	str	r3, [r6, #0]
 800fa62:	4630      	mov	r0, r6
 800fa64:	f000 f80c 	bl	800fa80 <__malloc_unlock>
 800fa68:	e794      	b.n	800f994 <_malloc_r+0x20>
 800fa6a:	6005      	str	r5, [r0, #0]
 800fa6c:	e7d6      	b.n	800fa1c <_malloc_r+0xa8>
 800fa6e:	bf00      	nop
 800fa70:	24004e10 	.word	0x24004e10

0800fa74 <__malloc_lock>:
 800fa74:	4801      	ldr	r0, [pc, #4]	@ (800fa7c <__malloc_lock+0x8>)
 800fa76:	f7ff beda 	b.w	800f82e <__retarget_lock_acquire_recursive>
 800fa7a:	bf00      	nop
 800fa7c:	24004e08 	.word	0x24004e08

0800fa80 <__malloc_unlock>:
 800fa80:	4801      	ldr	r0, [pc, #4]	@ (800fa88 <__malloc_unlock+0x8>)
 800fa82:	f7ff bed5 	b.w	800f830 <__retarget_lock_release_recursive>
 800fa86:	bf00      	nop
 800fa88:	24004e08 	.word	0x24004e08

0800fa8c <__sflush_r>:
 800fa8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa94:	0716      	lsls	r6, r2, #28
 800fa96:	4605      	mov	r5, r0
 800fa98:	460c      	mov	r4, r1
 800fa9a:	d454      	bmi.n	800fb46 <__sflush_r+0xba>
 800fa9c:	684b      	ldr	r3, [r1, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	dc02      	bgt.n	800faa8 <__sflush_r+0x1c>
 800faa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	dd48      	ble.n	800fb3a <__sflush_r+0xae>
 800faa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faaa:	2e00      	cmp	r6, #0
 800faac:	d045      	beq.n	800fb3a <__sflush_r+0xae>
 800faae:	2300      	movs	r3, #0
 800fab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fab4:	682f      	ldr	r7, [r5, #0]
 800fab6:	6a21      	ldr	r1, [r4, #32]
 800fab8:	602b      	str	r3, [r5, #0]
 800faba:	d030      	beq.n	800fb1e <__sflush_r+0x92>
 800fabc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fabe:	89a3      	ldrh	r3, [r4, #12]
 800fac0:	0759      	lsls	r1, r3, #29
 800fac2:	d505      	bpl.n	800fad0 <__sflush_r+0x44>
 800fac4:	6863      	ldr	r3, [r4, #4]
 800fac6:	1ad2      	subs	r2, r2, r3
 800fac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800faca:	b10b      	cbz	r3, 800fad0 <__sflush_r+0x44>
 800facc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800face:	1ad2      	subs	r2, r2, r3
 800fad0:	2300      	movs	r3, #0
 800fad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fad4:	6a21      	ldr	r1, [r4, #32]
 800fad6:	4628      	mov	r0, r5
 800fad8:	47b0      	blx	r6
 800fada:	1c43      	adds	r3, r0, #1
 800fadc:	89a3      	ldrh	r3, [r4, #12]
 800fade:	d106      	bne.n	800faee <__sflush_r+0x62>
 800fae0:	6829      	ldr	r1, [r5, #0]
 800fae2:	291d      	cmp	r1, #29
 800fae4:	d82b      	bhi.n	800fb3e <__sflush_r+0xb2>
 800fae6:	4a2a      	ldr	r2, [pc, #168]	@ (800fb90 <__sflush_r+0x104>)
 800fae8:	410a      	asrs	r2, r1
 800faea:	07d6      	lsls	r6, r2, #31
 800faec:	d427      	bmi.n	800fb3e <__sflush_r+0xb2>
 800faee:	2200      	movs	r2, #0
 800faf0:	6062      	str	r2, [r4, #4]
 800faf2:	04d9      	lsls	r1, r3, #19
 800faf4:	6922      	ldr	r2, [r4, #16]
 800faf6:	6022      	str	r2, [r4, #0]
 800faf8:	d504      	bpl.n	800fb04 <__sflush_r+0x78>
 800fafa:	1c42      	adds	r2, r0, #1
 800fafc:	d101      	bne.n	800fb02 <__sflush_r+0x76>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	b903      	cbnz	r3, 800fb04 <__sflush_r+0x78>
 800fb02:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb06:	602f      	str	r7, [r5, #0]
 800fb08:	b1b9      	cbz	r1, 800fb3a <__sflush_r+0xae>
 800fb0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb0e:	4299      	cmp	r1, r3
 800fb10:	d002      	beq.n	800fb18 <__sflush_r+0x8c>
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7ff feba 	bl	800f88c <_free_r>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb1c:	e00d      	b.n	800fb3a <__sflush_r+0xae>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	4628      	mov	r0, r5
 800fb22:	47b0      	blx	r6
 800fb24:	4602      	mov	r2, r0
 800fb26:	1c50      	adds	r0, r2, #1
 800fb28:	d1c9      	bne.n	800fabe <__sflush_r+0x32>
 800fb2a:	682b      	ldr	r3, [r5, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d0c6      	beq.n	800fabe <__sflush_r+0x32>
 800fb30:	2b1d      	cmp	r3, #29
 800fb32:	d001      	beq.n	800fb38 <__sflush_r+0xac>
 800fb34:	2b16      	cmp	r3, #22
 800fb36:	d11e      	bne.n	800fb76 <__sflush_r+0xea>
 800fb38:	602f      	str	r7, [r5, #0]
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	e022      	b.n	800fb84 <__sflush_r+0xf8>
 800fb3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb42:	b21b      	sxth	r3, r3
 800fb44:	e01b      	b.n	800fb7e <__sflush_r+0xf2>
 800fb46:	690f      	ldr	r7, [r1, #16]
 800fb48:	2f00      	cmp	r7, #0
 800fb4a:	d0f6      	beq.n	800fb3a <__sflush_r+0xae>
 800fb4c:	0793      	lsls	r3, r2, #30
 800fb4e:	680e      	ldr	r6, [r1, #0]
 800fb50:	bf08      	it	eq
 800fb52:	694b      	ldreq	r3, [r1, #20]
 800fb54:	600f      	str	r7, [r1, #0]
 800fb56:	bf18      	it	ne
 800fb58:	2300      	movne	r3, #0
 800fb5a:	eba6 0807 	sub.w	r8, r6, r7
 800fb5e:	608b      	str	r3, [r1, #8]
 800fb60:	f1b8 0f00 	cmp.w	r8, #0
 800fb64:	dde9      	ble.n	800fb3a <__sflush_r+0xae>
 800fb66:	6a21      	ldr	r1, [r4, #32]
 800fb68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb6a:	4643      	mov	r3, r8
 800fb6c:	463a      	mov	r2, r7
 800fb6e:	4628      	mov	r0, r5
 800fb70:	47b0      	blx	r6
 800fb72:	2800      	cmp	r0, #0
 800fb74:	dc08      	bgt.n	800fb88 <__sflush_r+0xfc>
 800fb76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb7e:	81a3      	strh	r3, [r4, #12]
 800fb80:	f04f 30ff 	mov.w	r0, #4294967295
 800fb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb88:	4407      	add	r7, r0
 800fb8a:	eba8 0800 	sub.w	r8, r8, r0
 800fb8e:	e7e7      	b.n	800fb60 <__sflush_r+0xd4>
 800fb90:	dfbffffe 	.word	0xdfbffffe

0800fb94 <_fflush_r>:
 800fb94:	b538      	push	{r3, r4, r5, lr}
 800fb96:	690b      	ldr	r3, [r1, #16]
 800fb98:	4605      	mov	r5, r0
 800fb9a:	460c      	mov	r4, r1
 800fb9c:	b913      	cbnz	r3, 800fba4 <_fflush_r+0x10>
 800fb9e:	2500      	movs	r5, #0
 800fba0:	4628      	mov	r0, r5
 800fba2:	bd38      	pop	{r3, r4, r5, pc}
 800fba4:	b118      	cbz	r0, 800fbae <_fflush_r+0x1a>
 800fba6:	6a03      	ldr	r3, [r0, #32]
 800fba8:	b90b      	cbnz	r3, 800fbae <_fflush_r+0x1a>
 800fbaa:	f7ff fcc9 	bl	800f540 <__sinit>
 800fbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d0f3      	beq.n	800fb9e <_fflush_r+0xa>
 800fbb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbb8:	07d0      	lsls	r0, r2, #31
 800fbba:	d404      	bmi.n	800fbc6 <_fflush_r+0x32>
 800fbbc:	0599      	lsls	r1, r3, #22
 800fbbe:	d402      	bmi.n	800fbc6 <_fflush_r+0x32>
 800fbc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbc2:	f7ff fe34 	bl	800f82e <__retarget_lock_acquire_recursive>
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	4621      	mov	r1, r4
 800fbca:	f7ff ff5f 	bl	800fa8c <__sflush_r>
 800fbce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbd0:	07da      	lsls	r2, r3, #31
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	d4e4      	bmi.n	800fba0 <_fflush_r+0xc>
 800fbd6:	89a3      	ldrh	r3, [r4, #12]
 800fbd8:	059b      	lsls	r3, r3, #22
 800fbda:	d4e1      	bmi.n	800fba0 <_fflush_r+0xc>
 800fbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbde:	f7ff fe27 	bl	800f830 <__retarget_lock_release_recursive>
 800fbe2:	e7dd      	b.n	800fba0 <_fflush_r+0xc>

0800fbe4 <fiprintf>:
 800fbe4:	b40e      	push	{r1, r2, r3}
 800fbe6:	b503      	push	{r0, r1, lr}
 800fbe8:	4601      	mov	r1, r0
 800fbea:	ab03      	add	r3, sp, #12
 800fbec:	4805      	ldr	r0, [pc, #20]	@ (800fc04 <fiprintf+0x20>)
 800fbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbf2:	6800      	ldr	r0, [r0, #0]
 800fbf4:	9301      	str	r3, [sp, #4]
 800fbf6:	f000 f847 	bl	800fc88 <_vfiprintf_r>
 800fbfa:	b002      	add	sp, #8
 800fbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc00:	b003      	add	sp, #12
 800fc02:	4770      	bx	lr
 800fc04:	24000020 	.word	0x24000020

0800fc08 <_sbrk_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d06      	ldr	r5, [pc, #24]	@ (800fc24 <_sbrk_r+0x1c>)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	4608      	mov	r0, r1
 800fc12:	602b      	str	r3, [r5, #0]
 800fc14:	f7f1 fac6 	bl	80011a4 <_sbrk>
 800fc18:	1c43      	adds	r3, r0, #1
 800fc1a:	d102      	bne.n	800fc22 <_sbrk_r+0x1a>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	b103      	cbz	r3, 800fc22 <_sbrk_r+0x1a>
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	24004e04 	.word	0x24004e04

0800fc28 <abort>:
 800fc28:	b508      	push	{r3, lr}
 800fc2a:	2006      	movs	r0, #6
 800fc2c:	f000 fb8e 	bl	801034c <raise>
 800fc30:	2001      	movs	r0, #1
 800fc32:	f7f1 fa3f 	bl	80010b4 <_exit>

0800fc36 <__sfputc_r>:
 800fc36:	6893      	ldr	r3, [r2, #8]
 800fc38:	3b01      	subs	r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	b410      	push	{r4}
 800fc3e:	6093      	str	r3, [r2, #8]
 800fc40:	da08      	bge.n	800fc54 <__sfputc_r+0x1e>
 800fc42:	6994      	ldr	r4, [r2, #24]
 800fc44:	42a3      	cmp	r3, r4
 800fc46:	db01      	blt.n	800fc4c <__sfputc_r+0x16>
 800fc48:	290a      	cmp	r1, #10
 800fc4a:	d103      	bne.n	800fc54 <__sfputc_r+0x1e>
 800fc4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc50:	f000 bac0 	b.w	80101d4 <__swbuf_r>
 800fc54:	6813      	ldr	r3, [r2, #0]
 800fc56:	1c58      	adds	r0, r3, #1
 800fc58:	6010      	str	r0, [r2, #0]
 800fc5a:	7019      	strb	r1, [r3, #0]
 800fc5c:	4608      	mov	r0, r1
 800fc5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <__sfputs_r>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	4606      	mov	r6, r0
 800fc68:	460f      	mov	r7, r1
 800fc6a:	4614      	mov	r4, r2
 800fc6c:	18d5      	adds	r5, r2, r3
 800fc6e:	42ac      	cmp	r4, r5
 800fc70:	d101      	bne.n	800fc76 <__sfputs_r+0x12>
 800fc72:	2000      	movs	r0, #0
 800fc74:	e007      	b.n	800fc86 <__sfputs_r+0x22>
 800fc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc7a:	463a      	mov	r2, r7
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	f7ff ffda 	bl	800fc36 <__sfputc_r>
 800fc82:	1c43      	adds	r3, r0, #1
 800fc84:	d1f3      	bne.n	800fc6e <__sfputs_r+0xa>
 800fc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc88 <_vfiprintf_r>:
 800fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	460d      	mov	r5, r1
 800fc8e:	b09d      	sub	sp, #116	@ 0x74
 800fc90:	4614      	mov	r4, r2
 800fc92:	4698      	mov	r8, r3
 800fc94:	4606      	mov	r6, r0
 800fc96:	b118      	cbz	r0, 800fca0 <_vfiprintf_r+0x18>
 800fc98:	6a03      	ldr	r3, [r0, #32]
 800fc9a:	b90b      	cbnz	r3, 800fca0 <_vfiprintf_r+0x18>
 800fc9c:	f7ff fc50 	bl	800f540 <__sinit>
 800fca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fca2:	07d9      	lsls	r1, r3, #31
 800fca4:	d405      	bmi.n	800fcb2 <_vfiprintf_r+0x2a>
 800fca6:	89ab      	ldrh	r3, [r5, #12]
 800fca8:	059a      	lsls	r2, r3, #22
 800fcaa:	d402      	bmi.n	800fcb2 <_vfiprintf_r+0x2a>
 800fcac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcae:	f7ff fdbe 	bl	800f82e <__retarget_lock_acquire_recursive>
 800fcb2:	89ab      	ldrh	r3, [r5, #12]
 800fcb4:	071b      	lsls	r3, r3, #28
 800fcb6:	d501      	bpl.n	800fcbc <_vfiprintf_r+0x34>
 800fcb8:	692b      	ldr	r3, [r5, #16]
 800fcba:	b99b      	cbnz	r3, 800fce4 <_vfiprintf_r+0x5c>
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 fac6 	bl	8010250 <__swsetup_r>
 800fcc4:	b170      	cbz	r0, 800fce4 <_vfiprintf_r+0x5c>
 800fcc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcc8:	07dc      	lsls	r4, r3, #31
 800fcca:	d504      	bpl.n	800fcd6 <_vfiprintf_r+0x4e>
 800fccc:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd0:	b01d      	add	sp, #116	@ 0x74
 800fcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd6:	89ab      	ldrh	r3, [r5, #12]
 800fcd8:	0598      	lsls	r0, r3, #22
 800fcda:	d4f7      	bmi.n	800fccc <_vfiprintf_r+0x44>
 800fcdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcde:	f7ff fda7 	bl	800f830 <__retarget_lock_release_recursive>
 800fce2:	e7f3      	b.n	800fccc <_vfiprintf_r+0x44>
 800fce4:	2300      	movs	r3, #0
 800fce6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce8:	2320      	movs	r3, #32
 800fcea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fcee:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcf2:	2330      	movs	r3, #48	@ 0x30
 800fcf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fea4 <_vfiprintf_r+0x21c>
 800fcf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcfc:	f04f 0901 	mov.w	r9, #1
 800fd00:	4623      	mov	r3, r4
 800fd02:	469a      	mov	sl, r3
 800fd04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd08:	b10a      	cbz	r2, 800fd0e <_vfiprintf_r+0x86>
 800fd0a:	2a25      	cmp	r2, #37	@ 0x25
 800fd0c:	d1f9      	bne.n	800fd02 <_vfiprintf_r+0x7a>
 800fd0e:	ebba 0b04 	subs.w	fp, sl, r4
 800fd12:	d00b      	beq.n	800fd2c <_vfiprintf_r+0xa4>
 800fd14:	465b      	mov	r3, fp
 800fd16:	4622      	mov	r2, r4
 800fd18:	4629      	mov	r1, r5
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f7ff ffa2 	bl	800fc64 <__sfputs_r>
 800fd20:	3001      	adds	r0, #1
 800fd22:	f000 80a7 	beq.w	800fe74 <_vfiprintf_r+0x1ec>
 800fd26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd28:	445a      	add	r2, fp
 800fd2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 809f 	beq.w	800fe74 <_vfiprintf_r+0x1ec>
 800fd36:	2300      	movs	r3, #0
 800fd38:	f04f 32ff 	mov.w	r2, #4294967295
 800fd3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd40:	f10a 0a01 	add.w	sl, sl, #1
 800fd44:	9304      	str	r3, [sp, #16]
 800fd46:	9307      	str	r3, [sp, #28]
 800fd48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd4e:	4654      	mov	r4, sl
 800fd50:	2205      	movs	r2, #5
 800fd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd56:	4853      	ldr	r0, [pc, #332]	@ (800fea4 <_vfiprintf_r+0x21c>)
 800fd58:	f7f0 faca 	bl	80002f0 <memchr>
 800fd5c:	9a04      	ldr	r2, [sp, #16]
 800fd5e:	b9d8      	cbnz	r0, 800fd98 <_vfiprintf_r+0x110>
 800fd60:	06d1      	lsls	r1, r2, #27
 800fd62:	bf44      	itt	mi
 800fd64:	2320      	movmi	r3, #32
 800fd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd6a:	0713      	lsls	r3, r2, #28
 800fd6c:	bf44      	itt	mi
 800fd6e:	232b      	movmi	r3, #43	@ 0x2b
 800fd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd74:	f89a 3000 	ldrb.w	r3, [sl]
 800fd78:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd7a:	d015      	beq.n	800fda8 <_vfiprintf_r+0x120>
 800fd7c:	9a07      	ldr	r2, [sp, #28]
 800fd7e:	4654      	mov	r4, sl
 800fd80:	2000      	movs	r0, #0
 800fd82:	f04f 0c0a 	mov.w	ip, #10
 800fd86:	4621      	mov	r1, r4
 800fd88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd8c:	3b30      	subs	r3, #48	@ 0x30
 800fd8e:	2b09      	cmp	r3, #9
 800fd90:	d94b      	bls.n	800fe2a <_vfiprintf_r+0x1a2>
 800fd92:	b1b0      	cbz	r0, 800fdc2 <_vfiprintf_r+0x13a>
 800fd94:	9207      	str	r2, [sp, #28]
 800fd96:	e014      	b.n	800fdc2 <_vfiprintf_r+0x13a>
 800fd98:	eba0 0308 	sub.w	r3, r0, r8
 800fd9c:	fa09 f303 	lsl.w	r3, r9, r3
 800fda0:	4313      	orrs	r3, r2
 800fda2:	9304      	str	r3, [sp, #16]
 800fda4:	46a2      	mov	sl, r4
 800fda6:	e7d2      	b.n	800fd4e <_vfiprintf_r+0xc6>
 800fda8:	9b03      	ldr	r3, [sp, #12]
 800fdaa:	1d19      	adds	r1, r3, #4
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	9103      	str	r1, [sp, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	bfbb      	ittet	lt
 800fdb4:	425b      	neglt	r3, r3
 800fdb6:	f042 0202 	orrlt.w	r2, r2, #2
 800fdba:	9307      	strge	r3, [sp, #28]
 800fdbc:	9307      	strlt	r3, [sp, #28]
 800fdbe:	bfb8      	it	lt
 800fdc0:	9204      	strlt	r2, [sp, #16]
 800fdc2:	7823      	ldrb	r3, [r4, #0]
 800fdc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdc6:	d10a      	bne.n	800fdde <_vfiprintf_r+0x156>
 800fdc8:	7863      	ldrb	r3, [r4, #1]
 800fdca:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdcc:	d132      	bne.n	800fe34 <_vfiprintf_r+0x1ac>
 800fdce:	9b03      	ldr	r3, [sp, #12]
 800fdd0:	1d1a      	adds	r2, r3, #4
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	9203      	str	r2, [sp, #12]
 800fdd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdda:	3402      	adds	r4, #2
 800fddc:	9305      	str	r3, [sp, #20]
 800fdde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800feb4 <_vfiprintf_r+0x22c>
 800fde2:	7821      	ldrb	r1, [r4, #0]
 800fde4:	2203      	movs	r2, #3
 800fde6:	4650      	mov	r0, sl
 800fde8:	f7f0 fa82 	bl	80002f0 <memchr>
 800fdec:	b138      	cbz	r0, 800fdfe <_vfiprintf_r+0x176>
 800fdee:	9b04      	ldr	r3, [sp, #16]
 800fdf0:	eba0 000a 	sub.w	r0, r0, sl
 800fdf4:	2240      	movs	r2, #64	@ 0x40
 800fdf6:	4082      	lsls	r2, r0
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	3401      	adds	r4, #1
 800fdfc:	9304      	str	r3, [sp, #16]
 800fdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe02:	4829      	ldr	r0, [pc, #164]	@ (800fea8 <_vfiprintf_r+0x220>)
 800fe04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe08:	2206      	movs	r2, #6
 800fe0a:	f7f0 fa71 	bl	80002f0 <memchr>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d03f      	beq.n	800fe92 <_vfiprintf_r+0x20a>
 800fe12:	4b26      	ldr	r3, [pc, #152]	@ (800feac <_vfiprintf_r+0x224>)
 800fe14:	bb1b      	cbnz	r3, 800fe5e <_vfiprintf_r+0x1d6>
 800fe16:	9b03      	ldr	r3, [sp, #12]
 800fe18:	3307      	adds	r3, #7
 800fe1a:	f023 0307 	bic.w	r3, r3, #7
 800fe1e:	3308      	adds	r3, #8
 800fe20:	9303      	str	r3, [sp, #12]
 800fe22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe24:	443b      	add	r3, r7
 800fe26:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe28:	e76a      	b.n	800fd00 <_vfiprintf_r+0x78>
 800fe2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe2e:	460c      	mov	r4, r1
 800fe30:	2001      	movs	r0, #1
 800fe32:	e7a8      	b.n	800fd86 <_vfiprintf_r+0xfe>
 800fe34:	2300      	movs	r3, #0
 800fe36:	3401      	adds	r4, #1
 800fe38:	9305      	str	r3, [sp, #20]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	f04f 0c0a 	mov.w	ip, #10
 800fe40:	4620      	mov	r0, r4
 800fe42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe46:	3a30      	subs	r2, #48	@ 0x30
 800fe48:	2a09      	cmp	r2, #9
 800fe4a:	d903      	bls.n	800fe54 <_vfiprintf_r+0x1cc>
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d0c6      	beq.n	800fdde <_vfiprintf_r+0x156>
 800fe50:	9105      	str	r1, [sp, #20]
 800fe52:	e7c4      	b.n	800fdde <_vfiprintf_r+0x156>
 800fe54:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe58:	4604      	mov	r4, r0
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e7f0      	b.n	800fe40 <_vfiprintf_r+0x1b8>
 800fe5e:	ab03      	add	r3, sp, #12
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	462a      	mov	r2, r5
 800fe64:	4b12      	ldr	r3, [pc, #72]	@ (800feb0 <_vfiprintf_r+0x228>)
 800fe66:	a904      	add	r1, sp, #16
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f3af 8000 	nop.w
 800fe6e:	4607      	mov	r7, r0
 800fe70:	1c78      	adds	r0, r7, #1
 800fe72:	d1d6      	bne.n	800fe22 <_vfiprintf_r+0x19a>
 800fe74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe76:	07d9      	lsls	r1, r3, #31
 800fe78:	d405      	bmi.n	800fe86 <_vfiprintf_r+0x1fe>
 800fe7a:	89ab      	ldrh	r3, [r5, #12]
 800fe7c:	059a      	lsls	r2, r3, #22
 800fe7e:	d402      	bmi.n	800fe86 <_vfiprintf_r+0x1fe>
 800fe80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe82:	f7ff fcd5 	bl	800f830 <__retarget_lock_release_recursive>
 800fe86:	89ab      	ldrh	r3, [r5, #12]
 800fe88:	065b      	lsls	r3, r3, #25
 800fe8a:	f53f af1f 	bmi.w	800fccc <_vfiprintf_r+0x44>
 800fe8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe90:	e71e      	b.n	800fcd0 <_vfiprintf_r+0x48>
 800fe92:	ab03      	add	r3, sp, #12
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	462a      	mov	r2, r5
 800fe98:	4b05      	ldr	r3, [pc, #20]	@ (800feb0 <_vfiprintf_r+0x228>)
 800fe9a:	a904      	add	r1, sp, #16
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	f000 f879 	bl	800ff94 <_printf_i>
 800fea2:	e7e4      	b.n	800fe6e <_vfiprintf_r+0x1e6>
 800fea4:	0801062b 	.word	0x0801062b
 800fea8:	08010635 	.word	0x08010635
 800feac:	00000000 	.word	0x00000000
 800feb0:	0800fc65 	.word	0x0800fc65
 800feb4:	08010631 	.word	0x08010631

0800feb8 <_printf_common>:
 800feb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800febc:	4616      	mov	r6, r2
 800febe:	4698      	mov	r8, r3
 800fec0:	688a      	ldr	r2, [r1, #8]
 800fec2:	690b      	ldr	r3, [r1, #16]
 800fec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fec8:	4293      	cmp	r3, r2
 800feca:	bfb8      	it	lt
 800fecc:	4613      	movlt	r3, r2
 800fece:	6033      	str	r3, [r6, #0]
 800fed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fed4:	4607      	mov	r7, r0
 800fed6:	460c      	mov	r4, r1
 800fed8:	b10a      	cbz	r2, 800fede <_printf_common+0x26>
 800feda:	3301      	adds	r3, #1
 800fedc:	6033      	str	r3, [r6, #0]
 800fede:	6823      	ldr	r3, [r4, #0]
 800fee0:	0699      	lsls	r1, r3, #26
 800fee2:	bf42      	ittt	mi
 800fee4:	6833      	ldrmi	r3, [r6, #0]
 800fee6:	3302      	addmi	r3, #2
 800fee8:	6033      	strmi	r3, [r6, #0]
 800feea:	6825      	ldr	r5, [r4, #0]
 800feec:	f015 0506 	ands.w	r5, r5, #6
 800fef0:	d106      	bne.n	800ff00 <_printf_common+0x48>
 800fef2:	f104 0a19 	add.w	sl, r4, #25
 800fef6:	68e3      	ldr	r3, [r4, #12]
 800fef8:	6832      	ldr	r2, [r6, #0]
 800fefa:	1a9b      	subs	r3, r3, r2
 800fefc:	42ab      	cmp	r3, r5
 800fefe:	dc26      	bgt.n	800ff4e <_printf_common+0x96>
 800ff00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff04:	6822      	ldr	r2, [r4, #0]
 800ff06:	3b00      	subs	r3, #0
 800ff08:	bf18      	it	ne
 800ff0a:	2301      	movne	r3, #1
 800ff0c:	0692      	lsls	r2, r2, #26
 800ff0e:	d42b      	bmi.n	800ff68 <_printf_common+0xb0>
 800ff10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff14:	4641      	mov	r1, r8
 800ff16:	4638      	mov	r0, r7
 800ff18:	47c8      	blx	r9
 800ff1a:	3001      	adds	r0, #1
 800ff1c:	d01e      	beq.n	800ff5c <_printf_common+0xa4>
 800ff1e:	6823      	ldr	r3, [r4, #0]
 800ff20:	6922      	ldr	r2, [r4, #16]
 800ff22:	f003 0306 	and.w	r3, r3, #6
 800ff26:	2b04      	cmp	r3, #4
 800ff28:	bf02      	ittt	eq
 800ff2a:	68e5      	ldreq	r5, [r4, #12]
 800ff2c:	6833      	ldreq	r3, [r6, #0]
 800ff2e:	1aed      	subeq	r5, r5, r3
 800ff30:	68a3      	ldr	r3, [r4, #8]
 800ff32:	bf0c      	ite	eq
 800ff34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff38:	2500      	movne	r5, #0
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	bfc4      	itt	gt
 800ff3e:	1a9b      	subgt	r3, r3, r2
 800ff40:	18ed      	addgt	r5, r5, r3
 800ff42:	2600      	movs	r6, #0
 800ff44:	341a      	adds	r4, #26
 800ff46:	42b5      	cmp	r5, r6
 800ff48:	d11a      	bne.n	800ff80 <_printf_common+0xc8>
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	e008      	b.n	800ff60 <_printf_common+0xa8>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	4652      	mov	r2, sl
 800ff52:	4641      	mov	r1, r8
 800ff54:	4638      	mov	r0, r7
 800ff56:	47c8      	blx	r9
 800ff58:	3001      	adds	r0, #1
 800ff5a:	d103      	bne.n	800ff64 <_printf_common+0xac>
 800ff5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff64:	3501      	adds	r5, #1
 800ff66:	e7c6      	b.n	800fef6 <_printf_common+0x3e>
 800ff68:	18e1      	adds	r1, r4, r3
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	2030      	movs	r0, #48	@ 0x30
 800ff6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff72:	4422      	add	r2, r4
 800ff74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff7c:	3302      	adds	r3, #2
 800ff7e:	e7c7      	b.n	800ff10 <_printf_common+0x58>
 800ff80:	2301      	movs	r3, #1
 800ff82:	4622      	mov	r2, r4
 800ff84:	4641      	mov	r1, r8
 800ff86:	4638      	mov	r0, r7
 800ff88:	47c8      	blx	r9
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	d0e6      	beq.n	800ff5c <_printf_common+0xa4>
 800ff8e:	3601      	adds	r6, #1
 800ff90:	e7d9      	b.n	800ff46 <_printf_common+0x8e>
	...

0800ff94 <_printf_i>:
 800ff94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff98:	7e0f      	ldrb	r7, [r1, #24]
 800ff9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff9c:	2f78      	cmp	r7, #120	@ 0x78
 800ff9e:	4691      	mov	r9, r2
 800ffa0:	4680      	mov	r8, r0
 800ffa2:	460c      	mov	r4, r1
 800ffa4:	469a      	mov	sl, r3
 800ffa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ffaa:	d807      	bhi.n	800ffbc <_printf_i+0x28>
 800ffac:	2f62      	cmp	r7, #98	@ 0x62
 800ffae:	d80a      	bhi.n	800ffc6 <_printf_i+0x32>
 800ffb0:	2f00      	cmp	r7, #0
 800ffb2:	f000 80d2 	beq.w	801015a <_printf_i+0x1c6>
 800ffb6:	2f58      	cmp	r7, #88	@ 0x58
 800ffb8:	f000 80b9 	beq.w	801012e <_printf_i+0x19a>
 800ffbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffc4:	e03a      	b.n	801003c <_printf_i+0xa8>
 800ffc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffca:	2b15      	cmp	r3, #21
 800ffcc:	d8f6      	bhi.n	800ffbc <_printf_i+0x28>
 800ffce:	a101      	add	r1, pc, #4	@ (adr r1, 800ffd4 <_printf_i+0x40>)
 800ffd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffd4:	0801002d 	.word	0x0801002d
 800ffd8:	08010041 	.word	0x08010041
 800ffdc:	0800ffbd 	.word	0x0800ffbd
 800ffe0:	0800ffbd 	.word	0x0800ffbd
 800ffe4:	0800ffbd 	.word	0x0800ffbd
 800ffe8:	0800ffbd 	.word	0x0800ffbd
 800ffec:	08010041 	.word	0x08010041
 800fff0:	0800ffbd 	.word	0x0800ffbd
 800fff4:	0800ffbd 	.word	0x0800ffbd
 800fff8:	0800ffbd 	.word	0x0800ffbd
 800fffc:	0800ffbd 	.word	0x0800ffbd
 8010000:	08010141 	.word	0x08010141
 8010004:	0801006b 	.word	0x0801006b
 8010008:	080100fb 	.word	0x080100fb
 801000c:	0800ffbd 	.word	0x0800ffbd
 8010010:	0800ffbd 	.word	0x0800ffbd
 8010014:	08010163 	.word	0x08010163
 8010018:	0800ffbd 	.word	0x0800ffbd
 801001c:	0801006b 	.word	0x0801006b
 8010020:	0800ffbd 	.word	0x0800ffbd
 8010024:	0800ffbd 	.word	0x0800ffbd
 8010028:	08010103 	.word	0x08010103
 801002c:	6833      	ldr	r3, [r6, #0]
 801002e:	1d1a      	adds	r2, r3, #4
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	6032      	str	r2, [r6, #0]
 8010034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801003c:	2301      	movs	r3, #1
 801003e:	e09d      	b.n	801017c <_printf_i+0x1e8>
 8010040:	6833      	ldr	r3, [r6, #0]
 8010042:	6820      	ldr	r0, [r4, #0]
 8010044:	1d19      	adds	r1, r3, #4
 8010046:	6031      	str	r1, [r6, #0]
 8010048:	0606      	lsls	r6, r0, #24
 801004a:	d501      	bpl.n	8010050 <_printf_i+0xbc>
 801004c:	681d      	ldr	r5, [r3, #0]
 801004e:	e003      	b.n	8010058 <_printf_i+0xc4>
 8010050:	0645      	lsls	r5, r0, #25
 8010052:	d5fb      	bpl.n	801004c <_printf_i+0xb8>
 8010054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010058:	2d00      	cmp	r5, #0
 801005a:	da03      	bge.n	8010064 <_printf_i+0xd0>
 801005c:	232d      	movs	r3, #45	@ 0x2d
 801005e:	426d      	negs	r5, r5
 8010060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010064:	4859      	ldr	r0, [pc, #356]	@ (80101cc <_printf_i+0x238>)
 8010066:	230a      	movs	r3, #10
 8010068:	e011      	b.n	801008e <_printf_i+0xfa>
 801006a:	6821      	ldr	r1, [r4, #0]
 801006c:	6833      	ldr	r3, [r6, #0]
 801006e:	0608      	lsls	r0, r1, #24
 8010070:	f853 5b04 	ldr.w	r5, [r3], #4
 8010074:	d402      	bmi.n	801007c <_printf_i+0xe8>
 8010076:	0649      	lsls	r1, r1, #25
 8010078:	bf48      	it	mi
 801007a:	b2ad      	uxthmi	r5, r5
 801007c:	2f6f      	cmp	r7, #111	@ 0x6f
 801007e:	4853      	ldr	r0, [pc, #332]	@ (80101cc <_printf_i+0x238>)
 8010080:	6033      	str	r3, [r6, #0]
 8010082:	bf14      	ite	ne
 8010084:	230a      	movne	r3, #10
 8010086:	2308      	moveq	r3, #8
 8010088:	2100      	movs	r1, #0
 801008a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801008e:	6866      	ldr	r6, [r4, #4]
 8010090:	60a6      	str	r6, [r4, #8]
 8010092:	2e00      	cmp	r6, #0
 8010094:	bfa2      	ittt	ge
 8010096:	6821      	ldrge	r1, [r4, #0]
 8010098:	f021 0104 	bicge.w	r1, r1, #4
 801009c:	6021      	strge	r1, [r4, #0]
 801009e:	b90d      	cbnz	r5, 80100a4 <_printf_i+0x110>
 80100a0:	2e00      	cmp	r6, #0
 80100a2:	d04b      	beq.n	801013c <_printf_i+0x1a8>
 80100a4:	4616      	mov	r6, r2
 80100a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80100aa:	fb03 5711 	mls	r7, r3, r1, r5
 80100ae:	5dc7      	ldrb	r7, [r0, r7]
 80100b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80100b4:	462f      	mov	r7, r5
 80100b6:	42bb      	cmp	r3, r7
 80100b8:	460d      	mov	r5, r1
 80100ba:	d9f4      	bls.n	80100a6 <_printf_i+0x112>
 80100bc:	2b08      	cmp	r3, #8
 80100be:	d10b      	bne.n	80100d8 <_printf_i+0x144>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	07df      	lsls	r7, r3, #31
 80100c4:	d508      	bpl.n	80100d8 <_printf_i+0x144>
 80100c6:	6923      	ldr	r3, [r4, #16]
 80100c8:	6861      	ldr	r1, [r4, #4]
 80100ca:	4299      	cmp	r1, r3
 80100cc:	bfde      	ittt	le
 80100ce:	2330      	movle	r3, #48	@ 0x30
 80100d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100d8:	1b92      	subs	r2, r2, r6
 80100da:	6122      	str	r2, [r4, #16]
 80100dc:	f8cd a000 	str.w	sl, [sp]
 80100e0:	464b      	mov	r3, r9
 80100e2:	aa03      	add	r2, sp, #12
 80100e4:	4621      	mov	r1, r4
 80100e6:	4640      	mov	r0, r8
 80100e8:	f7ff fee6 	bl	800feb8 <_printf_common>
 80100ec:	3001      	adds	r0, #1
 80100ee:	d14a      	bne.n	8010186 <_printf_i+0x1f2>
 80100f0:	f04f 30ff 	mov.w	r0, #4294967295
 80100f4:	b004      	add	sp, #16
 80100f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	f043 0320 	orr.w	r3, r3, #32
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	4833      	ldr	r0, [pc, #204]	@ (80101d0 <_printf_i+0x23c>)
 8010104:	2778      	movs	r7, #120	@ 0x78
 8010106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801010a:	6823      	ldr	r3, [r4, #0]
 801010c:	6831      	ldr	r1, [r6, #0]
 801010e:	061f      	lsls	r7, r3, #24
 8010110:	f851 5b04 	ldr.w	r5, [r1], #4
 8010114:	d402      	bmi.n	801011c <_printf_i+0x188>
 8010116:	065f      	lsls	r7, r3, #25
 8010118:	bf48      	it	mi
 801011a:	b2ad      	uxthmi	r5, r5
 801011c:	6031      	str	r1, [r6, #0]
 801011e:	07d9      	lsls	r1, r3, #31
 8010120:	bf44      	itt	mi
 8010122:	f043 0320 	orrmi.w	r3, r3, #32
 8010126:	6023      	strmi	r3, [r4, #0]
 8010128:	b11d      	cbz	r5, 8010132 <_printf_i+0x19e>
 801012a:	2310      	movs	r3, #16
 801012c:	e7ac      	b.n	8010088 <_printf_i+0xf4>
 801012e:	4827      	ldr	r0, [pc, #156]	@ (80101cc <_printf_i+0x238>)
 8010130:	e7e9      	b.n	8010106 <_printf_i+0x172>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	f023 0320 	bic.w	r3, r3, #32
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	e7f6      	b.n	801012a <_printf_i+0x196>
 801013c:	4616      	mov	r6, r2
 801013e:	e7bd      	b.n	80100bc <_printf_i+0x128>
 8010140:	6833      	ldr	r3, [r6, #0]
 8010142:	6825      	ldr	r5, [r4, #0]
 8010144:	6961      	ldr	r1, [r4, #20]
 8010146:	1d18      	adds	r0, r3, #4
 8010148:	6030      	str	r0, [r6, #0]
 801014a:	062e      	lsls	r6, r5, #24
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	d501      	bpl.n	8010154 <_printf_i+0x1c0>
 8010150:	6019      	str	r1, [r3, #0]
 8010152:	e002      	b.n	801015a <_printf_i+0x1c6>
 8010154:	0668      	lsls	r0, r5, #25
 8010156:	d5fb      	bpl.n	8010150 <_printf_i+0x1bc>
 8010158:	8019      	strh	r1, [r3, #0]
 801015a:	2300      	movs	r3, #0
 801015c:	6123      	str	r3, [r4, #16]
 801015e:	4616      	mov	r6, r2
 8010160:	e7bc      	b.n	80100dc <_printf_i+0x148>
 8010162:	6833      	ldr	r3, [r6, #0]
 8010164:	1d1a      	adds	r2, r3, #4
 8010166:	6032      	str	r2, [r6, #0]
 8010168:	681e      	ldr	r6, [r3, #0]
 801016a:	6862      	ldr	r2, [r4, #4]
 801016c:	2100      	movs	r1, #0
 801016e:	4630      	mov	r0, r6
 8010170:	f7f0 f8be 	bl	80002f0 <memchr>
 8010174:	b108      	cbz	r0, 801017a <_printf_i+0x1e6>
 8010176:	1b80      	subs	r0, r0, r6
 8010178:	6060      	str	r0, [r4, #4]
 801017a:	6863      	ldr	r3, [r4, #4]
 801017c:	6123      	str	r3, [r4, #16]
 801017e:	2300      	movs	r3, #0
 8010180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010184:	e7aa      	b.n	80100dc <_printf_i+0x148>
 8010186:	6923      	ldr	r3, [r4, #16]
 8010188:	4632      	mov	r2, r6
 801018a:	4649      	mov	r1, r9
 801018c:	4640      	mov	r0, r8
 801018e:	47d0      	blx	sl
 8010190:	3001      	adds	r0, #1
 8010192:	d0ad      	beq.n	80100f0 <_printf_i+0x15c>
 8010194:	6823      	ldr	r3, [r4, #0]
 8010196:	079b      	lsls	r3, r3, #30
 8010198:	d413      	bmi.n	80101c2 <_printf_i+0x22e>
 801019a:	68e0      	ldr	r0, [r4, #12]
 801019c:	9b03      	ldr	r3, [sp, #12]
 801019e:	4298      	cmp	r0, r3
 80101a0:	bfb8      	it	lt
 80101a2:	4618      	movlt	r0, r3
 80101a4:	e7a6      	b.n	80100f4 <_printf_i+0x160>
 80101a6:	2301      	movs	r3, #1
 80101a8:	4632      	mov	r2, r6
 80101aa:	4649      	mov	r1, r9
 80101ac:	4640      	mov	r0, r8
 80101ae:	47d0      	blx	sl
 80101b0:	3001      	adds	r0, #1
 80101b2:	d09d      	beq.n	80100f0 <_printf_i+0x15c>
 80101b4:	3501      	adds	r5, #1
 80101b6:	68e3      	ldr	r3, [r4, #12]
 80101b8:	9903      	ldr	r1, [sp, #12]
 80101ba:	1a5b      	subs	r3, r3, r1
 80101bc:	42ab      	cmp	r3, r5
 80101be:	dcf2      	bgt.n	80101a6 <_printf_i+0x212>
 80101c0:	e7eb      	b.n	801019a <_printf_i+0x206>
 80101c2:	2500      	movs	r5, #0
 80101c4:	f104 0619 	add.w	r6, r4, #25
 80101c8:	e7f5      	b.n	80101b6 <_printf_i+0x222>
 80101ca:	bf00      	nop
 80101cc:	0801063c 	.word	0x0801063c
 80101d0:	0801064d 	.word	0x0801064d

080101d4 <__swbuf_r>:
 80101d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d6:	460e      	mov	r6, r1
 80101d8:	4614      	mov	r4, r2
 80101da:	4605      	mov	r5, r0
 80101dc:	b118      	cbz	r0, 80101e6 <__swbuf_r+0x12>
 80101de:	6a03      	ldr	r3, [r0, #32]
 80101e0:	b90b      	cbnz	r3, 80101e6 <__swbuf_r+0x12>
 80101e2:	f7ff f9ad 	bl	800f540 <__sinit>
 80101e6:	69a3      	ldr	r3, [r4, #24]
 80101e8:	60a3      	str	r3, [r4, #8]
 80101ea:	89a3      	ldrh	r3, [r4, #12]
 80101ec:	071a      	lsls	r2, r3, #28
 80101ee:	d501      	bpl.n	80101f4 <__swbuf_r+0x20>
 80101f0:	6923      	ldr	r3, [r4, #16]
 80101f2:	b943      	cbnz	r3, 8010206 <__swbuf_r+0x32>
 80101f4:	4621      	mov	r1, r4
 80101f6:	4628      	mov	r0, r5
 80101f8:	f000 f82a 	bl	8010250 <__swsetup_r>
 80101fc:	b118      	cbz	r0, 8010206 <__swbuf_r+0x32>
 80101fe:	f04f 37ff 	mov.w	r7, #4294967295
 8010202:	4638      	mov	r0, r7
 8010204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	6922      	ldr	r2, [r4, #16]
 801020a:	1a98      	subs	r0, r3, r2
 801020c:	6963      	ldr	r3, [r4, #20]
 801020e:	b2f6      	uxtb	r6, r6
 8010210:	4283      	cmp	r3, r0
 8010212:	4637      	mov	r7, r6
 8010214:	dc05      	bgt.n	8010222 <__swbuf_r+0x4e>
 8010216:	4621      	mov	r1, r4
 8010218:	4628      	mov	r0, r5
 801021a:	f7ff fcbb 	bl	800fb94 <_fflush_r>
 801021e:	2800      	cmp	r0, #0
 8010220:	d1ed      	bne.n	80101fe <__swbuf_r+0x2a>
 8010222:	68a3      	ldr	r3, [r4, #8]
 8010224:	3b01      	subs	r3, #1
 8010226:	60a3      	str	r3, [r4, #8]
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	1c5a      	adds	r2, r3, #1
 801022c:	6022      	str	r2, [r4, #0]
 801022e:	701e      	strb	r6, [r3, #0]
 8010230:	6962      	ldr	r2, [r4, #20]
 8010232:	1c43      	adds	r3, r0, #1
 8010234:	429a      	cmp	r2, r3
 8010236:	d004      	beq.n	8010242 <__swbuf_r+0x6e>
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	07db      	lsls	r3, r3, #31
 801023c:	d5e1      	bpl.n	8010202 <__swbuf_r+0x2e>
 801023e:	2e0a      	cmp	r6, #10
 8010240:	d1df      	bne.n	8010202 <__swbuf_r+0x2e>
 8010242:	4621      	mov	r1, r4
 8010244:	4628      	mov	r0, r5
 8010246:	f7ff fca5 	bl	800fb94 <_fflush_r>
 801024a:	2800      	cmp	r0, #0
 801024c:	d0d9      	beq.n	8010202 <__swbuf_r+0x2e>
 801024e:	e7d6      	b.n	80101fe <__swbuf_r+0x2a>

08010250 <__swsetup_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4b29      	ldr	r3, [pc, #164]	@ (80102f8 <__swsetup_r+0xa8>)
 8010254:	4605      	mov	r5, r0
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	460c      	mov	r4, r1
 801025a:	b118      	cbz	r0, 8010264 <__swsetup_r+0x14>
 801025c:	6a03      	ldr	r3, [r0, #32]
 801025e:	b90b      	cbnz	r3, 8010264 <__swsetup_r+0x14>
 8010260:	f7ff f96e 	bl	800f540 <__sinit>
 8010264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010268:	0719      	lsls	r1, r3, #28
 801026a:	d422      	bmi.n	80102b2 <__swsetup_r+0x62>
 801026c:	06da      	lsls	r2, r3, #27
 801026e:	d407      	bmi.n	8010280 <__swsetup_r+0x30>
 8010270:	2209      	movs	r2, #9
 8010272:	602a      	str	r2, [r5, #0]
 8010274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010278:	81a3      	strh	r3, [r4, #12]
 801027a:	f04f 30ff 	mov.w	r0, #4294967295
 801027e:	e033      	b.n	80102e8 <__swsetup_r+0x98>
 8010280:	0758      	lsls	r0, r3, #29
 8010282:	d512      	bpl.n	80102aa <__swsetup_r+0x5a>
 8010284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010286:	b141      	cbz	r1, 801029a <__swsetup_r+0x4a>
 8010288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801028c:	4299      	cmp	r1, r3
 801028e:	d002      	beq.n	8010296 <__swsetup_r+0x46>
 8010290:	4628      	mov	r0, r5
 8010292:	f7ff fafb 	bl	800f88c <_free_r>
 8010296:	2300      	movs	r3, #0
 8010298:	6363      	str	r3, [r4, #52]	@ 0x34
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80102a0:	81a3      	strh	r3, [r4, #12]
 80102a2:	2300      	movs	r3, #0
 80102a4:	6063      	str	r3, [r4, #4]
 80102a6:	6923      	ldr	r3, [r4, #16]
 80102a8:	6023      	str	r3, [r4, #0]
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	f043 0308 	orr.w	r3, r3, #8
 80102b0:	81a3      	strh	r3, [r4, #12]
 80102b2:	6923      	ldr	r3, [r4, #16]
 80102b4:	b94b      	cbnz	r3, 80102ca <__swsetup_r+0x7a>
 80102b6:	89a3      	ldrh	r3, [r4, #12]
 80102b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80102bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102c0:	d003      	beq.n	80102ca <__swsetup_r+0x7a>
 80102c2:	4621      	mov	r1, r4
 80102c4:	4628      	mov	r0, r5
 80102c6:	f000 f883 	bl	80103d0 <__smakebuf_r>
 80102ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ce:	f013 0201 	ands.w	r2, r3, #1
 80102d2:	d00a      	beq.n	80102ea <__swsetup_r+0x9a>
 80102d4:	2200      	movs	r2, #0
 80102d6:	60a2      	str	r2, [r4, #8]
 80102d8:	6962      	ldr	r2, [r4, #20]
 80102da:	4252      	negs	r2, r2
 80102dc:	61a2      	str	r2, [r4, #24]
 80102de:	6922      	ldr	r2, [r4, #16]
 80102e0:	b942      	cbnz	r2, 80102f4 <__swsetup_r+0xa4>
 80102e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80102e6:	d1c5      	bne.n	8010274 <__swsetup_r+0x24>
 80102e8:	bd38      	pop	{r3, r4, r5, pc}
 80102ea:	0799      	lsls	r1, r3, #30
 80102ec:	bf58      	it	pl
 80102ee:	6962      	ldrpl	r2, [r4, #20]
 80102f0:	60a2      	str	r2, [r4, #8]
 80102f2:	e7f4      	b.n	80102de <__swsetup_r+0x8e>
 80102f4:	2000      	movs	r0, #0
 80102f6:	e7f7      	b.n	80102e8 <__swsetup_r+0x98>
 80102f8:	24000020 	.word	0x24000020

080102fc <_raise_r>:
 80102fc:	291f      	cmp	r1, #31
 80102fe:	b538      	push	{r3, r4, r5, lr}
 8010300:	4605      	mov	r5, r0
 8010302:	460c      	mov	r4, r1
 8010304:	d904      	bls.n	8010310 <_raise_r+0x14>
 8010306:	2316      	movs	r3, #22
 8010308:	6003      	str	r3, [r0, #0]
 801030a:	f04f 30ff 	mov.w	r0, #4294967295
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010312:	b112      	cbz	r2, 801031a <_raise_r+0x1e>
 8010314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010318:	b94b      	cbnz	r3, 801032e <_raise_r+0x32>
 801031a:	4628      	mov	r0, r5
 801031c:	f000 f830 	bl	8010380 <_getpid_r>
 8010320:	4622      	mov	r2, r4
 8010322:	4601      	mov	r1, r0
 8010324:	4628      	mov	r0, r5
 8010326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801032a:	f000 b817 	b.w	801035c <_kill_r>
 801032e:	2b01      	cmp	r3, #1
 8010330:	d00a      	beq.n	8010348 <_raise_r+0x4c>
 8010332:	1c59      	adds	r1, r3, #1
 8010334:	d103      	bne.n	801033e <_raise_r+0x42>
 8010336:	2316      	movs	r3, #22
 8010338:	6003      	str	r3, [r0, #0]
 801033a:	2001      	movs	r0, #1
 801033c:	e7e7      	b.n	801030e <_raise_r+0x12>
 801033e:	2100      	movs	r1, #0
 8010340:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010344:	4620      	mov	r0, r4
 8010346:	4798      	blx	r3
 8010348:	2000      	movs	r0, #0
 801034a:	e7e0      	b.n	801030e <_raise_r+0x12>

0801034c <raise>:
 801034c:	4b02      	ldr	r3, [pc, #8]	@ (8010358 <raise+0xc>)
 801034e:	4601      	mov	r1, r0
 8010350:	6818      	ldr	r0, [r3, #0]
 8010352:	f7ff bfd3 	b.w	80102fc <_raise_r>
 8010356:	bf00      	nop
 8010358:	24000020 	.word	0x24000020

0801035c <_kill_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4d07      	ldr	r5, [pc, #28]	@ (801037c <_kill_r+0x20>)
 8010360:	2300      	movs	r3, #0
 8010362:	4604      	mov	r4, r0
 8010364:	4608      	mov	r0, r1
 8010366:	4611      	mov	r1, r2
 8010368:	602b      	str	r3, [r5, #0]
 801036a:	f7f0 fe93 	bl	8001094 <_kill>
 801036e:	1c43      	adds	r3, r0, #1
 8010370:	d102      	bne.n	8010378 <_kill_r+0x1c>
 8010372:	682b      	ldr	r3, [r5, #0]
 8010374:	b103      	cbz	r3, 8010378 <_kill_r+0x1c>
 8010376:	6023      	str	r3, [r4, #0]
 8010378:	bd38      	pop	{r3, r4, r5, pc}
 801037a:	bf00      	nop
 801037c:	24004e04 	.word	0x24004e04

08010380 <_getpid_r>:
 8010380:	f7f0 be80 	b.w	8001084 <_getpid>

08010384 <__swhatbuf_r>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	460c      	mov	r4, r1
 8010388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801038c:	2900      	cmp	r1, #0
 801038e:	b096      	sub	sp, #88	@ 0x58
 8010390:	4615      	mov	r5, r2
 8010392:	461e      	mov	r6, r3
 8010394:	da0d      	bge.n	80103b2 <__swhatbuf_r+0x2e>
 8010396:	89a3      	ldrh	r3, [r4, #12]
 8010398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801039c:	f04f 0100 	mov.w	r1, #0
 80103a0:	bf14      	ite	ne
 80103a2:	2340      	movne	r3, #64	@ 0x40
 80103a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80103a8:	2000      	movs	r0, #0
 80103aa:	6031      	str	r1, [r6, #0]
 80103ac:	602b      	str	r3, [r5, #0]
 80103ae:	b016      	add	sp, #88	@ 0x58
 80103b0:	bd70      	pop	{r4, r5, r6, pc}
 80103b2:	466a      	mov	r2, sp
 80103b4:	f000 f848 	bl	8010448 <_fstat_r>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	dbec      	blt.n	8010396 <__swhatbuf_r+0x12>
 80103bc:	9901      	ldr	r1, [sp, #4]
 80103be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80103c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80103c6:	4259      	negs	r1, r3
 80103c8:	4159      	adcs	r1, r3
 80103ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103ce:	e7eb      	b.n	80103a8 <__swhatbuf_r+0x24>

080103d0 <__smakebuf_r>:
 80103d0:	898b      	ldrh	r3, [r1, #12]
 80103d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103d4:	079d      	lsls	r5, r3, #30
 80103d6:	4606      	mov	r6, r0
 80103d8:	460c      	mov	r4, r1
 80103da:	d507      	bpl.n	80103ec <__smakebuf_r+0x1c>
 80103dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	6123      	str	r3, [r4, #16]
 80103e4:	2301      	movs	r3, #1
 80103e6:	6163      	str	r3, [r4, #20]
 80103e8:	b003      	add	sp, #12
 80103ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103ec:	ab01      	add	r3, sp, #4
 80103ee:	466a      	mov	r2, sp
 80103f0:	f7ff ffc8 	bl	8010384 <__swhatbuf_r>
 80103f4:	9f00      	ldr	r7, [sp, #0]
 80103f6:	4605      	mov	r5, r0
 80103f8:	4639      	mov	r1, r7
 80103fa:	4630      	mov	r0, r6
 80103fc:	f7ff faba 	bl	800f974 <_malloc_r>
 8010400:	b948      	cbnz	r0, 8010416 <__smakebuf_r+0x46>
 8010402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010406:	059a      	lsls	r2, r3, #22
 8010408:	d4ee      	bmi.n	80103e8 <__smakebuf_r+0x18>
 801040a:	f023 0303 	bic.w	r3, r3, #3
 801040e:	f043 0302 	orr.w	r3, r3, #2
 8010412:	81a3      	strh	r3, [r4, #12]
 8010414:	e7e2      	b.n	80103dc <__smakebuf_r+0xc>
 8010416:	89a3      	ldrh	r3, [r4, #12]
 8010418:	6020      	str	r0, [r4, #0]
 801041a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801041e:	81a3      	strh	r3, [r4, #12]
 8010420:	9b01      	ldr	r3, [sp, #4]
 8010422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010426:	b15b      	cbz	r3, 8010440 <__smakebuf_r+0x70>
 8010428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801042c:	4630      	mov	r0, r6
 801042e:	f000 f81d 	bl	801046c <_isatty_r>
 8010432:	b128      	cbz	r0, 8010440 <__smakebuf_r+0x70>
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	f023 0303 	bic.w	r3, r3, #3
 801043a:	f043 0301 	orr.w	r3, r3, #1
 801043e:	81a3      	strh	r3, [r4, #12]
 8010440:	89a3      	ldrh	r3, [r4, #12]
 8010442:	431d      	orrs	r5, r3
 8010444:	81a5      	strh	r5, [r4, #12]
 8010446:	e7cf      	b.n	80103e8 <__smakebuf_r+0x18>

08010448 <_fstat_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	@ (8010468 <_fstat_r+0x20>)
 801044c:	2300      	movs	r3, #0
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	4611      	mov	r1, r2
 8010454:	602b      	str	r3, [r5, #0]
 8010456:	f7f0 fe7d 	bl	8001154 <_fstat>
 801045a:	1c43      	adds	r3, r0, #1
 801045c:	d102      	bne.n	8010464 <_fstat_r+0x1c>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b103      	cbz	r3, 8010464 <_fstat_r+0x1c>
 8010462:	6023      	str	r3, [r4, #0]
 8010464:	bd38      	pop	{r3, r4, r5, pc}
 8010466:	bf00      	nop
 8010468:	24004e04 	.word	0x24004e04

0801046c <_isatty_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d06      	ldr	r5, [pc, #24]	@ (8010488 <_isatty_r+0x1c>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	602b      	str	r3, [r5, #0]
 8010478:	f7f0 fe7c 	bl	8001174 <_isatty>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_isatty_r+0x1a>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_isatty_r+0x1a>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	24004e04 	.word	0x24004e04

0801048c <_gettimeofday>:
 801048c:	4b02      	ldr	r3, [pc, #8]	@ (8010498 <_gettimeofday+0xc>)
 801048e:	2258      	movs	r2, #88	@ 0x58
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	f04f 30ff 	mov.w	r0, #4294967295
 8010496:	4770      	bx	lr
 8010498:	24004e04 	.word	0x24004e04

0801049c <_init>:
 801049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049e:	bf00      	nop
 80104a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104a2:	bc08      	pop	{r3}
 80104a4:	469e      	mov	lr, r3
 80104a6:	4770      	bx	lr

080104a8 <_fini>:
 80104a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104aa:	bf00      	nop
 80104ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ae:	bc08      	pop	{r3}
 80104b0:	469e      	mov	lr, r3
 80104b2:	4770      	bx	lr
