
i2c_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec68  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800ef18  0800ef18  0000ff18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800efd8  0800efd8  0000ffd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800efe0  0800efe0  0000ffe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800efe4  0800efe4  0000ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800efe8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d90  24000064  0800f04c  00010064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004df4  0800f04c  00010df4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 10 .debug_info   000277b8  00000000  00000000  00010092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049cd  00000000  00000000  0003784a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c98  00000000  00000000  0003c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164f  00000000  00000000  0003deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033c3d  00000000  00000000  0003f4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002749f  00000000  00000000  0007313c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ae30  00000000  00000000  0009a5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e540b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007be0  00000000  00000000  001e5450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001ed030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ef00 	.word	0x0800ef00

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800ef00 	.word	0x0800ef00

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_DMA_Init+0x4c>)
 80005e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_DMA_Init+0x4c>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x4c>)
 80005f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2106      	movs	r1, #6
 8000608:	200b      	movs	r0, #11
 800060a:	f000 fea3 	bl	8001354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800060e:	200b      	movs	r0, #11
 8000610:	f000 feba 	bl	8001388 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2106      	movs	r1, #6
 8000618:	200c      	movs	r0, #12
 800061a:	f000 fe9b 	bl	8001354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800061e:	200c      	movs	r0, #12
 8000620:	f000 feb2 	bl	8001388 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58024400 	.word	0x58024400

08000630 <PreSleepProcessing>:

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <MX_FREERTOS_Init+0x18>)
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_FREERTOS_Init+0x1c>)
 8000662:	f00b f93b 	bl	800b8dc <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <MX_FREERTOS_Init+0x20>)
 800066a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800ef74 	.word	0x0800ef74
 8000674:	0800067d 	.word	0x0800067d
 8000678:	24000080 	.word	0x24000080

0800067c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f00b f9bb 	bl	800ba00 <osDelay>
 800068a:	e7fb      	b.n	8000684 <StartDefaultTask+0x8>

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006a8:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006b8:	f003 0302 	and.w	r3, r3, #2
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_GPIO_Init+0x84>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esp32i2cInterruptReqest_Pin;
 80006de:	2320      	movs	r3, #32
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(esp32i2cInterruptReqest_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x88>)
 80006f4:	f003 fd4e 	bl	8004194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	2017      	movs	r0, #23
 80006fe:	f000 fe29 	bl	8001354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000702:	2017      	movs	r0, #23
 8000704:	f000 fe40 	bl	8001388 <HAL_NVIC_EnableIRQ>

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58024400 	.word	0x58024400
 8000714:	58020400 	.word	0x58020400

08000718 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C1_Init+0x74>)
 800074e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_I2C1_Init+0x74>)
 8000756:	f003 fee7 	bl	8004528 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa9e 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_I2C1_Init+0x74>)
 8000768:	f006 f804 	bl	8006774 <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fa95 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_I2C1_Init+0x74>)
 800077a:	f006 f846 	bl	800680a <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fa8c 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	24000084 	.word	0x24000084
 8000790:	40005400 	.word	0x40005400
 8000794:	20b0ccff 	.word	0x20b0ccff

08000798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0ba      	sub	sp, #232	@ 0xe8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	22c0      	movs	r2, #192	@ 0xc0
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00e fab9 	bl	800ed30 <memset>
  if(i2cHandle->Instance==I2C1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a5c      	ldr	r2, [pc, #368]	@ (8000934 <HAL_I2C_MspInit+0x19c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f040 80b1 	bne.w	800092c <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ca:	f04f 0208 	mov.w	r2, #8
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 f899 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80007ec:	f000 fa58 	bl	8000ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f6:	4a50      	ldr	r2, [pc, #320]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000800:	4b4d      	ldr	r3, [pc, #308]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000828:	2304      	movs	r3, #4
 800082a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000832:	4619      	mov	r1, r3
 8000834:	4841      	ldr	r0, [pc, #260]	@ (800093c <HAL_I2C_MspInit+0x1a4>)
 8000836:	f003 fcad 	bl	8004194 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 800083c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000840:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000846:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <HAL_I2C_MspInit+0x1a0>)
 800084c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000858:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800085a:	4a3a      	ldr	r2, [pc, #232]	@ (8000944 <HAL_I2C_MspInit+0x1ac>)
 800085c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800085e:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000860:	2221      	movs	r2, #33	@ 0x21
 8000862:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000864:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800086a:	4b35      	ldr	r3, [pc, #212]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000870:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000876:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087e:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000896:	482a      	ldr	r0, [pc, #168]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 8000898:	f000 fd84 	bl	80013a4 <HAL_DMA_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80008a2:	f000 f9fd 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a25      	ldr	r2, [pc, #148]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ac:	4a24      	ldr	r2, [pc, #144]	@ (8000940 <HAL_I2C_MspInit+0x1a8>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80008b2:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008b4:	4a25      	ldr	r2, [pc, #148]	@ (800094c <HAL_I2C_MspInit+0x1b4>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80008b8:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008ba:	2222      	movs	r2, #34	@ 0x22
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008c0:	2240      	movs	r2, #64	@ 0x40
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008f0:	4815      	ldr	r0, [pc, #84]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 80008f2:	f000 fd57 	bl	80013a4 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 80008fc:	f000 f9d0 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
 8000906:	4a10      	ldr	r2, [pc, #64]	@ (8000948 <HAL_I2C_MspInit+0x1b0>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2106      	movs	r1, #6
 8000910:	201f      	movs	r0, #31
 8000912:	f000 fd1f 	bl	8001354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000916:	201f      	movs	r0, #31
 8000918:	f000 fd36 	bl	8001388 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2106      	movs	r1, #6
 8000920:	2020      	movs	r0, #32
 8000922:	f000 fd17 	bl	8001354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000926:	2020      	movs	r0, #32
 8000928:	f000 fd2e 	bl	8001388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	37e8      	adds	r7, #232	@ 0xe8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	58024400 	.word	0x58024400
 800093c:	58020400 	.word	0x58020400
 8000940:	240000d8 	.word	0x240000d8
 8000944:	40020010 	.word	0x40020010
 8000948:	24000150 	.word	0x24000150
 800094c:	40020028 	.word	0x40020028

08000950 <HAL_GPIO_EXTI_Callback>:


static bool esp32I2cInitialised = false;
SemaphoreHandle_t i2c_semap;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	if(esp32I2cInitialised==false){
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_GPIO_EXTI_Callback+0x54>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	f083 0301 	eor.w	r3, r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <HAL_GPIO_EXTI_Callback+0x20>
		esp32I2cInitialised=true;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_GPIO_EXTI_Callback+0x54>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		xSemaphoreGiveFromISR(CountingSemaphore, &xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

}
 800096e:	e014      	b.n	800099a <HAL_GPIO_EXTI_Callback+0x4a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(CountingSemaphore, &xHigherPriorityTaskWoken);
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f107 020c 	add.w	r2, r7, #12
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fc5c 	bl	800c23c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d007      	beq.n	800099a <HAL_GPIO_EXTI_Callback+0x4a>
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_GPIO_EXTI_Callback+0x5c>)
 800098c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	f3bf 8f6f 	isb	sy
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	240001cc 	.word	0x240001cc
 80009a8:	240001c8 	.word	0x240001c8
 80009ac:	e000ed04 	.word	0xe000ed04

080009b0 <taskSendFake>:
static TaskHandle_t taskHandle_taskSendFake;
static TaskHandle_t taskHandle_taskSend;
void taskSendFake(void *nothink){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 80009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <taskSendFake+0x74>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	4618      	mov	r0, r3
 80009c2:	f00b fdad 	bl	800c520 <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 80009c6:	bf00      	nop
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <taskSendFake+0x78>)
 80009ca:	f004 f83a 	bl	8004a42 <HAL_I2C_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b20      	cmp	r3, #32
 80009d2:	d1f9      	bne.n	80009c8 <taskSendFake+0x18>
		vTaskDelay(pdMS_TO_TICKS(35));
 80009d4:	2023      	movs	r0, #35	@ 0x23
 80009d6:	f00c f9f7 	bl	800cdc8 <vTaskDelay>
		  //retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32, "Dawid", 6, 2000);
		  retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_FAKE<<1, "Dawid", 6);
 80009da:	2306      	movs	r3, #6
 80009dc:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <taskSendFake+0x7c>)
 80009de:	217a      	movs	r1, #122	@ 0x7a
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <taskSendFake+0x78>)
 80009e2:	f003 fe3d 	bl	8004660 <HAL_I2C_Master_Transmit_DMA>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "FAKE\r\n", 6, 200);
 80009ea:	23c8      	movs	r3, #200	@ 0xc8
 80009ec:	2206      	movs	r2, #6
 80009ee:	4910      	ldr	r1, [pc, #64]	@ (8000a30 <taskSendFake+0x80>)
 80009f0:	4810      	ldr	r0, [pc, #64]	@ (8000a34 <taskSendFake+0x84>)
 80009f2:	f009 f88f 	bl	8009b14 <HAL_UART_Transmit>
		  vTaskDelay(pdMS_TO_TICKS(35));
 80009f6:	2023      	movs	r0, #35	@ 0x23
 80009f8:	f00c f9e6 	bl	800cdc8 <vTaskDelay>
		  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 80009fc:	bf00      	nop
 80009fe:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <taskSendFake+0x78>)
 8000a00:	f004 f81f 	bl	8004a42 <HAL_I2C_GetState>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d1f9      	bne.n	80009fe <taskSendFake+0x4e>
		  xSemaphoreGive(i2c_semap);
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <taskSendFake+0x74>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	f00b fa72 	bl	800befc <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(1200));
 8000a18:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000a1c:	f00c f9d4 	bl	800cdc8 <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000a20:	e7ca      	b.n	80009b8 <taskSendFake+0x8>
 8000a22:	bf00      	nop
 8000a24:	240001d0 	.word	0x240001d0
 8000a28:	24000084 	.word	0x24000084
 8000a2c:	0800ef24 	.word	0x0800ef24
 8000a30:	0800ef2c 	.word	0x0800ef2c
 8000a34:	24000228 	.word	0x24000228

08000a38 <taskSend>:
		  }*/
	}
}


void taskSend(void *nothink){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal;
	while(1){
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <taskSend+0x74>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00b fd69 	bl	800c520 <xQueueSemaphoreTake>
		while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000a4e:	bf00      	nop
 8000a50:	4817      	ldr	r0, [pc, #92]	@ (8000ab0 <taskSend+0x78>)
 8000a52:	f003 fff6 	bl	8004a42 <HAL_I2C_GetState>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	d1f9      	bne.n	8000a50 <taskSend+0x18>
		vTaskDelay(pdMS_TO_TICKS(35));
 8000a5c:	2023      	movs	r0, #35	@ 0x23
 8000a5e:	f00c f9b3 	bl	800cdc8 <vTaskDelay>
		  //retVal = HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6, 2000);
		  retVal =HAL_I2C_Master_Transmit_DMA(&hi2c1, I2C_SLAVE_ADDRESS_ESP32<<1, "Dawid", 6);
 8000a62:	2306      	movs	r3, #6
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <taskSend+0x7c>)
 8000a66:	2178      	movs	r1, #120	@ 0x78
 8000a68:	4811      	ldr	r0, [pc, #68]	@ (8000ab0 <taskSend+0x78>)
 8000a6a:	f003 fdf9 	bl	8004660 <HAL_I2C_Master_Transmit_DMA>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit(&huart1, "Transmition1\r\n", 14, 200);
 8000a72:	23c8      	movs	r3, #200	@ 0xc8
 8000a74:	220e      	movs	r2, #14
 8000a76:	4910      	ldr	r1, [pc, #64]	@ (8000ab8 <taskSend+0x80>)
 8000a78:	4810      	ldr	r0, [pc, #64]	@ (8000abc <taskSend+0x84>)
 8000a7a:	f009 f84b 	bl	8009b14 <HAL_UART_Transmit>
		  vTaskDelay(pdMS_TO_TICKS(35));
 8000a7e:	2023      	movs	r0, #35	@ 0x23
 8000a80:	f00c f9a2 	bl	800cdc8 <vTaskDelay>
		  while(HAL_I2C_GetState(&hi2c1)!= HAL_I2C_STATE_READY){};
 8000a84:	bf00      	nop
 8000a86:	480a      	ldr	r0, [pc, #40]	@ (8000ab0 <taskSend+0x78>)
 8000a88:	f003 ffdb 	bl	8004a42 <HAL_I2C_GetState>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b20      	cmp	r3, #32
 8000a90:	d1f9      	bne.n	8000a86 <taskSend+0x4e>
		  xSemaphoreGive(i2c_semap);
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <taskSend+0x74>)
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f00b fa2e 	bl	800befc <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(500));
 8000aa0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aa4:	f00c f990 	bl	800cdc8 <vTaskDelay>
		xSemaphoreTake(i2c_semap, portMAX_DELAY);
 8000aa8:	e7ca      	b.n	8000a40 <taskSend+0x8>
 8000aaa:	bf00      	nop
 8000aac:	240001d0 	.word	0x240001d0
 8000ab0:	24000084 	.word	0x24000084
 8000ab4:	0800ef24 	.word	0x0800ef24
 8000ab8:	0800ef34 	.word	0x0800ef34
 8000abc:	24000228 	.word	0x24000228

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 fb31 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f861 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f7ff fddd 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad2:	f7ff fd85 	bl	80005e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ad6:	f000 fa41 	bl	8000f5c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ada:	f7ff fe1d 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  while(esp32I2cInitialised!=true){
 8000ade:	e005      	b.n	8000aec <main+0x2c>
	  HAL_UART_Transmit(&huart1, "1\r\n", 3, 200);
 8000ae0:	23c8      	movs	r3, #200	@ 0xc8
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	491f      	ldr	r1, [pc, #124]	@ (8000b64 <main+0xa4>)
 8000ae6:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <main+0xa8>)
 8000ae8:	f009 f814 	bl	8009b14 <HAL_UART_Transmit>
  while(esp32I2cInitialised!=true){
 8000aec:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <main+0xac>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	f083 0301 	eor.w	r3, r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f2      	bne.n	8000ae0 <main+0x20>
  }

  CountingSemaphore = xSemaphoreCreateCounting(20, 0);
 8000afa:	2100      	movs	r1, #0
 8000afc:	2014      	movs	r0, #20
 8000afe:	f00b f9c8 	bl	800be92 <xQueueCreateCountingSemaphore>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a1a      	ldr	r2, [pc, #104]	@ (8000b70 <main+0xb0>)
 8000b06:	6013      	str	r3, [r2, #0]
  i2c_semap = xSemaphoreCreateBinary();
 8000b08:	2203      	movs	r2, #3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f00b f962 	bl	800bdd6 <xQueueGenericCreate>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <main+0xb4>)
 8000b16:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(i2c_semap);
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <main+0xb4>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	f00b f9eb 	bl	800befc <xQueueGenericSend>
  xTaskCreate(taskSend, "i2cSend", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSend);
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <main+0xb8>)
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000b34:	4911      	ldr	r1, [pc, #68]	@ (8000b7c <main+0xbc>)
 8000b36:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <main+0xc0>)
 8000b38:	f00b ffe8 	bl	800cb0c <xTaskCreate>
  xTaskCreate(taskSendFake, "i2cSendFake", 5*128, NULL, tskIDLE_PRIORITY+5, &taskHandle_taskSendFake);
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <main+0xc4>)
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	2305      	movs	r3, #5
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000b4a:	490f      	ldr	r1, [pc, #60]	@ (8000b88 <main+0xc8>)
 8000b4c:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <main+0xcc>)
 8000b4e:	f00b ffdd 	bl	800cb0c <xTaskCreate>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b52:	f00a fe79 	bl	800b848 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b56:	f7ff fd7f 	bl	8000658 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b5a:	f00a fe99 	bl	800b890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <main+0x9e>
 8000b62:	bf00      	nop
 8000b64:	0800ef44 	.word	0x0800ef44
 8000b68:	24000228 	.word	0x24000228
 8000b6c:	240001cc 	.word	0x240001cc
 8000b70:	240001c8 	.word	0x240001c8
 8000b74:	240001d0 	.word	0x240001d0
 8000b78:	240001d8 	.word	0x240001d8
 8000b7c:	0800ef48 	.word	0x0800ef48
 8000b80:	08000a39 	.word	0x08000a39
 8000b84:	240001d4 	.word	0x240001d4
 8000b88:	0800ef50 	.word	0x0800ef50
 8000b8c:	080009b1 	.word	0x080009b1

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	224c      	movs	r2, #76	@ 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00e f8c6 	bl	800ed30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00e f8c0 	bl	800ed30 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f005 fe72 	bl	80068a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bdc:	bf00      	nop
 8000bde:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bea:	d1f8      	bne.n	8000bde <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000c04:	2323      	movs	r3, #35	@ 0x23
 8000c06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c14:	230c      	movs	r3, #12
 8000c16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f005 fe77 	bl	8006918 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c30:	f000 f836 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	233f      	movs	r3, #63	@ 0x3f
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c44:	2340      	movs	r3, #64	@ 0x40
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c48:	2340      	movs	r3, #64	@ 0x40
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c52:	2340      	movs	r3, #64	@ 0x40
 8000c54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2106      	movs	r1, #6
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f006 fa8e 	bl	800717c <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c66:	f000 f81b 	bl	8000ca0 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3770      	adds	r7, #112	@ 0x70
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58024800 	.word	0x58024800

08000c7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8e:	f000 fa89 	bl	80011a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <Error_Handler+0x8>

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_MspInit+0x38>)
 8000cb4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_MspInit+0x38>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x38>)
 8000cc4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f06f 0001 	mvn.w	r0, #1
 8000cd8:	f000 fb3c 	bl	8001354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	@ 0x38
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d844      	bhi.n	8000d80 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 fb2a 	bl	8001354 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d00:	2019      	movs	r0, #25
 8000d02:	f000 fb41 	bl	8001388 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d06:	4a24      	ldr	r2, [pc, #144]	@ (8000d98 <HAL_InitTick+0xb0>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0c:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <HAL_InitTick+0xb4>)
 8000d0e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d12:	4a22      	ldr	r2, [pc, #136]	@ (8000d9c <HAL_InitTick+0xb4>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <HAL_InitTick+0xb4>)
 8000d1e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 fdad 	bl	8007894 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d3a:	f006 fd95 	bl	8007868 <HAL_RCC_GetPCLK2Freq>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d46:	4a16      	ldr	r2, [pc, #88]	@ (8000da0 <HAL_InitTick+0xb8>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <HAL_InitTick+0xc0>)
 8000d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d60:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d64:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d72:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d74:	f008 fbb0 	bl	80094d8 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <HAL_InitTick+0xa6>
 8000d7e:	e001      	b.n	8000d84 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e005      	b.n	8000d90 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d84:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <HAL_InitTick+0xbc>)
 8000d86:	f008 fc09 	bl	800959c <HAL_TIM_Base_Start_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	@ 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24000008 	.word	0x24000008
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	431bde83 	.word	0x431bde83
 8000da4:	240001dc 	.word	0x240001dc
 8000da8:	40010000 	.word	0x40010000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x10>)
 8000dea:	f001 fe37 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	240000d8 	.word	0x240000d8

08000df8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <DMA1_Stream1_IRQHandler+0x10>)
 8000dfe:	f001 fe2d 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24000150 	.word	0x24000150

08000e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(esp32i2cInterruptReqest_Pin);
 8000e10:	2020      	movs	r0, #32
 8000e12:	f003 fb6f 	bl	80044f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <TIM1_UP_IRQHandler+0x10>)
 8000e22:	f008 fc33 	bl	800968c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	240001dc 	.word	0x240001dc

08000e30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <I2C1_EV_IRQHandler+0x10>)
 8000e36:	f003 fd27 	bl	8004888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000084 	.word	0x24000084

08000e44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <I2C1_ER_IRQHandler+0x10>)
 8000e4a:	f003 fd37 	bl	80048bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000084 	.word	0x24000084

08000e58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <USART1_IRQHandler+0x10>)
 8000e5e:	f008 fee7 	bl	8009c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	24000228 	.word	0x24000228

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <SystemInit+0xd0>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a31      	ldr	r2, [pc, #196]	@ (8000f3c <SystemInit+0xd0>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <SystemInit+0xd4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d807      	bhi.n	8000e9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <SystemInit+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 030f 	bic.w	r3, r3, #15
 8000e94:	4a2a      	ldr	r2, [pc, #168]	@ (8000f40 <SystemInit+0xd4>)
 8000e96:	f043 0303 	orr.w	r3, r3, #3
 8000e9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <SystemInit+0xd8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a28      	ldr	r2, [pc, #160]	@ (8000f44 <SystemInit+0xd8>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <SystemInit+0xd8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <SystemInit+0xd8>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4924      	ldr	r1, [pc, #144]	@ (8000f44 <SystemInit+0xd8>)
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <SystemInit+0xdc>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <SystemInit+0xd4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <SystemInit+0xd4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 030f 	bic.w	r3, r3, #15
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <SystemInit+0xd4>)
 8000ed0:	f043 0303 	orr.w	r3, r3, #3
 8000ed4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <SystemInit+0xd8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <SystemInit+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <SystemInit+0xd8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <SystemInit+0xd8>)
 8000eea:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <SystemInit+0xe0>)
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <SystemInit+0xd8>)
 8000ef0:	4a17      	ldr	r2, [pc, #92]	@ (8000f50 <SystemInit+0xe4>)
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <SystemInit+0xd8>)
 8000ef6:	4a17      	ldr	r2, [pc, #92]	@ (8000f54 <SystemInit+0xe8>)
 8000ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <SystemInit+0xd8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <SystemInit+0xd8>)
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <SystemInit+0xe8>)
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <SystemInit+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <SystemInit+0xd8>)
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <SystemInit+0xe8>)
 8000f10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <SystemInit+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <SystemInit+0xd8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <SystemInit+0xd8>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <SystemInit+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <SystemInit+0xec>)
 8000f2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	52002000 	.word	0x52002000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f4c:	02020200 	.word	0x02020200
 8000f50:	01ff0000 	.word	0x01ff0000
 8000f54:	01010280 	.word	0x01010280
 8000f58:	52004000 	.word	0x52004000

08000f5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f62:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <MX_USART1_UART_Init+0x94>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa4:	4811      	ldr	r0, [pc, #68]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fa6:	f008 fd65 	bl	8009a74 <HAL_UART_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fb0:	f7ff fe76 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fb8:	f00a fb38 	bl	800b62c <HAL_UARTEx_SetTxFifoThreshold>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fc2:	f7ff fe6d 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fca:	f00a fb6d 	bl	800b6a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fd4:	f7ff fe64 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fda:	f00a faee 	bl	800b5ba <HAL_UARTEx_DisableFifoMode>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fe4:	f7ff fe5c 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	24000228 	.word	0x24000228
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	22c0      	movs	r2, #192	@ 0xc0
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00d fe8b 	bl	800ed30 <memset>
  if(uartHandle->Instance==USART1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a2b      	ldr	r2, [pc, #172]	@ (80010cc <HAL_UART_MspInit+0xd8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d14e      	bne.n	80010c2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001024:	f04f 0201 	mov.w	r2, #1
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4618      	mov	r0, r3
 800103c:	f006 fc6c 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001046:	f7ff fe2b 	bl	8000ca0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <HAL_UART_MspInit+0xdc>)
 800104c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001050:	4a1f      	ldr	r2, [pc, #124]	@ (80010d0 <HAL_UART_MspInit+0xdc>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800105a:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <HAL_UART_MspInit+0xdc>)
 800105c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <HAL_UART_MspInit+0xdc>)
 800106a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800106e:	4a18      	ldr	r2, [pc, #96]	@ (80010d0 <HAL_UART_MspInit+0xdc>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_UART_MspInit+0xdc>)
 800107a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = dbg_UART_TX_Pin|dbg_UART_RX_Pin;
 8001086:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800108a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80010a0:	2304      	movs	r3, #4
 80010a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <HAL_UART_MspInit+0xe0>)
 80010ae:	f003 f871 	bl	8004194 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2107      	movs	r1, #7
 80010b6:	2025      	movs	r0, #37	@ 0x25
 80010b8:	f000 f94c 	bl	8001354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010bc:	2025      	movs	r0, #37	@ 0x25
 80010be:	f000 f963 	bl	8001388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	37e8      	adds	r7, #232	@ 0xe8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40011000 	.word	0x40011000
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58020400 	.word	0x58020400

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f7ff fec6 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f00d fe71 	bl	800edec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fcd9 	bl	8000ac0 <main>
  bx  lr
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001114:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001118:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800111c:	0800efe8 	.word	0x0800efe8
  ldr r2, =_sbss
 8001120:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001124:	24004df4 	.word	0x24004df4

08001128 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f903 	bl	800133e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001138:	f006 f9d6 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	@ (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	200f      	movs	r0, #15
 8001178:	f7ff fdb6 	bl	8000ce8 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fd91 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	0800ef98 	.word	0x0800ef98
 800119c:	24000004 	.word	0x24000004
 80011a0:	24000000 	.word	0x24000000

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2400000c 	.word	0x2400000c
 80011c8:	240002bc 	.word	0x240002bc

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	240002bc 	.word	0x240002bc

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	05fa0000 	.word	0x05fa0000

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff4c 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001362:	f7ff ff63 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001366:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	6978      	ldr	r0, [r7, #20]
 800136e:	f7ff ffb3 	bl	80012d8 <NVIC_EncodePriority>
 8001372:	4602      	mov	r2, r0
 8001374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff82 	bl	8001284 <__NVIC_SetPriority>
}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff56 	bl	8001248 <__NVIC_EnableIRQ>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ff0e 	bl	80011cc <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e37d      	b.n	8001ab8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a66      	ldr	r2, [pc, #408]	@ (800155c <HAL_DMA_Init+0x1b8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d04a      	beq.n	800145c <HAL_DMA_Init+0xb8>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a65      	ldr	r2, [pc, #404]	@ (8001560 <HAL_DMA_Init+0x1bc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d045      	beq.n	800145c <HAL_DMA_Init+0xb8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a63      	ldr	r2, [pc, #396]	@ (8001564 <HAL_DMA_Init+0x1c0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d040      	beq.n	800145c <HAL_DMA_Init+0xb8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a62      	ldr	r2, [pc, #392]	@ (8001568 <HAL_DMA_Init+0x1c4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d03b      	beq.n	800145c <HAL_DMA_Init+0xb8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a60      	ldr	r2, [pc, #384]	@ (800156c <HAL_DMA_Init+0x1c8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d036      	beq.n	800145c <HAL_DMA_Init+0xb8>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001570 <HAL_DMA_Init+0x1cc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d031      	beq.n	800145c <HAL_DMA_Init+0xb8>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001574 <HAL_DMA_Init+0x1d0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d02c      	beq.n	800145c <HAL_DMA_Init+0xb8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a5c      	ldr	r2, [pc, #368]	@ (8001578 <HAL_DMA_Init+0x1d4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d027      	beq.n	800145c <HAL_DMA_Init+0xb8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a5a      	ldr	r2, [pc, #360]	@ (800157c <HAL_DMA_Init+0x1d8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d022      	beq.n	800145c <HAL_DMA_Init+0xb8>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a59      	ldr	r2, [pc, #356]	@ (8001580 <HAL_DMA_Init+0x1dc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d01d      	beq.n	800145c <HAL_DMA_Init+0xb8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a57      	ldr	r2, [pc, #348]	@ (8001584 <HAL_DMA_Init+0x1e0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d018      	beq.n	800145c <HAL_DMA_Init+0xb8>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a56      	ldr	r2, [pc, #344]	@ (8001588 <HAL_DMA_Init+0x1e4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d013      	beq.n	800145c <HAL_DMA_Init+0xb8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a54      	ldr	r2, [pc, #336]	@ (800158c <HAL_DMA_Init+0x1e8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00e      	beq.n	800145c <HAL_DMA_Init+0xb8>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a53      	ldr	r2, [pc, #332]	@ (8001590 <HAL_DMA_Init+0x1ec>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d009      	beq.n	800145c <HAL_DMA_Init+0xb8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a51      	ldr	r2, [pc, #324]	@ (8001594 <HAL_DMA_Init+0x1f0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_DMA_Init+0xb8>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a50      	ldr	r2, [pc, #320]	@ (8001598 <HAL_DMA_Init+0x1f4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_DMA_Init+0xbc>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_DMA_Init+0xbe>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 813c 	beq.w	80016e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a37      	ldr	r2, [pc, #220]	@ (800155c <HAL_DMA_Init+0x1b8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d04a      	beq.n	8001518 <HAL_DMA_Init+0x174>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a36      	ldr	r2, [pc, #216]	@ (8001560 <HAL_DMA_Init+0x1bc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d045      	beq.n	8001518 <HAL_DMA_Init+0x174>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a34      	ldr	r2, [pc, #208]	@ (8001564 <HAL_DMA_Init+0x1c0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d040      	beq.n	8001518 <HAL_DMA_Init+0x174>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a33      	ldr	r2, [pc, #204]	@ (8001568 <HAL_DMA_Init+0x1c4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d03b      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a31      	ldr	r2, [pc, #196]	@ (800156c <HAL_DMA_Init+0x1c8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d036      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a30      	ldr	r2, [pc, #192]	@ (8001570 <HAL_DMA_Init+0x1cc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d031      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001574 <HAL_DMA_Init+0x1d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02c      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <HAL_DMA_Init+0x1d4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d027      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2b      	ldr	r2, [pc, #172]	@ (800157c <HAL_DMA_Init+0x1d8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d022      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <HAL_DMA_Init+0x1dc>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d01d      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a28      	ldr	r2, [pc, #160]	@ (8001584 <HAL_DMA_Init+0x1e0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d018      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a27      	ldr	r2, [pc, #156]	@ (8001588 <HAL_DMA_Init+0x1e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d013      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a25      	ldr	r2, [pc, #148]	@ (800158c <HAL_DMA_Init+0x1e8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00e      	beq.n	8001518 <HAL_DMA_Init+0x174>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_DMA_Init+0x1ec>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d009      	beq.n	8001518 <HAL_DMA_Init+0x174>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a22      	ldr	r2, [pc, #136]	@ (8001594 <HAL_DMA_Init+0x1f0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d004      	beq.n	8001518 <HAL_DMA_Init+0x174>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <HAL_DMA_Init+0x1f4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d108      	bne.n	800152a <HAL_DMA_Init+0x186>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e007      	b.n	800153a <HAL_DMA_Init+0x196>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800153a:	e02f      	b.n	800159c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153c:	f7ff fe46 	bl	80011cc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b05      	cmp	r3, #5
 8001548:	d928      	bls.n	800159c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2ad      	b.n	8001ab8 <HAL_DMA_Init+0x714>
 800155c:	40020010 	.word	0x40020010
 8001560:	40020028 	.word	0x40020028
 8001564:	40020040 	.word	0x40020040
 8001568:	40020058 	.word	0x40020058
 800156c:	40020070 	.word	0x40020070
 8001570:	40020088 	.word	0x40020088
 8001574:	400200a0 	.word	0x400200a0
 8001578:	400200b8 	.word	0x400200b8
 800157c:	40020410 	.word	0x40020410
 8001580:	40020428 	.word	0x40020428
 8001584:	40020440 	.word	0x40020440
 8001588:	40020458 	.word	0x40020458
 800158c:	40020470 	.word	0x40020470
 8001590:	40020488 	.word	0x40020488
 8001594:	400204a0 	.word	0x400204a0
 8001598:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1c8      	bne.n	800153c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4b73      	ldr	r3, [pc, #460]	@ (8001784 <HAL_DMA_Init+0x3e0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d107      	bne.n	8001600 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	4313      	orrs	r3, r2
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b28      	cmp	r3, #40	@ 0x28
 8001606:	d903      	bls.n	8001610 <HAL_DMA_Init+0x26c>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b2e      	cmp	r3, #46	@ 0x2e
 800160e:	d91f      	bls.n	8001650 <HAL_DMA_Init+0x2ac>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b3e      	cmp	r3, #62	@ 0x3e
 8001616:	d903      	bls.n	8001620 <HAL_DMA_Init+0x27c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b42      	cmp	r3, #66	@ 0x42
 800161e:	d917      	bls.n	8001650 <HAL_DMA_Init+0x2ac>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b46      	cmp	r3, #70	@ 0x46
 8001626:	d903      	bls.n	8001630 <HAL_DMA_Init+0x28c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b48      	cmp	r3, #72	@ 0x48
 800162e:	d90f      	bls.n	8001650 <HAL_DMA_Init+0x2ac>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b4e      	cmp	r3, #78	@ 0x4e
 8001636:	d903      	bls.n	8001640 <HAL_DMA_Init+0x29c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b52      	cmp	r3, #82	@ 0x52
 800163e:	d907      	bls.n	8001650 <HAL_DMA_Init+0x2ac>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b73      	cmp	r3, #115	@ 0x73
 8001646:	d905      	bls.n	8001654 <HAL_DMA_Init+0x2b0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b77      	cmp	r3, #119	@ 0x77
 800164e:	d801      	bhi.n	8001654 <HAL_DMA_Init+0x2b0>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_DMA_Init+0x2b2>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001660:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f023 0307 	bic.w	r3, r3, #7
 8001678:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	2b04      	cmp	r3, #4
 800168a:	d117      	bne.n	80016bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4313      	orrs	r3, r2
 8001694:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00e      	beq.n	80016bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f002 fbee 	bl	8003e80 <DMA_CheckFifoParam>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2240      	movs	r2, #64	@ 0x40
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e1fd      	b.n	8001ab8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f002 fb29 	bl	8003d1c <DMA_CalcBaseAndBitshift>
 80016ca:	4603      	mov	r3, r0
 80016cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	223f      	movs	r2, #63	@ 0x3f
 80016d8:	409a      	lsls	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	e0fd      	b.n	80018dc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <HAL_DMA_Init+0x3e4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d04a      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a27      	ldr	r2, [pc, #156]	@ (800178c <HAL_DMA_Init+0x3e8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d045      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a25      	ldr	r2, [pc, #148]	@ (8001790 <HAL_DMA_Init+0x3ec>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d040      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a24      	ldr	r2, [pc, #144]	@ (8001794 <HAL_DMA_Init+0x3f0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d03b      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_DMA_Init+0x3f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d036      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_DMA_Init+0x3f8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d031      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <HAL_DMA_Init+0x3fc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02c      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_DMA_Init+0x400>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d027      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <HAL_DMA_Init+0x404>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d022      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <HAL_DMA_Init+0x408>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d01d      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_DMA_Init+0x40c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d018      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <HAL_DMA_Init+0x410>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d013      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_DMA_Init+0x414>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00e      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a15      	ldr	r2, [pc, #84]	@ (80017bc <HAL_DMA_Init+0x418>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d009      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a13      	ldr	r2, [pc, #76]	@ (80017c0 <HAL_DMA_Init+0x41c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d004      	beq.n	8001780 <HAL_DMA_Init+0x3dc>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_DMA_Init+0x420>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d123      	bne.n	80017c8 <HAL_DMA_Init+0x424>
 8001780:	2301      	movs	r3, #1
 8001782:	e022      	b.n	80017ca <HAL_DMA_Init+0x426>
 8001784:	fe10803f 	.word	0xfe10803f
 8001788:	48022c08 	.word	0x48022c08
 800178c:	48022c1c 	.word	0x48022c1c
 8001790:	48022c30 	.word	0x48022c30
 8001794:	48022c44 	.word	0x48022c44
 8001798:	48022c58 	.word	0x48022c58
 800179c:	48022c6c 	.word	0x48022c6c
 80017a0:	48022c80 	.word	0x48022c80
 80017a4:	48022c94 	.word	0x48022c94
 80017a8:	58025408 	.word	0x58025408
 80017ac:	5802541c 	.word	0x5802541c
 80017b0:	58025430 	.word	0x58025430
 80017b4:	58025444 	.word	0x58025444
 80017b8:	58025458 	.word	0x58025458
 80017bc:	5802546c 	.word	0x5802546c
 80017c0:	58025480 	.word	0x58025480
 80017c4:	58025494 	.word	0x58025494
 80017c8:	2300      	movs	r3, #0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d07d      	beq.n	80018ca <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7f      	ldr	r2, [pc, #508]	@ (80019d0 <HAL_DMA_Init+0x62c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d021      	beq.n	800181c <HAL_DMA_Init+0x478>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a7d      	ldr	r2, [pc, #500]	@ (80019d4 <HAL_DMA_Init+0x630>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01c      	beq.n	800181c <HAL_DMA_Init+0x478>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7c      	ldr	r2, [pc, #496]	@ (80019d8 <HAL_DMA_Init+0x634>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d017      	beq.n	800181c <HAL_DMA_Init+0x478>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a7a      	ldr	r2, [pc, #488]	@ (80019dc <HAL_DMA_Init+0x638>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d012      	beq.n	800181c <HAL_DMA_Init+0x478>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a79      	ldr	r2, [pc, #484]	@ (80019e0 <HAL_DMA_Init+0x63c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_DMA_Init+0x478>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a77      	ldr	r2, [pc, #476]	@ (80019e4 <HAL_DMA_Init+0x640>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d008      	beq.n	800181c <HAL_DMA_Init+0x478>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a76      	ldr	r2, [pc, #472]	@ (80019e8 <HAL_DMA_Init+0x644>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d003      	beq.n	800181c <HAL_DMA_Init+0x478>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a74      	ldr	r2, [pc, #464]	@ (80019ec <HAL_DMA_Init+0x648>)
 800181a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	4b6e      	ldr	r3, [pc, #440]	@ (80019f0 <HAL_DMA_Init+0x64c>)
 8001838:	4013      	ands	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b40      	cmp	r3, #64	@ 0x40
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Init+0x4b2>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b80      	cmp	r3, #128	@ 0x80
 800184a:	d102      	bne.n	8001852 <HAL_DMA_Init+0x4ae>
 800184c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001850:	e002      	b.n	8001858 <HAL_DMA_Init+0x4b4>
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_DMA_Init+0x4b4>
 8001856:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68d2      	ldr	r2, [r2, #12]
 800185c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800185e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001866:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800186e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001876:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800187e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001886:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <HAL_DMA_Init+0x650>)
 800189e:	4413      	add	r3, r2
 80018a0:	4a55      	ldr	r2, [pc, #340]	@ (80019f8 <HAL_DMA_Init+0x654>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	009a      	lsls	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f002 fa34 	bl	8003d1c <DMA_CalcBaseAndBitshift>
 80018b4:	4603      	mov	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2201      	movs	r2, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	e008      	b.n	80018dc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2240      	movs	r2, #64	@ 0x40
 80018ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0ed      	b.n	8001ab8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a46      	ldr	r2, [pc, #280]	@ (80019fc <HAL_DMA_Init+0x658>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d072      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <HAL_DMA_Init+0x65c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d06d      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a43      	ldr	r2, [pc, #268]	@ (8001a04 <HAL_DMA_Init+0x660>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d068      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_DMA_Init+0x664>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d063      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a40      	ldr	r2, [pc, #256]	@ (8001a0c <HAL_DMA_Init+0x668>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d05e      	beq.n	80019cc <HAL_DMA_Init+0x628>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a3f      	ldr	r2, [pc, #252]	@ (8001a10 <HAL_DMA_Init+0x66c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d059      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a14 <HAL_DMA_Init+0x670>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d054      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a3c      	ldr	r2, [pc, #240]	@ (8001a18 <HAL_DMA_Init+0x674>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04f      	beq.n	80019cc <HAL_DMA_Init+0x628>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3a      	ldr	r2, [pc, #232]	@ (8001a1c <HAL_DMA_Init+0x678>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d04a      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a39      	ldr	r2, [pc, #228]	@ (8001a20 <HAL_DMA_Init+0x67c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d045      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a37      	ldr	r2, [pc, #220]	@ (8001a24 <HAL_DMA_Init+0x680>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d040      	beq.n	80019cc <HAL_DMA_Init+0x628>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a36      	ldr	r2, [pc, #216]	@ (8001a28 <HAL_DMA_Init+0x684>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d03b      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <HAL_DMA_Init+0x688>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d036      	beq.n	80019cc <HAL_DMA_Init+0x628>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a33      	ldr	r2, [pc, #204]	@ (8001a30 <HAL_DMA_Init+0x68c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d031      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a31      	ldr	r2, [pc, #196]	@ (8001a34 <HAL_DMA_Init+0x690>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02c      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a30      	ldr	r2, [pc, #192]	@ (8001a38 <HAL_DMA_Init+0x694>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d027      	beq.n	80019cc <HAL_DMA_Init+0x628>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <HAL_DMA_Init+0x62c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d022      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <HAL_DMA_Init+0x630>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d01d      	beq.n	80019cc <HAL_DMA_Init+0x628>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <HAL_DMA_Init+0x634>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d018      	beq.n	80019cc <HAL_DMA_Init+0x628>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0f      	ldr	r2, [pc, #60]	@ (80019dc <HAL_DMA_Init+0x638>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <HAL_DMA_Init+0x63c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00e      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <HAL_DMA_Init+0x640>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_DMA_Init+0x644>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_DMA_Init+0x628>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <HAL_DMA_Init+0x648>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d137      	bne.n	8001a3c <HAL_DMA_Init+0x698>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e036      	b.n	8001a3e <HAL_DMA_Init+0x69a>
 80019d0:	58025408 	.word	0x58025408
 80019d4:	5802541c 	.word	0x5802541c
 80019d8:	58025430 	.word	0x58025430
 80019dc:	58025444 	.word	0x58025444
 80019e0:	58025458 	.word	0x58025458
 80019e4:	5802546c 	.word	0x5802546c
 80019e8:	58025480 	.word	0x58025480
 80019ec:	58025494 	.word	0x58025494
 80019f0:	fffe000f 	.word	0xfffe000f
 80019f4:	a7fdabf8 	.word	0xa7fdabf8
 80019f8:	cccccccd 	.word	0xcccccccd
 80019fc:	40020010 	.word	0x40020010
 8001a00:	40020028 	.word	0x40020028
 8001a04:	40020040 	.word	0x40020040
 8001a08:	40020058 	.word	0x40020058
 8001a0c:	40020070 	.word	0x40020070
 8001a10:	40020088 	.word	0x40020088
 8001a14:	400200a0 	.word	0x400200a0
 8001a18:	400200b8 	.word	0x400200b8
 8001a1c:	40020410 	.word	0x40020410
 8001a20:	40020428 	.word	0x40020428
 8001a24:	40020440 	.word	0x40020440
 8001a28:	40020458 	.word	0x40020458
 8001a2c:	40020470 	.word	0x40020470
 8001a30:	40020488 	.word	0x40020488
 8001a34:	400204a0 	.word	0x400204a0
 8001a38:	400204b8 	.word	0x400204b8
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d032      	beq.n	8001aa8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f002 fa98 	bl	8003f78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b80      	cmp	r3, #128	@ 0x80
 8001a4e:	d102      	bne.n	8001a56 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a6a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d010      	beq.n	8001a96 <HAL_DMA_Init+0x6f2>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d80c      	bhi.n	8001a96 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f002 fb15 	bl	80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	e008      	b.n	8001aa8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e226      	b.n	8001f2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_DMA_Start_IT+0x2a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e21f      	b.n	8001f2a <HAL_DMA_Start_IT+0x46a>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 820a 	bne.w	8001f14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a68      	ldr	r2, [pc, #416]	@ (8001cb4 <HAL_DMA_Start_IT+0x1f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04a      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a66      	ldr	r2, [pc, #408]	@ (8001cb8 <HAL_DMA_Start_IT+0x1f8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d045      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a65      	ldr	r2, [pc, #404]	@ (8001cbc <HAL_DMA_Start_IT+0x1fc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d040      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a63      	ldr	r2, [pc, #396]	@ (8001cc0 <HAL_DMA_Start_IT+0x200>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d03b      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a62      	ldr	r2, [pc, #392]	@ (8001cc4 <HAL_DMA_Start_IT+0x204>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d036      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a60      	ldr	r2, [pc, #384]	@ (8001cc8 <HAL_DMA_Start_IT+0x208>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ccc <HAL_DMA_Start_IT+0x20c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d02c      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd0 <HAL_DMA_Start_IT+0x210>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d027      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd4 <HAL_DMA_Start_IT+0x214>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd8 <HAL_DMA_Start_IT+0x218>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a59      	ldr	r2, [pc, #356]	@ (8001cdc <HAL_DMA_Start_IT+0x21c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a57      	ldr	r2, [pc, #348]	@ (8001ce0 <HAL_DMA_Start_IT+0x220>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a56      	ldr	r2, [pc, #344]	@ (8001ce4 <HAL_DMA_Start_IT+0x224>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a54      	ldr	r2, [pc, #336]	@ (8001ce8 <HAL_DMA_Start_IT+0x228>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a53      	ldr	r2, [pc, #332]	@ (8001cec <HAL_DMA_Start_IT+0x22c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a51      	ldr	r2, [pc, #324]	@ (8001cf0 <HAL_DMA_Start_IT+0x230>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <HAL_DMA_Start_IT+0x100>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_DMA_Start_IT+0x110>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f001 febc 	bl	8003954 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a34      	ldr	r2, [pc, #208]	@ (8001cb4 <HAL_DMA_Start_IT+0x1f4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d04a      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a33      	ldr	r2, [pc, #204]	@ (8001cb8 <HAL_DMA_Start_IT+0x1f8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d045      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a31      	ldr	r2, [pc, #196]	@ (8001cbc <HAL_DMA_Start_IT+0x1fc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d040      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a30      	ldr	r2, [pc, #192]	@ (8001cc0 <HAL_DMA_Start_IT+0x200>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d03b      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <HAL_DMA_Start_IT+0x204>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d036      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc8 <HAL_DMA_Start_IT+0x208>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d031      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ccc <HAL_DMA_Start_IT+0x20c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02c      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd0 <HAL_DMA_Start_IT+0x210>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d027      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a28      	ldr	r2, [pc, #160]	@ (8001cd4 <HAL_DMA_Start_IT+0x214>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_DMA_Start_IT+0x218>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01d      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <HAL_DMA_Start_IT+0x21c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <HAL_DMA_Start_IT+0x220>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_DMA_Start_IT+0x224>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_DMA_Start_IT+0x228>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <HAL_DMA_Start_IT+0x22c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf0 <HAL_DMA_Start_IT+0x230>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Start_IT+0x1c0>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_Start_IT+0x1c2>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d036      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 021e 	bic.w	r2, r3, #30
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0216 	orr.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03e      	beq.n	8001d20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0208 	orr.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e035      	b.n	8001d20 <HAL_DMA_Start_IT+0x260>
 8001cb4:	40020010 	.word	0x40020010
 8001cb8:	40020028 	.word	0x40020028
 8001cbc:	40020040 	.word	0x40020040
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	40020070 	.word	0x40020070
 8001cc8:	40020088 	.word	0x40020088
 8001ccc:	400200a0 	.word	0x400200a0
 8001cd0:	400200b8 	.word	0x400200b8
 8001cd4:	40020410 	.word	0x40020410
 8001cd8:	40020428 	.word	0x40020428
 8001cdc:	40020440 	.word	0x40020440
 8001ce0:	40020458 	.word	0x40020458
 8001ce4:	40020470 	.word	0x40020470
 8001ce8:	40020488 	.word	0x40020488
 8001cec:	400204a0 	.word	0x400204a0
 8001cf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020e 	bic.w	r2, r3, #14
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 020a 	orr.w	r2, r2, #10
 8001d06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0204 	orr.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a83      	ldr	r2, [pc, #524]	@ (8001f34 <HAL_DMA_Start_IT+0x474>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d072      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a82      	ldr	r2, [pc, #520]	@ (8001f38 <HAL_DMA_Start_IT+0x478>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d06d      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a80      	ldr	r2, [pc, #512]	@ (8001f3c <HAL_DMA_Start_IT+0x47c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d068      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7f      	ldr	r2, [pc, #508]	@ (8001f40 <HAL_DMA_Start_IT+0x480>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d063      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7d      	ldr	r2, [pc, #500]	@ (8001f44 <HAL_DMA_Start_IT+0x484>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d05e      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7c      	ldr	r2, [pc, #496]	@ (8001f48 <HAL_DMA_Start_IT+0x488>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d059      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a7a      	ldr	r2, [pc, #488]	@ (8001f4c <HAL_DMA_Start_IT+0x48c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d054      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a79      	ldr	r2, [pc, #484]	@ (8001f50 <HAL_DMA_Start_IT+0x490>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04f      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a77      	ldr	r2, [pc, #476]	@ (8001f54 <HAL_DMA_Start_IT+0x494>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04a      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a76      	ldr	r2, [pc, #472]	@ (8001f58 <HAL_DMA_Start_IT+0x498>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d045      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a74      	ldr	r2, [pc, #464]	@ (8001f5c <HAL_DMA_Start_IT+0x49c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d040      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	@ (8001f60 <HAL_DMA_Start_IT+0x4a0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d03b      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a71      	ldr	r2, [pc, #452]	@ (8001f64 <HAL_DMA_Start_IT+0x4a4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a70      	ldr	r2, [pc, #448]	@ (8001f68 <HAL_DMA_Start_IT+0x4a8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f6c <HAL_DMA_Start_IT+0x4ac>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02c      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6d      	ldr	r2, [pc, #436]	@ (8001f70 <HAL_DMA_Start_IT+0x4b0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d027      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f74 <HAL_DMA_Start_IT+0x4b4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6a      	ldr	r2, [pc, #424]	@ (8001f78 <HAL_DMA_Start_IT+0x4b8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	@ (8001f7c <HAL_DMA_Start_IT+0x4bc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a67      	ldr	r2, [pc, #412]	@ (8001f80 <HAL_DMA_Start_IT+0x4c0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <HAL_DMA_Start_IT+0x4c4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a64      	ldr	r2, [pc, #400]	@ (8001f88 <HAL_DMA_Start_IT+0x4c8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a62      	ldr	r2, [pc, #392]	@ (8001f8c <HAL_DMA_Start_IT+0x4cc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a61      	ldr	r2, [pc, #388]	@ (8001f90 <HAL_DMA_Start_IT+0x4d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Start_IT+0x354>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_Start_IT+0x356>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <HAL_DMA_Start_IT+0x474>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d04a      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a36      	ldr	r2, [pc, #216]	@ (8001f38 <HAL_DMA_Start_IT+0x478>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d045      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_DMA_Start_IT+0x47c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a33      	ldr	r2, [pc, #204]	@ (8001f40 <HAL_DMA_Start_IT+0x480>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d03b      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <HAL_DMA_Start_IT+0x484>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d036      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <HAL_DMA_Start_IT+0x488>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d031      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_DMA_Start_IT+0x48c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02c      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_DMA_Start_IT+0x490>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d027      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f54 <HAL_DMA_Start_IT+0x494>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d022      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_DMA_Start_IT+0x498>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d01d      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <HAL_DMA_Start_IT+0x49c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d018      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_Start_IT+0x4a0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	@ (8001f64 <HAL_DMA_Start_IT+0x4a4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_DMA_Start_IT+0x4a8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_DMA_Start_IT+0x4ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_DMA_Start_IT+0x4b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <HAL_DMA_Start_IT+0x442>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e012      	b.n	8001f28 <HAL_DMA_Start_IT+0x468>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e009      	b.n	8001f28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020010 	.word	0x40020010
 8001f38:	40020028 	.word	0x40020028
 8001f3c:	40020040 	.word	0x40020040
 8001f40:	40020058 	.word	0x40020058
 8001f44:	40020070 	.word	0x40020070
 8001f48:	40020088 	.word	0x40020088
 8001f4c:	400200a0 	.word	0x400200a0
 8001f50:	400200b8 	.word	0x400200b8
 8001f54:	40020410 	.word	0x40020410
 8001f58:	40020428 	.word	0x40020428
 8001f5c:	40020440 	.word	0x40020440
 8001f60:	40020458 	.word	0x40020458
 8001f64:	40020470 	.word	0x40020470
 8001f68:	40020488 	.word	0x40020488
 8001f6c:	400204a0 	.word	0x400204a0
 8001f70:	400204b8 	.word	0x400204b8
 8001f74:	58025408 	.word	0x58025408
 8001f78:	5802541c 	.word	0x5802541c
 8001f7c:	58025430 	.word	0x58025430
 8001f80:	58025444 	.word	0x58025444
 8001f84:	58025458 	.word	0x58025458
 8001f88:	5802546c 	.word	0x5802546c
 8001f8c:	58025480 	.word	0x58025480
 8001f90:	58025494 	.word	0x58025494

08001f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff f916 	bl	80011cc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e2dc      	b.n	8002566 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d008      	beq.n	8001fca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e2cd      	b.n	8002566 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a76      	ldr	r2, [pc, #472]	@ (80021a8 <HAL_DMA_Abort+0x214>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04a      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a74      	ldr	r2, [pc, #464]	@ (80021ac <HAL_DMA_Abort+0x218>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d045      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a73      	ldr	r2, [pc, #460]	@ (80021b0 <HAL_DMA_Abort+0x21c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d040      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a71      	ldr	r2, [pc, #452]	@ (80021b4 <HAL_DMA_Abort+0x220>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d03b      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a70      	ldr	r2, [pc, #448]	@ (80021b8 <HAL_DMA_Abort+0x224>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d036      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6e      	ldr	r2, [pc, #440]	@ (80021bc <HAL_DMA_Abort+0x228>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6d      	ldr	r2, [pc, #436]	@ (80021c0 <HAL_DMA_Abort+0x22c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d02c      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6b      	ldr	r2, [pc, #428]	@ (80021c4 <HAL_DMA_Abort+0x230>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d027      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6a      	ldr	r2, [pc, #424]	@ (80021c8 <HAL_DMA_Abort+0x234>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a68      	ldr	r2, [pc, #416]	@ (80021cc <HAL_DMA_Abort+0x238>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01d      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_DMA_Abort+0x23c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d018      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a65      	ldr	r2, [pc, #404]	@ (80021d4 <HAL_DMA_Abort+0x240>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a64      	ldr	r2, [pc, #400]	@ (80021d8 <HAL_DMA_Abort+0x244>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a62      	ldr	r2, [pc, #392]	@ (80021dc <HAL_DMA_Abort+0x248>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a61      	ldr	r2, [pc, #388]	@ (80021e0 <HAL_DMA_Abort+0x24c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5f      	ldr	r2, [pc, #380]	@ (80021e4 <HAL_DMA_Abort+0x250>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_DMA_Abort+0xda>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_DMA_Abort+0xdc>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 021e 	bic.w	r2, r2, #30
 8002082:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002092:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00a      	b.n	80020b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 020e 	bic.w	r2, r2, #14
 80020aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <HAL_DMA_Abort+0x214>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d072      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3a      	ldr	r2, [pc, #232]	@ (80021ac <HAL_DMA_Abort+0x218>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d06d      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a39      	ldr	r2, [pc, #228]	@ (80021b0 <HAL_DMA_Abort+0x21c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d068      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a37      	ldr	r2, [pc, #220]	@ (80021b4 <HAL_DMA_Abort+0x220>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d063      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a36      	ldr	r2, [pc, #216]	@ (80021b8 <HAL_DMA_Abort+0x224>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_DMA_Abort+0x228>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d059      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <HAL_DMA_Abort+0x22c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d054      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a31      	ldr	r2, [pc, #196]	@ (80021c4 <HAL_DMA_Abort+0x230>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <HAL_DMA_Abort+0x234>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04a      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2e      	ldr	r2, [pc, #184]	@ (80021cc <HAL_DMA_Abort+0x238>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d045      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <HAL_DMA_Abort+0x23c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d040      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_DMA_Abort+0x240>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <HAL_DMA_Abort+0x244>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d036      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <HAL_DMA_Abort+0x248>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <HAL_DMA_Abort+0x24c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d02c      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	@ (80021e4 <HAL_DMA_Abort+0x250>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <HAL_DMA_Abort+0x254>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <HAL_DMA_Abort+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_DMA_Abort+0x25c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	@ (80021f4 <HAL_DMA_Abort+0x260>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_DMA_Abort+0x264>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <HAL_DMA_Abort+0x268>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_DMA_Abort+0x26c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_DMA_Abort+0x270>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d132      	bne.n	8002208 <HAL_DMA_Abort+0x274>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e031      	b.n	800220a <HAL_DMA_Abort+0x276>
 80021a6:	bf00      	nop
 80021a8:	40020010 	.word	0x40020010
 80021ac:	40020028 	.word	0x40020028
 80021b0:	40020040 	.word	0x40020040
 80021b4:	40020058 	.word	0x40020058
 80021b8:	40020070 	.word	0x40020070
 80021bc:	40020088 	.word	0x40020088
 80021c0:	400200a0 	.word	0x400200a0
 80021c4:	400200b8 	.word	0x400200b8
 80021c8:	40020410 	.word	0x40020410
 80021cc:	40020428 	.word	0x40020428
 80021d0:	40020440 	.word	0x40020440
 80021d4:	40020458 	.word	0x40020458
 80021d8:	40020470 	.word	0x40020470
 80021dc:	40020488 	.word	0x40020488
 80021e0:	400204a0 	.word	0x400204a0
 80021e4:	400204b8 	.word	0x400204b8
 80021e8:	58025408 	.word	0x58025408
 80021ec:	5802541c 	.word	0x5802541c
 80021f0:	58025430 	.word	0x58025430
 80021f4:	58025444 	.word	0x58025444
 80021f8:	58025458 	.word	0x58025458
 80021fc:	5802546c 	.word	0x5802546c
 8002200:	58025480 	.word	0x58025480
 8002204:	58025494 	.word	0x58025494
 8002208:	2300      	movs	r3, #0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6d      	ldr	r2, [pc, #436]	@ (80023d8 <HAL_DMA_Abort+0x444>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04a      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_DMA_Abort+0x448>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d045      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6a      	ldr	r2, [pc, #424]	@ (80023e0 <HAL_DMA_Abort+0x44c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d040      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a68      	ldr	r2, [pc, #416]	@ (80023e4 <HAL_DMA_Abort+0x450>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d03b      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a67      	ldr	r2, [pc, #412]	@ (80023e8 <HAL_DMA_Abort+0x454>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d036      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a65      	ldr	r2, [pc, #404]	@ (80023ec <HAL_DMA_Abort+0x458>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a64      	ldr	r2, [pc, #400]	@ (80023f0 <HAL_DMA_Abort+0x45c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d02c      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a62      	ldr	r2, [pc, #392]	@ (80023f4 <HAL_DMA_Abort+0x460>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d027      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a61      	ldr	r2, [pc, #388]	@ (80023f8 <HAL_DMA_Abort+0x464>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5f      	ldr	r2, [pc, #380]	@ (80023fc <HAL_DMA_Abort+0x468>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01d      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a5e      	ldr	r2, [pc, #376]	@ (8002400 <HAL_DMA_Abort+0x46c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d018      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a5c      	ldr	r2, [pc, #368]	@ (8002404 <HAL_DMA_Abort+0x470>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a5b      	ldr	r2, [pc, #364]	@ (8002408 <HAL_DMA_Abort+0x474>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a59      	ldr	r2, [pc, #356]	@ (800240c <HAL_DMA_Abort+0x478>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_DMA_Abort+0x47c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_DMA_Abort+0x480>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <HAL_DMA_Abort+0x33c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_DMA_Abort+0x34c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022e0:	e013      	b.n	800230a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e2:	f7fe ff73 	bl	80011cc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d90c      	bls.n	800230a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e12d      	b.n	8002566 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1e5      	bne.n	80022e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <HAL_DMA_Abort+0x444>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <HAL_DMA_Abort+0x448>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2c      	ldr	r2, [pc, #176]	@ (80023e0 <HAL_DMA_Abort+0x44c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_DMA_Abort+0x450>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a29      	ldr	r2, [pc, #164]	@ (80023e8 <HAL_DMA_Abort+0x454>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_Abort+0x458>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_DMA_Abort+0x45c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_DMA_Abort+0x460>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a23      	ldr	r2, [pc, #140]	@ (80023f8 <HAL_DMA_Abort+0x464>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <HAL_DMA_Abort+0x468>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a20      	ldr	r2, [pc, #128]	@ (8002400 <HAL_DMA_Abort+0x46c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1e      	ldr	r2, [pc, #120]	@ (8002404 <HAL_DMA_Abort+0x470>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_DMA_Abort+0x474>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1b      	ldr	r2, [pc, #108]	@ (800240c <HAL_DMA_Abort+0x478>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_DMA_Abort+0x47c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_DMA_Abort+0x480>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_DMA_Abort+0x426>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_DMA_Abort+0x428>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02b      	beq.n	8002418 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	223f      	movs	r2, #63	@ 0x3f
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	e02a      	b.n	800242e <HAL_DMA_Abort+0x49a>
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4f      	ldr	r2, [pc, #316]	@ (8002570 <HAL_DMA_Abort+0x5dc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d072      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4d      	ldr	r2, [pc, #308]	@ (8002574 <HAL_DMA_Abort+0x5e0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d06d      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4c      	ldr	r2, [pc, #304]	@ (8002578 <HAL_DMA_Abort+0x5e4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d068      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4a      	ldr	r2, [pc, #296]	@ (800257c <HAL_DMA_Abort+0x5e8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d063      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a49      	ldr	r2, [pc, #292]	@ (8002580 <HAL_DMA_Abort+0x5ec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d05e      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a47      	ldr	r2, [pc, #284]	@ (8002584 <HAL_DMA_Abort+0x5f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d059      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a46      	ldr	r2, [pc, #280]	@ (8002588 <HAL_DMA_Abort+0x5f4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d054      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a44      	ldr	r2, [pc, #272]	@ (800258c <HAL_DMA_Abort+0x5f8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d04f      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a43      	ldr	r2, [pc, #268]	@ (8002590 <HAL_DMA_Abort+0x5fc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d04a      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a41      	ldr	r2, [pc, #260]	@ (8002594 <HAL_DMA_Abort+0x600>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d045      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a40      	ldr	r2, [pc, #256]	@ (8002598 <HAL_DMA_Abort+0x604>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d040      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DMA_Abort+0x608>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d03b      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3d      	ldr	r2, [pc, #244]	@ (80025a0 <HAL_DMA_Abort+0x60c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d036      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <HAL_DMA_Abort+0x610>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a3a      	ldr	r2, [pc, #232]	@ (80025a8 <HAL_DMA_Abort+0x614>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d02c      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a38      	ldr	r2, [pc, #224]	@ (80025ac <HAL_DMA_Abort+0x618>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d027      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a37      	ldr	r2, [pc, #220]	@ (80025b0 <HAL_DMA_Abort+0x61c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a35      	ldr	r2, [pc, #212]	@ (80025b4 <HAL_DMA_Abort+0x620>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a34      	ldr	r2, [pc, #208]	@ (80025b8 <HAL_DMA_Abort+0x624>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d018      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a32      	ldr	r2, [pc, #200]	@ (80025bc <HAL_DMA_Abort+0x628>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <HAL_DMA_Abort+0x62c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00e      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2f      	ldr	r2, [pc, #188]	@ (80025c4 <HAL_DMA_Abort+0x630>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2e      	ldr	r2, [pc, #184]	@ (80025c8 <HAL_DMA_Abort+0x634>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <HAL_DMA_Abort+0x638>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_DMA_Abort+0x58e>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_DMA_Abort+0x590>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002530:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002548:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002552:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40020010 	.word	0x40020010
 8002574:	40020028 	.word	0x40020028
 8002578:	40020040 	.word	0x40020040
 800257c:	40020058 	.word	0x40020058
 8002580:	40020070 	.word	0x40020070
 8002584:	40020088 	.word	0x40020088
 8002588:	400200a0 	.word	0x400200a0
 800258c:	400200b8 	.word	0x400200b8
 8002590:	40020410 	.word	0x40020410
 8002594:	40020428 	.word	0x40020428
 8002598:	40020440 	.word	0x40020440
 800259c:	40020458 	.word	0x40020458
 80025a0:	40020470 	.word	0x40020470
 80025a4:	40020488 	.word	0x40020488
 80025a8:	400204a0 	.word	0x400204a0
 80025ac:	400204b8 	.word	0x400204b8
 80025b0:	58025408 	.word	0x58025408
 80025b4:	5802541c 	.word	0x5802541c
 80025b8:	58025430 	.word	0x58025430
 80025bc:	58025444 	.word	0x58025444
 80025c0:	58025458 	.word	0x58025458
 80025c4:	5802546c 	.word	0x5802546c
 80025c8:	58025480 	.word	0x58025480
 80025cc:	58025494 	.word	0x58025494

080025d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e237      	b.n	8002a52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e22c      	b.n	8002a52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002770 <HAL_DMA_Abort_IT+0x1a0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5b      	ldr	r2, [pc, #364]	@ (8002774 <HAL_DMA_Abort_IT+0x1a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a59      	ldr	r2, [pc, #356]	@ (8002778 <HAL_DMA_Abort_IT+0x1a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a58      	ldr	r2, [pc, #352]	@ (800277c <HAL_DMA_Abort_IT+0x1ac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a56      	ldr	r2, [pc, #344]	@ (8002780 <HAL_DMA_Abort_IT+0x1b0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a55      	ldr	r2, [pc, #340]	@ (8002784 <HAL_DMA_Abort_IT+0x1b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a53      	ldr	r2, [pc, #332]	@ (8002788 <HAL_DMA_Abort_IT+0x1b8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a52      	ldr	r2, [pc, #328]	@ (800278c <HAL_DMA_Abort_IT+0x1bc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a50      	ldr	r2, [pc, #320]	@ (8002790 <HAL_DMA_Abort_IT+0x1c0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <HAL_DMA_Abort_IT+0x1c4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4d      	ldr	r2, [pc, #308]	@ (8002798 <HAL_DMA_Abort_IT+0x1c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4c      	ldr	r2, [pc, #304]	@ (800279c <HAL_DMA_Abort_IT+0x1cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_DMA_Abort_IT+0x1d0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a49      	ldr	r2, [pc, #292]	@ (80027a4 <HAL_DMA_Abort_IT+0x1d4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a47      	ldr	r2, [pc, #284]	@ (80027a8 <HAL_DMA_Abort_IT+0x1d8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a46      	ldr	r2, [pc, #280]	@ (80027ac <HAL_DMA_Abort_IT+0x1dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_DMA_Abort_IT+0xcc>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_DMA_Abort_IT+0xce>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8086 	beq.w	80027b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2204      	movs	r2, #4
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002770 <HAL_DMA_Abort_IT+0x1a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d04a      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002774 <HAL_DMA_Abort_IT+0x1a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d045      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <HAL_DMA_Abort_IT+0x1a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d040      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <HAL_DMA_Abort_IT+0x1ac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d03b      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a29      	ldr	r2, [pc, #164]	@ (8002780 <HAL_DMA_Abort_IT+0x1b0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d036      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a28      	ldr	r2, [pc, #160]	@ (8002784 <HAL_DMA_Abort_IT+0x1b4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d031      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a26      	ldr	r2, [pc, #152]	@ (8002788 <HAL_DMA_Abort_IT+0x1b8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02c      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a25      	ldr	r2, [pc, #148]	@ (800278c <HAL_DMA_Abort_IT+0x1bc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d027      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a23      	ldr	r2, [pc, #140]	@ (8002790 <HAL_DMA_Abort_IT+0x1c0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <HAL_DMA_Abort_IT+0x1c4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a20      	ldr	r2, [pc, #128]	@ (8002798 <HAL_DMA_Abort_IT+0x1c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1f      	ldr	r2, [pc, #124]	@ (800279c <HAL_DMA_Abort_IT+0x1cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <HAL_DMA_Abort_IT+0x1d0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_DMA_Abort_IT+0x1d4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_DMA_Abort_IT+0x1d8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_DMA_Abort_IT+0x1dc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <HAL_DMA_Abort_IT+0x18e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e178      	b.n	8002a50 <HAL_DMA_Abort_IT+0x480>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e16f      	b.n	8002a50 <HAL_DMA_Abort_IT+0x480>
 8002770:	40020010 	.word	0x40020010
 8002774:	40020028 	.word	0x40020028
 8002778:	40020040 	.word	0x40020040
 800277c:	40020058 	.word	0x40020058
 8002780:	40020070 	.word	0x40020070
 8002784:	40020088 	.word	0x40020088
 8002788:	400200a0 	.word	0x400200a0
 800278c:	400200b8 	.word	0x400200b8
 8002790:	40020410 	.word	0x40020410
 8002794:	40020428 	.word	0x40020428
 8002798:	40020440 	.word	0x40020440
 800279c:	40020458 	.word	0x40020458
 80027a0:	40020470 	.word	0x40020470
 80027a4:	40020488 	.word	0x40020488
 80027a8:	400204a0 	.word	0x400204a0
 80027ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020e 	bic.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6c      	ldr	r2, [pc, #432]	@ (8002978 <HAL_DMA_Abort_IT+0x3a8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6b      	ldr	r2, [pc, #428]	@ (800297c <HAL_DMA_Abort_IT+0x3ac>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a69      	ldr	r2, [pc, #420]	@ (8002980 <HAL_DMA_Abort_IT+0x3b0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a68      	ldr	r2, [pc, #416]	@ (8002984 <HAL_DMA_Abort_IT+0x3b4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a66      	ldr	r2, [pc, #408]	@ (8002988 <HAL_DMA_Abort_IT+0x3b8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a65      	ldr	r2, [pc, #404]	@ (800298c <HAL_DMA_Abort_IT+0x3bc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a63      	ldr	r2, [pc, #396]	@ (8002990 <HAL_DMA_Abort_IT+0x3c0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a62      	ldr	r2, [pc, #392]	@ (8002994 <HAL_DMA_Abort_IT+0x3c4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a60      	ldr	r2, [pc, #384]	@ (8002998 <HAL_DMA_Abort_IT+0x3c8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5f      	ldr	r2, [pc, #380]	@ (800299c <HAL_DMA_Abort_IT+0x3cc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5d      	ldr	r2, [pc, #372]	@ (80029a0 <HAL_DMA_Abort_IT+0x3d0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5c      	ldr	r2, [pc, #368]	@ (80029a4 <HAL_DMA_Abort_IT+0x3d4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5a      	ldr	r2, [pc, #360]	@ (80029a8 <HAL_DMA_Abort_IT+0x3d8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a59      	ldr	r2, [pc, #356]	@ (80029ac <HAL_DMA_Abort_IT+0x3dc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a57      	ldr	r2, [pc, #348]	@ (80029b0 <HAL_DMA_Abort_IT+0x3e0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_DMA_Abort_IT+0x3e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <HAL_DMA_Abort_IT+0x2a2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e007      	b.n	8002882 <HAL_DMA_Abort_IT+0x2b2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3c      	ldr	r2, [pc, #240]	@ (8002978 <HAL_DMA_Abort_IT+0x3a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d072      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3a      	ldr	r2, [pc, #232]	@ (800297c <HAL_DMA_Abort_IT+0x3ac>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d06d      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a39      	ldr	r2, [pc, #228]	@ (8002980 <HAL_DMA_Abort_IT+0x3b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d068      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a37      	ldr	r2, [pc, #220]	@ (8002984 <HAL_DMA_Abort_IT+0x3b4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d063      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a36      	ldr	r2, [pc, #216]	@ (8002988 <HAL_DMA_Abort_IT+0x3b8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d05e      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a34      	ldr	r2, [pc, #208]	@ (800298c <HAL_DMA_Abort_IT+0x3bc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d059      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a33      	ldr	r2, [pc, #204]	@ (8002990 <HAL_DMA_Abort_IT+0x3c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d054      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a31      	ldr	r2, [pc, #196]	@ (8002994 <HAL_DMA_Abort_IT+0x3c4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d04f      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a30      	ldr	r2, [pc, #192]	@ (8002998 <HAL_DMA_Abort_IT+0x3c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2e      	ldr	r2, [pc, #184]	@ (800299c <HAL_DMA_Abort_IT+0x3cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <HAL_DMA_Abort_IT+0x3d0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2b      	ldr	r2, [pc, #172]	@ (80029a4 <HAL_DMA_Abort_IT+0x3d4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <HAL_DMA_Abort_IT+0x3d8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <HAL_DMA_Abort_IT+0x3dc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <HAL_DMA_Abort_IT+0x3e0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a25      	ldr	r2, [pc, #148]	@ (80029b4 <HAL_DMA_Abort_IT+0x3e4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a24      	ldr	r2, [pc, #144]	@ (80029b8 <HAL_DMA_Abort_IT+0x3e8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a22      	ldr	r2, [pc, #136]	@ (80029bc <HAL_DMA_Abort_IT+0x3ec>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <HAL_DMA_Abort_IT+0x3f0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <HAL_DMA_Abort_IT+0x3f4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <HAL_DMA_Abort_IT+0x3f8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <HAL_DMA_Abort_IT+0x3fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_DMA_Abort_IT+0x400>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_DMA_Abort_IT+0x404>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d132      	bne.n	80029d8 <HAL_DMA_Abort_IT+0x408>
 8002972:	2301      	movs	r3, #1
 8002974:	e031      	b.n	80029da <HAL_DMA_Abort_IT+0x40a>
 8002976:	bf00      	nop
 8002978:	40020010 	.word	0x40020010
 800297c:	40020028 	.word	0x40020028
 8002980:	40020040 	.word	0x40020040
 8002984:	40020058 	.word	0x40020058
 8002988:	40020070 	.word	0x40020070
 800298c:	40020088 	.word	0x40020088
 8002990:	400200a0 	.word	0x400200a0
 8002994:	400200b8 	.word	0x400200b8
 8002998:	40020410 	.word	0x40020410
 800299c:	40020428 	.word	0x40020428
 80029a0:	40020440 	.word	0x40020440
 80029a4:	40020458 	.word	0x40020458
 80029a8:	40020470 	.word	0x40020470
 80029ac:	40020488 	.word	0x40020488
 80029b0:	400204a0 	.word	0x400204a0
 80029b4:	400204b8 	.word	0x400204b8
 80029b8:	58025408 	.word	0x58025408
 80029bc:	5802541c 	.word	0x5802541c
 80029c0:	58025430 	.word	0x58025430
 80029c4:	58025444 	.word	0x58025444
 80029c8:	58025458 	.word	0x58025458
 80029cc:	5802546c 	.word	0x5802546c
 80029d0:	58025480 	.word	0x58025480
 80029d4:	58025494 	.word	0x58025494
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d028      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop

08002a5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a68:	4b67      	ldr	r3, [pc, #412]	@ (8002c08 <HAL_DMA_IRQHandler+0x1ac>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a67      	ldr	r2, [pc, #412]	@ (8002c0c <HAL_DMA_IRQHandler+0x1b0>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5f      	ldr	r2, [pc, #380]	@ (8002c10 <HAL_DMA_IRQHandler+0x1b4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04a      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c14 <HAL_DMA_IRQHandler+0x1b8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d045      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c18 <HAL_DMA_IRQHandler+0x1bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d040      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c1c <HAL_DMA_IRQHandler+0x1c0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d03b      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a59      	ldr	r2, [pc, #356]	@ (8002c20 <HAL_DMA_IRQHandler+0x1c4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d036      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_DMA_IRQHandler+0x1c8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a56      	ldr	r2, [pc, #344]	@ (8002c28 <HAL_DMA_IRQHandler+0x1cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d02c      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a54      	ldr	r2, [pc, #336]	@ (8002c2c <HAL_DMA_IRQHandler+0x1d0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d027      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a53      	ldr	r2, [pc, #332]	@ (8002c30 <HAL_DMA_IRQHandler+0x1d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a51      	ldr	r2, [pc, #324]	@ (8002c34 <HAL_DMA_IRQHandler+0x1d8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a50      	ldr	r2, [pc, #320]	@ (8002c38 <HAL_DMA_IRQHandler+0x1dc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4e      	ldr	r2, [pc, #312]	@ (8002c3c <HAL_DMA_IRQHandler+0x1e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c40 <HAL_DMA_IRQHandler+0x1e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_DMA_IRQHandler+0x1e8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_DMA_IRQHandler+0x1ec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a48      	ldr	r2, [pc, #288]	@ (8002c4c <HAL_DMA_IRQHandler+0x1f0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_DMA_IRQHandler+0xd6>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_IRQHandler+0xd8>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 842b 	beq.w	8003390 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2208      	movs	r2, #8
 8002b44:	409a      	lsls	r2, r3
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a2 	beq.w	8002c94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2e      	ldr	r2, [pc, #184]	@ (8002c10 <HAL_DMA_IRQHandler+0x1b4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d04a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c14 <HAL_DMA_IRQHandler+0x1b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d045      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <HAL_DMA_IRQHandler+0x1bc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d040      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <HAL_DMA_IRQHandler+0x1c0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d03b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_DMA_IRQHandler+0x1c4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d036      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a27      	ldr	r2, [pc, #156]	@ (8002c24 <HAL_DMA_IRQHandler+0x1c8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d031      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a25      	ldr	r2, [pc, #148]	@ (8002c28 <HAL_DMA_IRQHandler+0x1cc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02c      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <HAL_DMA_IRQHandler+0x1d0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d027      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <HAL_DMA_IRQHandler+0x1d4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d022      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a21      	ldr	r2, [pc, #132]	@ (8002c34 <HAL_DMA_IRQHandler+0x1d8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d01d      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_DMA_IRQHandler+0x1dc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d018      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_DMA_IRQHandler+0x1e0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_DMA_IRQHandler+0x1e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <HAL_DMA_IRQHandler+0x1e8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	@ (8002c48 <HAL_DMA_IRQHandler+0x1ec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_DMA_IRQHandler+0x1f0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12f      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x1f4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e02e      	b.n	8002c64 <HAL_DMA_IRQHandler+0x208>
 8002c06:	bf00      	nop
 8002c08:	24000000 	.word	0x24000000
 8002c0c:	1b4e81b5 	.word	0x1b4e81b5
 8002c10:	40020010 	.word	0x40020010
 8002c14:	40020028 	.word	0x40020028
 8002c18:	40020040 	.word	0x40020040
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	40020070 	.word	0x40020070
 8002c24:	40020088 	.word	0x40020088
 8002c28:	400200a0 	.word	0x400200a0
 8002c2c:	400200b8 	.word	0x400200b8
 8002c30:	40020410 	.word	0x40020410
 8002c34:	40020428 	.word	0x40020428
 8002c38:	40020440 	.word	0x40020440
 8002c3c:	40020458 	.word	0x40020458
 8002c40:	40020470 	.word	0x40020470
 8002c44:	40020488 	.word	0x40020488
 8002c48:	400204a0 	.word	0x400204a0
 8002c4c:	400204b8 	.word	0x400204b8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2208      	movs	r2, #8
 8002c82:	409a      	lsls	r2, r3
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d06e      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a69      	ldr	r2, [pc, #420]	@ (8002e54 <HAL_DMA_IRQHandler+0x3f8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a67      	ldr	r2, [pc, #412]	@ (8002e58 <HAL_DMA_IRQHandler+0x3fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_DMA_IRQHandler+0x400>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a64      	ldr	r2, [pc, #400]	@ (8002e60 <HAL_DMA_IRQHandler+0x404>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a63      	ldr	r2, [pc, #396]	@ (8002e64 <HAL_DMA_IRQHandler+0x408>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a61      	ldr	r2, [pc, #388]	@ (8002e68 <HAL_DMA_IRQHandler+0x40c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a60      	ldr	r2, [pc, #384]	@ (8002e6c <HAL_DMA_IRQHandler+0x410>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e70 <HAL_DMA_IRQHandler+0x414>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8002e74 <HAL_DMA_IRQHandler+0x418>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5b      	ldr	r2, [pc, #364]	@ (8002e78 <HAL_DMA_IRQHandler+0x41c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5a      	ldr	r2, [pc, #360]	@ (8002e7c <HAL_DMA_IRQHandler+0x420>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	@ (8002e80 <HAL_DMA_IRQHandler+0x424>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a57      	ldr	r2, [pc, #348]	@ (8002e84 <HAL_DMA_IRQHandler+0x428>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a55      	ldr	r2, [pc, #340]	@ (8002e88 <HAL_DMA_IRQHandler+0x42c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a54      	ldr	r2, [pc, #336]	@ (8002e8c <HAL_DMA_IRQHandler+0x430>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_DMA_IRQHandler+0x434>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10a      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x304>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e003      	b.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f043 0202 	orr.w	r2, r3, #2
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2204      	movs	r2, #4
 8002d92:	409a      	lsls	r2, r3
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 808f 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <HAL_DMA_IRQHandler+0x3f8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <HAL_DMA_IRQHandler+0x3fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a29      	ldr	r2, [pc, #164]	@ (8002e5c <HAL_DMA_IRQHandler+0x400>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	@ (8002e60 <HAL_DMA_IRQHandler+0x404>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a26      	ldr	r2, [pc, #152]	@ (8002e64 <HAL_DMA_IRQHandler+0x408>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	@ (8002e68 <HAL_DMA_IRQHandler+0x40c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_DMA_IRQHandler+0x410>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <HAL_DMA_IRQHandler+0x414>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a20      	ldr	r2, [pc, #128]	@ (8002e74 <HAL_DMA_IRQHandler+0x418>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_DMA_IRQHandler+0x41c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	@ (8002e7c <HAL_DMA_IRQHandler+0x420>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <HAL_DMA_IRQHandler+0x424>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <HAL_DMA_IRQHandler+0x428>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <HAL_DMA_IRQHandler+0x42c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_DMA_IRQHandler+0x430>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a15      	ldr	r2, [pc, #84]	@ (8002e90 <HAL_DMA_IRQHandler+0x434>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12a      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x438>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e023      	b.n	8002e9c <HAL_DMA_IRQHandler+0x440>
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a6 	beq.w	800301e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a85      	ldr	r2, [pc, #532]	@ (80030ec <HAL_DMA_IRQHandler+0x690>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a83      	ldr	r2, [pc, #524]	@ (80030f0 <HAL_DMA_IRQHandler+0x694>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a82      	ldr	r2, [pc, #520]	@ (80030f4 <HAL_DMA_IRQHandler+0x698>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a80      	ldr	r2, [pc, #512]	@ (80030f8 <HAL_DMA_IRQHandler+0x69c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7f      	ldr	r2, [pc, #508]	@ (80030fc <HAL_DMA_IRQHandler+0x6a0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7d      	ldr	r2, [pc, #500]	@ (8003100 <HAL_DMA_IRQHandler+0x6a4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7c      	ldr	r2, [pc, #496]	@ (8003104 <HAL_DMA_IRQHandler+0x6a8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003108 <HAL_DMA_IRQHandler+0x6ac>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a79      	ldr	r2, [pc, #484]	@ (800310c <HAL_DMA_IRQHandler+0x6b0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a77      	ldr	r2, [pc, #476]	@ (8003110 <HAL_DMA_IRQHandler+0x6b4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a76      	ldr	r2, [pc, #472]	@ (8003114 <HAL_DMA_IRQHandler+0x6b8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a74      	ldr	r2, [pc, #464]	@ (8003118 <HAL_DMA_IRQHandler+0x6bc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	@ (800311c <HAL_DMA_IRQHandler+0x6c0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a71      	ldr	r2, [pc, #452]	@ (8003120 <HAL_DMA_IRQHandler+0x6c4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <HAL_DMA_IRQHandler+0x6c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003128 <HAL_DMA_IRQHandler+0x6cc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10a      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x52c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e009      	b.n	8002f9c <HAL_DMA_IRQHandler+0x540>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03e      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2210      	movs	r2, #16
 8002faa:	409a      	lsls	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d024      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e01f      	b.n	800301e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01b      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	e016      	b.n	800301e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d107      	bne.n	800300e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2220      	movs	r2, #32
 8003028:	409a      	lsls	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8110 	beq.w	8003254 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <HAL_DMA_IRQHandler+0x690>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d04a      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2b      	ldr	r2, [pc, #172]	@ (80030f0 <HAL_DMA_IRQHandler+0x694>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d045      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a29      	ldr	r2, [pc, #164]	@ (80030f4 <HAL_DMA_IRQHandler+0x698>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d040      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a28      	ldr	r2, [pc, #160]	@ (80030f8 <HAL_DMA_IRQHandler+0x69c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d03b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a26      	ldr	r2, [pc, #152]	@ (80030fc <HAL_DMA_IRQHandler+0x6a0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d036      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a25      	ldr	r2, [pc, #148]	@ (8003100 <HAL_DMA_IRQHandler+0x6a4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d031      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_DMA_IRQHandler+0x6a8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02c      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a22      	ldr	r2, [pc, #136]	@ (8003108 <HAL_DMA_IRQHandler+0x6ac>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d027      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a20      	ldr	r2, [pc, #128]	@ (800310c <HAL_DMA_IRQHandler+0x6b0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d022      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_DMA_IRQHandler+0x6b4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d01d      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <HAL_DMA_IRQHandler+0x6b8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d018      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003118 <HAL_DMA_IRQHandler+0x6bc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_DMA_IRQHandler+0x6c0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00e      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a19      	ldr	r2, [pc, #100]	@ (8003120 <HAL_DMA_IRQHandler+0x6c4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <HAL_DMA_IRQHandler+0x6c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_DMA_IRQHandler+0x6cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d12b      	bne.n	800312c <HAL_DMA_IRQHandler+0x6d0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e02a      	b.n	8003140 <HAL_DMA_IRQHandler+0x6e4>
 80030ea:	bf00      	nop
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8087 	beq.w	8003254 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2220      	movs	r2, #32
 8003150:	409a      	lsls	r2, r3
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b04      	cmp	r3, #4
 8003160:	d139      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0216 	bic.w	r2, r2, #22
 8003170:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003180:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_DMA_IRQHandler+0x736>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0208 	bic.w	r2, r2, #8
 80031a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	223f      	movs	r2, #63	@ 0x3f
 80031ac:	409a      	lsls	r2, r3
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8382 	beq.w	80038d0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
          }
          return;
 80031d4:	e37c      	b.n	80038d0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02c      	beq.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e027      	b.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e01e      	b.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10f      	bne.n	8003244 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0210 	bic.w	r2, r2, #16
 8003232:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 833e 	beq.w	80038da <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8088 	beq.w	800337c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2204      	movs	r2, #4
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a89      	ldr	r2, [pc, #548]	@ (80034a0 <HAL_DMA_IRQHandler+0xa44>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d04a      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a88      	ldr	r2, [pc, #544]	@ (80034a4 <HAL_DMA_IRQHandler+0xa48>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d045      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a86      	ldr	r2, [pc, #536]	@ (80034a8 <HAL_DMA_IRQHandler+0xa4c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d040      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a85      	ldr	r2, [pc, #532]	@ (80034ac <HAL_DMA_IRQHandler+0xa50>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d03b      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a83      	ldr	r2, [pc, #524]	@ (80034b0 <HAL_DMA_IRQHandler+0xa54>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d036      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a82      	ldr	r2, [pc, #520]	@ (80034b4 <HAL_DMA_IRQHandler+0xa58>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d031      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a80      	ldr	r2, [pc, #512]	@ (80034b8 <HAL_DMA_IRQHandler+0xa5c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02c      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7f      	ldr	r2, [pc, #508]	@ (80034bc <HAL_DMA_IRQHandler+0xa60>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d027      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7d      	ldr	r2, [pc, #500]	@ (80034c0 <HAL_DMA_IRQHandler+0xa64>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d022      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7c      	ldr	r2, [pc, #496]	@ (80034c4 <HAL_DMA_IRQHandler+0xa68>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01d      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7a      	ldr	r2, [pc, #488]	@ (80034c8 <HAL_DMA_IRQHandler+0xa6c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d018      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a79      	ldr	r2, [pc, #484]	@ (80034cc <HAL_DMA_IRQHandler+0xa70>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a77      	ldr	r2, [pc, #476]	@ (80034d0 <HAL_DMA_IRQHandler+0xa74>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a76      	ldr	r2, [pc, #472]	@ (80034d4 <HAL_DMA_IRQHandler+0xa78>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a74      	ldr	r2, [pc, #464]	@ (80034d8 <HAL_DMA_IRQHandler+0xa7c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a73      	ldr	r2, [pc, #460]	@ (80034dc <HAL_DMA_IRQHandler+0xa80>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d108      	bne.n	8003326 <HAL_DMA_IRQHandler+0x8ca>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <HAL_DMA_IRQHandler+0x8da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333e:	429a      	cmp	r2, r3
 8003340:	d307      	bcc.n	8003352 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f2      	bne.n	8003336 <HAL_DMA_IRQHandler+0x8da>
 8003350:	e000      	b.n	8003354 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003352:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800336a:	e003      	b.n	8003374 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 82aa 	beq.w	80038da <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e2a4      	b.n	80038da <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a52      	ldr	r2, [pc, #328]	@ (80034e0 <HAL_DMA_IRQHandler+0xa84>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d04a      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a51      	ldr	r2, [pc, #324]	@ (80034e4 <HAL_DMA_IRQHandler+0xa88>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d045      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a4f      	ldr	r2, [pc, #316]	@ (80034e8 <HAL_DMA_IRQHandler+0xa8c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d040      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a4e      	ldr	r2, [pc, #312]	@ (80034ec <HAL_DMA_IRQHandler+0xa90>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d03b      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <HAL_DMA_IRQHandler+0xa94>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d036      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a4b      	ldr	r2, [pc, #300]	@ (80034f4 <HAL_DMA_IRQHandler+0xa98>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d031      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a49      	ldr	r2, [pc, #292]	@ (80034f8 <HAL_DMA_IRQHandler+0xa9c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02c      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a48      	ldr	r2, [pc, #288]	@ (80034fc <HAL_DMA_IRQHandler+0xaa0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d027      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a46      	ldr	r2, [pc, #280]	@ (8003500 <HAL_DMA_IRQHandler+0xaa4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d022      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a45      	ldr	r2, [pc, #276]	@ (8003504 <HAL_DMA_IRQHandler+0xaa8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d01d      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a43      	ldr	r2, [pc, #268]	@ (8003508 <HAL_DMA_IRQHandler+0xaac>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d018      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a42      	ldr	r2, [pc, #264]	@ (800350c <HAL_DMA_IRQHandler+0xab0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d013      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a40      	ldr	r2, [pc, #256]	@ (8003510 <HAL_DMA_IRQHandler+0xab4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3f      	ldr	r2, [pc, #252]	@ (8003514 <HAL_DMA_IRQHandler+0xab8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3d      	ldr	r2, [pc, #244]	@ (8003518 <HAL_DMA_IRQHandler+0xabc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_DMA_IRQHandler+0x9d4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3c      	ldr	r2, [pc, #240]	@ (800351c <HAL_DMA_IRQHandler+0xac0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_DMA_IRQHandler+0x9d8>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_DMA_IRQHandler+0x9da>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 824f 	beq.w	80038da <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80dd 	beq.w	8003614 <HAL_DMA_IRQHandler+0xbb8>
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80d7 	beq.w	8003614 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2204      	movs	r2, #4
 8003470:	409a      	lsls	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d059      	beq.n	8003534 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14a      	bne.n	8003520 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8220 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800349c:	e21a      	b.n	80038d4 <HAL_DMA_IRQHandler+0xe78>
 800349e:	bf00      	nop
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
 80034e0:	48022c08 	.word	0x48022c08
 80034e4:	48022c1c 	.word	0x48022c1c
 80034e8:	48022c30 	.word	0x48022c30
 80034ec:	48022c44 	.word	0x48022c44
 80034f0:	48022c58 	.word	0x48022c58
 80034f4:	48022c6c 	.word	0x48022c6c
 80034f8:	48022c80 	.word	0x48022c80
 80034fc:	48022c94 	.word	0x48022c94
 8003500:	58025408 	.word	0x58025408
 8003504:	5802541c 	.word	0x5802541c
 8003508:	58025430 	.word	0x58025430
 800350c:	58025444 	.word	0x58025444
 8003510:	58025458 	.word	0x58025458
 8003514:	5802546c 	.word	0x5802546c
 8003518:	58025480 	.word	0x58025480
 800351c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 81d5 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003532:	e1cf      	b.n	80038d4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d160      	bne.n	8003600 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7f      	ldr	r2, [pc, #508]	@ (8003740 <HAL_DMA_IRQHandler+0xce4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a7d      	ldr	r2, [pc, #500]	@ (8003744 <HAL_DMA_IRQHandler+0xce8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7c      	ldr	r2, [pc, #496]	@ (8003748 <HAL_DMA_IRQHandler+0xcec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7a      	ldr	r2, [pc, #488]	@ (800374c <HAL_DMA_IRQHandler+0xcf0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a79      	ldr	r2, [pc, #484]	@ (8003750 <HAL_DMA_IRQHandler+0xcf4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a77      	ldr	r2, [pc, #476]	@ (8003754 <HAL_DMA_IRQHandler+0xcf8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a76      	ldr	r2, [pc, #472]	@ (8003758 <HAL_DMA_IRQHandler+0xcfc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a74      	ldr	r2, [pc, #464]	@ (800375c <HAL_DMA_IRQHandler+0xd00>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a73      	ldr	r2, [pc, #460]	@ (8003760 <HAL_DMA_IRQHandler+0xd04>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a71      	ldr	r2, [pc, #452]	@ (8003764 <HAL_DMA_IRQHandler+0xd08>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a70      	ldr	r2, [pc, #448]	@ (8003768 <HAL_DMA_IRQHandler+0xd0c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	@ (800376c <HAL_DMA_IRQHandler+0xd10>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003770 <HAL_DMA_IRQHandler+0xd14>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003774 <HAL_DMA_IRQHandler+0xd18>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003778 <HAL_DMA_IRQHandler+0xd1c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_IRQHandler+0xb82>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a68      	ldr	r2, [pc, #416]	@ (800377c <HAL_DMA_IRQHandler+0xd20>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <HAL_DMA_IRQHandler+0xb94>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e007      	b.n	8003600 <HAL_DMA_IRQHandler+0xba4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8165 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003612:	e15f      	b.n	80038d4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2202      	movs	r2, #2
 800361e:	409a      	lsls	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80c5 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xd58>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80bf 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2202      	movs	r2, #2
 8003640:	409a      	lsls	r2, r3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d018      	beq.n	8003682 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 813a 	beq.w	80038d8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800366c:	e134      	b.n	80038d8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8130 	beq.w	80038d8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003680:	e12a      	b.n	80038d8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 8089 	bne.w	80037a0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <HAL_DMA_IRQHandler+0xce4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04a      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a29      	ldr	r2, [pc, #164]	@ (8003744 <HAL_DMA_IRQHandler+0xce8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d045      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a28      	ldr	r2, [pc, #160]	@ (8003748 <HAL_DMA_IRQHandler+0xcec>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a26      	ldr	r2, [pc, #152]	@ (800374c <HAL_DMA_IRQHandler+0xcf0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03b      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <HAL_DMA_IRQHandler+0xcf4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d036      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a23      	ldr	r2, [pc, #140]	@ (8003754 <HAL_DMA_IRQHandler+0xcf8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a22      	ldr	r2, [pc, #136]	@ (8003758 <HAL_DMA_IRQHandler+0xcfc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a20      	ldr	r2, [pc, #128]	@ (800375c <HAL_DMA_IRQHandler+0xd00>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003760 <HAL_DMA_IRQHandler+0xd04>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_DMA_IRQHandler+0xd08>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01d      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003768 <HAL_DMA_IRQHandler+0xd0c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1a      	ldr	r2, [pc, #104]	@ (800376c <HAL_DMA_IRQHandler+0xd10>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_DMA_IRQHandler+0xd14>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <HAL_DMA_IRQHandler+0xd18>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <HAL_DMA_IRQHandler+0xd1c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_DMA_IRQHandler+0xcd2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a14      	ldr	r2, [pc, #80]	@ (800377c <HAL_DMA_IRQHandler+0xd20>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d128      	bne.n	8003780 <HAL_DMA_IRQHandler+0xd24>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0214 	bic.w	r2, r2, #20
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e027      	b.n	8003790 <HAL_DMA_IRQHandler+0xd34>
 8003740:	40020010 	.word	0x40020010
 8003744:	40020028 	.word	0x40020028
 8003748:	40020040 	.word	0x40020040
 800374c:	40020058 	.word	0x40020058
 8003750:	40020070 	.word	0x40020070
 8003754:	40020088 	.word	0x40020088
 8003758:	400200a0 	.word	0x400200a0
 800375c:	400200b8 	.word	0x400200b8
 8003760:	40020410 	.word	0x40020410
 8003764:	40020428 	.word	0x40020428
 8003768:	40020440 	.word	0x40020440
 800376c:	40020458 	.word	0x40020458
 8003770:	40020470 	.word	0x40020470
 8003774:	40020488 	.word	0x40020488
 8003778:	400204a0 	.word	0x400204a0
 800377c:	400204b8 	.word	0x400204b8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020a 	bic.w	r2, r2, #10
 800378e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8097 	beq.w	80038d8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b2:	e091      	b.n	80038d8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2208      	movs	r2, #8
 80037be:	409a      	lsls	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8088 	beq.w	80038da <HAL_DMA_IRQHandler+0xe7e>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8082 	beq.w	80038da <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a41      	ldr	r2, [pc, #260]	@ (80038e0 <HAL_DMA_IRQHandler+0xe84>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d04a      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a3f      	ldr	r2, [pc, #252]	@ (80038e4 <HAL_DMA_IRQHandler+0xe88>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d045      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a3e      	ldr	r2, [pc, #248]	@ (80038e8 <HAL_DMA_IRQHandler+0xe8c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d040      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3c      	ldr	r2, [pc, #240]	@ (80038ec <HAL_DMA_IRQHandler+0xe90>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d03b      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3b      	ldr	r2, [pc, #236]	@ (80038f0 <HAL_DMA_IRQHandler+0xe94>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d036      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a39      	ldr	r2, [pc, #228]	@ (80038f4 <HAL_DMA_IRQHandler+0xe98>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <HAL_DMA_IRQHandler+0xe9c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d02c      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a36      	ldr	r2, [pc, #216]	@ (80038fc <HAL_DMA_IRQHandler+0xea0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d027      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a35      	ldr	r2, [pc, #212]	@ (8003900 <HAL_DMA_IRQHandler+0xea4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a33      	ldr	r2, [pc, #204]	@ (8003904 <HAL_DMA_IRQHandler+0xea8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a32      	ldr	r2, [pc, #200]	@ (8003908 <HAL_DMA_IRQHandler+0xeac>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a30      	ldr	r2, [pc, #192]	@ (800390c <HAL_DMA_IRQHandler+0xeb0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2f      	ldr	r2, [pc, #188]	@ (8003910 <HAL_DMA_IRQHandler+0xeb4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2d      	ldr	r2, [pc, #180]	@ (8003914 <HAL_DMA_IRQHandler+0xeb8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <HAL_DMA_IRQHandler+0xebc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_DMA_IRQHandler+0xe1a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2a      	ldr	r2, [pc, #168]	@ (800391c <HAL_DMA_IRQHandler+0xec0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0xe2c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 021c 	bic.w	r2, r2, #28
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <HAL_DMA_IRQHandler+0xe3c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 020e 	bic.w	r2, r2, #14
 8003896:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2201      	movs	r2, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e004      	b.n	80038da <HAL_DMA_IRQHandler+0xe7e>
          return;
 80038d0:	bf00      	nop
 80038d2:	e002      	b.n	80038da <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d4:	bf00      	nop
 80038d6:	e000      	b.n	80038da <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038da:	3728      	adds	r7, #40	@ 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40020010 	.word	0x40020010
 80038e4:	40020028 	.word	0x40020028
 80038e8:	40020040 	.word	0x40020040
 80038ec:	40020058 	.word	0x40020058
 80038f0:	40020070 	.word	0x40020070
 80038f4:	40020088 	.word	0x40020088
 80038f8:	400200a0 	.word	0x400200a0
 80038fc:	400200b8 	.word	0x400200b8
 8003900:	40020410 	.word	0x40020410
 8003904:	40020428 	.word	0x40020428
 8003908:	40020440 	.word	0x40020440
 800390c:	40020458 	.word	0x40020458
 8003910:	40020470 	.word	0x40020470
 8003914:	40020488 	.word	0x40020488
 8003918:	400204a0 	.word	0x400204a0
 800391c:	400204b8 	.word	0x400204b8

08003920 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800392e:	b2db      	uxtb	r3, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7f      	ldr	r2, [pc, #508]	@ (8003b70 <DMA_SetConfig+0x21c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d072      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b74 <DMA_SetConfig+0x220>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d06d      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7c      	ldr	r2, [pc, #496]	@ (8003b78 <DMA_SetConfig+0x224>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d068      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7a      	ldr	r2, [pc, #488]	@ (8003b7c <DMA_SetConfig+0x228>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d063      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a79      	ldr	r2, [pc, #484]	@ (8003b80 <DMA_SetConfig+0x22c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d05e      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a77      	ldr	r2, [pc, #476]	@ (8003b84 <DMA_SetConfig+0x230>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d059      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a76      	ldr	r2, [pc, #472]	@ (8003b88 <DMA_SetConfig+0x234>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d054      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a74      	ldr	r2, [pc, #464]	@ (8003b8c <DMA_SetConfig+0x238>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d04f      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a73      	ldr	r2, [pc, #460]	@ (8003b90 <DMA_SetConfig+0x23c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a71      	ldr	r2, [pc, #452]	@ (8003b94 <DMA_SetConfig+0x240>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a70      	ldr	r2, [pc, #448]	@ (8003b98 <DMA_SetConfig+0x244>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <DMA_SetConfig+0x248>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6d      	ldr	r2, [pc, #436]	@ (8003ba0 <DMA_SetConfig+0x24c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba4 <DMA_SetConfig+0x250>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba8 <DMA_SetConfig+0x254>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <DMA_SetConfig+0x258>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a67      	ldr	r2, [pc, #412]	@ (8003bb0 <DMA_SetConfig+0x25c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <DMA_SetConfig+0x260>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a64      	ldr	r2, [pc, #400]	@ (8003bb8 <DMA_SetConfig+0x264>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a62      	ldr	r2, [pc, #392]	@ (8003bbc <DMA_SetConfig+0x268>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a61      	ldr	r2, [pc, #388]	@ (8003bc0 <DMA_SetConfig+0x26c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc4 <DMA_SetConfig+0x270>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc8 <DMA_SetConfig+0x274>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5c      	ldr	r2, [pc, #368]	@ (8003bcc <DMA_SetConfig+0x278>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <DMA_SetConfig+0x10e>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <DMA_SetConfig+0x110>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a39      	ldr	r2, [pc, #228]	@ (8003b70 <DMA_SetConfig+0x21c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d04a      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a38      	ldr	r2, [pc, #224]	@ (8003b74 <DMA_SetConfig+0x220>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d045      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a36      	ldr	r2, [pc, #216]	@ (8003b78 <DMA_SetConfig+0x224>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d040      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a35      	ldr	r2, [pc, #212]	@ (8003b7c <DMA_SetConfig+0x228>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d03b      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a33      	ldr	r2, [pc, #204]	@ (8003b80 <DMA_SetConfig+0x22c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d036      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a32      	ldr	r2, [pc, #200]	@ (8003b84 <DMA_SetConfig+0x230>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d031      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	@ (8003b88 <DMA_SetConfig+0x234>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02c      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2f      	ldr	r2, [pc, #188]	@ (8003b8c <DMA_SetConfig+0x238>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d027      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <DMA_SetConfig+0x23c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d022      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <DMA_SetConfig+0x240>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d01d      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <DMA_SetConfig+0x244>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a29      	ldr	r2, [pc, #164]	@ (8003b9c <DMA_SetConfig+0x248>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a27      	ldr	r2, [pc, #156]	@ (8003ba0 <DMA_SetConfig+0x24c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ba4 <DMA_SetConfig+0x250>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a24      	ldr	r2, [pc, #144]	@ (8003ba8 <DMA_SetConfig+0x254>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <DMA_SetConfig+0x258>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <DMA_SetConfig+0x1d4>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <DMA_SetConfig+0x1d6>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d059      	beq.n	8003be2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	223f      	movs	r2, #63	@ 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d138      	bne.n	8003bd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b6e:	e0ae      	b.n	8003cce <DMA_SetConfig+0x37a>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	58025408 	.word	0x58025408
 8003bb4:	5802541c 	.word	0x5802541c
 8003bb8:	58025430 	.word	0x58025430
 8003bbc:	58025444 	.word	0x58025444
 8003bc0:	58025458 	.word	0x58025458
 8003bc4:	5802546c 	.word	0x5802546c
 8003bc8:	58025480 	.word	0x58025480
 8003bcc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
}
 8003be0:	e075      	b.n	8003cce <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3d      	ldr	r2, [pc, #244]	@ (8003cdc <DMA_SetConfig+0x388>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d04a      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce0 <DMA_SetConfig+0x38c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d045      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <DMA_SetConfig+0x390>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d040      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <DMA_SetConfig+0x394>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d03b      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a37      	ldr	r2, [pc, #220]	@ (8003cec <DMA_SetConfig+0x398>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d036      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a35      	ldr	r2, [pc, #212]	@ (8003cf0 <DMA_SetConfig+0x39c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d031      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a34      	ldr	r2, [pc, #208]	@ (8003cf4 <DMA_SetConfig+0x3a0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d02c      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <DMA_SetConfig+0x3a4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d027      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a31      	ldr	r2, [pc, #196]	@ (8003cfc <DMA_SetConfig+0x3a8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a2f      	ldr	r2, [pc, #188]	@ (8003d00 <DMA_SetConfig+0x3ac>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01d      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d04 <DMA_SetConfig+0x3b0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2c      	ldr	r2, [pc, #176]	@ (8003d08 <DMA_SetConfig+0x3b4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d0c <DMA_SetConfig+0x3b8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a29      	ldr	r2, [pc, #164]	@ (8003d10 <DMA_SetConfig+0x3bc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a28      	ldr	r2, [pc, #160]	@ (8003d14 <DMA_SetConfig+0x3c0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <DMA_SetConfig+0x32e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	@ (8003d18 <DMA_SetConfig+0x3c4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <DMA_SetConfig+0x332>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <DMA_SetConfig+0x334>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d108      	bne.n	8003cbe <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	60da      	str	r2, [r3, #12]
}
 8003cbc:	e007      	b.n	8003cce <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	48022c08 	.word	0x48022c08
 8003ce0:	48022c1c 	.word	0x48022c1c
 8003ce4:	48022c30 	.word	0x48022c30
 8003ce8:	48022c44 	.word	0x48022c44
 8003cec:	48022c58 	.word	0x48022c58
 8003cf0:	48022c6c 	.word	0x48022c6c
 8003cf4:	48022c80 	.word	0x48022c80
 8003cf8:	48022c94 	.word	0x48022c94
 8003cfc:	58025408 	.word	0x58025408
 8003d00:	5802541c 	.word	0x5802541c
 8003d04:	58025430 	.word	0x58025430
 8003d08:	58025444 	.word	0x58025444
 8003d0c:	58025458 	.word	0x58025458
 8003d10:	5802546c 	.word	0x5802546c
 8003d14:	58025480 	.word	0x58025480
 8003d18:	58025494 	.word	0x58025494

08003d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a42      	ldr	r2, [pc, #264]	@ (8003e34 <DMA_CalcBaseAndBitshift+0x118>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a41      	ldr	r2, [pc, #260]	@ (8003e38 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e3c <DMA_CalcBaseAndBitshift+0x120>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a3e      	ldr	r2, [pc, #248]	@ (8003e40 <DMA_CalcBaseAndBitshift+0x124>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a3c      	ldr	r2, [pc, #240]	@ (8003e44 <DMA_CalcBaseAndBitshift+0x128>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e48 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a39      	ldr	r2, [pc, #228]	@ (8003e4c <DMA_CalcBaseAndBitshift+0x130>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a38      	ldr	r2, [pc, #224]	@ (8003e50 <DMA_CalcBaseAndBitshift+0x134>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a36      	ldr	r2, [pc, #216]	@ (8003e54 <DMA_CalcBaseAndBitshift+0x138>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a35      	ldr	r2, [pc, #212]	@ (8003e58 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a33      	ldr	r2, [pc, #204]	@ (8003e5c <DMA_CalcBaseAndBitshift+0x140>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a32      	ldr	r2, [pc, #200]	@ (8003e60 <DMA_CalcBaseAndBitshift+0x144>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a30      	ldr	r2, [pc, #192]	@ (8003e64 <DMA_CalcBaseAndBitshift+0x148>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2f      	ldr	r2, [pc, #188]	@ (8003e68 <DMA_CalcBaseAndBitshift+0x14c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e6c <DMA_CalcBaseAndBitshift+0x150>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8003e70 <DMA_CalcBaseAndBitshift+0x154>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <DMA_CalcBaseAndBitshift+0xac>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <DMA_CalcBaseAndBitshift+0xae>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d024      	beq.n	8003e18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3b10      	subs	r3, #16
 8003dd6:	4a27      	ldr	r2, [pc, #156]	@ (8003e74 <DMA_CalcBaseAndBitshift+0x158>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	4a24      	ldr	r2, [pc, #144]	@ (8003e78 <DMA_CalcBaseAndBitshift+0x15c>)
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d908      	bls.n	8003e08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <DMA_CalcBaseAndBitshift+0x160>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	1d1a      	adds	r2, r3, #4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e06:	e00d      	b.n	8003e24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <DMA_CalcBaseAndBitshift+0x160>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e16:	e005      	b.n	8003e24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
 8003e74:	aaaaaaab 	.word	0xaaaaaaab
 8003e78:	0800efa8 	.word	0x0800efa8
 8003e7c:	fffffc00 	.word	0xfffffc00

08003e80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d120      	bne.n	8003ed6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d858      	bhi.n	8003f4e <DMA_CheckFifoParam+0xce>
 8003e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <DMA_CheckFifoParam+0x24>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003eb5 	.word	0x08003eb5
 8003ea8:	08003ec7 	.word	0x08003ec7
 8003eac:	08003eb5 	.word	0x08003eb5
 8003eb0:	08003f4f 	.word	0x08003f4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d048      	beq.n	8003f52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ec4:	e045      	b.n	8003f52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ece:	d142      	bne.n	8003f56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ed4:	e03f      	b.n	8003f56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ede:	d123      	bne.n	8003f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d838      	bhi.n	8003f5a <DMA_CheckFifoParam+0xda>
 8003ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef0 <DMA_CheckFifoParam+0x70>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f07 	.word	0x08003f07
 8003ef8:	08003f01 	.word	0x08003f01
 8003efc:	08003f19 	.word	0x08003f19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
        break;
 8003f04:	e030      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d025      	beq.n	8003f5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f16:	e022      	b.n	8003f5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f20:	d11f      	bne.n	8003f62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f26:	e01c      	b.n	8003f62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d902      	bls.n	8003f36 <DMA_CheckFifoParam+0xb6>
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d003      	beq.n	8003f3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f34:	e018      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
        break;
 8003f3a:	e015      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8003f4c:	e00b      	b.n	8003f66 <DMA_CheckFifoParam+0xe6>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e00a      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        break;
 8003f52:	bf00      	nop
 8003f54:	e008      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e006      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e004      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
        break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <DMA_CheckFifoParam+0xe8>
    break;
 8003f66:	bf00      	nop
    }
  }

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop

08003f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a38      	ldr	r2, [pc, #224]	@ (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d022      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a36      	ldr	r2, [pc, #216]	@ (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01d      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a35      	ldr	r2, [pc, #212]	@ (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d018      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a33      	ldr	r2, [pc, #204]	@ (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a32      	ldr	r2, [pc, #200]	@ (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a30      	ldr	r2, [pc, #192]	@ (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01a      	beq.n	8004016 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	3b08      	subs	r3, #8
 8003fe8:	4a28      	ldr	r2, [pc, #160]	@ (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4b26      	ldr	r3, [pc, #152]	@ (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a24      	ldr	r2, [pc, #144]	@ (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004004:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004014:	e024      	b.n	8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3b10      	subs	r3, #16
 800401e:	4a1e      	ldr	r2, [pc, #120]	@ (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a1c      	ldr	r2, [pc, #112]	@ (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d806      	bhi.n	800403e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d902      	bls.n	800403e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3308      	adds	r3, #8
 800403c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a16      	ldr	r2, [pc, #88]	@ (80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004050:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	58025408 	.word	0x58025408
 8004070:	5802541c 	.word	0x5802541c
 8004074:	58025430 	.word	0x58025430
 8004078:	58025444 	.word	0x58025444
 800407c:	58025458 	.word	0x58025458
 8004080:	5802546c 	.word	0x5802546c
 8004084:	58025480 	.word	0x58025480
 8004088:	58025494 	.word	0x58025494
 800408c:	cccccccd 	.word	0xcccccccd
 8004090:	16009600 	.word	0x16009600
 8004094:	58025880 	.word	0x58025880
 8004098:	aaaaaaab 	.word	0xaaaaaaab
 800409c:	400204b8 	.word	0x400204b8
 80040a0:	4002040f 	.word	0x4002040f
 80040a4:	10008200 	.word	0x10008200
 80040a8:	40020880 	.word	0x40020880

080040ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04a      	beq.n	8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d847      	bhi.n	8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a25      	ldr	r2, [pc, #148]	@ (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a24      	ldr	r2, [pc, #144]	@ (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a22      	ldr	r2, [pc, #136]	@ (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1c      	ldr	r2, [pc, #112]	@ (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1b      	ldr	r2, [pc, #108]	@ (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4b17      	ldr	r3, [pc, #92]	@ (8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004134:	671a      	str	r2, [r3, #112]	@ 0x70
 8004136:	e009      	b.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4b14      	ldr	r3, [pc, #80]	@ (800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800414a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	2201      	movs	r2, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	58025408 	.word	0x58025408
 8004168:	5802541c 	.word	0x5802541c
 800416c:	58025430 	.word	0x58025430
 8004170:	58025444 	.word	0x58025444
 8004174:	58025458 	.word	0x58025458
 8004178:	5802546c 	.word	0x5802546c
 800417c:	58025480 	.word	0x58025480
 8004180:	58025494 	.word	0x58025494
 8004184:	1600963f 	.word	0x1600963f
 8004188:	58025940 	.word	0x58025940
 800418c:	1000823f 	.word	0x1000823f
 8004190:	40020940 	.word	0x40020940

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	@ 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041a2:	4b89      	ldr	r3, [pc, #548]	@ (80043c8 <HAL_GPIO_Init+0x234>)
 80041a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041a6:	e194      	b.n	80044d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8186 	beq.w	80044cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d005      	beq.n	80041d8 <HAL_GPIO_Init+0x44>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d130      	bne.n	800423a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420e:	2201      	movs	r2, #1
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 0201 	and.w	r2, r3, #1
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b03      	cmp	r3, #3
 8004244:	d017      	beq.n	8004276 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2203      	movs	r2, #3
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d123      	bne.n	80042ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	220f      	movs	r2, #15
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	08da      	lsrs	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3208      	adds	r2, #8
 80042c4:	69b9      	ldr	r1, [r7, #24]
 80042c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 0203 	and.w	r2, r3, #3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80e0 	beq.w	80044cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430c:	4b2f      	ldr	r3, [pc, #188]	@ (80043cc <HAL_GPIO_Init+0x238>)
 800430e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004312:	4a2e      	ldr	r2, [pc, #184]	@ (80043cc <HAL_GPIO_Init+0x238>)
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800431c:	4b2b      	ldr	r3, [pc, #172]	@ (80043cc <HAL_GPIO_Init+0x238>)
 800431e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800432a:	4a29      	ldr	r2, [pc, #164]	@ (80043d0 <HAL_GPIO_Init+0x23c>)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	220f      	movs	r2, #15
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a20      	ldr	r2, [pc, #128]	@ (80043d4 <HAL_GPIO_Init+0x240>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d052      	beq.n	80043fc <HAL_GPIO_Init+0x268>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1f      	ldr	r2, [pc, #124]	@ (80043d8 <HAL_GPIO_Init+0x244>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_GPIO_Init+0x22e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_GPIO_Init+0x248>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d02b      	beq.n	80043be <HAL_GPIO_Init+0x22a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <HAL_GPIO_Init+0x24c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d025      	beq.n	80043ba <HAL_GPIO_Init+0x226>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <HAL_GPIO_Init+0x250>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01f      	beq.n	80043b6 <HAL_GPIO_Init+0x222>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <HAL_GPIO_Init+0x254>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d019      	beq.n	80043b2 <HAL_GPIO_Init+0x21e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <HAL_GPIO_Init+0x258>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <HAL_GPIO_Init+0x21a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a19      	ldr	r2, [pc, #100]	@ (80043f0 <HAL_GPIO_Init+0x25c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00d      	beq.n	80043aa <HAL_GPIO_Init+0x216>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a18      	ldr	r2, [pc, #96]	@ (80043f4 <HAL_GPIO_Init+0x260>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <HAL_GPIO_Init+0x212>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <HAL_GPIO_Init+0x264>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <HAL_GPIO_Init+0x20e>
 800439e:	2309      	movs	r3, #9
 80043a0:	e02d      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043a2:	230a      	movs	r3, #10
 80043a4:	e02b      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043a6:	2308      	movs	r3, #8
 80043a8:	e029      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043aa:	2307      	movs	r3, #7
 80043ac:	e027      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043ae:	2306      	movs	r3, #6
 80043b0:	e025      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043b2:	2305      	movs	r3, #5
 80043b4:	e023      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e021      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043ba:	2303      	movs	r3, #3
 80043bc:	e01f      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043be:	2302      	movs	r3, #2
 80043c0:	e01d      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e01b      	b.n	80043fe <HAL_GPIO_Init+0x26a>
 80043c6:	bf00      	nop
 80043c8:	58000080 	.word	0x58000080
 80043cc:	58024400 	.word	0x58024400
 80043d0:	58000400 	.word	0x58000400
 80043d4:	58020000 	.word	0x58020000
 80043d8:	58020400 	.word	0x58020400
 80043dc:	58020800 	.word	0x58020800
 80043e0:	58020c00 	.word	0x58020c00
 80043e4:	58021000 	.word	0x58021000
 80043e8:	58021400 	.word	0x58021400
 80043ec:	58021800 	.word	0x58021800
 80043f0:	58021c00 	.word	0x58021c00
 80043f4:	58022000 	.word	0x58022000
 80043f8:	58022400 	.word	0x58022400
 80043fc:	2300      	movs	r3, #0
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	f002 0203 	and.w	r2, r2, #3
 8004404:	0092      	lsls	r2, r2, #2
 8004406:	4093      	lsls	r3, r2
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800440e:	4938      	ldr	r1, [pc, #224]	@ (80044f0 <HAL_GPIO_Init+0x35c>)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004442:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004470:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f ae63 	bne.w	80041a8 <HAL_GPIO_Init+0x14>
  }
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	3724      	adds	r7, #36	@ 0x24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	58000400 	.word	0x58000400

080044f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004502:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc fa18 	bl	8000950 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e08b      	b.n	8004652 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc f922 	bl	8000798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	@ 0x24
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d107      	bne.n	80045a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	e006      	b.n	80045b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d108      	bne.n	80045ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c6:	605a      	str	r2, [r3, #4]
 80045c8:	e007      	b.n	80045da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <HAL_I2C_Init+0x134>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1a      	ldr	r2, [r3, #32]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	02008000 	.word	0x02008000

08004660 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	@ 0x28
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	461a      	mov	r2, r3
 800466c:	460b      	mov	r3, r1
 800466e:	817b      	strh	r3, [r7, #10]
 8004670:	4613      	mov	r3, r2
 8004672:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	f040 80ef 	bne.w	8004864 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004694:	d101      	bne.n	800469a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
 8004698:	e0e5      	b.n	8004866 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e0de      	b.n	8004866 <HAL_I2C_Master_Transmit_DMA+0x206>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2221      	movs	r2, #33	@ 0x21
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2210      	movs	r2, #16
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	893a      	ldrh	r2, [r7, #8]
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a66      	ldr	r2, [pc, #408]	@ (8004870 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80046d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a66      	ldr	r2, [pc, #408]	@ (8004874 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80046dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2bff      	cmp	r3, #255	@ 0xff
 80046e6:	d906      	bls.n	80046f6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	22ff      	movs	r2, #255	@ 0xff
 80046ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80046ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e007      	b.n	8004706 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004700:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004704:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01a      	beq.n	8004744 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d074      	beq.n	8004836 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d022      	beq.n	800479a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	4a47      	ldr	r2, [pc, #284]	@ (8004878 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800475a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	4a46      	ldr	r2, [pc, #280]	@ (800487c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004762:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	2200      	movs	r2, #0
 8004772:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004784:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800478a:	f7fd f999 	bl	8001ac0 <HAL_DMA_Start_IT>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d13a      	bne.n	800480e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004798:	e013      	b.n	80047c2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e051      	b.n	8004866 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	8979      	ldrh	r1, [r7, #10]
 80047ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004880 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f001 feb9 	bl	800654c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80047f4:	2110      	movs	r1, #16
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f001 feda 	bl	80065b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e028      	b.n	8004860 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f043 0210 	orr.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e017      	b.n	8004866 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	8979      	ldrh	r1, [r7, #10]
 8004842:	4b0f      	ldr	r3, [pc, #60]	@ (8004880 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f001 fe7e 	bl	800654c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004858:	2101      	movs	r1, #1
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f001 fea8 	bl	80065b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	ffff0000 	.word	0xffff0000
 8004874:	08004e9f 	.word	0x08004e9f
 8004878:	08006207 	.word	0x08006207
 800487c:	0800629d 	.word	0x0800629d
 8004880:	80002000 	.word	0x80002000
 8004884:	08004a5f 	.word	0x08004a5f

08004888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
  }
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00f      	beq.n	8004928 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f043 0208 	orr.w	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004926:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00f      	beq.n	8004952 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004940:	f043 0202 	orr.w	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004950:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 030b 	and.w	r3, r3, #11
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 fb13 	bl	8005f90 <I2C_ITError>
  }
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
 80049ce:	4613      	mov	r3, r2
 80049d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a50:	b2db      	uxtb	r3, r3
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <I2C_Master_ISR_IT+0x1e>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e113      	b.n	8004ca4 <I2C_Master_ISR_IT+0x246>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f001 fb86 	bl	80061be <I2C_Flush_TXDR>
 8004ab2:	e0e4      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d022      	beq.n	8004b04 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01d      	beq.n	8004b04 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0304 	bic.w	r3, r3, #4
 8004ace:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b02:	e0bc      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d128      	bne.n	8004b60 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d023      	beq.n	8004b60 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01e      	beq.n	8004b60 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a8 	beq.w	8004c7e <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004b5e:	e08e      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d05c      	beq.n	8004c24 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d057      	beq.n	8004c24 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d040      	beq.n	8004c00 <I2C_Master_ISR_IT+0x1a2>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d13c      	bne.n	8004c00 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b92:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2bff      	cmp	r3, #255	@ 0xff
 8004b9c:	d90e      	bls.n	8004bbc <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	@ 0xff
 8004ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	8a79      	ldrh	r1, [r7, #18]
 8004bac:	2300      	movs	r3, #0
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 fcc9 	bl	800654c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bba:	e032      	b.n	8004c22 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bce:	d00b      	beq.n	8004be8 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004bda:	8a79      	ldrh	r1, [r7, #18]
 8004bdc:	2000      	movs	r0, #0
 8004bde:	9000      	str	r0, [sp, #0]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f001 fcb3 	bl	800654c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004be6:	e01c      	b.n	8004c22 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8a79      	ldrh	r1, [r7, #18]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f001 fca7 	bl	800654c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bfe:	e010      	b.n	8004c22 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c0e:	d003      	beq.n	8004c18 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fdb3 	bl	800577c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c16:	e032      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c18:	2140      	movs	r1, #64	@ 0x40
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f001 f9b8 	bl	8005f90 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c20:	e02d      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
 8004c22:	e02c      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d027      	beq.n	8004c7e <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d022      	beq.n	8004c7e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d119      	bne.n	8004c76 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c50:	d015      	beq.n	8004c7e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c5a:	d108      	bne.n	8004c6e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	e007      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fd84 	bl	800577c <I2C_ITMasterSeqCplt>
 8004c74:	e003      	b.n	8004c7e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c76:	2140      	movs	r1, #64	@ 0x40
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f001 f989 	bl	8005f90 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004c92:	6979      	ldr	r1, [r7, #20]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fe0b 	bl	80058b0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <I2C_Slave_ISR_IT+0x24>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0e2      	b.n	8004e96 <I2C_Slave_ISR_IT+0x1ea>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fea6 	bl	8005a40 <I2C_ITSlaveCplt>
 8004cf4:	e0ca      	b.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d04b      	beq.n	8004d98 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d046      	beq.n	8004d98 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d128      	bne.n	8004d66 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b28      	cmp	r3, #40	@ 0x28
 8004d1e:	d108      	bne.n	8004d32 <I2C_Slave_ISR_IT+0x86>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d26:	d104      	bne.n	8004d32 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d28:	6939      	ldr	r1, [r7, #16]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f001 f8dc 	bl	8005ee8 <I2C_ITListenCplt>
 8004d30:	e031      	b.n	8004d96 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b29      	cmp	r3, #41	@ 0x29
 8004d3c:	d10e      	bne.n	8004d5c <I2C_Slave_ISR_IT+0xb0>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d44:	d00a      	beq.n	8004d5c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f001 fa35 	bl	80061be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fd4e 	bl	80057f6 <I2C_ITSlaveSeqCplt>
 8004d5a:	e01c      	b.n	8004d96 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2210      	movs	r2, #16
 8004d62:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004d64:	e08f      	b.n	8004e86 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <I2C_Slave_ISR_IT+0xdc>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d86:	d17e      	bne.n	8004e86 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f001 f8fe 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d94:	e077      	b.n	8004e86 <I2C_Slave_ISR_IT+0x1da>
 8004d96:	e076      	b.n	8004e86 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02f      	beq.n	8004e02 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02a      	beq.n	8004e02 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d14b      	bne.n	8004e8a <I2C_Slave_ISR_IT+0x1de>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df8:	d047      	beq.n	8004e8a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fcfb 	bl	80057f6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004e00:	e043      	b.n	8004e8a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004e16:	6939      	ldr	r1, [r7, #16]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fc2b 	bl	8005674 <I2C_ITAddrCplt>
 8004e1e:	e035      	b.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d030      	beq.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02b      	beq.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	781a      	ldrb	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e6e:	e00d      	b.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e76:	d002      	beq.n	8004e7e <I2C_Slave_ISR_IT+0x1d2>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fcb9 	bl	80057f6 <I2C_ITSlaveSeqCplt>
 8004e84:	e002      	b.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004e8a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	af02      	add	r7, sp, #8
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <I2C_Master_ISR_DMA+0x1a>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e0d9      	b.n	800506c <I2C_Master_ISR_DMA+0x1ce>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee0:	f043 0204 	orr.w	r2, r3, #4
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004ee8:	2120      	movs	r1, #32
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f001 fb60 	bl	80065b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f001 f964 	bl	80061be <I2C_Flush_TXDR>
 8004ef6:	e0b4      	b.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d071      	beq.n	8004fe6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d06c      	beq.n	8004fe6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f1a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d04e      	beq.n	8004fc4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f32:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2bff      	cmp	r3, #255	@ 0xff
 8004f3c:	d906      	bls.n	8004f4c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	22ff      	movs	r2, #255	@ 0xff
 8004f42:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e010      	b.n	8004f6e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f5e:	d003      	beq.n	8004f68 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e002      	b.n	8004f6e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004f68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f6c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	8a79      	ldrh	r1, [r7, #18]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f001 fae5 	bl	800654c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b22      	cmp	r3, #34	@ 0x22
 8004f9e:	d108      	bne.n	8004fb2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004fb0:	e057      	b.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004fc2:	e04e      	b.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fd2:	d003      	beq.n	8004fdc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fbd1 	bl	800577c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004fda:	e042      	b.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004fdc:	2140      	movs	r1, #64	@ 0x40
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 ffd6 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004fe4:	e03d      	b.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d028      	beq.n	8005042 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d023      	beq.n	8005042 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d119      	bne.n	8005038 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005012:	d025      	beq.n	8005060 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800501c:	d108      	bne.n	8005030 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800502e:	e017      	b.n	8005060 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fba3 	bl	800577c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005036:	e013      	b.n	8005060 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005038:	2140      	movs	r1, #64	@ 0x40
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 ffa8 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005040:	e00e      	b.n	8005060 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fc29 	bl	80058b0 <I2C_ITMasterCplt>
 800505e:	e000      	b.n	8005062 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005060:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005080:	4b8d      	ldr	r3, [pc, #564]	@ (80052b8 <I2C_Mem_ISR_DMA+0x244>)
 8005082:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <I2C_Mem_ISR_DMA+0x1e>
 800508e:	2302      	movs	r3, #2
 8005090:	e10e      	b.n	80052b0 <I2C_Mem_ISR_DMA+0x23c>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d016      	beq.n	80050d2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2210      	movs	r2, #16
 80050b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80050c2:	2120      	movs	r1, #32
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f001 fa73 	bl	80065b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 f877 	bl	80061be <I2C_Flush_TXDR>
 80050d0:	e0e9      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80050f8:	e0d5      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05f      	beq.n	80051c4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800510a:	2b00      	cmp	r3, #0
 800510c:	d05a      	beq.n	80051c4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800510e:	2101      	movs	r1, #1
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f001 fad1 	bl	80066b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005116:	2110      	movs	r1, #16
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f001 fa49 	bl	80065b0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d048      	beq.n	80051ba <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2bff      	cmp	r3, #255	@ 0xff
 8005130:	d910      	bls.n	8005154 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	22ff      	movs	r2, #255	@ 0xff
 8005136:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513c:	b299      	uxth	r1, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005142:	b2da      	uxtb	r2, r3
 8005144:	2300      	movs	r3, #0
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f001 f9fd 	bl	800654c <I2C_TransferConfig>
 8005152:	e011      	b.n	8005178 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005162:	b299      	uxth	r1, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005168:	b2da      	uxtb	r2, r3
 800516a:	2300      	movs	r3, #0
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f001 f9ea 	bl	800654c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b22      	cmp	r3, #34	@ 0x22
 8005194:	d108      	bne.n	80051a8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80051a6:	e07e      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80051b8:	e075      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80051ba:	2140      	movs	r1, #64	@ 0x40
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fee7 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80051c2:	e070      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d05d      	beq.n	800528a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d058      	beq.n	800528a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051d8:	2101      	movs	r1, #1
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f001 fa6c 	bl	80066b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80051e0:	2110      	movs	r1, #16
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 f9e4 	bl	80065b0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b22      	cmp	r3, #34	@ 0x22
 80051f2:	d101      	bne.n	80051f8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80051f4:	4b31      	ldr	r3, [pc, #196]	@ (80052bc <I2C_Mem_ISR_DMA+0x248>)
 80051f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2bff      	cmp	r3, #255	@ 0xff
 8005200:	d910      	bls.n	8005224 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	@ 0xff
 8005206:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520c:	b299      	uxth	r1, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005212:	b2da      	uxtb	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f001 f995 	bl	800654c <I2C_TransferConfig>
 8005222:	e011      	b.n	8005248 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005232:	b299      	uxth	r1, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005238:	b2da      	uxtb	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f001 f982 	bl	800654c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b22      	cmp	r3, #34	@ 0x22
 8005264:	d108      	bne.n	8005278 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005274:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005276:	e016      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005286:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005288:	e00d      	b.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fb05 	bl	80058b0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	80002000 	.word	0x80002000
 80052bc:	80002400 	.word	0x80002400

080052c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <I2C_Slave_ISR_DMA+0x24>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e1c2      	b.n	800566a <I2C_Slave_ISR_DMA+0x3aa>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fb9c 	bl	8005a40 <I2C_ITSlaveCplt>
 8005308:	e1aa      	b.n	8005660 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8197 	beq.w	8005644 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8191 	beq.w	8005644 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 817f 	beq.w	8005636 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d07b      	beq.n	8005438 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d076      	beq.n	8005438 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a74      	ldr	r2, [pc, #464]	@ (8005524 <I2C_Slave_ISR_DMA+0x264>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d059      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a72      	ldr	r2, [pc, #456]	@ (8005528 <I2C_Slave_ISR_DMA+0x268>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d053      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a70      	ldr	r2, [pc, #448]	@ (800552c <I2C_Slave_ISR_DMA+0x26c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d04d      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6e      	ldr	r2, [pc, #440]	@ (8005530 <I2C_Slave_ISR_DMA+0x270>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d047      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6c      	ldr	r2, [pc, #432]	@ (8005534 <I2C_Slave_ISR_DMA+0x274>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d041      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6a      	ldr	r2, [pc, #424]	@ (8005538 <I2C_Slave_ISR_DMA+0x278>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a68      	ldr	r2, [pc, #416]	@ (800553c <I2C_Slave_ISR_DMA+0x27c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d035      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a66      	ldr	r2, [pc, #408]	@ (8005540 <I2C_Slave_ISR_DMA+0x280>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d02f      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a64      	ldr	r2, [pc, #400]	@ (8005544 <I2C_Slave_ISR_DMA+0x284>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d029      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a62      	ldr	r2, [pc, #392]	@ (8005548 <I2C_Slave_ISR_DMA+0x288>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d023      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a60      	ldr	r2, [pc, #384]	@ (800554c <I2C_Slave_ISR_DMA+0x28c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5e      	ldr	r2, [pc, #376]	@ (8005550 <I2C_Slave_ISR_DMA+0x290>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d017      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005554 <I2C_Slave_ISR_DMA+0x294>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d011      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005558 <I2C_Slave_ISR_DMA+0x298>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a58      	ldr	r2, [pc, #352]	@ (800555c <I2C_Slave_ISR_DMA+0x29c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d005      	beq.n	800540a <I2C_Slave_ISR_DMA+0x14a>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a56      	ldr	r2, [pc, #344]	@ (8005560 <I2C_Slave_ISR_DMA+0x2a0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d109      	bne.n	800541e <I2C_Slave_ISR_DMA+0x15e>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e008      	b.n	8005430 <I2C_Slave_ISR_DMA+0x170>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8005434:	2301      	movs	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 809e 	beq.w	800557e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8098 	beq.w	800557e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a33      	ldr	r2, [pc, #204]	@ (8005524 <I2C_Slave_ISR_DMA+0x264>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d059      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a31      	ldr	r2, [pc, #196]	@ (8005528 <I2C_Slave_ISR_DMA+0x268>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d053      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2f      	ldr	r2, [pc, #188]	@ (800552c <I2C_Slave_ISR_DMA+0x26c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04d      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2d      	ldr	r2, [pc, #180]	@ (8005530 <I2C_Slave_ISR_DMA+0x270>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d047      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2b      	ldr	r2, [pc, #172]	@ (8005534 <I2C_Slave_ISR_DMA+0x274>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d041      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a29      	ldr	r2, [pc, #164]	@ (8005538 <I2C_Slave_ISR_DMA+0x278>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d03b      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a27      	ldr	r2, [pc, #156]	@ (800553c <I2C_Slave_ISR_DMA+0x27c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d035      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a25      	ldr	r2, [pc, #148]	@ (8005540 <I2C_Slave_ISR_DMA+0x280>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02f      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a23      	ldr	r2, [pc, #140]	@ (8005544 <I2C_Slave_ISR_DMA+0x284>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d029      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a21      	ldr	r2, [pc, #132]	@ (8005548 <I2C_Slave_ISR_DMA+0x288>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d023      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	@ (800554c <I2C_Slave_ISR_DMA+0x28c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01d      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <I2C_Slave_ISR_DMA+0x290>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d017      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <I2C_Slave_ISR_DMA+0x294>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d011      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a19      	ldr	r2, [pc, #100]	@ (8005558 <I2C_Slave_ISR_DMA+0x298>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a17      	ldr	r2, [pc, #92]	@ (800555c <I2C_Slave_ISR_DMA+0x29c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d005      	beq.n	800550e <I2C_Slave_ISR_DMA+0x24e>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <I2C_Slave_ISR_DMA+0x2a0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d12a      	bne.n	8005564 <I2C_Slave_ISR_DMA+0x2a4>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e029      	b.n	8005576 <I2C_Slave_ISR_DMA+0x2b6>
 8005522:	bf00      	nop
 8005524:	40020010 	.word	0x40020010
 8005528:	40020028 	.word	0x40020028
 800552c:	40020040 	.word	0x40020040
 8005530:	40020058 	.word	0x40020058
 8005534:	40020070 	.word	0x40020070
 8005538:	40020088 	.word	0x40020088
 800553c:	400200a0 	.word	0x400200a0
 8005540:	400200b8 	.word	0x400200b8
 8005544:	40020410 	.word	0x40020410
 8005548:	40020428 	.word	0x40020428
 800554c:	40020440 	.word	0x40020440
 8005550:	40020458 	.word	0x40020458
 8005554:	40020470 	.word	0x40020470
 8005558:	40020488 	.word	0x40020488
 800555c:	400204a0 	.word	0x400204a0
 8005560:	400204b8 	.word	0x400204b8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800557a:	2301      	movs	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d128      	bne.n	80055d6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b28      	cmp	r3, #40	@ 0x28
 800558e:	d108      	bne.n	80055a2 <I2C_Slave_ISR_DMA+0x2e2>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005596:	d104      	bne.n	80055a2 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fca4 	bl	8005ee8 <I2C_ITListenCplt>
 80055a0:	e048      	b.n	8005634 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b29      	cmp	r3, #41	@ 0x29
 80055ac:	d10e      	bne.n	80055cc <I2C_Slave_ISR_DMA+0x30c>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055b4:	d00a      	beq.n	80055cc <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2210      	movs	r2, #16
 80055bc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fdfd 	bl	80061be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f916 	bl	80057f6 <I2C_ITSlaveSeqCplt>
 80055ca:	e033      	b.n	8005634 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2210      	movs	r2, #16
 80055d2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80055d4:	e034      	b.n	8005640 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2210      	movs	r2, #16
 80055dc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e2:	f043 0204 	orr.w	r2, r3, #4
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <I2C_Slave_ISR_DMA+0x340>
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055fe:	d11f      	bne.n	8005640 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b21      	cmp	r3, #33	@ 0x21
 8005604:	d002      	beq.n	800560c <I2C_Slave_ISR_DMA+0x34c>
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	2b29      	cmp	r3, #41	@ 0x29
 800560a:	d103      	bne.n	8005614 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	@ 0x21
 8005610:	631a      	str	r2, [r3, #48]	@ 0x30
 8005612:	e008      	b.n	8005626 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b22      	cmp	r3, #34	@ 0x22
 8005618:	d002      	beq.n	8005620 <I2C_Slave_ISR_DMA+0x360>
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b2a      	cmp	r3, #42	@ 0x2a
 800561e:	d102      	bne.n	8005626 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2222      	movs	r2, #34	@ 0x22
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	4619      	mov	r1, r3
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fcaf 	bl	8005f90 <I2C_ITError>
      if (treatdmanack == 1U)
 8005632:	e005      	b.n	8005640 <I2C_Slave_ISR_DMA+0x380>
 8005634:	e004      	b.n	8005640 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2210      	movs	r2, #16
 800563c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800563e:	e00f      	b.n	8005660 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8005640:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005642:	e00d      	b.n	8005660 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f80a 	bl	8005674 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop

08005674 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800568a:	2b28      	cmp	r3, #40	@ 0x28
 800568c:	d16a      	bne.n	8005764 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80056ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80056c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d138      	bne.n	8005744 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80056d2:	897b      	ldrh	r3, [r7, #10]
 80056d4:	09db      	lsrs	r3, r3, #7
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	89bb      	ldrh	r3, [r7, #12]
 80056da:	4053      	eors	r3, r2
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f003 0306 	and.w	r3, r3, #6
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d11c      	bne.n	8005720 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80056e6:	897b      	ldrh	r3, [r7, #10]
 80056e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d13b      	bne.n	8005774 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2208      	movs	r2, #8
 8005708:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005712:	89ba      	ldrh	r2, [r7, #12]
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff f952 	bl	80049c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800571e:	e029      	b.n	8005774 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005720:	893b      	ldrh	r3, [r7, #8]
 8005722:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 ffc5 	bl	80066b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005736:	89ba      	ldrh	r2, [r7, #12]
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff f940 	bl	80049c2 <HAL_I2C_AddrCallback>
}
 8005742:	e017      	b.n	8005774 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 ffb5 	bl	80066b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005756:	89ba      	ldrh	r2, [r7, #12]
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff f930 	bl	80049c2 <HAL_I2C_AddrCallback>
}
 8005762:	e007      	b.n	8005774 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2208      	movs	r2, #8
 800576a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b21      	cmp	r3, #33	@ 0x21
 8005796:	d115      	bne.n	80057c4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2211      	movs	r2, #17
 80057a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057ac:	2101      	movs	r1, #1
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 ff82 	bl	80066b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff f8d8 	bl	8004972 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057c2:	e014      	b.n	80057ee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2212      	movs	r2, #18
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80057d8:	2102      	movs	r1, #2
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 ff6c 	bl	80066b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff f8cc 	bl	8004986 <HAL_I2C_MasterRxCpltCallback>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e00c      	b.n	8005844 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005842:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b29      	cmp	r3, #41	@ 0x29
 800584e:	d112      	bne.n	8005876 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2228      	movs	r2, #40	@ 0x28
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2221      	movs	r2, #33	@ 0x21
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800585e:	2101      	movs	r1, #1
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 ff29 	bl	80066b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff f893 	bl	800499a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005874:	e017      	b.n	80058a6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005880:	d111      	bne.n	80058a6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2228      	movs	r2, #40	@ 0x28
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2222      	movs	r2, #34	@ 0x22
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005890:	2102      	movs	r1, #2
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 ff10 	bl	80066b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff f884 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b21      	cmp	r3, #33	@ 0x21
 80058d0:	d107      	bne.n	80058e2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058d2:	2101      	movs	r1, #1
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 feef 	bl	80066b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2211      	movs	r2, #17
 80058de:	631a      	str	r2, [r3, #48]	@ 0x30
 80058e0:	e00c      	b.n	80058fc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b22      	cmp	r3, #34	@ 0x22
 80058ec:	d106      	bne.n	80058fc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058ee:	2102      	movs	r1, #2
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fee1 	bl	80066b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2212      	movs	r2, #18
 80058fa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b4c      	ldr	r3, [pc, #304]	@ (8005a38 <I2C_ITMasterCplt+0x188>)
 8005908:	400b      	ands	r3, r1
 800590a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a49      	ldr	r2, [pc, #292]	@ (8005a3c <I2C_ITMasterCplt+0x18c>)
 8005916:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2210      	movs	r2, #16
 8005928:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	f043 0204 	orr.w	r2, r3, #4
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b60      	cmp	r3, #96	@ 0x60
 8005940:	d10a      	bne.n	8005958 <I2C_ITMasterCplt+0xa8>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	b2db      	uxtb	r3, r3
 8005954:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005956:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fc30 	bl	80061be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b60      	cmp	r3, #96	@ 0x60
 800596e:	d002      	beq.n	8005976 <I2C_ITMasterCplt+0xc6>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fb07 	bl	8005f90 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005982:	e054      	b.n	8005a2e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b21      	cmp	r3, #33	@ 0x21
 800598e:	d124      	bne.n	80059da <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b40      	cmp	r3, #64	@ 0x40
 80059a8:	d10b      	bne.n	80059c2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f819 	bl	80049f2 <HAL_I2C_MemTxCpltCallback>
}
 80059c0:	e035      	b.n	8005a2e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fe ffcd 	bl	8004972 <HAL_I2C_MasterTxCpltCallback>
}
 80059d8:	e029      	b.n	8005a2e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b22      	cmp	r3, #34	@ 0x22
 80059e4:	d123      	bne.n	8005a2e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b40      	cmp	r3, #64	@ 0x40
 80059fe:	d10b      	bne.n	8005a18 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fe fff8 	bl	8004a06 <HAL_I2C_MemRxCpltCallback>
}
 8005a16:	e00a      	b.n	8005a2e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fe ffac 	bl	8004986 <HAL_I2C_MasterRxCpltCallback>
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	fe00e800 	.word	0xfe00e800
 8005a3c:	ffff0000 	.word	0xffff0000

08005a40 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a62:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	2b21      	cmp	r3, #33	@ 0x21
 8005a70:	d002      	beq.n	8005a78 <I2C_ITSlaveCplt+0x38>
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	2b29      	cmp	r3, #41	@ 0x29
 8005a76:	d108      	bne.n	8005a8a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005a78:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fe1b 	bl	80066b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2221      	movs	r2, #33	@ 0x21
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a88:	e019      	b.n	8005abe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	2b22      	cmp	r3, #34	@ 0x22
 8005a8e:	d002      	beq.n	8005a96 <I2C_ITSlaveCplt+0x56>
 8005a90:	7afb      	ldrb	r3, [r7, #11]
 8005a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a94:	d108      	bne.n	8005aa8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005a96:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fe0c 	bl	80066b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2222      	movs	r2, #34	@ 0x22
 8005aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aa6:	e00a      	b.n	8005abe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	2b28      	cmp	r3, #40	@ 0x28
 8005aac:	d107      	bne.n	8005abe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005aae:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fe00 	bl	80066b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005acc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd8 <I2C_ITSlaveCplt+0x298>)
 8005ada:	400b      	ands	r3, r1
 8005adc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fb6d 	bl	80061be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d07a      	beq.n	8005be4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005afc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8111 	beq.w	8005d2a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a73      	ldr	r2, [pc, #460]	@ (8005cdc <I2C_ITSlaveCplt+0x29c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d059      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a71      	ldr	r2, [pc, #452]	@ (8005ce0 <I2C_ITSlaveCplt+0x2a0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d053      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a6f      	ldr	r2, [pc, #444]	@ (8005ce4 <I2C_ITSlaveCplt+0x2a4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04d      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce8 <I2C_ITSlaveCplt+0x2a8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d047      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6b      	ldr	r2, [pc, #428]	@ (8005cec <I2C_ITSlaveCplt+0x2ac>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d041      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a69      	ldr	r2, [pc, #420]	@ (8005cf0 <I2C_ITSlaveCplt+0x2b0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d03b      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a67      	ldr	r2, [pc, #412]	@ (8005cf4 <I2C_ITSlaveCplt+0x2b4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d035      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a65      	ldr	r2, [pc, #404]	@ (8005cf8 <I2C_ITSlaveCplt+0x2b8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02f      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a63      	ldr	r2, [pc, #396]	@ (8005cfc <I2C_ITSlaveCplt+0x2bc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d029      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a61      	ldr	r2, [pc, #388]	@ (8005d00 <I2C_ITSlaveCplt+0x2c0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d023      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a5f      	ldr	r2, [pc, #380]	@ (8005d04 <I2C_ITSlaveCplt+0x2c4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d01d      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a5d      	ldr	r2, [pc, #372]	@ (8005d08 <I2C_ITSlaveCplt+0x2c8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d017      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8005d0c <I2C_ITSlaveCplt+0x2cc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d011      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a59      	ldr	r2, [pc, #356]	@ (8005d10 <I2C_ITSlaveCplt+0x2d0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a57      	ldr	r2, [pc, #348]	@ (8005d14 <I2C_ITSlaveCplt+0x2d4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d005      	beq.n	8005bc8 <I2C_ITSlaveCplt+0x188>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a55      	ldr	r2, [pc, #340]	@ (8005d18 <I2C_ITSlaveCplt+0x2d8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d105      	bne.n	8005bd4 <I2C_ITSlaveCplt+0x194>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	e004      	b.n	8005bde <I2C_ITSlaveCplt+0x19e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005be2:	e0a2      	b.n	8005d2a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 809d 	beq.w	8005d2a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bfe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8090 	beq.w	8005d2a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a32      	ldr	r2, [pc, #200]	@ (8005cdc <I2C_ITSlaveCplt+0x29c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d059      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ce0 <I2C_ITSlaveCplt+0x2a0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d053      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2e      	ldr	r2, [pc, #184]	@ (8005ce4 <I2C_ITSlaveCplt+0x2a4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d04d      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <I2C_ITSlaveCplt+0x2a8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d047      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2a      	ldr	r2, [pc, #168]	@ (8005cec <I2C_ITSlaveCplt+0x2ac>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d041      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a28      	ldr	r2, [pc, #160]	@ (8005cf0 <I2C_ITSlaveCplt+0x2b0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d03b      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a26      	ldr	r2, [pc, #152]	@ (8005cf4 <I2C_ITSlaveCplt+0x2b4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d035      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a24      	ldr	r2, [pc, #144]	@ (8005cf8 <I2C_ITSlaveCplt+0x2b8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d02f      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a22      	ldr	r2, [pc, #136]	@ (8005cfc <I2C_ITSlaveCplt+0x2bc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d029      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a20      	ldr	r2, [pc, #128]	@ (8005d00 <I2C_ITSlaveCplt+0x2c0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d023      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <I2C_ITSlaveCplt+0x2c4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	@ (8005d08 <I2C_ITSlaveCplt+0x2c8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d017      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d0c <I2C_ITSlaveCplt+0x2cc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d011      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <I2C_ITSlaveCplt+0x2d0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <I2C_ITSlaveCplt+0x2d4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d005      	beq.n	8005cca <I2C_ITSlaveCplt+0x28a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a14      	ldr	r2, [pc, #80]	@ (8005d18 <I2C_ITSlaveCplt+0x2d8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d128      	bne.n	8005d1c <I2C_ITSlaveCplt+0x2dc>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	e027      	b.n	8005d26 <I2C_ITSlaveCplt+0x2e6>
 8005cd6:	bf00      	nop
 8005cd8:	fe00e800 	.word	0xfe00e800
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d020      	beq.n	8005d76 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0304 	bic.w	r3, r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00c      	beq.n	8005d76 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d049      	beq.n	8005e2a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d044      	beq.n	8005e2a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d128      	bne.n	8005dfc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b28      	cmp	r3, #40	@ 0x28
 8005db4:	d108      	bne.n	8005dc8 <I2C_ITSlaveCplt+0x388>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dbc:	d104      	bne.n	8005dc8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005dbe:	6979      	ldr	r1, [r7, #20]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f891 	bl	8005ee8 <I2C_ITListenCplt>
 8005dc6:	e030      	b.n	8005e2a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b29      	cmp	r3, #41	@ 0x29
 8005dd2:	d10e      	bne.n	8005df2 <I2C_ITSlaveCplt+0x3b2>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dda:	d00a      	beq.n	8005df2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2210      	movs	r2, #16
 8005de2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9ea 	bl	80061be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fd03 	bl	80057f6 <I2C_ITSlaveSeqCplt>
 8005df0:	e01b      	b.n	8005e2a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2210      	movs	r2, #16
 8005df8:	61da      	str	r2, [r3, #28]
 8005dfa:	e016      	b.n	8005e2a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2210      	movs	r2, #16
 8005e02:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e08:	f043 0204 	orr.w	r2, r3, #4
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <I2C_ITSlaveCplt+0x3de>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e1c:	d105      	bne.n	8005e2a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8b3 	bl	8005f90 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8a2 	bl	8005f90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b28      	cmp	r3, #40	@ 0x28
 8005e56:	d141      	bne.n	8005edc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e58:	6979      	ldr	r1, [r7, #20]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f844 	bl	8005ee8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e60:	e03c      	b.n	8005edc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e6a:	d014      	beq.n	8005e96 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fcc2 	bl	80057f6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee4 <I2C_ITSlaveCplt+0x4a4>)
 8005e76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fe fda5 	bl	80049de <HAL_I2C_ListenCpltCallback>
}
 8005e94:	e022      	b.n	8005edc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b22      	cmp	r3, #34	@ 0x22
 8005ea0:	d10e      	bne.n	8005ec0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fe fd78 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
}
 8005ebe:	e00d      	b.n	8005edc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fe fd5f 	bl	800499a <HAL_I2C_SlaveTxCpltCallback>
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	ffff0000 	.word	0xffff0000

08005ee8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <I2C_ITListenCplt+0xa4>)
 8005ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d022      	beq.n	8005f64 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f64:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fba5 	bl	80066b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2210      	movs	r2, #16
 8005f74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fe fd2d 	bl	80049de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	ffff0000 	.word	0xffff0000

08005f90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a6d      	ldr	r2, [pc, #436]	@ (8006164 <I2C_ITError+0x1d4>)
 8005fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b28      	cmp	r3, #40	@ 0x28
 8005fc6:	d005      	beq.n	8005fd4 <I2C_ITError+0x44>
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b29      	cmp	r3, #41	@ 0x29
 8005fcc:	d002      	beq.n	8005fd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fd2:	d10b      	bne.n	8005fec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fd4:	2103      	movs	r1, #3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fb6e 	bl	80066b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2228      	movs	r2, #40	@ 0x28
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a60      	ldr	r2, [pc, #384]	@ (8006168 <I2C_ITError+0x1d8>)
 8005fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005fea:	e030      	b.n	800604e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fec:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fb61 	bl	80066b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f8e1 	bl	80061be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b60      	cmp	r3, #96	@ 0x60
 8006006:	d01f      	beq.n	8006048 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b20      	cmp	r3, #32
 800601c:	d114      	bne.n	8006048 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d109      	bne.n	8006040 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2210      	movs	r2, #16
 8006032:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006038:	f043 0204 	orr.w	r2, r3, #4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2220      	movs	r2, #32
 8006046:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	d039      	beq.n	80060d0 <I2C_ITError+0x140>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b11      	cmp	r3, #17
 8006060:	d002      	beq.n	8006068 <I2C_ITError+0xd8>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b21      	cmp	r3, #33	@ 0x21
 8006066:	d133      	bne.n	80060d0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006076:	d107      	bne.n	8006088 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006086:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	4618      	mov	r0, r3
 800608e:	f7fd fc47 	bl	8003920 <HAL_DMA_GetState>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d017      	beq.n	80060c8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	4a33      	ldr	r2, [pc, #204]	@ (800616c <I2C_ITError+0x1dc>)
 800609e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fc fa8f 	bl	80025d0 <HAL_DMA_Abort_IT>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d04d      	beq.n	8006154 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060c2:	4610      	mov	r0, r2
 80060c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060c6:	e045      	b.n	8006154 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f851 	bl	8006170 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060ce:	e041      	b.n	8006154 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d039      	beq.n	800614c <I2C_ITError+0x1bc>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b12      	cmp	r3, #18
 80060dc:	d002      	beq.n	80060e4 <I2C_ITError+0x154>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b22      	cmp	r3, #34	@ 0x22
 80060e2:	d133      	bne.n	800614c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f2:	d107      	bne.n	8006104 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006102:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	4618      	mov	r0, r3
 800610a:	f7fd fc09 	bl	8003920 <HAL_DMA_GetState>
 800610e:	4603      	mov	r3, r0
 8006110:	2b01      	cmp	r3, #1
 8006112:	d017      	beq.n	8006144 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	4a14      	ldr	r2, [pc, #80]	@ (800616c <I2C_ITError+0x1dc>)
 800611a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	4618      	mov	r0, r3
 800612a:	f7fc fa51 	bl	80025d0 <HAL_DMA_Abort_IT>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d011      	beq.n	8006158 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800613e:	4610      	mov	r0, r2
 8006140:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006142:	e009      	b.n	8006158 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f813 	bl	8006170 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800614a:	e005      	b.n	8006158 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f80f 	bl	8006170 <I2C_TreatErrorCallback>
  }
}
 8006152:	e002      	b.n	800615a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006154:	bf00      	nop
 8006156:	e000      	b.n	800615a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006158:	bf00      	nop
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	ffff0000 	.word	0xffff0000
 8006168:	08004cad 	.word	0x08004cad
 800616c:	08006511 	.word	0x08006511

08006170 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b60      	cmp	r3, #96	@ 0x60
 8006182:	d10e      	bne.n	80061a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fe fc47 	bl	8004a2e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061a0:	e009      	b.n	80061b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fe fc32 	bl	8004a1a <HAL_I2C_ErrorCallback>
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d103      	bne.n	80061dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2200      	movs	r2, #0
 80061da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d007      	beq.n	80061fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	619a      	str	r2, [r3, #24]
  }
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006222:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800622e:	2120      	movs	r1, #32
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f9bd 	bl	80065b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006236:	e02d      	b.n	8006294 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	2bff      	cmp	r3, #255	@ 0xff
 800624e:	d903      	bls.n	8006258 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	22ff      	movs	r2, #255	@ 0xff
 8006254:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006256:	e004      	b.n	8006262 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	4619      	mov	r1, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3328      	adds	r3, #40	@ 0x28
 8006272:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006278:	f7fb fc22 	bl	8001ac0 <HAL_DMA_Start_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006282:	2110      	movs	r1, #16
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fe83 	bl	8005f90 <I2C_ITError>
}
 800628a:	e003      	b.n	8006294 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800628c:	2140      	movs	r1, #64	@ 0x40
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f98e 	bl	80065b0 <I2C_Enable_IRQ>
}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d076      	beq.n	80063a4 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a71      	ldr	r2, [pc, #452]	@ (8006484 <I2C_DMAError+0x1e8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d059      	beq.n	8006376 <I2C_DMAError+0xda>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a6f      	ldr	r2, [pc, #444]	@ (8006488 <I2C_DMAError+0x1ec>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d053      	beq.n	8006376 <I2C_DMAError+0xda>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a6d      	ldr	r2, [pc, #436]	@ (800648c <I2C_DMAError+0x1f0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d04d      	beq.n	8006376 <I2C_DMAError+0xda>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006490 <I2C_DMAError+0x1f4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d047      	beq.n	8006376 <I2C_DMAError+0xda>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a69      	ldr	r2, [pc, #420]	@ (8006494 <I2C_DMAError+0x1f8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d041      	beq.n	8006376 <I2C_DMAError+0xda>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a67      	ldr	r2, [pc, #412]	@ (8006498 <I2C_DMAError+0x1fc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <I2C_DMAError+0xda>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a65      	ldr	r2, [pc, #404]	@ (800649c <I2C_DMAError+0x200>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d035      	beq.n	8006376 <I2C_DMAError+0xda>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a63      	ldr	r2, [pc, #396]	@ (80064a0 <I2C_DMAError+0x204>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d02f      	beq.n	8006376 <I2C_DMAError+0xda>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a61      	ldr	r2, [pc, #388]	@ (80064a4 <I2C_DMAError+0x208>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d029      	beq.n	8006376 <I2C_DMAError+0xda>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a5f      	ldr	r2, [pc, #380]	@ (80064a8 <I2C_DMAError+0x20c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d023      	beq.n	8006376 <I2C_DMAError+0xda>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5d      	ldr	r2, [pc, #372]	@ (80064ac <I2C_DMAError+0x210>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <I2C_DMAError+0xda>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a5b      	ldr	r2, [pc, #364]	@ (80064b0 <I2C_DMAError+0x214>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d017      	beq.n	8006376 <I2C_DMAError+0xda>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a59      	ldr	r2, [pc, #356]	@ (80064b4 <I2C_DMAError+0x218>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d011      	beq.n	8006376 <I2C_DMAError+0xda>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a57      	ldr	r2, [pc, #348]	@ (80064b8 <I2C_DMAError+0x21c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00b      	beq.n	8006376 <I2C_DMAError+0xda>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a55      	ldr	r2, [pc, #340]	@ (80064bc <I2C_DMAError+0x220>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d005      	beq.n	8006376 <I2C_DMAError+0xda>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a53      	ldr	r2, [pc, #332]	@ (80064c0 <I2C_DMAError+0x224>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d109      	bne.n	800638a <I2C_DMAError+0xee>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	e008      	b.n	800639c <I2C_DMAError+0x100>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8098 	beq.w	80064de <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a33      	ldr	r2, [pc, #204]	@ (8006484 <I2C_DMAError+0x1e8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d059      	beq.n	800646e <I2C_DMAError+0x1d2>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a31      	ldr	r2, [pc, #196]	@ (8006488 <I2C_DMAError+0x1ec>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d053      	beq.n	800646e <I2C_DMAError+0x1d2>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2f      	ldr	r2, [pc, #188]	@ (800648c <I2C_DMAError+0x1f0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d04d      	beq.n	800646e <I2C_DMAError+0x1d2>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006490 <I2C_DMAError+0x1f4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d047      	beq.n	800646e <I2C_DMAError+0x1d2>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006494 <I2C_DMAError+0x1f8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d041      	beq.n	800646e <I2C_DMAError+0x1d2>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a29      	ldr	r2, [pc, #164]	@ (8006498 <I2C_DMAError+0x1fc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d03b      	beq.n	800646e <I2C_DMAError+0x1d2>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a27      	ldr	r2, [pc, #156]	@ (800649c <I2C_DMAError+0x200>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d035      	beq.n	800646e <I2C_DMAError+0x1d2>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a25      	ldr	r2, [pc, #148]	@ (80064a0 <I2C_DMAError+0x204>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d02f      	beq.n	800646e <I2C_DMAError+0x1d2>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a23      	ldr	r2, [pc, #140]	@ (80064a4 <I2C_DMAError+0x208>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d029      	beq.n	800646e <I2C_DMAError+0x1d2>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a21      	ldr	r2, [pc, #132]	@ (80064a8 <I2C_DMAError+0x20c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d023      	beq.n	800646e <I2C_DMAError+0x1d2>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ac <I2C_DMAError+0x210>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01d      	beq.n	800646e <I2C_DMAError+0x1d2>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1d      	ldr	r2, [pc, #116]	@ (80064b0 <I2C_DMAError+0x214>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d017      	beq.n	800646e <I2C_DMAError+0x1d2>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <I2C_DMAError+0x218>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d011      	beq.n	800646e <I2C_DMAError+0x1d2>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <I2C_DMAError+0x21c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <I2C_DMAError+0x1d2>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a17      	ldr	r2, [pc, #92]	@ (80064bc <I2C_DMAError+0x220>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d005      	beq.n	800646e <I2C_DMAError+0x1d2>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a15      	ldr	r2, [pc, #84]	@ (80064c0 <I2C_DMAError+0x224>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d12a      	bne.n	80064c4 <I2C_DMAError+0x228>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	e029      	b.n	80064d6 <I2C_DMAError+0x23a>
 8006482:	bf00      	nop
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf0c      	ite	eq
 80064d0:	2301      	moveq	r3, #1
 80064d2:	2300      	movne	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80064da:	2301      	movs	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fd fa2c 	bl	800393c <HAL_DMA_GetError>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d00e      	beq.n	8006508 <I2C_DMAError+0x26c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064fe:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006500:	2110      	movs	r1, #16
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f7ff fd44 	bl	8005f90 <I2C_ITError>
  }
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652a:	2200      	movs	r2, #0
 800652c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653a:	2200      	movs	r2, #0
 800653c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff fe16 	bl	8006170 <I2C_TreatErrorCallback>
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	817b      	strh	r3, [r7, #10]
 800655a:	4613      	mov	r3, r2
 800655c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800655e:	897b      	ldrh	r3, [r7, #10]
 8006560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006564:	7a7b      	ldrb	r3, [r7, #9]
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800656c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4313      	orrs	r3, r2
 8006576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800657a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	0d5b      	lsrs	r3, r3, #21
 8006586:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800658a:	4b08      	ldr	r3, [pc, #32]	@ (80065ac <I2C_TransferConfig+0x60>)
 800658c:	430b      	orrs	r3, r1
 800658e:	43db      	mvns	r3, r3
 8006590:	ea02 0103 	and.w	r1, r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	03ff63ff 	.word	0x03ff63ff

080065b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c4:	4a39      	ldr	r2, [pc, #228]	@ (80066ac <I2C_Enable_IRQ+0xfc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d032      	beq.n	8006630 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80065ce:	4a38      	ldr	r2, [pc, #224]	@ (80066b0 <I2C_Enable_IRQ+0x100>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02d      	beq.n	8006630 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80065d8:	4a36      	ldr	r2, [pc, #216]	@ (80066b4 <I2C_Enable_IRQ+0x104>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d028      	beq.n	8006630 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da03      	bge.n	80065ee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80065ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065ee:	887b      	ldrh	r3, [r7, #2]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80065fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006610:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	2b10      	cmp	r3, #16
 8006616:	d103      	bne.n	8006620 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800661e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006620:	887b      	ldrh	r3, [r7, #2]
 8006622:	2b20      	cmp	r3, #32
 8006624:	d133      	bne.n	800668e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f043 0320 	orr.w	r3, r3, #32
 800662c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800662e:	e02e      	b.n	800668e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006634:	2b00      	cmp	r3, #0
 8006636:	da03      	bge.n	8006640 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800663e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006640:	887b      	ldrh	r3, [r7, #2]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006650:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006652:	887b      	ldrh	r3, [r7, #2]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006662:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006664:	887b      	ldrh	r3, [r7, #2]
 8006666:	2b10      	cmp	r3, #16
 8006668:	d103      	bne.n	8006672 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006670:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006672:	887b      	ldrh	r3, [r7, #2]
 8006674:	2b20      	cmp	r3, #32
 8006676:	d103      	bne.n	8006680 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800667e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d103      	bne.n	800668e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800668c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	08004e9f 	.word	0x08004e9f
 80066b0:	080052c1 	.word	0x080052c1
 80066b4:	08005075 	.word	0x08005075

080066b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80066c8:	887b      	ldrh	r3, [r7, #2]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80066d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066e6:	2b28      	cmp	r3, #40	@ 0x28
 80066e8:	d003      	beq.n	80066f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80066f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80066f2:	887b      	ldrh	r3, [r7, #2]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00f      	beq.n	800671c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006702:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006710:	2b28      	cmp	r3, #40	@ 0x28
 8006712:	d003      	beq.n	800671c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800671a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800671c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006720:	2b00      	cmp	r3, #0
 8006722:	da03      	bge.n	800672c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800672a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800672c:	887b      	ldrh	r3, [r7, #2]
 800672e:	2b10      	cmp	r3, #16
 8006730:	d103      	bne.n	800673a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	2b20      	cmp	r3, #32
 800673e:	d103      	bne.n	8006748 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f043 0320 	orr.w	r3, r3, #32
 8006746:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006748:	887b      	ldrh	r3, [r7, #2]
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d103      	bne.n	8006756 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006754:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6819      	ldr	r1, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	43da      	mvns	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	400a      	ands	r2, r1
 8006766:	601a      	str	r2, [r3, #0]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b20      	cmp	r3, #32
 8006788:	d138      	bne.n	80067fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006794:	2302      	movs	r3, #2
 8006796:	e032      	b.n	80067fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	@ 0x24
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6819      	ldr	r1, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b20      	cmp	r3, #32
 800681e:	d139      	bne.n	8006894 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800682a:	2302      	movs	r3, #2
 800682c:	e033      	b.n	8006896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2224      	movs	r2, #36	@ 0x24
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800685c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80068ac:	4b19      	ldr	r3, [pc, #100]	@ (8006914 <HAL_PWREx_ConfigSupply+0x70>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d00a      	beq.n	80068ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068b8:	4b16      	ldr	r3, [pc, #88]	@ (8006914 <HAL_PWREx_ConfigSupply+0x70>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d001      	beq.n	80068ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e01f      	b.n	800690a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e01d      	b.n	800690a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068ce:	4b11      	ldr	r3, [pc, #68]	@ (8006914 <HAL_PWREx_ConfigSupply+0x70>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f023 0207 	bic.w	r2, r3, #7
 80068d6:	490f      	ldr	r1, [pc, #60]	@ (8006914 <HAL_PWREx_ConfigSupply+0x70>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068de:	f7fa fc75 	bl	80011cc <HAL_GetTick>
 80068e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068e4:	e009      	b.n	80068fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068e6:	f7fa fc71 	bl	80011cc <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068f4:	d901      	bls.n	80068fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e007      	b.n	800690a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068fa:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <HAL_PWREx_ConfigSupply+0x70>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006906:	d1ee      	bne.n	80068e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	58024800 	.word	0x58024800

08006918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08c      	sub	sp, #48	@ 0x30
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f000 bc1f 	b.w	800716a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80b3 	beq.w	8006aa0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800693a:	4b95      	ldr	r3, [pc, #596]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006944:	4b92      	ldr	r3, [pc, #584]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	2b10      	cmp	r3, #16
 800694e:	d007      	beq.n	8006960 <HAL_RCC_OscConfig+0x48>
 8006950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006952:	2b18      	cmp	r3, #24
 8006954:	d112      	bne.n	800697c <HAL_RCC_OscConfig+0x64>
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d10d      	bne.n	800697c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006960:	4b8b      	ldr	r3, [pc, #556]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8098 	beq.w	8006a9e <HAL_RCC_OscConfig+0x186>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f040 8093 	bne.w	8006a9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e3f6      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006984:	d106      	bne.n	8006994 <HAL_RCC_OscConfig+0x7c>
 8006986:	4b82      	ldr	r3, [pc, #520]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a81      	ldr	r2, [pc, #516]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 800698c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e058      	b.n	8006a46 <HAL_RCC_OscConfig+0x12e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d112      	bne.n	80069c2 <HAL_RCC_OscConfig+0xaa>
 800699c:	4b7c      	ldr	r3, [pc, #496]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7b      	ldr	r2, [pc, #492]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	4b79      	ldr	r3, [pc, #484]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a78      	ldr	r2, [pc, #480]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b76      	ldr	r3, [pc, #472]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a75      	ldr	r2, [pc, #468]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e041      	b.n	8006a46 <HAL_RCC_OscConfig+0x12e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069ca:	d112      	bne.n	80069f2 <HAL_RCC_OscConfig+0xda>
 80069cc:	4b70      	ldr	r3, [pc, #448]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a6f      	ldr	r2, [pc, #444]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a6c      	ldr	r2, [pc, #432]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a69      	ldr	r2, [pc, #420]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	e029      	b.n	8006a46 <HAL_RCC_OscConfig+0x12e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80069fa:	d112      	bne.n	8006a22 <HAL_RCC_OscConfig+0x10a>
 80069fc:	4b64      	ldr	r3, [pc, #400]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a63      	ldr	r2, [pc, #396]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4b61      	ldr	r3, [pc, #388]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a60      	ldr	r2, [pc, #384]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4b5e      	ldr	r3, [pc, #376]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5d      	ldr	r2, [pc, #372]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e011      	b.n	8006a46 <HAL_RCC_OscConfig+0x12e>
 8006a22:	4b5b      	ldr	r3, [pc, #364]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a5a      	ldr	r2, [pc, #360]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	4b58      	ldr	r3, [pc, #352]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a57      	ldr	r2, [pc, #348]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	4b55      	ldr	r3, [pc, #340]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a54      	ldr	r2, [pc, #336]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d013      	beq.n	8006a76 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fa fbbd 	bl	80011cc <HAL_GetTick>
 8006a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a56:	f7fa fbb9 	bl	80011cc <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b64      	cmp	r3, #100	@ 0x64
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e380      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a68:	4b49      	ldr	r3, [pc, #292]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x13e>
 8006a74:	e014      	b.n	8006aa0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a76:	f7fa fba9 	bl	80011cc <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a7e:	f7fa fba5 	bl	80011cc <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b64      	cmp	r3, #100	@ 0x64
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e36c      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a90:	4b3f      	ldr	r3, [pc, #252]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f0      	bne.n	8006a7e <HAL_RCC_OscConfig+0x166>
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 808c 	beq.w	8006bc6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aae:	4b38      	ldr	r3, [pc, #224]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ab6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ab8:	4b35      	ldr	r3, [pc, #212]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x1bc>
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	2b18      	cmp	r3, #24
 8006ac8:	d137      	bne.n	8006b3a <HAL_RCC_OscConfig+0x222>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d132      	bne.n	8006b3a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_RCC_OscConfig+0x1d4>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e33e      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aec:	4b28      	ldr	r3, [pc, #160]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f023 0219 	bic.w	r2, r3, #25
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4925      	ldr	r1, [pc, #148]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fa fb65 	bl	80011cc <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b06:	f7fa fb61 	bl	80011cc <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e328      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b18:	4b1d      	ldr	r3, [pc, #116]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b24:	4b1a      	ldr	r3, [pc, #104]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	4917      	ldr	r1, [pc, #92]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b38:	e045      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d028      	beq.n	8006b94 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b42:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 0219 	bic.w	r2, r3, #25
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	4910      	ldr	r1, [pc, #64]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b54:	f7fa fb3a 	bl	80011cc <HAL_GetTick>
 8006b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5c:	f7fa fb36 	bl	80011cc <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e2fd      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b6e:	4b08      	ldr	r3, [pc, #32]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	4901      	ldr	r1, [pc, #4]	@ (8006b90 <HAL_RCC_OscConfig+0x278>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	604b      	str	r3, [r1, #4]
 8006b8e:	e01a      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2ae>
 8006b90:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b94:	4b97      	ldr	r3, [pc, #604]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a96      	ldr	r2, [pc, #600]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fa fb14 	bl	80011cc <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba8:	f7fa fb10 	bl	80011cc <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e2d7      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bba:	4b8e      	ldr	r3, [pc, #568]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d06a      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd2:	4b88      	ldr	r3, [pc, #544]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bdc:	4b85      	ldr	r3, [pc, #532]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d007      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x2e0>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b18      	cmp	r3, #24
 8006bec:	d11b      	bne.n	8006c26 <HAL_RCC_OscConfig+0x30e>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d116      	bne.n	8006c26 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_RCC_OscConfig+0x2f8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	2b80      	cmp	r3, #128	@ 0x80
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e2ac      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c10:	4b78      	ldr	r3, [pc, #480]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	061b      	lsls	r3, r3, #24
 8006c1e:	4975      	ldr	r1, [pc, #468]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c24:	e040      	b.n	8006ca8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d023      	beq.n	8006c76 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c2e:	4b71      	ldr	r3, [pc, #452]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a70      	ldr	r2, [pc, #448]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fa fac7 	bl	80011cc <HAL_GetTick>
 8006c3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c42:	f7fa fac3 	bl	80011cc <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e28a      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c54:	4b67      	ldr	r3, [pc, #412]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0f0      	beq.n	8006c42 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c60:	4b64      	ldr	r3, [pc, #400]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	061b      	lsls	r3, r3, #24
 8006c6e:	4961      	ldr	r1, [pc, #388]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60cb      	str	r3, [r1, #12]
 8006c74:	e018      	b.n	8006ca8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c76:	4b5f      	ldr	r3, [pc, #380]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c82:	f7fa faa3 	bl	80011cc <HAL_GetTick>
 8006c86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c88:	e008      	b.n	8006c9c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c8a:	f7fa fa9f 	bl	80011cc <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e266      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c9c:	4b55      	ldr	r3, [pc, #340]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f0      	bne.n	8006c8a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d036      	beq.n	8006d22 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d019      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fa fa80 	bl	80011cc <HAL_GetTick>
 8006ccc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd0:	f7fa fa7c 	bl	80011cc <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e243      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ce2:	4b44      	ldr	r3, [pc, #272]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x3b8>
 8006cee:	e018      	b.n	8006d22 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf0:	4b40      	ldr	r3, [pc, #256]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfc:	f7fa fa66 	bl	80011cc <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d04:	f7fa fa62 	bl	80011cc <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e229      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d16:	4b37      	ldr	r3, [pc, #220]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d036      	beq.n	8006d9c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d019      	beq.n	8006d6a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d36:	4b2f      	ldr	r3, [pc, #188]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d42:	f7fa fa43 	bl	80011cc <HAL_GetTick>
 8006d46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d4a:	f7fa fa3f 	bl	80011cc <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e206      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d5c:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f0      	beq.n	8006d4a <HAL_RCC_OscConfig+0x432>
 8006d68:	e018      	b.n	8006d9c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d6a:	4b22      	ldr	r3, [pc, #136]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a21      	ldr	r2, [pc, #132]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d76:	f7fa fa29 	bl	80011cc <HAL_GetTick>
 8006d7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d7c:	e008      	b.n	8006d90 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d7e:	f7fa fa25 	bl	80011cc <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e1ec      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d90:	4b18      	ldr	r3, [pc, #96]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f0      	bne.n	8006d7e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80af 	beq.w	8006f08 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006daa:	4b13      	ldr	r3, [pc, #76]	@ (8006df8 <HAL_RCC_OscConfig+0x4e0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a12      	ldr	r2, [pc, #72]	@ (8006df8 <HAL_RCC_OscConfig+0x4e0>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006db6:	f7fa fa09 	bl	80011cc <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbe:	f7fa fa05 	bl	80011cc <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b64      	cmp	r3, #100	@ 0x64
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e1cc      	b.n	800716a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dd0:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <HAL_RCC_OscConfig+0x4e0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCC_OscConfig+0x4e4>
 8006de4:	4b03      	ldr	r3, [pc, #12]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de8:	4a02      	ldr	r2, [pc, #8]	@ (8006df4 <HAL_RCC_OscConfig+0x4dc>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df0:	e05b      	b.n	8006eaa <HAL_RCC_OscConfig+0x592>
 8006df2:	bf00      	nop
 8006df4:	58024400 	.word	0x58024400
 8006df8:	58024800 	.word	0x58024800
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d112      	bne.n	8006e2a <HAL_RCC_OscConfig+0x512>
 8006e04:	4b9d      	ldr	r3, [pc, #628]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e08:	4a9c      	ldr	r2, [pc, #624]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e10:	4b9a      	ldr	r3, [pc, #616]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e14:	4a99      	ldr	r2, [pc, #612]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e1c:	4b97      	ldr	r3, [pc, #604]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e20:	4a96      	ldr	r2, [pc, #600]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e22:	f023 0304 	bic.w	r3, r3, #4
 8006e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e28:	e03f      	b.n	8006eaa <HAL_RCC_OscConfig+0x592>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b05      	cmp	r3, #5
 8006e30:	d112      	bne.n	8006e58 <HAL_RCC_OscConfig+0x540>
 8006e32:	4b92      	ldr	r3, [pc, #584]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e36:	4a91      	ldr	r2, [pc, #580]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e38:	f043 0304 	orr.w	r3, r3, #4
 8006e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e3e:	4b8f      	ldr	r3, [pc, #572]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e42:	4a8e      	ldr	r2, [pc, #568]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e4a:	4b8c      	ldr	r3, [pc, #560]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4e:	4a8b      	ldr	r2, [pc, #556]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e50:	f043 0301 	orr.w	r3, r3, #1
 8006e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e56:	e028      	b.n	8006eaa <HAL_RCC_OscConfig+0x592>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b85      	cmp	r3, #133	@ 0x85
 8006e5e:	d112      	bne.n	8006e86 <HAL_RCC_OscConfig+0x56e>
 8006e60:	4b86      	ldr	r3, [pc, #536]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e64:	4a85      	ldr	r2, [pc, #532]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e66:	f043 0304 	orr.w	r3, r3, #4
 8006e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e6c:	4b83      	ldr	r3, [pc, #524]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e70:	4a82      	ldr	r2, [pc, #520]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e78:	4b80      	ldr	r3, [pc, #512]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e84:	e011      	b.n	8006eaa <HAL_RCC_OscConfig+0x592>
 8006e86:	4b7d      	ldr	r3, [pc, #500]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e92:	4b7a      	ldr	r3, [pc, #488]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a79      	ldr	r2, [pc, #484]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	4b77      	ldr	r3, [pc, #476]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a76      	ldr	r2, [pc, #472]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d015      	beq.n	8006ede <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb2:	f7fa f98b 	bl	80011cc <HAL_GetTick>
 8006eb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eba:	f7fa f987 	bl	80011cc <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e14c      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0ee      	beq.n	8006eba <HAL_RCC_OscConfig+0x5a2>
 8006edc:	e014      	b.n	8006f08 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ede:	f7fa f975 	bl	80011cc <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7fa f971 	bl	80011cc <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e136      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006efc:	4b5f      	ldr	r3, [pc, #380]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ee      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 812b 	beq.w	8007168 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f12:	4b5a      	ldr	r3, [pc, #360]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f1a:	2b18      	cmp	r3, #24
 8006f1c:	f000 80bb 	beq.w	8007096 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	f040 8095 	bne.w	8007054 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f2a:	4b54      	ldr	r3, [pc, #336]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a53      	ldr	r2, [pc, #332]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fa f949 	bl	80011cc <HAL_GetTick>
 8006f3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f3e:	f7fa f945 	bl	80011cc <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e10c      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f50:	4b4a      	ldr	r3, [pc, #296]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f0      	bne.n	8006f3e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f5c:	4b47      	ldr	r3, [pc, #284]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f60:	4b47      	ldr	r3, [pc, #284]	@ (8007080 <HAL_RCC_OscConfig+0x768>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f6c:	0112      	lsls	r2, r2, #4
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	4942      	ldr	r1, [pc, #264]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f84:	3b01      	subs	r3, #1
 8006f86:	025b      	lsls	r3, r3, #9
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	3b01      	subs	r3, #1
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fa6:	4935      	ldr	r1, [pc, #212]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fac:	4b33      	ldr	r3, [pc, #204]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	4a32      	ldr	r2, [pc, #200]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fb8:	4b30      	ldr	r3, [pc, #192]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fbc:	4b31      	ldr	r3, [pc, #196]	@ (8007084 <HAL_RCC_OscConfig+0x76c>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fc4:	00d2      	lsls	r2, r2, #3
 8006fc6:	492d      	ldr	r1, [pc, #180]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	f023 020c 	bic.w	r2, r3, #12
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd8:	4928      	ldr	r1, [pc, #160]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fde:	4b27      	ldr	r3, [pc, #156]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	f023 0202 	bic.w	r2, r3, #2
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fea:	4924      	ldr	r1, [pc, #144]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ff0:	4b22      	ldr	r3, [pc, #136]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	4a21      	ldr	r2, [pc, #132]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a1e      	ldr	r2, [pc, #120]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8007002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007008:	4b1c      	ldr	r3, [pc, #112]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	4a1b      	ldr	r2, [pc, #108]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 800700e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007014:	4b19      	ldr	r3, [pc, #100]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	4a18      	ldr	r2, [pc, #96]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007020:	4b16      	ldr	r3, [pc, #88]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a15      	ldr	r2, [pc, #84]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8007026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800702a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fa f8ce 	bl	80011cc <HAL_GetTick>
 8007030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007034:	f7fa f8ca 	bl	80011cc <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e091      	b.n	800716a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007046:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f0      	beq.n	8007034 <HAL_RCC_OscConfig+0x71c>
 8007052:	e089      	b.n	8007168 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007054:	4b09      	ldr	r3, [pc, #36]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a08      	ldr	r2, [pc, #32]	@ (800707c <HAL_RCC_OscConfig+0x764>)
 800705a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800705e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fa f8b4 	bl	80011cc <HAL_GetTick>
 8007064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007066:	e00f      	b.n	8007088 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007068:	f7fa f8b0 	bl	80011cc <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d908      	bls.n	8007088 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e077      	b.n	800716a <HAL_RCC_OscConfig+0x852>
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	fffffc0c 	.word	0xfffffc0c
 8007084:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007088:	4b3a      	ldr	r3, [pc, #232]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e9      	bne.n	8007068 <HAL_RCC_OscConfig+0x750>
 8007094:	e068      	b.n	8007168 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007096:	4b37      	ldr	r3, [pc, #220]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800709c:	4b35      	ldr	r3, [pc, #212]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 800709e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d031      	beq.n	800710e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f003 0203 	and.w	r2, r3, #3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d12a      	bne.n	800710e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	091b      	lsrs	r3, r3, #4
 80070bc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d122      	bne.n	800710e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d11a      	bne.n	800710e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	0a5b      	lsrs	r3, r3, #9
 80070dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d111      	bne.n	800710e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d108      	bne.n	800710e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007108:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800710a:	429a      	cmp	r2, r3
 800710c:	d001      	beq.n	8007112 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e02b      	b.n	800716a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007112:	4b18      	ldr	r3, [pc, #96]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 8007114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800711c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d01f      	beq.n	8007168 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007128:	4b12      	ldr	r3, [pc, #72]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007134:	f7fa f84a 	bl	80011cc <HAL_GetTick>
 8007138:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800713a:	bf00      	nop
 800713c:	f7fa f846 	bl	80011cc <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	4293      	cmp	r3, r2
 8007146:	d0f9      	beq.n	800713c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007148:	4b0a      	ldr	r3, [pc, #40]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 800714a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800714c:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <HAL_RCC_OscConfig+0x860>)
 800714e:	4013      	ands	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007154:	00d2      	lsls	r2, r2, #3
 8007156:	4907      	ldr	r1, [pc, #28]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 8007158:	4313      	orrs	r3, r2
 800715a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800715c:	4b05      	ldr	r3, [pc, #20]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	4a04      	ldr	r2, [pc, #16]	@ (8007174 <HAL_RCC_OscConfig+0x85c>)
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3730      	adds	r7, #48	@ 0x30
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	58024400 	.word	0x58024400
 8007178:	ffff0007 	.word	0xffff0007

0800717c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e19c      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007190:	4b8a      	ldr	r3, [pc, #552]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d910      	bls.n	80071c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719e:	4b87      	ldr	r3, [pc, #540]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f023 020f 	bic.w	r2, r3, #15
 80071a6:	4985      	ldr	r1, [pc, #532]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ae:	4b83      	ldr	r3, [pc, #524]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e184      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d010      	beq.n	80071ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	4b7b      	ldr	r3, [pc, #492]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071d8:	429a      	cmp	r2, r3
 80071da:	d908      	bls.n	80071ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071dc:	4b78      	ldr	r3, [pc, #480]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	4975      	ldr	r1, [pc, #468]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d010      	beq.n	800721c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695a      	ldr	r2, [r3, #20]
 80071fe:	4b70      	ldr	r3, [pc, #448]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007206:	429a      	cmp	r2, r3
 8007208:	d908      	bls.n	800721c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800720a:	4b6d      	ldr	r3, [pc, #436]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	496a      	ldr	r1, [pc, #424]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007218:	4313      	orrs	r3, r2
 800721a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	4b64      	ldr	r3, [pc, #400]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007234:	429a      	cmp	r2, r3
 8007236:	d908      	bls.n	800724a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007238:	4b61      	ldr	r3, [pc, #388]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	495e      	ldr	r1, [pc, #376]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007246:	4313      	orrs	r3, r2
 8007248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d010      	beq.n	8007278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69da      	ldr	r2, [r3, #28]
 800725a:	4b59      	ldr	r3, [pc, #356]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007262:	429a      	cmp	r2, r3
 8007264:	d908      	bls.n	8007278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007266:	4b56      	ldr	r3, [pc, #344]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	4953      	ldr	r1, [pc, #332]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007274:	4313      	orrs	r3, r2
 8007276:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d010      	beq.n	80072a6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	4b4d      	ldr	r3, [pc, #308]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	429a      	cmp	r2, r3
 8007292:	d908      	bls.n	80072a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007294:	4b4a      	ldr	r3, [pc, #296]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f023 020f 	bic.w	r2, r3, #15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	4947      	ldr	r1, [pc, #284]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d055      	beq.n	800735e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80072b2:	4b43      	ldr	r3, [pc, #268]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4940      	ldr	r1, [pc, #256]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d107      	bne.n	80072dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072cc:	4b3c      	ldr	r3, [pc, #240]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d121      	bne.n	800731c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0f6      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d107      	bne.n	80072f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072e4:	4b36      	ldr	r3, [pc, #216]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d115      	bne.n	800731c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e0ea      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072fc:	4b30      	ldr	r3, [pc, #192]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0de      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800730c:	4b2c      	ldr	r3, [pc, #176]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0d6      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800731c:	4b28      	ldr	r3, [pc, #160]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f023 0207 	bic.w	r2, r3, #7
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4925      	ldr	r1, [pc, #148]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800732a:	4313      	orrs	r3, r2
 800732c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732e:	f7f9 ff4d 	bl	80011cc <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007334:	e00a      	b.n	800734c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007336:	f7f9 ff49 	bl	80011cc <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0be      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734c:	4b1c      	ldr	r3, [pc, #112]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	429a      	cmp	r2, r3
 800735c:	d1eb      	bne.n	8007336 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d010      	beq.n	800738c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	4b14      	ldr	r3, [pc, #80]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	429a      	cmp	r2, r3
 8007378:	d208      	bcs.n	800738c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800737a:	4b11      	ldr	r3, [pc, #68]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f023 020f 	bic.w	r2, r3, #15
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	490e      	ldr	r1, [pc, #56]	@ (80073c0 <HAL_RCC_ClockConfig+0x244>)
 8007388:	4313      	orrs	r3, r2
 800738a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800738c:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d214      	bcs.n	80073c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739a:	4b08      	ldr	r3, [pc, #32]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f023 020f 	bic.w	r2, r3, #15
 80073a2:	4906      	ldr	r1, [pc, #24]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073aa:	4b04      	ldr	r3, [pc, #16]	@ (80073bc <HAL_RCC_ClockConfig+0x240>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d005      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e086      	b.n	80074ca <HAL_RCC_ClockConfig+0x34e>
 80073bc:	52002000 	.word	0x52002000
 80073c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691a      	ldr	r2, [r3, #16]
 80073d4:	4b3f      	ldr	r3, [pc, #252]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073dc:	429a      	cmp	r2, r3
 80073de:	d208      	bcs.n	80073f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073e0:	4b3c      	ldr	r3, [pc, #240]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	4939      	ldr	r1, [pc, #228]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d010      	beq.n	8007420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695a      	ldr	r2, [r3, #20]
 8007402:	4b34      	ldr	r3, [pc, #208]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800740a:	429a      	cmp	r2, r3
 800740c:	d208      	bcs.n	8007420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800740e:	4b31      	ldr	r3, [pc, #196]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	492e      	ldr	r1, [pc, #184]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 800741c:	4313      	orrs	r3, r2
 800741e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	d010      	beq.n	800744e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	4b28      	ldr	r3, [pc, #160]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007438:	429a      	cmp	r2, r3
 800743a:	d208      	bcs.n	800744e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800743c:	4b25      	ldr	r3, [pc, #148]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	4922      	ldr	r1, [pc, #136]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 800744a:	4313      	orrs	r3, r2
 800744c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d010      	beq.n	800747c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69da      	ldr	r2, [r3, #28]
 800745e:	4b1d      	ldr	r3, [pc, #116]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007466:	429a      	cmp	r2, r3
 8007468:	d208      	bcs.n	800747c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800746a:	4b1a      	ldr	r3, [pc, #104]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	4917      	ldr	r1, [pc, #92]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 8007478:	4313      	orrs	r3, r2
 800747a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800747c:	f000 f834 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b14      	ldr	r3, [pc, #80]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	4912      	ldr	r1, [pc, #72]	@ (80074d8 <HAL_RCC_ClockConfig+0x35c>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
 8007498:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800749a:	4b0e      	ldr	r3, [pc, #56]	@ (80074d4 <HAL_RCC_ClockConfig+0x358>)
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	4a0d      	ldr	r2, [pc, #52]	@ (80074d8 <HAL_RCC_ClockConfig+0x35c>)
 80074a4:	5cd3      	ldrb	r3, [r2, r3]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	4a0a      	ldr	r2, [pc, #40]	@ (80074dc <HAL_RCC_ClockConfig+0x360>)
 80074b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074b4:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <HAL_RCC_ClockConfig+0x364>)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80074ba:	4b0a      	ldr	r3, [pc, #40]	@ (80074e4 <HAL_RCC_ClockConfig+0x368>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7f9 fc12 	bl	8000ce8 <HAL_InitTick>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	58024400 	.word	0x58024400
 80074d8:	0800ef98 	.word	0x0800ef98
 80074dc:	24000004 	.word	0x24000004
 80074e0:	24000000 	.word	0x24000000
 80074e4:	24000008 	.word	0x24000008

080074e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	@ 0x24
 80074ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ee:	4bb3      	ldr	r3, [pc, #716]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074f6:	2b18      	cmp	r3, #24
 80074f8:	f200 8155 	bhi.w	80077a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80074fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	08007569 	.word	0x08007569
 8007508:	080077a7 	.word	0x080077a7
 800750c:	080077a7 	.word	0x080077a7
 8007510:	080077a7 	.word	0x080077a7
 8007514:	080077a7 	.word	0x080077a7
 8007518:	080077a7 	.word	0x080077a7
 800751c:	080077a7 	.word	0x080077a7
 8007520:	080077a7 	.word	0x080077a7
 8007524:	0800758f 	.word	0x0800758f
 8007528:	080077a7 	.word	0x080077a7
 800752c:	080077a7 	.word	0x080077a7
 8007530:	080077a7 	.word	0x080077a7
 8007534:	080077a7 	.word	0x080077a7
 8007538:	080077a7 	.word	0x080077a7
 800753c:	080077a7 	.word	0x080077a7
 8007540:	080077a7 	.word	0x080077a7
 8007544:	08007595 	.word	0x08007595
 8007548:	080077a7 	.word	0x080077a7
 800754c:	080077a7 	.word	0x080077a7
 8007550:	080077a7 	.word	0x080077a7
 8007554:	080077a7 	.word	0x080077a7
 8007558:	080077a7 	.word	0x080077a7
 800755c:	080077a7 	.word	0x080077a7
 8007560:	080077a7 	.word	0x080077a7
 8007564:	0800759b 	.word	0x0800759b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007568:	4b94      	ldr	r3, [pc, #592]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007574:	4b91      	ldr	r3, [pc, #580]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	08db      	lsrs	r3, r3, #3
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	4a90      	ldr	r2, [pc, #576]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007580:	fa22 f303 	lsr.w	r3, r2, r3
 8007584:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007586:	e111      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007588:	4b8d      	ldr	r3, [pc, #564]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800758a:	61bb      	str	r3, [r7, #24]
      break;
 800758c:	e10e      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800758e:	4b8d      	ldr	r3, [pc, #564]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007590:	61bb      	str	r3, [r7, #24]
      break;
 8007592:	e10b      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007594:	4b8c      	ldr	r3, [pc, #560]	@ (80077c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007596:	61bb      	str	r3, [r7, #24]
      break;
 8007598:	e108      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800759a:	4b88      	ldr	r3, [pc, #544]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075a4:	4b85      	ldr	r3, [pc, #532]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	091b      	lsrs	r3, r3, #4
 80075aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075b0:	4b82      	ldr	r3, [pc, #520]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075ba:	4b80      	ldr	r3, [pc, #512]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075be:	08db      	lsrs	r3, r3, #3
 80075c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80e1 	beq.w	80077a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	f000 8083 	beq.w	80076ec <HAL_RCC_GetSysClockFreq+0x204>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	f200 80a1 	bhi.w	8007730 <HAL_RCC_GetSysClockFreq+0x248>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0x114>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d056      	beq.n	80076a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075fa:	e099      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075fc:	4b6f      	ldr	r3, [pc, #444]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b00      	cmp	r3, #0
 8007606:	d02d      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007608:	4b6c      	ldr	r3, [pc, #432]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	08db      	lsrs	r3, r3, #3
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	4a6b      	ldr	r2, [pc, #428]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007632:	4b62      	ldr	r3, [pc, #392]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007642:	ed97 6a02 	vldr	s12, [r7, #8]
 8007646:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800764a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007662:	e087      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b51      	ldr	r3, [pc, #324]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a02 	vldr	s12, [r7, #8]
 800768a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076a6:	e065      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b40      	ldr	r3, [pc, #256]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ea:	e043      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b2f      	ldr	r3, [pc, #188]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007712:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800772e:	e021      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b1e      	ldr	r3, [pc, #120]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a02 	vldr	s12, [r7, #8]
 8007756:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007772:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007774:	4b11      	ldr	r3, [pc, #68]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007778:	0a5b      	lsrs	r3, r3, #9
 800777a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777e:	3301      	adds	r3, #1
 8007780:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800778c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007798:	ee17 3a90 	vmov	r3, s15
 800779c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800779e:	e005      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61bb      	str	r3, [r7, #24]
      break;
 80077a4:	e002      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077a6:	4b07      	ldr	r3, [pc, #28]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077a8:	61bb      	str	r3, [r7, #24]
      break;
 80077aa:	bf00      	nop
  }

  return sysclockfreq;
 80077ac:	69bb      	ldr	r3, [r7, #24]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3724      	adds	r7, #36	@ 0x24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
 80077c0:	03d09000 	.word	0x03d09000
 80077c4:	003d0900 	.word	0x003d0900
 80077c8:	016e3600 	.word	0x016e3600
 80077cc:	46000000 	.word	0x46000000
 80077d0:	4c742400 	.word	0x4c742400
 80077d4:	4a742400 	.word	0x4a742400
 80077d8:	4bb71b00 	.word	0x4bb71b00

080077dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80077e2:	f7ff fe81 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 80077e6:	4602      	mov	r2, r0
 80077e8:	4b10      	ldr	r3, [pc, #64]	@ (800782c <HAL_RCC_GetHCLKFreq+0x50>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	490f      	ldr	r1, [pc, #60]	@ (8007830 <HAL_RCC_GetHCLKFreq+0x54>)
 80077f4:	5ccb      	ldrb	r3, [r1, r3]
 80077f6:	f003 031f 	and.w	r3, r3, #31
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007800:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <HAL_RCC_GetHCLKFreq+0x50>)
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	4a09      	ldr	r2, [pc, #36]	@ (8007830 <HAL_RCC_GetHCLKFreq+0x54>)
 800780a:	5cd3      	ldrb	r3, [r2, r3]
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	4a07      	ldr	r2, [pc, #28]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x58>)
 8007818:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800781a:	4a07      	ldr	r2, [pc, #28]	@ (8007838 <HAL_RCC_GetHCLKFreq+0x5c>)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007820:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <HAL_RCC_GetHCLKFreq+0x58>)
 8007822:	681b      	ldr	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	58024400 	.word	0x58024400
 8007830:	0800ef98 	.word	0x0800ef98
 8007834:	24000004 	.word	0x24000004
 8007838:	24000000 	.word	0x24000000

0800783c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007840:	f7ff ffcc 	bl	80077dc <HAL_RCC_GetHCLKFreq>
 8007844:	4602      	mov	r2, r0
 8007846:	4b06      	ldr	r3, [pc, #24]	@ (8007860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	091b      	lsrs	r3, r3, #4
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	4904      	ldr	r1, [pc, #16]	@ (8007864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007852:	5ccb      	ldrb	r3, [r1, r3]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800785c:	4618      	mov	r0, r3
 800785e:	bd80      	pop	{r7, pc}
 8007860:	58024400 	.word	0x58024400
 8007864:	0800ef98 	.word	0x0800ef98

08007868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800786c:	f7ff ffb6 	bl	80077dc <HAL_RCC_GetHCLKFreq>
 8007870:	4602      	mov	r2, r0
 8007872:	4b06      	ldr	r3, [pc, #24]	@ (800788c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	4904      	ldr	r1, [pc, #16]	@ (8007890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800787e:	5ccb      	ldrb	r3, [r1, r3]
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007888:	4618      	mov	r0, r3
 800788a:	bd80      	pop	{r7, pc}
 800788c:	58024400 	.word	0x58024400
 8007890:	0800ef98 	.word	0x0800ef98

08007894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	223f      	movs	r2, #63	@ 0x3f
 80078a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f003 0207 	and.w	r2, r3, #7
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80078b0:	4b17      	ldr	r3, [pc, #92]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80078bc:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f003 020f 	and.w	r2, r3, #15
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80078d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80078e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80078ec:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <HAL_RCC_GetClockConfig+0x7c>)
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078f8:	4b06      	ldr	r3, [pc, #24]	@ (8007914 <HAL_RCC_GetClockConfig+0x80>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	601a      	str	r2, [r3, #0]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	58024400 	.word	0x58024400
 8007914:	52002000 	.word	0x52002000

08007918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800791c:	b0c8      	sub	sp, #288	@ 0x120
 800791e:	af00      	add	r7, sp, #0
 8007920:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007924:	2300      	movs	r3, #0
 8007926:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800792a:	2300      	movs	r3, #0
 800792c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800793c:	2500      	movs	r5, #0
 800793e:	ea54 0305 	orrs.w	r3, r4, r5
 8007942:	d049      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800794e:	d02f      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007950:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007954:	d828      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800795a:	d01a      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800795c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007960:	d822      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800796a:	d007      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800796c:	e01c      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	4aa6      	ldr	r2, [pc, #664]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800797a:	e01a      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800797c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007980:	3308      	adds	r3, #8
 8007982:	2102      	movs	r1, #2
 8007984:	4618      	mov	r0, r3
 8007986:	f001 fc43 	bl	8009210 <RCCEx_PLL2_Config>
 800798a:	4603      	mov	r3, r0
 800798c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007990:	e00f      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007996:	3328      	adds	r3, #40	@ 0x28
 8007998:	2102      	movs	r1, #2
 800799a:	4618      	mov	r0, r3
 800799c:	f001 fcea 	bl	8009374 <RCCEx_PLL3_Config>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079a6:	e004      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079ae:	e000      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80079b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079ba:	4b94      	ldr	r3, [pc, #592]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c8:	4a90      	ldr	r2, [pc, #576]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ca:	430b      	orrs	r3, r1
 80079cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80079ce:	e003      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80079e4:	f04f 0900 	mov.w	r9, #0
 80079e8:	ea58 0309 	orrs.w	r3, r8, r9
 80079ec:	d047      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80079ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d82a      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80079f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a15 	.word	0x08007a15
 8007a04:	08007a23 	.word	0x08007a23
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a57 	.word	0x08007a57
 8007a10:	08007a57 	.word	0x08007a57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a14:	4b7d      	ldr	r3, [pc, #500]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4a7c      	ldr	r2, [pc, #496]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a20:	e01a      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a26:	3308      	adds	r3, #8
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 fbf0 	bl	8009210 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a36:	e00f      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a3c:	3328      	adds	r3, #40	@ 0x28
 8007a3e:	2100      	movs	r1, #0
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 fc97 	bl	8009374 <RCCEx_PLL3_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a4c:	e004      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a54:	e000      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a60:	4b6a      	ldr	r3, [pc, #424]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a64:	f023 0107 	bic.w	r1, r3, #7
 8007a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6e:	4a67      	ldr	r2, [pc, #412]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a70:	430b      	orrs	r3, r1
 8007a72:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a74:	e003      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007a8a:	f04f 0b00 	mov.w	fp, #0
 8007a8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a92:	d054      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a9a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a9e:	d036      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007aa0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007aa4:	d82f      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aaa:	d032      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab0:	d829      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab4:	d02f      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab8:	d825      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007aba:	2b80      	cmp	r3, #128	@ 0x80
 8007abc:	d018      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007abe:	2b80      	cmp	r3, #128	@ 0x80
 8007ac0:	d821      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007ac6:	2b40      	cmp	r3, #64	@ 0x40
 8007ac8:	d007      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007aca:	e01c      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007acc:	4b4f      	ldr	r3, [pc, #316]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	4a4e      	ldr	r2, [pc, #312]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007ad8:	e01e      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ade:	3308      	adds	r3, #8
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 fb94 	bl	8009210 <RCCEx_PLL2_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007aee:	e013      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007af4:	3328      	adds	r3, #40	@ 0x28
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 fc3b 	bl	8009374 <RCCEx_PLL3_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007b04:	e008      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b0c:	e004      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007b0e:	bf00      	nop
 8007b10:	e002      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007b12:	bf00      	nop
 8007b14:	e000      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007b20:	4b3a      	ldr	r3, [pc, #232]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b24:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b2e:	4a37      	ldr	r2, [pc, #220]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b34:	e003      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007b4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	d05c      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b64:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007b68:	d03b      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b6a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007b6e:	d834      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b74:	d037      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b7a:	d82e      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b80:	d033      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007b82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b86:	d828      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b8c:	d01a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b92:	d822      	bhi.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b9c:	d007      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007b9e:	e01c      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	4a19      	ldr	r2, [pc, #100]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007bac:	e01e      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 fb2a 	bl	8009210 <RCCEx_PLL2_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007bc2:	e013      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc8:	3328      	adds	r3, #40	@ 0x28
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 fbd1 	bl	8009374 <RCCEx_PLL3_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007bd8:	e008      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007be0:	e004      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007be2:	bf00      	nop
 8007be4:	e002      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007be6:	bf00      	nop
 8007be8:	e000      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10d      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007bf4:	4b05      	ldr	r3, [pc, #20]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c02:	4a02      	ldr	r2, [pc, #8]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007c0a:	bf00      	nop
 8007c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c32:	460b      	mov	r3, r1
 8007c34:	4313      	orrs	r3, r2
 8007c36:	d03a      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3e:	2b30      	cmp	r3, #48	@ 0x30
 8007c40:	d01f      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007c42:	2b30      	cmp	r3, #48	@ 0x30
 8007c44:	d819      	bhi.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d00c      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d815      	bhi.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d019      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d111      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c56:	4bae      	ldr	r3, [pc, #696]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5a:	4aad      	ldr	r2, [pc, #692]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007c62:	e011      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c68:	3308      	adds	r3, #8
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 facf 	bl	8009210 <RCCEx_PLL2_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c80:	e002      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007c82:	bf00      	nop
 8007c84:	e000      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007c90:	4b9f      	ldr	r3, [pc, #636]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9e:	4a9c      	ldr	r2, [pc, #624]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ca4:	e003      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007caa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007cba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007cc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	d051      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cd8:	d035      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cde:	d82e      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007ce0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ce4:	d031      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cea:	d828      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cf0:	d01a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cf6:	d822      	bhi.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d00:	d007      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007d02:	e01c      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d04:	4b82      	ldr	r3, [pc, #520]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	4a81      	ldr	r2, [pc, #516]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d10:	e01c      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d16:	3308      	adds	r3, #8
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 fa78 	bl	8009210 <RCCEx_PLL2_Config>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d26:	e011      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2c:	3328      	adds	r3, #40	@ 0x28
 8007d2e:	2100      	movs	r1, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 fb1f 	bl	8009374 <RCCEx_PLL3_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d3c:	e006      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d44:	e002      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d54:	4b6e      	ldr	r3, [pc, #440]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d62:	4a6b      	ldr	r2, [pc, #428]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d64:	430b      	orrs	r3, r1
 8007d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d68:	e003      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d82:	2300      	movs	r3, #0
 8007d84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	d053      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d9c:	d033      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007da2:	d82c      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007da8:	d02f      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007daa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dae:	d826      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007db4:	d02b      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dba:	d820      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dc0:	d012      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dc6:	d81a      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d022      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd0:	d115      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 fa18 	bl	8009210 <RCCEx_PLL2_Config>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007de6:	e015      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dec:	3328      	adds	r3, #40	@ 0x28
 8007dee:	2101      	movs	r1, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 fabf 	bl	8009374 <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007dfc:	e00a      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e04:	e006      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007e06:	bf00      	nop
 8007e08:	e004      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007e0a:	bf00      	nop
 8007e0c:	e002      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e2a:	4a39      	ldr	r2, [pc, #228]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e30:	e003      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007e46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4313      	orrs	r3, r2
 8007e58:	d060      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e62:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007e66:	d039      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007e68:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007e6c:	d832      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e72:	d035      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e78:	d82c      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7e:	d031      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e84:	d826      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e8a:	d02d      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007e8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e90:	d820      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e96:	d012      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e9c:	d81a      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d024      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ea2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ea6:	d115      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eac:	3308      	adds	r3, #8
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 f9ad 	bl	8009210 <RCCEx_PLL2_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ebc:	e017      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec2:	3328      	adds	r3, #40	@ 0x28
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 fa54 	bl	8009374 <RCCEx_PLL3_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e00c      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007eda:	e008      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007edc:	bf00      	nop
 8007ede:	e006      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e004      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ee4:	bf00      	nop
 8007ee6:	e002      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10e      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ef6:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f06:	4a02      	ldr	r2, [pc, #8]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f0c:	e006      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007f0e:	bf00      	nop
 8007f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007f28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f36:	460b      	mov	r3, r1
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	d037      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f46:	d00e      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f4c:	d816      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d018      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f56:	d111      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f58:	4bc4      	ldr	r3, [pc, #784]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	4ac3      	ldr	r2, [pc, #780]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f64:	e00f      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 f94e 	bl	8009210 <RCCEx_PLL2_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f7a:	e004      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f82:	e000      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f8e:	4bb7      	ldr	r3, [pc, #732]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f9c:	4ab3      	ldr	r2, [pc, #716]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007fc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d039      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d81c      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fdc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08008019 	.word	0x08008019
 8007fe0:	08007fed 	.word	0x08007fed
 8007fe4:	08007ffb 	.word	0x08007ffb
 8007fe8:	08008019 	.word	0x08008019
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fec:	4b9f      	ldr	r3, [pc, #636]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a9e      	ldr	r2, [pc, #632]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ff8:	e00f      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffe:	3308      	adds	r3, #8
 8008000:	2102      	movs	r1, #2
 8008002:	4618      	mov	r0, r3
 8008004:	f001 f904 	bl	8009210 <RCCEx_PLL2_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800800e:	e004      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008016:	e000      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800801a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008022:	4b92      	ldr	r3, [pc, #584]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008026:	f023 0103 	bic.w	r1, r3, #3
 800802a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008030:	4a8e      	ldr	r2, [pc, #568]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008032:	430b      	orrs	r3, r1
 8008034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008036:	e003      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008038:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800803c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800804c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008056:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	f000 8099 	beq.w	8008194 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008062:	4b83      	ldr	r3, [pc, #524]	@ (8008270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a82      	ldr	r2, [pc, #520]	@ (8008270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800806c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800806e:	f7f9 f8ad 	bl	80011cc <HAL_GetTick>
 8008072:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008076:	e00b      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008078:	f7f9 f8a8 	bl	80011cc <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b64      	cmp	r3, #100	@ 0x64
 8008086:	d903      	bls.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800808e:	e005      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008090:	4b77      	ldr	r3, [pc, #476]	@ (8008270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0ed      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800809c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d173      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080a4:	4b71      	ldr	r3, [pc, #452]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080b0:	4053      	eors	r3, r2
 80080b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d015      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080ba:	4b6c      	ldr	r3, [pc, #432]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080c6:	4b69      	ldr	r3, [pc, #420]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ca:	4a68      	ldr	r2, [pc, #416]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080d2:	4b66      	ldr	r3, [pc, #408]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d6:	4a65      	ldr	r2, [pc, #404]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080de:	4a63      	ldr	r2, [pc, #396]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f2:	d118      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f4:	f7f9 f86a 	bl	80011cc <HAL_GetTick>
 80080f8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080fc:	e00d      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080fe:	f7f9 f865 	bl	80011cc <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008108:	1ad2      	subs	r2, r2, r3
 800810a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800810e:	429a      	cmp	r2, r3
 8008110:	d903      	bls.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008118:	e005      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800811a:	4b54      	ldr	r3, [pc, #336]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0eb      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008126:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800812a:	2b00      	cmp	r3, #0
 800812c:	d129      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800812e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800813a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800813e:	d10e      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008140:	4b4a      	ldr	r3, [pc, #296]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008150:	091a      	lsrs	r2, r3, #4
 8008152:	4b48      	ldr	r3, [pc, #288]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008154:	4013      	ands	r3, r2
 8008156:	4a45      	ldr	r2, [pc, #276]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008158:	430b      	orrs	r3, r1
 800815a:	6113      	str	r3, [r2, #16]
 800815c:	e005      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800815e:	4b43      	ldr	r3, [pc, #268]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	4a42      	ldr	r2, [pc, #264]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008164:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008168:	6113      	str	r3, [r2, #16]
 800816a:	4b40      	ldr	r3, [pc, #256]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800816c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800816e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008172:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800817a:	4a3c      	ldr	r2, [pc, #240]	@ (800826c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800817c:	430b      	orrs	r3, r1
 800817e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008180:	e008      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008182:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008186:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800818a:	e003      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008190:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 0301 	and.w	r3, r2, #1
 80081a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081a4:	2300      	movs	r3, #0
 80081a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f000 8090 	beq.w	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80081b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081be:	2b28      	cmp	r3, #40	@ 0x28
 80081c0:	d870      	bhi.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80081c2:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080082ad 	.word	0x080082ad
 80081cc:	080082a5 	.word	0x080082a5
 80081d0:	080082a5 	.word	0x080082a5
 80081d4:	080082a5 	.word	0x080082a5
 80081d8:	080082a5 	.word	0x080082a5
 80081dc:	080082a5 	.word	0x080082a5
 80081e0:	080082a5 	.word	0x080082a5
 80081e4:	080082a5 	.word	0x080082a5
 80081e8:	08008279 	.word	0x08008279
 80081ec:	080082a5 	.word	0x080082a5
 80081f0:	080082a5 	.word	0x080082a5
 80081f4:	080082a5 	.word	0x080082a5
 80081f8:	080082a5 	.word	0x080082a5
 80081fc:	080082a5 	.word	0x080082a5
 8008200:	080082a5 	.word	0x080082a5
 8008204:	080082a5 	.word	0x080082a5
 8008208:	0800828f 	.word	0x0800828f
 800820c:	080082a5 	.word	0x080082a5
 8008210:	080082a5 	.word	0x080082a5
 8008214:	080082a5 	.word	0x080082a5
 8008218:	080082a5 	.word	0x080082a5
 800821c:	080082a5 	.word	0x080082a5
 8008220:	080082a5 	.word	0x080082a5
 8008224:	080082a5 	.word	0x080082a5
 8008228:	080082ad 	.word	0x080082ad
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082a5 	.word	0x080082a5
 8008234:	080082a5 	.word	0x080082a5
 8008238:	080082a5 	.word	0x080082a5
 800823c:	080082a5 	.word	0x080082a5
 8008240:	080082a5 	.word	0x080082a5
 8008244:	080082a5 	.word	0x080082a5
 8008248:	080082ad 	.word	0x080082ad
 800824c:	080082a5 	.word	0x080082a5
 8008250:	080082a5 	.word	0x080082a5
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080082a5 	.word	0x080082a5
 800825c:	080082a5 	.word	0x080082a5
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082a5 	.word	0x080082a5
 8008268:	080082ad 	.word	0x080082ad
 800826c:	58024400 	.word	0x58024400
 8008270:	58024800 	.word	0x58024800
 8008274:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800827c:	3308      	adds	r3, #8
 800827e:	2101      	movs	r1, #1
 8008280:	4618      	mov	r0, r3
 8008282:	f000 ffc5 	bl	8009210 <RCCEx_PLL2_Config>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800828c:	e00f      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800828e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008292:	3328      	adds	r3, #40	@ 0x28
 8008294:	2101      	movs	r1, #1
 8008296:	4618      	mov	r0, r3
 8008298:	f001 f86c 	bl	8009374 <RCCEx_PLL3_Config>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80082a2:	e004      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082aa:	e000      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80082ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082b6:	4bc0      	ldr	r3, [pc, #768]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80082b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80082be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082c6:	4abc      	ldr	r2, [pc, #752]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80082c8:	430b      	orrs	r3, r1
 80082ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80082cc:	e003      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f002 0302 	and.w	r3, r2, #2
 80082e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082e6:	2300      	movs	r3, #0
 80082e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082ec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082f0:	460b      	mov	r3, r1
 80082f2:	4313      	orrs	r3, r2
 80082f4:	d043      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082fe:	2b05      	cmp	r3, #5
 8008300:	d824      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008355 	.word	0x08008355
 800830c:	08008321 	.word	0x08008321
 8008310:	08008337 	.word	0x08008337
 8008314:	08008355 	.word	0x08008355
 8008318:	08008355 	.word	0x08008355
 800831c:	08008355 	.word	0x08008355
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008324:	3308      	adds	r3, #8
 8008326:	2101      	movs	r1, #1
 8008328:	4618      	mov	r0, r3
 800832a:	f000 ff71 	bl	8009210 <RCCEx_PLL2_Config>
 800832e:	4603      	mov	r3, r0
 8008330:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008334:	e00f      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833a:	3328      	adds	r3, #40	@ 0x28
 800833c:	2101      	movs	r1, #1
 800833e:	4618      	mov	r0, r3
 8008340:	f001 f818 	bl	8009374 <RCCEx_PLL3_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800834a:	e004      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008352:	e000      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800835e:	4b96      	ldr	r3, [pc, #600]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008362:	f023 0107 	bic.w	r1, r3, #7
 8008366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800836a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800836e:	4a92      	ldr	r2, [pc, #584]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008370:	430b      	orrs	r3, r1
 8008372:	6553      	str	r3, [r2, #84]	@ 0x54
 8008374:	e003      	b.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008376:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800837a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800837e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f002 0304 	and.w	r3, r2, #4
 800838a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800838e:	2300      	movs	r3, #0
 8008390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008394:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008398:	460b      	mov	r3, r1
 800839a:	4313      	orrs	r3, r2
 800839c:	d043      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800839e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d824      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80083aa:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	080083fd 	.word	0x080083fd
 80083b4:	080083c9 	.word	0x080083c9
 80083b8:	080083df 	.word	0x080083df
 80083bc:	080083fd 	.word	0x080083fd
 80083c0:	080083fd 	.word	0x080083fd
 80083c4:	080083fd 	.word	0x080083fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083cc:	3308      	adds	r3, #8
 80083ce:	2101      	movs	r1, #1
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 ff1d 	bl	8009210 <RCCEx_PLL2_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083dc:	e00f      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e2:	3328      	adds	r3, #40	@ 0x28
 80083e4:	2101      	movs	r1, #1
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 ffc4 	bl	8009374 <RCCEx_PLL3_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083f2:	e004      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083fa:	e000      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80083fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008406:	4b6c      	ldr	r3, [pc, #432]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	f023 0107 	bic.w	r1, r3, #7
 800840e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008412:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008416:	4a68      	ldr	r2, [pc, #416]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008418:	430b      	orrs	r3, r1
 800841a:	6593      	str	r3, [r2, #88]	@ 0x58
 800841c:	e003      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008422:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f002 0320 	and.w	r3, r2, #32
 8008432:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008436:	2300      	movs	r3, #0
 8008438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800843c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008440:	460b      	mov	r3, r1
 8008442:	4313      	orrs	r3, r2
 8008444:	d055      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800844a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800844e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008452:	d033      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008458:	d82c      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800845a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845e:	d02f      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008464:	d826      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800846a:	d02b      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800846c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008470:	d820      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008476:	d012      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847c:	d81a      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d022      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008486:	d115      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848c:	3308      	adds	r3, #8
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f000 febd 	bl	8009210 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800849c:	e015      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800849e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a2:	3328      	adds	r3, #40	@ 0x28
 80084a4:	2102      	movs	r1, #2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 ff64 	bl	8009374 <RCCEx_PLL3_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80084b2:	e00a      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084ba:	e006      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80084bc:	bf00      	nop
 80084be:	e004      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80084c0:	bf00      	nop
 80084c2:	e002      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80084c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10b      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084d2:	4b39      	ldr	r3, [pc, #228]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80084d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084e2:	4a35      	ldr	r2, [pc, #212]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80084e8:	e003      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80084fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008502:	2300      	movs	r3, #0
 8008504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008508:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800850c:	460b      	mov	r3, r1
 800850e:	4313      	orrs	r3, r2
 8008510:	d058      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800851a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800851e:	d033      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008520:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008524:	d82c      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852a:	d02f      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008530:	d826      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008532:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008536:	d02b      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800853c:	d820      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800853e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008542:	d012      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008548:	d81a      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d022      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800854e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008552:	d115      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008558:	3308      	adds	r3, #8
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fe57 	bl	8009210 <RCCEx_PLL2_Config>
 8008562:	4603      	mov	r3, r0
 8008564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008568:	e015      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800856a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800856e:	3328      	adds	r3, #40	@ 0x28
 8008570:	2102      	movs	r1, #2
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fefe 	bl	8009374 <RCCEx_PLL3_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800857e:	e00a      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008586:	e006      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008588:	bf00      	nop
 800858a:	e004      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800858c:	bf00      	nop
 800858e:	e002      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008590:	bf00      	nop
 8008592:	e000      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008596:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10e      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800859e:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80085a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80085a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80085ae:	4a02      	ldr	r2, [pc, #8]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80085b4:	e006      	b.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80085b6:	bf00      	nop
 80085b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80085d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085d4:	2300      	movs	r3, #0
 80085d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80085de:	460b      	mov	r3, r1
 80085e0:	4313      	orrs	r3, r2
 80085e2:	d055      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80085ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085f0:	d033      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80085f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80085f6:	d82c      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80085f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085fc:	d02f      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80085fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008602:	d826      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008604:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008608:	d02b      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800860a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800860e:	d820      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008614:	d012      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008616:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800861a:	d81a      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d022      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008624:	d115      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800862a:	3308      	adds	r3, #8
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fdee 	bl	8009210 <RCCEx_PLL2_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800863a:	e015      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800863c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008640:	3328      	adds	r3, #40	@ 0x28
 8008642:	2102      	movs	r1, #2
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fe95 	bl	8009374 <RCCEx_PLL3_Config>
 800864a:	4603      	mov	r3, r0
 800864c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008650:	e00a      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008658:	e006      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800865a:	bf00      	nop
 800865c:	e004      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800865e:	bf00      	nop
 8008660:	e002      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008662:	bf00      	nop
 8008664:	e000      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10b      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008670:	4ba1      	ldr	r3, [pc, #644]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008674:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008680:	4a9d      	ldr	r2, [pc, #628]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008682:	430b      	orrs	r3, r1
 8008684:	6593      	str	r3, [r2, #88]	@ 0x58
 8008686:	e003      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800868c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	f002 0308 	and.w	r3, r2, #8
 800869c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086a0:	2300      	movs	r3, #0
 80086a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80086aa:	460b      	mov	r3, r1
 80086ac:	4313      	orrs	r3, r2
 80086ae:	d01e      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80086b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086bc:	d10c      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c2:	3328      	adds	r3, #40	@ 0x28
 80086c4:	2102      	movs	r1, #2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fe54 	bl	8009374 <RCCEx_PLL3_Config>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086d8:	4b87      	ldr	r3, [pc, #540]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086e8:	4a83      	ldr	r2, [pc, #524]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086ea:	430b      	orrs	r3, r1
 80086ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f002 0310 	and.w	r3, r2, #16
 80086fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086fe:	2300      	movs	r3, #0
 8008700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008704:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008708:	460b      	mov	r3, r1
 800870a:	4313      	orrs	r3, r2
 800870c:	d01e      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800870e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871a:	d10c      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800871c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008720:	3328      	adds	r3, #40	@ 0x28
 8008722:	2102      	movs	r1, #2
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fe25 	bl	8009374 <RCCEx_PLL3_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008736:	4b70      	ldr	r3, [pc, #448]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800873e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008742:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008746:	4a6c      	ldr	r2, [pc, #432]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008748:	430b      	orrs	r3, r1
 800874a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800874c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008762:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008766:	460b      	mov	r3, r1
 8008768:	4313      	orrs	r3, r2
 800876a:	d03e      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800876c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008770:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008778:	d022      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800877a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800877e:	d81b      	bhi.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008788:	d00b      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800878a:	e015      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800878c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008790:	3308      	adds	r3, #8
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fd3b 	bl	8009210 <RCCEx_PLL2_Config>
 800879a:	4603      	mov	r3, r0
 800879c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087a0:	e00f      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a6:	3328      	adds	r3, #40	@ 0x28
 80087a8:	2102      	movs	r1, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fde2 	bl	8009374 <RCCEx_PLL3_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80087b6:	e004      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087be:	e000      	b.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80087c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087ca:	4b4b      	ldr	r3, [pc, #300]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80087d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80087da:	4a47      	ldr	r2, [pc, #284]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80087dc:	430b      	orrs	r3, r1
 80087de:	6593      	str	r3, [r2, #88]	@ 0x58
 80087e0:	e003      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80087f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087f8:	2300      	movs	r3, #0
 80087fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008800:	460b      	mov	r3, r1
 8008802:	4313      	orrs	r3, r2
 8008804:	d03b      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008812:	d01f      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008814:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008818:	d818      	bhi.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800881a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800881e:	d003      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008820:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008824:	d007      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008826:	e011      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008828:	4b33      	ldr	r3, [pc, #204]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882c:	4a32      	ldr	r2, [pc, #200]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800882e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008834:	e00f      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883a:	3328      	adds	r3, #40	@ 0x28
 800883c:	2101      	movs	r1, #1
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fd98 	bl	8009374 <RCCEx_PLL3_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800884a:	e004      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008852:	e000      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008856:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800885e:	4b26      	ldr	r3, [pc, #152]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008862:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800886e:	4a22      	ldr	r2, [pc, #136]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008870:	430b      	orrs	r3, r1
 8008872:	6553      	str	r3, [r2, #84]	@ 0x54
 8008874:	e003      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008876:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800887a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800887e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800888a:	673b      	str	r3, [r7, #112]	@ 0x70
 800888c:	2300      	movs	r3, #0
 800888e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008890:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008894:	460b      	mov	r3, r1
 8008896:	4313      	orrs	r3, r2
 8008898:	d034      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800889a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80088a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088a8:	d007      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80088aa:	e011      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ac:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80088ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b0:	4a11      	ldr	r2, [pc, #68]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088b8:	e00e      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088be:	3308      	adds	r3, #8
 80088c0:	2102      	movs	r1, #2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fca4 	bl	8009210 <RCCEx_PLL2_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80088ce:	e003      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10d      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088e0:	4b05      	ldr	r3, [pc, #20]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80088e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	4a02      	ldr	r2, [pc, #8]	@ (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80088f0:	430b      	orrs	r3, r1
 80088f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088f4:	e006      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008900:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008912:	2300      	movs	r3, #0
 8008914:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008916:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800891a:	460b      	mov	r3, r1
 800891c:	4313      	orrs	r3, r2
 800891e:	d00c      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008924:	3328      	adds	r3, #40	@ 0x28
 8008926:	2102      	movs	r1, #2
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fd23 	bl	8009374 <RCCEx_PLL3_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800893a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008946:	663b      	str	r3, [r7, #96]	@ 0x60
 8008948:	2300      	movs	r3, #0
 800894a:	667b      	str	r3, [r7, #100]	@ 0x64
 800894c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008950:	460b      	mov	r3, r1
 8008952:	4313      	orrs	r3, r2
 8008954:	d038      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008962:	d018      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008968:	d811      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800896a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800896e:	d014      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008974:	d80b      	bhi.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d011      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800897a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897e:	d106      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008980:	4bc3      	ldr	r3, [pc, #780]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	4ac2      	ldr	r2, [pc, #776]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800898a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800898c:	e008      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008994:	e004      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008996:	bf00      	nop
 8008998:	e002      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800899a:	bf00      	nop
 800899c:	e000      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800899e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089a8:	4bb9      	ldr	r3, [pc, #740]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b8:	4ab5      	ldr	r2, [pc, #724]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089ba:	430b      	orrs	r3, r1
 80089bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80089be:	e003      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80089d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089d6:	2300      	movs	r3, #0
 80089d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80089de:	460b      	mov	r3, r1
 80089e0:	4313      	orrs	r3, r2
 80089e2:	d009      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089e4:	4baa      	ldr	r3, [pc, #680]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80089ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089f2:	4aa7      	ldr	r2, [pc, #668]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80089f4:	430b      	orrs	r3, r1
 80089f6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a06:	2300      	movs	r3, #0
 8008a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4313      	orrs	r3, r2
 8008a12:	d009      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a14:	4b9e      	ldr	r3, [pc, #632]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a18:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a22:	4a9b      	ldr	r2, [pc, #620]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a36:	2300      	movs	r3, #0
 8008a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d009      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008a44:	4b92      	ldr	r3, [pc, #584]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a48:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a52:	4a8f      	ldr	r2, [pc, #572]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a54:	430b      	orrs	r3, r1
 8008a56:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a66:	2300      	movs	r3, #0
 8008a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d00e      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a74:	4b86      	ldr	r3, [pc, #536]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	4a85      	ldr	r2, [pc, #532]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a7e:	6113      	str	r3, [r2, #16]
 8008a80:	4b83      	ldr	r3, [pc, #524]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a82:	6919      	ldr	r1, [r3, #16]
 8008a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a8c:	4a80      	ldr	r2, [pc, #512]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aae:	4b78      	ldr	r3, [pc, #480]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008abc:	4a74      	ldr	r2, [pc, #464]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d00a      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ade:	4b6c      	ldr	r3, [pc, #432]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aee:	4a68      	ldr	r2, [pc, #416]	@ (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008af0:	430b      	orrs	r3, r1
 8008af2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	2100      	movs	r1, #0
 8008afe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	d011      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b14:	3308      	adds	r3, #8
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fb79 	bl	8009210 <RCCEx_PLL2_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	6239      	str	r1, [r7, #32]
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	d011      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b54:	3308      	adds	r3, #8
 8008b56:	2101      	movs	r1, #1
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fb59 	bl	8009210 <RCCEx_PLL2_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	61b9      	str	r1, [r7, #24]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	d011      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b94:	3308      	adds	r3, #8
 8008b96:	2102      	movs	r1, #2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 fb39 	bl	8009210 <RCCEx_PLL2_Config>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6139      	str	r1, [r7, #16]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	d011      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd4:	3328      	adds	r3, #40	@ 0x28
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fbcb 	bl	8009374 <RCCEx_PLL3_Config>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008be4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	f003 0310 	and.w	r3, r3, #16
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	d011      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c14:	3328      	adds	r3, #40	@ 0x28
 8008c16:	2101      	movs	r1, #1
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fbab 	bl	8009374 <RCCEx_PLL3_Config>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008c24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6039      	str	r1, [r7, #0]
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	607b      	str	r3, [r7, #4]
 8008c46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d011      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c54:	3328      	adds	r3, #40	@ 0x28
 8008c56:	2102      	movs	r1, #2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fb8b 	bl	8009374 <RCCEx_PLL3_Config>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008c64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008c74:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400

08008c94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008c98:	f7fe fda0 	bl	80077dc <HAL_RCC_GetHCLKFreq>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	091b      	lsrs	r3, r3, #4
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	4904      	ldr	r1, [pc, #16]	@ (8008cbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008caa:	5ccb      	ldrb	r3, [r1, r3]
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	0800ef98 	.word	0x0800ef98

08008cc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b089      	sub	sp, #36	@ 0x24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ccc:	f003 0303 	and.w	r3, r3, #3
 8008cd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008cd2:	4b9f      	ldr	r3, [pc, #636]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	0b1b      	lsrs	r3, r3, #12
 8008cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008cde:	4b9c      	ldr	r3, [pc, #624]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce2:	091b      	lsrs	r3, r3, #4
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008cea:	4b99      	ldr	r3, [pc, #612]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cee:	08db      	lsrs	r3, r3, #3
 8008cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8111 	beq.w	8008f30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	f000 8083 	beq.w	8008e1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	f200 80a1 	bhi.w	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d056      	beq.n	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d2a:	e099      	b.n	8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d2c:	4b88      	ldr	r3, [pc, #544]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d02d      	beq.n	8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d38:	4b85      	ldr	r3, [pc, #532]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	08db      	lsrs	r3, r3, #3
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	4a84      	ldr	r2, [pc, #528]	@ (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b7b      	ldr	r3, [pc, #492]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d92:	e087      	b.n	8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b6a      	ldr	r3, [pc, #424]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	e065      	b.n	8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dea:	4b59      	ldr	r3, [pc, #356]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df2:	ee07 3a90 	vmov	s15, r3
 8008df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e1a:	e043      	b.n	8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2e:	4b48      	ldr	r3, [pc, #288]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e5e:	e021      	b.n	8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e72:	4b37      	ldr	r3, [pc, #220]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea8:	0a5b      	lsrs	r3, r3, #9
 8008eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eca:	ee17 2a90 	vmov	r2, s15
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	0c1b      	lsrs	r3, r3, #16
 8008ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef8:	ee17 2a90 	vmov	r2, s15
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008f00:	4b13      	ldr	r3, [pc, #76]	@ (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f04:	0e1b      	lsrs	r3, r3, #24
 8008f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f26:	ee17 2a90 	vmov	r2, s15
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f2e:	e008      	b.n	8008f42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	609a      	str	r2, [r3, #8]
}
 8008f42:	bf00      	nop
 8008f44:	3724      	adds	r7, #36	@ 0x24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	58024400 	.word	0x58024400
 8008f54:	03d09000 	.word	0x03d09000
 8008f58:	46000000 	.word	0x46000000
 8008f5c:	4c742400 	.word	0x4c742400
 8008f60:	4a742400 	.word	0x4a742400
 8008f64:	4bb71b00 	.word	0x4bb71b00

08008f68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b089      	sub	sp, #36	@ 0x24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f70:	4ba1      	ldr	r3, [pc, #644]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f7a:	4b9f      	ldr	r3, [pc, #636]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	0d1b      	lsrs	r3, r3, #20
 8008f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f86:	4b9c      	ldr	r3, [pc, #624]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8a:	0a1b      	lsrs	r3, r3, #8
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f92:	4b99      	ldr	r3, [pc, #612]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8111 	beq.w	80091d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	f000 8083 	beq.w	80090c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	f200 80a1 	bhi.w	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d056      	beq.n	8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fd2:	e099      	b.n	8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd4:	4b88      	ldr	r3, [pc, #544]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d02d      	beq.n	800903c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fe0:	4b85      	ldr	r3, [pc, #532]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	08db      	lsrs	r3, r3, #3
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	4a84      	ldr	r2, [pc, #528]	@ (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	ee07 3a90 	vmov	s15, r3
 8008ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900a:	4b7b      	ldr	r3, [pc, #492]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a03 	vldr	s12, [r7, #12]
 800901e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800903a:	e087      	b.n	800914c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b6a      	ldr	r3, [pc, #424]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009062:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800907e:	e065      	b.n	800914c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b59      	ldr	r3, [pc, #356]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c2:	e043      	b.n	800914c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800920c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d6:	4b48      	ldr	r3, [pc, #288]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009106:	e021      	b.n	800914c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009112:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911a:	4b37      	ldr	r3, [pc, #220]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912a:	ed97 6a03 	vldr	s12, [r7, #12]
 800912e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800914c:	4b2a      	ldr	r3, [pc, #168]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800914e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009150:	0a5b      	lsrs	r3, r3, #9
 8009152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009166:	edd7 6a07 	vldr	s13, [r7, #28]
 800916a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800916e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009172:	ee17 2a90 	vmov	r2, s15
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800917a:	4b1f      	ldr	r3, [pc, #124]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917e:	0c1b      	lsrs	r3, r3, #16
 8009180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009194:	edd7 6a07 	vldr	s13, [r7, #28]
 8009198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800919c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a0:	ee17 2a90 	vmov	r2, s15
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80091a8:	4b13      	ldr	r3, [pc, #76]	@ (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ac:	0e1b      	lsrs	r3, r3, #24
 80091ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ce:	ee17 2a90 	vmov	r2, s15
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091d6:	e008      	b.n	80091ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	609a      	str	r2, [r3, #8]
}
 80091ea:	bf00      	nop
 80091ec:	3724      	adds	r7, #36	@ 0x24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
 80091fc:	03d09000 	.word	0x03d09000
 8009200:	46000000 	.word	0x46000000
 8009204:	4c742400 	.word	0x4c742400
 8009208:	4a742400 	.word	0x4a742400
 800920c:	4bb71b00 	.word	0x4bb71b00

08009210 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800921e:	4b53      	ldr	r3, [pc, #332]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	2b03      	cmp	r3, #3
 8009228:	d101      	bne.n	800922e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e099      	b.n	8009362 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800922e:	4b4f      	ldr	r3, [pc, #316]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a4e      	ldr	r2, [pc, #312]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009234:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800923a:	f7f7 ffc7 	bl	80011cc <HAL_GetTick>
 800923e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009240:	e008      	b.n	8009254 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009242:	f7f7 ffc3 	bl	80011cc <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d901      	bls.n	8009254 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e086      	b.n	8009362 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009254:	4b45      	ldr	r3, [pc, #276]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1f0      	bne.n	8009242 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009260:	4b42      	ldr	r3, [pc, #264]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009264:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	031b      	lsls	r3, r3, #12
 800926e:	493f      	ldr	r1, [pc, #252]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009270:	4313      	orrs	r3, r2
 8009272:	628b      	str	r3, [r1, #40]	@ 0x28
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	3b01      	subs	r3, #1
 800927a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	3b01      	subs	r3, #1
 8009284:	025b      	lsls	r3, r3, #9
 8009286:	b29b      	uxth	r3, r3
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	3b01      	subs	r3, #1
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	3b01      	subs	r3, #1
 800929e:	061b      	lsls	r3, r3, #24
 80092a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092a4:	4931      	ldr	r1, [pc, #196]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092aa:	4b30      	ldr	r3, [pc, #192]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	492d      	ldr	r1, [pc, #180]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092bc:	4b2b      	ldr	r3, [pc, #172]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	f023 0220 	bic.w	r2, r3, #32
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	4928      	ldr	r1, [pc, #160]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092ce:	4b27      	ldr	r3, [pc, #156]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d2:	4a26      	ldr	r2, [pc, #152]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092d4:	f023 0310 	bic.w	r3, r3, #16
 80092d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092da:	4b24      	ldr	r3, [pc, #144]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092de:	4b24      	ldr	r3, [pc, #144]	@ (8009370 <RCCEx_PLL2_Config+0x160>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	69d2      	ldr	r2, [r2, #28]
 80092e6:	00d2      	lsls	r2, r2, #3
 80092e8:	4920      	ldr	r1, [pc, #128]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092ee:	4b1f      	ldr	r3, [pc, #124]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	4a1e      	ldr	r2, [pc, #120]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 80092f4:	f043 0310 	orr.w	r3, r3, #16
 80092f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009300:	4b1a      	ldr	r3, [pc, #104]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009304:	4a19      	ldr	r2, [pc, #100]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009306:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800930a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800930c:	e00f      	b.n	800932e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d106      	bne.n	8009322 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009314:	4b15      	ldr	r3, [pc, #84]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009318:	4a14      	ldr	r2, [pc, #80]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 800931a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800931e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009320:	e005      	b.n	800932e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009322:	4b12      	ldr	r3, [pc, #72]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	4a11      	ldr	r2, [pc, #68]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009328:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800932c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800932e:	4b0f      	ldr	r3, [pc, #60]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a0e      	ldr	r2, [pc, #56]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009334:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800933a:	f7f7 ff47 	bl	80011cc <HAL_GetTick>
 800933e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009340:	e008      	b.n	8009354 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009342:	f7f7 ff43 	bl	80011cc <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e006      	b.n	8009362 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <RCCEx_PLL2_Config+0x15c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0f0      	beq.n	8009342 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	58024400 	.word	0x58024400
 8009370:	ffff0007 	.word	0xffff0007

08009374 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009382:	4b53      	ldr	r3, [pc, #332]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b03      	cmp	r3, #3
 800938c:	d101      	bne.n	8009392 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e099      	b.n	80094c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009392:	4b4f      	ldr	r3, [pc, #316]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4e      	ldr	r2, [pc, #312]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800939c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800939e:	f7f7 ff15 	bl	80011cc <HAL_GetTick>
 80093a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093a4:	e008      	b.n	80093b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093a6:	f7f7 ff11 	bl	80011cc <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d901      	bls.n	80093b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e086      	b.n	80094c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093b8:	4b45      	ldr	r3, [pc, #276]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1f0      	bne.n	80093a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093c4:	4b42      	ldr	r3, [pc, #264]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 80093c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	051b      	lsls	r3, r3, #20
 80093d2:	493f      	ldr	r1, [pc, #252]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	3b01      	subs	r3, #1
 80093de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	025b      	lsls	r3, r3, #9
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	431a      	orrs	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	041b      	lsls	r3, r3, #16
 80093f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	3b01      	subs	r3, #1
 8009402:	061b      	lsls	r3, r3, #24
 8009404:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009408:	4931      	ldr	r1, [pc, #196]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800940a:	4313      	orrs	r3, r2
 800940c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800940e:	4b30      	ldr	r3, [pc, #192]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	492d      	ldr	r1, [pc, #180]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800941c:	4313      	orrs	r3, r2
 800941e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009420:	4b2b      	ldr	r3, [pc, #172]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	4928      	ldr	r1, [pc, #160]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800942e:	4313      	orrs	r3, r2
 8009430:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009432:	4b27      	ldr	r3, [pc, #156]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009436:	4a26      	ldr	r2, [pc, #152]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800943c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800943e:	4b24      	ldr	r3, [pc, #144]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009442:	4b24      	ldr	r3, [pc, #144]	@ (80094d4 <RCCEx_PLL3_Config+0x160>)
 8009444:	4013      	ands	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	69d2      	ldr	r2, [r2, #28]
 800944a:	00d2      	lsls	r2, r2, #3
 800944c:	4920      	ldr	r1, [pc, #128]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800944e:	4313      	orrs	r3, r2
 8009450:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009452:	4b1f      	ldr	r3, [pc, #124]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	4a1e      	ldr	r2, [pc, #120]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800945c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d106      	bne.n	8009472 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009464:	4b1a      	ldr	r3, [pc, #104]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	4a19      	ldr	r2, [pc, #100]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800946a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800946e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009470:	e00f      	b.n	8009492 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d106      	bne.n	8009486 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009478:	4b15      	ldr	r3, [pc, #84]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800947a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947c:	4a14      	ldr	r2, [pc, #80]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800947e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009482:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009484:	e005      	b.n	8009492 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009486:	4b12      	ldr	r3, [pc, #72]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948a:	4a11      	ldr	r2, [pc, #68]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 800948c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009490:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009492:	4b0f      	ldr	r3, [pc, #60]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a0e      	ldr	r2, [pc, #56]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 8009498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800949c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800949e:	f7f7 fe95 	bl	80011cc <HAL_GetTick>
 80094a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094a4:	e008      	b.n	80094b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094a6:	f7f7 fe91 	bl	80011cc <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d901      	bls.n	80094b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e006      	b.n	80094c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094b8:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <RCCEx_PLL3_Config+0x15c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0f0      	beq.n	80094a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	58024400 	.word	0x58024400
 80094d4:	ffff0007 	.word	0xffff0007

080094d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e049      	b.n	800957e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f841 	bl	8009586 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	4619      	mov	r1, r3
 8009516:	4610      	mov	r0, r2
 8009518:	f000 f9e8 	bl	80098ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009586:	b480      	push	{r7}
 8009588:	b083      	sub	sp, #12
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d001      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e054      	b.n	800965e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0201 	orr.w	r2, r2, #1
 80095ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a26      	ldr	r2, [pc, #152]	@ (800966c <HAL_TIM_Base_Start_IT+0xd0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d022      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095de:	d01d      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a22      	ldr	r2, [pc, #136]	@ (8009670 <HAL_TIM_Base_Start_IT+0xd4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d018      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a21      	ldr	r2, [pc, #132]	@ (8009674 <HAL_TIM_Base_Start_IT+0xd8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d013      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009678 <HAL_TIM_Base_Start_IT+0xdc>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d00e      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a1e      	ldr	r2, [pc, #120]	@ (800967c <HAL_TIM_Base_Start_IT+0xe0>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d009      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a1c      	ldr	r2, [pc, #112]	@ (8009680 <HAL_TIM_Base_Start_IT+0xe4>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d004      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x80>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a1b      	ldr	r2, [pc, #108]	@ (8009684 <HAL_TIM_Base_Start_IT+0xe8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d115      	bne.n	8009648 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689a      	ldr	r2, [r3, #8]
 8009622:	4b19      	ldr	r3, [pc, #100]	@ (8009688 <HAL_TIM_Base_Start_IT+0xec>)
 8009624:	4013      	ands	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b06      	cmp	r3, #6
 800962c:	d015      	beq.n	800965a <HAL_TIM_Base_Start_IT+0xbe>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009634:	d011      	beq.n	800965a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0201 	orr.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009646:	e008      	b.n	800965a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0201 	orr.w	r2, r2, #1
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e000      	b.n	800965c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40010000 	.word	0x40010000
 8009670:	40000400 	.word	0x40000400
 8009674:	40000800 	.word	0x40000800
 8009678:	40000c00 	.word	0x40000c00
 800967c:	40010400 	.word	0x40010400
 8009680:	40001800 	.word	0x40001800
 8009684:	40014000 	.word	0x40014000
 8009688:	00010007 	.word	0x00010007

0800968c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d020      	beq.n	80096f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01b      	beq.n	80096f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f06f 0202 	mvn.w	r2, #2
 80096c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f8e9 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 80096dc:	e005      	b.n	80096ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f8db 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f8ec 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d020      	beq.n	800973c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d01b      	beq.n	800973c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0204 	mvn.w	r2, #4
 800970c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2202      	movs	r2, #2
 8009712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8c3 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8b5 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f8c6 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d020      	beq.n	8009788 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01b      	beq.n	8009788 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f06f 0208 	mvn.w	r2, #8
 8009758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2204      	movs	r2, #4
 800975e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f89d 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 8009774:	e005      	b.n	8009782 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f88f 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f8a0 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	2b00      	cmp	r3, #0
 8009790:	d020      	beq.n	80097d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f003 0310 	and.w	r3, r3, #16
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01b      	beq.n	80097d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f06f 0210 	mvn.w	r2, #16
 80097a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2208      	movs	r2, #8
 80097aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f877 	bl	80098ae <HAL_TIM_IC_CaptureCallback>
 80097c0:	e005      	b.n	80097ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f869 	bl	800989a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f87a 	bl	80098c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00c      	beq.n	80097f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d007      	beq.n	80097f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0201 	mvn.w	r2, #1
 80097f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7f7 fa42 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00c      	beq.n	8009826 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009812:	2b00      	cmp	r3, #0
 8009814:	d007      	beq.n	8009826 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800981e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f913 	bl	8009a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00c      	beq.n	800984a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f90b 	bl	8009a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00c      	beq.n	800986e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d007      	beq.n	800986e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f834 	bl	80098d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00c      	beq.n	8009892 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d007      	beq.n	8009892 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f06f 0220 	mvn.w	r2, #32
 800988a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f8d3 	bl	8009a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a46      	ldr	r2, [pc, #280]	@ (8009a18 <TIM_Base_SetConfig+0x12c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d013      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990a:	d00f      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a43      	ldr	r2, [pc, #268]	@ (8009a1c <TIM_Base_SetConfig+0x130>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a42      	ldr	r2, [pc, #264]	@ (8009a20 <TIM_Base_SetConfig+0x134>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a41      	ldr	r2, [pc, #260]	@ (8009a24 <TIM_Base_SetConfig+0x138>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a40      	ldr	r2, [pc, #256]	@ (8009a28 <TIM_Base_SetConfig+0x13c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d108      	bne.n	800993e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a35      	ldr	r2, [pc, #212]	@ (8009a18 <TIM_Base_SetConfig+0x12c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d01f      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994c:	d01b      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a32      	ldr	r2, [pc, #200]	@ (8009a1c <TIM_Base_SetConfig+0x130>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d017      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a31      	ldr	r2, [pc, #196]	@ (8009a20 <TIM_Base_SetConfig+0x134>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d013      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a30      	ldr	r2, [pc, #192]	@ (8009a24 <TIM_Base_SetConfig+0x138>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00f      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a2f      	ldr	r2, [pc, #188]	@ (8009a28 <TIM_Base_SetConfig+0x13c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d00b      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a2e      	ldr	r2, [pc, #184]	@ (8009a2c <TIM_Base_SetConfig+0x140>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d007      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a2d      	ldr	r2, [pc, #180]	@ (8009a30 <TIM_Base_SetConfig+0x144>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d003      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a2c      	ldr	r2, [pc, #176]	@ (8009a34 <TIM_Base_SetConfig+0x148>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d108      	bne.n	8009998 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800998c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a16      	ldr	r2, [pc, #88]	@ (8009a18 <TIM_Base_SetConfig+0x12c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00f      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a18      	ldr	r2, [pc, #96]	@ (8009a28 <TIM_Base_SetConfig+0x13c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00b      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a17      	ldr	r2, [pc, #92]	@ (8009a2c <TIM_Base_SetConfig+0x140>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d007      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a16      	ldr	r2, [pc, #88]	@ (8009a30 <TIM_Base_SetConfig+0x144>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a15      	ldr	r2, [pc, #84]	@ (8009a34 <TIM_Base_SetConfig+0x148>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d103      	bne.n	80099ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d105      	bne.n	8009a0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f023 0201 	bic.w	r2, r3, #1
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	611a      	str	r2, [r3, #16]
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40010400 	.word	0x40010400
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40014400 	.word	0x40014400
 8009a34:	40014800 	.word	0x40014800

08009a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e042      	b.n	8009b0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d106      	bne.n	8009a9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7f7 faab 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2224      	movs	r2, #36	@ 0x24
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0201 	bic.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 fafc 	bl	800b0bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fc8d 	bl	800a3e4 <UART_SetConfig>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d101      	bne.n	8009ad4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e01b      	b.n	8009b0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0201 	orr.w	r2, r2, #1
 8009b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 fb7b 	bl	800b200 <UART_CheckIdleState>
 8009b0a:	4603      	mov	r3, r0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08a      	sub	sp, #40	@ 0x28
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d17b      	bne.n	8009c26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <HAL_UART_Transmit+0x26>
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e074      	b.n	8009c28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2221      	movs	r2, #33	@ 0x21
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b4e:	f7f7 fb3d 	bl	80011cc <HAL_GetTick>
 8009b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	88fa      	ldrh	r2, [r7, #6]
 8009b58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	88fa      	ldrh	r2, [r7, #6]
 8009b60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b6c:	d108      	bne.n	8009b80 <HAL_UART_Transmit+0x6c>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	e003      	b.n	8009b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b88:	e030      	b.n	8009bec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2200      	movs	r2, #0
 8009b92:	2180      	movs	r1, #128	@ 0x80
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f001 fbdd 	bl	800b354 <UART_WaitOnFlagUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e03d      	b.n	8009c28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	3302      	adds	r3, #2
 8009bc6:	61bb      	str	r3, [r7, #24]
 8009bc8:	e007      	b.n	8009bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	781a      	ldrb	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	3b01      	subs	r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1c8      	bne.n	8009b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2140      	movs	r1, #64	@ 0x40
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f001 fba6 	bl	800b354 <UART_WaitOnFlagUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d005      	beq.n	8009c1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e006      	b.n	8009c28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	e000      	b.n	8009c28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c26:	2302      	movs	r3, #2
  }
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3720      	adds	r7, #32
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b0ba      	sub	sp, #232	@ 0xe8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009c5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c5e:	4013      	ands	r3, r2
 8009c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d11b      	bne.n	8009ca4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c70:	f003 0320 	and.w	r3, r3, #32
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d015      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8377 	beq.w	800a388 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	4798      	blx	r3
      }
      return;
 8009ca2:	e371      	b.n	800a388 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 8123 	beq.w	8009ef4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009cae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8009ee8 <HAL_UART_IRQHandler+0x2b8>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d106      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8009eec <HAL_UART_IRQHandler+0x2bc>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 8116 	beq.w	8009ef4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d011      	beq.n	8009cf8 <HAL_UART_IRQHandler+0xc8>
 8009cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cee:	f043 0201 	orr.w	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cfc:	f003 0302 	and.w	r3, r3, #2
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d011      	beq.n	8009d28 <HAL_UART_IRQHandler+0xf8>
 8009d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2202      	movs	r2, #2
 8009d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d1e:	f043 0204 	orr.w	r2, r3, #4
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2c:	f003 0304 	and.w	r3, r3, #4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d011      	beq.n	8009d58 <HAL_UART_IRQHandler+0x128>
 8009d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2204      	movs	r2, #4
 8009d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d4e:	f043 0202 	orr.w	r2, r3, #2
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d017      	beq.n	8009d94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d68:	f003 0320 	and.w	r3, r3, #32
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d105      	bne.n	8009d7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d74:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee8 <HAL_UART_IRQHandler+0x2b8>)
 8009d76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2208      	movs	r2, #8
 8009d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d8a:	f043 0208 	orr.w	r2, r3, #8
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d012      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x196>
 8009da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009da4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00c      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dbc:	f043 0220 	orr.w	r2, r3, #32
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 82dd 	beq.w	800a38c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d013      	beq.n	8009e06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d105      	bne.n	8009df6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e1a:	2b40      	cmp	r3, #64	@ 0x40
 8009e1c:	d005      	beq.n	8009e2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d054      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fb00 	bl	800b430 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3a:	2b40      	cmp	r3, #64	@ 0x40
 8009e3c:	d146      	bne.n	8009ecc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3308      	adds	r3, #8
 8009e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3308      	adds	r3, #8
 8009e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1d9      	bne.n	8009e3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d017      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ef0 <HAL_UART_IRQHandler+0x2c0>)
 8009e9c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f8 fb93 	bl	80025d0 <HAL_DMA_Abort_IT>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d019      	beq.n	8009ee4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec2:	e00f      	b.n	8009ee4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fa77 	bl	800a3b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eca:	e00b      	b.n	8009ee4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fa73 	bl	800a3b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed2:	e007      	b.n	8009ee4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fa6f 	bl	800a3b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009ee2:	e253      	b.n	800a38c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee4:	bf00      	nop
    return;
 8009ee6:	e251      	b.n	800a38c <HAL_UART_IRQHandler+0x75c>
 8009ee8:	10000001 	.word	0x10000001
 8009eec:	04000120 	.word	0x04000120
 8009ef0:	0800b4fd 	.word	0x0800b4fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	f040 81e7 	bne.w	800a2cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f02:	f003 0310 	and.w	r3, r3, #16
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 81e0 	beq.w	800a2cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 81d9 	beq.w	800a2cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2210      	movs	r2, #16
 8009f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f2c:	2b40      	cmp	r3, #64	@ 0x40
 8009f2e:	f040 8151 	bne.w	800a1d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a96      	ldr	r2, [pc, #600]	@ (800a194 <HAL_UART_IRQHandler+0x564>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d068      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a93      	ldr	r2, [pc, #588]	@ (800a198 <HAL_UART_IRQHandler+0x568>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d061      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a91      	ldr	r2, [pc, #580]	@ (800a19c <HAL_UART_IRQHandler+0x56c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d05a      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a8e      	ldr	r2, [pc, #568]	@ (800a1a0 <HAL_UART_IRQHandler+0x570>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d053      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a8c      	ldr	r2, [pc, #560]	@ (800a1a4 <HAL_UART_IRQHandler+0x574>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d04c      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a89      	ldr	r2, [pc, #548]	@ (800a1a8 <HAL_UART_IRQHandler+0x578>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d045      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a87      	ldr	r2, [pc, #540]	@ (800a1ac <HAL_UART_IRQHandler+0x57c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d03e      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a84      	ldr	r2, [pc, #528]	@ (800a1b0 <HAL_UART_IRQHandler+0x580>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d037      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a82      	ldr	r2, [pc, #520]	@ (800a1b4 <HAL_UART_IRQHandler+0x584>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d030      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a7f      	ldr	r2, [pc, #508]	@ (800a1b8 <HAL_UART_IRQHandler+0x588>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d029      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a7d      	ldr	r2, [pc, #500]	@ (800a1bc <HAL_UART_IRQHandler+0x58c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d022      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a7a      	ldr	r2, [pc, #488]	@ (800a1c0 <HAL_UART_IRQHandler+0x590>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d01b      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a78      	ldr	r2, [pc, #480]	@ (800a1c4 <HAL_UART_IRQHandler+0x594>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d014      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a75      	ldr	r2, [pc, #468]	@ (800a1c8 <HAL_UART_IRQHandler+0x598>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00d      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a73      	ldr	r2, [pc, #460]	@ (800a1cc <HAL_UART_IRQHandler+0x59c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d006      	beq.n	800a012 <HAL_UART_IRQHandler+0x3e2>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a70      	ldr	r2, [pc, #448]	@ (800a1d0 <HAL_UART_IRQHandler+0x5a0>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d106      	bne.n	800a020 <HAL_UART_IRQHandler+0x3f0>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	e005      	b.n	800a02c <HAL_UART_IRQHandler+0x3fc>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 81ab 	beq.w	800a390 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a040:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a044:	429a      	cmp	r2, r3
 800a046:	f080 81a3 	bcs.w	800a390 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a050:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a060:	f000 8087 	beq.w	800a172 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a07c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a08e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a092:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a09a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a0a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1da      	bne.n	800a064 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a0be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a0d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a0d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a0da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a0de:	e841 2300 	strex	r3, r2, [r1]
 800a0e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a0e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e1      	bne.n	800a0ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3308      	adds	r3, #8
 800a10a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a10e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a11c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e3      	bne.n	800a0ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a13e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a140:	f023 0310 	bic.w	r3, r3, #16
 800a144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a152:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a154:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e4      	bne.n	800a130 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f7 ff11 	bl	8001f94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a184:	b29b      	uxth	r3, r3
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f91d 	bl	800a3cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a192:	e0fd      	b.n	800a390 <HAL_UART_IRQHandler+0x760>
 800a194:	40020010 	.word	0x40020010
 800a198:	40020028 	.word	0x40020028
 800a19c:	40020040 	.word	0x40020040
 800a1a0:	40020058 	.word	0x40020058
 800a1a4:	40020070 	.word	0x40020070
 800a1a8:	40020088 	.word	0x40020088
 800a1ac:	400200a0 	.word	0x400200a0
 800a1b0:	400200b8 	.word	0x400200b8
 800a1b4:	40020410 	.word	0x40020410
 800a1b8:	40020428 	.word	0x40020428
 800a1bc:	40020440 	.word	0x40020440
 800a1c0:	40020458 	.word	0x40020458
 800a1c4:	40020470 	.word	0x40020470
 800a1c8:	40020488 	.word	0x40020488
 800a1cc:	400204a0 	.word	0x400204a0
 800a1d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80cf 	beq.w	800a394 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a1f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80ca 	beq.w	800a394 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a222:	647b      	str	r3, [r7, #68]	@ 0x44
 800a224:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e4      	bne.n	800a200 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	623b      	str	r3, [r7, #32]
   return(result);
 800a246:	6a3a      	ldr	r2, [r7, #32]
 800a248:	4b55      	ldr	r3, [pc, #340]	@ (800a3a0 <HAL_UART_IRQHandler+0x770>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3308      	adds	r3, #8
 800a256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a25a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e3      	bne.n	800a236 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2220      	movs	r2, #32
 800a272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	e853 3f00 	ldrex	r3, [r3]
 800a28e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0310 	bic.w	r3, r3, #16
 800a296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	69b9      	ldr	r1, [r7, #24]
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e4      	bne.n	800a282 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f881 	bl	800a3cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2ca:	e063      	b.n	800a394 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00e      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x6c6>
 800a2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d008      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a2ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f001 f945 	bl	800b57e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2f4:	e051      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d014      	beq.n	800a32c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d008      	beq.n	800a32c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d03a      	beq.n	800a398 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
    }
    return;
 800a32a:	e035      	b.n	800a398 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <HAL_UART_IRQHandler+0x71c>
 800a338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a33c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 f8ef 	bl	800b528 <UART_EndTransmit_IT>
    return;
 800a34a:	e026      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a34c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <HAL_UART_IRQHandler+0x73c>
 800a358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a35c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 f91e 	bl	800b5a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a36a:	e016      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d010      	beq.n	800a39a <HAL_UART_IRQHandler+0x76a>
 800a378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	da0c      	bge.n	800a39a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 f906 	bl	800b592 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a386:	e008      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
      return;
 800a388:	bf00      	nop
 800a38a:	e006      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
    return;
 800a38c:	bf00      	nop
 800a38e:	e004      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
      return;
 800a390:	bf00      	nop
 800a392:	e002      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
      return;
 800a394:	bf00      	nop
 800a396:	e000      	b.n	800a39a <HAL_UART_IRQHandler+0x76a>
    return;
 800a398:	bf00      	nop
  }
}
 800a39a:	37e8      	adds	r7, #232	@ 0xe8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	effffffe 	.word	0xeffffffe

0800a3a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3e8:	b092      	sub	sp, #72	@ 0x48
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	431a      	orrs	r2, r3
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	4313      	orrs	r3, r2
 800a40a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	4bbe      	ldr	r3, [pc, #760]	@ (800a70c <UART_SetConfig+0x328>)
 800a414:	4013      	ands	r3, r2
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	6812      	ldr	r2, [r2, #0]
 800a41a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a41c:	430b      	orrs	r3, r1
 800a41e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4ab3      	ldr	r2, [pc, #716]	@ (800a710 <UART_SetConfig+0x32c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d004      	beq.n	800a450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a44c:	4313      	orrs	r3, r2
 800a44e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	4baf      	ldr	r3, [pc, #700]	@ (800a714 <UART_SetConfig+0x330>)
 800a458:	4013      	ands	r3, r2
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	6812      	ldr	r2, [r2, #0]
 800a45e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a460:	430b      	orrs	r3, r1
 800a462:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	f023 010f 	bic.w	r1, r3, #15
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4aa6      	ldr	r2, [pc, #664]	@ (800a718 <UART_SetConfig+0x334>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d177      	bne.n	800a574 <UART_SetConfig+0x190>
 800a484:	4ba5      	ldr	r3, [pc, #660]	@ (800a71c <UART_SetConfig+0x338>)
 800a486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a48c:	2b28      	cmp	r3, #40	@ 0x28
 800a48e:	d86d      	bhi.n	800a56c <UART_SetConfig+0x188>
 800a490:	a201      	add	r2, pc, #4	@ (adr r2, 800a498 <UART_SetConfig+0xb4>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a53d 	.word	0x0800a53d
 800a49c:	0800a56d 	.word	0x0800a56d
 800a4a0:	0800a56d 	.word	0x0800a56d
 800a4a4:	0800a56d 	.word	0x0800a56d
 800a4a8:	0800a56d 	.word	0x0800a56d
 800a4ac:	0800a56d 	.word	0x0800a56d
 800a4b0:	0800a56d 	.word	0x0800a56d
 800a4b4:	0800a56d 	.word	0x0800a56d
 800a4b8:	0800a545 	.word	0x0800a545
 800a4bc:	0800a56d 	.word	0x0800a56d
 800a4c0:	0800a56d 	.word	0x0800a56d
 800a4c4:	0800a56d 	.word	0x0800a56d
 800a4c8:	0800a56d 	.word	0x0800a56d
 800a4cc:	0800a56d 	.word	0x0800a56d
 800a4d0:	0800a56d 	.word	0x0800a56d
 800a4d4:	0800a56d 	.word	0x0800a56d
 800a4d8:	0800a54d 	.word	0x0800a54d
 800a4dc:	0800a56d 	.word	0x0800a56d
 800a4e0:	0800a56d 	.word	0x0800a56d
 800a4e4:	0800a56d 	.word	0x0800a56d
 800a4e8:	0800a56d 	.word	0x0800a56d
 800a4ec:	0800a56d 	.word	0x0800a56d
 800a4f0:	0800a56d 	.word	0x0800a56d
 800a4f4:	0800a56d 	.word	0x0800a56d
 800a4f8:	0800a555 	.word	0x0800a555
 800a4fc:	0800a56d 	.word	0x0800a56d
 800a500:	0800a56d 	.word	0x0800a56d
 800a504:	0800a56d 	.word	0x0800a56d
 800a508:	0800a56d 	.word	0x0800a56d
 800a50c:	0800a56d 	.word	0x0800a56d
 800a510:	0800a56d 	.word	0x0800a56d
 800a514:	0800a56d 	.word	0x0800a56d
 800a518:	0800a55d 	.word	0x0800a55d
 800a51c:	0800a56d 	.word	0x0800a56d
 800a520:	0800a56d 	.word	0x0800a56d
 800a524:	0800a56d 	.word	0x0800a56d
 800a528:	0800a56d 	.word	0x0800a56d
 800a52c:	0800a56d 	.word	0x0800a56d
 800a530:	0800a56d 	.word	0x0800a56d
 800a534:	0800a56d 	.word	0x0800a56d
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e326      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a544:	2304      	movs	r3, #4
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e322      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a54c:	2308      	movs	r3, #8
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e31e      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a554:	2310      	movs	r3, #16
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e31a      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a55c:	2320      	movs	r3, #32
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e316      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a564:	2340      	movs	r3, #64	@ 0x40
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e312      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a56c:	2380      	movs	r3, #128	@ 0x80
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e30e      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a69      	ldr	r2, [pc, #420]	@ (800a720 <UART_SetConfig+0x33c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d130      	bne.n	800a5e0 <UART_SetConfig+0x1fc>
 800a57e:	4b67      	ldr	r3, [pc, #412]	@ (800a71c <UART_SetConfig+0x338>)
 800a580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b05      	cmp	r3, #5
 800a588:	d826      	bhi.n	800a5d8 <UART_SetConfig+0x1f4>
 800a58a:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <UART_SetConfig+0x1ac>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5a9 	.word	0x0800a5a9
 800a594:	0800a5b1 	.word	0x0800a5b1
 800a598:	0800a5b9 	.word	0x0800a5b9
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c9 	.word	0x0800a5c9
 800a5a4:	0800a5d1 	.word	0x0800a5d1
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e2f0      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b6:	e2ec      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5b8:	2308      	movs	r3, #8
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5be:	e2e8      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e2e4      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e2e0      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5d0:	2340      	movs	r3, #64	@ 0x40
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e2dc      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5d8:	2380      	movs	r3, #128	@ 0x80
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e2d8      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a4f      	ldr	r2, [pc, #316]	@ (800a724 <UART_SetConfig+0x340>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d130      	bne.n	800a64c <UART_SetConfig+0x268>
 800a5ea:	4b4c      	ldr	r3, [pc, #304]	@ (800a71c <UART_SetConfig+0x338>)
 800a5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	2b05      	cmp	r3, #5
 800a5f4:	d826      	bhi.n	800a644 <UART_SetConfig+0x260>
 800a5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5fc <UART_SetConfig+0x218>)
 800a5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fc:	0800a615 	.word	0x0800a615
 800a600:	0800a61d 	.word	0x0800a61d
 800a604:	0800a625 	.word	0x0800a625
 800a608:	0800a62d 	.word	0x0800a62d
 800a60c:	0800a635 	.word	0x0800a635
 800a610:	0800a63d 	.word	0x0800a63d
 800a614:	2300      	movs	r3, #0
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61a:	e2ba      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a61c:	2304      	movs	r3, #4
 800a61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a622:	e2b6      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a624:	2308      	movs	r3, #8
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62a:	e2b2      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a62c:	2310      	movs	r3, #16
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e2ae      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a634:	2320      	movs	r3, #32
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e2aa      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a63c:	2340      	movs	r3, #64	@ 0x40
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e2a6      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a644:	2380      	movs	r3, #128	@ 0x80
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e2a2      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a35      	ldr	r2, [pc, #212]	@ (800a728 <UART_SetConfig+0x344>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d130      	bne.n	800a6b8 <UART_SetConfig+0x2d4>
 800a656:	4b31      	ldr	r3, [pc, #196]	@ (800a71c <UART_SetConfig+0x338>)
 800a658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65a:	f003 0307 	and.w	r3, r3, #7
 800a65e:	2b05      	cmp	r3, #5
 800a660:	d826      	bhi.n	800a6b0 <UART_SetConfig+0x2cc>
 800a662:	a201      	add	r2, pc, #4	@ (adr r2, 800a668 <UART_SetConfig+0x284>)
 800a664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a668:	0800a681 	.word	0x0800a681
 800a66c:	0800a689 	.word	0x0800a689
 800a670:	0800a691 	.word	0x0800a691
 800a674:	0800a699 	.word	0x0800a699
 800a678:	0800a6a1 	.word	0x0800a6a1
 800a67c:	0800a6a9 	.word	0x0800a6a9
 800a680:	2300      	movs	r3, #0
 800a682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a686:	e284      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a688:	2304      	movs	r3, #4
 800a68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68e:	e280      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a690:	2308      	movs	r3, #8
 800a692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a696:	e27c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a698:	2310      	movs	r3, #16
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69e:	e278      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a6a0:	2320      	movs	r3, #32
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a6:	e274      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a6a8:	2340      	movs	r3, #64	@ 0x40
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e270      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a6b0:	2380      	movs	r3, #128	@ 0x80
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e26c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a72c <UART_SetConfig+0x348>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d142      	bne.n	800a748 <UART_SetConfig+0x364>
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <UART_SetConfig+0x338>)
 800a6c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b05      	cmp	r3, #5
 800a6cc:	d838      	bhi.n	800a740 <UART_SetConfig+0x35c>
 800a6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d4 <UART_SetConfig+0x2f0>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a6ed 	.word	0x0800a6ed
 800a6d8:	0800a6f5 	.word	0x0800a6f5
 800a6dc:	0800a6fd 	.word	0x0800a6fd
 800a6e0:	0800a705 	.word	0x0800a705
 800a6e4:	0800a731 	.word	0x0800a731
 800a6e8:	0800a739 	.word	0x0800a739
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f2:	e24e      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a6f4:	2304      	movs	r3, #4
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fa:	e24a      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a6fc:	2308      	movs	r3, #8
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a702:	e246      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a704:	2310      	movs	r3, #16
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70a:	e242      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a70c:	cfff69f3 	.word	0xcfff69f3
 800a710:	58000c00 	.word	0x58000c00
 800a714:	11fff4ff 	.word	0x11fff4ff
 800a718:	40011000 	.word	0x40011000
 800a71c:	58024400 	.word	0x58024400
 800a720:	40004400 	.word	0x40004400
 800a724:	40004800 	.word	0x40004800
 800a728:	40004c00 	.word	0x40004c00
 800a72c:	40005000 	.word	0x40005000
 800a730:	2320      	movs	r3, #32
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e22c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a738:	2340      	movs	r3, #64	@ 0x40
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73e:	e228      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a740:	2380      	movs	r3, #128	@ 0x80
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a746:	e224      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4ab1      	ldr	r2, [pc, #708]	@ (800aa14 <UART_SetConfig+0x630>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d176      	bne.n	800a840 <UART_SetConfig+0x45c>
 800a752:	4bb1      	ldr	r3, [pc, #708]	@ (800aa18 <UART_SetConfig+0x634>)
 800a754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a75a:	2b28      	cmp	r3, #40	@ 0x28
 800a75c:	d86c      	bhi.n	800a838 <UART_SetConfig+0x454>
 800a75e:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <UART_SetConfig+0x380>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a809 	.word	0x0800a809
 800a768:	0800a839 	.word	0x0800a839
 800a76c:	0800a839 	.word	0x0800a839
 800a770:	0800a839 	.word	0x0800a839
 800a774:	0800a839 	.word	0x0800a839
 800a778:	0800a839 	.word	0x0800a839
 800a77c:	0800a839 	.word	0x0800a839
 800a780:	0800a839 	.word	0x0800a839
 800a784:	0800a811 	.word	0x0800a811
 800a788:	0800a839 	.word	0x0800a839
 800a78c:	0800a839 	.word	0x0800a839
 800a790:	0800a839 	.word	0x0800a839
 800a794:	0800a839 	.word	0x0800a839
 800a798:	0800a839 	.word	0x0800a839
 800a79c:	0800a839 	.word	0x0800a839
 800a7a0:	0800a839 	.word	0x0800a839
 800a7a4:	0800a819 	.word	0x0800a819
 800a7a8:	0800a839 	.word	0x0800a839
 800a7ac:	0800a839 	.word	0x0800a839
 800a7b0:	0800a839 	.word	0x0800a839
 800a7b4:	0800a839 	.word	0x0800a839
 800a7b8:	0800a839 	.word	0x0800a839
 800a7bc:	0800a839 	.word	0x0800a839
 800a7c0:	0800a839 	.word	0x0800a839
 800a7c4:	0800a821 	.word	0x0800a821
 800a7c8:	0800a839 	.word	0x0800a839
 800a7cc:	0800a839 	.word	0x0800a839
 800a7d0:	0800a839 	.word	0x0800a839
 800a7d4:	0800a839 	.word	0x0800a839
 800a7d8:	0800a839 	.word	0x0800a839
 800a7dc:	0800a839 	.word	0x0800a839
 800a7e0:	0800a839 	.word	0x0800a839
 800a7e4:	0800a829 	.word	0x0800a829
 800a7e8:	0800a839 	.word	0x0800a839
 800a7ec:	0800a839 	.word	0x0800a839
 800a7f0:	0800a839 	.word	0x0800a839
 800a7f4:	0800a839 	.word	0x0800a839
 800a7f8:	0800a839 	.word	0x0800a839
 800a7fc:	0800a839 	.word	0x0800a839
 800a800:	0800a839 	.word	0x0800a839
 800a804:	0800a831 	.word	0x0800a831
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e1c0      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a810:	2304      	movs	r3, #4
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e1bc      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a818:	2308      	movs	r3, #8
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e1b8      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a820:	2310      	movs	r3, #16
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e1b4      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a828:	2320      	movs	r3, #32
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e1b0      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a830:	2340      	movs	r3, #64	@ 0x40
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e1ac      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a838:	2380      	movs	r3, #128	@ 0x80
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e1a8      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a75      	ldr	r2, [pc, #468]	@ (800aa1c <UART_SetConfig+0x638>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d130      	bne.n	800a8ac <UART_SetConfig+0x4c8>
 800a84a:	4b73      	ldr	r3, [pc, #460]	@ (800aa18 <UART_SetConfig+0x634>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f003 0307 	and.w	r3, r3, #7
 800a852:	2b05      	cmp	r3, #5
 800a854:	d826      	bhi.n	800a8a4 <UART_SetConfig+0x4c0>
 800a856:	a201      	add	r2, pc, #4	@ (adr r2, 800a85c <UART_SetConfig+0x478>)
 800a858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85c:	0800a875 	.word	0x0800a875
 800a860:	0800a87d 	.word	0x0800a87d
 800a864:	0800a885 	.word	0x0800a885
 800a868:	0800a88d 	.word	0x0800a88d
 800a86c:	0800a895 	.word	0x0800a895
 800a870:	0800a89d 	.word	0x0800a89d
 800a874:	2300      	movs	r3, #0
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e18a      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a87c:	2304      	movs	r3, #4
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e186      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a884:	2308      	movs	r3, #8
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e182      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a88c:	2310      	movs	r3, #16
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e17e      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a894:	2320      	movs	r3, #32
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e17a      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a89c:	2340      	movs	r3, #64	@ 0x40
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e176      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a8a4:	2380      	movs	r3, #128	@ 0x80
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e172      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a5b      	ldr	r2, [pc, #364]	@ (800aa20 <UART_SetConfig+0x63c>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d130      	bne.n	800a918 <UART_SetConfig+0x534>
 800a8b6:	4b58      	ldr	r3, [pc, #352]	@ (800aa18 <UART_SetConfig+0x634>)
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ba:	f003 0307 	and.w	r3, r3, #7
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	d826      	bhi.n	800a910 <UART_SetConfig+0x52c>
 800a8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c8 <UART_SetConfig+0x4e4>)
 800a8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c8:	0800a8e1 	.word	0x0800a8e1
 800a8cc:	0800a8e9 	.word	0x0800a8e9
 800a8d0:	0800a8f1 	.word	0x0800a8f1
 800a8d4:	0800a8f9 	.word	0x0800a8f9
 800a8d8:	0800a901 	.word	0x0800a901
 800a8dc:	0800a909 	.word	0x0800a909
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e6:	e154      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e150      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a8f0:	2308      	movs	r3, #8
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f6:	e14c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e148      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a900:	2320      	movs	r3, #32
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e144      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a908:	2340      	movs	r3, #64	@ 0x40
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e140      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a910:	2380      	movs	r3, #128	@ 0x80
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e13c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a41      	ldr	r2, [pc, #260]	@ (800aa24 <UART_SetConfig+0x640>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	f040 8082 	bne.w	800aa28 <UART_SetConfig+0x644>
 800a924:	4b3c      	ldr	r3, [pc, #240]	@ (800aa18 <UART_SetConfig+0x634>)
 800a926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a928:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a92c:	2b28      	cmp	r3, #40	@ 0x28
 800a92e:	d86d      	bhi.n	800aa0c <UART_SetConfig+0x628>
 800a930:	a201      	add	r2, pc, #4	@ (adr r2, 800a938 <UART_SetConfig+0x554>)
 800a932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a936:	bf00      	nop
 800a938:	0800a9dd 	.word	0x0800a9dd
 800a93c:	0800aa0d 	.word	0x0800aa0d
 800a940:	0800aa0d 	.word	0x0800aa0d
 800a944:	0800aa0d 	.word	0x0800aa0d
 800a948:	0800aa0d 	.word	0x0800aa0d
 800a94c:	0800aa0d 	.word	0x0800aa0d
 800a950:	0800aa0d 	.word	0x0800aa0d
 800a954:	0800aa0d 	.word	0x0800aa0d
 800a958:	0800a9e5 	.word	0x0800a9e5
 800a95c:	0800aa0d 	.word	0x0800aa0d
 800a960:	0800aa0d 	.word	0x0800aa0d
 800a964:	0800aa0d 	.word	0x0800aa0d
 800a968:	0800aa0d 	.word	0x0800aa0d
 800a96c:	0800aa0d 	.word	0x0800aa0d
 800a970:	0800aa0d 	.word	0x0800aa0d
 800a974:	0800aa0d 	.word	0x0800aa0d
 800a978:	0800a9ed 	.word	0x0800a9ed
 800a97c:	0800aa0d 	.word	0x0800aa0d
 800a980:	0800aa0d 	.word	0x0800aa0d
 800a984:	0800aa0d 	.word	0x0800aa0d
 800a988:	0800aa0d 	.word	0x0800aa0d
 800a98c:	0800aa0d 	.word	0x0800aa0d
 800a990:	0800aa0d 	.word	0x0800aa0d
 800a994:	0800aa0d 	.word	0x0800aa0d
 800a998:	0800a9f5 	.word	0x0800a9f5
 800a99c:	0800aa0d 	.word	0x0800aa0d
 800a9a0:	0800aa0d 	.word	0x0800aa0d
 800a9a4:	0800aa0d 	.word	0x0800aa0d
 800a9a8:	0800aa0d 	.word	0x0800aa0d
 800a9ac:	0800aa0d 	.word	0x0800aa0d
 800a9b0:	0800aa0d 	.word	0x0800aa0d
 800a9b4:	0800aa0d 	.word	0x0800aa0d
 800a9b8:	0800a9fd 	.word	0x0800a9fd
 800a9bc:	0800aa0d 	.word	0x0800aa0d
 800a9c0:	0800aa0d 	.word	0x0800aa0d
 800a9c4:	0800aa0d 	.word	0x0800aa0d
 800a9c8:	0800aa0d 	.word	0x0800aa0d
 800a9cc:	0800aa0d 	.word	0x0800aa0d
 800a9d0:	0800aa0d 	.word	0x0800aa0d
 800a9d4:	0800aa0d 	.word	0x0800aa0d
 800a9d8:	0800aa05 	.word	0x0800aa05
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e2:	e0d6      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	e0d2      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f2:	e0ce      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a9f4:	2310      	movs	r3, #16
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9fa:	e0ca      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800a9fc:	2320      	movs	r3, #32
 800a9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa02:	e0c6      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800aa04:	2340      	movs	r3, #64	@ 0x40
 800aa06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa0a:	e0c2      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800aa0c:	2380      	movs	r3, #128	@ 0x80
 800aa0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa12:	e0be      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800aa14:	40011400 	.word	0x40011400
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	40007800 	.word	0x40007800
 800aa20:	40007c00 	.word	0x40007c00
 800aa24:	40011800 	.word	0x40011800
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4aad      	ldr	r2, [pc, #692]	@ (800ace4 <UART_SetConfig+0x900>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d176      	bne.n	800ab20 <UART_SetConfig+0x73c>
 800aa32:	4bad      	ldr	r3, [pc, #692]	@ (800ace8 <UART_SetConfig+0x904>)
 800aa34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa3a:	2b28      	cmp	r3, #40	@ 0x28
 800aa3c:	d86c      	bhi.n	800ab18 <UART_SetConfig+0x734>
 800aa3e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa44 <UART_SetConfig+0x660>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aae9 	.word	0x0800aae9
 800aa48:	0800ab19 	.word	0x0800ab19
 800aa4c:	0800ab19 	.word	0x0800ab19
 800aa50:	0800ab19 	.word	0x0800ab19
 800aa54:	0800ab19 	.word	0x0800ab19
 800aa58:	0800ab19 	.word	0x0800ab19
 800aa5c:	0800ab19 	.word	0x0800ab19
 800aa60:	0800ab19 	.word	0x0800ab19
 800aa64:	0800aaf1 	.word	0x0800aaf1
 800aa68:	0800ab19 	.word	0x0800ab19
 800aa6c:	0800ab19 	.word	0x0800ab19
 800aa70:	0800ab19 	.word	0x0800ab19
 800aa74:	0800ab19 	.word	0x0800ab19
 800aa78:	0800ab19 	.word	0x0800ab19
 800aa7c:	0800ab19 	.word	0x0800ab19
 800aa80:	0800ab19 	.word	0x0800ab19
 800aa84:	0800aaf9 	.word	0x0800aaf9
 800aa88:	0800ab19 	.word	0x0800ab19
 800aa8c:	0800ab19 	.word	0x0800ab19
 800aa90:	0800ab19 	.word	0x0800ab19
 800aa94:	0800ab19 	.word	0x0800ab19
 800aa98:	0800ab19 	.word	0x0800ab19
 800aa9c:	0800ab19 	.word	0x0800ab19
 800aaa0:	0800ab19 	.word	0x0800ab19
 800aaa4:	0800ab01 	.word	0x0800ab01
 800aaa8:	0800ab19 	.word	0x0800ab19
 800aaac:	0800ab19 	.word	0x0800ab19
 800aab0:	0800ab19 	.word	0x0800ab19
 800aab4:	0800ab19 	.word	0x0800ab19
 800aab8:	0800ab19 	.word	0x0800ab19
 800aabc:	0800ab19 	.word	0x0800ab19
 800aac0:	0800ab19 	.word	0x0800ab19
 800aac4:	0800ab09 	.word	0x0800ab09
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab19 	.word	0x0800ab19
 800aad8:	0800ab19 	.word	0x0800ab19
 800aadc:	0800ab19 	.word	0x0800ab19
 800aae0:	0800ab19 	.word	0x0800ab19
 800aae4:	0800ab11 	.word	0x0800ab11
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaee:	e050      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800aaf0:	2304      	movs	r3, #4
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf6:	e04c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800aaf8:	2308      	movs	r3, #8
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafe:	e048      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab00:	2310      	movs	r3, #16
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab06:	e044      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab08:	2320      	movs	r3, #32
 800ab0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0e:	e040      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab10:	2340      	movs	r3, #64	@ 0x40
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab16:	e03c      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab18:	2380      	movs	r3, #128	@ 0x80
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1e:	e038      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a71      	ldr	r2, [pc, #452]	@ (800acec <UART_SetConfig+0x908>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d130      	bne.n	800ab8c <UART_SetConfig+0x7a8>
 800ab2a:	4b6f      	ldr	r3, [pc, #444]	@ (800ace8 <UART_SetConfig+0x904>)
 800ab2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab2e:	f003 0307 	and.w	r3, r3, #7
 800ab32:	2b05      	cmp	r3, #5
 800ab34:	d826      	bhi.n	800ab84 <UART_SetConfig+0x7a0>
 800ab36:	a201      	add	r2, pc, #4	@ (adr r2, 800ab3c <UART_SetConfig+0x758>)
 800ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3c:	0800ab55 	.word	0x0800ab55
 800ab40:	0800ab5d 	.word	0x0800ab5d
 800ab44:	0800ab65 	.word	0x0800ab65
 800ab48:	0800ab6d 	.word	0x0800ab6d
 800ab4c:	0800ab75 	.word	0x0800ab75
 800ab50:	0800ab7d 	.word	0x0800ab7d
 800ab54:	2302      	movs	r3, #2
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5a:	e01a      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab5c:	2304      	movs	r3, #4
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab62:	e016      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab64:	2308      	movs	r3, #8
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6a:	e012      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab6c:	2310      	movs	r3, #16
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab72:	e00e      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab74:	2320      	movs	r3, #32
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7a:	e00a      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab7c:	2340      	movs	r3, #64	@ 0x40
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab82:	e006      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab84:	2380      	movs	r3, #128	@ 0x80
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8a:	e002      	b.n	800ab92 <UART_SetConfig+0x7ae>
 800ab8c:	2380      	movs	r3, #128	@ 0x80
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a55      	ldr	r2, [pc, #340]	@ (800acec <UART_SetConfig+0x908>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	f040 80f8 	bne.w	800ad8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	dc46      	bgt.n	800ac34 <UART_SetConfig+0x850>
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	db75      	blt.n	800ac96 <UART_SetConfig+0x8b2>
 800abaa:	3b02      	subs	r3, #2
 800abac:	2b1e      	cmp	r3, #30
 800abae:	d872      	bhi.n	800ac96 <UART_SetConfig+0x8b2>
 800abb0:	a201      	add	r2, pc, #4	@ (adr r2, 800abb8 <UART_SetConfig+0x7d4>)
 800abb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb6:	bf00      	nop
 800abb8:	0800ac3b 	.word	0x0800ac3b
 800abbc:	0800ac97 	.word	0x0800ac97
 800abc0:	0800ac43 	.word	0x0800ac43
 800abc4:	0800ac97 	.word	0x0800ac97
 800abc8:	0800ac97 	.word	0x0800ac97
 800abcc:	0800ac97 	.word	0x0800ac97
 800abd0:	0800ac53 	.word	0x0800ac53
 800abd4:	0800ac97 	.word	0x0800ac97
 800abd8:	0800ac97 	.word	0x0800ac97
 800abdc:	0800ac97 	.word	0x0800ac97
 800abe0:	0800ac97 	.word	0x0800ac97
 800abe4:	0800ac97 	.word	0x0800ac97
 800abe8:	0800ac97 	.word	0x0800ac97
 800abec:	0800ac97 	.word	0x0800ac97
 800abf0:	0800ac63 	.word	0x0800ac63
 800abf4:	0800ac97 	.word	0x0800ac97
 800abf8:	0800ac97 	.word	0x0800ac97
 800abfc:	0800ac97 	.word	0x0800ac97
 800ac00:	0800ac97 	.word	0x0800ac97
 800ac04:	0800ac97 	.word	0x0800ac97
 800ac08:	0800ac97 	.word	0x0800ac97
 800ac0c:	0800ac97 	.word	0x0800ac97
 800ac10:	0800ac97 	.word	0x0800ac97
 800ac14:	0800ac97 	.word	0x0800ac97
 800ac18:	0800ac97 	.word	0x0800ac97
 800ac1c:	0800ac97 	.word	0x0800ac97
 800ac20:	0800ac97 	.word	0x0800ac97
 800ac24:	0800ac97 	.word	0x0800ac97
 800ac28:	0800ac97 	.word	0x0800ac97
 800ac2c:	0800ac97 	.word	0x0800ac97
 800ac30:	0800ac89 	.word	0x0800ac89
 800ac34:	2b40      	cmp	r3, #64	@ 0x40
 800ac36:	d02a      	beq.n	800ac8e <UART_SetConfig+0x8aa>
 800ac38:	e02d      	b.n	800ac96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac3a:	f7fe f82b 	bl	8008c94 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac40:	e02f      	b.n	800aca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe f83a 	bl	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac50:	e027      	b.n	800aca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac52:	f107 0318 	add.w	r3, r7, #24
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe f986 	bl	8008f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac60:	e01f      	b.n	800aca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac62:	4b21      	ldr	r3, [pc, #132]	@ (800ace8 <UART_SetConfig+0x904>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ace8 <UART_SetConfig+0x904>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	08db      	lsrs	r3, r3, #3
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	4a1d      	ldr	r2, [pc, #116]	@ (800acf0 <UART_SetConfig+0x90c>)
 800ac7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac80:	e00f      	b.n	800aca2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac82:	4b1b      	ldr	r3, [pc, #108]	@ (800acf0 <UART_SetConfig+0x90c>)
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac86:	e00c      	b.n	800aca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac88:	4b1a      	ldr	r3, [pc, #104]	@ (800acf4 <UART_SetConfig+0x910>)
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e009      	b.n	800aca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac94:	e005      	b.n	800aca2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 81ee 	beq.w	800b086 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acae:	4a12      	ldr	r2, [pc, #72]	@ (800acf8 <UART_SetConfig+0x914>)
 800acb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acb4:	461a      	mov	r2, r3
 800acb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800acbc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	4613      	mov	r3, r2
 800acc4:	005b      	lsls	r3, r3, #1
 800acc6:	4413      	add	r3, r2
 800acc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acca:	429a      	cmp	r2, r3
 800accc:	d305      	bcc.n	800acda <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d910      	bls.n	800acfc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ace0:	e1d1      	b.n	800b086 <UART_SetConfig+0xca2>
 800ace2:	bf00      	nop
 800ace4:	40011c00 	.word	0x40011c00
 800ace8:	58024400 	.word	0x58024400
 800acec:	58000c00 	.word	0x58000c00
 800acf0:	03d09000 	.word	0x03d09000
 800acf4:	003d0900 	.word	0x003d0900
 800acf8:	0800efb0 	.word	0x0800efb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfe:	2200      	movs	r2, #0
 800ad00:	60bb      	str	r3, [r7, #8]
 800ad02:	60fa      	str	r2, [r7, #12]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad08:	4ac0      	ldr	r2, [pc, #768]	@ (800b00c <UART_SetConfig+0xc28>)
 800ad0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	2200      	movs	r2, #0
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad1e:	f7f5 fae7 	bl	80002f0 <__aeabi_uldivmod>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4610      	mov	r0, r2
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	020b      	lsls	r3, r1, #8
 800ad34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad38:	0202      	lsls	r2, r0, #8
 800ad3a:	6979      	ldr	r1, [r7, #20]
 800ad3c:	6849      	ldr	r1, [r1, #4]
 800ad3e:	0849      	lsrs	r1, r1, #1
 800ad40:	2000      	movs	r0, #0
 800ad42:	460c      	mov	r4, r1
 800ad44:	4605      	mov	r5, r0
 800ad46:	eb12 0804 	adds.w	r8, r2, r4
 800ad4a:	eb43 0905 	adc.w	r9, r3, r5
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	469a      	mov	sl, r3
 800ad56:	4693      	mov	fp, r2
 800ad58:	4652      	mov	r2, sl
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	4649      	mov	r1, r9
 800ad60:	f7f5 fac6 	bl	80002f0 <__aeabi_uldivmod>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4613      	mov	r3, r2
 800ad6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad72:	d308      	bcc.n	800ad86 <UART_SetConfig+0x9a2>
 800ad74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad7a:	d204      	bcs.n	800ad86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad82:	60da      	str	r2, [r3, #12]
 800ad84:	e17f      	b.n	800b086 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad8c:	e17b      	b.n	800b086 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad96:	f040 80bd 	bne.w	800af14 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ad9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	dc48      	bgt.n	800ae34 <UART_SetConfig+0xa50>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	db7b      	blt.n	800ae9e <UART_SetConfig+0xaba>
 800ada6:	2b20      	cmp	r3, #32
 800ada8:	d879      	bhi.n	800ae9e <UART_SetConfig+0xaba>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <UART_SetConfig+0x9cc>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800ae3b 	.word	0x0800ae3b
 800adb4:	0800ae43 	.word	0x0800ae43
 800adb8:	0800ae9f 	.word	0x0800ae9f
 800adbc:	0800ae9f 	.word	0x0800ae9f
 800adc0:	0800ae4b 	.word	0x0800ae4b
 800adc4:	0800ae9f 	.word	0x0800ae9f
 800adc8:	0800ae9f 	.word	0x0800ae9f
 800adcc:	0800ae9f 	.word	0x0800ae9f
 800add0:	0800ae5b 	.word	0x0800ae5b
 800add4:	0800ae9f 	.word	0x0800ae9f
 800add8:	0800ae9f 	.word	0x0800ae9f
 800addc:	0800ae9f 	.word	0x0800ae9f
 800ade0:	0800ae9f 	.word	0x0800ae9f
 800ade4:	0800ae9f 	.word	0x0800ae9f
 800ade8:	0800ae9f 	.word	0x0800ae9f
 800adec:	0800ae9f 	.word	0x0800ae9f
 800adf0:	0800ae6b 	.word	0x0800ae6b
 800adf4:	0800ae9f 	.word	0x0800ae9f
 800adf8:	0800ae9f 	.word	0x0800ae9f
 800adfc:	0800ae9f 	.word	0x0800ae9f
 800ae00:	0800ae9f 	.word	0x0800ae9f
 800ae04:	0800ae9f 	.word	0x0800ae9f
 800ae08:	0800ae9f 	.word	0x0800ae9f
 800ae0c:	0800ae9f 	.word	0x0800ae9f
 800ae10:	0800ae9f 	.word	0x0800ae9f
 800ae14:	0800ae9f 	.word	0x0800ae9f
 800ae18:	0800ae9f 	.word	0x0800ae9f
 800ae1c:	0800ae9f 	.word	0x0800ae9f
 800ae20:	0800ae9f 	.word	0x0800ae9f
 800ae24:	0800ae9f 	.word	0x0800ae9f
 800ae28:	0800ae9f 	.word	0x0800ae9f
 800ae2c:	0800ae9f 	.word	0x0800ae9f
 800ae30:	0800ae91 	.word	0x0800ae91
 800ae34:	2b40      	cmp	r3, #64	@ 0x40
 800ae36:	d02e      	beq.n	800ae96 <UART_SetConfig+0xab2>
 800ae38:	e031      	b.n	800ae9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae3a:	f7fc fcff 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 800ae3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae40:	e033      	b.n	800aeaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae42:	f7fc fd11 	bl	8007868 <HAL_RCC_GetPCLK2Freq>
 800ae46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae48:	e02f      	b.n	800aeaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fd ff36 	bl	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae58:	e027      	b.n	800aeaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae5a:	f107 0318 	add.w	r3, r7, #24
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe f882 	bl	8008f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae68:	e01f      	b.n	800aeaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae6a:	4b69      	ldr	r3, [pc, #420]	@ (800b010 <UART_SetConfig+0xc2c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0320 	and.w	r3, r3, #32
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae76:	4b66      	ldr	r3, [pc, #408]	@ (800b010 <UART_SetConfig+0xc2c>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	08db      	lsrs	r3, r3, #3
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	4a64      	ldr	r2, [pc, #400]	@ (800b014 <UART_SetConfig+0xc30>)
 800ae82:	fa22 f303 	lsr.w	r3, r2, r3
 800ae86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae88:	e00f      	b.n	800aeaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ae8a:	4b62      	ldr	r3, [pc, #392]	@ (800b014 <UART_SetConfig+0xc30>)
 800ae8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae8e:	e00c      	b.n	800aeaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae90:	4b61      	ldr	r3, [pc, #388]	@ (800b018 <UART_SetConfig+0xc34>)
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae94:	e009      	b.n	800aeaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9c:	e005      	b.n	800aeaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aeaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 80ea 	beq.w	800b086 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb6:	4a55      	ldr	r2, [pc, #340]	@ (800b00c <UART_SetConfig+0xc28>)
 800aeb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aebc:	461a      	mov	r2, r3
 800aebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aec4:	005a      	lsls	r2, r3, #1
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	085b      	lsrs	r3, r3, #1
 800aecc:	441a      	add	r2, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeda:	2b0f      	cmp	r3, #15
 800aedc:	d916      	bls.n	800af0c <UART_SetConfig+0xb28>
 800aede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aee4:	d212      	bcs.n	800af0c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f023 030f 	bic.w	r3, r3, #15
 800aeee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aefe:	4313      	orrs	r3, r2
 800af00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	e0bc      	b.n	800b086 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af12:	e0b8      	b.n	800b086 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800af18:	2b20      	cmp	r3, #32
 800af1a:	dc4b      	bgt.n	800afb4 <UART_SetConfig+0xbd0>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f2c0 8087 	blt.w	800b030 <UART_SetConfig+0xc4c>
 800af22:	2b20      	cmp	r3, #32
 800af24:	f200 8084 	bhi.w	800b030 <UART_SetConfig+0xc4c>
 800af28:	a201      	add	r2, pc, #4	@ (adr r2, 800af30 <UART_SetConfig+0xb4c>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800afbb 	.word	0x0800afbb
 800af34:	0800afc3 	.word	0x0800afc3
 800af38:	0800b031 	.word	0x0800b031
 800af3c:	0800b031 	.word	0x0800b031
 800af40:	0800afcb 	.word	0x0800afcb
 800af44:	0800b031 	.word	0x0800b031
 800af48:	0800b031 	.word	0x0800b031
 800af4c:	0800b031 	.word	0x0800b031
 800af50:	0800afdb 	.word	0x0800afdb
 800af54:	0800b031 	.word	0x0800b031
 800af58:	0800b031 	.word	0x0800b031
 800af5c:	0800b031 	.word	0x0800b031
 800af60:	0800b031 	.word	0x0800b031
 800af64:	0800b031 	.word	0x0800b031
 800af68:	0800b031 	.word	0x0800b031
 800af6c:	0800b031 	.word	0x0800b031
 800af70:	0800afeb 	.word	0x0800afeb
 800af74:	0800b031 	.word	0x0800b031
 800af78:	0800b031 	.word	0x0800b031
 800af7c:	0800b031 	.word	0x0800b031
 800af80:	0800b031 	.word	0x0800b031
 800af84:	0800b031 	.word	0x0800b031
 800af88:	0800b031 	.word	0x0800b031
 800af8c:	0800b031 	.word	0x0800b031
 800af90:	0800b031 	.word	0x0800b031
 800af94:	0800b031 	.word	0x0800b031
 800af98:	0800b031 	.word	0x0800b031
 800af9c:	0800b031 	.word	0x0800b031
 800afa0:	0800b031 	.word	0x0800b031
 800afa4:	0800b031 	.word	0x0800b031
 800afa8:	0800b031 	.word	0x0800b031
 800afac:	0800b031 	.word	0x0800b031
 800afb0:	0800b023 	.word	0x0800b023
 800afb4:	2b40      	cmp	r3, #64	@ 0x40
 800afb6:	d037      	beq.n	800b028 <UART_SetConfig+0xc44>
 800afb8:	e03a      	b.n	800b030 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afba:	f7fc fc3f 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 800afbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800afc0:	e03c      	b.n	800b03c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afc2:	f7fc fc51 	bl	8007868 <HAL_RCC_GetPCLK2Freq>
 800afc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800afc8:	e038      	b.n	800b03c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fd fe76 	bl	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd8:	e030      	b.n	800b03c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afda:	f107 0318 	add.w	r3, r7, #24
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fd ffc2 	bl	8008f68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afe8:	e028      	b.n	800b03c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afea:	4b09      	ldr	r3, [pc, #36]	@ (800b010 <UART_SetConfig+0xc2c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d012      	beq.n	800b01c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aff6:	4b06      	ldr	r3, [pc, #24]	@ (800b010 <UART_SetConfig+0xc2c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	08db      	lsrs	r3, r3, #3
 800affc:	f003 0303 	and.w	r3, r3, #3
 800b000:	4a04      	ldr	r2, [pc, #16]	@ (800b014 <UART_SetConfig+0xc30>)
 800b002:	fa22 f303 	lsr.w	r3, r2, r3
 800b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b008:	e018      	b.n	800b03c <UART_SetConfig+0xc58>
 800b00a:	bf00      	nop
 800b00c:	0800efb0 	.word	0x0800efb0
 800b010:	58024400 	.word	0x58024400
 800b014:	03d09000 	.word	0x03d09000
 800b018:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b01c:	4b24      	ldr	r3, [pc, #144]	@ (800b0b0 <UART_SetConfig+0xccc>)
 800b01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b020:	e00c      	b.n	800b03c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b022:	4b24      	ldr	r3, [pc, #144]	@ (800b0b4 <UART_SetConfig+0xcd0>)
 800b024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b026:	e009      	b.n	800b03c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b02e:	e005      	b.n	800b03c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b03a:	bf00      	nop
    }

    if (pclk != 0U)
 800b03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d021      	beq.n	800b086 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b046:	4a1c      	ldr	r2, [pc, #112]	@ (800b0b8 <UART_SetConfig+0xcd4>)
 800b048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b050:	fbb3 f2f2 	udiv	r2, r3, r2
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	085b      	lsrs	r3, r3, #1
 800b05a:	441a      	add	r2, r3
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	fbb2 f3f3 	udiv	r3, r2, r3
 800b064:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b068:	2b0f      	cmp	r3, #15
 800b06a:	d909      	bls.n	800b080 <UART_SetConfig+0xc9c>
 800b06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b072:	d205      	bcs.n	800b080 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b076:	b29a      	uxth	r2, r3
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	60da      	str	r2, [r3, #12]
 800b07e:	e002      	b.n	800b086 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	2201      	movs	r2, #1
 800b08a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	2201      	movs	r2, #1
 800b092:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2200      	movs	r2, #0
 800b09a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b0a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3748      	adds	r7, #72	@ 0x48
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0b0:	03d09000 	.word	0x03d09000
 800b0b4:	003d0900 	.word	0x003d0900
 800b0b8:	0800efb0 	.word	0x0800efb0

0800b0bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00a      	beq.n	800b0e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b150:	f003 0310 	and.w	r3, r3, #16
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d01a      	beq.n	800b1d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1ba:	d10a      	bne.n	800b1d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00a      	beq.n	800b1f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	605a      	str	r2, [r3, #4]
  }
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b098      	sub	sp, #96	@ 0x60
 800b204:	af02      	add	r7, sp, #8
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b210:	f7f5 ffdc 	bl	80011cc <HAL_GetTick>
 800b214:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0308 	and.w	r3, r3, #8
 800b220:	2b08      	cmp	r3, #8
 800b222:	d12f      	bne.n	800b284 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b224:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b22c:	2200      	movs	r2, #0
 800b22e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f88e 	bl	800b354 <UART_WaitOnFlagUntilTimeout>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d022      	beq.n	800b284 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b246:	e853 3f00 	ldrex	r3, [r3]
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b252:	653b      	str	r3, [r7, #80]	@ 0x50
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	461a      	mov	r2, r3
 800b25a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b25c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b25e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e6      	bne.n	800b23e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e063      	b.n	800b34c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0304 	and.w	r3, r3, #4
 800b28e:	2b04      	cmp	r3, #4
 800b290:	d149      	bne.n	800b326 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b292:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b29a:	2200      	movs	r2, #0
 800b29c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f857 	bl	800b354 <UART_WaitOnFlagUntilTimeout>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d03c      	beq.n	800b326 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e6      	bne.n	800b2ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2fe:	61fa      	str	r2, [r7, #28]
 800b300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	69b9      	ldr	r1, [r7, #24]
 800b304:	69fa      	ldr	r2, [r7, #28]
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	617b      	str	r3, [r7, #20]
   return(result);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e5      	bne.n	800b2de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2220      	movs	r2, #32
 800b316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e012      	b.n	800b34c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2220      	movs	r2, #32
 800b32a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3758      	adds	r7, #88	@ 0x58
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	4613      	mov	r3, r2
 800b362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b364:	e04f      	b.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d04b      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b36e:	f7f5 ff2d 	bl	80011cc <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d302      	bcc.n	800b384 <UART_WaitOnFlagUntilTimeout+0x30>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e04e      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d037      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2b80      	cmp	r3, #128	@ 0x80
 800b39a:	d034      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b40      	cmp	r3, #64	@ 0x40
 800b3a0:	d031      	beq.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	f003 0308 	and.w	r3, r3, #8
 800b3ac:	2b08      	cmp	r3, #8
 800b3ae:	d110      	bne.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f839 	bl	800b430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e029      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3e0:	d111      	bne.n	800b406 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f81f 	bl	800b430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e00f      	b.n	800b426 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69da      	ldr	r2, [r3, #28]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4013      	ands	r3, r2
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	429a      	cmp	r2, r3
 800b414:	bf0c      	ite	eq
 800b416:	2301      	moveq	r3, #1
 800b418:	2300      	movne	r3, #0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	429a      	cmp	r2, r3
 800b422:	d0a0      	beq.n	800b366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b430:	b480      	push	{r7}
 800b432:	b095      	sub	sp, #84	@ 0x54
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b44c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b456:	643b      	str	r3, [r7, #64]	@ 0x40
 800b458:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b45c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e6      	bne.n	800b438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3308      	adds	r3, #8
 800b470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	61fb      	str	r3, [r7, #28]
   return(result);
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	4b1e      	ldr	r3, [pc, #120]	@ (800b4f8 <UART_EndRxTransfer+0xc8>)
 800b47e:	4013      	ands	r3, r2
 800b480:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3308      	adds	r3, #8
 800b488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b48a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b48c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e5      	bne.n	800b46a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d118      	bne.n	800b4d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f023 0310 	bic.w	r3, r3, #16
 800b4ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6979      	ldr	r1, [r7, #20]
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e6      	bne.n	800b4a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b4ec:	bf00      	nop
 800b4ee:	3754      	adds	r7, #84	@ 0x54
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	effffffe 	.word	0xeffffffe

0800b4fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7fe ff4c 	bl	800a3b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b520:	bf00      	nop
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	61bb      	str	r3, [r7, #24]
 800b550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	6979      	ldr	r1, [r7, #20]
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	613b      	str	r3, [r7, #16]
   return(result);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e6      	bne.n	800b530 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7fe ff17 	bl	800a3a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b576:	bf00      	nop
 800b578:	3720      	adds	r7, #32
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5ae:	bf00      	nop
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e027      	b.n	800b620 <HAL_UARTEx_DisableFifoMode+0x66>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2224      	movs	r2, #36	@ 0x24
 800b5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f022 0201 	bic.w	r2, r2, #1
 800b5f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b5fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2220      	movs	r2, #32
 800b612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d101      	bne.n	800b644 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b640:	2302      	movs	r3, #2
 800b642:	e02d      	b.n	800b6a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2224      	movs	r2, #36	@ 0x24
 800b650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f022 0201 	bic.w	r2, r2, #1
 800b66a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	430a      	orrs	r2, r1
 800b67e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f84f 	bl	800b724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d101      	bne.n	800b6c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e02d      	b.n	800b71c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2224      	movs	r2, #36	@ 0x24
 800b6cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 0201 	bic.w	r2, r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f811 	bl	800b724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2220      	movs	r2, #32
 800b70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b730:	2b00      	cmp	r3, #0
 800b732:	d108      	bne.n	800b746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b744:	e031      	b.n	800b7aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b746:	2310      	movs	r3, #16
 800b748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b74a:	2310      	movs	r3, #16
 800b74c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	0e5b      	lsrs	r3, r3, #25
 800b756:	b2db      	uxtb	r3, r3
 800b758:	f003 0307 	and.w	r3, r3, #7
 800b75c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	0f5b      	lsrs	r3, r3, #29
 800b766:	b2db      	uxtb	r3, r3
 800b768:	f003 0307 	and.w	r3, r3, #7
 800b76c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	7b3a      	ldrb	r2, [r7, #12]
 800b772:	4911      	ldr	r1, [pc, #68]	@ (800b7b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b774:	5c8a      	ldrb	r2, [r1, r2]
 800b776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b77a:	7b3a      	ldrb	r2, [r7, #12]
 800b77c:	490f      	ldr	r1, [pc, #60]	@ (800b7bc <UARTEx_SetNbDataToProcess+0x98>)
 800b77e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b780:	fb93 f3f2 	sdiv	r3, r3, r2
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	7b7a      	ldrb	r2, [r7, #13]
 800b790:	4909      	ldr	r1, [pc, #36]	@ (800b7b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b792:	5c8a      	ldrb	r2, [r1, r2]
 800b794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b798:	7b7a      	ldrb	r2, [r7, #13]
 800b79a:	4908      	ldr	r1, [pc, #32]	@ (800b7bc <UARTEx_SetNbDataToProcess+0x98>)
 800b79c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b79e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b7aa:	bf00      	nop
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	0800efc8 	.word	0x0800efc8
 800b7bc:	0800efd0 	.word	0x0800efd0

0800b7c0 <__NVIC_SetPriority>:
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b7cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	db0a      	blt.n	800b7ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	490c      	ldr	r1, [pc, #48]	@ (800b80c <__NVIC_SetPriority+0x4c>)
 800b7da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7de:	0112      	lsls	r2, r2, #4
 800b7e0:	b2d2      	uxtb	r2, r2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b7e8:	e00a      	b.n	800b800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	4908      	ldr	r1, [pc, #32]	@ (800b810 <__NVIC_SetPriority+0x50>)
 800b7f0:	88fb      	ldrh	r3, [r7, #6]
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	3b04      	subs	r3, #4
 800b7f8:	0112      	lsls	r2, r2, #4
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	440b      	add	r3, r1
 800b7fe:	761a      	strb	r2, [r3, #24]
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	e000e100 	.word	0xe000e100
 800b810:	e000ed00 	.word	0xe000ed00

0800b814 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b818:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <SysTick_Handler+0x1c>)
 800b81a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b81c:	f002 f826 	bl	800d86c <xTaskGetSchedulerState>
 800b820:	4603      	mov	r3, r0
 800b822:	2b01      	cmp	r3, #1
 800b824:	d001      	beq.n	800b82a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b826:	f002 ff1f 	bl	800e668 <xPortSysTickHandler>
  }
}
 800b82a:	bf00      	nop
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	e000e010 	.word	0xe000e010

0800b834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b834:	b580      	push	{r7, lr}
 800b836:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b838:	2100      	movs	r1, #0
 800b83a:	f06f 0004 	mvn.w	r0, #4
 800b83e:	f7ff ffbf 	bl	800b7c0 <__NVIC_SetPriority>
#endif
}
 800b842:	bf00      	nop
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b84e:	f3ef 8305 	mrs	r3, IPSR
 800b852:	603b      	str	r3, [r7, #0]
  return(result);
 800b854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b85a:	f06f 0305 	mvn.w	r3, #5
 800b85e:	607b      	str	r3, [r7, #4]
 800b860:	e00c      	b.n	800b87c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b862:	4b0a      	ldr	r3, [pc, #40]	@ (800b88c <osKernelInitialize+0x44>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d105      	bne.n	800b876 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b86a:	4b08      	ldr	r3, [pc, #32]	@ (800b88c <osKernelInitialize+0x44>)
 800b86c:	2201      	movs	r2, #1
 800b86e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b870:	2300      	movs	r3, #0
 800b872:	607b      	str	r3, [r7, #4]
 800b874:	e002      	b.n	800b87c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b876:	f04f 33ff 	mov.w	r3, #4294967295
 800b87a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b87c:	687b      	ldr	r3, [r7, #4]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	370c      	adds	r7, #12
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	240002c0 	.word	0x240002c0

0800b890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b896:	f3ef 8305 	mrs	r3, IPSR
 800b89a:	603b      	str	r3, [r7, #0]
  return(result);
 800b89c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b8a2:	f06f 0305 	mvn.w	r3, #5
 800b8a6:	607b      	str	r3, [r7, #4]
 800b8a8:	e010      	b.n	800b8cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b8aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d8 <osKernelStart+0x48>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d109      	bne.n	800b8c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b8b2:	f7ff ffbf 	bl	800b834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b8b6:	4b08      	ldr	r3, [pc, #32]	@ (800b8d8 <osKernelStart+0x48>)
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b8bc:	f001 faba 	bl	800ce34 <vTaskStartScheduler>
      stat = osOK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	607b      	str	r3, [r7, #4]
 800b8c4:	e002      	b.n	800b8cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8cc:	687b      	ldr	r3, [r7, #4]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	240002c0 	.word	0x240002c0

0800b8dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08e      	sub	sp, #56	@ 0x38
 800b8e0:	af04      	add	r7, sp, #16
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8ec:	f3ef 8305 	mrs	r3, IPSR
 800b8f0:	617b      	str	r3, [r7, #20]
  return(result);
 800b8f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d17e      	bne.n	800b9f6 <osThreadNew+0x11a>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d07b      	beq.n	800b9f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b8fe:	2380      	movs	r3, #128	@ 0x80
 800b900:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b902:	2318      	movs	r3, #24
 800b904:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b90a:	f04f 33ff 	mov.w	r3, #4294967295
 800b90e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d045      	beq.n	800b9a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <osThreadNew+0x48>
        name = attr->name;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d008      	beq.n	800b94a <osThreadNew+0x6e>
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2b38      	cmp	r3, #56	@ 0x38
 800b93c:	d805      	bhi.n	800b94a <osThreadNew+0x6e>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <osThreadNew+0x72>
        return (NULL);
 800b94a:	2300      	movs	r3, #0
 800b94c:	e054      	b.n	800b9f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	089b      	lsrs	r3, r3, #2
 800b95c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00e      	beq.n	800b984 <osThreadNew+0xa8>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	2ba7      	cmp	r3, #167	@ 0xa7
 800b96c:	d90a      	bls.n	800b984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b972:	2b00      	cmp	r3, #0
 800b974:	d006      	beq.n	800b984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <osThreadNew+0xa8>
        mem = 1;
 800b97e:	2301      	movs	r3, #1
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	e010      	b.n	800b9a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10c      	bne.n	800b9a6 <osThreadNew+0xca>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d108      	bne.n	800b9a6 <osThreadNew+0xca>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d104      	bne.n	800b9a6 <osThreadNew+0xca>
          mem = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	61bb      	str	r3, [r7, #24]
 800b9a0:	e001      	b.n	800b9a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d110      	bne.n	800b9ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9b4:	9202      	str	r2, [sp, #8]
 800b9b6:	9301      	str	r3, [sp, #4]
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	6a3a      	ldr	r2, [r7, #32]
 800b9c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f001 f842 	bl	800ca4c <xTaskCreateStatic>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	613b      	str	r3, [r7, #16]
 800b9cc:	e013      	b.n	800b9f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d110      	bne.n	800b9f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	f107 0310 	add.w	r3, r7, #16
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f001 f890 	bl	800cb0c <xTaskCreate>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d001      	beq.n	800b9f6 <osThreadNew+0x11a>
            hTask = NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b9f6:	693b      	ldr	r3, [r7, #16]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3728      	adds	r7, #40	@ 0x28
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba08:	f3ef 8305 	mrs	r3, IPSR
 800ba0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <osDelay+0x1c>
    stat = osErrorISR;
 800ba14:	f06f 0305 	mvn.w	r3, #5
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e007      	b.n	800ba2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f001 f9ce 	bl	800cdc8 <vTaskDelay>
    }
  }

  return (stat);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
	...

0800ba38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4a07      	ldr	r2, [pc, #28]	@ (800ba64 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	4a06      	ldr	r2, [pc, #24]	@ (800ba68 <vApplicationGetIdleTaskMemory+0x30>)
 800ba4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2280      	movs	r2, #128	@ 0x80
 800ba54:	601a      	str	r2, [r3, #0]
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	240002c4 	.word	0x240002c4
 800ba68:	2400036c 	.word	0x2400036c

0800ba6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a07      	ldr	r2, [pc, #28]	@ (800ba98 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	4a06      	ldr	r2, [pc, #24]	@ (800ba9c <vApplicationGetTimerTaskMemory+0x30>)
 800ba82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba8a:	601a      	str	r2, [r3, #0]
}
 800ba8c:	bf00      	nop
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	2400056c 	.word	0x2400056c
 800ba9c:	24000614 	.word	0x24000614

0800baa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0208 	add.w	r2, r3, #8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f103 0208 	add.w	r2, r3, #8
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f103 0208 	add.w	r2, r3, #8
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800baee:	bf00      	nop
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bafa:	b480      	push	{r7}
 800bafc:	b085      	sub	sp, #20
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	601a      	str	r2, [r3, #0]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb58:	d103      	bne.n	800bb62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	e00c      	b.n	800bb7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3308      	adds	r3, #8
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	e002      	b.n	800bb70 <vListInsert+0x2e>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d2f6      	bcs.n	800bb6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	6892      	ldr	r2, [r2, #8]
 800bbca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6852      	ldr	r2, [r2, #4]
 800bbd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d103      	bne.n	800bbe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	1e5a      	subs	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	e7fd      	b.n	800bc30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc34:	f002 fc88 	bl	800e548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc40:	68f9      	ldr	r1, [r7, #12]
 800bc42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bc44:	fb01 f303 	mul.w	r3, r1, r3
 800bc48:	441a      	add	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	3b01      	subs	r3, #1
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bc6a:	fb01 f303 	mul.w	r3, r1, r3
 800bc6e:	441a      	add	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	22ff      	movs	r2, #255	@ 0xff
 800bc78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	22ff      	movs	r2, #255	@ 0xff
 800bc80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d114      	bne.n	800bcb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01a      	beq.n	800bcc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3310      	adds	r3, #16
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fbca 	bl	800d430 <xTaskRemoveFromEventList>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d012      	beq.n	800bcc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bca2:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd8 <xQueueGenericReset+0xd0>)
 800bca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	e009      	b.n	800bcc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3310      	adds	r3, #16
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fef1 	bl	800baa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3324      	adds	r3, #36	@ 0x24
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff feec 	bl	800baa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bcc8:	f002 fc70 	bl	800e5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bccc:	2301      	movs	r3, #1
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08e      	sub	sp, #56	@ 0x38
 800bce0:	af02      	add	r7, sp, #8
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10b      	bne.n	800bd08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	e7fd      	b.n	800bd04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10b      	bne.n	800bd26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	e7fd      	b.n	800bd22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <xQueueGenericCreateStatic+0x56>
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <xQueueGenericCreateStatic+0x5a>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e000      	b.n	800bd38 <xQueueGenericCreateStatic+0x5c>
 800bd36:	2300      	movs	r3, #0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10b      	bne.n	800bd54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	623b      	str	r3, [r7, #32]
}
 800bd4e:	bf00      	nop
 800bd50:	bf00      	nop
 800bd52:	e7fd      	b.n	800bd50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d102      	bne.n	800bd60 <xQueueGenericCreateStatic+0x84>
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <xQueueGenericCreateStatic+0x88>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e000      	b.n	800bd66 <xQueueGenericCreateStatic+0x8a>
 800bd64:	2300      	movs	r3, #0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10b      	bne.n	800bd82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	61fb      	str	r3, [r7, #28]
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	e7fd      	b.n	800bd7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd82:	2350      	movs	r3, #80	@ 0x50
 800bd84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	2b50      	cmp	r3, #80	@ 0x50
 800bd8a:	d00b      	beq.n	800bda4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	61bb      	str	r3, [r7, #24]
}
 800bd9e:	bf00      	nop
 800bda0:	bf00      	nop
 800bda2:	e7fd      	b.n	800bda0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bda4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00d      	beq.n	800bdcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 f840 	bl	800be4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3730      	adds	r7, #48	@ 0x30
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b08a      	sub	sp, #40	@ 0x28
 800bdda:	af02      	add	r7, sp, #8
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	4613      	mov	r3, r2
 800bde2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	613b      	str	r3, [r7, #16]
}
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
 800be00:	e7fd      	b.n	800bdfe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	fb02 f303 	mul.w	r3, r2, r3
 800be0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	3350      	adds	r3, #80	@ 0x50
 800be10:	4618      	mov	r0, r3
 800be12:	f002 fd9f 	bl	800e954 <pvPortMalloc>
 800be16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d011      	beq.n	800be42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	3350      	adds	r3, #80	@ 0x50
 800be26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be30:	79fa      	ldrb	r2, [r7, #7]
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	4613      	mov	r3, r2
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	68b9      	ldr	r1, [r7, #8]
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f000 f805 	bl	800be4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be42:	69bb      	ldr	r3, [r7, #24]
	}
 800be44:	4618      	mov	r0, r3
 800be46:	3720      	adds	r7, #32
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d103      	bne.n	800be68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	e002      	b.n	800be6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be7a:	2101      	movs	r1, #1
 800be7c:	69b8      	ldr	r0, [r7, #24]
 800be7e:	f7ff fec3 	bl	800bc08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	78fa      	ldrb	r2, [r7, #3]
 800be86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800be92:	b580      	push	{r7, lr}
 800be94:	b086      	sub	sp, #24
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10b      	bne.n	800beba <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	613b      	str	r3, [r7, #16]
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	e7fd      	b.n	800beb6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d90b      	bls.n	800beda <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	60fb      	str	r3, [r7, #12]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800beda:	2202      	movs	r2, #2
 800bedc:	2100      	movs	r1, #0
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff ff79 	bl	800bdd6 <xQueueGenericCreate>
 800bee4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bef2:	697b      	ldr	r3, [r7, #20]
	}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08e      	sub	sp, #56	@ 0x38
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <xQueueGenericSend+0x34>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf2a:	bf00      	nop
 800bf2c:	bf00      	nop
 800bf2e:	e7fd      	b.n	800bf2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d103      	bne.n	800bf3e <xQueueGenericSend+0x42>
 800bf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <xQueueGenericSend+0x46>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e000      	b.n	800bf44 <xQueueGenericSend+0x48>
 800bf42:	2300      	movs	r3, #0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10b      	bne.n	800bf60 <xQueueGenericSend+0x64>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	e7fd      	b.n	800bf5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d103      	bne.n	800bf6e <xQueueGenericSend+0x72>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d101      	bne.n	800bf72 <xQueueGenericSend+0x76>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e000      	b.n	800bf74 <xQueueGenericSend+0x78>
 800bf72:	2300      	movs	r3, #0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10b      	bne.n	800bf90 <xQueueGenericSend+0x94>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	623b      	str	r3, [r7, #32]
}
 800bf8a:	bf00      	nop
 800bf8c:	bf00      	nop
 800bf8e:	e7fd      	b.n	800bf8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf90:	f001 fc6c 	bl	800d86c <xTaskGetSchedulerState>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <xQueueGenericSend+0xa4>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <xQueueGenericSend+0xa8>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <xQueueGenericSend+0xaa>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10b      	bne.n	800bfc2 <xQueueGenericSend+0xc6>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	61fb      	str	r3, [r7, #28]
}
 800bfbc:	bf00      	nop
 800bfbe:	bf00      	nop
 800bfc0:	e7fd      	b.n	800bfbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfc2:	f002 fac1 	bl	800e548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d302      	bcc.n	800bfd8 <xQueueGenericSend+0xdc>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d129      	bne.n	800c02c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	68b9      	ldr	r1, [r7, #8]
 800bfdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfde:	f000 fbc7 	bl	800c770 <prvCopyDataToQueue>
 800bfe2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d010      	beq.n	800c00e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfee:	3324      	adds	r3, #36	@ 0x24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f001 fa1d 	bl	800d430 <xTaskRemoveFromEventList>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d013      	beq.n	800c024 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bffc:	4b3f      	ldr	r3, [pc, #252]	@ (800c0fc <xQueueGenericSend+0x200>)
 800bffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	e00a      	b.n	800c024 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c014:	4b39      	ldr	r3, [pc, #228]	@ (800c0fc <xQueueGenericSend+0x200>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c024:	f002 fac2 	bl	800e5ac <vPortExitCritical>
				return pdPASS;
 800c028:	2301      	movs	r3, #1
 800c02a:	e063      	b.n	800c0f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c032:	f002 fabb 	bl	800e5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c036:	2300      	movs	r3, #0
 800c038:	e05c      	b.n	800c0f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d106      	bne.n	800c04e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c040:	f107 0314 	add.w	r3, r7, #20
 800c044:	4618      	mov	r0, r3
 800c046:	f001 fa59 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c04a:	2301      	movs	r3, #1
 800c04c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c04e:	f002 faad 	bl	800e5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c052:	f000 ff5f 	bl	800cf14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c056:	f002 fa77 	bl	800e548 <vPortEnterCritical>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c060:	b25b      	sxtb	r3, r3
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c066:	d103      	bne.n	800c070 <xQueueGenericSend+0x174>
 800c068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c076:	b25b      	sxtb	r3, r3
 800c078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07c:	d103      	bne.n	800c086 <xQueueGenericSend+0x18a>
 800c07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c086:	f002 fa91 	bl	800e5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c08a:	1d3a      	adds	r2, r7, #4
 800c08c:	f107 0314 	add.w	r3, r7, #20
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f001 fa48 	bl	800d528 <xTaskCheckForTimeOut>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d124      	bne.n	800c0e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c09e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0a0:	f000 fc5e 	bl	800c960 <prvIsQueueFull>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d018      	beq.n	800c0dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ac:	3310      	adds	r3, #16
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 f96a 	bl	800d38c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0ba:	f000 fbe9 	bl	800c890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0be:	f000 ff6f 	bl	800cfa0 <xTaskResumeAll>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f47f af7c 	bne.w	800bfc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c0fc <xQueueGenericSend+0x200>)
 800c0cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	e772      	b.n	800bfc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0de:	f000 fbd7 	bl	800c890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0e2:	f000 ff5d 	bl	800cfa0 <xTaskResumeAll>
 800c0e6:	e76c      	b.n	800bfc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0ea:	f000 fbd1 	bl	800c890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ee:	f000 ff57 	bl	800cfa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3738      	adds	r7, #56	@ 0x38
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b090      	sub	sp, #64	@ 0x40
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10b      	bne.n	800c130 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c12a:	bf00      	nop
 800c12c:	bf00      	nop
 800c12e:	e7fd      	b.n	800c12c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d103      	bne.n	800c13e <xQueueGenericSendFromISR+0x3e>
 800c136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <xQueueGenericSendFromISR+0x42>
 800c13e:	2301      	movs	r3, #1
 800c140:	e000      	b.n	800c144 <xQueueGenericSendFromISR+0x44>
 800c142:	2300      	movs	r3, #0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10b      	bne.n	800c160 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	e7fd      	b.n	800c15c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d103      	bne.n	800c16e <xQueueGenericSendFromISR+0x6e>
 800c166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <xQueueGenericSendFromISR+0x72>
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <xQueueGenericSendFromISR+0x74>
 800c172:	2300      	movs	r3, #0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	623b      	str	r3, [r7, #32]
}
 800c18a:	bf00      	nop
 800c18c:	bf00      	nop
 800c18e:	e7fd      	b.n	800c18c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c190:	f002 fb9e 	bl	800e8d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c194:	f3ef 8211 	mrs	r2, BASEPRI
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	61fa      	str	r2, [r7, #28]
 800c1aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d302      	bcc.n	800c1c2 <xQueueGenericSendFromISR+0xc2>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d12f      	bne.n	800c222 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1d8:	f000 faca 	bl	800c770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e4:	d112      	bne.n	800c20c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d016      	beq.n	800c21c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	3324      	adds	r3, #36	@ 0x24
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f001 f91c 	bl	800d430 <xTaskRemoveFromEventList>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00e      	beq.n	800c21c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	e007      	b.n	800c21c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c20c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c210:	3301      	adds	r3, #1
 800c212:	b2db      	uxtb	r3, r3
 800c214:	b25a      	sxtb	r2, r3
 800c216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c21c:	2301      	movs	r3, #1
 800c21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c220:	e001      	b.n	800c226 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c222:	2300      	movs	r3, #0
 800c224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c228:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c230:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c234:	4618      	mov	r0, r3
 800c236:	3740      	adds	r7, #64	@ 0x40
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08e      	sub	sp, #56	@ 0x38
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10b      	bne.n	800c268 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	623b      	str	r3, [r7, #32]
}
 800c262:	bf00      	nop
 800c264:	bf00      	nop
 800c266:	e7fd      	b.n	800c264 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00b      	beq.n	800c288 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	61fb      	str	r3, [r7, #28]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d103      	bne.n	800c298 <xQueueGiveFromISR+0x5c>
 800c290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <xQueueGiveFromISR+0x60>
 800c298:	2301      	movs	r3, #1
 800c29a:	e000      	b.n	800c29e <xQueueGiveFromISR+0x62>
 800c29c:	2300      	movs	r3, #0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10b      	bne.n	800c2ba <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	61bb      	str	r3, [r7, #24]
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	e7fd      	b.n	800c2b6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2ba:	f002 fb09 	bl	800e8d0 <vPortValidateInterruptPriority>
	__asm volatile
 800c2be:	f3ef 8211 	mrs	r2, BASEPRI
 800c2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	617a      	str	r2, [r7, #20]
 800c2d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d22b      	bcs.n	800c342 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c304:	d112      	bne.n	800c32c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d016      	beq.n	800c33c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	3324      	adds	r3, #36	@ 0x24
 800c312:	4618      	mov	r0, r3
 800c314:	f001 f88c 	bl	800d430 <xTaskRemoveFromEventList>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00e      	beq.n	800c33c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2201      	movs	r2, #1
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	e007      	b.n	800c33c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c330:	3301      	adds	r3, #1
 800c332:	b2db      	uxtb	r3, r3
 800c334:	b25a      	sxtb	r2, r3
 800c336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c33c:	2301      	movs	r3, #1
 800c33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c340:	e001      	b.n	800c346 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c342:	2300      	movs	r3, #0
 800c344:	637b      	str	r3, [r7, #52]	@ 0x34
 800c346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c348:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f383 8811 	msr	BASEPRI, r3
}
 800c350:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c354:	4618      	mov	r0, r3
 800c356:	3738      	adds	r7, #56	@ 0x38
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08c      	sub	sp, #48	@ 0x30
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c368:	2300      	movs	r3, #0
 800c36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <xQueueReceive+0x32>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	623b      	str	r3, [r7, #32]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d103      	bne.n	800c39c <xQueueReceive+0x40>
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <xQueueReceive+0x44>
 800c39c:	2301      	movs	r3, #1
 800c39e:	e000      	b.n	800c3a2 <xQueueReceive+0x46>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10b      	bne.n	800c3be <xQueueReceive+0x62>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	61fb      	str	r3, [r7, #28]
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	e7fd      	b.n	800c3ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3be:	f001 fa55 	bl	800d86c <xTaskGetSchedulerState>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <xQueueReceive+0x72>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <xQueueReceive+0x76>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <xQueueReceive+0x78>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10b      	bne.n	800c3f0 <xQueueReceive+0x94>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	61bb      	str	r3, [r7, #24]
}
 800c3ea:	bf00      	nop
 800c3ec:	bf00      	nop
 800c3ee:	e7fd      	b.n	800c3ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3f0:	f002 f8aa 	bl	800e548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01f      	beq.n	800c440 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c404:	f000 fa1e 	bl	800c844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40a:	1e5a      	subs	r2, r3, #1
 800c40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00f      	beq.n	800c438 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	3310      	adds	r3, #16
 800c41c:	4618      	mov	r0, r3
 800c41e:	f001 f807 	bl	800d430 <xTaskRemoveFromEventList>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d007      	beq.n	800c438 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c428:	4b3c      	ldr	r3, [pc, #240]	@ (800c51c <xQueueReceive+0x1c0>)
 800c42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c42e:	601a      	str	r2, [r3, #0]
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c438:	f002 f8b8 	bl	800e5ac <vPortExitCritical>
				return pdPASS;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e069      	b.n	800c514 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d103      	bne.n	800c44e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c446:	f002 f8b1 	bl	800e5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e062      	b.n	800c514 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c454:	f107 0310 	add.w	r3, r7, #16
 800c458:	4618      	mov	r0, r3
 800c45a:	f001 f84f 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c45e:	2301      	movs	r3, #1
 800c460:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c462:	f002 f8a3 	bl	800e5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c466:	f000 fd55 	bl	800cf14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c46a:	f002 f86d 	bl	800e548 <vPortEnterCritical>
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c474:	b25b      	sxtb	r3, r3
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d103      	bne.n	800c484 <xQueueReceive+0x128>
 800c47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c48a:	b25b      	sxtb	r3, r3
 800c48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c490:	d103      	bne.n	800c49a <xQueueReceive+0x13e>
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c49a:	f002 f887 	bl	800e5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c49e:	1d3a      	adds	r2, r7, #4
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f001 f83e 	bl	800d528 <xTaskCheckForTimeOut>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d123      	bne.n	800c4fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4b4:	f000 fa3e 	bl	800c934 <prvIsQueueEmpty>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d017      	beq.n	800c4ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c0:	3324      	adds	r3, #36	@ 0x24
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 ff60 	bl	800d38c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ce:	f000 f9df 	bl	800c890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d2:	f000 fd65 	bl	800cfa0 <xTaskResumeAll>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d189      	bne.n	800c3f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c51c <xQueueReceive+0x1c0>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	e780      	b.n	800c3f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4f0:	f000 f9ce 	bl	800c890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f4:	f000 fd54 	bl	800cfa0 <xTaskResumeAll>
 800c4f8:	e77a      	b.n	800c3f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4fc:	f000 f9c8 	bl	800c890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c500:	f000 fd4e 	bl	800cfa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c506:	f000 fa15 	bl	800c934 <prvIsQueueEmpty>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f43f af6f 	beq.w	800c3f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c514:	4618      	mov	r0, r3
 800c516:	3730      	adds	r7, #48	@ 0x30
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	e000ed04 	.word	0xe000ed04

0800c520 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08e      	sub	sp, #56	@ 0x38
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c52a:	2300      	movs	r3, #0
 800c52c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c532:	2300      	movs	r3, #0
 800c534:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10b      	bne.n	800c554 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	623b      	str	r3, [r7, #32]
}
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
 800c552:	e7fd      	b.n	800c550 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00b      	beq.n	800c574 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	61fb      	str	r3, [r7, #28]
}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	e7fd      	b.n	800c570 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c574:	f001 f97a 	bl	800d86c <xTaskGetSchedulerState>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d102      	bne.n	800c584 <xQueueSemaphoreTake+0x64>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <xQueueSemaphoreTake+0x68>
 800c584:	2301      	movs	r3, #1
 800c586:	e000      	b.n	800c58a <xQueueSemaphoreTake+0x6a>
 800c588:	2300      	movs	r3, #0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10b      	bne.n	800c5a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	61bb      	str	r3, [r7, #24]
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	e7fd      	b.n	800c5a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5a6:	f001 ffcf 	bl	800e548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d024      	beq.n	800c600 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b8:	1e5a      	subs	r2, r3, #1
 800c5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d104      	bne.n	800c5d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c5c6:	f001 facb 	bl	800db60 <pvTaskIncrementMutexHeldCount>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00f      	beq.n	800c5f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5da:	3310      	adds	r3, #16
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 ff27 	bl	800d430 <xTaskRemoveFromEventList>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d007      	beq.n	800c5f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5e8:	4b54      	ldr	r3, [pc, #336]	@ (800c73c <xQueueSemaphoreTake+0x21c>)
 800c5ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5f8:	f001 ffd8 	bl	800e5ac <vPortExitCritical>
				return pdPASS;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e098      	b.n	800c732 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d112      	bne.n	800c62c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	617b      	str	r3, [r7, #20]
}
 800c61e:	bf00      	nop
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c624:	f001 ffc2 	bl	800e5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c628:	2300      	movs	r3, #0
 800c62a:	e082      	b.n	800c732 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c632:	f107 030c 	add.w	r3, r7, #12
 800c636:	4618      	mov	r0, r3
 800c638:	f000 ff60 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c63c:	2301      	movs	r3, #1
 800c63e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c640:	f001 ffb4 	bl	800e5ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c644:	f000 fc66 	bl	800cf14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c648:	f001 ff7e 	bl	800e548 <vPortEnterCritical>
 800c64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c652:	b25b      	sxtb	r3, r3
 800c654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c658:	d103      	bne.n	800c662 <xQueueSemaphoreTake+0x142>
 800c65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c668:	b25b      	sxtb	r3, r3
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66e:	d103      	bne.n	800c678 <xQueueSemaphoreTake+0x158>
 800c670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c678:	f001 ff98 	bl	800e5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c67c:	463a      	mov	r2, r7
 800c67e:	f107 030c 	add.w	r3, r7, #12
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f000 ff4f 	bl	800d528 <xTaskCheckForTimeOut>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d132      	bne.n	800c6f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c692:	f000 f94f 	bl	800c934 <prvIsQueueEmpty>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d026      	beq.n	800c6ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d109      	bne.n	800c6b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c6a4:	f001 ff50 	bl	800e548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f001 f8fb 	bl	800d8a8 <xTaskPriorityInherit>
 800c6b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c6b4:	f001 ff7a 	bl	800e5ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ba:	3324      	adds	r3, #36	@ 0x24
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	4611      	mov	r1, r2
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 fe63 	bl	800d38c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6c8:	f000 f8e2 	bl	800c890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6cc:	f000 fc68 	bl	800cfa0 <xTaskResumeAll>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f47f af67 	bne.w	800c5a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c6d8:	4b18      	ldr	r3, [pc, #96]	@ (800c73c <xQueueSemaphoreTake+0x21c>)
 800c6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	e75d      	b.n	800c5a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6ec:	f000 f8d0 	bl	800c890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6f0:	f000 fc56 	bl	800cfa0 <xTaskResumeAll>
 800c6f4:	e757      	b.n	800c5a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6f8:	f000 f8ca 	bl	800c890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6fc:	f000 fc50 	bl	800cfa0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c700:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c702:	f000 f917 	bl	800c934 <prvIsQueueEmpty>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f43f af4c 	beq.w	800c5a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00d      	beq.n	800c730 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c714:	f001 ff18 	bl	800e548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c718:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c71a:	f000 f811 	bl	800c740 <prvGetDisinheritPriorityAfterTimeout>
 800c71e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c726:	4618      	mov	r0, r3
 800c728:	f001 f996 	bl	800da58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c72c:	f001 ff3e 	bl	800e5ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c730:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c732:	4618      	mov	r0, r3
 800c734:	3738      	adds	r7, #56	@ 0x38
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	e000ed04 	.word	0xe000ed04

0800c740 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d006      	beq.n	800c75e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	e001      	b.n	800c762 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c762:	68fb      	ldr	r3, [r7, #12]
	}
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c77c:	2300      	movs	r3, #0
 800c77e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10d      	bne.n	800c7aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d14d      	bne.n	800c832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f001 f8ec 	bl	800d978 <xTaskPriorityDisinherit>
 800c7a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	609a      	str	r2, [r3, #8]
 800c7a8:	e043      	b.n	800c832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d119      	bne.n	800c7e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6858      	ldr	r0, [r3, #4]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	f002 fb3c 	bl	800ee38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c8:	441a      	add	r2, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d32b      	bcc.n	800c832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	605a      	str	r2, [r3, #4]
 800c7e2:	e026      	b.n	800c832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	68d8      	ldr	r0, [r3, #12]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	f002 fb22 	bl	800ee38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	68da      	ldr	r2, [r3, #12]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7fc:	425b      	negs	r3, r3
 800c7fe:	441a      	add	r2, r3
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	68da      	ldr	r2, [r3, #12]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d207      	bcs.n	800c820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	689a      	ldr	r2, [r3, #8]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c818:	425b      	negs	r3, r3
 800c81a:	441a      	add	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d105      	bne.n	800c832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	3b01      	subs	r3, #1
 800c830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c83a:	697b      	ldr	r3, [r7, #20]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c852:	2b00      	cmp	r3, #0
 800c854:	d018      	beq.n	800c888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c85e:	441a      	add	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68da      	ldr	r2, [r3, #12]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d303      	bcc.n	800c878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68d9      	ldr	r1, [r3, #12]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c880:	461a      	mov	r2, r3
 800c882:	6838      	ldr	r0, [r7, #0]
 800c884:	f002 fad8 	bl	800ee38 <memcpy>
	}
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c898:	f001 fe56 	bl	800e548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8a4:	e011      	b.n	800c8ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d012      	beq.n	800c8d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3324      	adds	r3, #36	@ 0x24
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fdbc 	bl	800d430 <xTaskRemoveFromEventList>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c8be:	f000 fe97 	bl	800d5f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dce9      	bgt.n	800c8a6 <prvUnlockQueue+0x16>
 800c8d2:	e000      	b.n	800c8d6 <prvUnlockQueue+0x46>
					break;
 800c8d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	22ff      	movs	r2, #255	@ 0xff
 800c8da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c8de:	f001 fe65 	bl	800e5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c8e2:	f001 fe31 	bl	800e548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8ee:	e011      	b.n	800c914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d012      	beq.n	800c91e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3310      	adds	r3, #16
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 fd97 	bl	800d430 <xTaskRemoveFromEventList>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c908:	f000 fe72 	bl	800d5f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
 800c90e:	3b01      	subs	r3, #1
 800c910:	b2db      	uxtb	r3, r3
 800c912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	dce9      	bgt.n	800c8f0 <prvUnlockQueue+0x60>
 800c91c:	e000      	b.n	800c920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c91e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	22ff      	movs	r2, #255	@ 0xff
 800c924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c928:	f001 fe40 	bl	800e5ac <vPortExitCritical>
}
 800c92c:	bf00      	nop
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c93c:	f001 fe04 	bl	800e548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	2b00      	cmp	r3, #0
 800c946:	d102      	bne.n	800c94e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c948:	2301      	movs	r3, #1
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	e001      	b.n	800c952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c94e:	2300      	movs	r3, #0
 800c950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c952:	f001 fe2b 	bl	800e5ac <vPortExitCritical>

	return xReturn;
 800c956:	68fb      	ldr	r3, [r7, #12]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c968:	f001 fdee 	bl	800e548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c974:	429a      	cmp	r2, r3
 800c976:	d102      	bne.n	800c97e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c978:	2301      	movs	r3, #1
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	e001      	b.n	800c982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c982:	f001 fe13 	bl	800e5ac <vPortExitCritical>

	return xReturn;
 800c986:	68fb      	ldr	r3, [r7, #12]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c99a:	2300      	movs	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	e014      	b.n	800c9ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c9a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c9e0 <vQueueAddToRegistry+0x50>)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10b      	bne.n	800c9c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c9ac:	490c      	ldr	r1, [pc, #48]	@ (800c9e0 <vQueueAddToRegistry+0x50>)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c9b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c9e0 <vQueueAddToRegistry+0x50>)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	4413      	add	r3, r2
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c9c2:	e006      	b.n	800c9d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2b07      	cmp	r3, #7
 800c9ce:	d9e7      	bls.n	800c9a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c9d0:	bf00      	nop
 800c9d2:	bf00      	nop
 800c9d4:	3714      	adds	r7, #20
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	24000a14 	.word	0x24000a14

0800c9e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c9f4:	f001 fda8 	bl	800e548 <vPortEnterCritical>
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9fe:	b25b      	sxtb	r3, r3
 800ca00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca04:	d103      	bne.n	800ca0e <vQueueWaitForMessageRestricted+0x2a>
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca14:	b25b      	sxtb	r3, r3
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1a:	d103      	bne.n	800ca24 <vQueueWaitForMessageRestricted+0x40>
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca24:	f001 fdc2 	bl	800e5ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d106      	bne.n	800ca3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	3324      	adds	r3, #36	@ 0x24
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 fccd 	bl	800d3d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ca3e:	6978      	ldr	r0, [r7, #20]
 800ca40:	f7ff ff26 	bl	800c890 <prvUnlockQueue>
	}
 800ca44:	bf00      	nop
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	@ 0x38
 800ca50:	af04      	add	r7, sp, #16
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10b      	bne.n	800ca78 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	623b      	str	r3, [r7, #32]
}
 800ca72:	bf00      	nop
 800ca74:	bf00      	nop
 800ca76:	e7fd      	b.n	800ca74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10b      	bne.n	800ca96 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	61fb      	str	r3, [r7, #28]
}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	e7fd      	b.n	800ca92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca96:	23a8      	movs	r3, #168	@ 0xa8
 800ca98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ca9e:	d00b      	beq.n	800cab8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	61bb      	str	r3, [r7, #24]
}
 800cab2:	bf00      	nop
 800cab4:	bf00      	nop
 800cab6:	e7fd      	b.n	800cab4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cab8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800caba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01e      	beq.n	800cafe <xTaskCreateStatic+0xb2>
 800cac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d01b      	beq.n	800cafe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cace:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad2:	2202      	movs	r2, #2
 800cad4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cad8:	2300      	movs	r3, #0
 800cada:	9303      	str	r3, [sp, #12]
 800cadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cade:	9302      	str	r3, [sp, #8]
 800cae0:	f107 0314 	add.w	r3, r7, #20
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	68b9      	ldr	r1, [r7, #8]
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f000 f851 	bl	800cb98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caf8:	f000 f8f6 	bl	800cce8 <prvAddNewTaskToReadyList>
 800cafc:	e001      	b.n	800cb02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cafe:	2300      	movs	r3, #0
 800cb00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb02:	697b      	ldr	r3, [r7, #20]
	}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3728      	adds	r7, #40	@ 0x28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08c      	sub	sp, #48	@ 0x30
 800cb10:	af04      	add	r7, sp, #16
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb1c:	88fb      	ldrh	r3, [r7, #6]
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f001 ff17 	bl	800e954 <pvPortMalloc>
 800cb26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00e      	beq.n	800cb4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb2e:	20a8      	movs	r0, #168	@ 0xa8
 800cb30:	f001 ff10 	bl	800e954 <pvPortMalloc>
 800cb34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb42:	e005      	b.n	800cb50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb44:	6978      	ldr	r0, [r7, #20]
 800cb46:	f001 ffd3 	bl	800eaf0 <vPortFree>
 800cb4a:	e001      	b.n	800cb50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d017      	beq.n	800cb86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb5e:	88fa      	ldrh	r2, [r7, #6]
 800cb60:	2300      	movs	r3, #0
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	9302      	str	r3, [sp, #8]
 800cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 f80f 	bl	800cb98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb7a:	69f8      	ldr	r0, [r7, #28]
 800cb7c:	f000 f8b4 	bl	800cce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb80:	2301      	movs	r3, #1
 800cb82:	61bb      	str	r3, [r7, #24]
 800cb84:	e002      	b.n	800cb8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb86:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb8c:	69bb      	ldr	r3, [r7, #24]
	}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3720      	adds	r7, #32
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
	...

0800cb98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	461a      	mov	r2, r3
 800cbb0:	21a5      	movs	r1, #165	@ 0xa5
 800cbb2:	f002 f8bd 	bl	800ed30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cbc0:	440b      	add	r3, r1
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	f023 0307 	bic.w	r3, r3, #7
 800cbce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	f003 0307 	and.w	r3, r3, #7
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00b      	beq.n	800cbf2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbde:	f383 8811 	msr	BASEPRI, r3
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	617b      	str	r3, [r7, #20]
}
 800cbec:	bf00      	nop
 800cbee:	bf00      	nop
 800cbf0:	e7fd      	b.n	800cbee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01f      	beq.n	800cc38 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	61fb      	str	r3, [r7, #28]
 800cbfc:	e012      	b.n	800cc24 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	4413      	add	r3, r2
 800cc04:	7819      	ldrb	r1, [r3, #0]
 800cc06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	3334      	adds	r3, #52	@ 0x34
 800cc0e:	460a      	mov	r2, r1
 800cc10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	4413      	add	r3, r2
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	3301      	adds	r3, #1
 800cc22:	61fb      	str	r3, [r7, #28]
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	2b0f      	cmp	r3, #15
 800cc28:	d9e9      	bls.n	800cbfe <prvInitialiseNewTask+0x66>
 800cc2a:	e000      	b.n	800cc2e <prvInitialiseNewTask+0x96>
			{
				break;
 800cc2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cc36:	e003      	b.n	800cc40 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc42:	2b37      	cmp	r3, #55	@ 0x37
 800cc44:	d901      	bls.n	800cc4a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc46:	2337      	movs	r3, #55	@ 0x37
 800cc48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	2200      	movs	r2, #0
 800cc5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	3304      	adds	r3, #4
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fe ff3d 	bl	800bae0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	3318      	adds	r3, #24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe ff38 	bl	800bae0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc98:	3354      	adds	r3, #84	@ 0x54
 800cc9a:	224c      	movs	r2, #76	@ 0x4c
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f002 f846 	bl	800ed30 <memset>
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	4a0d      	ldr	r2, [pc, #52]	@ (800ccdc <prvInitialiseNewTask+0x144>)
 800cca8:	659a      	str	r2, [r3, #88]	@ 0x58
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	4a0c      	ldr	r2, [pc, #48]	@ (800cce0 <prvInitialiseNewTask+0x148>)
 800ccae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb2:	4a0c      	ldr	r2, [pc, #48]	@ (800cce4 <prvInitialiseNewTask+0x14c>)
 800ccb4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	68f9      	ldr	r1, [r7, #12]
 800ccba:	69b8      	ldr	r0, [r7, #24]
 800ccbc:	f001 fb12 	bl	800e2e4 <pxPortInitialiseStack>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ccc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccd2:	bf00      	nop
 800ccd4:	3720      	adds	r7, #32
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	24004cb4 	.word	0x24004cb4
 800cce0:	24004d1c 	.word	0x24004d1c
 800cce4:	24004d84 	.word	0x24004d84

0800cce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ccf0:	f001 fc2a 	bl	800e548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ccf4:	4b2d      	ldr	r3, [pc, #180]	@ (800cdac <prvAddNewTaskToReadyList+0xc4>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	4a2c      	ldr	r2, [pc, #176]	@ (800cdac <prvAddNewTaskToReadyList+0xc4>)
 800ccfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ccfe:	4b2c      	ldr	r3, [pc, #176]	@ (800cdb0 <prvAddNewTaskToReadyList+0xc8>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d109      	bne.n	800cd1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd06:	4a2a      	ldr	r2, [pc, #168]	@ (800cdb0 <prvAddNewTaskToReadyList+0xc8>)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd0c:	4b27      	ldr	r3, [pc, #156]	@ (800cdac <prvAddNewTaskToReadyList+0xc4>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d110      	bne.n	800cd36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd14:	f000 fce6 	bl	800d6e4 <prvInitialiseTaskLists>
 800cd18:	e00d      	b.n	800cd36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd1a:	4b26      	ldr	r3, [pc, #152]	@ (800cdb4 <prvAddNewTaskToReadyList+0xcc>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d109      	bne.n	800cd36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd22:	4b23      	ldr	r3, [pc, #140]	@ (800cdb0 <prvAddNewTaskToReadyList+0xc8>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d802      	bhi.n	800cd36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd30:	4a1f      	ldr	r2, [pc, #124]	@ (800cdb0 <prvAddNewTaskToReadyList+0xc8>)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd36:	4b20      	ldr	r3, [pc, #128]	@ (800cdb8 <prvAddNewTaskToReadyList+0xd0>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	4a1e      	ldr	r2, [pc, #120]	@ (800cdb8 <prvAddNewTaskToReadyList+0xd0>)
 800cd3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd40:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb8 <prvAddNewTaskToReadyList+0xd0>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd4c:	4b1b      	ldr	r3, [pc, #108]	@ (800cdbc <prvAddNewTaskToReadyList+0xd4>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d903      	bls.n	800cd5c <prvAddNewTaskToReadyList+0x74>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd58:	4a18      	ldr	r2, [pc, #96]	@ (800cdbc <prvAddNewTaskToReadyList+0xd4>)
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4a15      	ldr	r2, [pc, #84]	@ (800cdc0 <prvAddNewTaskToReadyList+0xd8>)
 800cd6a:	441a      	add	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4619      	mov	r1, r3
 800cd72:	4610      	mov	r0, r2
 800cd74:	f7fe fec1 	bl	800bafa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd78:	f001 fc18 	bl	800e5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb4 <prvAddNewTaskToReadyList+0xcc>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00e      	beq.n	800cda2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd84:	4b0a      	ldr	r3, [pc, #40]	@ (800cdb0 <prvAddNewTaskToReadyList+0xc8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d207      	bcs.n	800cda2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd92:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc4 <prvAddNewTaskToReadyList+0xdc>)
 800cd94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda2:	bf00      	nop
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	24000f28 	.word	0x24000f28
 800cdb0:	24000a54 	.word	0x24000a54
 800cdb4:	24000f34 	.word	0x24000f34
 800cdb8:	24000f44 	.word	0x24000f44
 800cdbc:	24000f30 	.word	0x24000f30
 800cdc0:	24000a58 	.word	0x24000a58
 800cdc4:	e000ed04 	.word	0xe000ed04

0800cdc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d018      	beq.n	800ce0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cdda:	4b14      	ldr	r3, [pc, #80]	@ (800ce2c <vTaskDelay+0x64>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00b      	beq.n	800cdfa <vTaskDelay+0x32>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	60bb      	str	r3, [r7, #8]
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	e7fd      	b.n	800cdf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cdfa:	f000 f88b 	bl	800cf14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cdfe:	2100      	movs	r1, #0
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fec1 	bl	800db88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce06:	f000 f8cb 	bl	800cfa0 <xTaskResumeAll>
 800ce0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d107      	bne.n	800ce22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ce12:	4b07      	ldr	r3, [pc, #28]	@ (800ce30 <vTaskDelay+0x68>)
 800ce14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce22:	bf00      	nop
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	24000f50 	.word	0x24000f50
 800ce30:	e000ed04 	.word	0xe000ed04

0800ce34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	@ 0x28
 800ce38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce42:	463a      	mov	r2, r7
 800ce44:	1d39      	adds	r1, r7, #4
 800ce46:	f107 0308 	add.w	r3, r7, #8
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fe fdf4 	bl	800ba38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	9202      	str	r2, [sp, #8]
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	460a      	mov	r2, r1
 800ce62:	4924      	ldr	r1, [pc, #144]	@ (800cef4 <vTaskStartScheduler+0xc0>)
 800ce64:	4824      	ldr	r0, [pc, #144]	@ (800cef8 <vTaskStartScheduler+0xc4>)
 800ce66:	f7ff fdf1 	bl	800ca4c <xTaskCreateStatic>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	4a23      	ldr	r2, [pc, #140]	@ (800cefc <vTaskStartScheduler+0xc8>)
 800ce6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce70:	4b22      	ldr	r3, [pc, #136]	@ (800cefc <vTaskStartScheduler+0xc8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	e001      	b.n	800ce82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d102      	bne.n	800ce8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce88:	f000 fed2 	bl	800dc30 <xTimerCreateTimerTask>
 800ce8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d11b      	bne.n	800cecc <vTaskStartScheduler+0x98>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	613b      	str	r3, [r7, #16]
}
 800cea6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cea8:	4b15      	ldr	r3, [pc, #84]	@ (800cf00 <vTaskStartScheduler+0xcc>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3354      	adds	r3, #84	@ 0x54
 800ceae:	4a15      	ldr	r2, [pc, #84]	@ (800cf04 <vTaskStartScheduler+0xd0>)
 800ceb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ceb2:	4b15      	ldr	r3, [pc, #84]	@ (800cf08 <vTaskStartScheduler+0xd4>)
 800ceb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ceba:	4b14      	ldr	r3, [pc, #80]	@ (800cf0c <vTaskStartScheduler+0xd8>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cec0:	4b13      	ldr	r3, [pc, #76]	@ (800cf10 <vTaskStartScheduler+0xdc>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cec6:	f001 fa9b 	bl	800e400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ceca:	e00f      	b.n	800ceec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced2:	d10b      	bne.n	800ceec <vTaskStartScheduler+0xb8>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	60fb      	str	r3, [r7, #12]
}
 800cee6:	bf00      	nop
 800cee8:	bf00      	nop
 800ceea:	e7fd      	b.n	800cee8 <vTaskStartScheduler+0xb4>
}
 800ceec:	bf00      	nop
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	0800ef5c 	.word	0x0800ef5c
 800cef8:	0800d609 	.word	0x0800d609
 800cefc:	24000f4c 	.word	0x24000f4c
 800cf00:	24000a54 	.word	0x24000a54
 800cf04:	24000014 	.word	0x24000014
 800cf08:	24000f48 	.word	0x24000f48
 800cf0c:	24000f34 	.word	0x24000f34
 800cf10:	24000f2c 	.word	0x24000f2c

0800cf14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf14:	b480      	push	{r7}
 800cf16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf18:	4b04      	ldr	r3, [pc, #16]	@ (800cf2c <vTaskSuspendAll+0x18>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	4a03      	ldr	r2, [pc, #12]	@ (800cf2c <vTaskSuspendAll+0x18>)
 800cf20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf22:	bf00      	nop
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	24000f50 	.word	0x24000f50

0800cf30 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800cf36:	2300      	movs	r3, #0
 800cf38:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800cf3a:	4b14      	ldr	r3, [pc, #80]	@ (800cf8c <prvGetExpectedIdleTime+0x5c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800cf42:	2301      	movs	r3, #1
 800cf44:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800cf46:	4b12      	ldr	r3, [pc, #72]	@ (800cf90 <prvGetExpectedIdleTime+0x60>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	e012      	b.n	800cf7c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800cf56:	4b0f      	ldr	r3, [pc, #60]	@ (800cf94 <prvGetExpectedIdleTime+0x64>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d902      	bls.n	800cf64 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	607b      	str	r3, [r7, #4]
 800cf62:	e00b      	b.n	800cf7c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	607b      	str	r3, [r7, #4]
 800cf6e:	e005      	b.n	800cf7c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800cf70:	4b09      	ldr	r3, [pc, #36]	@ (800cf98 <prvGetExpectedIdleTime+0x68>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	4b09      	ldr	r3, [pc, #36]	@ (800cf9c <prvGetExpectedIdleTime+0x6c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800cf7c:	687b      	ldr	r3, [r7, #4]
	}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	24000f30 	.word	0x24000f30
 800cf90:	24000a54 	.word	0x24000a54
 800cf94:	24000a58 	.word	0x24000a58
 800cf98:	24000f48 	.word	0x24000f48
 800cf9c:	24000f2c 	.word	0x24000f2c

0800cfa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfae:	4b42      	ldr	r3, [pc, #264]	@ (800d0b8 <xTaskResumeAll+0x118>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10b      	bne.n	800cfce <xTaskResumeAll+0x2e>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	603b      	str	r3, [r7, #0]
}
 800cfc8:	bf00      	nop
 800cfca:	bf00      	nop
 800cfcc:	e7fd      	b.n	800cfca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfce:	f001 fabb 	bl	800e548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfd2:	4b39      	ldr	r3, [pc, #228]	@ (800d0b8 <xTaskResumeAll+0x118>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	4a37      	ldr	r2, [pc, #220]	@ (800d0b8 <xTaskResumeAll+0x118>)
 800cfda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfdc:	4b36      	ldr	r3, [pc, #216]	@ (800d0b8 <xTaskResumeAll+0x118>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d162      	bne.n	800d0aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfe4:	4b35      	ldr	r3, [pc, #212]	@ (800d0bc <xTaskResumeAll+0x11c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d05e      	beq.n	800d0aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfec:	e02f      	b.n	800d04e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfee:	4b34      	ldr	r3, [pc, #208]	@ (800d0c0 <xTaskResumeAll+0x120>)
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3318      	adds	r3, #24
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fdda 	bl	800bbb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3304      	adds	r3, #4
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fdd5 	bl	800bbb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d00e:	4b2d      	ldr	r3, [pc, #180]	@ (800d0c4 <xTaskResumeAll+0x124>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	429a      	cmp	r2, r3
 800d014:	d903      	bls.n	800d01e <xTaskResumeAll+0x7e>
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01a:	4a2a      	ldr	r2, [pc, #168]	@ (800d0c4 <xTaskResumeAll+0x124>)
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d022:	4613      	mov	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4a27      	ldr	r2, [pc, #156]	@ (800d0c8 <xTaskResumeAll+0x128>)
 800d02c:	441a      	add	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3304      	adds	r3, #4
 800d032:	4619      	mov	r1, r3
 800d034:	4610      	mov	r0, r2
 800d036:	f7fe fd60 	bl	800bafa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d03e:	4b23      	ldr	r3, [pc, #140]	@ (800d0cc <xTaskResumeAll+0x12c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d044:	429a      	cmp	r2, r3
 800d046:	d302      	bcc.n	800d04e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d048:	4b21      	ldr	r3, [pc, #132]	@ (800d0d0 <xTaskResumeAll+0x130>)
 800d04a:	2201      	movs	r2, #1
 800d04c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d04e:	4b1c      	ldr	r3, [pc, #112]	@ (800d0c0 <xTaskResumeAll+0x120>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1cb      	bne.n	800cfee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d05c:	f000 fbe6 	bl	800d82c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d060:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d4 <xTaskResumeAll+0x134>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d010      	beq.n	800d08e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d06c:	f000 f86e 	bl	800d14c <xTaskIncrementTick>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d002      	beq.n	800d07c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d076:	4b16      	ldr	r3, [pc, #88]	@ (800d0d0 <xTaskResumeAll+0x130>)
 800d078:	2201      	movs	r2, #1
 800d07a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3b01      	subs	r3, #1
 800d080:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1f1      	bne.n	800d06c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d088:	4b12      	ldr	r3, [pc, #72]	@ (800d0d4 <xTaskResumeAll+0x134>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d08e:	4b10      	ldr	r3, [pc, #64]	@ (800d0d0 <xTaskResumeAll+0x130>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d009      	beq.n	800d0aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d096:	2301      	movs	r3, #1
 800d098:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d09a:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d8 <xTaskResumeAll+0x138>)
 800d09c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0aa:	f001 fa7f 	bl	800e5ac <vPortExitCritical>

	return xAlreadyYielded;
 800d0ae:	68bb      	ldr	r3, [r7, #8]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	24000f50 	.word	0x24000f50
 800d0bc:	24000f28 	.word	0x24000f28
 800d0c0:	24000ee8 	.word	0x24000ee8
 800d0c4:	24000f30 	.word	0x24000f30
 800d0c8:	24000a58 	.word	0x24000a58
 800d0cc:	24000a54 	.word	0x24000a54
 800d0d0:	24000f3c 	.word	0x24000f3c
 800d0d4:	24000f38 	.word	0x24000f38
 800d0d8:	e000ed04 	.word	0xe000ed04

0800d0dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d0e2:	4b05      	ldr	r3, [pc, #20]	@ (800d0f8 <xTaskGetTickCount+0x1c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0e8:	687b      	ldr	r3, [r7, #4]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	24000f2c 	.word	0x24000f2c

0800d0fc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800d104:	4b0f      	ldr	r3, [pc, #60]	@ (800d144 <vTaskStepTick+0x48>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	441a      	add	r2, r3
 800d10c:	4b0e      	ldr	r3, [pc, #56]	@ (800d148 <vTaskStepTick+0x4c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	429a      	cmp	r2, r3
 800d112:	d90b      	bls.n	800d12c <vTaskStepTick+0x30>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	60fb      	str	r3, [r7, #12]
}
 800d126:	bf00      	nop
 800d128:	bf00      	nop
 800d12a:	e7fd      	b.n	800d128 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800d12c:	4b05      	ldr	r3, [pc, #20]	@ (800d144 <vTaskStepTick+0x48>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4413      	add	r3, r2
 800d134:	4a03      	ldr	r2, [pc, #12]	@ (800d144 <vTaskStepTick+0x48>)
 800d136:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800d138:	bf00      	nop
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	24000f2c 	.word	0x24000f2c
 800d148:	24000f48 	.word	0x24000f48

0800d14c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d156:	4b4f      	ldr	r3, [pc, #316]	@ (800d294 <xTaskIncrementTick+0x148>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f040 8090 	bne.w	800d280 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d160:	4b4d      	ldr	r3, [pc, #308]	@ (800d298 <xTaskIncrementTick+0x14c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3301      	adds	r3, #1
 800d166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d168:	4a4b      	ldr	r2, [pc, #300]	@ (800d298 <xTaskIncrementTick+0x14c>)
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d121      	bne.n	800d1b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d174:	4b49      	ldr	r3, [pc, #292]	@ (800d29c <xTaskIncrementTick+0x150>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00b      	beq.n	800d196 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	603b      	str	r3, [r7, #0]
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	e7fd      	b.n	800d192 <xTaskIncrementTick+0x46>
 800d196:	4b41      	ldr	r3, [pc, #260]	@ (800d29c <xTaskIncrementTick+0x150>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	4b40      	ldr	r3, [pc, #256]	@ (800d2a0 <xTaskIncrementTick+0x154>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a3e      	ldr	r2, [pc, #248]	@ (800d29c <xTaskIncrementTick+0x150>)
 800d1a2:	6013      	str	r3, [r2, #0]
 800d1a4:	4a3e      	ldr	r2, [pc, #248]	@ (800d2a0 <xTaskIncrementTick+0x154>)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	4b3e      	ldr	r3, [pc, #248]	@ (800d2a4 <xTaskIncrementTick+0x158>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	4a3c      	ldr	r2, [pc, #240]	@ (800d2a4 <xTaskIncrementTick+0x158>)
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	f000 fb3a 	bl	800d82c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1b8:	4b3b      	ldr	r3, [pc, #236]	@ (800d2a8 <xTaskIncrementTick+0x15c>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d349      	bcc.n	800d256 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1c2:	4b36      	ldr	r3, [pc, #216]	@ (800d29c <xTaskIncrementTick+0x150>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d104      	bne.n	800d1d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1cc:	4b36      	ldr	r3, [pc, #216]	@ (800d2a8 <xTaskIncrementTick+0x15c>)
 800d1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d2:	601a      	str	r2, [r3, #0]
					break;
 800d1d4:	e03f      	b.n	800d256 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d6:	4b31      	ldr	r3, [pc, #196]	@ (800d29c <xTaskIncrementTick+0x150>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d203      	bcs.n	800d1f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1ee:	4a2e      	ldr	r2, [pc, #184]	@ (800d2a8 <xTaskIncrementTick+0x15c>)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1f4:	e02f      	b.n	800d256 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fcda 	bl	800bbb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	3318      	adds	r3, #24
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe fcd1 	bl	800bbb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d216:	4b25      	ldr	r3, [pc, #148]	@ (800d2ac <xTaskIncrementTick+0x160>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d903      	bls.n	800d226 <xTaskIncrementTick+0xda>
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d222:	4a22      	ldr	r2, [pc, #136]	@ (800d2ac <xTaskIncrementTick+0x160>)
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d22a:	4613      	mov	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4a1f      	ldr	r2, [pc, #124]	@ (800d2b0 <xTaskIncrementTick+0x164>)
 800d234:	441a      	add	r2, r3
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	3304      	adds	r3, #4
 800d23a:	4619      	mov	r1, r3
 800d23c:	4610      	mov	r0, r2
 800d23e:	f7fe fc5c 	bl	800bafa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d246:	4b1b      	ldr	r3, [pc, #108]	@ (800d2b4 <xTaskIncrementTick+0x168>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d3b8      	bcc.n	800d1c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d250:	2301      	movs	r3, #1
 800d252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d254:	e7b5      	b.n	800d1c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d256:	4b17      	ldr	r3, [pc, #92]	@ (800d2b4 <xTaskIncrementTick+0x168>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25c:	4914      	ldr	r1, [pc, #80]	@ (800d2b0 <xTaskIncrementTick+0x164>)
 800d25e:	4613      	mov	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	440b      	add	r3, r1
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d901      	bls.n	800d272 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d26e:	2301      	movs	r3, #1
 800d270:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d272:	4b11      	ldr	r3, [pc, #68]	@ (800d2b8 <xTaskIncrementTick+0x16c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d007      	beq.n	800d28a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d27a:	2301      	movs	r3, #1
 800d27c:	617b      	str	r3, [r7, #20]
 800d27e:	e004      	b.n	800d28a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d280:	4b0e      	ldr	r3, [pc, #56]	@ (800d2bc <xTaskIncrementTick+0x170>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3301      	adds	r3, #1
 800d286:	4a0d      	ldr	r2, [pc, #52]	@ (800d2bc <xTaskIncrementTick+0x170>)
 800d288:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d28a:	697b      	ldr	r3, [r7, #20]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	24000f50 	.word	0x24000f50
 800d298:	24000f2c 	.word	0x24000f2c
 800d29c:	24000ee0 	.word	0x24000ee0
 800d2a0:	24000ee4 	.word	0x24000ee4
 800d2a4:	24000f40 	.word	0x24000f40
 800d2a8:	24000f48 	.word	0x24000f48
 800d2ac:	24000f30 	.word	0x24000f30
 800d2b0:	24000a58 	.word	0x24000a58
 800d2b4:	24000a54 	.word	0x24000a54
 800d2b8:	24000f3c 	.word	0x24000f3c
 800d2bc:	24000f38 	.word	0x24000f38

0800d2c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800d374 <vTaskSwitchContext+0xb4>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ce:	4b2a      	ldr	r3, [pc, #168]	@ (800d378 <vTaskSwitchContext+0xb8>)
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2d4:	e047      	b.n	800d366 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d2d6:	4b28      	ldr	r3, [pc, #160]	@ (800d378 <vTaskSwitchContext+0xb8>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2dc:	4b27      	ldr	r3, [pc, #156]	@ (800d37c <vTaskSwitchContext+0xbc>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	60fb      	str	r3, [r7, #12]
 800d2e2:	e011      	b.n	800d308 <vTaskSwitchContext+0x48>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <vTaskSwitchContext+0x42>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	607b      	str	r3, [r7, #4]
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	e7fd      	b.n	800d2fe <vTaskSwitchContext+0x3e>
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3b01      	subs	r3, #1
 800d306:	60fb      	str	r3, [r7, #12]
 800d308:	491d      	ldr	r1, [pc, #116]	@ (800d380 <vTaskSwitchContext+0xc0>)
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	440b      	add	r3, r1
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0e3      	beq.n	800d2e4 <vTaskSwitchContext+0x24>
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	4613      	mov	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4a16      	ldr	r2, [pc, #88]	@ (800d380 <vTaskSwitchContext+0xc0>)
 800d328:	4413      	add	r3, r2
 800d32a:	60bb      	str	r3, [r7, #8]
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	605a      	str	r2, [r3, #4]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	685a      	ldr	r2, [r3, #4]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	3308      	adds	r3, #8
 800d33e:	429a      	cmp	r2, r3
 800d340:	d104      	bne.n	800d34c <vTaskSwitchContext+0x8c>
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	685a      	ldr	r2, [r3, #4]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	605a      	str	r2, [r3, #4]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	4a0c      	ldr	r2, [pc, #48]	@ (800d384 <vTaskSwitchContext+0xc4>)
 800d354:	6013      	str	r3, [r2, #0]
 800d356:	4a09      	ldr	r2, [pc, #36]	@ (800d37c <vTaskSwitchContext+0xbc>)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d35c:	4b09      	ldr	r3, [pc, #36]	@ (800d384 <vTaskSwitchContext+0xc4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3354      	adds	r3, #84	@ 0x54
 800d362:	4a09      	ldr	r2, [pc, #36]	@ (800d388 <vTaskSwitchContext+0xc8>)
 800d364:	6013      	str	r3, [r2, #0]
}
 800d366:	bf00      	nop
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	24000f50 	.word	0x24000f50
 800d378:	24000f3c 	.word	0x24000f3c
 800d37c:	24000f30 	.word	0x24000f30
 800d380:	24000a58 	.word	0x24000a58
 800d384:	24000a54 	.word	0x24000a54
 800d388:	24000014 	.word	0x24000014

0800d38c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10b      	bne.n	800d3b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	60fb      	str	r3, [r7, #12]
}
 800d3ae:	bf00      	nop
 800d3b0:	bf00      	nop
 800d3b2:	e7fd      	b.n	800d3b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3b4:	4b07      	ldr	r3, [pc, #28]	@ (800d3d4 <vTaskPlaceOnEventList+0x48>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	3318      	adds	r3, #24
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7fe fbc0 	bl	800bb42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	6838      	ldr	r0, [r7, #0]
 800d3c6:	f000 fbdf 	bl	800db88 <prvAddCurrentTaskToDelayedList>
}
 800d3ca:	bf00      	nop
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	24000a54 	.word	0x24000a54

0800d3d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10b      	bne.n	800d402 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	617b      	str	r3, [r7, #20]
}
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	e7fd      	b.n	800d3fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d402:	4b0a      	ldr	r3, [pc, #40]	@ (800d42c <vTaskPlaceOnEventListRestricted+0x54>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3318      	adds	r3, #24
 800d408:	4619      	mov	r1, r3
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f7fe fb75 	bl	800bafa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d416:	f04f 33ff 	mov.w	r3, #4294967295
 800d41a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d41c:	6879      	ldr	r1, [r7, #4]
 800d41e:	68b8      	ldr	r0, [r7, #8]
 800d420:	f000 fbb2 	bl	800db88 <prvAddCurrentTaskToDelayedList>
	}
 800d424:	bf00      	nop
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	24000a54 	.word	0x24000a54

0800d430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10b      	bne.n	800d45e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60fb      	str	r3, [r7, #12]
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	e7fd      	b.n	800d45a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	3318      	adds	r3, #24
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fba6 	bl	800bbb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d468:	4b1e      	ldr	r3, [pc, #120]	@ (800d4e4 <xTaskRemoveFromEventList+0xb4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d11f      	bne.n	800d4b0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	3304      	adds	r3, #4
 800d474:	4618      	mov	r0, r3
 800d476:	f7fe fb9d 	bl	800bbb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d47e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4e8 <xTaskRemoveFromEventList+0xb8>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d903      	bls.n	800d48e <xTaskRemoveFromEventList+0x5e>
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d48a:	4a17      	ldr	r2, [pc, #92]	@ (800d4e8 <xTaskRemoveFromEventList+0xb8>)
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4a14      	ldr	r2, [pc, #80]	@ (800d4ec <xTaskRemoveFromEventList+0xbc>)
 800d49c:	441a      	add	r2, r3
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	f7fe fb28 	bl	800bafa <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800d4aa:	f000 f9bf 	bl	800d82c <prvResetNextTaskUnblockTime>
 800d4ae:	e005      	b.n	800d4bc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	3318      	adds	r3, #24
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	480e      	ldr	r0, [pc, #56]	@ (800d4f0 <xTaskRemoveFromEventList+0xc0>)
 800d4b8:	f7fe fb1f 	bl	800bafa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f4 <xTaskRemoveFromEventList+0xc4>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d905      	bls.n	800d4d6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d4f8 <xTaskRemoveFromEventList+0xc8>)
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e001      	b.n	800d4da <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4da:	697b      	ldr	r3, [r7, #20]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	24000f50 	.word	0x24000f50
 800d4e8:	24000f30 	.word	0x24000f30
 800d4ec:	24000a58 	.word	0x24000a58
 800d4f0:	24000ee8 	.word	0x24000ee8
 800d4f4:	24000a54 	.word	0x24000a54
 800d4f8:	24000f3c 	.word	0x24000f3c

0800d4fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d504:	4b06      	ldr	r3, [pc, #24]	@ (800d520 <vTaskInternalSetTimeOutState+0x24>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d50c:	4b05      	ldr	r3, [pc, #20]	@ (800d524 <vTaskInternalSetTimeOutState+0x28>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	605a      	str	r2, [r3, #4]
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	24000f40 	.word	0x24000f40
 800d524:	24000f2c 	.word	0x24000f2c

0800d528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10b      	bne.n	800d550 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	613b      	str	r3, [r7, #16]
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	e7fd      	b.n	800d54c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10b      	bne.n	800d56e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	60fb      	str	r3, [r7, #12]
}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	e7fd      	b.n	800d56a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d56e:	f000 ffeb 	bl	800e548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d572:	4b1d      	ldr	r3, [pc, #116]	@ (800d5e8 <xTaskCheckForTimeOut+0xc0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	69ba      	ldr	r2, [r7, #24]
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58a:	d102      	bne.n	800d592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
 800d590:	e023      	b.n	800d5da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4b15      	ldr	r3, [pc, #84]	@ (800d5ec <xTaskCheckForTimeOut+0xc4>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d007      	beq.n	800d5ae <xTaskCheckForTimeOut+0x86>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d302      	bcc.n	800d5ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e015      	b.n	800d5da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d20b      	bcs.n	800d5d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff ff99 	bl	800d4fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	61fb      	str	r3, [r7, #28]
 800d5ce:	e004      	b.n	800d5da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5da:	f000 ffe7 	bl	800e5ac <vPortExitCritical>

	return xReturn;
 800d5de:	69fb      	ldr	r3, [r7, #28]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3720      	adds	r7, #32
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	24000f2c 	.word	0x24000f2c
 800d5ec:	24000f40 	.word	0x24000f40

0800d5f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5f4:	4b03      	ldr	r3, [pc, #12]	@ (800d604 <vTaskMissedYield+0x14>)
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	601a      	str	r2, [r3, #0]
}
 800d5fa:	bf00      	nop
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	24000f3c 	.word	0x24000f3c

0800d608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d610:	f000 f8a8 	bl	800d764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d614:	4b18      	ldr	r3, [pc, #96]	@ (800d678 <prvIdleTask+0x70>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d907      	bls.n	800d62c <prvIdleTask+0x24>
			{
				taskYIELD();
 800d61c:	4b17      	ldr	r3, [pc, #92]	@ (800d67c <prvIdleTask+0x74>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800d62c:	f7ff fc80 	bl	800cf30 <prvGetExpectedIdleTime>
 800d630:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d9eb      	bls.n	800d610 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800d638:	f7ff fc6c 	bl	800cf14 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d63c:	4b10      	ldr	r3, [pc, #64]	@ (800d680 <prvIdleTask+0x78>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	4b10      	ldr	r3, [pc, #64]	@ (800d684 <prvIdleTask+0x7c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	429a      	cmp	r2, r3
 800d646:	d20b      	bcs.n	800d660 <prvIdleTask+0x58>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	60bb      	str	r3, [r7, #8]
}
 800d65a:	bf00      	nop
 800d65c:	bf00      	nop
 800d65e:	e7fd      	b.n	800d65c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800d660:	f7ff fc66 	bl	800cf30 <prvGetExpectedIdleTime>
 800d664:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d902      	bls.n	800d672 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f001 f81d 	bl	800e6ac <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800d672:	f7ff fc95 	bl	800cfa0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800d676:	e7cb      	b.n	800d610 <prvIdleTask+0x8>
 800d678:	24000a58 	.word	0x24000a58
 800d67c:	e000ed04 	.word	0xe000ed04
 800d680:	24000f48 	.word	0x24000f48
 800d684:	24000f2c 	.word	0x24000f2c

0800d688 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800d68e:	2301      	movs	r3, #1
 800d690:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800d692:	2301      	movs	r3, #1
 800d694:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800d696:	4b0f      	ldr	r3, [pc, #60]	@ (800d6d4 <eTaskConfirmSleepModeStatus+0x4c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	71fb      	strb	r3, [r7, #7]
 800d6a2:	e010      	b.n	800d6c6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800d6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d8 <eTaskConfirmSleepModeStatus+0x50>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	71fb      	strb	r3, [r7, #7]
 800d6b0:	e009      	b.n	800d6c6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800d6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6dc <eTaskConfirmSleepModeStatus+0x54>)
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e0 <eTaskConfirmSleepModeStatus+0x58>)
 800d6b8:	6819      	ldr	r1, [r3, #0]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	1acb      	subs	r3, r1, r3
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d101      	bne.n	800d6c6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800d6c2:	2302      	movs	r3, #2
 800d6c4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
	}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	24000ee8 	.word	0x24000ee8
 800d6d8:	24000f3c 	.word	0x24000f3c
 800d6dc:	24000f14 	.word	0x24000f14
 800d6e0:	24000f28 	.word	0x24000f28

0800d6e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	607b      	str	r3, [r7, #4]
 800d6ee:	e00c      	b.n	800d70a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4a12      	ldr	r2, [pc, #72]	@ (800d744 <prvInitialiseTaskLists+0x60>)
 800d6fc:	4413      	add	r3, r2
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fe f9ce 	bl	800baa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3301      	adds	r3, #1
 800d708:	607b      	str	r3, [r7, #4]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b37      	cmp	r3, #55	@ 0x37
 800d70e:	d9ef      	bls.n	800d6f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d710:	480d      	ldr	r0, [pc, #52]	@ (800d748 <prvInitialiseTaskLists+0x64>)
 800d712:	f7fe f9c5 	bl	800baa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d716:	480d      	ldr	r0, [pc, #52]	@ (800d74c <prvInitialiseTaskLists+0x68>)
 800d718:	f7fe f9c2 	bl	800baa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d71c:	480c      	ldr	r0, [pc, #48]	@ (800d750 <prvInitialiseTaskLists+0x6c>)
 800d71e:	f7fe f9bf 	bl	800baa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d722:	480c      	ldr	r0, [pc, #48]	@ (800d754 <prvInitialiseTaskLists+0x70>)
 800d724:	f7fe f9bc 	bl	800baa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d728:	480b      	ldr	r0, [pc, #44]	@ (800d758 <prvInitialiseTaskLists+0x74>)
 800d72a:	f7fe f9b9 	bl	800baa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d72e:	4b0b      	ldr	r3, [pc, #44]	@ (800d75c <prvInitialiseTaskLists+0x78>)
 800d730:	4a05      	ldr	r2, [pc, #20]	@ (800d748 <prvInitialiseTaskLists+0x64>)
 800d732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d734:	4b0a      	ldr	r3, [pc, #40]	@ (800d760 <prvInitialiseTaskLists+0x7c>)
 800d736:	4a05      	ldr	r2, [pc, #20]	@ (800d74c <prvInitialiseTaskLists+0x68>)
 800d738:	601a      	str	r2, [r3, #0]
}
 800d73a:	bf00      	nop
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	24000a58 	.word	0x24000a58
 800d748:	24000eb8 	.word	0x24000eb8
 800d74c:	24000ecc 	.word	0x24000ecc
 800d750:	24000ee8 	.word	0x24000ee8
 800d754:	24000efc 	.word	0x24000efc
 800d758:	24000f14 	.word	0x24000f14
 800d75c:	24000ee0 	.word	0x24000ee0
 800d760:	24000ee4 	.word	0x24000ee4

0800d764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d76a:	e019      	b.n	800d7a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d76c:	f000 feec 	bl	800e548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d770:	4b10      	ldr	r3, [pc, #64]	@ (800d7b4 <prvCheckTasksWaitingTermination+0x50>)
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3304      	adds	r3, #4
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fa19 	bl	800bbb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d782:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <prvCheckTasksWaitingTermination+0x54>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3b01      	subs	r3, #1
 800d788:	4a0b      	ldr	r2, [pc, #44]	@ (800d7b8 <prvCheckTasksWaitingTermination+0x54>)
 800d78a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d78c:	4b0b      	ldr	r3, [pc, #44]	@ (800d7bc <prvCheckTasksWaitingTermination+0x58>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3b01      	subs	r3, #1
 800d792:	4a0a      	ldr	r2, [pc, #40]	@ (800d7bc <prvCheckTasksWaitingTermination+0x58>)
 800d794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d796:	f000 ff09 	bl	800e5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 f810 	bl	800d7c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7a0:	4b06      	ldr	r3, [pc, #24]	@ (800d7bc <prvCheckTasksWaitingTermination+0x58>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1e1      	bne.n	800d76c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7a8:	bf00      	nop
 800d7aa:	bf00      	nop
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	24000efc 	.word	0x24000efc
 800d7b8:	24000f28 	.word	0x24000f28
 800d7bc:	24000f10 	.word	0x24000f10

0800d7c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	3354      	adds	r3, #84	@ 0x54
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f001 fab7 	bl	800ed40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d108      	bne.n	800d7ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f001 f985 	bl	800eaf0 <vPortFree>
				vPortFree( pxTCB );
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f001 f982 	bl	800eaf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7ec:	e019      	b.n	800d822 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d103      	bne.n	800d800 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f001 f979 	bl	800eaf0 <vPortFree>
	}
 800d7fe:	e010      	b.n	800d822 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d806:	2b02      	cmp	r3, #2
 800d808:	d00b      	beq.n	800d822 <prvDeleteTCB+0x62>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	60fb      	str	r3, [r7, #12]
}
 800d81c:	bf00      	nop
 800d81e:	bf00      	nop
 800d820:	e7fd      	b.n	800d81e <prvDeleteTCB+0x5e>
	}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d832:	4b0c      	ldr	r3, [pc, #48]	@ (800d864 <prvResetNextTaskUnblockTime+0x38>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d104      	bne.n	800d846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d83c:	4b0a      	ldr	r3, [pc, #40]	@ (800d868 <prvResetNextTaskUnblockTime+0x3c>)
 800d83e:	f04f 32ff 	mov.w	r2, #4294967295
 800d842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d844:	e008      	b.n	800d858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d846:	4b07      	ldr	r3, [pc, #28]	@ (800d864 <prvResetNextTaskUnblockTime+0x38>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4a04      	ldr	r2, [pc, #16]	@ (800d868 <prvResetNextTaskUnblockTime+0x3c>)
 800d856:	6013      	str	r3, [r2, #0]
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr
 800d864:	24000ee0 	.word	0x24000ee0
 800d868:	24000f48 	.word	0x24000f48

0800d86c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d872:	4b0b      	ldr	r3, [pc, #44]	@ (800d8a0 <xTaskGetSchedulerState+0x34>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d102      	bne.n	800d880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d87a:	2301      	movs	r3, #1
 800d87c:	607b      	str	r3, [r7, #4]
 800d87e:	e008      	b.n	800d892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d880:	4b08      	ldr	r3, [pc, #32]	@ (800d8a4 <xTaskGetSchedulerState+0x38>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d102      	bne.n	800d88e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d888:	2302      	movs	r3, #2
 800d88a:	607b      	str	r3, [r7, #4]
 800d88c:	e001      	b.n	800d892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d88e:	2300      	movs	r3, #0
 800d890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d892:	687b      	ldr	r3, [r7, #4]
	}
 800d894:	4618      	mov	r0, r3
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	24000f34 	.word	0x24000f34
 800d8a4:	24000f50 	.word	0x24000f50

0800d8a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d051      	beq.n	800d962 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8c2:	4b2a      	ldr	r3, [pc, #168]	@ (800d96c <xTaskPriorityInherit+0xc4>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d241      	bcs.n	800d950 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	db06      	blt.n	800d8e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d4:	4b25      	ldr	r3, [pc, #148]	@ (800d96c <xTaskPriorityInherit+0xc4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	6959      	ldr	r1, [r3, #20]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4a1f      	ldr	r2, [pc, #124]	@ (800d970 <xTaskPriorityInherit+0xc8>)
 800d8f4:	4413      	add	r3, r2
 800d8f6:	4299      	cmp	r1, r3
 800d8f8:	d122      	bne.n	800d940 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe f958 	bl	800bbb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d904:	4b19      	ldr	r3, [pc, #100]	@ (800d96c <xTaskPriorityInherit+0xc4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d912:	4b18      	ldr	r3, [pc, #96]	@ (800d974 <xTaskPriorityInherit+0xcc>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d903      	bls.n	800d922 <xTaskPriorityInherit+0x7a>
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d91e:	4a15      	ldr	r2, [pc, #84]	@ (800d974 <xTaskPriorityInherit+0xcc>)
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d926:	4613      	mov	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4a10      	ldr	r2, [pc, #64]	@ (800d970 <xTaskPriorityInherit+0xc8>)
 800d930:	441a      	add	r2, r3
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	3304      	adds	r3, #4
 800d936:	4619      	mov	r1, r3
 800d938:	4610      	mov	r0, r2
 800d93a:	f7fe f8de 	bl	800bafa <vListInsertEnd>
 800d93e:	e004      	b.n	800d94a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d940:	4b0a      	ldr	r3, [pc, #40]	@ (800d96c <xTaskPriorityInherit+0xc4>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d94a:	2301      	movs	r3, #1
 800d94c:	60fb      	str	r3, [r7, #12]
 800d94e:	e008      	b.n	800d962 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d954:	4b05      	ldr	r3, [pc, #20]	@ (800d96c <xTaskPriorityInherit+0xc4>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d201      	bcs.n	800d962 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d95e:	2301      	movs	r3, #1
 800d960:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d962:	68fb      	ldr	r3, [r7, #12]
	}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	24000a54 	.word	0x24000a54
 800d970:	24000a58 	.word	0x24000a58
 800d974:	24000f30 	.word	0x24000f30

0800d978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d984:	2300      	movs	r3, #0
 800d986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d058      	beq.n	800da40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d98e:	4b2f      	ldr	r3, [pc, #188]	@ (800da4c <xTaskPriorityDisinherit+0xd4>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	429a      	cmp	r2, r3
 800d996:	d00b      	beq.n	800d9b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	60fb      	str	r3, [r7, #12]
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	e7fd      	b.n	800d9ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10b      	bne.n	800d9d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	60bb      	str	r3, [r7, #8]
}
 800d9ca:	bf00      	nop
 800d9cc:	bf00      	nop
 800d9ce:	e7fd      	b.n	800d9cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9d4:	1e5a      	subs	r2, r3, #1
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d02c      	beq.n	800da40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d128      	bne.n	800da40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe f8de 	bl	800bbb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da10:	4b0f      	ldr	r3, [pc, #60]	@ (800da50 <xTaskPriorityDisinherit+0xd8>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	429a      	cmp	r2, r3
 800da16:	d903      	bls.n	800da20 <xTaskPriorityDisinherit+0xa8>
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da1c:	4a0c      	ldr	r2, [pc, #48]	@ (800da50 <xTaskPriorityDisinherit+0xd8>)
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da24:	4613      	mov	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4a09      	ldr	r2, [pc, #36]	@ (800da54 <xTaskPriorityDisinherit+0xdc>)
 800da2e:	441a      	add	r2, r3
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	3304      	adds	r3, #4
 800da34:	4619      	mov	r1, r3
 800da36:	4610      	mov	r0, r2
 800da38:	f7fe f85f 	bl	800bafa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da3c:	2301      	movs	r3, #1
 800da3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da40:	697b      	ldr	r3, [r7, #20]
	}
 800da42:	4618      	mov	r0, r3
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	24000a54 	.word	0x24000a54
 800da50:	24000f30 	.word	0x24000f30
 800da54:	24000a58 	.word	0x24000a58

0800da58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da66:	2301      	movs	r3, #1
 800da68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d06c      	beq.n	800db4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10b      	bne.n	800da90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	60fb      	str	r3, [r7, #12]
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	e7fd      	b.n	800da8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	429a      	cmp	r2, r3
 800da98:	d902      	bls.n	800daa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	61fb      	str	r3, [r7, #28]
 800da9e:	e002      	b.n	800daa6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daaa:	69fa      	ldr	r2, [r7, #28]
 800daac:	429a      	cmp	r2, r3
 800daae:	d04c      	beq.n	800db4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d147      	bne.n	800db4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800daba:	4b26      	ldr	r3, [pc, #152]	@ (800db54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	69ba      	ldr	r2, [r7, #24]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d10b      	bne.n	800dadc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	60bb      	str	r3, [r7, #8]
}
 800dad6:	bf00      	nop
 800dad8:	bf00      	nop
 800dada:	e7fd      	b.n	800dad8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	69fa      	ldr	r2, [r7, #28]
 800dae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	2b00      	cmp	r3, #0
 800daee:	db04      	blt.n	800dafa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	6959      	ldr	r1, [r3, #20]
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	4613      	mov	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4413      	add	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4a13      	ldr	r2, [pc, #76]	@ (800db58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db0a:	4413      	add	r3, r2
 800db0c:	4299      	cmp	r1, r3
 800db0e:	d11c      	bne.n	800db4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	3304      	adds	r3, #4
 800db14:	4618      	mov	r0, r3
 800db16:	f7fe f84d 	bl	800bbb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db1e:	4b0f      	ldr	r3, [pc, #60]	@ (800db5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	429a      	cmp	r2, r3
 800db24:	d903      	bls.n	800db2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db2a:	4a0c      	ldr	r2, [pc, #48]	@ (800db5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db2c:	6013      	str	r3, [r2, #0]
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db32:	4613      	mov	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4a07      	ldr	r2, [pc, #28]	@ (800db58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800db3c:	441a      	add	r2, r3
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	3304      	adds	r3, #4
 800db42:	4619      	mov	r1, r3
 800db44:	4610      	mov	r0, r2
 800db46:	f7fd ffd8 	bl	800bafa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db4a:	bf00      	nop
 800db4c:	3720      	adds	r7, #32
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	24000a54 	.word	0x24000a54
 800db58:	24000a58 	.word	0x24000a58
 800db5c:	24000f30 	.word	0x24000f30

0800db60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db60:	b480      	push	{r7}
 800db62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db64:	4b07      	ldr	r3, [pc, #28]	@ (800db84 <pvTaskIncrementMutexHeldCount+0x24>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d004      	beq.n	800db76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db6c:	4b05      	ldr	r3, [pc, #20]	@ (800db84 <pvTaskIncrementMutexHeldCount+0x24>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db72:	3201      	adds	r2, #1
 800db74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800db76:	4b03      	ldr	r3, [pc, #12]	@ (800db84 <pvTaskIncrementMutexHeldCount+0x24>)
 800db78:	681b      	ldr	r3, [r3, #0]
	}
 800db7a:	4618      	mov	r0, r3
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	24000a54 	.word	0x24000a54

0800db88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db92:	4b21      	ldr	r3, [pc, #132]	@ (800dc18 <prvAddCurrentTaskToDelayedList+0x90>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db98:	4b20      	ldr	r3, [pc, #128]	@ (800dc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fe f808 	bl	800bbb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbaa:	d10a      	bne.n	800dbc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d007      	beq.n	800dbc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbb2:	4b1a      	ldr	r3, [pc, #104]	@ (800dc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	4619      	mov	r1, r3
 800dbba:	4819      	ldr	r0, [pc, #100]	@ (800dc20 <prvAddCurrentTaskToDelayedList+0x98>)
 800dbbc:	f7fd ff9d 	bl	800bafa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbc0:	e026      	b.n	800dc10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbca:	4b14      	ldr	r3, [pc, #80]	@ (800dc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d209      	bcs.n	800dbee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbda:	4b12      	ldr	r3, [pc, #72]	@ (800dc24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b0f      	ldr	r3, [pc, #60]	@ (800dc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4610      	mov	r0, r2
 800dbe8:	f7fd ffab 	bl	800bb42 <vListInsert>
}
 800dbec:	e010      	b.n	800dc10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbee:	4b0e      	ldr	r3, [pc, #56]	@ (800dc28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	4b0a      	ldr	r3, [pc, #40]	@ (800dc1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	f7fd ffa1 	bl	800bb42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc00:	4b0a      	ldr	r3, [pc, #40]	@ (800dc2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d202      	bcs.n	800dc10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc0a:	4a08      	ldr	r2, [pc, #32]	@ (800dc2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	6013      	str	r3, [r2, #0]
}
 800dc10:	bf00      	nop
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	24000f2c 	.word	0x24000f2c
 800dc1c:	24000a54 	.word	0x24000a54
 800dc20:	24000f14 	.word	0x24000f14
 800dc24:	24000ee4 	.word	0x24000ee4
 800dc28:	24000ee0 	.word	0x24000ee0
 800dc2c:	24000f48 	.word	0x24000f48

0800dc30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08a      	sub	sp, #40	@ 0x28
 800dc34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc3a:	f000 fb13 	bl	800e264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc3e:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb4 <xTimerCreateTimerTask+0x84>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d021      	beq.n	800dc8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc46:	2300      	movs	r3, #0
 800dc48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc4e:	1d3a      	adds	r2, r7, #4
 800dc50:	f107 0108 	add.w	r1, r7, #8
 800dc54:	f107 030c 	add.w	r3, r7, #12
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fd ff07 	bl	800ba6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	9202      	str	r2, [sp, #8]
 800dc66:	9301      	str	r3, [sp, #4]
 800dc68:	2302      	movs	r3, #2
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	460a      	mov	r2, r1
 800dc70:	4911      	ldr	r1, [pc, #68]	@ (800dcb8 <xTimerCreateTimerTask+0x88>)
 800dc72:	4812      	ldr	r0, [pc, #72]	@ (800dcbc <xTimerCreateTimerTask+0x8c>)
 800dc74:	f7fe feea 	bl	800ca4c <xTaskCreateStatic>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	4a11      	ldr	r2, [pc, #68]	@ (800dcc0 <xTimerCreateTimerTask+0x90>)
 800dc7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc7e:	4b10      	ldr	r3, [pc, #64]	@ (800dcc0 <xTimerCreateTimerTask+0x90>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc86:	2301      	movs	r3, #1
 800dc88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10b      	bne.n	800dca8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	613b      	str	r3, [r7, #16]
}
 800dca2:	bf00      	nop
 800dca4:	bf00      	nop
 800dca6:	e7fd      	b.n	800dca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dca8:	697b      	ldr	r3, [r7, #20]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	24000f84 	.word	0x24000f84
 800dcb8:	0800ef64 	.word	0x0800ef64
 800dcbc:	0800ddfd 	.word	0x0800ddfd
 800dcc0:	24000f88 	.word	0x24000f88

0800dcc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08a      	sub	sp, #40	@ 0x28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10b      	bne.n	800dcf4 <xTimerGenericCommand+0x30>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	623b      	str	r3, [r7, #32]
}
 800dcee:	bf00      	nop
 800dcf0:	bf00      	nop
 800dcf2:	e7fd      	b.n	800dcf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dcf4:	4b19      	ldr	r3, [pc, #100]	@ (800dd5c <xTimerGenericCommand+0x98>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d02a      	beq.n	800dd52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	dc18      	bgt.n	800dd40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd0e:	f7ff fdad 	bl	800d86c <xTaskGetSchedulerState>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d109      	bne.n	800dd2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd18:	4b10      	ldr	r3, [pc, #64]	@ (800dd5c <xTimerGenericCommand+0x98>)
 800dd1a:	6818      	ldr	r0, [r3, #0]
 800dd1c:	f107 0110 	add.w	r1, r7, #16
 800dd20:	2300      	movs	r3, #0
 800dd22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd24:	f7fe f8ea 	bl	800befc <xQueueGenericSend>
 800dd28:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd2a:	e012      	b.n	800dd52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd2c:	4b0b      	ldr	r3, [pc, #44]	@ (800dd5c <xTimerGenericCommand+0x98>)
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	f107 0110 	add.w	r1, r7, #16
 800dd34:	2300      	movs	r3, #0
 800dd36:	2200      	movs	r2, #0
 800dd38:	f7fe f8e0 	bl	800befc <xQueueGenericSend>
 800dd3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd3e:	e008      	b.n	800dd52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd40:	4b06      	ldr	r3, [pc, #24]	@ (800dd5c <xTimerGenericCommand+0x98>)
 800dd42:	6818      	ldr	r0, [r3, #0]
 800dd44:	f107 0110 	add.w	r1, r7, #16
 800dd48:	2300      	movs	r3, #0
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	f7fe f9d8 	bl	800c100 <xQueueGenericSendFromISR>
 800dd50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3728      	adds	r7, #40	@ 0x28
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	24000f84 	.word	0x24000f84

0800dd60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b088      	sub	sp, #32
 800dd64:	af02      	add	r7, sp, #8
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd6a:	4b23      	ldr	r3, [pc, #140]	@ (800ddf8 <prvProcessExpiredTimer+0x98>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	3304      	adds	r3, #4
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fd ff1b 	bl	800bbb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d023      	beq.n	800ddd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	699a      	ldr	r2, [r3, #24]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	18d1      	adds	r1, r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	6978      	ldr	r0, [r7, #20]
 800dd9a:	f000 f8d5 	bl	800df48 <prvInsertTimerInActiveList>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d020      	beq.n	800dde6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dda4:	2300      	movs	r3, #0
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	2300      	movs	r3, #0
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	2100      	movs	r1, #0
 800ddae:	6978      	ldr	r0, [r7, #20]
 800ddb0:	f7ff ff88 	bl	800dcc4 <xTimerGenericCommand>
 800ddb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d114      	bne.n	800dde6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	60fb      	str	r3, [r7, #12]
}
 800ddce:	bf00      	nop
 800ddd0:	bf00      	nop
 800ddd2:	e7fd      	b.n	800ddd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddda:	f023 0301 	bic.w	r3, r3, #1
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	6a1b      	ldr	r3, [r3, #32]
 800ddea:	6978      	ldr	r0, [r7, #20]
 800ddec:	4798      	blx	r3
}
 800ddee:	bf00      	nop
 800ddf0:	3718      	adds	r7, #24
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	24000f7c 	.word	0x24000f7c

0800ddfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de04:	f107 0308 	add.w	r3, r7, #8
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f859 	bl	800dec0 <prvGetNextExpireTime>
 800de0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	4619      	mov	r1, r3
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f000 f805 	bl	800de24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de1a:	f000 f8d7 	bl	800dfcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de1e:	bf00      	nop
 800de20:	e7f0      	b.n	800de04 <prvTimerTask+0x8>
	...

0800de24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de2e:	f7ff f871 	bl	800cf14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de32:	f107 0308 	add.w	r3, r7, #8
 800de36:	4618      	mov	r0, r3
 800de38:	f000 f866 	bl	800df08 <prvSampleTimeNow>
 800de3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d130      	bne.n	800dea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10a      	bne.n	800de60 <prvProcessTimerOrBlockTask+0x3c>
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d806      	bhi.n	800de60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de52:	f7ff f8a5 	bl	800cfa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de56:	68f9      	ldr	r1, [r7, #12]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ff81 	bl	800dd60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de5e:	e024      	b.n	800deaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d008      	beq.n	800de78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de66:	4b13      	ldr	r3, [pc, #76]	@ (800deb4 <prvProcessTimerOrBlockTask+0x90>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d101      	bne.n	800de74 <prvProcessTimerOrBlockTask+0x50>
 800de70:	2301      	movs	r3, #1
 800de72:	e000      	b.n	800de76 <prvProcessTimerOrBlockTask+0x52>
 800de74:	2300      	movs	r3, #0
 800de76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de78:	4b0f      	ldr	r3, [pc, #60]	@ (800deb8 <prvProcessTimerOrBlockTask+0x94>)
 800de7a:	6818      	ldr	r0, [r3, #0]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	4619      	mov	r1, r3
 800de86:	f7fe fdad 	bl	800c9e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de8a:	f7ff f889 	bl	800cfa0 <xTaskResumeAll>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de94:	4b09      	ldr	r3, [pc, #36]	@ (800debc <prvProcessTimerOrBlockTask+0x98>)
 800de96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	f3bf 8f6f 	isb	sy
}
 800dea4:	e001      	b.n	800deaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dea6:	f7ff f87b 	bl	800cfa0 <xTaskResumeAll>
}
 800deaa:	bf00      	nop
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	24000f80 	.word	0x24000f80
 800deb8:	24000f84 	.word	0x24000f84
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dec8:	4b0e      	ldr	r3, [pc, #56]	@ (800df04 <prvGetNextExpireTime+0x44>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <prvGetNextExpireTime+0x16>
 800ded2:	2201      	movs	r2, #1
 800ded4:	e000      	b.n	800ded8 <prvGetNextExpireTime+0x18>
 800ded6:	2200      	movs	r2, #0
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d105      	bne.n	800def0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dee4:	4b07      	ldr	r3, [pc, #28]	@ (800df04 <prvGetNextExpireTime+0x44>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60fb      	str	r3, [r7, #12]
 800deee:	e001      	b.n	800def4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800def0:	2300      	movs	r3, #0
 800def2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800def4:	68fb      	ldr	r3, [r7, #12]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	24000f7c 	.word	0x24000f7c

0800df08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df10:	f7ff f8e4 	bl	800d0dc <xTaskGetTickCount>
 800df14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df16:	4b0b      	ldr	r3, [pc, #44]	@ (800df44 <prvSampleTimeNow+0x3c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d205      	bcs.n	800df2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df20:	f000 f93a 	bl	800e198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	601a      	str	r2, [r3, #0]
 800df2a:	e002      	b.n	800df32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df32:	4a04      	ldr	r2, [pc, #16]	@ (800df44 <prvSampleTimeNow+0x3c>)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df38:	68fb      	ldr	r3, [r7, #12]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	24000f8c 	.word	0x24000f8c

0800df48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df56:	2300      	movs	r3, #0
 800df58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d812      	bhi.n	800df94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	1ad2      	subs	r2, r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	699b      	ldr	r3, [r3, #24]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d302      	bcc.n	800df82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800df7c:	2301      	movs	r3, #1
 800df7e:	617b      	str	r3, [r7, #20]
 800df80:	e01b      	b.n	800dfba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df82:	4b10      	ldr	r3, [pc, #64]	@ (800dfc4 <prvInsertTimerInActiveList+0x7c>)
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	3304      	adds	r3, #4
 800df8a:	4619      	mov	r1, r3
 800df8c:	4610      	mov	r0, r2
 800df8e:	f7fd fdd8 	bl	800bb42 <vListInsert>
 800df92:	e012      	b.n	800dfba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d206      	bcs.n	800dfaa <prvInsertTimerInActiveList+0x62>
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d302      	bcc.n	800dfaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	e007      	b.n	800dfba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfaa:	4b07      	ldr	r3, [pc, #28]	@ (800dfc8 <prvInsertTimerInActiveList+0x80>)
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	f7fd fdc4 	bl	800bb42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dfba:	697b      	ldr	r3, [r7, #20]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	24000f80 	.word	0x24000f80
 800dfc8:	24000f7c 	.word	0x24000f7c

0800dfcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08e      	sub	sp, #56	@ 0x38
 800dfd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfd2:	e0ce      	b.n	800e172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	da19      	bge.n	800e00e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dfda:	1d3b      	adds	r3, r7, #4
 800dfdc:	3304      	adds	r3, #4
 800dfde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10b      	bne.n	800dffe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	61fb      	str	r3, [r7, #28]
}
 800dff8:	bf00      	nop
 800dffa:	bf00      	nop
 800dffc:	e7fd      	b.n	800dffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e004:	6850      	ldr	r0, [r2, #4]
 800e006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e008:	6892      	ldr	r2, [r2, #8]
 800e00a:	4611      	mov	r1, r2
 800e00c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f2c0 80ae 	blt.w	800e172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d004      	beq.n	800e02c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e024:	3304      	adds	r3, #4
 800e026:	4618      	mov	r0, r3
 800e028:	f7fd fdc4 	bl	800bbb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e02c:	463b      	mov	r3, r7
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff ff6a 	bl	800df08 <prvSampleTimeNow>
 800e034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b09      	cmp	r3, #9
 800e03a:	f200 8097 	bhi.w	800e16c <prvProcessReceivedCommands+0x1a0>
 800e03e:	a201      	add	r2, pc, #4	@ (adr r2, 800e044 <prvProcessReceivedCommands+0x78>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e06d 	.word	0x0800e06d
 800e048:	0800e06d 	.word	0x0800e06d
 800e04c:	0800e06d 	.word	0x0800e06d
 800e050:	0800e0e3 	.word	0x0800e0e3
 800e054:	0800e0f7 	.word	0x0800e0f7
 800e058:	0800e143 	.word	0x0800e143
 800e05c:	0800e06d 	.word	0x0800e06d
 800e060:	0800e06d 	.word	0x0800e06d
 800e064:	0800e0e3 	.word	0x0800e0e3
 800e068:	0800e0f7 	.word	0x0800e0f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e06e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e072:	f043 0301 	orr.w	r3, r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e07a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e082:	699b      	ldr	r3, [r3, #24]
 800e084:	18d1      	adds	r1, r2, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e08a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e08c:	f7ff ff5c 	bl	800df48 <prvInsertTimerInActiveList>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d06c      	beq.n	800e170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e09c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0a4:	f003 0304 	and.w	r3, r3, #4
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d061      	beq.n	800e170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e0ac:	68ba      	ldr	r2, [r7, #8]
 800e0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	441a      	add	r2, r3
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0be:	f7ff fe01 	bl	800dcc4 <xTimerGenericCommand>
 800e0c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d152      	bne.n	800e170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	61bb      	str	r3, [r7, #24]
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	e7fd      	b.n	800e0de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0e8:	f023 0301 	bic.w	r3, r3, #1
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0f4:	e03d      	b.n	800e172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0fc:	f043 0301 	orr.w	r3, r3, #1
 800e100:	b2da      	uxtb	r2, r3
 800e102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d10b      	bne.n	800e12e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	617b      	str	r3, [r7, #20]
}
 800e128:	bf00      	nop
 800e12a:	bf00      	nop
 800e12c:	e7fd      	b.n	800e12a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	699a      	ldr	r2, [r3, #24]
 800e132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e134:	18d1      	adds	r1, r2, r3
 800e136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e13a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e13c:	f7ff ff04 	bl	800df48 <prvInsertTimerInActiveList>
					break;
 800e140:	e017      	b.n	800e172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e148:	f003 0302 	and.w	r3, r3, #2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d103      	bne.n	800e158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e152:	f000 fccd 	bl	800eaf0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e156:	e00c      	b.n	800e172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e15a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e15e:	f023 0301 	bic.w	r3, r3, #1
 800e162:	b2da      	uxtb	r2, r3
 800e164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e16a:	e002      	b.n	800e172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e16c:	bf00      	nop
 800e16e:	e000      	b.n	800e172 <prvProcessReceivedCommands+0x1a6>
					break;
 800e170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e172:	4b08      	ldr	r3, [pc, #32]	@ (800e194 <prvProcessReceivedCommands+0x1c8>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	1d39      	adds	r1, r7, #4
 800e178:	2200      	movs	r2, #0
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe f8ee 	bl	800c35c <xQueueReceive>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	f47f af26 	bne.w	800dfd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e188:	bf00      	nop
 800e18a:	bf00      	nop
 800e18c:	3730      	adds	r7, #48	@ 0x30
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	24000f84 	.word	0x24000f84

0800e198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e19e:	e049      	b.n	800e234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e25c <prvSwitchTimerLists+0xc4>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1aa:	4b2c      	ldr	r3, [pc, #176]	@ (800e25c <prvSwitchTimerLists+0xc4>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fd fcfb 	bl	800bbb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1cc:	f003 0304 	and.w	r3, r3, #4
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d02f      	beq.n	800e234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	4413      	add	r3, r2
 800e1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d90e      	bls.n	800e204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800e25c <prvSwitchTimerLists+0xc4>)
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f7fd fca0 	bl	800bb42 <vListInsert>
 800e202:	e017      	b.n	800e234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e204:	2300      	movs	r3, #0
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	2300      	movs	r3, #0
 800e20a:	693a      	ldr	r2, [r7, #16]
 800e20c:	2100      	movs	r1, #0
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff fd58 	bl	800dcc4 <xTimerGenericCommand>
 800e214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10b      	bne.n	800e234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	603b      	str	r3, [r7, #0]
}
 800e22e:	bf00      	nop
 800e230:	bf00      	nop
 800e232:	e7fd      	b.n	800e230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e234:	4b09      	ldr	r3, [pc, #36]	@ (800e25c <prvSwitchTimerLists+0xc4>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1b0      	bne.n	800e1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e23e:	4b07      	ldr	r3, [pc, #28]	@ (800e25c <prvSwitchTimerLists+0xc4>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e244:	4b06      	ldr	r3, [pc, #24]	@ (800e260 <prvSwitchTimerLists+0xc8>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a04      	ldr	r2, [pc, #16]	@ (800e25c <prvSwitchTimerLists+0xc4>)
 800e24a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e24c:	4a04      	ldr	r2, [pc, #16]	@ (800e260 <prvSwitchTimerLists+0xc8>)
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	6013      	str	r3, [r2, #0]
}
 800e252:	bf00      	nop
 800e254:	3718      	adds	r7, #24
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	24000f7c 	.word	0x24000f7c
 800e260:	24000f80 	.word	0x24000f80

0800e264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e26a:	f000 f96d 	bl	800e548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e26e:	4b15      	ldr	r3, [pc, #84]	@ (800e2c4 <prvCheckForValidListAndQueue+0x60>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d120      	bne.n	800e2b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e276:	4814      	ldr	r0, [pc, #80]	@ (800e2c8 <prvCheckForValidListAndQueue+0x64>)
 800e278:	f7fd fc12 	bl	800baa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e27c:	4813      	ldr	r0, [pc, #76]	@ (800e2cc <prvCheckForValidListAndQueue+0x68>)
 800e27e:	f7fd fc0f 	bl	800baa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e282:	4b13      	ldr	r3, [pc, #76]	@ (800e2d0 <prvCheckForValidListAndQueue+0x6c>)
 800e284:	4a10      	ldr	r2, [pc, #64]	@ (800e2c8 <prvCheckForValidListAndQueue+0x64>)
 800e286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e288:	4b12      	ldr	r3, [pc, #72]	@ (800e2d4 <prvCheckForValidListAndQueue+0x70>)
 800e28a:	4a10      	ldr	r2, [pc, #64]	@ (800e2cc <prvCheckForValidListAndQueue+0x68>)
 800e28c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e28e:	2300      	movs	r3, #0
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	4b11      	ldr	r3, [pc, #68]	@ (800e2d8 <prvCheckForValidListAndQueue+0x74>)
 800e294:	4a11      	ldr	r2, [pc, #68]	@ (800e2dc <prvCheckForValidListAndQueue+0x78>)
 800e296:	2110      	movs	r1, #16
 800e298:	200a      	movs	r0, #10
 800e29a:	f7fd fd1f 	bl	800bcdc <xQueueGenericCreateStatic>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	4a08      	ldr	r2, [pc, #32]	@ (800e2c4 <prvCheckForValidListAndQueue+0x60>)
 800e2a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2a4:	4b07      	ldr	r3, [pc, #28]	@ (800e2c4 <prvCheckForValidListAndQueue+0x60>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d005      	beq.n	800e2b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2ac:	4b05      	ldr	r3, [pc, #20]	@ (800e2c4 <prvCheckForValidListAndQueue+0x60>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	490b      	ldr	r1, [pc, #44]	@ (800e2e0 <prvCheckForValidListAndQueue+0x7c>)
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fb6c 	bl	800c990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2b8:	f000 f978 	bl	800e5ac <vPortExitCritical>
}
 800e2bc:	bf00      	nop
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	24000f84 	.word	0x24000f84
 800e2c8:	24000f54 	.word	0x24000f54
 800e2cc:	24000f68 	.word	0x24000f68
 800e2d0:	24000f7c 	.word	0x24000f7c
 800e2d4:	24000f80 	.word	0x24000f80
 800e2d8:	24001030 	.word	0x24001030
 800e2dc:	24000f90 	.word	0x24000f90
 800e2e0:	0800ef6c 	.word	0x0800ef6c

0800e2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	3b04      	subs	r3, #4
 800e2f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3b04      	subs	r3, #4
 800e302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	f023 0201 	bic.w	r2, r3, #1
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3b04      	subs	r3, #4
 800e312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e314:	4a0c      	ldr	r2, [pc, #48]	@ (800e348 <pxPortInitialiseStack+0x64>)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3b14      	subs	r3, #20
 800e31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3b04      	subs	r3, #4
 800e32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f06f 0202 	mvn.w	r2, #2
 800e332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	3b20      	subs	r3, #32
 800e338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e33a:	68fb      	ldr	r3, [r7, #12]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	0800e34d 	.word	0x0800e34d

0800e34c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e356:	4b13      	ldr	r3, [pc, #76]	@ (800e3a4 <prvTaskExitError+0x58>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35e:	d00b      	beq.n	800e378 <prvTaskExitError+0x2c>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	60fb      	str	r3, [r7, #12]
}
 800e372:	bf00      	nop
 800e374:	bf00      	nop
 800e376:	e7fd      	b.n	800e374 <prvTaskExitError+0x28>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	60bb      	str	r3, [r7, #8]
}
 800e38a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e38c:	bf00      	nop
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d0fc      	beq.n	800e38e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e394:	bf00      	nop
 800e396:	bf00      	nop
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	24000010 	.word	0x24000010
	...

0800e3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3b0:	4b07      	ldr	r3, [pc, #28]	@ (800e3d0 <pxCurrentTCBConst2>)
 800e3b2:	6819      	ldr	r1, [r3, #0]
 800e3b4:	6808      	ldr	r0, [r1, #0]
 800e3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ba:	f380 8809 	msr	PSP, r0
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f04f 0000 	mov.w	r0, #0
 800e3c6:	f380 8811 	msr	BASEPRI, r0
 800e3ca:	4770      	bx	lr
 800e3cc:	f3af 8000 	nop.w

0800e3d0 <pxCurrentTCBConst2>:
 800e3d0:	24000a54 	.word	0x24000a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop

0800e3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3d8:	4808      	ldr	r0, [pc, #32]	@ (800e3fc <prvPortStartFirstTask+0x24>)
 800e3da:	6800      	ldr	r0, [r0, #0]
 800e3dc:	6800      	ldr	r0, [r0, #0]
 800e3de:	f380 8808 	msr	MSP, r0
 800e3e2:	f04f 0000 	mov.w	r0, #0
 800e3e6:	f380 8814 	msr	CONTROL, r0
 800e3ea:	b662      	cpsie	i
 800e3ec:	b661      	cpsie	f
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	df00      	svc	0
 800e3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e3fa:	bf00      	nop
 800e3fc:	e000ed08 	.word	0xe000ed08

0800e400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e406:	4b47      	ldr	r3, [pc, #284]	@ (800e524 <xPortStartScheduler+0x124>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a47      	ldr	r2, [pc, #284]	@ (800e528 <xPortStartScheduler+0x128>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d10b      	bne.n	800e428 <xPortStartScheduler+0x28>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	613b      	str	r3, [r7, #16]
}
 800e422:	bf00      	nop
 800e424:	bf00      	nop
 800e426:	e7fd      	b.n	800e424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e428:	4b3e      	ldr	r3, [pc, #248]	@ (800e524 <xPortStartScheduler+0x124>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a3f      	ldr	r2, [pc, #252]	@ (800e52c <xPortStartScheduler+0x12c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d10b      	bne.n	800e44a <xPortStartScheduler+0x4a>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	60fb      	str	r3, [r7, #12]
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop
 800e448:	e7fd      	b.n	800e446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e44a:	4b39      	ldr	r3, [pc, #228]	@ (800e530 <xPortStartScheduler+0x130>)
 800e44c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	b2db      	uxtb	r3, r3
 800e454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	22ff      	movs	r2, #255	@ 0xff
 800e45a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	b2db      	uxtb	r3, r3
 800e462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e464:	78fb      	ldrb	r3, [r7, #3]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	4b31      	ldr	r3, [pc, #196]	@ (800e534 <xPortStartScheduler+0x134>)
 800e470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e472:	4b31      	ldr	r3, [pc, #196]	@ (800e538 <xPortStartScheduler+0x138>)
 800e474:	2207      	movs	r2, #7
 800e476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e478:	e009      	b.n	800e48e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e47a:	4b2f      	ldr	r3, [pc, #188]	@ (800e538 <xPortStartScheduler+0x138>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3b01      	subs	r3, #1
 800e480:	4a2d      	ldr	r2, [pc, #180]	@ (800e538 <xPortStartScheduler+0x138>)
 800e482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	b2db      	uxtb	r3, r3
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e48e:	78fb      	ldrb	r3, [r7, #3]
 800e490:	b2db      	uxtb	r3, r3
 800e492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e496:	2b80      	cmp	r3, #128	@ 0x80
 800e498:	d0ef      	beq.n	800e47a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e49a:	4b27      	ldr	r3, [pc, #156]	@ (800e538 <xPortStartScheduler+0x138>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f1c3 0307 	rsb	r3, r3, #7
 800e4a2:	2b04      	cmp	r3, #4
 800e4a4:	d00b      	beq.n	800e4be <xPortStartScheduler+0xbe>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	60bb      	str	r3, [r7, #8]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4be:	4b1e      	ldr	r3, [pc, #120]	@ (800e538 <xPortStartScheduler+0x138>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	021b      	lsls	r3, r3, #8
 800e4c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e538 <xPortStartScheduler+0x138>)
 800e4c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800e538 <xPortStartScheduler+0x138>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e4d0:	4a19      	ldr	r2, [pc, #100]	@ (800e538 <xPortStartScheduler+0x138>)
 800e4d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	b2da      	uxtb	r2, r3
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4dc:	4b17      	ldr	r3, [pc, #92]	@ (800e53c <xPortStartScheduler+0x13c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a16      	ldr	r2, [pc, #88]	@ (800e53c <xPortStartScheduler+0x13c>)
 800e4e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e4e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e4e8:	4b14      	ldr	r3, [pc, #80]	@ (800e53c <xPortStartScheduler+0x13c>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a13      	ldr	r2, [pc, #76]	@ (800e53c <xPortStartScheduler+0x13c>)
 800e4ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e4f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e4f4:	f000 f9a6 	bl	800e844 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e4f8:	4b11      	ldr	r3, [pc, #68]	@ (800e540 <xPortStartScheduler+0x140>)
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e4fe:	f000 f9dd 	bl	800e8bc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e502:	4b10      	ldr	r3, [pc, #64]	@ (800e544 <xPortStartScheduler+0x144>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a0f      	ldr	r2, [pc, #60]	@ (800e544 <xPortStartScheduler+0x144>)
 800e508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e50c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e50e:	f7ff ff63 	bl	800e3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e512:	f7fe fed5 	bl	800d2c0 <vTaskSwitchContext>
	prvTaskExitError();
 800e516:	f7ff ff19 	bl	800e34c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3718      	adds	r7, #24
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	e000ed00 	.word	0xe000ed00
 800e528:	410fc271 	.word	0x410fc271
 800e52c:	410fc270 	.word	0x410fc270
 800e530:	e000e400 	.word	0xe000e400
 800e534:	2400108c 	.word	0x2400108c
 800e538:	24001090 	.word	0x24001090
 800e53c:	e000ed20 	.word	0xe000ed20
 800e540:	24000010 	.word	0x24000010
 800e544:	e000ef34 	.word	0xe000ef34

0800e548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	607b      	str	r3, [r7, #4]
}
 800e560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e562:	4b10      	ldr	r3, [pc, #64]	@ (800e5a4 <vPortEnterCritical+0x5c>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3301      	adds	r3, #1
 800e568:	4a0e      	ldr	r2, [pc, #56]	@ (800e5a4 <vPortEnterCritical+0x5c>)
 800e56a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e56c:	4b0d      	ldr	r3, [pc, #52]	@ (800e5a4 <vPortEnterCritical+0x5c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d110      	bne.n	800e596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e574:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a8 <vPortEnterCritical+0x60>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00b      	beq.n	800e596 <vPortEnterCritical+0x4e>
	__asm volatile
 800e57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	603b      	str	r3, [r7, #0]
}
 800e590:	bf00      	nop
 800e592:	bf00      	nop
 800e594:	e7fd      	b.n	800e592 <vPortEnterCritical+0x4a>
	}
}
 800e596:	bf00      	nop
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	24000010 	.word	0x24000010
 800e5a8:	e000ed04 	.word	0xe000ed04

0800e5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5b2:	4b12      	ldr	r3, [pc, #72]	@ (800e5fc <vPortExitCritical+0x50>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10b      	bne.n	800e5d2 <vPortExitCritical+0x26>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	607b      	str	r3, [r7, #4]
}
 800e5cc:	bf00      	nop
 800e5ce:	bf00      	nop
 800e5d0:	e7fd      	b.n	800e5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5fc <vPortExitCritical+0x50>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	4a08      	ldr	r2, [pc, #32]	@ (800e5fc <vPortExitCritical+0x50>)
 800e5da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5dc:	4b07      	ldr	r3, [pc, #28]	@ (800e5fc <vPortExitCritical+0x50>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d105      	bne.n	800e5f0 <vPortExitCritical+0x44>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	f383 8811 	msr	BASEPRI, r3
}
 800e5ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	24000010 	.word	0x24000010

0800e600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e600:	f3ef 8009 	mrs	r0, PSP
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	4b15      	ldr	r3, [pc, #84]	@ (800e660 <pxCurrentTCBConst>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	f01e 0f10 	tst.w	lr, #16
 800e610:	bf08      	it	eq
 800e612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61a:	6010      	str	r0, [r2, #0]
 800e61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e624:	f380 8811 	msr	BASEPRI, r0
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f7fe fe46 	bl	800d2c0 <vTaskSwitchContext>
 800e634:	f04f 0000 	mov.w	r0, #0
 800e638:	f380 8811 	msr	BASEPRI, r0
 800e63c:	bc09      	pop	{r0, r3}
 800e63e:	6819      	ldr	r1, [r3, #0]
 800e640:	6808      	ldr	r0, [r1, #0]
 800e642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e646:	f01e 0f10 	tst.w	lr, #16
 800e64a:	bf08      	it	eq
 800e64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e650:	f380 8809 	msr	PSP, r0
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	f3af 8000 	nop.w

0800e660 <pxCurrentTCBConst>:
 800e660:	24000a54 	.word	0x24000a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop

0800e668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	607b      	str	r3, [r7, #4]
}
 800e680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e682:	f7fe fd63 	bl	800d14c <xTaskIncrementTick>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d003      	beq.n	800e694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e68c:	4b06      	ldr	r3, [pc, #24]	@ (800e6a8 <xPortSysTickHandler+0x40>)
 800e68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e692:	601a      	str	r2, [r3, #0]
 800e694:	2300      	movs	r3, #0
 800e696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	f383 8811 	msr	BASEPRI, r3
}
 800e69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6a0:	bf00      	nop
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	e000ed04 	.word	0xe000ed04

0800e6ac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b088      	sub	sp, #32
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800e6b4:	4b5d      	ldr	r3, [pc, #372]	@ (800e82c <vPortSuppressTicksAndSleep+0x180>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d902      	bls.n	800e6c4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800e6be:	4b5b      	ldr	r3, [pc, #364]	@ (800e82c <vPortSuppressTicksAndSleep+0x180>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800e6c4:	4b5a      	ldr	r3, [pc, #360]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a59      	ldr	r2, [pc, #356]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e6ca:	f023 0301 	bic.w	r3, r3, #1
 800e6ce:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800e6d0:	4b58      	ldr	r3, [pc, #352]	@ (800e834 <vPortSuppressTicksAndSleep+0x188>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	4957      	ldr	r1, [pc, #348]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e6da:	6809      	ldr	r1, [r1, #0]
 800e6dc:	fb01 f303 	mul.w	r3, r1, r3
 800e6e0:	4413      	add	r3, r2
 800e6e2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800e6e4:	4b55      	ldr	r3, [pc, #340]	@ (800e83c <vPortSuppressTicksAndSleep+0x190>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	69fa      	ldr	r2, [r7, #28]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d904      	bls.n	800e6f8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800e6ee:	4b53      	ldr	r3, [pc, #332]	@ (800e83c <vPortSuppressTicksAndSleep+0x190>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	69fa      	ldr	r2, [r7, #28]
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800e6f8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800e6fa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800e6fe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800e702:	f7fe ffc1 	bl	800d688 <eTaskConfirmSleepModeStatus>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d110      	bne.n	800e72e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800e70c:	4b49      	ldr	r3, [pc, #292]	@ (800e834 <vPortSuppressTicksAndSleep+0x188>)
 800e70e:	4a4c      	ldr	r2, [pc, #304]	@ (800e840 <vPortSuppressTicksAndSleep+0x194>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e714:	4b46      	ldr	r3, [pc, #280]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a45      	ldr	r2, [pc, #276]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e71a:	f043 0301 	orr.w	r3, r3, #1
 800e71e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800e720:	4b45      	ldr	r3, [pc, #276]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a46      	ldr	r2, [pc, #280]	@ (800e840 <vPortSuppressTicksAndSleep+0x194>)
 800e726:	3b01      	subs	r3, #1
 800e728:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800e72a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800e72c:	e079      	b.n	800e822 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800e72e:	4a44      	ldr	r2, [pc, #272]	@ (800e840 <vPortSuppressTicksAndSleep+0x194>)
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e734:	4b3f      	ldr	r3, [pc, #252]	@ (800e834 <vPortSuppressTicksAndSleep+0x188>)
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e73a:	4b3d      	ldr	r3, [pc, #244]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a3c      	ldr	r2, [pc, #240]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e740:	f043 0301 	orr.w	r3, r3, #1
 800e744:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800e74a:	2300      	movs	r3, #0
 800e74c:	613b      	str	r3, [r7, #16]
 800e74e:	6938      	ldr	r0, [r7, #16]
 800e750:	f7f1 ff6e 	bl	8000630 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d004      	beq.n	800e764 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800e75a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800e75e:	bf30      	wfi
				__asm volatile( "isb" );
 800e760:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7f1 ff6d 	bl	8000644 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800e76a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800e76c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800e770:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800e774:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800e776:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800e77a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800e77e:	4b2c      	ldr	r3, [pc, #176]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e780:	2206      	movs	r2, #6
 800e782:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800e784:	4b2a      	ldr	r3, [pc, #168]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d01d      	beq.n	800e7cc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800e790:	4b29      	ldr	r3, [pc, #164]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	4b27      	ldr	r3, [pc, #156]	@ (800e834 <vPortSuppressTicksAndSleep+0x188>)
 800e796:	6819      	ldr	r1, [r3, #0]
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	1acb      	subs	r3, r1, r3
 800e79c:	4413      	add	r3, r2
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800e7a2:	4b26      	ldr	r3, [pc, #152]	@ (800e83c <vPortSuppressTicksAndSleep+0x190>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	697a      	ldr	r2, [r7, #20]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d304      	bcc.n	800e7b6 <vPortSuppressTicksAndSleep+0x10a>
 800e7ac:	4b22      	ldr	r3, [pc, #136]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	697a      	ldr	r2, [r7, #20]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d903      	bls.n	800e7be <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800e7b6:	4b20      	ldr	r3, [pc, #128]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800e7be:	4a20      	ldr	r2, [pc, #128]	@ (800e840 <vPortSuppressTicksAndSleep+0x194>)
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	61bb      	str	r3, [r7, #24]
 800e7ca:	e018      	b.n	800e7fe <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	fb03 f202 	mul.w	r2, r3, r2
 800e7d6:	4b17      	ldr	r3, [pc, #92]	@ (800e834 <vPortSuppressTicksAndSleep+0x188>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800e7de:	4b16      	ldr	r3, [pc, #88]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7e8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	4a12      	ldr	r2, [pc, #72]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e7f0:	6812      	ldr	r2, [r2, #0]
 800e7f2:	fb03 f202 	mul.w	r2, r3, r2
 800e7f6:	4912      	ldr	r1, [pc, #72]	@ (800e840 <vPortSuppressTicksAndSleep+0x194>)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e834 <vPortSuppressTicksAndSleep+0x188>)
 800e800:	2200      	movs	r2, #0
 800e802:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e804:	4b0a      	ldr	r3, [pc, #40]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a09      	ldr	r2, [pc, #36]	@ (800e830 <vPortSuppressTicksAndSleep+0x184>)
 800e80a:	f043 0301 	orr.w	r3, r3, #1
 800e80e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800e810:	69b8      	ldr	r0, [r7, #24]
 800e812:	f7fe fc73 	bl	800d0fc <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800e816:	4b08      	ldr	r3, [pc, #32]	@ (800e838 <vPortSuppressTicksAndSleep+0x18c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a09      	ldr	r2, [pc, #36]	@ (800e840 <vPortSuppressTicksAndSleep+0x194>)
 800e81c:	3b01      	subs	r3, #1
 800e81e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800e820:	b662      	cpsie	i
	}
 800e822:	bf00      	nop
 800e824:	3720      	adds	r7, #32
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	24001084 	.word	0x24001084
 800e830:	e000e010 	.word	0xe000e010
 800e834:	e000e018 	.word	0xe000e018
 800e838:	24001080 	.word	0x24001080
 800e83c:	24001088 	.word	0x24001088
 800e840:	e000e014 	.word	0xe000e014

0800e844 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800e848:	4b14      	ldr	r3, [pc, #80]	@ (800e89c <vPortSetupTimerInterrupt+0x58>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a14      	ldr	r2, [pc, #80]	@ (800e8a0 <vPortSetupTimerInterrupt+0x5c>)
 800e84e:	fba2 2303 	umull	r2, r3, r2, r3
 800e852:	099b      	lsrs	r3, r3, #6
 800e854:	4a13      	ldr	r2, [pc, #76]	@ (800e8a4 <vPortSetupTimerInterrupt+0x60>)
 800e856:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800e858:	4b12      	ldr	r3, [pc, #72]	@ (800e8a4 <vPortSetupTimerInterrupt+0x60>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800e860:	fbb2 f3f3 	udiv	r3, r2, r3
 800e864:	4a10      	ldr	r2, [pc, #64]	@ (800e8a8 <vPortSetupTimerInterrupt+0x64>)
 800e866:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800e868:	4b10      	ldr	r3, [pc, #64]	@ (800e8ac <vPortSetupTimerInterrupt+0x68>)
 800e86a:	222d      	movs	r2, #45	@ 0x2d
 800e86c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e86e:	4b10      	ldr	r3, [pc, #64]	@ (800e8b0 <vPortSetupTimerInterrupt+0x6c>)
 800e870:	2200      	movs	r2, #0
 800e872:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e874:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b4 <vPortSetupTimerInterrupt+0x70>)
 800e876:	2200      	movs	r2, #0
 800e878:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e87a:	4b08      	ldr	r3, [pc, #32]	@ (800e89c <vPortSetupTimerInterrupt+0x58>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a08      	ldr	r2, [pc, #32]	@ (800e8a0 <vPortSetupTimerInterrupt+0x5c>)
 800e880:	fba2 2303 	umull	r2, r3, r2, r3
 800e884:	099b      	lsrs	r3, r3, #6
 800e886:	4a0c      	ldr	r2, [pc, #48]	@ (800e8b8 <vPortSetupTimerInterrupt+0x74>)
 800e888:	3b01      	subs	r3, #1
 800e88a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e88c:	4b08      	ldr	r3, [pc, #32]	@ (800e8b0 <vPortSetupTimerInterrupt+0x6c>)
 800e88e:	2207      	movs	r2, #7
 800e890:	601a      	str	r2, [r3, #0]
}
 800e892:	bf00      	nop
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	24000000 	.word	0x24000000
 800e8a0:	10624dd3 	.word	0x10624dd3
 800e8a4:	24001080 	.word	0x24001080
 800e8a8:	24001084 	.word	0x24001084
 800e8ac:	24001088 	.word	0x24001088
 800e8b0:	e000e010 	.word	0xe000e010
 800e8b4:	e000e018 	.word	0xe000e018
 800e8b8:	e000e014 	.word	0xe000e014

0800e8bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8bc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e8cc <vPortEnableVFP+0x10>
 800e8c0:	6801      	ldr	r1, [r0, #0]
 800e8c2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e8c6:	6001      	str	r1, [r0, #0]
 800e8c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8ca:	bf00      	nop
 800e8cc:	e000ed88 	.word	0xe000ed88

0800e8d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8d6:	f3ef 8305 	mrs	r3, IPSR
 800e8da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b0f      	cmp	r3, #15
 800e8e0:	d915      	bls.n	800e90e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8e2:	4a18      	ldr	r2, [pc, #96]	@ (800e944 <vPortValidateInterruptPriority+0x74>)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8ec:	4b16      	ldr	r3, [pc, #88]	@ (800e948 <vPortValidateInterruptPriority+0x78>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	7afa      	ldrb	r2, [r7, #11]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d20b      	bcs.n	800e90e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	607b      	str	r3, [r7, #4]
}
 800e908:	bf00      	nop
 800e90a:	bf00      	nop
 800e90c:	e7fd      	b.n	800e90a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e90e:	4b0f      	ldr	r3, [pc, #60]	@ (800e94c <vPortValidateInterruptPriority+0x7c>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e916:	4b0e      	ldr	r3, [pc, #56]	@ (800e950 <vPortValidateInterruptPriority+0x80>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d90b      	bls.n	800e936 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e922:	f383 8811 	msr	BASEPRI, r3
 800e926:	f3bf 8f6f 	isb	sy
 800e92a:	f3bf 8f4f 	dsb	sy
 800e92e:	603b      	str	r3, [r7, #0]
}
 800e930:	bf00      	nop
 800e932:	bf00      	nop
 800e934:	e7fd      	b.n	800e932 <vPortValidateInterruptPriority+0x62>
	}
 800e936:	bf00      	nop
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	e000e3f0 	.word	0xe000e3f0
 800e948:	2400108c 	.word	0x2400108c
 800e94c:	e000ed0c 	.word	0xe000ed0c
 800e950:	24001090 	.word	0x24001090

0800e954 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b08a      	sub	sp, #40	@ 0x28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e95c:	2300      	movs	r3, #0
 800e95e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e960:	f7fe fad8 	bl	800cf14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e964:	4b5c      	ldr	r3, [pc, #368]	@ (800ead8 <pvPortMalloc+0x184>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e96c:	f000 f924 	bl	800ebb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e970:	4b5a      	ldr	r3, [pc, #360]	@ (800eadc <pvPortMalloc+0x188>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4013      	ands	r3, r2
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f040 8095 	bne.w	800eaa8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d01e      	beq.n	800e9c2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e984:	2208      	movs	r2, #8
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4413      	add	r3, r2
 800e98a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	2b00      	cmp	r3, #0
 800e994:	d015      	beq.n	800e9c2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f023 0307 	bic.w	r3, r3, #7
 800e99c:	3308      	adds	r3, #8
 800e99e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f003 0307 	and.w	r3, r3, #7
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00b      	beq.n	800e9c2 <pvPortMalloc+0x6e>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	617b      	str	r3, [r7, #20]
}
 800e9bc:	bf00      	nop
 800e9be:	bf00      	nop
 800e9c0:	e7fd      	b.n	800e9be <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d06f      	beq.n	800eaa8 <pvPortMalloc+0x154>
 800e9c8:	4b45      	ldr	r3, [pc, #276]	@ (800eae0 <pvPortMalloc+0x18c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d86a      	bhi.n	800eaa8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9d2:	4b44      	ldr	r3, [pc, #272]	@ (800eae4 <pvPortMalloc+0x190>)
 800e9d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9d6:	4b43      	ldr	r3, [pc, #268]	@ (800eae4 <pvPortMalloc+0x190>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9dc:	e004      	b.n	800e9e8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d903      	bls.n	800e9fa <pvPortMalloc+0xa6>
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1f1      	bne.n	800e9de <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9fa:	4b37      	ldr	r3, [pc, #220]	@ (800ead8 <pvPortMalloc+0x184>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d051      	beq.n	800eaa8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2208      	movs	r2, #8
 800ea0a:	4413      	add	r3, r2
 800ea0c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	1ad2      	subs	r2, r2, r3
 800ea1e:	2308      	movs	r3, #8
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d920      	bls.n	800ea68 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	f003 0307 	and.w	r3, r3, #7
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00b      	beq.n	800ea50 <pvPortMalloc+0xfc>
	__asm volatile
 800ea38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	613b      	str	r3, [r7, #16]
}
 800ea4a:	bf00      	nop
 800ea4c:	bf00      	nop
 800ea4e:	e7fd      	b.n	800ea4c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea52:	685a      	ldr	r2, [r3, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	1ad2      	subs	r2, r2, r3
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea62:	69b8      	ldr	r0, [r7, #24]
 800ea64:	f000 f90a 	bl	800ec7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea68:	4b1d      	ldr	r3, [pc, #116]	@ (800eae0 <pvPortMalloc+0x18c>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	4a1b      	ldr	r2, [pc, #108]	@ (800eae0 <pvPortMalloc+0x18c>)
 800ea74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea76:	4b1a      	ldr	r3, [pc, #104]	@ (800eae0 <pvPortMalloc+0x18c>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	4b1b      	ldr	r3, [pc, #108]	@ (800eae8 <pvPortMalloc+0x194>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d203      	bcs.n	800ea8a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea82:	4b17      	ldr	r3, [pc, #92]	@ (800eae0 <pvPortMalloc+0x18c>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a18      	ldr	r2, [pc, #96]	@ (800eae8 <pvPortMalloc+0x194>)
 800ea88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	4b13      	ldr	r3, [pc, #76]	@ (800eadc <pvPortMalloc+0x188>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	431a      	orrs	r2, r3
 800ea94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea9e:	4b13      	ldr	r3, [pc, #76]	@ (800eaec <pvPortMalloc+0x198>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	4a11      	ldr	r2, [pc, #68]	@ (800eaec <pvPortMalloc+0x198>)
 800eaa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eaa8:	f7fe fa7a 	bl	800cfa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	f003 0307 	and.w	r3, r3, #7
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00b      	beq.n	800eace <pvPortMalloc+0x17a>
	__asm volatile
 800eab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaba:	f383 8811 	msr	BASEPRI, r3
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	60fb      	str	r3, [r7, #12]
}
 800eac8:	bf00      	nop
 800eaca:	bf00      	nop
 800eacc:	e7fd      	b.n	800eaca <pvPortMalloc+0x176>
	return pvReturn;
 800eace:	69fb      	ldr	r3, [r7, #28]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3728      	adds	r7, #40	@ 0x28
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	24004c9c 	.word	0x24004c9c
 800eadc:	24004cb0 	.word	0x24004cb0
 800eae0:	24004ca0 	.word	0x24004ca0
 800eae4:	24004c94 	.word	0x24004c94
 800eae8:	24004ca4 	.word	0x24004ca4
 800eaec:	24004ca8 	.word	0x24004ca8

0800eaf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d04f      	beq.n	800eba2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb02:	2308      	movs	r3, #8
 800eb04:	425b      	negs	r3, r3
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	4413      	add	r3, r2
 800eb0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	4b25      	ldr	r3, [pc, #148]	@ (800ebac <vPortFree+0xbc>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4013      	ands	r3, r2
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10b      	bne.n	800eb36 <vPortFree+0x46>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60fb      	str	r3, [r7, #12]
}
 800eb30:	bf00      	nop
 800eb32:	bf00      	nop
 800eb34:	e7fd      	b.n	800eb32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00b      	beq.n	800eb56 <vPortFree+0x66>
	__asm volatile
 800eb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb42:	f383 8811 	msr	BASEPRI, r3
 800eb46:	f3bf 8f6f 	isb	sy
 800eb4a:	f3bf 8f4f 	dsb	sy
 800eb4e:	60bb      	str	r3, [r7, #8]
}
 800eb50:	bf00      	nop
 800eb52:	bf00      	nop
 800eb54:	e7fd      	b.n	800eb52 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	685a      	ldr	r2, [r3, #4]
 800eb5a:	4b14      	ldr	r3, [pc, #80]	@ (800ebac <vPortFree+0xbc>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4013      	ands	r3, r2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d01e      	beq.n	800eba2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d11a      	bne.n	800eba2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	685a      	ldr	r2, [r3, #4]
 800eb70:	4b0e      	ldr	r3, [pc, #56]	@ (800ebac <vPortFree+0xbc>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	43db      	mvns	r3, r3
 800eb76:	401a      	ands	r2, r3
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb7c:	f7fe f9ca 	bl	800cf14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb0 <vPortFree+0xc0>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4413      	add	r3, r2
 800eb8a:	4a09      	ldr	r2, [pc, #36]	@ (800ebb0 <vPortFree+0xc0>)
 800eb8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb8e:	6938      	ldr	r0, [r7, #16]
 800eb90:	f000 f874 	bl	800ec7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb94:	4b07      	ldr	r3, [pc, #28]	@ (800ebb4 <vPortFree+0xc4>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	4a06      	ldr	r2, [pc, #24]	@ (800ebb4 <vPortFree+0xc4>)
 800eb9c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb9e:	f7fe f9ff 	bl	800cfa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eba2:	bf00      	nop
 800eba4:	3718      	adds	r7, #24
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	24004cb0 	.word	0x24004cb0
 800ebb0:	24004ca0 	.word	0x24004ca0
 800ebb4:	24004cac 	.word	0x24004cac

0800ebb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebbe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ebc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebc4:	4b27      	ldr	r3, [pc, #156]	@ (800ec64 <prvHeapInit+0xac>)
 800ebc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f003 0307 	and.w	r3, r3, #7
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00c      	beq.n	800ebec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3307      	adds	r3, #7
 800ebd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f023 0307 	bic.w	r3, r3, #7
 800ebde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	4a1f      	ldr	r2, [pc, #124]	@ (800ec64 <prvHeapInit+0xac>)
 800ebe8:	4413      	add	r3, r2
 800ebea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ec68 <prvHeapInit+0xb0>)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebf6:	4b1c      	ldr	r3, [pc, #112]	@ (800ec68 <prvHeapInit+0xb0>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	4413      	add	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec04:	2208      	movs	r2, #8
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	1a9b      	subs	r3, r3, r2
 800ec0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f023 0307 	bic.w	r3, r3, #7
 800ec12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	4a15      	ldr	r2, [pc, #84]	@ (800ec6c <prvHeapInit+0xb4>)
 800ec18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec1a:	4b14      	ldr	r3, [pc, #80]	@ (800ec6c <prvHeapInit+0xb4>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec22:	4b12      	ldr	r3, [pc, #72]	@ (800ec6c <prvHeapInit+0xb4>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec38:	4b0c      	ldr	r3, [pc, #48]	@ (800ec6c <prvHeapInit+0xb4>)
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	4a0a      	ldr	r2, [pc, #40]	@ (800ec70 <prvHeapInit+0xb8>)
 800ec46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	4a09      	ldr	r2, [pc, #36]	@ (800ec74 <prvHeapInit+0xbc>)
 800ec4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec50:	4b09      	ldr	r3, [pc, #36]	@ (800ec78 <prvHeapInit+0xc0>)
 800ec52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ec56:	601a      	str	r2, [r3, #0]
}
 800ec58:	bf00      	nop
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr
 800ec64:	24001094 	.word	0x24001094
 800ec68:	24004c94 	.word	0x24004c94
 800ec6c:	24004c9c 	.word	0x24004c9c
 800ec70:	24004ca4 	.word	0x24004ca4
 800ec74:	24004ca0 	.word	0x24004ca0
 800ec78:	24004cb0 	.word	0x24004cb0

0800ec7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec84:	4b28      	ldr	r3, [pc, #160]	@ (800ed28 <prvInsertBlockIntoFreeList+0xac>)
 800ec86:	60fb      	str	r3, [r7, #12]
 800ec88:	e002      	b.n	800ec90 <prvInsertBlockIntoFreeList+0x14>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	60fb      	str	r3, [r7, #12]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d8f7      	bhi.n	800ec8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	4413      	add	r3, r2
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d108      	bne.n	800ecbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	685a      	ldr	r2, [r3, #4]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	441a      	add	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	68ba      	ldr	r2, [r7, #8]
 800ecc8:	441a      	add	r2, r3
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d118      	bne.n	800ed04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	4b15      	ldr	r3, [pc, #84]	@ (800ed2c <prvInsertBlockIntoFreeList+0xb0>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d00d      	beq.n	800ecfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	441a      	add	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	e008      	b.n	800ed0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ed2c <prvInsertBlockIntoFreeList+0xb0>)
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	601a      	str	r2, [r3, #0]
 800ed02:	e003      	b.n	800ed0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d002      	beq.n	800ed1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed1a:	bf00      	nop
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	24004c94 	.word	0x24004c94
 800ed2c:	24004c9c 	.word	0x24004c9c

0800ed30 <memset>:
 800ed30:	4402      	add	r2, r0
 800ed32:	4603      	mov	r3, r0
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d100      	bne.n	800ed3a <memset+0xa>
 800ed38:	4770      	bx	lr
 800ed3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed3e:	e7f9      	b.n	800ed34 <memset+0x4>

0800ed40 <_reclaim_reent>:
 800ed40:	4b29      	ldr	r3, [pc, #164]	@ (800ede8 <_reclaim_reent+0xa8>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4283      	cmp	r3, r0
 800ed46:	b570      	push	{r4, r5, r6, lr}
 800ed48:	4604      	mov	r4, r0
 800ed4a:	d04b      	beq.n	800ede4 <_reclaim_reent+0xa4>
 800ed4c:	69c3      	ldr	r3, [r0, #28]
 800ed4e:	b1ab      	cbz	r3, 800ed7c <_reclaim_reent+0x3c>
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	b16b      	cbz	r3, 800ed70 <_reclaim_reent+0x30>
 800ed54:	2500      	movs	r5, #0
 800ed56:	69e3      	ldr	r3, [r4, #28]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	5959      	ldr	r1, [r3, r5]
 800ed5c:	2900      	cmp	r1, #0
 800ed5e:	d13b      	bne.n	800edd8 <_reclaim_reent+0x98>
 800ed60:	3504      	adds	r5, #4
 800ed62:	2d80      	cmp	r5, #128	@ 0x80
 800ed64:	d1f7      	bne.n	800ed56 <_reclaim_reent+0x16>
 800ed66:	69e3      	ldr	r3, [r4, #28]
 800ed68:	4620      	mov	r0, r4
 800ed6a:	68d9      	ldr	r1, [r3, #12]
 800ed6c:	f000 f872 	bl	800ee54 <_free_r>
 800ed70:	69e3      	ldr	r3, [r4, #28]
 800ed72:	6819      	ldr	r1, [r3, #0]
 800ed74:	b111      	cbz	r1, 800ed7c <_reclaim_reent+0x3c>
 800ed76:	4620      	mov	r0, r4
 800ed78:	f000 f86c 	bl	800ee54 <_free_r>
 800ed7c:	6961      	ldr	r1, [r4, #20]
 800ed7e:	b111      	cbz	r1, 800ed86 <_reclaim_reent+0x46>
 800ed80:	4620      	mov	r0, r4
 800ed82:	f000 f867 	bl	800ee54 <_free_r>
 800ed86:	69e1      	ldr	r1, [r4, #28]
 800ed88:	b111      	cbz	r1, 800ed90 <_reclaim_reent+0x50>
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 f862 	bl	800ee54 <_free_r>
 800ed90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ed92:	b111      	cbz	r1, 800ed9a <_reclaim_reent+0x5a>
 800ed94:	4620      	mov	r0, r4
 800ed96:	f000 f85d 	bl	800ee54 <_free_r>
 800ed9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed9c:	b111      	cbz	r1, 800eda4 <_reclaim_reent+0x64>
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 f858 	bl	800ee54 <_free_r>
 800eda4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800eda6:	b111      	cbz	r1, 800edae <_reclaim_reent+0x6e>
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 f853 	bl	800ee54 <_free_r>
 800edae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800edb0:	b111      	cbz	r1, 800edb8 <_reclaim_reent+0x78>
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 f84e 	bl	800ee54 <_free_r>
 800edb8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800edba:	b111      	cbz	r1, 800edc2 <_reclaim_reent+0x82>
 800edbc:	4620      	mov	r0, r4
 800edbe:	f000 f849 	bl	800ee54 <_free_r>
 800edc2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800edc4:	b111      	cbz	r1, 800edcc <_reclaim_reent+0x8c>
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 f844 	bl	800ee54 <_free_r>
 800edcc:	6a23      	ldr	r3, [r4, #32]
 800edce:	b14b      	cbz	r3, 800ede4 <_reclaim_reent+0xa4>
 800edd0:	4620      	mov	r0, r4
 800edd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edd6:	4718      	bx	r3
 800edd8:	680e      	ldr	r6, [r1, #0]
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 f83a 	bl	800ee54 <_free_r>
 800ede0:	4631      	mov	r1, r6
 800ede2:	e7bb      	b.n	800ed5c <_reclaim_reent+0x1c>
 800ede4:	bd70      	pop	{r4, r5, r6, pc}
 800ede6:	bf00      	nop
 800ede8:	24000014 	.word	0x24000014

0800edec <__libc_init_array>:
 800edec:	b570      	push	{r4, r5, r6, lr}
 800edee:	4d0d      	ldr	r5, [pc, #52]	@ (800ee24 <__libc_init_array+0x38>)
 800edf0:	4c0d      	ldr	r4, [pc, #52]	@ (800ee28 <__libc_init_array+0x3c>)
 800edf2:	1b64      	subs	r4, r4, r5
 800edf4:	10a4      	asrs	r4, r4, #2
 800edf6:	2600      	movs	r6, #0
 800edf8:	42a6      	cmp	r6, r4
 800edfa:	d109      	bne.n	800ee10 <__libc_init_array+0x24>
 800edfc:	4d0b      	ldr	r5, [pc, #44]	@ (800ee2c <__libc_init_array+0x40>)
 800edfe:	4c0c      	ldr	r4, [pc, #48]	@ (800ee30 <__libc_init_array+0x44>)
 800ee00:	f000 f87e 	bl	800ef00 <_init>
 800ee04:	1b64      	subs	r4, r4, r5
 800ee06:	10a4      	asrs	r4, r4, #2
 800ee08:	2600      	movs	r6, #0
 800ee0a:	42a6      	cmp	r6, r4
 800ee0c:	d105      	bne.n	800ee1a <__libc_init_array+0x2e>
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
 800ee10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee14:	4798      	blx	r3
 800ee16:	3601      	adds	r6, #1
 800ee18:	e7ee      	b.n	800edf8 <__libc_init_array+0xc>
 800ee1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee1e:	4798      	blx	r3
 800ee20:	3601      	adds	r6, #1
 800ee22:	e7f2      	b.n	800ee0a <__libc_init_array+0x1e>
 800ee24:	0800efe0 	.word	0x0800efe0
 800ee28:	0800efe0 	.word	0x0800efe0
 800ee2c:	0800efe0 	.word	0x0800efe0
 800ee30:	0800efe4 	.word	0x0800efe4

0800ee34 <__retarget_lock_acquire_recursive>:
 800ee34:	4770      	bx	lr

0800ee36 <__retarget_lock_release_recursive>:
 800ee36:	4770      	bx	lr

0800ee38 <memcpy>:
 800ee38:	440a      	add	r2, r1
 800ee3a:	4291      	cmp	r1, r2
 800ee3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee40:	d100      	bne.n	800ee44 <memcpy+0xc>
 800ee42:	4770      	bx	lr
 800ee44:	b510      	push	{r4, lr}
 800ee46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee4e:	4291      	cmp	r1, r2
 800ee50:	d1f9      	bne.n	800ee46 <memcpy+0xe>
 800ee52:	bd10      	pop	{r4, pc}

0800ee54 <_free_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4605      	mov	r5, r0
 800ee58:	2900      	cmp	r1, #0
 800ee5a:	d041      	beq.n	800eee0 <_free_r+0x8c>
 800ee5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee60:	1f0c      	subs	r4, r1, #4
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	bfb8      	it	lt
 800ee66:	18e4      	addlt	r4, r4, r3
 800ee68:	f000 f83e 	bl	800eee8 <__malloc_lock>
 800ee6c:	4a1d      	ldr	r2, [pc, #116]	@ (800eee4 <_free_r+0x90>)
 800ee6e:	6813      	ldr	r3, [r2, #0]
 800ee70:	b933      	cbnz	r3, 800ee80 <_free_r+0x2c>
 800ee72:	6063      	str	r3, [r4, #4]
 800ee74:	6014      	str	r4, [r2, #0]
 800ee76:	4628      	mov	r0, r5
 800ee78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee7c:	f000 b83a 	b.w	800eef4 <__malloc_unlock>
 800ee80:	42a3      	cmp	r3, r4
 800ee82:	d908      	bls.n	800ee96 <_free_r+0x42>
 800ee84:	6820      	ldr	r0, [r4, #0]
 800ee86:	1821      	adds	r1, r4, r0
 800ee88:	428b      	cmp	r3, r1
 800ee8a:	bf01      	itttt	eq
 800ee8c:	6819      	ldreq	r1, [r3, #0]
 800ee8e:	685b      	ldreq	r3, [r3, #4]
 800ee90:	1809      	addeq	r1, r1, r0
 800ee92:	6021      	streq	r1, [r4, #0]
 800ee94:	e7ed      	b.n	800ee72 <_free_r+0x1e>
 800ee96:	461a      	mov	r2, r3
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	b10b      	cbz	r3, 800eea0 <_free_r+0x4c>
 800ee9c:	42a3      	cmp	r3, r4
 800ee9e:	d9fa      	bls.n	800ee96 <_free_r+0x42>
 800eea0:	6811      	ldr	r1, [r2, #0]
 800eea2:	1850      	adds	r0, r2, r1
 800eea4:	42a0      	cmp	r0, r4
 800eea6:	d10b      	bne.n	800eec0 <_free_r+0x6c>
 800eea8:	6820      	ldr	r0, [r4, #0]
 800eeaa:	4401      	add	r1, r0
 800eeac:	1850      	adds	r0, r2, r1
 800eeae:	4283      	cmp	r3, r0
 800eeb0:	6011      	str	r1, [r2, #0]
 800eeb2:	d1e0      	bne.n	800ee76 <_free_r+0x22>
 800eeb4:	6818      	ldr	r0, [r3, #0]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	6053      	str	r3, [r2, #4]
 800eeba:	4408      	add	r0, r1
 800eebc:	6010      	str	r0, [r2, #0]
 800eebe:	e7da      	b.n	800ee76 <_free_r+0x22>
 800eec0:	d902      	bls.n	800eec8 <_free_r+0x74>
 800eec2:	230c      	movs	r3, #12
 800eec4:	602b      	str	r3, [r5, #0]
 800eec6:	e7d6      	b.n	800ee76 <_free_r+0x22>
 800eec8:	6820      	ldr	r0, [r4, #0]
 800eeca:	1821      	adds	r1, r4, r0
 800eecc:	428b      	cmp	r3, r1
 800eece:	bf04      	itt	eq
 800eed0:	6819      	ldreq	r1, [r3, #0]
 800eed2:	685b      	ldreq	r3, [r3, #4]
 800eed4:	6063      	str	r3, [r4, #4]
 800eed6:	bf04      	itt	eq
 800eed8:	1809      	addeq	r1, r1, r0
 800eeda:	6021      	streq	r1, [r4, #0]
 800eedc:	6054      	str	r4, [r2, #4]
 800eede:	e7ca      	b.n	800ee76 <_free_r+0x22>
 800eee0:	bd38      	pop	{r3, r4, r5, pc}
 800eee2:	bf00      	nop
 800eee4:	24004df0 	.word	0x24004df0

0800eee8 <__malloc_lock>:
 800eee8:	4801      	ldr	r0, [pc, #4]	@ (800eef0 <__malloc_lock+0x8>)
 800eeea:	f7ff bfa3 	b.w	800ee34 <__retarget_lock_acquire_recursive>
 800eeee:	bf00      	nop
 800eef0:	24004dec 	.word	0x24004dec

0800eef4 <__malloc_unlock>:
 800eef4:	4801      	ldr	r0, [pc, #4]	@ (800eefc <__malloc_unlock+0x8>)
 800eef6:	f7ff bf9e 	b.w	800ee36 <__retarget_lock_release_recursive>
 800eefa:	bf00      	nop
 800eefc:	24004dec 	.word	0x24004dec

0800ef00 <_init>:
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	bf00      	nop
 800ef04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef06:	bc08      	pop	{r3}
 800ef08:	469e      	mov	lr, r3
 800ef0a:	4770      	bx	lr

0800ef0c <_fini>:
 800ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0e:	bf00      	nop
 800ef10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef12:	bc08      	pop	{r3}
 800ef14:	469e      	mov	lr, r3
 800ef16:	4770      	bx	lr
